void sub_2E10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  _DWORD v15[2];
  __int16 v16;
  void *v17;

  v5 = a2;
  v6 = a3;
  v7 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "_initializeProgress");
  v8 = objc_msgSend(*(id *)(a1 + 32), "sourceFileType");
  switch(v8)
  {
    case 2u:
      objc_msgSend(*(id *)(a1 + 32), "_performMoveFromPath:toPath:", v5, v6);
      break;
    case 1u:
      objc_msgSend(*(id *)(a1 + 32), "_performZipExtractionFromPath:toPath:", v5, v6);
      break;
    case 0u:
      objc_msgSend(*(id *)(a1 + 32), "_performCopyFromPath:toPath:", v5, v6);
      break;
  }
  v9 = *(_BYTE **)(a1 + 32);
  if (v9[24] && objc_msgSend(v9, "fixFilePermissions"))
  {
    v10 = BCIMLog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = objc_msgSend(*(id *)(a1 + 32), "sourceFileType");
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceFilePath"));
      v15[0] = 67109378;
      v15[1] = v12;
      v16 = 2112;
      v17 = v13;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "BKExtractFileOperation main: fixFilePermissions: (type: %d, path: %@)", (uint8_t *)v15, 0x12u);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v6));
    objc_msgSend(*(id *)(a1 + 32), "_fixFilePermissions:", v14);

  }
  objc_autoreleasePoolPop(v7);

}

void sub_2FC0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "path"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationFilePath"));
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);

}

void sub_3024(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "path"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationFilePath"));
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);

}

void sub_3A34(uint64_t a1, void *a2)
{
  id v2;
  unsigned int v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  mode_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  id v17;

  v2 = a2;
  v17 = 0;
  v16 = 0;
  v3 = objc_msgSend(v2, "getResourceValue:forKey:error:", &v17, NSURLIsDirectoryKey, &v16);
  v4 = v17;
  v5 = v16;
  v7 = v5;
  if (!v3)
  {
    v15 = BCIMLog(v5, v6);
    v14 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_7FF9C();
    goto LABEL_10;
  }
  v8 = objc_retainAutorelease(v2);
  v9 = (const char *)objc_msgSend(v8, "fileSystemRepresentation");
  if (objc_msgSend(v4, "BOOLValue"))
    v10 = 504;
  else
    v10 = 432;
  v11 = chmod(v9, v10);
  if ((_DWORD)v11)
  {
    v13 = BCIMLog(v11, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_7FEE4((uint64_t)v8, v4);
LABEL_10:

  }
}

void sub_3EE8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;

  if (a2)
  {
    if (a2 == 2)
    {
      v3 = objc_begin_catch(exception_object);
      v5 = BCIMLog(v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_800BC();

      *(_BYTE *)(v2 + 24) = 0;
      objc_end_catch();
      JUMPOUT(0x3D30);
    }
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_41E8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_41FC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_4248(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_4FF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_5008(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id BKLibraryFrameworkBundle()
{
  if (qword_DE448 != -1)
    dispatch_once(&qword_DE448, &stru_C12D0);
  return (id)qword_DE440;
}

void sub_6B40(id a1)
{
  NSBundle *v1;
  uint64_t v2;
  void *v3;

  v1 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BKLibraryFrameworkBundleLookupClass));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_DE440;
  qword_DE440 = v2;

}

void sub_6DE4(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = a2;
  kdebug_trace(725352656, 0, 0, 0, 0);
  kdebug_trace(725352660, 0, 0, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "quotaFetcher"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_6EF8;
  v8[3] = &unk_C1348;
  v9 = v3;
  v5 = a1[5];
  v6 = a1[4];
  v10 = v5;
  v11 = v6;
  v12 = a1[6];
  v13 = a1[7];
  v7 = v3;
  objc_msgSend(v4, "fetchUserQuotaWithCompletion:", v8);

}

void sub_6EF8(uint64_t a1, char *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  BKLibraryFileSizeManagerCacheItemRequest *v10;
  void *v11;
  void *v12;
  BKLibraryFileSizeManagerCacheItemRequest *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  void *v31;
  id v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  char *v44;
  _QWORD v45[4];
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  char *v51;
  _QWORD block[5];
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];

  v42 = a3;
  kdebug_trace(725352664, 0, 0, 0, 0);
  kdebug_trace(725352668, 0, 0, 0, 0);
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
  if (v5)
  {
    v6 = v5;
    v44 = 0;
    v7 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v55 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)i);
        v10 = [BKLibraryFileSizeManagerCacheItemRequest alloc];
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "assetID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "url"));
        v13 = -[BKLibraryFileSizeManagerCacheItemRequest initWithCacheItemRequestWithAssetID:assetURL:](v10, "initWithCacheItemRequestWithAssetID:assetURL:", v11, v12);

        v14 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryFileSizeManager sharedInstance](BKLibraryFileSizeManager, "sharedInstance"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "synchronousFileSizeForCacheItemRequest:", v13));

        if (v15)
        {
          v16 = (uint64_t)objc_msgSend(v15, "longLongValue");
          v44 += v16 & ~(v16 >> 63);
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
    }
    while (v6);
  }
  else
  {
    v44 = 0;
  }

  kdebug_trace(725352672, 0, 0, 0, 0);
  if (+[BCDevice isInternalInstall](BCDevice, "isInternalInstall"))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "stringForKey:", CFSTR("BKUbiquitySimulateLocalLibrarySize")));

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "stringForKey:", CFSTR("BKUbiquitySimulateQuota")));

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringForKey:", CFSTR("BKUbiquitySimulateStoragePlan")));

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v24 = objc_msgSend(v23, "BOOLForKey:", CFSTR("BKUbiquitySimulateQuotaTimeout"));

    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "stringForKey:", CFSTR("BKUbiquitySimulateNumberOfItemsInCloud")));

  }
  else
  {
    v26 = 0;
    v24 = 0;
    v20 = 0;
    v18 = 0;
    v22 = 0;
  }
  if (objc_msgSend(v18, "length", a1))
  {
    v27 = v41;
    if (((unint64_t)objc_msgSend(v18, "longLongValue") & 0x8000000000000000) == 0)
      v44 = (char *)objc_msgSend(v18, "longLongValue");
  }
  else
  {
    v27 = v41;
  }
  if (objc_msgSend(v20, "length")
    && (v28 = (unint64_t)objc_msgSend(v20, "longLongValue"), v29 = v20, (v28 & 0x8000000000000000) == 0)
    || objc_msgSend(v22, "length")
    && (v30 = (unint64_t)objc_msgSend(v22, "longLongValue"), v29 = v22, (v30 & 0x8000000000000000) == 0))
  {
    a2 = (char *)objc_msgSend(v29, "longLongValue");
  }
  if (v42)
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "domain"));
    if ((objc_msgSend(v31, "isEqualToString:", IMUbiquityQuotaFetcherErrorDomain) & 1) != 0)
    {
      v32 = objc_msgSend(v42, "code");
      v33 = v32 == (id)kIMUbiquityQuotaFetcherErrorQuotaServerUnreachable;

      v34 = 1;
      if (v44 > a2)
        v34 = 2;
      if (v33)
        v34 = 3;
      goto LABEL_34;
    }

  }
  v34 = 1;
  if (v44 > a2)
    v34 = 2;
LABEL_34:
  if (v24)
    v35 = 3;
  else
    v35 = v34;
  dispatch_group_leave(*(dispatch_group_t *)(v27 + 40));
  dispatch_group_wait(*(dispatch_group_t *)(v27 + 40), 0xFFFFFFFFFFFFFFFFLL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_7480;
  block[3] = &unk_C12F8;
  v36 = *(void **)(v27 + 56);
  block[4] = *(_QWORD *)(v27 + 48);
  v53 = v36;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  if (objc_msgSend(v26, "length") && ((unint64_t)objc_msgSend(v26, "longLongValue") & 0x8000000000000000) == 0)
  {
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v26, "longLongValue")));
    objc_msgSend(*(id *)(v27 + 48), "setNumberOfItemsIniCloud:", objc_msgSend(v37, "unsignedIntegerValue"));

  }
  if (v35 == 2)
  {
    if (objc_msgSend(*(id *)(v27 + 48), "numberOfItemsIniCloud"))
      v35 = 1;
    else
      v35 = 2;
  }
  kdebug_trace(725352676, 0, 0, 0, 0);
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[PSCloudStorageQuotaManager sharedManager](PSCloudStorageQuotaManager, "sharedManager"));
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_748C;
  v45[3] = &unk_C1320;
  v46 = v22;
  v39 = *(id *)(v27 + 64);
  v49 = v35;
  v50 = a2;
  v51 = v44;
  v47 = *(_QWORD *)(v27 + 48);
  v48 = v39;
  v40 = v22;
  objc_msgSend(v38, "getQuotaInfoForPrimaryAccountCompletion:", v45);

}

id sub_7480(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "mq_tearDownQuery:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_748C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  kdebug_trace(725352680, 0, 0, 0, 0);
  v4 = objc_msgSend(v3, "totalStorage");

  if (objc_msgSend(*(id *)(a1 + 32), "length")
    && ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "longLongValue") & 0x8000000000000000) == 0)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "longLongValue");
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, BOOL, _QWORD, _QWORD, id))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (unint64_t)v4 > 0xE8D4A50FFFLL, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), objc_msgSend(*(id *)(a1 + 40), "numberOfItemsIniCloud"));
}

void sub_7778(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSString *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ubiquityStatusMonitor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "documentsURL"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "path"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K BEGINSWITH %@"), NSMetadataItemPathKey, v6));
  objc_msgSend(*(id *)(a1 + 40), "setPredicate:", v7);

  v10 = NSMetadataQueryUbiquitousDocumentsScope;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  objc_msgSend(*(id *)(a1 + 40), "setSearchScopes:", v8);

  objc_msgSend(*(id *)(a1 + 40), "setNotificationBatchingInterval:", 0.5);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v9, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "mq_queryDidFinish:", NSMetadataQueryDidFinishGatheringNotification, *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 40), "startQuery");
}

void sub_7EF0(uint64_t a1)
{
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void sub_7F90(uint64_t a1)
{
  dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 8), *(dispatch_block_t *)(a1 + 40));
}

id sub_8338(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  BKLibraryManager *v4;
  void *v5;
  uint8_t v7[16];

  v2 = BKStoreLog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Initializing defaultManager", v7, 2u);
  }

  v4 = objc_opt_new(BKLibraryManager);
  v5 = (void *)qword_DE450;
  qword_DE450 = (uint64_t)v4;

  return objc_msgSend((id)qword_DE450, "_sortAndInitializeDataSources:", *(_QWORD *)(a1 + 32));
}

void sub_8874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Block_object_dispose(&a25, 8);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_88C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_88D4(uint64_t a1)
{

}

void sub_88DC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  id v15;
  __int16 v16;
  void *v17;

  v3 = a2;
  v4 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v5 = objc_sync_enter(v4);
  v6 = BKLibraryLog(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v14 = 138412546;
    v15 = v3;
    v16 = 2112;
    v17 = v10;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "MRP: mrp = %@ (%@)", (uint8_t *)&v14, 0x16u);

  }
  if (v3)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "laterDate:", v3));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
  objc_sync_exit(v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_8A18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_8A8C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  id v32;
  const __CFString *v33;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v33 = CFSTR("purchaseDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1));
  objc_msgSend(v4, "setPropertiesToFetch:", v5);

  objc_msgSend(v4, "setResultType:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForPurchasedBooksAssets"));
  objc_msgSend(v4, "setPredicate:", v6);

  v7 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("purchaseDate"), 0);
  v32 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v32, 1));
  objc_msgSend(v4, "setSortDescriptors:", v8);

  objc_msgSend(v4, "setFetchLimit:", 1);
  v29 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v29));

  v10 = v29;
  v11 = v10;
  if (v10)
  {
    v12 = BKLibraryLog(v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_8037C();
  }
  else if (objc_msgSend(v9, "count"))
  {
    v14 = objc_opt_class(NSDictionary);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    v16 = BUDynamicCast(v14, v15);
    v13 = objc_claimAutoreleasedReturnValue(v16);

    v17 = objc_opt_class(NSDate);
    v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v13, "objectForKeyedSubscript:", CFSTR("purchaseDate")));
    v19 = BUDynamicCast(v17, v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v21, "setObject:forKey:", v20, CFSTR("BKMostRecentPurchaseDateKey"));

    v23 = BKLibraryLog(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v20;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "MRP: update cached mrp = %@", buf, 0xCu);
    }

  }
  else
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
    objc_msgSend(v25, "setObject:forKey:", v26, CFSTR("BKMostRecentPurchaseDateKey"));

    v28 = BKLibraryLog(v27);
    v13 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "MRP: no library purchases", buf, 2u);
    }
  }

}

void sub_9A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_9AA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_setupCoreDataStack");
}

void sub_9AB0(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_9B18;
  block[3] = &unk_C1400;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_9B18(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_persistentStoreDidMigrate");
}

void sub_9B20(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionManager"));
  objc_msgSend(v4, "setupDefaultCollectionsInManagedObjectContext:", v3);

}

void sub_9B6C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_reloadWithCompletion:", v3);

}

void sub_9BB4(id a1, NSString *a2)
{
  NSString *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = BKLibraryLog(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    sub_80468((uint64_t)v2, v4);

}

uint64_t sub_A0B0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  kdebug_trace(725353716, 42, 0, 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "_cleanUpOrphanedSampleAssets:", v3);

  return kdebug_trace(725353716, 43, 0, 0, 0);
}

void sub_A800(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionManager"));
  objc_msgSend(v4, "setupDefaultCollectionsInManagedObjectContext:", v3);

}

void sub_A84C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  v3 = a2;
  kdebug_trace(725353716, 44, 0, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionManager"));
  objc_msgSend(v4, "updateCollectionMemberAssetLinksInMOCForUpgrade:", v3);

  v5 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "_compareVersionWith:", CFSTR("1.8")) == (char *)&dword_0 + 1)
  {
    v6 = kBKCollectionDefaultIDBooks;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_assetIDsForCollectionID:moc:", kBKCollectionDefaultIDBooks, v3));
    v7 = BKLibraryLog(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v11 = 134217984;
      v12 = objc_msgSend(v5, "count");
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "My Books: Migrating Persistent Store Books collection. Found %lu assets in Books collection", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_removeAllMembersFromCollection:moc:", v6, v3);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionManager"));
  objc_msgSend(v9, "resetAllAssetsCollectionsWithLibraryManagedObjectContext:completion:", v3, 0);

  objc_msgSend(*(id *)(a1 + 32), "_updateRelationshipsInContext:", v3);
  objc_msgSend(*(id *)(a1 + 32), "_resetNilAuthorsOnAllBooksInContext:", v3);
  objc_msgSend(*(id *)(a1 + 32), "_resetNilAuthorsOnAllSeriesInContext:", v3);
  objc_msgSend(*(id *)(a1 + 32), "migrateToMyBooksWithAssetIDs:inManagedObjectContext:", v5, v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionManager"));
  objc_msgSend(v10, "clearSortKeysFromAssetsInMOCForUpgrade:", v3);

  kdebug_trace(725353716, 45, 0, 0, 0);
}

void sub_B31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_B378(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (byte_DE460 & 1) == 0;
  byte_DE460 = 1;
  return result;
}

void sub_B39C(id a1)
{
  byte_DE460 = 0;
}

id sub_B708(uint64_t a1)
{
  NSObject *v2;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatesScheduleQueue"));
  dispatch_suspend(v2);

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  return _objc_msgSend(*(id *)(a1 + 40), "finishedWithOperations");
}

void sub_B74C(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatesScheduleQueue"));
  dispatch_resume(v1);

}

BKLibraryManagedObjectContext *sub_BD4C(uint64_t a1)
{
  BKLibraryManagedObjectContext *v2;
  void *v3;

  v2 = -[BKLibraryManagedObjectContext initWithConcurrencyType:]([BKLibraryManagedObjectContext alloc], "initWithConcurrencyType:", 1);
  -[BKLibraryManagedObjectContext setName:](v2, "setName:", CFSTR("Background R/O Context"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinator"));
  -[BKLibraryManagedObjectContext setPersistentStoreCoordinator:](v2, "setPersistentStoreCoordinator:", v3);

  -[BKLibraryManagedObjectContext setUndoManager:](v2, "setUndoManager:", 0);
  -[BKLibraryManagedObjectContext setMergePolicy:](v2, "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
  -[BKLibraryManagedObjectContext setLibraryManager:](v2, "setLibraryManager:", *(_QWORD *)(a1 + 32));
  return v2;
}

id sub_C70C(void *a1, void *a2)
{
  if (a1)
    a1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectAtIndexedSubscript:", __clz(__rbit64((unint64_t)a1))));
  return a1;
}

void sub_C95C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

}

void sub_C99C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

}

void sub_CBA8(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
  v4 = objc_msgSend(v3, "hasChanges");

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
    objc_msgSend(v5, "setSaveContext:", 1);

    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
    objc_msgSend(v6, "save:", 0);

  }
}

void sub_CC5C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

}

void sub_CE68(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
  v4 = objc_msgSend(v3, "hasChanges");

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
    objc_msgSend(v5, "setSaveContext:", 1);

    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
    objc_msgSend(v6, "save:", 0);

  }
}

void sub_CF1C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

}

void sub_D218(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
  v4 = objc_msgSend(v3, "hasChanges");

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
    objc_msgSend(v5, "setSaveContext:", 1);

    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiChildContext"));
    objc_msgSend(v6, "save:", 0);

  }
}

void sub_D2CC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

}

void sub_D30C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  objc_msgSend(v2, "mergeChangesFromContextDidSaveNotification:", *(_QWORD *)(a1 + 40));

}

void sub_D45C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  void (**v6)(id, void *);
  void *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v2 = BCSignpostLibrary();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CollectionsQueueAsync", "", buf, 2u);
  }

  v6 = (void (**)(id, void *))objc_retainBlock(*(id *)(a1 + 40));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
    v6[2](v6, v7);

  }
  v8 = BCSignpostLibrary();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)v17 = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v10, OS_SIGNPOST_INTERVAL_END, v11, "CollectionsQueueAsync", "", v17, 2u);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  v13 = objc_msgSend(v12, "hasChanges");

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
    v16 = 0;
    objc_msgSend(v14, "save:", &v16);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  objc_msgSend(v15, "setSessionContextType:", 0);

}

void sub_D724(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  void (**v6)(id, void *);
  void *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v2 = BCSignpostLibrary();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CollectionsQueueSync", "", buf, 2u);
  }

  v6 = (void (**)(id, void *))objc_retainBlock(*(id *)(a1 + 40));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
    v6[2](v6, v7);

  }
  v8 = BCSignpostLibrary();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)v17 = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v10, OS_SIGNPOST_INTERVAL_END, v11, "CollectionsQueueSync", "", v17, 2u);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  v13 = objc_msgSend(v12, "hasChanges");

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
    v16 = 0;
    objc_msgSend(v14, "save:", &v16);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  objc_msgSend(v15, "setSessionContextType:", 0);

}

void sub_DA24(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  v2 = BCSignpostLibrary();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = BCSignpostLibrary();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v21 = v8;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "WorkerQueueAsync", "%{public}@", buf, 0xCu);
  }

  v9 = *(_QWORD *)(a1 + 48);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

  v11 = BCSignpostLibrary();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    v14 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v21 = v14;
    _os_signpost_emit_with_name_impl(&dword_0, v13, OS_SIGNPOST_INTERVAL_END, v4, "WorkerQueueAsync", "%{public}@", buf, 0xCu);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
  v16 = objc_msgSend(v15, "hasChanges");

  if (v16)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
    v19 = 0;
    objc_msgSend(v17, "save:", &v19);

  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
  objc_msgSend(v18, "setSessionContextType:", 0);

}

void sub_DDA8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  v2 = BCSignpostLibrary();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = os_signpost_id_generate(v3);

  v5 = BCSignpostLibrary();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v21 = v8;
    _os_signpost_emit_with_name_impl(&dword_0, v7, OS_SIGNPOST_INTERVAL_BEGIN, v4, "WorkerQueueSync", "%{public}@", buf, 0xCu);
  }

  v9 = *(_QWORD *)(a1 + 48);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

  v11 = BCSignpostLibrary();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    v14 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v21 = v14;
    _os_signpost_emit_with_name_impl(&dword_0, v13, OS_SIGNPOST_INTERVAL_END, v4, "WorkerQueueSync", "%{public}@", buf, 0xCu);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
  v16 = objc_msgSend(v15, "hasChanges");

  if (v16)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
    v19 = 0;
    objc_msgSend(v17, "save:", &v19);

  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerChildContext"));
  objc_msgSend(v18, "setSessionContextType:", 0);

}

uint64_t sub_E138(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

intptr_t sub_E208(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_E668(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint8_t v17[8];
  _QWORD v18[2];
  _QWORD v19[2];

  v6 = a2;
  v7 = a4;
  v8 = v7;
  if (v7)
  {
    v9 = BKLibraryLog(v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_80694();

  }
  if (v6 && (v11 = objc_msgSend(v6, "BOOLValue"), !(_DWORD)v11))
  {
    v16 = BKLibraryLog(v11);
    v14 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Skip updating series info, becasue server said so.", v17, 2u);
    }
  }
  else
  {
    v18[0] = BKSeriesManagerSeriesTypeBookSeries;
    v12 = objc_msgSend(a1[4], "copy");
    v19[0] = v12;
    v18[1] = BKSeriesManagerSeriesTypeAudiobookSeries;
    v13 = objc_msgSend(a1[5], "copy");
    v19[1] = v13;
    v14 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 2));

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "seriesManager"));
    objc_msgSend(v15, "updateSeriesForSeriesAdamIDsWithTypes:forceCheck:", v14, 0);

  }
}

void sub_ED34(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "checkOwnedSingleBookSeriesWithManagedObjectContext:", v4);
  objc_msgSend(*(id *)(a1 + 32), "checkNonSeriesAudiobooksWithManagedObjectContext:", v4);

}

void sub_F41C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  void *i;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  _QWORD v53[2];

  v37 = a2;
  objc_msgSend(v37, "setSessionContextType:", 1);
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKCollectionMember")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithValue:](NSPredicate, "predicateWithValue:", 1));
  objc_msgSend(v3, "setPredicate:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("assetID"), 1));
  v53[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("collection.collectionID"), 1));
  v53[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v53, 2));
  objc_msgSend(v3, "setSortDescriptors:", v7);

  objc_msgSend(v3, "setFetchBatchSize:", 32);
  v41 = a1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionsWorkerChildContext"));
  v36 = v3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "executeFetchRequest:error:", v3, 0));

  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
  v39 = v10;
  if (!v11)
  {
    v13 = 0;
    v14 = &stru_C40E8;
    v15 = &stru_C40E8;
    goto LABEL_26;
  }
  v12 = v11;
  v13 = 0;
  v42 = *(_QWORD *)v48;
  v14 = &stru_C40E8;
  v15 = &stru_C40E8;
  do
  {
    v16 = 0;
    do
    {
      v17 = v15;
      v18 = v14;
      if (*(_QWORD *)v48 != v42)
        objc_enumerationMutation(v10);
      v19 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)v16);
      v15 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "assetID"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "collection"));
      v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "collectionID"));
      v14 = (__CFString *)v21;
      if (!v13
        || (v15 ? (v22 = v21 == 0) : (v22 = 1),
            v22
         || !-[__CFString isEqualToString:](v15, "isEqualToString:", v17)
         || !-[__CFString isEqualToString:](v14, "isEqualToString:", v18)))
      {
        v27 = v19;

        v13 = v27;
        goto LABEL_18;
      }
      v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "sortKey"));
      if (!v23)
      {
LABEL_21:
        objc_msgSend(v40, "addObject:", v19);
        goto LABEL_22;
      }
      v24 = (void *)v23;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "localModDate"));
      if (v25)
      {

      }
      else
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localModDate"));

        if (v38)
          goto LABEL_21;
      }
      objc_msgSend(v40, "addObject:", v13);
      v26 = v19;

      v13 = v26;
LABEL_22:
      v10 = v39;
LABEL_18:

      v16 = (char *)v16 + 1;
    }
    while (v12 != v16);
    v28 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
    v12 = v28;
  }
  while (v28);
LABEL_26:

  if (objc_msgSend(v40, "count"))
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v29 = v40;
    v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    if (v30)
    {
      v31 = v30;
      v32 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v31; i = (char *)i + 1)
        {
          if (*(_QWORD *)v44 != v32)
            objc_enumerationMutation(v29);
          v34 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v41 + 32), "collectionsWorkerChildContext"));
          objc_msgSend(v35, "deleteObject:", v34);

        }
        v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
      }
      while (v31);
    }

    v10 = v39;
  }

}

void sub_FF98(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  _UNKNOWN **v55;
  void *v56;
  void *v57;
  id v58;
  _UNKNOWN **v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  NSObject *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  char *v84;
  void *v85;
  void *v86;
  char *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  id v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  NSObject *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  id v126;
  uint64_t v127;
  NSObject *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  char *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  id v146;
  BOOL v147;
  uint64_t v148;
  void *v149;
  void *v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  char *v158;
  void *v159;
  void *v160;
  char *v161;
  void *v162;
  char *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  unsigned int v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  uint64_t v206;
  id v207;
  id obj;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  id v214;
  id v215;
  id v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  id v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _BYTE v226[128];
  _BYTE v227[16];
  _QWORD v228[2];
  _QWORD v229[2];
  uint8_t buf[4];
  void *v231;
  __int16 v232;
  id v233;
  _QWORD v234[2];
  _BYTE v235[128];
  _QWORD v236[2];
  _QWORD v237[2];
  _QWORD v238[3];
  _QWORD v239[5];
  _QWORD v240[2];
  _QWORD v241[2];
  _QWORD v242[2];
  _QWORD v243[2];
  _QWORD v244[2];
  _QWORD v245[2];
  _QWORD v246[7];
  _BYTE v247[128];

  if (objc_msgSend(*(id *)(a1 + 32), "count") || objc_msgSend(*(id *)(a1 + 40), "resetSeriesOnAllBooks"))
  {
    kdebug_trace(725353716, 8, 0, 0, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
    objc_msgSend(v2, "refreshAllObjects");

    if (objc_msgSend(*(id *)(a1 + 32), "count"))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKLibraryAsset")));
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("seriesID IN %@ AND author == %@ AND contentType == %@"), *(_QWORD *)(a1 + 32), CFSTR("UnknownAuthor"), &off_C9D90));
      objc_msgSend(v3, "setPredicate:", v4);

      objc_msgSend(v3, "setFetchBatchSize:", 64);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v3, 0));

      v224 = 0u;
      v225 = 0u;
      v222 = 0u;
      v223 = 0u;
      v7 = v6;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v222, v247, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v223;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v223 != v10)
              objc_enumerationMutation(v7);
            objc_msgSend(*(id *)(a1 + 40), "_updateAuthorForSeriesContainer:", *(_QWORD *)(*((_QWORD *)&v222 + 1) + 8 * (_QWORD)i));
          }
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v222, v247, 16);
        }
        while (v9);
      }

    }
    v190 = objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForLocalOrDownloadingLibraryAssets](BKLibraryManager, "predicateForLocalOrDownloadingLibraryAssets"));
    v191 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predicateForPurchasedBooksAssets"));
    v12 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("(%K != NULL OR %K != NULL)"), CFSTR("purchasedAndLocalParent"), CFSTR("localOnlySeriesItemsParent")));
    v13 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("(%K = NULL AND %K.@count > 0) OR (ANY %K.%K > %K)"), CFSTR("purchaseDate"), CFSTR("purchasedAndLocalSeriesItems"), CFSTR("purchasedAndLocalSeriesItems"), CFSTR("purchaseDate"), CFSTR("purchaseDate")));
    v14 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("(%K = NULL AND %K.@count > 0) OR (ANY %K.%K > %K)"), CFSTR("modificationDate"), CFSTR("purchasedAndLocalSeriesItems"), CFSTR("purchasedAndLocalSeriesItems"), CFSTR("modificationDate"), CFSTR("modificationDate")));
    v15 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("(%K = NULL AND %K.@count > 0) OR (ANY %K.%K > %K)"), CFSTR("lastOpenDate"), CFSTR("purchasedAndLocalSeriesItems"), CFSTR("purchasedAndLocalSeriesItems"), CFSTR("lastOpenDate"), CFSTR("lastOpenDate")));
    v16 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("(%K == 0 OR %K == NULL) AND (ANY %K.%K == 1)"), CFSTR("isNew"), CFSTR("isNew"), CFSTR("localOnlySeriesItems"), CFSTR("isNew")));
    v17 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == 1 AND NOT (ANY %K.%K == 1)"), CFSTR("isNew"), CFSTR("localOnlySeriesItems"), CFSTR("isNew")));
    v18 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == NULL OR %K == 0"), CFSTR("seriesStackIDs"), CFSTR("seriesStackIDs")));
    v201 = (void *)v13;
    v202 = (void *)v12;
    v246[0] = v12;
    v199 = (void *)v15;
    v200 = (void *)v14;
    v246[1] = v14;
    v246[2] = v15;
    v246[3] = v13;
    v194 = (void *)v17;
    v195 = (void *)v16;
    v246[4] = v16;
    v246[5] = v17;
    v187 = (void *)v18;
    v246[6] = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v246, 7));
    v20 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v19));

    v189 = (void *)v20;
    v245[0] = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predicateForContainerLibraryAssets"));
    v245[1] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v245, 2));
    v203 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v22));

    v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("purchasedAndLocalParent == NULL OR purchasedAndLocalParent == 0")));
    v244[0] = v186;
    v244[1] = v191;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v244, 2));
    v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v23));

    v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("localOnlySeriesItemsParent == NULL OR localOnlySeriesItemsParent == 0")));
    v243[0] = v185;
    v243[1] = v190;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v243, 2));
    v25 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v24));

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predicateForUnownedSeriesLibraryAssets"));
    v242[0] = v26;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForInTheCloudLibraryAssets](BKLibraryManager, "predicateForInTheCloudLibraryAssets"));
    v242[1] = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v242, 2));
    v29 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v28));

    v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("localOnlySeriesItemsParent != NULL AND localOnlySeriesItemsParent != 0")));
    v184 = (void *)v29;
    v241[0] = v29;
    v241[1] = v183;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v241, 2));
    v31 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v30));

    v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predicateForUnownedSeriesLibraryAssets"));
    v33 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("purchasedAndLocalParent != NULL AND purchasedAndLocalParent != 0")));
    v188 = (void *)v32;
    v240[0] = v32;
    v182 = (void *)v33;
    v240[1] = v33;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v240, 2));
    v35 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v34));

    v36 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("seriesContainer == NULL OR seriesContainer == 0")));
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKLibraryAsset")));
    v38 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K != NULL AND %K != 0"), CFSTR("seriesID"), CFSTR("seriesID")));
    v192 = (void *)v25;
    v239[0] = v25;
    v239[1] = v193;
    v197 = (void *)v35;
    v198 = (void *)v31;
    v239[2] = v31;
    v239[3] = v35;
    v196 = (void *)v36;
    v239[4] = v36;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v239, 5));
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v39));

    v238[0] = v40;
    v181 = (void *)v38;
    v238[1] = v38;
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predicateForExcludingContainerLibraryAssets"));
    v238[2] = v41;
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v238, 3));
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v42));

    v237[0] = v43;
    v237[1] = v203;
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v237, 2));
    v45 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v44));

    v180 = (void *)v45;
    if (objc_msgSend(*(id *)(a1 + 40), "resetSeriesOnAllBooks"))
    {
      objc_msgSend(v37, "setPredicate:", v45);
      objc_msgSend(*(id *)(a1 + 40), "setResetSeriesOnAllBooks:", 0);
    }
    else
    {
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), CFSTR("seriesID"), *(_QWORD *)(a1 + 32)));
      v236[0] = v46;
      v236[1] = v45;
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v236, 2));
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v47));
      objc_msgSend(v37, "setPredicate:", v48);

    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
    v221 = 0;
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "executeFetchRequest:error:", v37, &v221));
    v51 = v221;

    v204 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v205 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v52 = BKLibraryLog(v205);
    v53 = objc_claimAutoreleasedReturnValue(v52);
    v54 = v53;
    v55 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
    v56 = (void *)v191;
    v57 = v189;
    v179 = v51;
    if (v50)
    {
      v176 = v43;
      v177 = v40;
      v178 = v37;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        sub_80830(v50, v54);

      v219 = 0u;
      v220 = 0u;
      v217 = 0u;
      v218 = 0u;
      v175 = v50;
      obj = v50;
      v58 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v217, v235, 16);
      v59 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
      if (v58)
      {
        v60 = v58;
        v61 = *(_QWORD *)v218;
        v206 = *(_QWORD *)v218;
        do
        {
          v62 = 0;
          v207 = v60;
          do
          {
            if (*(_QWORD *)v218 != v61)
              objc_enumerationMutation(obj);
            v63 = *(void **)(*((_QWORD *)&v217 + 1) + 8 * (_QWORD)v62);
            if (v63)
            {
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v217 + 1)
                                                                                 + 8 * (_QWORD)v62), "seriesID"));

              if (v64)
              {
                if (objc_msgSend(v63, "isContainer"))
                {
                  if ((objc_msgSend(v63, "isNew") & 1) == 0
                    && objc_msgSend(v195, "evaluateWithObject:", v63))
                  {
                    objc_msgSend(v63, "setIsNew:", 1);
                  }
                  if (objc_msgSend(v63, "isNew")
                    && objc_msgSend(v194, "evaluateWithObject:", v63))
                  {
                    objc_msgSend(v63, "setIsNew:", 0);
                  }
                  if (objc_msgSend(v202, "evaluateWithObject:", v63))
                  {
                    objc_msgSend(v63, "setDifferentObject:forKey:", 0, CFSTR("purchasedAndLocalParent"));
                    objc_msgSend(v63, "setDifferentObject:forKey:", 0, CFSTR("localOnlySeriesItemsParent"));
                  }
                  if (objc_msgSend(v200, "evaluateWithObject:", v63))
                  {
                    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55[323], "fetchRequestWithEntityName:", CFSTR("BKLibraryAsset")));
                    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59[341], "predicateWithFormat:", CFSTR("%K = %@ AND (%K != NULL OR %K != NULL)"), CFSTR("purchasedAndLocalParent"), v63, CFSTR("modificationDate"), CFSTR("creationDate")));
                    objc_msgSend(v65, "setPredicate:", v66);

                    objc_msgSend(v65, "setFetchLimit:", 1);
                    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("modificationDate"), 0));
                    v234[0] = v67;
                    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("creationDate"), 0));
                    v234[1] = v68;
                    v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v234, 2));
                    objc_msgSend(v65, "setSortDescriptors:", v69);

                    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
                    v216 = 0;
                    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "executeFetchRequest:error:", v65, &v216));
                    v72 = v216;

                    if (v71)
                    {
                      v74 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "firstObject"));
                      v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject modificationDate](v74, "modificationDate"));
                      if (v75)
                      {
                        objc_msgSend(v63, "setModificationDate:", v75);
                      }
                      else
                      {
                        v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "firstObject"));
                        v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "creationDate"));
                        objc_msgSend(v63, "setModificationDate:", v103);

                        v59 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                      }

                    }
                    else
                    {
                      v99 = BKLibraryLog(v73);
                      v74 = objc_claimAutoreleasedReturnValue(v99);
                      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412546;
                        v231 = v63;
                        v232 = 2112;
                        v233 = v72;
                        _os_log_error_impl(&dword_0, v74, OS_LOG_TYPE_ERROR, "Error fetching modification date for %@ - %@", buf, 0x16u);
                      }
                    }

                    v55 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                    v60 = v207;
                  }
                  if (objc_msgSend(v199, "evaluateWithObject:", v63))
                  {
                    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55[323], "fetchRequestWithEntityName:", CFSTR("BKLibraryAsset")));
                    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59[341], "predicateWithFormat:", CFSTR("%K = %@ AND (%K != NULL OR %K != NULL)"), CFSTR("purchasedAndLocalParent"), v63, CFSTR("lastOpenDate"), CFSTR("creationDate")));
                    objc_msgSend(v104, "setPredicate:", v105);

                    objc_msgSend(v104, "setFetchLimit:", 1);
                    v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("lastOpenDate"), 0));
                    v229[0] = v106;
                    v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("creationDate"), 0));
                    v229[1] = v107;
                    v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v229, 2));
                    objc_msgSend(v104, "setSortDescriptors:", v108);

                    v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
                    v215 = 0;
                    v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "executeFetchRequest:error:", v104, &v215));
                    v111 = v215;

                    if (v110)
                    {
                      v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "firstObject"));
                      v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "lastOpenDate"));
                      v115 = v114;
                      if (v114)
                      {
                        v116 = v114;
                      }
                      else
                      {
                        v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "firstObject"));
                        v116 = objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "creationDate"));

                        v59 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                      }

                      objc_msgSend(v63, "nonUserUpdateLastOpenDateTo:", v116);
                    }
                    else
                    {
                      v117 = BKLibraryLog(v112);
                      v116 = objc_claimAutoreleasedReturnValue(v117);
                      if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412546;
                        v231 = v63;
                        v232 = 2112;
                        v233 = v111;
                        _os_log_error_impl(&dword_0, v116, OS_LOG_TYPE_ERROR, "Error fetching lastOpenDate date for %@ - %@", buf, 0x16u);
                      }
                    }

                    v55 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                    v60 = v207;
                  }
                  if (objc_msgSend(v201, "evaluateWithObject:", v63))
                  {
                    v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55[323], "fetchRequestWithEntityName:", CFSTR("BKLibraryAsset")));
                    v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59[341], "predicateWithFormat:", CFSTR("%K = %@ AND (%K != NULL OR %K != NULL)"), CFSTR("purchasedAndLocalParent"), v63, CFSTR("purchaseDate"), CFSTR("creationDate")));
                    objc_msgSend(v119, "setPredicate:", v120);

                    objc_msgSend(v119, "setFetchLimit:", 1);
                    v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("purchaseDate"), 0));
                    v228[0] = v121;
                    v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("creationDate"), 0));
                    v228[1] = v122;
                    v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v228, 2));
                    objc_msgSend(v119, "setSortDescriptors:", v123);

                    v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
                    v214 = 0;
                    v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "executeFetchRequest:error:", v119, &v214));
                    v126 = v214;

                    if (v125)
                    {
                      v128 = objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "firstObject"));
                      v129 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject purchaseDate](v128, "purchaseDate"));
                      if (v129)
                      {
                        objc_msgSend(v63, "setPurchaseDate:", v129);
                      }
                      else
                      {
                        v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "firstObject"));
                        v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "creationDate"));
                        objc_msgSend(v63, "setPurchaseDate:", v132);

                        v59 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                      }

                    }
                    else
                    {
                      v130 = BKLibraryLog(v127);
                      v128 = objc_claimAutoreleasedReturnValue(v130);
                      if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412546;
                        v231 = v63;
                        v232 = 2112;
                        v233 = v126;
                        _os_log_error_impl(&dword_0, v128, OS_LOG_TYPE_ERROR, "Error fetching modification date for %@ - %@", buf, 0x16u);
                      }
                    }

                    v55 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                    v60 = v207;
                  }
                  v61 = v206;
                  if (objc_msgSend(v203, "evaluateWithObject:", v63))
                    objc_msgSend(*(id *)(a1 + 40), "updateSeriesContainerSeriesStackAssetIDs:", v63);
                  goto LABEL_106;
                }
                v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "seriesID"));
                v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v204, "objectForKeyedSubscript:", v76));

                if (!v77)
                {
                  v78 = *(void **)(a1 + 40);
                  v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "seriesID"));
                  v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
                  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "seriesContainerForSeriesID:inManagedObjectContext:", v79, v80));

                  if (v77)
                  {
                    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "seriesID"));
                    objc_msgSend(v204, "setObject:forKeyedSubscript:", v77, v82);

                    goto LABEL_41;
                  }
                  v100 = BKLibraryLog(v81);
                  v101 = objc_claimAutoreleasedReturnValue(v100);
                  if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                    sub_807E0((uint64_t)v227, (uint64_t)v63);
                  v77 = 0;
LABEL_100:

                  goto LABEL_101;
                }
LABEL_41:
                if ((objc_msgSend(v196, "evaluateWithObject:", v63) & 1) != 0
                  || (objc_msgSend(v193, "evaluateWithObject:", v63) & 1) != 0
                  || objc_msgSend(v192, "evaluateWithObject:", v63))
                {
                  v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "purchasedAndLocalSeriesItems"));
                  v84 = (char *)objc_msgSend(v83, "count");

                  if (v84 == (_BYTE *)&dword_0 + 1)
                  {
                    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "purchasedAndLocalSeriesItems"));
                    goto LABEL_48;
                  }
                  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "localOnlySeriesItems"));
                  v87 = (char *)objc_msgSend(v86, "count");

                  if (v87 == (_BYTE *)&dword_0 + 1)
                  {
                    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "localOnlySeriesItems"));
LABEL_48:
                    v88 = v85;
                    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "anyObject"));

                    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "assetID"));
                    objc_msgSend(v89, "setAssetID:", v90);

                  }
                  objc_msgSend(*(id *)(a1 + 40), "updateSeriesRelationshipsForSeriesAsset:", v63);
                  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "seriesID"));
                  objc_msgSend(v205, "setObject:forKeyedSubscript:", v77, v91);

                }
                if ((objc_msgSend(v63, "isContainer") & 1) == 0
                  && (objc_msgSend(v63, "isSeriesItem") & 1) == 0)
                {
                  v92 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "modificationDate"));
                  if (v92)
                  {
                    v93 = (void *)v92;
                    v94 = objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "modificationDate"));
                    if (v94)
                    {
                      v95 = (void *)v94;
                      v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "modificationDate"));
                      v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "modificationDate"));
                      v98 = (char *)objc_msgSend(v96, "compare:", v97);

                      v59 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                      v147 = v98 == (_BYTE *)&dword_0 + 1;
                      v60 = v207;
                      if (!v147)
                        goto LABEL_86;
                    }
                    else
                    {

                    }
                    v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "modificationDate"));
                    objc_msgSend(v77, "setModificationDate:", v133);

                  }
                }
LABEL_86:
                v134 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "purchaseDate"));
                if (v134)
                {
                  v135 = (void *)v134;
                  v136 = objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "purchaseDate"));
                  if (v136)
                  {
                    v137 = (void *)v136;
                    v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "purchaseDate"));
                    v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "purchaseDate"));
                    v140 = (char *)objc_msgSend(v138, "compare:", v139);

                    v59 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
                    v147 = v140 == (_BYTE *)&dword_0 + 1;
                    v60 = v207;
                    if (!v147)
                      goto LABEL_92;
                  }
                  else
                  {

                  }
                  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "purchaseDate"));
                  objc_msgSend(v77, "setPurchaseDate:", v141);

                }
LABEL_92:
                if (objc_msgSend(v77, "isNew"))
                {
                  v101 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55[323], "fetchRequestWithEntityName:", CFSTR("BKLibraryAsset")));
                  v142 = v59[341];
                  v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "localOnlySeriesItems"));
                  v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "predicateWithFormat:", CFSTR("self IN %@ AND (%K == 1) AND (%K == %@)"), v143, CFSTR("isNew"), CFSTR("state"), &off_C9DC0));
                  -[NSObject setPredicate:](v101, "setPredicate:", v144);

                  v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
                  v213 = 0;
                  v146 = objc_msgSend(v145, "countForFetchRequest:error:", v101, &v213);

                  if (v146)
                    v147 = v146 == (id)0x7FFFFFFFFFFFFFFFLL;
                  else
                    v147 = 1;
                  v148 = !v147;
                  objc_msgSend(v77, "setIsNew:", v148);
                  goto LABEL_100;
                }
LABEL_101:
                v61 = v206;
                if (objc_msgSend(v197, "evaluateWithObject:", v63))
                {
                  objc_msgSend(v63, "setPurchasedAndLocalParent:", 0);
                  v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "seriesID"));
                  objc_msgSend(v205, "setObject:forKeyedSubscript:", v77, v149);

                }
                if (objc_msgSend(v198, "evaluateWithObject:", v63))
                {
                  objc_msgSend(v63, "setLocalOnlySeriesItemsParent:", 0);
                  v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "seriesID"));
                  objc_msgSend(v205, "setObject:forKeyedSubscript:", v77, v150);

                }
              }
            }
LABEL_106:
            v62 = (char *)v62 + 1;
          }
          while (v60 != v62);
          v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v217, v235, 16);
        }
        while (v60);
      }

      v211 = 0u;
      v212 = 0u;
      v209 = 0u;
      v210 = 0u;
      v151 = v205;
      v152 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v209, v226, 16);
      if (!v152)
        goto LABEL_122;
      v153 = v152;
      v154 = *(_QWORD *)v210;
LABEL_110:
      v155 = 0;
      while (1)
      {
        if (*(_QWORD *)v210 != v154)
          objc_enumerationMutation(v151);
        v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v209 + 1) + 8 * v155)));
        objc_msgSend(*(id *)(a1 + 40), "_updateAuthorForSeriesContainer:", v156);
        v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "seriesBooks"));
        v158 = (char *)objc_msgSend(v157, "count");

        if (v158 == (_BYTE *)&dword_0 + 1)
          break;
        v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "purchasedAndLocalSeriesItems"));
        v161 = (char *)objc_msgSend(v160, "count");

        if (v161 == (_BYTE *)&dword_0 + 1)
        {
          v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "purchasedAndLocalSeriesItems"));
          goto LABEL_119;
        }
        v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "localOnlySeriesItems"));
        v163 = (char *)objc_msgSend(v162, "count");

        if (v163 == (_BYTE *)&dword_0 + 1)
        {
          v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "localOnlySeriesItems"));
          goto LABEL_119;
        }
LABEL_120:

        if (v153 == (id)++v155)
        {
          v153 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v209, v226, 16);
          if (!v153)
          {
LABEL_122:

            v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
            objc_msgSend(v167, "processPendingChanges");

            v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
            v169 = objc_msgSend(v168, "hasChanges");

            v170 = (void *)v190;
            v56 = (void *)v191;
            v171 = v188;
            v57 = v189;
            v40 = v177;
            v37 = v178;
            v50 = v175;
            v43 = v176;
            if (v169)
            {
              v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "collectionController"));
              v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
              v173 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject gatherChangedAssetsCollectionsWithLibraryMoc:](v54, "gatherChangedAssetsCollectionsWithLibraryMoc:", v172));

              v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "usq_moc"));
              objc_msgSend(v174, "save:", 0);

              -[NSObject processGatheredChangedAssetsCollections:](v54, "processGatheredChangedAssetsCollections:", v173);
              v56 = (void *)v191;
              v57 = v189;
              goto LABEL_126;
            }
            goto LABEL_127;
          }
          goto LABEL_110;
        }
      }
      v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "seriesBooks"));
LABEL_119:
      v164 = v159;
      v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "anyObject"));

      v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v165, "assetID"));
      objc_msgSend(v165, "setAssetID:", v166);

      goto LABEL_120;
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      sub_80780();
LABEL_126:
    v171 = v188;

    v170 = (void *)v190;
LABEL_127:
    kdebug_trace(725353716, 9, 0, 0, 0);

  }
}

void sub_11C24(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  __CFString *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  void *j;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  const __CFString *v48;
  uint64_t v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  void *v57;
  __CFString *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  id obj;
  id obja;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  id v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  id v95;
  id v96;
  uint8_t buf[4];
  void *v98;
  __int16 v99;
  const __CFString *v100;
  __int16 v101;
  void *v102;
  __int16 v103;
  void *v104;
  __int16 v105;
  void *v106;
  _BYTE v107[128];
  _BYTE v108[128];
  _BYTE v109[128];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v96 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v96));
  v6 = v96;
  v7 = *(_QWORD *)(a1 + 40);
  v95 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v7, &v95));
  v9 = v95;

  if (v5)
  {
    v62 = v8;
    v63 = v9;
    v65 = v3;
    v76 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v64 = v5;
    obj = v5;
    v70 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v109, 16);
    if (v70)
    {
      v74 = 0;
      v75 = 0;
      v68 = *(_QWORD *)v92;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v92 != v68)
            objc_enumerationMutation(obj);
          v72 = v11;
          v12 = *(id *)(*((_QWORD *)&v91 + 1) + 8 * v11);
          v87 = 0u;
          v88 = 0u;
          v89 = 0u;
          v90 = 0u;
          v77 = v12;
          v79 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "members"));
          v13 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v87, v108, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v88;
            do
            {
              for (i = 0; i != v14; i = (char *)i + 1)
              {
                if (*(_QWORD *)v88 != v15)
                  objc_enumerationMutation(v79);
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v87 + 1)
                                                                                   + 8 * (_QWORD)i), "asset"));
                if (objc_msgSend(v17, "isValid"))
                {
                  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "collectionID"));
                  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "objectForKey:", v18));
                  if (!v19)
                  {
                    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
                    objc_msgSend(v81, "setObject:forKey:", v19, v18);
                  }
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("BookCount")));
                  v21 = (char *)objc_msgSend(v20, "unsignedIntegerValue");

                  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v21 + 1));
                  objc_msgSend(v19, "setObject:forKey:", v22, CFSTR("BookCount"));

                  if (objc_msgSend(v17, "isCloud"))
                  {
                    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("CloudCount")));
                    v24 = (char *)objc_msgSend(v23, "unsignedIntegerValue");

                    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v24 + 1));
                    objc_msgSend(v19, "setObject:forKey:", v25, CFSTR("CloudCount"));

                    ++v75;
                  }
                  if ((objc_msgSend(v17, "isStore") & 1) == 0)
                  {
                    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("SideLoadedCount")));
                    v27 = (char *)objc_msgSend(v26, "unsignedIntegerValue");

                    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v27 + 1));
                    objc_msgSend(v19, "setObject:forKey:", v28, CFSTR("SideLoadedCount"));

                    ++v74;
                  }
                  v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "genre"));
                  if (v29)
                    v30 = (__CFString *)v29;
                  else
                    v30 = CFSTR("Unknown");
                  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("Genres")));
                  if (!v31)
                  {
                    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
                    objc_msgSend(v19, "setObject:forKey:", v31, CFSTR("Genres"));
                  }
                  objc_msgSend(v31, "addObject:", v30);
                  -[NSObject addObject:](v76, "addObject:", v30);

                }
              }
              v14 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v87, v108, 16);
            }
            while (v14);
          }

          v11 = v72 + 1;
        }
        while ((id)(v72 + 1) != v70);
        v70 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v109, 16);
      }
      while (v70);
    }
    else
    {
      v74 = 0;
      v75 = 0;
    }

    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v33 = v81;
    v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v83, v107, 16);
    if (v34)
    {
      v35 = v34;
      v80 = (id)kBKCollectionDefaultAll;
      v82 = *(_QWORD *)v84;
      v78 = kBKCollectionDefaultIDBooks;
      v71 = kBKCollectionDefaultIDSamples;
      v73 = kBKCollectionDefaultIDWantToRead;
      obja = (id)kBKCollectionDefaultIDPDFs;
      do
      {
        for (j = 0; j != v35; j = (char *)j + 1)
        {
          if (*(_QWORD *)v84 != v82)
            objc_enumerationMutation(v33);
          v37 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)j);
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v37));
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", CFSTR("BookCount")));
          v40 = objc_msgSend(v39, "unsignedIntegerValue");

          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", CFSTR("Genres")));
          v42 = objc_msgSend(v41, "count");

          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", CFSTR("SideLoadedCount")));
          v44 = objc_msgSend(v43, "unsignedIntegerValue");

          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", CFSTR("CloudCount")));
          v46 = objc_msgSend(v45, "unsignedIntegerValue");

          v47 = objc_msgSend(v37, "isEqualToString:", v80);
          v48 = CFSTR("All");
          if ((v47 & 1) == 0)
          {
            v47 = objc_msgSend(v37, "isEqualToString:", v78);
            v48 = CFSTR("Books");
            if ((v47 & 1) == 0)
            {
              v47 = objc_msgSend(v37, "isEqualToString:", v73);
              v48 = CFSTR("Want to Read");
              if ((v47 & 1) == 0)
              {
                v47 = objc_msgSend(v37, "isEqualToString:", v71);
                v48 = CFSTR("My Samples");
                if ((v47 & 1) == 0)
                {
                  v47 = objc_msgSend(v37, "isEqualToString:", obja);
                  v48 = CFSTR("PDFs");
                  if ((v47 & 1) == 0)
                  {
                    v47 = objc_msgSend(v37, "isEqualToString:", CFSTR("Unknown"));
                    if ((_DWORD)v47)
                      v48 = CFSTR("Unknown");
                    else
                      v48 = CFSTR("Custom");
                  }
                }
              }
            }
          }
          v49 = BKLibraryLog(v47);
          v50 = objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v40));
            v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v42));
            v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v44));
            v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v46));
            *(_DWORD *)buf = 138413314;
            v98 = v69;
            v99 = 2112;
            v100 = v48;
            v101 = 2112;
            v102 = v51;
            v103 = 2112;
            v104 = v52;
            v105 = 2112;
            v106 = v53;
            _os_log_debug_impl(&dword_0, v50, OS_LOG_TYPE_DEBUG, "Collection: bookCount %@, collectionType = %@, genreCount = %@, sideLoadCount = %@, cloudCount = %@", buf, 0x34u);

          }
        }
        v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v83, v107, 16);
      }
      while (v35);
    }

    v55 = BKLibraryLog(v54);
    v56 = objc_claimAutoreleasedReturnValue(v55);
    v8 = v62;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v62, "count")));
      v58 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v33, "count")));
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[NSObject count](v76, "count")));
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v74));
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v75));
      *(_DWORD *)buf = 138413314;
      v98 = v57;
      v99 = 2112;
      v100 = v58;
      v101 = 2112;
      v102 = v59;
      v103 = 2112;
      v104 = v60;
      v105 = 2112;
      v106 = v61;
      _os_log_debug_impl(&dword_0, v56, OS_LOG_TYPE_DEBUG, "Library: bookCount %@, collectionsCount = %@, genreCount = %@, sideLoadCount = %@, cloudCount = %@", buf, 0x34u);

    }
    v5 = v64;
    v3 = v65;
    v9 = v63;
  }
  else
  {
    v32 = BKLibraryLog(v10);
    v76 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      sub_80A44();
  }

}

void sub_125B8(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = objc_msgSend(*(id *)(a1 + 32), "newManagedObjectContext");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NewMOC 10 %s"), "-[BKLibraryManager cleanupDefaultCollections]_block_invoke"));
  objc_msgSend(v3, "setName:", v2);

  objc_msgSend(*(id *)(a1 + 32), "_updateRelationshipsInContext:", v3);
  if (objc_msgSend(v3, "hasChanges"))
    objc_msgSend(v3, "save:", 0);

}

void sub_12698(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  _BYTE v22[128];
  _QWORD v23[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("dateFinished == NULL")));
  v5 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "predicateFor_All_Finished_LibraryAssets");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v23[0] = v7;
  v23[1] = v4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v8));
  objc_msgSend(v5, "setPredicate:", v9);

  objc_msgSend(v5, "setReturnsObjectsAsFaults:", 0);
  objc_msgSend(v5, "setFetchBatchSize:", 32);
  v21 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v5, &v21));
  v11 = v21;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v16), "cleanupDateFinished", (_QWORD)v17);
        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v14);
  }

}

id sub_12910(uint64_t a1)
{
  id v2;
  void *v3;

  kdebug_trace(725353720, 2, 0, 0, 0);
  v2 = objc_retainBlock(*(id *)(a1 + 40));
  v3 = v2;
  if (v2)
    (*((void (**)(id))v2 + 2))(v2);

  kdebug_trace(725353720, 3, 0, 0, 0);
  return objc_msgSend(*(id *)(a1 + 32), "saveCachedMigrationData");
}

void sub_12A3C(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_attr_t v2;
  NSObject *v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *v6;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_attr_make_with_qos_class(v6, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = dispatch_queue_create("BKLibrary.reloadQueue", v3);
  v5 = (void *)qword_DE468;
  qword_DE468 = (uint64_t)v4;

}

void sub_12AAC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  char v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  int v14;
  uint64_t v15;

  v2 = BKLibraryLog(objc_msgSend(*(id *)(a1 + 32), "_performReload"));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v14 = 134217984;
    v15 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%p: updatesScheduleQueue activated after Library Reload", (uint8_t *)&v14, 0xCu);
  }

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatesScheduleQueue"));
  dispatch_activate(v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v7 = objc_opt_respondsToSelector(v6, "libraryDidReload:");

  if ((v7 & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v8, "libraryDidReload:", *(_QWORD *)(a1 + 32));

  }
  v9 = BKLibraryPriceTrackingLog();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "Library reload completed, scheduling price tracking update", (uint8_t *)&v14, 2u);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "priceTracker"));
  objc_msgSend(v11, "setNeedsConfigurationUpdate");

  v12 = objc_retainBlock(*(id *)(a1 + 40));
  v13 = v12;
  if (v12)
    (*((void (**)(id))v12 + 2))(v12);

}

void sub_12D1C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  void *v41;
  id v42;
  _QWORD v43[5];
  id v44;
  uint8_t buf[4];
  uint64_t v46;

  v3 = a2;
  v4 = ((uint64_t (*)(void))BCSignpostLibrary)();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_signpost_id_generate(v5);

  v7 = ((uint64_t (*)(void))BCSignpostLibrary)();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v9, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Reload Library", "", buf, 2u);
  }

  v10 = BKLibraryLog(objc_msgSend(*(id *)(a1 + 32), "setReloading:", 1));
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    v46 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "%p: Library Reload: Unclaim assets", buf, 0xCu);
  }

  kdebug_trace(725353720, 0, 0, 0, 0);
  v13 = *(void **)(a1 + 32);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_13184;
  v43[3] = &unk_C12F8;
  v43[4] = v13;
  v14 = v3;
  v44 = v14;
  objc_msgSend(v13, "dq_sync:", v43);
  kdebug_trace(725353720, 1, 0, 0, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSources"));
  v16 = objc_sync_enter(v15);
  v17 = BKLibraryLog(v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    v46 = v19;
    _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, "%p: Library Reload: Reconcile assets", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "wq_reconcileDataSourceAssetsForReason:context:", 4, v14);
  objc_sync_exit(v15);

  v21 = BKLibraryLog(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    v46 = v23;
    _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "%p: Library Reload: Integrate assets", buf, 0xCu);
  }

  v24 = *(void **)(a1 + 32);
  v37 = _NSConcreteStackBlock;
  v38 = 3221225472;
  v39 = sub_13190;
  v40 = &unk_C12F8;
  v41 = v24;
  v25 = v14;
  v42 = v25;
  objc_msgSend(v24, "dq_sync:", &v37);
  v26 = BKLibraryLog(objc_msgSend(*(id *)(a1 + 32), "setReloading:", 0, v37, v38, v39, v40, v41));
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    v46 = v28;
    _os_log_impl(&dword_0, v27, OS_LOG_TYPE_DEFAULT, "%p: Library Reload: Save library", buf, 0xCu);
  }

  kdebug_trace(725353720, 10, 0, 0, 0);
  objc_msgSend(v25, "saveLibrary");
  v29 = kdebug_trace(725353720, 11, 0, 0, 0);
  v30 = BCSignpostLibrary(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  v32 = v31;
  if (v6 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v31))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v32, OS_SIGNPOST_INTERVAL_END, v6, "Reload Library", "", buf, 2u);
  }

  v34 = BKLibraryLog(v33);
  v35 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    v36 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    v46 = v36;
    _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEFAULT, "%p: Library Reload: Done", buf, 0xCu);
  }

}

void sub_13164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_13184(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dq_unclaimAllLibraryAssetsWithContext:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_13190(uint64_t a1)
{
  kdebug_trace(725353720, 8, 0, 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "wq_dq_integrateClaimedAssetsReason:context:", 4, *(_QWORD *)(a1 + 40));
  return kdebug_trace(725353720, 9, 0, 0, 0);
}

void sub_134B4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSMutableArray *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSources"));
  v16 = v3;
  v5 = objc_msgSend(v4, "indexOfObjectIdenticalTo:", v3);
  if (v5 == (id)0x7FFFFFFFFFFFFFFFLL)
    v6 = 0;
  else
    v6 = 1 << (char)v5;

  v7 = objc_opt_new(NSMutableArray);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v8 = *(id *)(a1 + 40);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v18;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v18 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetUpdatesByIdentifier"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v13));

        if (((unint64_t)objc_msgSend(v15, "dataSourcesBitmask") & v6) != 0)
          -[NSMutableArray addObject:](v7, "addObject:", v13);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v10);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_13770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_13788(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "coalescedDataSourceReloadByIdentifier"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v2));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    objc_initWeak(&location, *(id *)(a1 + 40));
    v7 = objc_alloc((Class)BUCoalescingCallBlock);
    v15 = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_13908;
    v18 = &unk_C1850;
    objc_copyWeak(&v21, &location);
    v8 = *(id *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v19 = v8;
    v20 = v9;
    v10 = objc_msgSend(v7, "initWithNotifyBlock:blockDescription:", &v15, CFSTR("BKLibraryManager data source reload"));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "coalescedDataSourceReloadByIdentifier", v15, v16, v17, v18));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, v2);

    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }

}

void sub_138E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_13908(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_139A4;
  v7[3] = &unk_C17E0;
  v5 = *(_QWORD *)(a1 + 32);
  v7[4] = *(_QWORD *)(a1 + 40);
  v8 = v3;
  v6 = v3;
  objc_msgSend(WeakRetained, "_reloadDataSource:completion:", v5, v7);

}

void sub_139A4(uint64_t a1)
{
  NSObject *v2;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionQueue"));
    dispatch_async(v2, *(dispatch_block_t *)(a1 + 40));

  }
}

id sub_13AEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performReloadDataSource:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_13BA8(id *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  NSObject *v5;
  id *v6;
  NSMutableSet *v7;
  id *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  NSMutableSet *v14;
  void *v15;
  NSObject *v16;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  NSMutableDictionary *v21;
  id v22;
  void *v23;
  NSMutableDictionary *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSMutableDictionary *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  NSMutableSet *v49;
  int8x16_t v50;
  id v51;
  NSObject *group;
  id *v53;
  _QWORD v54[4];
  id v55;
  id v56;
  id v57;
  _QWORD v58[5];
  id v59;
  id v60;
  NSObject *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[4];
  NSMutableDictionary *v68;
  _QWORD v69[4];
  NSMutableSet *v70;
  int8x16_t v71;
  NSObject *v72;
  _QWORD v73[5];
  id v74;
  id v75;
  NSMutableSet *v76;
  uint64_t v77;
  uint8_t v78[128];
  uint8_t buf[4];
  void *v80;

  v47 = a2;
  v53 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "identifier"));
  v4 = BKLibraryLog(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v80 = v3;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Performing an on-demand reload on data source %@", buf, 0xCu);
  }

  kdebug_trace(725352904, 0, 0, 0, 0);
  kdebug_trace(725353716, 48, 0, 0, 0);
  v6 = a1 + 5;
  objc_msgSend(v53[5], "setReloading:", 1);
  group = dispatch_group_create();
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53[5], "dataSources"));
  v7 = objc_opt_new(NSMutableSet);
  v8 = v53 + 4;
  v9 = v53[4];
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53[5], "dataSources"));
  v11 = objc_msgSend(v10, "indexOfObjectIdenticalTo:", v9);
  if (v11 == (id)0x7FFFFFFFFFFFFFFFLL)
    v12 = 0;
  else
    v12 = 1 << (char)v11;

  v13 = *v6;
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_141FC;
  v73[3] = &unk_C18F0;
  v73[4] = v13;
  v74 = *v8;
  v45 = v3;
  v75 = v45;
  v14 = v7;
  v76 = v14;
  v77 = v12;
  objc_msgSend(v13, "dq_sync:", v73);
  v46 = -[NSMutableSet copy](v14, "copy");
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v6, "dataSources"));
  objc_sync_enter(v15);
  v16 = dispatch_group_create();
  dispatch_group_enter(v16);
  v17 = *v8;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v6, "completionQueue"));
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_146BC;
  v69[3] = &unk_C1940;
  v49 = v14;
  v70 = v49;
  v50 = *((int8x16_t *)v53 + 2);
  v19 = (id)v50.i64[0];
  v71 = vextq_s8(v50, v50, 8uLL);
  v20 = v16;
  v72 = v20;
  sub_14394(v17, v18, v69);

  dispatch_group_wait(v20, 0xFFFFFFFFFFFFFFFFLL);
  objc_sync_exit(v15);

  if (-[NSMutableSet count](v49, "count"))
  {
    v21 = objc_opt_new(NSMutableDictionary);
    v22 = v53[5];
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "dataSources"));
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_14844;
    v67[3] = &unk_C1968;
    v24 = v21;
    v68 = v24;
    objc_msgSend(v22, "_enumerateDataSources:intersectingWithAssetIDs:usingBlock:", v23, v49, v67);

    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v25 = v48;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v63, v78, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v64;
      v51 = v25;
      do
      {
        for (i = 0; i != v26; i = (char *)i + 1)
        {
          if (*(_QWORD *)v64 != v27)
            objc_enumerationMutation(v25);
          v29 = *(id *)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)i);
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "identifier"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", v30));
          v32 = objc_msgSend(v25, "indexOfObjectIdenticalTo:", v29);
          if (v32 == (id)0x7FFFFFFFFFFFFFFFLL)
            v33 = 0;
          else
            v33 = 1 << (char)v32;
          if (objc_msgSend(v31, "count") && v29 != v53[4])
          {
            dispatch_group_enter(group);
            v58[0] = _NSConcreteStackBlock;
            v58[1] = 3221225472;
            v58[2] = sub_149E0;
            v58[3] = &unk_C19E0;
            v58[4] = v29;
            v34 = v27;
            v35 = v24;
            v36 = v31;
            v37 = v53[5];
            v59 = v36;
            v60 = v37;
            v62 = v33;
            v25 = v51;
            v61 = group;
            v38 = v36;
            v24 = v35;
            v27 = v34;
            sub_148A4(v38, v29, v58);

          }
        }
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v63, v78, 16);
      }
      while (v26);
    }

  }
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  v39 = v53[5];
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_14C80;
  v54[3] = &unk_C1918;
  v40 = v46;
  v41 = v53[5];
  v55 = v40;
  v56 = v41;
  v42 = v47;
  v57 = v42;
  objc_msgSend(v39, "dq_sync:", v54);
  objc_msgSend(v53[5], "setReloading:", 0);
  kdebug_trace(725352908, 0, 0, 0, 0);
  kdebug_trace(725353716, 49, 0, 0, 0);
  objc_msgSend(v42, "saveLibrary");
  v43 = objc_retainBlock(v53[6]);
  v44 = v43;
  if (v43)
    (*((void (**)(id))v43 + 2))(v43);

}

void sub_141E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_141FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetUpdatesByIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1431C;
  v8[3] = &unk_C18C8;
  v9 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  v12 = *(_QWORD *)(a1 + 64);
  objc_msgSend(v2, "_enumerateDataSources:intersectingWithAssetIDs:usingBlock:", v3, v5, v8);

}

void sub_1431C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  uint64_t v6;
  NSObject *v7;

  v5 = a4;
  v6 = BKLibraryLog(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_80AA4(a1, v5, v7);

  objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v5);
  objc_msgSend(*(id *)(a1 + 48), "dq_unclaimIdentifiers:forDataSourceBitmask:", v5, *(_QWORD *)(a1 + 56));

}

void sub_14394(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  id v33;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v9 = BKLibraryLog(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v33 = v8;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "#datasource Step 0: fetchAssets from: %{public}@", buf, 0xCu);
  }

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_3A2B4;
  v28[3] = &unk_C2618;
  v11 = v6;
  v29 = v11;
  v12 = v8;
  v30 = v12;
  v13 = v7;
  v31 = v13;
  v14 = objc_retainBlock(v28);
  v15 = objc_msgSend(v5, "isEnabled");
  if ((v15 & 1) != 0)
  {
    v16 = objc_opt_respondsToSelector(v5, "fetchAssetIDsWithCompletion:");
    if ((v16 & 1) != 0 && (v16 = objc_opt_respondsToSelector(v5, "fetchAssetsWithIDs:completion:"), (v16 & 1) != 0))
    {
      v17 = BKLibraryLog(v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v33 = v12;
        _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, "#datasource fetchAssets Step 1: fetching asset IDs from: %{public}@", buf, 0xCu);
      }

      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_3A480;
      v24[3] = &unk_C2618;
      v25 = v5;
      v26 = v12;
      v27 = v14;
      objc_msgSend(v25, "fetchAssetIDsWithCompletion:", v24);

    }
    else
    {
      v21 = BKLibraryLog(v16);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
        *(_DWORD *)buf = 138543362;
        v33 = v23;
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "#datasource fetchAssets Step 1-2: fetching assets from: %{public}@", buf, 0xCu);

      }
      objc_msgSend(v5, "fetchAssetsWithCompletion:", v14);
    }
  }
  else
  {
    v19 = BKLibraryLog(v15);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v33 = v12;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "#datasource fetchAssets skipping disabled: %{public}@", buf, 0xCu);
    }

    ((void (*)(_QWORD *, _QWORD, _QWORD))v14[2])(v14, 0, 0);
  }

}

void sub_146BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("assetID")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bu_arrayByRemovingNSNulls"));
    objc_msgSend(v7, "addObjectsFromArray:", v9);

    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("temporaryAssetID")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bu_arrayByRemovingNSNulls"));
    objc_msgSend(v10, "addObjectsFromArray:", v12);

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_14830;
    v16[3] = &unk_C1918;
    v13 = *(void **)(a1 + 48);
    v17 = *(id *)(a1 + 40);
    v18 = v13;
    v19 = v5;
    objc_msgSend(v17, "dq_sync:", v16);

  }
  else if (v6)
  {
    v14 = BKLibraryLog(0);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      sub_80B40();

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

id sub_14830(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dq_libraryDataSource:reconcileAssets:reason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 4);
}

void sub_14844(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v6 = a4;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, v7);

}

void sub_148A4(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if ((objc_msgSend(v6, "isEnabled") & 1) != 0)
  {
    if ((objc_opt_respondsToSelector(v6, "fetchAssetsWithIDs:completion:") & 1) != 0)
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_3A8C0;
      v14[3] = &unk_C2640;
      v15 = v7;
      objc_msgSend(v6, "fetchAssetsWithIDs:completion:", v5, v14);
      v8 = v15;
    }
    else
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_3A928;
      v11[3] = &unk_C2668;
      v12 = v5;
      v13 = v7;
      objc_msgSend(v6, "fetchAssetsWithCompletion:", v11);

      v8 = v12;
    }

  }
  else
  {
    v9 = objc_retainBlock(v7);
    v10 = v9;
    if (v9)
      (*((void (**)(id, _QWORD, _QWORD))v9 + 2))(v9, 0, 0);

  }
}

void sub_149E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD v26[5];
  id v27;

  v5 = a3;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_14B88;
  v26[3] = &unk_C1990;
  v6 = *(void **)(a1 + 40);
  v26[4] = *(_QWORD *)(a1 + 32);
  v27 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bu_arrayByRemovingNSNullsInvokingBlockForNulls:", v26));
  v8 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", CFSTR("assetID")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bu_arrayByRemovingNSNulls"));
  objc_msgSend(v8, "removeObjectsInArray:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", CFSTR("temporaryAssetID")));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bu_arrayByRemovingNSNulls"));
  objc_msgSend(v8, "removeObjectsInArray:", v12);

  v13 = *(void **)(a1 + 48);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_14BE0;
  v19[3] = &unk_C19B8;
  v20 = v8;
  v21 = v13;
  v14 = *(_QWORD *)(a1 + 32);
  v22 = v7;
  v23 = v14;
  v15 = *(_QWORD *)(a1 + 64);
  v24 = v5;
  v25 = v15;
  v16 = v5;
  v17 = v7;
  v18 = v8;
  objc_msgSend(v13, "dq_sync:", v19);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_14B88(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = BKLibraryLog(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_80BAC();

}

void sub_14BE0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
    objc_msgSend(*(id *)(a1 + 40), "dq_unclaimIdentifiers:forDataSourceBitmask:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72));
  if (objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "dq_libraryDataSource:reconcileAssets:reason:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 4);
  }
  else if (*(_QWORD *)(a1 + 64))
  {
    v2 = BKLibraryLog(0);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_80C58();

  }
}

id sub_14C80(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetUpdatesByIdentifier", (_QWORD)v14));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v7));

        if (!objc_msgSend(v9, "dataSourcesBitmask"))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "unclaimedAssetIDs"));
          objc_msgSend(v10, "addObject:", v7);

          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "unclaimedTemporaryAssetIDs"));
          objc_msgSend(v11, "addObject:", v7);

          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetUpdatesByIdentifier"));
          objc_msgSend(v12, "removeObjectForKey:", v7);

        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 40), "wq_dq_integrateClaimedAssetsReason:context:", 4, *(_QWORD *)(a1 + 48));
}

void sub_1511C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char v16;
  id location;

  v5 = a2;
  v6 = a3;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1524C;
  v10[3] = &unk_C1A58;
  objc_copyWeak(&v15, &location);
  v16 = *(_BYTE *)(a1 + 56);
  v11 = *(id *)(a1 + 40);
  v14 = *(id *)(a1 + 48);
  v8 = v5;
  v12 = v8;
  v9 = v6;
  v13 = v9;
  objc_msgSend(v7, "addCustomOperationBlock:", v10);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);

}

void sub_15230(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1524C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;
  id v9;
  char v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_15330;
    block[3] = &unk_C1A30;
    v10 = *(_BYTE *)(a1 + 72);
    v6 = *(id *)(a1 + 32);
    v9 = *(id *)(a1 + 56);
    v7 = *(id *)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    dispatch_async(v4, block);

  }
}

void sub_15330(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_BYTE *)(a1 + 64))
    objc_msgSend(*(id *)(a1 + 32), "stopAccessingSecurityScopedResource");
  v2 = objc_retainBlock(*(id *)(a1 + 56));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v2 = v3;
  }

}

void sub_1550C(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v26;
  const __CFString *v27;
  id v28;
  _QWORD v29[3];

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v3, "setResultType:", 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", 1270202400.0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K != NULL AND %K > %@"), CFSTR("purchaseDate"), CFSTR("purchaseDate"), v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForDownloadableStoreLibraryAssets](BKLibraryManager, "predicateForDownloadableStoreLibraryAssets"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateToExcludeSeriesLibraryAssets](BKLibraryManager, "predicateToExcludeSeriesLibraryAssets"));
  v29[0] = v5;
  v29[1] = v6;
  v29[2] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v29, 3));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v8));
  objc_msgSend(v3, "setPredicate:", v9);

  v10 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("purchaseDate"), 1);
  v28 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v28, 1));
  objc_msgSend(v3, "setSortDescriptors:", v11);

  v27 = CFSTR("purchaseDate");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
  objc_msgSend(v3, "setPropertiesToFetch:", v12);

  objc_msgSend(v3, "setFetchLimit:", 1);
  v26 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v3, &v26));

  v14 = v26;
  v15 = v14;
  if (v14)
  {
    v16 = BKLibraryLog(v14);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_80CC0();

  }
  v18 = objc_opt_class(NSDate);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("purchaseDate")));
  v21 = BUDynamicCast(v18, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

  v23 = objc_retainBlock(*(id *)(a1 + 32));
  v24 = v23;
  if (v23)
    (*((void (**)(id, void *))v23 + 2))(v23, v22);

}

void sub_15974(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionQueue"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_15A24;
    v5[3] = &unk_C17E0;
    v7 = *(id *)(a1 + 40);
    v6 = v3;
    dispatch_async(v4, v5);

  }
}

uint64_t sub_15A24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_15BAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id location;

  v5 = a2;
  v6 = a3;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_15CC0;
  v10[3] = &unk_C1B20;
  objc_copyWeak(&v14, &location);
  v13 = *(id *)(a1 + 40);
  v8 = v5;
  v11 = v8;
  v9 = v6;
  v12 = v9;
  objc_msgSend(v7, "addCustomOperationBlock:", v10);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);

}

void sub_15CA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_15CC0(id *a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_15D88;
    block[3] = &unk_C1AF8;
    v8 = a1[6];
    v6 = a1[4];
    v7 = a1[5];
    dispatch_async(v4, block);

  }
}

void sub_15D88(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 48));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v2 = v3;
  }

}

void sub_15ED8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id location;

  v5 = a2;
  v6 = a3;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_15FEC;
  v10[3] = &unk_C1B20;
  objc_copyWeak(&v14, &location);
  v13 = *(id *)(a1 + 40);
  v8 = v5;
  v11 = v8;
  v9 = v6;
  v12 = v9;
  objc_msgSend(v7, "addCustomOperationBlock:", v10);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);

}

void sub_15FD0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_15FEC(id *a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_160B4;
    block[3] = &unk_C1AF8;
    v8 = a1[6];
    v6 = a1[4];
    v7 = a1[5];
    dispatch_async(v4, block);

  }
}

void sub_160B4(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 48));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v2 = v3;
  }

}

void sub_1629C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id location;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v10 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_163DC;
  v14[3] = &unk_C1B98;
  objc_copyWeak(&v19, &location);
  v18 = *(id *)(a1 + 40);
  v11 = v7;
  v15 = v11;
  v12 = v8;
  v16 = v12;
  v13 = v9;
  v17 = v13;
  objc_msgSend(v10, "addCustomOperationBlock:", v14);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

void sub_163C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_163DC(id *a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  id v9;

  WeakRetained = objc_loadWeakRetained(a1 + 8);
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionQueue"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_164B8;
    v5[3] = &unk_C1B70;
    v9 = a1[7];
    v6 = a1[4];
    v7 = a1[5];
    v8 = a1[6];
    dispatch_async(v4, v5);

  }
}

void sub_164B8(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 56));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v2 = v3;
  }

}

void sub_165A8(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryMutableAssetWithAssetID:inManagedObjectContext:", v4, v5));
  objc_msgSend(v6, "setUrl:", a1[6]);
  objc_msgSend(v5, "saveLibrary");

}

void sub_1678C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_16858;
  block[3] = &unk_C1AF8;
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

void sub_16858(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 48));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v2 = v3;
  }

}

void sub_169FC(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  char v17;

  v7 = a2;
  v8 = a4;
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionQueue"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_16AD8;
  v13[3] = &unk_C1C10;
  v10 = *(id *)(a1 + 40);
  v15 = v8;
  v16 = v10;
  v17 = a3;
  v14 = v7;
  v11 = v8;
  v12 = v7;
  dispatch_async(v9, v13);

}

void sub_16AD8(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 48));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
    v2 = v3;
  }

}

void sub_16BB8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetID"));
  if (objc_msgSend(v2, "length"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ownershipObservers"));
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v2));

    if (!v4)
    {
      v4 = objc_alloc_init((Class)NSMutableArray);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ownershipObservers"));
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, v2);

    }
    if (objc_msgSend(v4, "indexOfObjectIdenticalTo:", *(_QWORD *)(a1 + 32)) == (id)0x7FFFFFFFFFFFFFFFLL)
      objc_msgSend(v4, "addObject:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v6 = BKLibraryLog(0);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_80D20();

  }
}

void sub_16D3C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetID"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ownershipObservers"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v5));

  objc_msgSend(v3, "removeObjectIdenticalTo:", *(_QWORD *)(a1 + 32));
  if (!objc_msgSend(v3, "count"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ownershipObservers"));
    objc_msgSend(v4, "removeObjectForKey:", v5);

  }
}

void sub_16EA8(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "ownershipObservers", (_QWORD)v11));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v7));
        v10 = objc_msgSend(v9, "copy");

        if (v10)
          objc_msgSend(a1[6], "setObject:forKey:", v10, v7);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

}

void sub_16FE8(id a1, NSString *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v4 = a3;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8), "notify");
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

void sub_17920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  id *v40;
  uint64_t v41;

  _Block_object_dispose((const void *)(v41 - 192), 8);
  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_179A0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  _QWORD v4[4];
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "libraryAssetOnMainQueueWithPermanentOrTemporaryAssetID:", *(_QWORD *)(a1 + 32)));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_17A40;
  v4[3] = &unk_C1CA0;
  v5 = *(id *)(a1 + 40);
  objc_msgSend(WeakRetained, "assetForLibraryAsset:completion:", v3, v4);

}

void sub_17A40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(void);
  void (**v7)(void);
  void (*v8)(void);
  void (**v9)(void);
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10 && objc_msgSend(v10, "state") == 1)
  {
    v6 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
    v7 = v6;
    if (v6)
    {
      v8 = v6[2];
LABEL_7:
      v8();
    }
  }
  else
  {
    v9 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
    v7 = v9;
    if (v9)
    {
      v8 = v9[2];
      goto LABEL_7;
    }
  }

}

void sub_17AE0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  __int128 v6;
  _QWORD block[4];
  id v8;
  id v9;
  __int128 v10;
  id v11;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_17BB4;
  block[3] = &unk_C1CF0;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v6 = *(_OWORD *)(a1 + 40);
  v4 = (id)v6;
  v10 = v6;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v11);
}

void sub_17BB4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  unsigned int v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "libraryAssetOnMainQueueWithPermanentOrTemporaryAssetID:", *(_QWORD *)(a1 + 32)));
  v4 = BKLibraryLog(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v8 = 141558786;
    v9 = 1752392040;
    v10 = 2112;
    v11 = v6;
    v12 = 2112;
    v13 = v3;
    v14 = 1024;
    v15 = objc_msgSend(v3, "isDownloading");
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "[%{mask.hash}@] waitForAssetToFinishDownloadWithAssetID: state observer notifed - libraryAsset: %@, isDownloading: %{BOOL}d", (uint8_t *)&v8, 0x26u);
  }

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    v7 = 1;
  else
    v7 = v3 == 0;
  if (!v7 && (objc_msgSend(v3, "isDownloading") & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    objc_msgSend(WeakRetained, "_removeDataSourceIdentifierAndStateObserver:", *(_QWORD *)(a1 + 40));
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

}

void sub_17D04(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_17E74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_17F40;
  block[3] = &unk_C1AF8;
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

void sub_17F40(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 48));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v2 = v3;
  }

}

void sub_1821C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_18248(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a3);
  }
  else if (objc_msgSend(v5, "count"))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_18348;
    v10[3] = &unk_C1D68;
    v8 = *(id *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = v8;
    v12 = v9;
    v13 = v5;
    v14 = *(id *)(a1 + 56);
    dispatch_async(v7, v10);

    goto LABEL_6;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
LABEL_6:

}

void sub_18348(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "rank")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_183AC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  NSMutableArray *v4;
  NSMutableSet *v5;
  void *i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *j;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id obj;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sortedArrayUsingSelector:", "compare:"));

  v4 = objc_opt_new(NSMutableArray);
  v5 = objc_opt_new(NSMutableSet);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = v3;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v20)
  {
    v19 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v20; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v19)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v8 = v1;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "objectForKeyedSubscript:", v7));
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v22;
          do
          {
            for (j = 0; j != v11; j = (char *)j + 1)
            {
              if (*(_QWORD *)v22 != v12)
                objc_enumerationMutation(v9);
              v14 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)j);
              v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "url"));
              if ((-[NSMutableSet containsObject:](v5, "containsObject:", v15) & 1) == 0)
              {
                -[NSMutableArray addObject:](v4, "addObject:", v14);
                -[NSMutableSet addObject:](v5, "addObject:", v15);
              }

            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
          }
          while (v11);
        }

        v1 = v8;
      }
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v20);
  }

  v16 = objc_retainBlock(*(id *)(v1 + 40));
  v17 = v16;
  if (v16)
    (*((void (**)(id, NSMutableArray *, _QWORD))v16 + 2))(v16, v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8) + 40));

}

void sub_1875C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18778(uint64_t a1)
{
  id v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "p_deleteAssets:exhaustive:completion:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v2 = objc_retainBlock(*(id *)(a1 + 40));
    v3 = v2;
    if (v2)
      (*((void (**)(id))v2 + 2))(v2);

  }
}

void sub_18CF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  _BYTE v22[128];

  v3 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetsWithAssetIDsContainedInList:tempAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v3));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v8);
        v10 = BKLibraryLog(v5);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "title"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "assetID"));
          *(_DWORD *)buf = 138412546;
          v19 = v12;
          v20 = 2112;
          v21 = v13;
          _os_log_debug_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "Delete Asset from BKLibraryManager (p_deleteAssets) %@ [%@]", buf, 0x16u);

        }
        objc_msgSend(*(id *)(a1 + 32), "archiveTransientProperties:", v9);
        v5 = objc_msgSend(v3, "deleteObject:", v9);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
      v6 = v5;
    }
    while (v5);
  }

  objc_msgSend(*(id *)(a1 + 32), "saveCachedMigrationData");
}

void sub_18F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_19034(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "conformsToProtocol:", *(_QWORD *)(a1 + 32));
}

id sub_190C4(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "conformsToProtocol:", *(_QWORD *)(a1 + 32));
}

uint64_t _bk_compareBitmaskPriority(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v3;
  _BOOL4 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if (a1 == a2)
    return 0;
  v3 = __clz(__rbit64(a1));
  v4 = a1 == 0;
  if (a1)
    v5 = v3 + 1;
  else
    v5 = 0;
  v6 = __clz(__rbit64(a2));
  if (a2)
    v7 = v6 + 1;
  else
    v7 = 0;
  if (v5 == v7)
  {
    v4 = 1;
    v8 = 0;
  }
  else
  {
    v8 = -1;
  }
  if (v4)
    result = v8;
  else
    result = 1;
  if (a2)
  {
    v9 = v5 >= v7;
    v10 = 1;
    if (v9)
      v10 = -1;
    if (!v4)
      return v10;
  }
  return result;
}

void sub_198CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("assetID")));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bu_arrayByRemovingNSNulls"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("temporaryAssetID")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bu_arrayByRemovingNSNulls"));

  objc_msgSend(*(id *)(a1 + 40), "_libraryDataSource:removedAssetsWithAssetIDs:orTemporaryAssetIDs:", *(_QWORD *)(a1 + 48), v5, v4);
}

id sub_19A30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_libraryDataSource:removedAssetsWithAssetIDs:orTemporaryAssetIDs:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_19BB0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSMutableSet *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *i;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  dispatch_group_t v49;
  void *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  NSMutableSet *v69;
  _QWORD v70[5];
  id v71;
  _QWORD v72[5];
  dispatch_group_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  id v78;
  uint8_t buf[4];
  void *v80;
  __int16 v81;
  uint64_t v82;
  _BYTE v83[128];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];

  v3 = a2;
  v4 = BKLibraryLog(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_80E0C();

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
  v7 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v68 = (void *)v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "predicateForDataSourceIdentifierTaggedLibraryAssets:", v6));
  if (objc_msgSend(*(id *)(a1 + 32), "count") && objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "predicateForAssetIDsTaggedLibraryAssets:", *(_QWORD *)(a1 + 32)));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForTemporaryAssetIDsTaggedLibraryAssets:](BKLibraryManager, "predicateForTemporaryAssetIDsTaggedLibraryAssets:", *(_QWORD *)(a1 + 40)));
    v86[0] = v9;
    v86[1] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v86, 2));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v11));

    v85[0] = v8;
    v85[1] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v85, 2));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v13));
    objc_msgSend(v7, "setPredicate:", v14);

  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 32), "count"))
    {
      v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "predicateForAssetIDsTaggedLibraryAssets:", *(_QWORD *)(a1 + 32)));
    }
    else
    {
      if (!objc_msgSend(*(id *)(a1 + 40), "count"))
      {
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithValue:](NSPredicate, "predicateWithValue:", 0));
        objc_msgSend(v7, "setPredicate:", v57);

        BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryManager.m", 3924, "-[BKLibraryManager _libraryDataSource:removedAssetsWithAssetIDs:orTemporaryAssetIDs:]_block_invoke", "NO", CFSTR("Not expecting <BKAsset> objects removed, none of which have assetID or temporaryAssetID populated"));
        goto LABEL_12;
      }
      v15 = objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForTemporaryAssetIDsTaggedLibraryAssets:](BKLibraryManager, "predicateForTemporaryAssetIDsTaggedLibraryAssets:", *(_QWORD *)(a1 + 40)));
    }
    v9 = (void *)v15;
    objc_msgSend(v7, "setPredicate:", v15);
  }

LABEL_12:
  v84[0] = CFSTR("assetID");
  v84[1] = CFSTR("temporaryAssetID");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v84, 2));
  objc_msgSend(v7, "setPropertiesToFetch:", v16);

  objc_msgSend(v7, "setResultType:", 2);
  v17 = objc_opt_new(NSMutableSet);
  v78 = 0;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v7, &v78));
  v19 = v78;
  v66 = v19;
  v67 = v18;
  if (!v18)
  {
    v55 = BKLibraryLog(v19);
    v56 = objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      sub_80DAC();

    goto LABEL_69;
  }
  if (!objc_msgSend(v18, "count"))
    goto LABEL_69;
  v69 = v17;
  v63 = v8;
  v64 = v7;
  v65 = v3;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v20 = v18;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v74, v83, 16);
  if (!v21)
    goto LABEL_58;
  v22 = v21;
  v23 = *(_QWORD *)v75;
  do
  {
    for (i = 0; i != v22; i = (char *)i + 1)
    {
      if (*(_QWORD *)v75 != v23)
        objc_enumerationMutation(v20);
      v25 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)i);
      v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("assetID")));
      v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("temporaryAssetID")));
      if (!(v26 | v27))
      {
        BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryManager.m", 4019, "-[BKLibraryManager _libraryDataSource:removedAssetsWithAssetIDs:orTemporaryAssetIDs:]_block_invoke", "NO", CFSTR("Expecting this asset to either have an assetID or a temporaryAssetID"));
        goto LABEL_56;
      }
      if (!v26)
      {
        v29 = 0;
LABEL_25:
        if (v27)
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "assetUpdatesByIdentifier"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", v27));

        }
        goto LABEL_27;
      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "assetUpdatesByIdentifier"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v26));

      if (!v29)
        goto LABEL_25;
LABEL_27:
      if (v29)
      {
        v31 = *(_QWORD *)(a1 + 48);
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "dataSources"));
        v33 = objc_msgSend(v32, "indexOfObjectIdenticalTo:", v31);
        if (v33 == (id)0x7FFFFFFFFFFFFFFFLL)
          v34 = 0;
        else
          v34 = 1 << (char)v33;

        objc_msgSend(*(id *)(a1 + 56), "_removeBitmask:fromUpdate:inMethod:", v34, v29, *(_QWORD *)(a1 + 64));
      }
      else
      {
        if (v26)
          v35 = v26;
        else
          v35 = v27;
        v62 = v35;
        BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryManager.m", 3966, "-[BKLibraryManager _libraryDataSource:removedAssetsWithAssetIDs:orTemporaryAssetIDs:]_block_invoke", "NO", CFSTR("was expecting an update to exist for %@"));
      }
      v36 = objc_msgSend(v29, "dataSourcesBitmask", v62);
      if (v36)
      {
        if (v26)
          v36 = -[NSMutableSet addObject:](v69, "addObject:", v26);
        if (v27)
          v36 = -[NSMutableSet addObject:](v69, "addObject:", v27);
      }
      else
      {
        if (v26)
        {
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "assetUpdatesByIdentifier"));
          objc_msgSend(v37, "removeObjectForKey:", v26);

        }
        if (v27)
        {
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "assetUpdatesByIdentifier"));
          objc_msgSend(v38, "removeObjectForKey:", v27);

        }
      }
      if (v26)
      {
        v39 = BKLibraryLog(v36);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          v80 = v68;
          v81 = 2112;
          v82 = v26;
          _os_log_debug_impl(&dword_0, v40, OS_LOG_TYPE_DEBUG, "{%@} disowning asset {%@}", buf, 0x16u);
        }

        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "unclaimedAssetIDs"));
        objc_msgSend(v41, "addObject:", v26);

        if (v29)
        {
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "assetUpdatesByIdentifier"));
          objc_msgSend(v42, "setObject:forKeyedSubscript:", v29, v26);

          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifiersForAssetsNeedingReconcile"));
          objc_msgSend(v43, "addObject:", v26);

        }
      }
      if (v27)
      {
        v44 = BKLibraryLog(v36);
        v45 = objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          v80 = v68;
          v81 = 2112;
          v82 = v27;
          _os_log_debug_impl(&dword_0, v45, OS_LOG_TYPE_DEBUG, "{%@} disowning asset {%@}", buf, 0x16u);
        }

        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "unclaimedTemporaryAssetIDs"));
        objc_msgSend(v46, "addObject:", v27);

        if (v29)
        {
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "assetUpdatesByIdentifier"));
          objc_msgSend(v47, "setObject:forKeyedSubscript:", v29, v27);

          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifiersForAssetsNeedingReconcile"));
          objc_msgSend(v48, "addObject:", v27);

        }
      }

LABEL_56:
    }
    v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v74, v83, 16);
  }
  while (v22);
LABEL_58:

  v17 = v69;
  if (-[NSMutableSet count](v69, "count"))
  {
    v49 = dispatch_group_create();
    v50 = *(void **)(a1 + 56);
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "dataSources"));
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_1A488;
    v72[3] = &unk_C1E30;
    v72[4] = *(_QWORD *)(a1 + 56);
    v73 = v49;
    v52 = v49;
    v53 = v50;
    v17 = v69;
    objc_msgSend(v53, "_enumerateDataSources:intersectingWithAssetIDs:usingBlock:", v51, v69, v72);

    dispatch_group_wait(v52, 0xFFFFFFFFFFFFFFFFLL);
  }
  v7 = v64;
  v3 = v65;
  v8 = v63;
  if (-[NSMutableSet count](v17, "count"))
    goto LABEL_68;
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "unclaimedAssetIDs"));
  if (objc_msgSend(v54, "count"))
  {

    goto LABEL_68;
  }
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "unclaimedTemporaryAssetIDs"));
  v59 = objc_msgSend(v58, "count");

  v17 = v69;
  if (v59)
  {
LABEL_68:
    v60 = *(void **)(a1 + 56);
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472;
    v70[2] = sub_1A748;
    v70[3] = &unk_C12F8;
    v70[4] = v60;
    v71 = v65;
    objc_msgSend(v60, "dq_sync:", v70);

  }
LABEL_69:
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
    objc_msgSend(v61, "addObjectsFromArray:", *(_QWORD *)(a1 + 32));
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
    objc_msgSend(v61, "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 56), "_notifyLibraryOperationDone:assetIDs:", 0, v61);

}

void sub_1A488(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;

  v6 = a2;
  v7 = a4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSources"));
  v9 = objc_msgSend(v8, "indexOfObjectIdenticalTo:", v6);

  if (objc_msgSend(v7, "count"))
  {
    if (v9 == (id)0x7FFFFFFFFFFFFFFFLL)
      v10 = 0;
    else
      v10 = 1 << (char)v9;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1A5A4;
    v13[3] = &unk_C19E0;
    v11 = v7;
    v12 = *(_QWORD *)(a1 + 32);
    v14 = v11;
    v15 = v12;
    v18 = v10;
    v16 = v6;
    v17 = *(id *)(a1 + 40);
    sub_148A4(v11, v16, v13);

  }
}

void sub_1A5A4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bu_arrayByRemovingNSNulls"));
  v4 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", CFSTR("assetID")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bu_arrayByRemovingNSNulls"));
  objc_msgSend(v4, "removeObjectsInArray:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", CFSTR("temporaryAssetID")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bu_arrayByRemovingNSNulls"));
  objc_msgSend(v4, "removeObjectsInArray:", v8);

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1A6F0;
  v13[3] = &unk_C18F0;
  v10 = *(void **)(a1 + 40);
  v9 = *(void **)(a1 + 48);
  v14 = v4;
  v15 = v10;
  v18 = *(_QWORD *)(a1 + 64);
  v16 = v3;
  v17 = v9;
  v11 = v3;
  v12 = v4;
  objc_msgSend(v10, "dq_sync:", v13);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

id sub_1A6F0(uint64_t a1)
{
  id result;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
    objc_msgSend(*(id *)(a1 + 40), "dq_unclaimIdentifiers:forDataSourceBitmask:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
  result = objc_msgSend(*(id *)(a1 + 48), "count");
  if (result)
    return objc_msgSend(*(id *)(a1 + 40), "dq_libraryDataSource:reconcileAssets:reason:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 4);
  return result;
}

id sub_1A748(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "wq_dq_integrateClaimedAssetsReason:context:", 2, *(_QWORD *)(a1 + 40));
}

id sub_1A800(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_libraryDataSource:updatedAssets:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1A8DC(id *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *j;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  BOOL v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  void *v56;
  id obj;
  id v58;
  uint64_t v59;
  _QWORD v60[4];
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  id v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  _QWORD v81[2];
  _BYTE v82[128];

  v54 = a2;
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v3 = BKLibraryLog(v56);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_80ED4((uint64_t)a1, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "valueForKey:", CFSTR("assetID")));
  v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bu_arrayByRemovingNSNulls"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "valueForKey:", CFSTR("temporaryAssetID")));
  v52 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bu_arrayByRemovingNSNulls"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v8 = a1[4];
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v76, v82, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v77;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v77 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "assetID"));
        if (v14)
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "assetID"));
        else
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "temporaryAssetID"));
        v16 = (void *)v15;

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v16));
        if (!v17)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
          objc_msgSend(v7, "setObject:forKey:", v17, v16);
        }
        objc_msgSend(v17, "addObject:", v13);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v76, v82, 16);
    }
    while (v10);
  }

  v18 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v18, "setReturnsObjectsAsFaults:", 0);
  v19 = (void *)v53;
  v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "predicateForAssetIDsTaggedLibraryAssets:", v53));
  v21 = (void *)v52;
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForTemporaryAssetIDsTaggedLibraryAssets:](BKLibraryManager, "predicateForTemporaryAssetIDsTaggedLibraryAssets:", v52));
  v50 = (void *)v20;
  v81[0] = v20;
  v81[1] = v49;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v81, 2));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v22));
  objc_msgSend(v18, "setPredicate:", v23);

  v75 = 0;
  v24 = v54;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "executeFetchRequest:error:", v18, &v75));
  v26 = v75;
  v51 = v26;
  v48 = v25;
  if (v25)
  {
    if (!objc_msgSend(v25, "count"))
      goto LABEL_39;
    v47 = v18;
    if ((objc_opt_respondsToSelector(a1[6], "propagateDataProperties") & 1) != 0)
      v58 = objc_msgSend(a1[6], "propagateDataProperties");
    else
      v58 = 0;
    v55 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    obj = v25;
    v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v80, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v72;
      do
      {
        for (j = 0; j != v30; j = (char *)j + 1)
        {
          if (*(_QWORD *)v72 != v31)
            objc_enumerationMutation(obj);
          v33 = *(id *)(*((_QWORD *)&v71 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v33, "isValid"))
          {
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "assetID"));
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "temporaryAssetID"));
            v36 = a1[5];
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "dataSourceIdentifier"));
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "dataSourceWithIdentifier:", v37));

            v39 = objc_msgSend(a1[6], "rank");
            if (v39 == objc_msgSend(v38, "rank")
              || ((v40 = objc_msgSend(a1[6], "rank"), (uint64_t)v40 > (uint64_t)objc_msgSend(v38, "rank"))
                ? (v41 = v58 == 0)
                : (v41 = 1),
                  !v41))
            {
              v42 = a1[5];
              v60[0] = _NSConcreteStackBlock;
              v60[1] = 3221225472;
              v60[2] = sub_1AF48;
              v60[3] = &unk_C1E80;
              v43 = v34;
              v44 = a1[5];
              v61 = v43;
              v62 = v44;
              v63 = v35;
              v64 = v7;
              v65 = a1[6];
              v66 = v38;
              v70 = v58;
              v67 = v33;
              v68 = v55;
              v69 = v56;
              objc_msgSend(v42, "dq_sync:", v60);

            }
          }

        }
        v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v80, 16);
      }
      while (v30);
    }

    v24 = v54;
    v28 = v55;
    objc_msgSend(a1[5], "_removePossibleDupes:inMoc:", v55, v54);
    v21 = (void *)v52;
    v19 = (void *)v53;
    v18 = v47;
  }
  else
  {
    v27 = BKLibraryLog(v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      sub_80E74();
  }

LABEL_39:
  if (objc_msgSend(v24, "hasChanges"))
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "collectionController"));
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "gatherChangedAssetsCollectionsWithLibraryMoc:", v24));
    v59 = 0;
    objc_msgSend(v24, "save:", &v59);
    objc_msgSend(v45, "processGatheredChangedAssetsCollections:", v46);

  }
  if (objc_msgSend(v56, "count"))
    objc_msgSend(a1[5], "_resetSeriesIDs:", v56);
  objc_msgSend(a1[5], "_notifyLibraryOperationDone:assetIDs:", 2, v19);

}

void sub_1AF48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  if (!*(_QWORD *)(a1 + 32)
    || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetUpdatesByIdentifier")),
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32))),
        v2,
        !v3))
  {
    if (!*(_QWORD *)(a1 + 48))
    {
      v3 = 0;
      goto LABEL_22;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetUpdatesByIdentifier"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));

    if (!v3)
      goto LABEL_22;
  }
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    v6 = v5;
  }
  else
  {
    v6 = *(id *)(a1 + 48);
    if (!v6)
      goto LABEL_22;
  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v6, 0));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v13 = objc_msgSend(*(id *)(a1 + 64), "rank");
        if (v13 == objc_msgSend(*(id *)(a1 + 72), "rank"))
          objc_msgSend(v3, "setAsset:", v12);
        objc_msgSend(v3, "setPropertiesToPropagate:", *(_QWORD *)(a1 + 104));
        objc_msgSend(v3, "propagateAdditionalDataWithAsset:", v12);
        if (objc_msgSend(v3, "hasChanges"))
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "asset"));

          if (v14)
            objc_msgSend(*(id *)(a1 + 80), "setGeneration:", 0x7FFFFFFFFFFFFFFFLL);
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v9);
  }

LABEL_22:
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "seriesID"));
  v16 = (void *)v15;
  v17 = &stru_C40E8;
  if (v15)
    v17 = (__CFString *)v15;
  v18 = v17;

  v19 = *(void **)(a1 + 40);
  v20 = *(void **)(a1 + 80);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dataSources"));
  LODWORD(v19) = sub_1B244(v19, v20, v3, 3, v21);

  objc_msgSend(v3, "postIntegrateCleanup");
  if ((_DWORD)v19)
    objc_msgSend(*(id *)(a1 + 88), "addObject:", *(_QWORD *)(a1 + 80));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "seriesID"));
  v23 = -[__CFString isEqualToString:](v18, "isEqualToString:", v22);

  if ((v23 & 1) == 0)
  {
    if (-[__CFString length](v18, "length"))
      objc_msgSend(*(id *)(a1 + 96), "addObject:", v18);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "seriesID"));

    if (v24)
    {
      v25 = *(void **)(a1 + 96);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "seriesID"));
      objc_msgSend(v25, "addObject:", v26);

    }
  }

}

BOOL sub_1B244(void *a1, void *a2, void *a3, int a4, void *a5)
{
  id v8;
  id v9;
  _BOOL8 v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  id v23;
  id v24;
  int v25;
  int v26;
  void *v27;
  void *v28;
  id v29;
  int v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  void *v50;
  int v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  unsigned __int8 v56;
  _BOOL4 v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  unsigned __int8 v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  __CFString *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  __CFString *v101;
  void *v102;
  void *v103;
  unsigned __int8 v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  unsigned __int8 v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  _BOOL4 v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  float v159;
  float v160;
  void *v161;
  float v162;
  float v163;
  __n128 v164;
  void *v165;
  unsigned int v166;
  void *v167;
  void *v168;
  _BOOL4 v169;
  uint64_t v170;
  void *v171;
  unsigned int v172;
  void *v173;
  void *v174;
  _BOOL4 v175;
  uint64_t v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  unsigned int v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  unsigned int v193;
  _BOOL4 v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  __CFString *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  id v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  unsigned int v244;
  id v245;
  id v246;
  _BOOL8 v247;
  void *v248;
  void *v249;
  void *v250;
  uint64_t v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  unsigned int v259;
  _BOOL4 v260;
  int v261;
  _BOOL4 v262;
  void *v263;
  void *v264;
  unsigned int v265;
  void *v267;
  void *v268;
  id v269;
  id v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  char v274;
  void *v275;
  _BYTE buf[24];
  uint64_t v277;
  _BYTE v278[10];
  __int16 v279;
  uint64_t v280;
  __int16 v281;
  void *v282;
  __int16 v283;
  void *v284;
  __int16 v285;
  void *v286;

  v269 = a1;
  v8 = a2;
  v270 = a3;
  v9 = a5;
  if (!v8)
  {
    BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryManager.m", 9349, "BOOL _updateLibraryAsset(BKLibraryManager *__strong, BKLibraryAsset *__strong, BKLibraryAssetUpdate *__strong, BKLibraryIntegrationReason, NSArray<id<BKLibraryDataSource>> *__strong)", "libraryAsset", 0);
    goto LABEL_3;
  }
  if ((objc_msgSend(v8, "isDeleted") & 1) != 0)
  {
LABEL_3:
    v10 = 0;
    goto LABEL_316;
  }
  v267 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "asset"));
  v12 = sub_C70C(objc_msgSend(v270, "dataSourcesBitmask"), v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v268 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataSourceIdentifier"));
  v265 = objc_msgSend(v14, "isEqualToString:", v268);

  v15 = objc_msgSend(v8, "generation");
  v16 = objc_msgSend(v11, "generation");
  v17 = objc_msgSend(v8, "generation");
  if ((objc_opt_respondsToSelector(v11, "duration") & 1) != 0
    && (v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "duration")), v18, v18))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "duration"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "duration"));
    v21 = objc_msgSend(v19, "isEqualToNumber:", v20) ^ 1;

  }
  else
  {
    v21 = 0;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetGUID"));
  v23 = objc_msgSend(v22, "length");

  if (!v23)
    v24 = objc_msgSend(v8, "assetLogID");
  v25 = v265 ^ 1;
  if (v15 != v16)
    v25 = 1;
  if (v17 == (id)0x7FFFFFFFFFFFFFFFLL)
    v26 = 1;
  else
    v26 = v25;
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataSourceIdentifier"));
  v263 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dataSourceWithIdentifier:", v27));

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dataSourceWithIdentifier:", v268));
  v264 = v28;
  if (v28)
  {
    v29 = objc_msgSend(v28, "coverSourceRank");
    v260 = (uint64_t)v29 > (uint64_t)objc_msgSend(v263, "coverSourceRank");
  }
  else
  {
    v260 = 0;
  }
  v30 = v26 | v21;
  if ((objc_opt_respondsToSelector(v11, "permlink") & 1) != 0)
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "permlink"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "absoluteString"));

    if ((v30 & 1) != 0)
    {
      v30 = 1;
LABEL_27:

      goto LABEL_28;
    }
    if (v32 || (v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "permlink"))) != 0)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "permlink"));
      v30 = objc_msgSend(v32, "isEqualToString:", v33) ^ 1;

      if (v32)
        goto LABEL_27;
    }
    else
    {
      v30 = 0;
    }

    goto LABEL_27;
  }
LABEL_28:
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumber"));
  if (!v34)
  {
    v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "versionNumber"));
    if (!v17)
    {
      v37 = &dword_0 + 1;
LABEL_33:

      goto LABEL_34;
    }
  }
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumber"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "versionNumber"));
  v37 = objc_msgSend(v35, "isEqual:", v36);

  if (!v34)
    goto LABEL_33;
LABEL_34:

  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumberHumanReadable"));
  if (v38 || (v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "versionNumberHumanReadable"))) != 0)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumberHumanReadable"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "versionNumberHumanReadable"));
    v41 = objc_msgSend(v39, "isEqual:", v40);

    if (v38)
      goto LABEL_40;
  }
  else
  {
    v41 = 1;
  }

LABEL_40:
  if (((v30 | v37 ^ 1 | v41 ^ 1) & 1) != 0)
  {
    v42 = 1;
  }
  else
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "path"));
    v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "url"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "path"));
    v42 = objc_msgSend(v43, "isEqualToString:", v44) ^ 1;

  }
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expectedDate"));
  if (v45 || (v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "expectedDate"))) != 0)
  {
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expectedDate"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "expectedDate"));
    v48 = objc_msgSend(v46, "isEqual:", v47);

    if (v45)
      goto LABEL_49;
  }
  else
  {
    v48 = 1;
  }

LABEL_49:
  v49 = objc_msgSend(v8, "state");
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "asset"));
  v51 = v42 | v48 ^ 1;
  if (v49 != objc_msgSend(v50, "state"))
    v51 = 1;

  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "seriesSortKey"));
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesSortKey"));
  if (v52 == v53)
  {

    v57 = 0;
LABEL_56:

    goto LABEL_57;
  }
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "seriesSortKey"));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesSortKey"));
  v56 = objc_msgSend(v54, "isEqual:", v55);

  if ((v56 & 1) == 0)
  {
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesSortKey"));
    v57 = v52 != 0;
    goto LABEL_56;
  }
  v57 = 0;
LABEL_57:
  v259 = objc_msgSend(v8, "state");
  v261 = v51 | v57;
  v262 = 0;
  if ((v51 | v57) == 1 && v11)
  {
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
    if (v58)
    {

      v262 = 0;
    }
    else
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "assetID"));
      v262 = v59 != 0;

    }
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "temporaryAssetID"));
    if (v60)
    {
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "temporaryAssetID"));
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "temporaryAssetID"));
      v63 = objc_msgSend(v61, "isEqualToString:", v62);

      if ((v63 & 1) == 0)
      {
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));

        if (v64)
        {
          v66 = BKLibraryLog(v65);
          v67 = objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
            v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "temporaryAssetID"));
            v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "temporaryAssetID"));
            v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataSourceIdentifier"));
            *(_DWORD *)buf = 141559810;
            *(_QWORD *)&buf[4] = 1752392040;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v68;
            *(_WORD *)&buf[22] = 2160;
            v277 = 1752392040;
            *(_WORD *)v278 = 2112;
            *(_QWORD *)&v278[2] = v69;
            v279 = 2160;
            v280 = 1752392040;
            v281 = 2112;
            v282 = v70;
            v283 = 2114;
            v284 = v71;
            v285 = 2114;
            v286 = v268;
            _os_log_impl(&dword_0, v67, OS_LOG_TYPE_DEFAULT, "updateMayHaveCausedDupes - %{mask.hash}@, temporaryAssetID=(old:%{mask.hash}@, new:%{mask.hash}@), dataSource=(old:%{public}@, new:%{public}@)", buf, 0x52u);

          }
          v262 = 1;
        }
      }
    }
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "assetID"));
    if (v72)
    {

    }
    else if ((objc_msgSend(v269, "_shouldPropagateNilAssetIDForDataSourceWithIdentifier:", v268) & 1) == 0)
    {
      goto LABEL_72;
    }
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "assetID"));
    objc_msgSend(v8, "setDifferentString:forKey:", v73, CFSTR("assetID"));

LABEL_72:
    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "temporaryAssetID"));

    if (v74)
    {
      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "temporaryAssetID"));
      objc_msgSend(v8, "setDifferentValue:forKey:klass:", v75, CFSTR("temporaryAssetID"), objc_opt_class(NSString));

    }
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "storeID"));

    if (v76)
    {
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "storeID"));
      objc_msgSend(v8, "setDifferentValue:forKey:klass:", v77, CFSTR("storeID"), objc_opt_class(NSString));

    }
    if ((objc_opt_respondsToSelector(v11, "storePlaylistID") & 1) != 0)
    {
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "storePlaylistID"));

      if (v78)
      {
        v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "storePlaylistID"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v79, CFSTR("storePlaylistID"), objc_opt_class(NSString));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "authorCount") & 1) != 0)
    {
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "authorCount"));

      if (v80)
      {
        v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "authorCount"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v81, CFSTR("authorCount"), objc_opt_class(NSNumber));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "authorNames") & 1) != 0)
    {
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "authorNames"));

      if (v82)
      {
        v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "authorNames"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v83, CFSTR("authorNames"), objc_opt_class(NSArray));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "hasTooManyAuthors") & 1) != 0)
    {
      v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "hasTooManyAuthors"));

      if (v84)
      {
        v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "hasTooManyAuthors"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v85, CFSTR("hasTooManyAuthors"), objc_opt_class(NSNumber));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "narratorCount") & 1) != 0)
    {
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "narratorCount"));

      if (v86)
      {
        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "narratorCount"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v87, CFSTR("narratorCount"), objc_opt_class(NSNumber));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "narratorNames") & 1) != 0)
    {
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "narratorNames"));

      if (v88)
      {
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "narratorNames"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v89, CFSTR("narratorNames"), objc_opt_class(NSArray));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "hasTooManyNarrators") & 1) != 0)
    {
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "hasTooManyNarrators"));

      if (v90)
      {
        v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "hasTooManyNarrators"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v91, CFSTR("hasTooManyNarrators"), objc_opt_class(NSNumber));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "mappedAssetID") & 1) != 0)
    {
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mappedAssetID"));

      if (v92)
      {
        v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mappedAssetID"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v93, CFSTR("mappedAssetID"), objc_opt_class(NSString));

      }
    }
    if ((objc_opt_respondsToSelector(v11, "mappedAssetContentType") & 1) != 0)
    {
      v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", objc_msgSend(v11, "mappedAssetContentType")));
      if (v94)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v94, CFSTR("mappedAssetContentType"), objc_opt_class(NSNumber));

    }
    v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "author"));
    v96 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
    v97 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "stringByTrimmingCharactersInSet:", v96));

    v98 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryAsset unknownAuthor](BKLibraryAsset, "unknownAuthor"));
    LOBYTE(v96) = -[__CFString isEqualToString:](v97, "isEqualToString:", v98);

    if ((v96 & 1) != 0)
    {

      v97 = CFSTR("UnknownAuthor");
      if (!objc_msgSend(CFSTR("UnknownAuthor"), "length"))
        goto LABEL_110;
    }
    else
    {
      if (!-[__CFString length](v97, "length"))
      {
LABEL_110:

        v97 = 0;
LABEL_111:
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sortAuthor"));
        v100 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
        v101 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "stringByTrimmingCharactersInSet:", v100));

        v102 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryAsset unknownAuthor](BKLibraryAsset, "unknownAuthor"));
        LOBYTE(v100) = -[__CFString isEqualToString:](v101, "isEqualToString:", v102);

        if ((v100 & 1) != 0)
        {

          v101 = CFSTR("UnknownAuthor");
          if (!objc_msgSend(CFSTR("UnknownAuthor"), "length"))
            goto LABEL_118;
        }
        else
        {
          if (!-[__CFString length](v101, "length"))
          {
LABEL_118:

            v101 = 0;
            goto LABEL_119;
          }
          if (!v101)
            goto LABEL_119;
        }
        v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "author"));
        v104 = -[__CFString isEqualToString:](v101, "isEqualToString:", v103);

        if ((v104 & 1) == 0)
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v101, CFSTR("sortAuthor"), objc_opt_class(NSString));
LABEL_119:
        v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "title"));

        if (v105)
        {
          v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "title"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v106, CFSTR("title"), objc_opt_class(NSString));

        }
        v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sortTitle"));
        if (v107)
        {
          v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sortTitle"));
          v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
          v110 = objc_msgSend(v108, "isEqualToString:", v109);

          if ((v110 & 1) == 0)
          {
            v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sortTitle"));

            if (v111)
            {
              v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sortTitle"));
              objc_msgSend(v8, "setDifferentValue:forKey:klass:", v112, CFSTR("sortTitle"), objc_opt_class(NSString));

            }
          }
        }
        v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "genre"));

        if (v113)
        {
          v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "genre"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v114, CFSTR("genre"), objc_opt_class(NSString));

        }
        if ((objc_opt_respondsToSelector(v11, "genres") & 1) != 0)
        {
          v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "genres"));

          if (v115)
          {
            v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "genres"));
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v116, CFSTR("genres"), objc_opt_class(NSArray));

          }
        }
        if ((objc_opt_respondsToSelector(v11, "seriesIsOrdered") & 1) != 0)
        {
          v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "seriesIsOrdered"));

          if (v117)
          {
            v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "seriesIsOrdered"));
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v118, CFSTR("seriesIsOrdered"), objc_opt_class(NSNumber));

          }
        }
        v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "accountID"));

        if (v119)
        {
          v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "accountID"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v120, CFSTR("accountID"), objc_opt_class(NSString));

        }
        if (v268)
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v268, CFSTR("dataSourceIdentifier"), objc_opt_class(NSString));
        v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", objc_msgSend(v11, "state")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v121, CFSTR("state"), objc_opt_class(NSNumber));

        if (objc_msgSend(v8, "state") == 5 || objc_msgSend(v8, "state") == 6)
        {
          v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "purchasedAndLocalParent"));
          v123 = v122 == 0;

          if (!v123)
          {
            v125 = BKLibraryLog(v124);
            v126 = objc_claimAutoreleasedReturnValue(v125);
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
              sub_80F7C(v8, v126);

          }
        }
        v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v11, "fileSize")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v127, CFSTR("fileSize"), objc_opt_class(NSNumber));

        v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v11, "generation")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v128, CFSTR("generation"), objc_opt_class(NSNumber));

        v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "isSample")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v129, CFSTR("isSample"), objc_opt_class(NSNumber));

        v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "isProof")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v130, CFSTR("isProof"), objc_opt_class(NSNumber));

        v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "isLocked")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v131, CFSTR("isLocked"), objc_opt_class(NSNumber));

        v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "isEphemeral")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v132, CFSTR("isEphemeral"), objc_opt_class(NSNumber));

        v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", objc_msgSend(v11, "desktopSupportLevel")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v133, CFSTR("desktopSupportLevel"), objc_opt_class(NSNumber));

        v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", objc_msgSend(v11, "contentType")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v134, CFSTR("contentType"), objc_opt_class(NSNumber));

        v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "isExplicit"));
        if (v135)
        {
          v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "isExplicit"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v136, CFSTR("isExplicit"), objc_opt_class(NSNumber));

        }
        if ((objc_opt_respondsToSelector(v11, "isSupplementalContent") & 1) != 0)
        {
          if ((objc_msgSend(v11, "isSupplementalContent") & 1) != 0
            || (v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "storePlaylistID")),
                v138 = v137 == 0,
                v137,
                v138))
          {
            v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "isSupplementalContent")));
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v139, CFSTR("isSupplementalContent"), objc_opt_class(NSNumber));

          }
        }
        v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bookDescription"));

        if (v140)
        {
          v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bookDescription"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v141, CFSTR("bookDescription"), objc_opt_class(NSString));

        }
        v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "comments"));

        if (v142)
        {
          v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "comments"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v143, CFSTR("comments"), objc_opt_class(NSString));

        }
        v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "grouping"));

        if (v144)
        {
          v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "grouping"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v145, CFSTR("grouping"), objc_opt_class(NSString));

        }
        v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "kind"));

        if (v146)
        {
          v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "kind"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v147, CFSTR("kind"), objc_opt_class(NSString));

        }
        if (objc_msgSend(v11, "pageCount") && objc_msgSend(v11, "pageCount") != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v11, "pageCount")));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v148, CFSTR("pageCount"), objc_opt_class(NSNumber));

        }
        v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v11, "rating")));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v149, CFSTR("rating"), objc_opt_class(NSNumber));

        v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "updateDate"));
        if (v150)
        {
          v151 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "updateDate"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v151, CFSTR("updateDate"), objc_opt_class(NSDate));

        }
        if ((objc_opt_respondsToSelector(v11, "permlink") & 1) != 0)
        {
          v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "permlink"));
          v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v152, "absoluteString"));

          if (v153)
          {
            v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "permlink"));
            v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "absoluteString"));
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v155, CFSTR("permlink"), objc_opt_class(NSString));

          }
        }
        if ((objc_opt_respondsToSelector(v11, "duration") & 1) != 0)
        {
          v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "duration"));

          if (v156)
          {
            v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "duration"));
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v157, CFSTR("duration"), objc_opt_class(NSNumber));

          }
        }
        if ((objc_opt_respondsToSelector(v11, "readPercent") & 1) != 0)
        {
          v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "readPercent"));
          if (v158)
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v158, CFSTR("readingProgress"), objc_opt_class(NSNumber));
          objc_msgSend(v158, "floatValue");
          v160 = v159;
          v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bookHighWaterMarkProgress"));
          objc_msgSend(v161, "floatValue");
          v163 = v162;

          if (v160 >= v163)
            v164.n128_f32[0] = v160;
          else
            v164.n128_f32[0] = v163;
          BCFloatAssertUnitIntervalClamp(v164);
          v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"));
          if (v165)
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v165, CFSTR("bookHighWaterMarkProgress"), objc_opt_class(NSNumber));

        }
        v166 = objc_msgSend(v8, "isPreorderBook");
        v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "expectedDate"));
        if (v167
          && (v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "expectedDate")),
              v169 = v168 == 0,
              v168,
              v167,
              v169))
        {
          v170 = objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "expectedDate"));
        }
        else
        {
          v170 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "expectedDate"));
        }
        v171 = (void *)v170;
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v170, CFSTR("expectedDate"), objc_opt_class(NSDate));
        if (v166)
          v172 = objc_msgSend(v8, "isPreorderBook") ^ 1;
        else
          v172 = 0;
        v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastOpenDate"));
        if (v173
          && (v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastOpenDate")),
              v175 = v174 == 0,
              v174,
              v173,
              v175))
        {
          v176 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastOpenDate"));
        }
        else
        {
          if (!v172)
            goto LABEL_190;
          v176 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
        }
        v177 = (void *)v176;
        objc_msgSend(v8, "nonUserUpdateLastOpenDateTo:", v176);

LABEL_190:
        v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumber"));

        if (v178)
        {
          v179 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumber"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v179, CFSTR("versionNumber"), objc_opt_class(NSNumber));

        }
        v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumberHumanReadable"));

        if (v180)
        {
          v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "versionNumberHumanReadable"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v181, CFSTR("versionNumberHumanReadable"), objc_opt_class(NSString));

        }
        v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "year"));

        if (v182)
        {
          v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "year"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v183, CFSTR("year"), objc_opt_class(NSString));

        }
        v184 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cloudAssetType"));
        if (v184 == (void *)BDSCloudAssetTypeSideloadedUbiquity
          || (objc_msgSend(v8, "isLocal") & 1) != 0
          || objc_msgSend(v8, "isImporting"))
        {
          v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "url"));
          v186 = objc_msgSend(v185, "isFileURL");

          if (!v186)
            goto LABEL_203;
          v187 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "url"));
          v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "path"));

          if (!v188)
            goto LABEL_203;
          v184 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "url"));
          v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "path"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v189, CFSTR("path"), objc_opt_class(NSString));

        }
LABEL_203:

        goto LABEL_204;
      }
      if (!v97)
        goto LABEL_111;
    }
    objc_msgSend(v8, "setDifferentValue:forKey:klass:", v97, CFSTR("author"), objc_opt_class(NSString));
    goto LABEL_111;
  }
LABEL_204:
  if (v261)
  {
    if ((objc_opt_respondsToSelector(v11, "isDevelopment") & 1) != 0)
    {
      v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "isDevelopment")));
      objc_msgSend(v8, "setDifferentValue:forKey:klass:", v190, CFSTR("isDevelopment"), objc_opt_class(NSNumber));

    }
    v191 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "assetIsHidden"));
    if (v191)
    {
      v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "assetIsHidden"));
      v193 = objc_msgSend(v192, "BOOLValue");
      if (v193 == objc_msgSend(v8, "isHidden"))
      {

        goto LABEL_218;
      }
      v195 = objc_msgSend(v11, "state") == 1 && v259 != 1;

      if (v195)
      {
        v191 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "assetIsHidden"));
        objc_msgSend(v8, "setIsHidden:", objc_msgSend(v191, "BOOLValue"));
LABEL_218:

      }
    }
    v196 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesIsHidden"));

    if (v196)
    {
      v197 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesIsHidden"));
      if (v197)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v197, CFSTR("seriesIsHidden"), objc_opt_class(NSNumber));

    }
    v198 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesIsCloudOnly"));

    if (v198)
    {
      v199 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesIsCloudOnly"));
      if (v199)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v199, CFSTR("seriesIsCloudOnly"), objc_opt_class(NSNumber));

    }
    v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "isStoreAudiobook"));

    if (v200)
    {
      v201 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "isStoreAudiobook"));
      if (v201)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v201, CFSTR("isStoreAudiobook"), objc_opt_class(NSNumber));

    }
    v202 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "hasRACSupport"));

    if (v202)
    {
      v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "hasRACSupport"));
      if (v203)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v203, CFSTR("hasRACSupport"), objc_opt_class(NSNumber));

    }
    v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "releaseDate"));

    if (v204)
    {
      v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "releaseDate"));
      if (v205)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v205, CFSTR("releaseDate"), objc_opt_class(NSDate));

    }
    v206 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "url"));

    if (v206)
    {
      v207 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "url"));
      if (v207)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v207, CFSTR("url"), objc_opt_class(NSURL));

    }
    v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "changedValues"));
    v209 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v208, "allKeys"));

    if (objc_msgSend(v8, "isAudiobook")
      && (objc_msgSend(v209, "containsObject:", CFSTR("assetID")) & 1) != 0
      || (objc_msgSend(v209, "containsObject:", CFSTR("storePlaylistID")) & 1) != 0
      || objc_msgSend(v209, "containsObject:", CFSTR("isSupplementalContent")))
    {
      objc_msgSend(v269, "updateSupplementalContentRelationship:", v8);
    }
    objc_msgSend(v269, "updateIsDownloadingSupplementalContentAndCombinedState:", v8);
    v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesID"));
    if (v210 && objc_msgSend(v8, "setDifferentString:forKey:", v210, CFSTR("seriesID")))
    {
      if (objc_msgSend(v8, "isContainer"))
      {
        objc_msgSend(v269, "updateSeriesRelationshipsForSeriesContainer:", v8);
        objc_msgSend(v269, "_updateAuthorForSeriesContainer:", v8);
      }
      else
      {
        objc_msgSend(v269, "updateSeriesRelationshipsForSeriesAsset:", v8);
      }
    }
    v211 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesSortKey"));

    if (v211)
    {
      v212 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "seriesSortKey"));
      if (v212)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v212, CFSTR("seriesSortKey"), objc_opt_class(NSNumber));

    }
    v213 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "sequenceDisplayName"));

    if (v213)
    {
      v214 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "sequenceDisplayName"));
      if (v214)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v214, CFSTR("sequenceDisplayName"), objc_opt_class(NSString));

    }
    v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "sequenceNumber"));

    if (v215)
    {
      v216 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "sequenceNumber"));
      if (v216)
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v216, CFSTR("sequenceNumber"), objc_opt_class(NSDecimalNumber));

    }
    v217 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "coverAspectRatio"));

    if (v217)
    {
      v218 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "coverAspectRatio"));

      if (v218)
      {
        v219 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "coverAspectRatio"));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v219, CFSTR("coverAspectRatio"), objc_opt_class(NSNumber));

      }
    }
    v220 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "title"));

    if (v220)
    {
      v221 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "title"));
      if (v221)
      {
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v221, CFSTR("title"), objc_opt_class(NSString));
        objc_msgSend(v8, "setDifferentValue:forKey:klass:", v221, CFSTR("sortTitle"), objc_opt_class(NSString));
      }

    }
    v222 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "url"));
    v223 = v222;
    if (v222)
    {
      if (objc_msgSend(v222, "isFileURL"))
      {
        v224 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v223, "path"));

        if (v224)
        {
          v225 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v223, "path"));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v225, CFSTR("path"), objc_opt_class(NSString));

        }
      }
    }
    v226 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "author"));

    if (!v226)
      goto LABEL_281;
    v227 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "author"));
    v228 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryAsset unknownAuthor](BKLibraryAsset, "unknownAuthor"));
    if (objc_msgSend(v227, "isEqualToString:", v228))
    {

      v229 = CFSTR("UnknownAuthor");
    }
    else
    {
      v229 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "author"));

      if (!v229)
      {
LABEL_281:
        v230 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "genre"));

        if (v230)
        {
          v231 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "genre"));
          if (v231)
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v231, CFSTR("genre"), objc_opt_class(NSString));

        }
        v232 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "isExplicit"));

        if (v232)
        {
          v233 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "isExplicit"));
          if (v233)
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v233, CFSTR("isExplicit"), objc_opt_class(NSNumber));

        }
        if ((uint64_t)objc_msgSend(v11, "metadataMigrationVersion") >= 1)
        {
          v234 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v11, "metadataMigrationVersion")));
          objc_msgSend(v8, "setDifferentValue:forKey:klass:", v234, CFSTR("metadataMigrationVersion"), objc_opt_class(NSNumber));

        }
        v235 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "purchaseDates_hack"));
        v236 = objc_msgSend(v235, "count");

        if (v236)
        {
          v237 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "purchaseDates_hack"));
          v238 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v237));

          v239 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "purchaseDate"));
          if (v239)
          {
            v240 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "purchaseDate"));
            objc_msgSend(v238, "addObject:", v240);

          }
          v241 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("self"), 0));
          v275 = v241;
          v242 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v275, 1));
          objc_msgSend(v238, "sortUsingDescriptors:", v242);

          v243 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v238, "lastObject"));
          if (v243)
            objc_msgSend(v8, "setDifferentValue:forKey:klass:", v243, CFSTR("purchaseDate"), objc_opt_class(NSDate));

        }
        goto LABEL_298;
      }
    }
    objc_msgSend(v8, "setDifferentValue:forKey:klass:", v229, CFSTR("author"), objc_opt_class(NSString));
    objc_msgSend(v8, "setDifferentValue:forKey:klass:", v229, CFSTR("sortAuthor"), objc_opt_class(NSString));

    goto LABEL_281;
  }
LABEL_298:
  if ((objc_msgSend(v8, "isSample") & 1) != 0)
    v244 = 1;
  else
    v244 = objc_msgSend(v11, "isSample");
  if (a4 == 2 || a4 == 4 || (objc_msgSend(v8, "canRedownload") & 1) == 0)
  {
    if (v244)
    {
      objc_msgSend(v8, "setDifferentValue:forKey:klass:", &__kCFBooleanFalse, CFSTR("canRedownload"), objc_opt_class(NSNumber));
    }
    else
    {
      v245 = objc_msgSend(v270, "dataSourcesBitmask");
      v246 = v267;
      v271 = 0;
      v272 = &v271;
      v273 = 0x2020000000;
      v274 = 0;
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_3AABC;
      v277 = (uint64_t)&unk_C25A0;
      *(_QWORD *)v278 = &v271;
      sub_3A1D0((uint64_t)v245, v246, buf);
      v247 = *((_BYTE *)v272 + 24) != 0;
      _Block_object_dispose(&v271, 8);

      v248 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v247));
      objc_msgSend(v8, "setDifferentValue:forKey:klass:", v248, CFSTR("canRedownload"), objc_opt_class(NSNumber));

    }
  }
  v249 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataSourceIdentifier"));
  v250 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dataSourceWithIdentifier:", v249));

  v251 = BUProtocolCast(&OBJC_PROTOCOL___BKAssetMetadataProvider, v250);
  v252 = (void *)objc_claimAutoreleasedReturnValue(v251);
  v253 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
  v254 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v252, "coverWritingModeLanguageAndPageProgressionDirectionFromAssetID:", v253));

  v255 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v254, "objectForKeyedSubscript:", CFSTR("coverWritingMode")));
  v256 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v254, "objectForKeyedSubscript:", CFSTR("language")));
  v257 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v254, "objectForKeyedSubscript:", CFSTR("pageProgressionDirection")));
  if (v255)
    objc_msgSend(v8, "setDifferentValue:forKey:klass:", v255, CFSTR("coverWritingMode"), objc_opt_class(NSString));
  if (v256)
    objc_msgSend(v8, "setDifferentValue:forKey:klass:", v256, CFSTR("language"), objc_opt_class(NSString));
  if (v257)
    objc_msgSend(v8, "setDifferentValue:forKey:klass:", v257, CFSTR("pageProgressionDirection"), objc_opt_class(NSString));
  if (((v265 | !v260) & 1) == 0)
    objc_msgSend(v269, "_refreshArtForAsset:", v8);

  v10 = v262;
  v9 = v267;
LABEL_316:

  return v10;
}

void sub_1D898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D944(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1D9B8;
  v2[3] = &unk_C1AA8;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "performNamed:workerQueueBlock:", CFSTR("notify"), v2);

}

uint64_t sub_1D9B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1DA4C(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v4[5];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1DAC0;
  v4[3] = &unk_C1428;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  objc_msgSend(a2, "addOperationBlock:", v4);

}

void sub_1DAC0(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1DB34;
  v2[3] = &unk_C1AA8;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "performNamed:workerQueueBlockAndWait:", CFSTR("custom-operation"), v2);

}

uint64_t sub_1DB34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1DBE8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_libraryDataSource:addedAssets:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1DCF8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void **v17;
  uint64_t v18;
  id (*v19)(uint64_t);
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v3 = a2;
  v4 = BKLibraryLog(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_810C8(v5, v6, v7, v8, v9, v10, v11, v12);

  v17 = _NSConcreteStackBlock;
  v18 = 3221225472;
  v19 = sub_1DE08;
  v20 = &unk_C1D68;
  v13 = *(void **)(a1 + 40);
  v21 = *(id *)(a1 + 32);
  v22 = v13;
  v23 = *(id *)(a1 + 48);
  v24 = v3;
  v14 = v3;
  objc_msgSend(v21, "dq_sync:", &v17);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "valueForKey:", CFSTR("assetID"), v17, v18, v19, v20, v21));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bu_arrayByRemovingNSNulls"));

  objc_msgSend(*(id *)(a1 + 32), "_notifyLibraryOperationDone:assetIDs:", 1, v16);
}

id sub_1DE08(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "dq_libraryDataSource:reconcileAssets:reason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 1);
  return objc_msgSend(*(id *)(a1 + 32), "wq_dq_integrateClaimedAssetsReason:context:", 1, *(_QWORD *)(a1 + 56));
}

id sub_1E114(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performReloadDataSource:completion:", *(_QWORD *)(a1 + 40), 0);
}

id sub_1E1E0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "libraryDataSource:addedAssets:inGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
}

id sub_1E2A4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "libraryDataSource:removedAssets:inGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
}

id sub_1E388(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "libraryDataSource:removedAssetsWithAssetIDs:orTemporaryAssetIDs:inGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2);
}

id sub_1E44C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "libraryDataSource:updatedAssets:inGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
}

void sub_1E924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E93C(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetsWithAssetIDsContainedInList:tempAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), 0, a2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", CFSTR("assetID")));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bu_arrayByRemovingNSNulls"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1ECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1ECE4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id obj;

  v2 = a1[5];
  v3 = *(void **)(a1[4] + 56);
  v4 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v4 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("assetID")));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bu_arrayByRemovingNSNulls"));
  v8 = (void *)v7;
  if (v7)
    v9 = (void *)v7;
  else
    v9 = &__NSArray0__struct;
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v9);

}

void sub_1EFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1EFE0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id obj;

  v2 = a1[5];
  v3 = *(void **)(a1[4] + 56);
  v4 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v4 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("storeID")));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bu_arrayByRemovingNSNulls"));
  v8 = (void *)v7;
  if (v7)
    v9 = (void *)v7;
  else
    v9 = &__NSArray0__struct;
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v9);

}

void sub_1F110(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  const __CFString *v17;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v17 = CFSTR("assetID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  objc_msgSend(v4, "setPropertiesToFetch:", v5);

  objc_msgSend(v4, "setResultType:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForPurchasedBooksAssets"));
  objc_msgSend(v4, "setPredicate:", v6);

  v16 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v16));

  v8 = v16;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", CFSTR("assetID")));
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bu_arrayByRemovingNSNulls"));
  v11 = (void *)v10;
  v12 = &__NSArray0__struct;
  if (v10)
    v12 = (void *)v10;
  v13 = v12;

  v14 = objc_retainBlock(*(id *)(a1 + 40));
  v15 = v14;
  if (v14)
    (*((void (**)(id, id, id))v14 + 2))(v14, v13, v8);

}

void sub_1F324(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  _QWORD v29[4];
  _QWORD v30[2];
  const __CFString *v31;

  v3 = a2;
  v4 = objc_alloc((Class)NSFetchRequest);
  v5 = (objc_class *)objc_opt_class(BKCollectionMember);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_msgSend(v4, "initWithEntityName:", v7);

  v31 = CFSTR("assetID");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v31, 1));
  objc_msgSend(v8, "setPropertiesToFetch:", v9);

  objc_msgSend(v8, "setResultType:", 2);
  objc_msgSend(v8, "setReturnsObjectsAsFaults:", 0);
  v10 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("sortKey"), 0);
  v30[0] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("assetID"), 0));
  v30[1] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v30, 2));
  objc_msgSend(v8, "setSortDescriptors:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForCollectionMembersInCollectionID:hideUnownedItems:](BKLibraryManager, "predicateForCollectionMembersInCollectionID:hideUnownedItems:", kBKCollectionDefaultIDWantToRead, 0));
  v29[0] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForExcludingCollectionMembersWithSideloadedAssets](BKLibraryManager, "predicateForExcludingCollectionMembersWithSideloadedAssets"));
  v29[1] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForExcludingCollectionMembersWithContainerLibraryAssets](BKLibraryManager, "predicateForExcludingCollectionMembersWithContainerLibraryAssets"));
  v29[2] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateToExcludeCollectionMembersForAudiobookSupplementalContent](BKLibraryManager, "predicateToExcludeCollectionMembersForAudiobookSupplementalContent"));
  v29[3] = v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v29, 4));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v17));
  objc_msgSend(v8, "setPredicate:", v18);

  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(v8, "setFetchLimit:");
  v28 = 0;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v8, &v28));
  v20 = v28;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "valueForKey:", CFSTR("assetID")));
  v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "bu_arrayByRemovingNSNulls"));
  v23 = (void *)v22;
  v24 = &__NSArray0__struct;
  if (v22)
    v24 = (void *)v22;
  v25 = v24;

  v26 = objc_retainBlock(*(id *)(a1 + 32));
  v27 = v26;
  if (v26)
    (*((void (**)(id, id, id))v26 + 2))(v26, v25, v20);

}

int64_t sub_1FB60(id a1, BKLibraryDataSource *a2, BKLibraryDataSource *a3)
{
  BKLibraryDataSource *v4;
  int64_t v5;
  int64_t v6;

  v4 = a3;
  v5 = -[BKLibraryDataSource rank](a2, "rank");
  v6 = -[BKLibraryDataSource rank](v4, "rank");

  if (v5 < v6)
    return -1;
  else
    return v5 > v6;
}

void sub_22798(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x380], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_227C8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v3 = a2;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_3A24C;
  v6[3] = &unk_C25A0;
  v6[4] = &v7;
  sub_3A1D0(a1, v3, v6);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_22868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22880(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  int v25;
  void *v26;
  unsigned int v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD v57[3];
  _QWORD v58[3];

  v5 = a2;
  v6 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v6) & 1) == 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asset"));
    if (!objc_msgSend(v6, "dataSourcesBitmask") || !v7)
    {
LABEL_27:

      goto LABEL_28;
    }
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24);
    v8 = objc_msgSend(v6, "dataSourcesBitmask");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataSources"));
    v10 = sub_C70C(v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assetID"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "temporaryAssetID"));
    v15 = BKLibraryLog(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      sub_81488();

    v55 = (void *)v14;
    v56 = (void *)v12;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "insertNewLibraryAssetWithIdentifier:assetID:orTemporaryAssetID:type:inManagedObjectContext:", v12, v13, v14, objc_msgSend(v7, "contentType"), *(_QWORD *)(a1 + 48)));
    v18 = *(void **)(a1 + 40);
    v19 = *(__int16 *)(a1 + 120);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "dataSources"));
    sub_1B244(v18, v17, v6, v19, v20);

    v21 = *(void **)(a1 + 56);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "permanentOrTemporaryAssetID"));
    objc_msgSend(v21, "addObject:", v22);

    objc_msgSend(*(id *)(a1 + 40), "adoptMigratedProperties:", v17);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v24 = objc_msgSend(v23, "BOOLForKey:", CFSTR("BKAlreadyDisplayedGDPRWelcomeExperience"));

    v25 = *(unsigned __int16 *)(a1 + 120);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asset"));
    v27 = objc_msgSend(v26, "state");

    if (!v24 || v25 != 1 || v27 == 3)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "purchaseDate"));
      objc_msgSend(v17, "setModificationDate:", v28);

    }
    v29 = objc_msgSend(v6, "dataSourcesBitmask");
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataSources"));
    LODWORD(v29) = sub_227C8((uint64_t)v29, v30);

    if ((_DWORD)v29)
    {
      objc_msgSend(*(id *)(a1 + 64), "addObject:", v7);
      v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "storeID"));
      if (v31 && (v32 = (void *)v31, v33 = objc_msgSend(v7, "contentType"), v32, v33 != 6))
      {
        v37 = *(void **)(a1 + 72);
        v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "storeID"));
      }
      else
      {
        v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assetID"));
        if (!v34)
          goto LABEL_18;
        v35 = (void *)v34;
        v36 = objc_msgSend(v7, "state");

        if (v36 != 1)
          goto LABEL_18;
        v37 = *(void **)(a1 + 80);
        v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assetID"));
      }
      v39 = (void *)v38;
      objc_msgSend(v37, "addObject:", v38);

    }
LABEL_18:
    v40 = objc_msgSend(v6, "dataSourcesBitmask");
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataSources"));
    v42 = sub_C70C(v40, v41);
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "identifier"));

    if (v44)
    {
      v54 = *(void **)(a1 + 88);
      v57[0] = CFSTR("BKLibraryOwnershipAssetIDKey");
      v57[1] = CFSTR("BKLibraryOwnershipNewDatasource");
      v58[0] = v5;
      v58[1] = v44;
      v57[2] = CFSTR("BKLibraryOwnershipNewState");
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asset"));
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (int)objc_msgSend(v46, "state")));
      v58[2] = v47;
      v48 = v5;
      v49 = v17;
      v50 = v13;
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 3));
      objc_msgSend(v54, "addObject:", v51);

      v13 = v50;
      v17 = v49;
      v5 = v48;

    }
    v52 = BKLibraryLog(v45);
    v53 = objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      sub_813EC((uint64_t)v44, v17);

    if (v13)
      objc_msgSend(*(id *)(a1 + 96), "removeObject:", v13);
    if (v55)
      objc_msgSend(*(id *)(a1 + 104), "removeObject:", v55);

    goto LABEL_27;
  }
LABEL_28:

}

void sub_22D3C(id a1, NSString *a2, BKLibraryAssetUpdate *a3, BOOL *a4)
{
  -[BKLibraryAssetUpdate postIntegrateCleanup](a3, "postIntegrateCleanup");
}

void sub_22D44(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("BKLibraryBooksChanged"), *(_QWORD *)(a1 + 32));

}

void sub_231D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  __int16 v17;

  v5 = a2;
  v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_232A8;
  v11[3] = &unk_C2068;
  v8 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v12 = v6;
  v13 = v7;
  v14 = v5;
  v15 = v8;
  v17 = *(_WORD *)(a1 + 64);
  v16 = *(id *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  objc_msgSend(v8, "dq_sync:", v11);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_232A8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = BKLibraryLog(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_814F0();

  }
  else if (objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    kdebug_trace(725353720, 6, 0, 0, 0);
    objc_msgSend(*(id *)(a1 + 56), "dq_libraryDataSource:reconcileAssets:reason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(__int16 *)(a1 + 72));
    kdebug_trace(725353720, 7, 0, 0, 0);
  }
  v4 = *(void **)(a1 + 64);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  objc_msgSend(v4, "removeObject:", v5);

  v7 = BKLibraryLog(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 48), "count")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
    v11 = 138412546;
    v12 = v9;
    v13 = 2112;
    v14 = v10;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "#datasource DONE reconciling %@ assets for: %@", (uint8_t *)&v11, 0x16u);

  }
}

void sub_23450(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = BKLibraryLog(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "componentsJoinedByString:", CFSTR(", ")));
      v8 = 138543362;
      v9 = v7;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "#datasource STILL pending to be reconciled after 1 minute: [%{public}@]", (uint8_t *)&v8, 0xCu);

    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    sub_81588(a1);
  }

}

void sub_2354C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = BKLibraryLog(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "componentsJoinedByString:", CFSTR(", ")));
      v8 = 138543362;
      v9 = v7;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "#datasource STILL pending to be reconciled after 3 minutes: [%{public}@]", (uint8_t *)&v8, 0xCu);

    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    sub_81620(a1);
  }

}

void sub_23880(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_238A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataSourceIdentifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataSourceWithIdentifier:", v6));

    v8 = BUProtocolCast(&OBJC_PROTOCOL___BKAssetMetadataProvider, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "assetID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "path"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "plistEntryAsDictionaryFromAssetID:path:needsCoordination:", v10, v11, *(unsigned __int8 *)(a1 + 48)));

  }
  else
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSources", 0));
    v14 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v21;
LABEL_6:
      v17 = 0;
      while (1)
      {
        if (*(_QWORD *)v21 != v16)
          objc_enumerationMutation(v7);
        v18 = BUProtocolCast(&OBJC_PROTOCOL___BKAssetMetadataProvider, *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v17));
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "plistEntryAsDictionaryFromAssetID:path:needsCoordination:", 0, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48)));

        if (v12)
          break;
        if (v15 == (id)++v17)
        {
          v15 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
          if (v15)
            goto LABEL_6;
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      v12 = 0;
    }
  }

  return v12;
}

void sub_23A7C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("path"), v4));
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "p_libraryAssetWithIdentifier:predicate:inManagedObjectContext:", v4, v6, v5));

  v7 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_23E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), a2));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bookDescription"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_24044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_24060(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "seriesID"));

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "seriesID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "libraryAssetWithAssetID:inManagedObjectContext:", v6, v11));

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    v3 = v7;
  }

}

void sub_241A4(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetsWithAssetIDsContainedInList:tempAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), 0, a2));
  objc_msgSend(*(id *)(a1 + 32), "deleteAssets:exhaustive:", v3, *(unsigned __int8 *)(a1 + 48));

}

void sub_242AC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryMutableAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), a2));
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "setIsTrackedAsRecent:", 0);
    v5 = *(void **)(a1 + 32);
    v7 = v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    objc_msgSend(v5, "deleteAssets:exhaustive:", v6, 1);

  }
}

void sub_26584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_266D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_266E8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notifyBlocksForNewAssets"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "valueForKey:", *(_QWORD *)(a1 + 40)));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v3, "count") != 0;
}

void sub_26750(uint64_t a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  void (*v14)(uint64_t);
  void *v15;
  os_unfair_lock_s *v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  _BYTE v25[128];

  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = sub_88C4;
  v23 = sub_88D4;
  v24 = 0;
  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v3 = v1 + 12;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v14 = sub_2692C;
  v15 = &unk_C21A8;
  v18 = &v19;
  v16 = v1;
  v17 = v2;
  v4 = v13;
  os_unfair_lock_lock(v3);
  v14((uint64_t)v4);
  os_unfair_lock_unlock(v3);

  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v5 = (id)v20[5];
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v25, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v5);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8) + 16))(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8));
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v25, 16);
    }
    while (v6);
  }

  _Block_object_dispose(&v19, 8);
}

void sub_26900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2692C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notifyBlocksForNewAssets"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "valueForKey:", *(_QWORD *)(a1 + 40)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notifyBlocksForNewAssets"));
  objc_msgSend(v6, "setValue:forKey:", 0, *(_QWORD *)(a1 + 40));

}

void sub_26B38(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notifyBlocksForNewAssets"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "valueForKey:", *(_QWORD *)(a1 + 40)));

  if (!v5)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notifyBlocksForNewAssets"));
    objc_msgSend(v3, "setObject:forKey:", v5, *(_QWORD *)(a1 + 40));

  }
  v4 = objc_retainBlock(*(id *)(a1 + 48));
  objc_msgSend(v5, "addObject:", v4);

}

id sub_26BDC(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "count");
  if (result)
    return _objc_msgSend(*(id *)(a1 + 32), "_newAssetIDAdded:", *(_QWORD *)(a1 + 40));
  return result;
}

id sub_26D44(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_newAssetIDAdded:", *(_QWORD *)(a1 + 40));
}

void sub_27A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_27A74(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "predicateForLocalLibraryAssets"));
  v7 = objc_msgSend(v5, "copyEntityPropertiesArray:fromEntityName:withPredicate:sortBy:ascending:", v3, CFSTR("BKLibraryAsset"), v6, 0, 0);

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_29598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_295B4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@==\"%@*\"cwdt"), a2, *(_QWORD *)(a1 + 32)));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v3);
    v3 = v4;
  }

}

void sub_29C08(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BKAssetUtilities utiTypeForContentType:](BKAssetUtilities, "utiTypeForContentType:", (__int16)objc_msgSend(a2, "integerValue")));
  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v6 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("contentType == \"%@\"c"), v3));
    objc_msgSend(v4, "addObject:", v5);

    v3 = v6;
  }

}

void sub_29C8C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v3 = a2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "attributeSet"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));

        if (v9)
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

intptr_t sub_29DA8(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_2DE58(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_2DF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2DF58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  const __CFString *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerChildContext"));
  v18 = CFSTR("storeID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForDownloadingStoreLibraryAssets"));
  v5 = objc_msgSend(v2, "copyEntityPropertiesArray:fromEntityName:withPredicate:sortBy:ascending:", v3, CFSTR("BKLibraryAsset"), v4, 0, 0);

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v10), "objectForKeyedSubscript:", CFSTR("storeID"), (_QWORD)v13));
        objc_msgSend(v11, "addObject:", v12);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

}

void sub_2E19C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  id v40;
  _QWORD v41[2];
  _QWORD v42[2];
  _BYTE v43[16];
  _BYTE v44[128];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForLocalStoreAssets"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForNotSamplesLibraryAssets](BKLibraryManager, "predicateForNotSamplesLibraryAssets"));
  v33 = (void *)v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", v5, v32, 0));
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager excludeAudiobooksPredicate](BKLibraryManager, "excludeAudiobooksPredicate"));
    objc_msgSend(v6, "addObject:", v7);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateToExcludeAudiobookSupplementalContent](BKLibraryManager, "predicateToExcludeAudiobookSupplementalContent"));
  objc_msgSend(v6, "addObject:", v8);

  v31 = v6;
  v9 = objc_msgSend(v6, "copy");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v9));
  objc_msgSend(v4, "setPredicate:", v10);

  v40 = 0;
  v34 = v4;
  v35 = v3;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v40));
  v30 = v40;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v12 = v11;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v37;
    while (2)
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "storeID"));
        if (!v18)
        {
          v28 = BKLibraryLog(0);
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            sub_81B54(v17, v29);

          goto LABEL_19;
        }
        v19 = (void *)v18;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "versionNumber"));
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "stringValue"));

        if (!v21)
        {
          v23 = BKLibraryLog(v22);
          v24 = objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            sub_81BD4((uint64_t)v43, (uint64_t)v17);

          v21 = &stru_C40E8;
        }
        v25 = *(void **)(a1 + 40);
        v41[0] = CFSTR("storeId");
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "storeID"));
        v41[1] = CFSTR("publicationVersion");
        v42[0] = v26;
        v42[1] = v21;
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 2));
        objc_msgSend(v25, "addObject:", v27);

      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
      if (v14)
        continue;
      break;
    }
  }
LABEL_19:

}

void sub_2E5A8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void (**v8)(id, void *, id);
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K = %@"), CFSTR("storeID"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  objc_msgSend(v4, "setFetchLimit:", 1);
  v10 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v10));

  v7 = v10;
  v8 = (void (**)(id, void *, id))objc_retainBlock(*(id *)(a1 + 40));
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
    v8[2](v8, v9, v7);

  }
}

void sub_2E76C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void (**v8)(id, void *, id);
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K = %@"), CFSTR("assetID"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  objc_msgSend(v4, "setFetchLimit:", 1);
  v10 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v10));

  v7 = v10;
  v8 = (void (**)(id, void *, id))objc_retainBlock(*(id *)(a1 + 40));
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
    v8[2](v8, v9, v7);

  }
}

void sub_2E930(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), CFSTR("storeID"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v4, "setPredicate:", v5);

  v10 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v10));

  v7 = v10;
  v8 = objc_retainBlock(*(id *)(a1 + 40));
  v9 = v8;
  if (v8)
    (*((void (**)(id, void *, id))v8 + 2))(v8, v6, v7);

}

void sub_2EAC8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), CFSTR("assetID"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v4, "setPredicate:", v5);

  v10 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v10));

  v7 = v10;
  v8 = objc_retainBlock(*(id *)(a1 + 40));
  v9 = v8;
  if (v8)
    (*((void (**)(id, void *, id))v8 + 2))(v8, v6, v7);

}

void sub_2EC38(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  _BYTE v30[128];
  _QWORD v31[3];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v23 = a1;
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "predicateForUnownedStoreLibraryAssets");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v4, "setPredicate:", v6);

  v31[0] = CFSTR("assetID");
  v31[1] = CFSTR("contentType");
  v31[2] = CFSTR("dataSourceIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v31, 3));
  objc_msgSend(v4, "setPropertiesToFetch:", v7);

  objc_msgSend(v4, "setReturnsDistinctResults:", 1);
  v29 = 0;
  v24 = v3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v29));
  v9 = v29;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v12 = v8;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        v18 = objc_msgSend(v17, "isAudiobook", v23);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "assetID"));
        if (v18)
          v20 = v11;
        else
          v20 = v10;
        objc_msgSend(v20, "addObject:", v19);

      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v14);
  }

  v21 = objc_retainBlock(*(id *)(v23 + 40));
  v22 = v21;
  if (v21)
    (*((void (**)(id, void *, void *, id))v21 + 2))(v21, v10, v11, v9);

}

void sub_2EF14(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  _BYTE v27[128];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "predicateForAllUnownedLibraryAssets");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v4, "setPredicate:", v6);

  v26 = 0;
  v21 = v3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v26));
  v8 = v26;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v10 = v7;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "assetID"));

        if (v16)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "assetID"));
          v18 = objc_msgSend(v17, "copy");
          objc_msgSend(v9, "addObject:", v18);

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v12);
  }

  v19 = objc_retainBlock(*(id *)(a1 + 40));
  v20 = v19;
  if (v19)
    (*((void (**)(id, void *, id))v19 + 2))(v19, v9, v8);

}

void sub_3009C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void (**v9)(id, BKLibraryManagerAccountIdentifiers *, _QWORD);
  void (**v10)(id, BKLibraryManagerAccountIdentifiers *, _QWORD);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  BKLibraryManagerAccountIdentifiers *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  v19 = a2;
  v5 = objc_msgSend(*(id *)(a1 + 32), "newManagedObjectContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NewMOC 12 %s %@"), "-[BKLibraryManager assetAccountIdentifiersForAssetID:path:storeID:purchasedDSID:downloadedDSID:familyID:dataSourceID:completion:]_block_invoke", v19));
  objc_msgSend(v5, "setName:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryMutableAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), v5));
  if (v7)
  {
    if (a3)
    {
LABEL_3:
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accountID"));
      objc_msgSend(v7, "setDifferentString:forKey:", v8, CFSTR("purchasedDSID"));

      objc_msgSend(v7, "setDifferentString:forKey:", 0, CFSTR("downloadedDSID"));
      objc_msgSend(v7, "setDifferentString:forKey:", 0, CFSTR("familyID"));
LABEL_9:
      if (objc_msgSend(v5, "hasChanges"))
        objc_msgSend(v5, "saveLibrary");
      v10 = (void (**)(id, BKLibraryManagerAccountIdentifiers *, _QWORD))objc_retainBlock(*(id *)(a1 + 56));
      if (v10)
      {
        v15 = -[BKLibraryManagerAccountIdentifiers initWithAsset:]([BKLibraryManagerAccountIdentifiers alloc], "initWithAsset:", v7);
        v10[2](v10, v15, 0);

      }
      goto LABEL_13;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "familyID"));
    if (objc_msgSend(v11, "length"))
    {

    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "purchasedDSID"));
      if (!objc_msgSend(v16, "length"))
      {

        goto LABEL_3;
      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "downloadedDSID"));
      v18 = objc_msgSend(v17, "length");

      if (!v18)
        goto LABEL_3;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "purchasedDSID"));
    objc_msgSend(v7, "setDifferentString:forKey:", v12, CFSTR("purchasedDSID"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "downloadedDSID"));
    objc_msgSend(v7, "setDifferentString:forKey:", v13, CFSTR("downloadedDSID"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "familyID"));
    objc_msgSend(v7, "setDifferentString:forKey:", v14, CFSTR("familyID"));

    goto LABEL_9;
  }
  v9 = (void (**)(id, BKLibraryManagerAccountIdentifiers *, _QWORD))objc_retainBlock(*(id *)(a1 + 56));
  v10 = v9;
  if (v9)
    v9[2](v9, *(BKLibraryManagerAccountIdentifiers **)(a1 + 48), 0);
LABEL_13:

}

void sub_305C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void sub_305F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  _QWORD block[4];
  id v13;
  id v14;
  __int128 v15;
  uint64_t v16;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_306C8;
  block[3] = &unk_C2360;
  v13 = v6;
  v14 = v5;
  v16 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 40);
  v8 = (id)v11;
  v15 = v11;
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, block);

}

void sub_306C8(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(_QWORD *)(v2 + 40);
  v3 = (id *)(v2 + 40);
  if (!v4)
  {
    v5 = *(void **)(a1 + 32);
    if (v5)
      objc_storeStrong(v3, v5);
  }
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "unionSet:", *(_QWORD *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_30724(uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(void);
  _QWORD *v4;

  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count")
    || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v2 = objc_retainBlock(*(id *)(a1 + 32));
    if (v2)
    {
      v3 = (void (*)(void))v2[2];
      v4 = v2;
LABEL_7:
      v3();
      v2 = v4;
    }
  }
  else
  {
    v2 = objc_retainBlock(*(id *)(a1 + 32));
    if (v2)
    {
      v3 = (void (*)(void))v2[2];
      v4 = v2;
      goto LABEL_7;
    }
  }

}

uint64_t sub_30950(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_30ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_30AD4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  _QWORD v17[4];
  id v18;
  __int128 v19;
  uint8_t buf[4];
  uint64_t v21;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryMutableAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), a2));
  v4 = v3;
  if (*(_BYTE *)(a1 + 64)
    && (objc_msgSend(v3, "isTrackedAsRecent") & 1) == 0
    && (objc_msgSend(v4, "isSupplementalContent") & 1) == 0)
  {
    v5 = BCReadingStatisticsLog();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v21 = v7;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Promoting %@ to recent.", buf, 0xCu);
    }

    objc_msgSend(v4, "setIsTrackedAsRecent:", 1);
    if ((objc_msgSend(v4, "isSample") & 1) == 0
      && (objc_msgSend(v4, "isAudiobookPreview") & 1) == 0)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionController"));
      v9 = *(void **)(a1 + 40);
      v10 = kBKCollectionDefaultIDWantToRead;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_30D08;
      v17[3] = &unk_C2400;
      v18 = v9;
      v16 = *(_OWORD *)(a1 + 48);
      v11 = (id)v16;
      v19 = v16;
      objc_msgSend(v8, "removeAssetID:fromCollectionID:completion:", v18, v10, v17);

    }
  }
  v12 = BCReadingStatisticsLog();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    v21 = v14;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Updating last engaged date for %@.", buf, 0xCu);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v4, "setLastEngagedDate:", v15);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_30D08(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v5 = a3;
  v6 = BCReadingStatisticsLog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138412290;
      v11 = v9;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Removed %@ from Want to Read.", (uint8_t *)&v10, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_81C90();

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_30E10(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 32));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD))v2 + 2))(v2, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    v2 = v3;
  }

}

void sub_31364(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  unint64_t v12;
  int v13;
  id v14;
  __int16 v15;
  unint64_t v16;

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "wq_countOfBooksInContinueReadingIncludingExplicitContent:limit:onWorkerQueue:", 1, *(_QWORD *)(a1 + 48), v3);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = v6 - (_QWORD)v4;
  if (v6 <= (unint64_t)v4)
  {
    v10 = BCBookPromotionLog(v4);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = 134218240;
      v14 = v5;
      v15 = 2048;
      v16 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "There is enough books in continue reading (existing=%lu, limit=%lu). Skip seeding", (uint8_t *)&v13, 0x16u);
    }

  }
  else
  {
    v8 = BCBookPromotionLog(v4);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 134218240;
      v14 = v5;
      v15 = 2048;
      v16 = v7;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "About to seed continue reading (existing=%lu, newLimit=%lu)", (uint8_t *)&v13, 0x16u);
    }

    objc_msgSend(*(id *)(a1 + 32), "wq_seedRecentsListWithRecentlyOpenedBooksNoOlderThanDate:limit:onWorkerQueue:", *(_QWORD *)(a1 + 40), v7, v3);
  }

}

void sub_31540(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  _BYTE v22[128];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K < %@ && %K == YES"), CFSTR("lastEngagedDate"), *(_QWORD *)(a1 + 32), CFSTR("isTrackedAsRecent")));
  objc_msgSend(v4, "setPredicate:", v5);

  v21 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v21));
  v7 = v21;
  v8 = v7;
  if (v6)
    v9 = 1;
  else
    v9 = v7 == 0;
  if (!v9)
  {
    v10 = BCBookPromotionLog(v7);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_81E14();

  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = v6;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v16), "setIsTrackedAsRecent:", 0);
        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v14);
  }

  objc_msgSend(v3, "saveLibrary");
}

void sub_317F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];
  const __CFString *v35;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), CFSTR("assetID"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v4, "setPredicate:", v5);

  v35 = CFSTR("assetID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1));
  objc_msgSend(v4, "setPropertiesToFetch:", v6);

  v29 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v29));
  v8 = v29;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v26;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v26 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v13), "setIsTrackedAsRecent:", 0);
        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
    }
    while (v11);
  }

  v15 = BCBookPromotionLog(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = objc_msgSend(v9, "count");
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", CFSTR("assetID")));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "bu_arrayByRemovingNSNulls"));
    *(_DWORD *)buf = 134218242;
    v31 = v17;
    v32 = 2112;
    v33 = v19;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%lu assets promoted: %@", buf, 0x16u);

  }
  if (v8)
  {
    v21 = BCBookPromotionLog(v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_81E74();

  }
  v23 = objc_retainBlock(*(id *)(a1 + 40));
  v24 = v23;
  if (v23)
    (*((void (**)(id, id))v23 + 2))(v23, v8);

}

void sub_31B18(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager fetchRequestForRecentlyEngaged](BKLibraryManager, "fetchRequestForRecentlyEngaged"));
  objc_msgSend(v4, "setFetchLimit:", 1);
  v9 = 0;
  v5 = (char *)objc_msgSend(v3, "countForFetchRequest:error:", v4, &v9);

  v6 = v9;
  v7 = objc_retainBlock(*(id *)(a1 + 32));
  v8 = v7;
  if (v7)
    (*((void (**)(id, BOOL, id))v7 + 2))(v7, v5 == (_BYTE *)&dword_0 + 1, v6);

}

void sub_31D74(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void (**v11)(void);
  void (**v12)(void);
  void (*v13)(void);
  id v14;
  _QWORD v15[2];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("assetID"), *(_QWORD *)(a1 + 32)));
  v15[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == YES"), CFSTR("isTrackedAsRecent")));
  v15[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v15, 2));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v7));
  objc_msgSend(v4, "setPredicate:", v8);

  v14 = 0;
  v9 = objc_msgSend(v3, "countForFetchRequest:error:", v4, &v14);

  v10 = v14;
  v11 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 40));
  v12 = v11;
  if (!v9 || v10)
  {
    if (v11)
    {
      v13 = v11[2];
      goto LABEL_7;
    }
  }
  else if (v11)
  {
    v13 = v11[2];
LABEL_7:
    v13();
  }

}

id sub_31F28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performBlockOnWorkerQueue:", *(_QWORD *)(a1 + 40));
}

void sub_320EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  BOOL v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  _BOOL8 v13;
  id v14;
  id v15;
  BKLibraryAssetObject *v16;
  void (**v17)(id, BKLibraryAssetObject *, id, _BOOL8, id, void *);
  id v18;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("assetID"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v4, "setPredicate:", v5);

  v18 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v18));

  v7 = v18;
  v8 = v7;
  if (v6)
    v9 = 1;
  else
    v9 = v7 == 0;
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v12 = objc_msgSend(v11, "BOOLForKey:", CFSTR("BKLibraryDataSourcePerformance-PPT"));

    v13 = 0;
    if (v10 && (v12 & 1) == 0)
    {
      if ((objc_msgSend(v10, "isProof") & 1) != 0)
      {
        v13 = 0;
      }
      else if (objc_msgSend(v10, "isPreorderBook"))
      {
        v13 = objc_msgSend(v10, "contentType") != 6;
      }
      else
      {
        v13 = 1;
      }
    }
    if ((objc_msgSend(v10, "isSample") & 1) != 0)
      v15 = &dword_0 + 1;
    else
      v15 = objc_msgSend(v10, "isAudiobookPreview");
    v16 = -[BKLibraryAssetObject initWithLibraryAsset:]([BKLibraryAssetObject alloc], "initWithLibraryAsset:", v10);
    v17 = (void (**)(id, BKLibraryAssetObject *, id, _BOOL8, id, void *))objc_retainBlock(*(id *)(a1 + 40));
    if (v17)
      v17[2](v17, v16, objc_msgSend(v10, "isTrackedAsRecent"), v13, v15, v8);

  }
  else
  {
    v14 = objc_retainBlock(*(id *)(a1 + 40));
    v10 = v14;
    if (v14)
      (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, void *))v14 + 2))(v14, 0, 0, 0, 0, v8);
  }

}

id sub_322FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performBlockOnWorkerQueue:", *(_QWORD *)(a1 + 40));
}

void sub_323CC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  void *v42;
  const __CFString *v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];

  v31 = a2;
  v3 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v30 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == YES"), CFSTR("isTrackedAsRecent")));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForSamples"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K < %@"), CFSTR("lastEngagedDate"), *(_QWORD *)(a1 + 40)));
  v35 = (void *)v4;
  v47[0] = v4;
  v47[1] = v34;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v47, 2));
  v6 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForSamples"));
  v8 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate notPredicateWithSubpredicate:](NSCompoundPredicate, "notPredicateWithSubpredicate:", v7));

  v9 = (void *)v6;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K < %@"), CFSTR("lastEngagedDate"), *(_QWORD *)(a1 + 48)));
  v33 = (void *)v8;
  v46[0] = v8;
  v46[1] = v32;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v46, 2));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v10));

  v45[0] = v6;
  v45[1] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v45, 2));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v12));

  v14 = (void *)v30;
  v44[0] = v30;
  v44[1] = v13;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v44, 2));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v15));

  objc_msgSend(v3, "setPredicate:", v16);
  objc_msgSend(v3, "setResultType:", 2);
  v43 = CFSTR("assetID");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v43, 1));
  objc_msgSend(v3, "setPropertiesToFetch:", v17);

  v36 = 0;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "executeFetchRequest:error:", v3, &v36));

  v19 = v36;
  v20 = v19;
  if (v19)
  {
    v21 = BCBookPromotionLog(v19);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v28 = *(_QWORD *)(a1 + 40);
      v29 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      v38 = v28;
      v39 = 2112;
      v40 = v29;
      v41 = 2112;
      v42 = v20;
      _os_log_error_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "Could not get recents not opened since dateForSamples: %@ and dateForNonSamples: %@. Error: %@", buf, 0x20u);
    }

    v23 = objc_retainBlock(*(id *)(a1 + 56));
    v24 = v23;
    if (v23)
      (*((void (**)(id, _QWORD, void *))v23 + 2))(v23, 0, v20);
  }
  else
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "valueForKey:", CFSTR("assetID")));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "bu_arrayByRemovingNSNulls"));

    v26 = objc_retainBlock(*(id *)(a1 + 56));
    v27 = v26;
    if (v26)
      (*((void (**)(id, void *, _QWORD))v26 + 2))(v26, v24, 0);

    v14 = (void *)v30;
  }

}

void sub_3285C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36;
  _BYTE v37[128];
  _QWORD v38[2];
  uint8_t buf[4];
  uint64_t v40;
  _QWORD v41[2];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_recentlyEngagedPredicate");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v41[0] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == YES"), CFSTR("isFinished")));
  v41[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v41, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v8));
  objc_msgSend(v4, "setPredicate:", v9);

  v10 = objc_msgSend(*(id *)(a1 + 40), "length");
  if (v10)
  {
    v11 = BCBookPromotionLog(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v40 = v13;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Excluding %@ from cleanup of finished recent books.", buf, 0xCu);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "predicate"));
    v38[0] = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K != %@"), CFSTR("assetID"), *(_QWORD *)(a1 + 40)));
    v38[1] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v38, 2));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v16));
    objc_msgSend(v4, "setPredicate:", v17);

  }
  v36 = 0;
  v31 = v3;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v36));
  v19 = v36;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v18, "count")));
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v21 = v18;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v33 != v24)
          objc_enumerationMutation(v21);
        v26 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v26, "setIsTrackedAsRecent:", 0);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "assetID"));

        if (v27)
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "assetID"));
          objc_msgSend(v20, "addObject:", v28);

        }
      }
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v23);
  }

  objc_msgSend(v31, "saveLibrary");
  v29 = objc_retainBlock(*(id *)(a1 + 48));
  v30 = v29;
  if (v29)
    (*((void (**)(id, void *, id))v29 + 2))(v29, v20, v19);

}

void sub_32C78(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  id v30;
  _BYTE v31[128];
  _QWORD v32[4];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_continueReadingPredicate");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v32[0] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == YES"), CFSTR("isFinished")));
  v32[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K < %@"), CFSTR("dateFinished"), *(_QWORD *)(a1 + 40)));
  v32[2] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K < %@"), CFSTR("lastOpenDate"), *(_QWORD *)(a1 + 40)));
  v32[3] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v32, 4));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v10));
  objc_msgSend(v4, "setPredicate:", v11);

  v30 = 0;
  v25 = v3;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v30));
  v13 = v30;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v12, "count")));
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v15 = v12;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v20, "setIsTrackedAsRecent:", 0);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "assetID"));

        if (v21)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "assetID"));
          objc_msgSend(v14, "addObject:", v22);

        }
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    }
    while (v17);
  }

  v23 = objc_retainBlock(*(id *)(a1 + 48));
  v24 = v23;
  if (v23)
    (*((void (**)(id, void *, id))v23 + 2))(v23, v14, v13);

}

void sub_3350C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void (**v8)(void);
  void (**v9)(void);

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = a2;
  v7 = objc_msgSend(v3, "_updateLibraryAssetWithID:withLastOpenDate:withMoc:", v4, v5, v6);
  objc_msgSend(v6, "saveLibrary");

  v8 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 56));
  if (v8)
  {
    v9 = v8;
    v8[2]();
    v8 = v9;
  }

}

void sub_33640(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  NSErrorUserInfoKey v20;
  void *v21;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryMutableAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), a2));
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "setIsEphemeral:", *(unsigned __int8 *)(a1 + 56));
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dataSourceIdentifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataSourceWithIdentifier:", v6));

    if ((objc_opt_respondsToSelector(v7, "updateAsset:isEphemeral:completion:") & 1) != 0)
    {
      objc_msgSend(v7, "updateAsset:isEphemeral:completion:", v4, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
    }
    else
    {
      v20 = NSLocalizedDescriptionKey;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "description"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Library data source %@ doesn't respond to selector."), v12));
      v21 = v13;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BKLibraryErrorDomain"), 2, v14));

      v16 = objc_retainBlock(*(id *)(a1 + 48));
      v17 = v16;
      if (v16)
        (*((void (**)(id, _QWORD, void *))v16 + 2))(v16, 0, v15);

    }
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Found no asset for assetID: %@"), *(_QWORD *)(a1 + 40), NSLocalizedDescriptionKey));
    v19 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BKLibraryErrorDomain"), 2, v9));

    v10 = objc_retainBlock(*(id *)(a1 + 48));
    v11 = v10;
    if (v10)
      (*((void (**)(id, _QWORD, void *))v10 + 2))(v10, 0, v7);

  }
}

void sub_3394C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  NSErrorUserInfoKey v25;
  const __CFString *v26;
  NSErrorUserInfoKey v27;
  const __CFString *v28;
  _BYTE v29[128];

  v3 = (uint64_t *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), a2));
  if (!v4)
  {
    v16 = BKLibraryLog(0);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_81ED4(v3, v17, v18);

    v25 = NSLocalizedDescriptionKey;
    v26 = CFSTR("Invalid asset identifier.");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
    v15 = 1;
    goto LABEL_17;
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSources", 0));
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
  if (!v6)
  {
LABEL_11:

    v12 = BKLibraryLog(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_81F54();

    v27 = NSLocalizedDescriptionKey;
    v28 = CFSTR("No data sources handled the pending update.");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
    v15 = 2;
LABEL_17:
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BKLibraryErrorDomain"), v15, v14));

    v19 = objc_retainBlock(*(id *)(a1 + 48));
    v20 = v19;
    if (v19)
      (*((void (**)(id, _QWORD, void *))v19 + 2))(v19, 0, v5);

    goto LABEL_20;
  }
  v7 = v6;
  v8 = *(_QWORD *)v22;
LABEL_4:
  v9 = 0;
  while (1)
  {
    if (*(_QWORD *)v22 != v8)
      objc_enumerationMutation(v5);
    v10 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v9);
    if ((objc_opt_respondsToSelector(v10, "applyPendingUpdateForAsset:completion:") & 1) != 0
      && (objc_msgSend(v10, "applyPendingUpdateForAsset:completion:", v4, *(_QWORD *)(a1 + 48)) & 1) != 0)
    {
      break;
    }
    if (v7 == (id)++v9)
    {
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      if (v7)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
LABEL_20:

}

void sub_33C80(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = a2;
  v10 = (id)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKLibraryAsset")));
  v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "ephemeralSamplesPredicate");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v10, "setPredicate:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v10, 0));
  if (objc_msgSend(v6, "count"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSourceConformingToProtocol:", &OBJC_PROTOCOL___BKManagesEphemeralAssets));
    v8 = BUProtocolCast(&OBJC_PROTOCOL___BKManagesEphemeralAssets, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    objc_msgSend(v9, "ephemeralAssetsRedundant:", v6);
  }

}

void sub_34AB4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migrationMoc"));
  v5 = (void *)v4;
  if (v4)
  {
    v6 = BKLibraryLog(v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      sub_8221C();

    objc_msgSend(*(id *)(a1 + 32), "setMetadataObject:forKey:", &__kCFBooleanTrue, CFSTR("BKLibraryIsMigrating"));
    objc_msgSend(*(id *)(a1 + 32), "saveMetaData");
    objc_msgSend(*(id *)(a1 + 32), "migrateSortOrderKeys:", v5);
    objc_msgSend(*(id *)(a1 + 32), "migrateCollections:context:", v5, v3);
    objc_msgSend(*(id *)(a1 + 32), "migrateMetaData:", v5);
    v8 = BKLibraryLog(objc_msgSend(*(id *)(a1 + 32), "migrateDataSources:", v5));
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      sub_821F0();

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "persistentStoreCoordinator"));
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "persistentStores", 0));
    v12 = objc_msgSend(v11, "copy");

    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v18;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v18 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(v10, "removePersistentStore:error:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v16), 0);
          v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v14);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "setMetadataObject:forKey:", &__kCFBooleanFalse, CFSTR("BKLibraryIsMigrating"));
  objc_msgSend(*(id *)(a1 + 32), "migratePurgeOldDatabases");

}

void sub_3518C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  _QWORD block[5];
  id v20;
  id v21;
  id v22;
  void *v23;

  v2 = objc_alloc_init((Class)NSFetchRequest);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", CFSTR("BKBookInfo"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setEntity:", v3);

  objc_msgSend(v2, "setPropertiesToFetch:", &off_CA030);
  objc_msgSend(v2, "setResultType:", 2);
  v4 = *(void **)(a1 + 32);
  v22 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &v22));
  v6 = v22;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("databaseKey")));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "migrationDispatchQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_35448;
  block[3] = &unk_C1918;
  block[4] = *(_QWORD *)(a1 + 40);
  v9 = v5;
  v20 = v9;
  v10 = v7;
  v21 = v10;
  dispatch_sync(v8, block);

  objc_msgSend(*(id *)(a1 + 40), "saveCachedMigrationData");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", CFSTR("BKBookInfo"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setEntity:", v11);

  objc_msgSend(v2, "setPropertiesToFetch:", &off_CA048);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K != NULL"), CFSTR("sortKey")));
  objc_msgSend(v2, "setPredicate:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("sortKey"), 0));
  v23 = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
  objc_msgSend(v2, "setSortDescriptors:", v14);

  objc_msgSend(v2, "setFetchLimit:", 1);
  objc_msgSend(v2, "setResultType:", 2);
  v15 = *(void **)(a1 + 32);
  v18 = v6;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "executeFetchRequest:error:", v2, &v18));
  v17 = v18;

  if (objc_msgSend(v16, "count") == (char *)&dword_0 + 1)
    objc_msgSend(*(id *)(a1 + 40), "saveMetaData");

}

id sub_35448(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjects:forKeys:](NSMutableDictionary, "dictionaryWithObjects:forKeys:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  objc_msgSend(*(id *)(a1 + 32), "setMigratedSortOrderData:", v2);

  v3 = *(void **)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKeyPath:", CFSTR("pluginAssetID")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjects:forKeys:](NSMutableDictionary, "dictionaryWithObjects:forKeys:", v3, v4));
  objc_msgSend(*(id *)(a1 + 32), "setMigratedSortOrderDataByPluginAssetID:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setMigratedPropertiesChanged:", 1);
}

void sub_355E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  void *v24;
  const __CFString *v25;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v4, "setResultType:", 2);
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "predicateForNonEphemeralSamplesLibraryAssets");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v4, "setPredicate:", v6);

  v25 = CFSTR("assetID");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
  objc_msgSend(v4, "setPropertiesToFetch:", v7);

  objc_msgSend(v4, "setReturnsDistinctResults:", 1);
  v20 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v20));

  v9 = v20;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "valueForKey:", CFSTR("assetID")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bu_arrayByRemovingNSNulls"));

  if (!v11 || v9)
  {
    v13 = BKLibraryLog(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_82248(v9, v14);

  }
  v15 = BKLibraryLog(v12);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = objc_msgSend(v11, "count");
    *(_DWORD *)buf = 134349314;
    v22 = v17;
    v23 = 2112;
    v24 = v11;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "Bootstrap Samples collection: Going to add %{public}lu books to Samples and Downloaded collection. assetIDs: %@", buf, 0x16u);
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionManager"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v11));
  objc_msgSend(v18, "resetCollectionsForAssetIDs:completion:", v19, &stru_C24E8);

  objc_msgSend(*(id *)(a1 + 32), "setMetadataObject:forKey:", &__kCFBooleanTrue, CFSTR("BKLibraryHasBootstrappedSamplesCollection"));
  objc_msgSend(*(id *)(a1 + 32), "saveMetaData");

}

void sub_35838(id a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = BKLibraryLog(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "Bootstrap Samples collection: Finished bootstrapping Samples collection.", v3, 2u);
  }

}

void sub_35908(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;

  if (objc_msgSend(*(id *)(a1 + 32), "migratedPropertiesChanged"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migrationCachePath"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v3, "removeItemAtPath:error:", v2, 0);

    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
    if (v4)
    {
      v5 = (void *)v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
      v7 = objc_msgSend(v6, "count");

      if (v7)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
        v9 = objc_msgSend(v8, "writeToFile:atomically:", v2, 1);

        if (v9)
        {
          objc_msgSend(*(id *)(a1 + 32), "setMigratedPropertiesChanged:", 0);
        }
        else
        {
          v11 = BKLibraryLog(v10);
          v12 = objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            sub_822C8();

        }
      }
    }

  }
}

BOOL sub_35B10(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  _BOOL8 v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("validUntilKey")));
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "compare:", *(_QWORD *)(a1 + 32)) == (id)-1;
  else
    v6 = 0;

  return v6;
}

void sub_35BDC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migrationCachePath"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithContentsOfFile:](NSMutableDictionary, "dictionaryWithContentsOfFile:"));
  objc_msgSend(*(id *)(a1 + 32), "setMigratedSortOrderData:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "q_removeOldMigrationData");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("pluginAssetID")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjects:forKeys:](NSMutableDictionary, "dictionaryWithObjects:forKeys:", v5, v6));
    objc_msgSend(*(id *)(a1 + 32), "setMigratedSortOrderDataByPluginAssetID:", v7);

  }
}

void sub_35DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_35DF0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = *(void **)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    objc_msgSend(v6, "setMigratedPropertiesChanged:", 1);
    if (!*(_BYTE *)(a1 + 56))
      return;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
    objc_msgSend(v7, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "valueForKey:", CFSTR("pluginAssetID")));
    if (!v8)
      goto LABEL_11;
    v17 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderDataByPluginAssetID"));
    v10 = v9;
    v11 = v17;
LABEL_10:
    objc_msgSend(v9, "removeObjectForKey:", v11);

    v8 = v17;
LABEL_11:

    return;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "migratedSortOrderDataByPluginAssetID"));
  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "setMigratedPropertiesChanged:", 1);
    if (*(_BYTE *)(a1 + 56))
    {
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "valueForKey:", CFSTR("databaseKey")));
      if (v17)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
        objc_msgSend(v16, "removeObjectForKey:", v17);

      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderDataByPluginAssetID"));
      v10 = v9;
      v11 = *(id *)(a1 + 40);
      goto LABEL_10;
    }
  }
}

id sub_36488(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));

  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    objc_msgSend(*(id *)(a1 + 32), "setMigratedSortOrderData:", v3);

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migratedSortOrderData"));
  objc_msgSend(v4, "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  return objc_msgSend(*(id *)(a1 + 32), "setMigratedPropertiesChanged:", 1);
}

void sub_36600(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSMutableArray *v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  NSMutableDictionary *v18;
  NSMutableDictionary *v19;
  void *v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  NSMutableDictionary *v26;
  NSMutableDictionary *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  id obj;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSMutableDictionary *v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];

  v2 = objc_alloc_init((Class)NSFetchRequest);
  objc_msgSend(v2, "setReturnsObjectsAsFaults:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", CFSTR("BKCollection"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setEntity:", v3);

  v43 = a1;
  v30 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:error:", v2, 0));
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  obj = v4;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v50;
    v8 = CFSTR("sortKey");
    v31 = *(_QWORD *)v50;
    do
    {
      v9 = 0;
      v32 = v6;
      do
      {
        if (*(_QWORD *)v50 != v7)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("deletedFlag")));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("lastModification")));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("serverSyncUniqueId")));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", v8));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("title")));
        if ((objc_msgSend(v11, "BOOLValue") & 1) != 0
          || objc_msgSend(v38, "integerValue") && objc_msgSend(v37, "length"))
        {
          v39 = objc_opt_new(NSMutableDictionary);
          if (v11)
            -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v11, CFSTR("deletedFlag"));
          if (v12)
            -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v12, CFSTR("lastModification"));
          if (v36)
            -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v36, CFSTR("serverSyncUniqueId"));
          if (v38)
            -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v38, v8);
          if (v37)
            -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v37, CFSTR("title"));
          if (!v11 || (objc_msgSend(v11, "BOOLValue") & 1) == 0)
          {
            v34 = v11;
            v35 = v9;
            v13 = objc_opt_new(NSMutableArray);
            v45 = 0u;
            v46 = 0u;
            v47 = 0u;
            v48 = 0u;
            v40 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("members")));
            v44 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
            if (v44)
            {
              v41 = *(_QWORD *)v46;
              v42 = v12;
              do
              {
                for (i = 0; i != v44; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v46 != v41)
                    objc_enumerationMutation(v40);
                  v15 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
                  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "valueForKey:", CFSTR("databaseKey")));
                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "valueForKey:", v8));
                  v18 = objc_opt_new(NSMutableDictionary);
                  v19 = v18;
                  if (v16)
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v18, "setObject:forKeyedSubscript:", v16, CFSTR("databaseKey"));
                  if (v17)
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v19, "setObject:forKeyedSubscript:", v17, v8);
                  -[NSMutableArray addObject:](v13, "addObject:", v19);
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v43 + 40), "fetchMigratedProperties:deleteFoundAssets:", v16, 0));
                  v21 = v20;
                  if (v20)
                  {
                    v22 = v8;
                    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", CFSTR("pluginAssetID")));
                    v24 = objc_msgSend(v23, "isEqualToString:", v16);

                    if ((v24 & 1) != 0)
                    {
                      v25 = v16;
                    }
                    else
                    {
                      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", CFSTR("pluginAssetID")));

                      v26 = objc_opt_new(NSMutableDictionary);
                      v27 = v26;
                      if (v25)
                        -[NSMutableDictionary setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", v25, CFSTR("databaseKey"));
                      if (v17)
                      {
                        v28 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", (char *)objc_msgSend(v17, "longValue") + 100));

                        -[NSMutableDictionary setObject:forKeyedSubscript:](v27, "setObject:forKeyedSubscript:", v28, v22);
                        v17 = (void *)v28;
                      }
                      -[NSMutableArray addObject:](v13, "addObject:", v27);
                      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
                      -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v29, CFSTR("lastModification"));

                    }
                    v8 = v22;
                  }
                  else
                  {
                    v25 = v16;
                  }

                  v12 = v42;
                }
                v44 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
              }
              while (v44);
            }

            if (-[NSMutableArray count](v13, "count"))
              -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v13, CFSTR("members"));

            v7 = v31;
            v6 = v32;
            v11 = v34;
            v9 = v35;
          }
          objc_msgSend(*(id *)(v43 + 48), "addObject:", v39);

        }
        v9 = (char *)v9 + 1;
      }
      while (v9 != v6);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
    }
    while (v6);
  }

}

void sub_36B84(uint64_t a1)
{
  __int128 v2;
  void *i;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  void *v31;
  void *v32;
  id obj;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  _BYTE v60[128];

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionController"));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v37 = a1;
  obj = *(id *)(a1 + 40);
  v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v60, 16);
  if (v36)
  {
    v34 = *(_QWORD *)v44;
    *(_QWORD *)&v2 = 138413570;
    v30 = v2;
    do
    {
      for (i = 0; i != v36; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v34)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("serverSyncUniqueId"), v30));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v37 + 32), "collectionsWorkerChildContext"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v5, v6, 0));

        if (!v7)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v37 + 32), "collectionsWorkerChildContext"));
          v7 = (void *)objc_claimAutoreleasedReturnValue(+[BKCollection insertNewCollectionWithCollectionID:inManagedObjectContext:](BKCollection, "insertNewCollectionWithCollectionID:inManagedObjectContext:", v5, v8));

          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("deletedFlag")));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("lastModification")));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("sortKey")));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("title")));
          objc_msgSend(v7, "setDeletedFlag:", v9);
          objc_msgSend(v7, "setSortKey:", v11);
          objc_msgSend(v7, "setTitle:", v12);
          objc_msgSend(v7, "setLastModification:", v10);
          objc_msgSend(v7, "setLocalModDate:", 0);

        }
        v38 = (void *)v5;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("members")));
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, v59, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v40;
          do
          {
            for (j = 0; j != v15; j = (char *)j + 1)
            {
              if (*(_QWORD *)v40 != v16)
                objc_enumerationMutation(v13);
              v18 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)j);
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("databaseKey")));
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("sortKey")));
              v21 = objc_msgSend(v7, "addCollectionMemberAvoidingDupesWithAssetID:sortKey:forceToTop:", v19, v20, 0);

            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, v59, 16);
          }
          while (v15);
        }

        v23 = BKLibraryLog(v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "collectionID"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastModification"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sortKey"));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "deletedFlag"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "members"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v31, "count")));
          *(_DWORD *)buf = v30;
          v48 = v32;
          v49 = 2112;
          v50 = v25;
          v51 = 2112;
          v52 = v26;
          v53 = 2112;
          v54 = v27;
          v55 = 2112;
          v56 = v28;
          v57 = 2112;
          v58 = v29;
          _os_log_debug_impl(&dword_0, v24, OS_LOG_TYPE_DEBUG, "NEW MIGRATED COLLECTION: %@ - %@ %@ [sortKey: %@], [deleted: %@], [%@ members]", buf, 0x3Eu);

        }
      }
      v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v60, 16);
    }
    while (v36);
  }

}

void sub_374B4(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ownershipObservers"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v2));
  objc_msgSend(v1, "intersectSet:", v3);

}

id sub_3752C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_notifyDataSourceIdentifierAndStateObserversForAssetIDs:", *(_QWORD *)(a1 + 40));
}

void sub_3781C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_37838(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateProcessingAuthenticationStateImmediate");

}

void sub_38018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  id *v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  sub_38084(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_38038(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(result + 56) = v3;
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(result + 64) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(result + 72) = v5;
  LOWORD(v5) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(result + 82) = *(_BYTE *)(a2 + 82);
  *(_WORD *)(result + 80) = v5;
  return result;
}

void sub_3807C(uint64_t a1)
{
  sub_38084((id *)(a1 + 48));
}

void sub_38084(id *a1)
{

}

void sub_380BC(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v4, "setReturnsObjectsAsFaults:", 0);
  v5 = (void *)a1[4];
  v39 = a1[5];
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "predicateForAssetIDsTaggedLibraryAssets:", v6));

  v38 = a1[5];
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v38, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForTemporaryAssetIDsTaggedLibraryAssets:](BKLibraryManager, "predicateForTemporaryAssetIDsTaggedLibraryAssets:", v8));

  v37[0] = v7;
  v37[1] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v37, 2));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v10));
  objc_msgSend(v4, "setPredicate:", v11);

  v36 = 0;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v36));

  v13 = v36;
  if (objc_msgSend(v12, "count"))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", 0));
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "shortBookTitle"));
    v16 = *(_QWORD *)(a1[6] + 8);
    v17 = *(void **)(v16 + 48);
    *(_QWORD *)(v16 + 48) = v15;

    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "displayAuthor"));
    v19 = *(_QWORD *)(a1[6] + 8);
    v20 = *(void **)(v19 + 56);
    *(_QWORD *)(v19 + 56) = v18;

    v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "language"));
    v22 = *(_QWORD *)(a1[6] + 8);
    v23 = *(void **)(v22 + 64);
    *(_QWORD *)(v22 + 64) = v21;

    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "coverWritingMode"));
    v25 = *(_QWORD *)(a1[6] + 8);
    v26 = *(void **)(v25 + 72);
    *(_QWORD *)(v25 + 72) = v24;

    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 80) = objc_msgSend(v14, "isAudiobook");
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 81) = objc_msgSend(v14, "isRightToLeft");
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 82) = objc_msgSend(v14, "isPreorderBook");
  }
  else
  {
    v27 = BKLibraryLog(0);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      sub_824F0((uint64_t)(a1 + 5), v28, v29, v30, v31, v32, v33, v34);

    v35 = *(_QWORD *)(a1[6] + 8);
    v14 = *(void **)(v35 + 64);
    *(_QWORD *)(v35 + 64) = CFSTR("en");
  }

}

id sub_38388(uint64_t a1, uint64_t a2)
{
  id result;
  char v5;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  result = *(id *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = result;
  v5 = *(_BYTE *)(a2 + 34);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = v5;
  return result;
}

void sub_38460(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == YES"), CFSTR("isExplicit")));
  v5 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  objc_msgSend(v5, "setReturnsObjectsAsFaults:", 0);
  objc_msgSend(v5, "setPredicate:", v4);
  v16 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v5, &v16));

  v7 = v16;
  v8 = v7;
  if (v7)
  {
    v9 = BKLibraryLog(v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_82558();

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("assetID")));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("seriesID")));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v13));

  objc_msgSend(v12, "unionSet:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  objc_msgSend(v12, "removeObject:", v15);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *sub_3A0E0(uint64_t a1)
{
  void *v2;
  char *v3;
  void *result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  if (!qword_DE480)
  {
    v6 = off_C2580;
    v7 = 0;
    qword_DE480 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    v2 = (void *)qword_DE480;
    if (qword_DE480)
    {
      if (!v5)
        goto LABEL_5;
    }
    else
    {
      v3 = (char *)abort_report_np("%s", v5);
    }
    free(v3);
    goto LABEL_5;
  }
  v2 = (void *)qword_DE480;
LABEL_5:
  result = dlsym(v2, "SimulateCrash");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  off_DE478 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_3A1D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_3A28C;
  v6[3] = &unk_C25C8;
  v7 = a3;
  v8 = a1;
  v5 = v7;
  objc_msgSend(a2, "enumerateObjectsUsingBlock:", v6);

}

id sub_3A24C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "canMakeAssetsLocal");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_3A28C(uint64_t result, uint64_t a2, char a3)
{
  if ((*(_QWORD *)(result + 40) & (1 << a3)) != 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_3A2B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_3A380;
  v10[3] = &unk_C25F0;
  v11 = a3;
  v6 = *(NSObject **)(a1 + 32);
  v12 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v13 = v5;
  v14 = v7;
  v8 = v5;
  v9 = v11;
  dispatch_async(v6, v10);

}

void sub_3A380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  void *v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = BKLibraryLog(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_825B8();
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v9 = 138543362;
    v10 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "#datasource DONE fetchAssets from: %{public}@", (uint8_t *)&v9, 0xCu);
  }

  v7 = objc_retainBlock(*(id *)(a1 + 56));
  v8 = v7;
  if (v7)
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));

}

void sub_3A480(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  uint64_t v24;

  v5 = a2;
  v6 = a3;
  v7 = BUProtocolCast(&OBJC_PROTOCOL___BKMaintainsFetchDigest, *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v8, "updateFetchDigest");

  if (v6 || (v11 = objc_msgSend(v5, "count")) == 0)
  {
    v9 = objc_retainBlock(*(id *)(a1 + 48));
    v10 = v9;
    if (v9)
      (*((void (**)(id, _QWORD, id))v9 + 2))(v9, 0, v6);

  }
  else
  {
    v12 = BKLibraryLog(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = objc_msgSend(v5, "count");
      v15 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218242;
      v22 = v14;
      v23 = 2114;
      v24 = v15;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "#datasource fetchAssets Step 2: fetching %lu assets for: %{public}@", buf, 0x16u);
    }

    v16 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_3A63C;
    v17[3] = &unk_C2618;
    v18 = v5;
    v19 = *(id *)(a1 + 40);
    v20 = *(id *)(a1 + 48);
    objc_msgSend(v16, "fetchAssetsWithIDs:completion:", v18, v17);

  }
}

void sub_3A63C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSMutableArray *v7;
  NSMutableArray *v8;
  NSMutableArray *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  NSMutableArray *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSMutableArray *v21;
  uint64_t v22;
  void (**v23)(id, id, _QWORD);
  id v24;
  int v25;
  NSMutableArray *v26;
  __int16 v27;
  uint64_t v28;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (NSMutableArray *)objc_retainBlock(*(id *)(a1 + 48));
    v8 = v7;
    if (v7)
      ((void (*)(NSMutableArray *, _QWORD, id))v7[2].super.super.isa)(v7, 0, v6);
  }
  else
  {
    v8 = objc_opt_new(NSMutableArray);
    v9 = objc_opt_new(NSMutableArray);
    if (objc_msgSend(v5, "count"))
    {
      v10 = 0;
      do
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v10));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

        if (v11 == v12)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v10));
          v14 = v8;
        }
        else
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v10));
          v14 = v9;
        }
        -[NSMutableArray addObject:](v14, "addObject:", v13);

        ++v10;
      }
      while (v10 < (unint64_t)objc_msgSend(v5, "count"));
    }
    v15 = -[NSMutableArray count](v8, "count");
    if (v15)
    {
      v16 = BKLibraryLog(v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)(a1 + 40);
        v25 = 138412546;
        v26 = v8;
        v27 = 2112;
        v28 = v18;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "#datasource fetchAssets Step 2 ignoring failed-to-fetch assets [%@] from: %@", (uint8_t *)&v25, 0x16u);
      }

    }
    v19 = BKLibraryLog(v15);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (NSMutableArray *)objc_msgSend(v5, "count");
      v22 = *(_QWORD *)(a1 + 40);
      v25 = 134218242;
      v26 = v21;
      v27 = 2114;
      v28 = v22;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "#datasource fetchAssets Step 3: returning %lu assets from: %{public}@", (uint8_t *)&v25, 0x16u);
    }

    v23 = (void (**)(id, id, _QWORD))objc_retainBlock(*(id *)(a1 + 48));
    if (v23)
    {
      v24 = -[NSMutableArray copy](v9, "copy");
      v23[2](v23, v24, 0);

    }
  }

}

void sub_3A8C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = objc_retainBlock(*(id *)(a1 + 32));
  v7 = v6;
  if (v6)
    (*((void (**)(id, id, id))v6 + 2))(v6, v8, v5);

}

void sub_3A928(uint64_t a1, void *a2, void *a3)
{
  id v5;
  char *v6;
  id v7;
  char *i;
  void *v9;
  char *v10;
  char *v11;
  char *j;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;

  v21 = a2;
  v5 = a3;
  v6 = (char *)objc_msgSend(*(id *)(a1 + 32), "count");
  v7 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
      objc_msgSend(v7, "setObject:atIndexedSubscript:", v9, i);

    }
  }
  v10 = (char *)objc_msgSend(v21, "count");
  if (v10)
  {
    v11 = v10;
    for (j = 0; j != v11; ++j)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectAtIndexedSubscript:", j));
      v14 = *(void **)(a1 + 32);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "assetID"));
      v16 = objc_msgSend(v14, "indexOfObject:", v15);

      if (v16 != (id)0x7FFFFFFFFFFFFFFFLL
        || (v17 = *(void **)(a1 + 32),
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "temporaryAssetID")),
            v16 = objc_msgSend(v17, "indexOfObject:", v18),
            v18,
            v16 != (id)0x7FFFFFFFFFFFFFFFLL))
      {
        objc_msgSend(v7, "setObject:atIndexedSubscript:", v13, v16);
      }

    }
  }
  v19 = objc_retainBlock(*(id *)(a1 + 40));
  v20 = v19;
  if (v19)
    (*((void (**)(id, id, id))v19 + 2))(v19, v7, v5);

}

id sub_3AABC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "canRedownloadAssets");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_3AAFC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_3AB24(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_3AB3C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_3AB74(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_3AB84(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

void sub_3ABF0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_3AC10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_3AC3C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

uint64_t sub_3AC58(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_3ACE8(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = BKLibraryFrameworkBundle();
  v4 = (id)objc_claimAutoreleasedReturnValue(v1);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Unknown Author"), &stru_C40E8, &stru_C40E8));
  v3 = (void *)gUnknownAuthor;
  gUnknownAuthor = v2;

}

void sub_3AD7C(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = BKLibraryFrameworkBundle();
  v4 = (id)objc_claimAutoreleasedReturnValue(v1);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("No Title"), &stru_C40E8, &stru_C40E8));
  v3 = (void *)gUnknownTitle;
  gUnknownTitle = v2;

}

void sub_3AE10(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = BKLibraryFrameworkBundle();
  v4 = (id)objc_claimAutoreleasedReturnValue(v1);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Multiple Authors"), &stru_C40E8, &stru_C40E8));
  v3 = (void *)gMultipleAuthors;
  gMultipleAuthors = v2;

}

void sub_3D910(id a1)
{
  BKLibraryAssetStatusController *v1;
  void *v2;

  v1 = objc_alloc_init(BKLibraryAssetStatusController);
  v2 = (void *)qword_DE4A8;
  qword_DE4A8 = (uint64_t)v1;

}

void sub_3DDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  id *v44;
  id *v45;

  objc_destroyWeak(v45);
  objc_destroyWeak(v44);
  objc_destroyWeak(location);
  objc_destroyWeak(&a44);
  _Unwind_Resume(a1);
}

id sub_3DE4C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = objc_msgSend(WeakRetained, "_filterUpdateForAsset:", v3);

  return v5;
}

id sub_3DE9C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = objc_msgSend(WeakRetained, "_filterDownloadForAsset:", v3);

  return v5;
}

id sub_3DEEC(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = objc_msgSend(WeakRetained, "_filterUploadsForAsset:", v3);

  return v5;
}

void sub_3DF3C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = objc_alloc((Class)BCManagedObjectIDMonitor);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "persistentStoreCoordinator"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForAllStoreLibraryAssetsExcludingUnpurchasedSeriesAssets](BKLibraryManager, "predicateForAllStoreLibraryAssetsExcludingUnpurchasedSeriesAssets"));
  v5 = objc_msgSend(v2, "initWithContext:coordinator:entityName:predicate:mapProperty:propertiesOfInterest:observer:", 0, v3, CFSTR("BKLibraryAsset"), v4, CFSTR("assetID"), 0, *(_QWORD *)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 72);
  *(_QWORD *)(v6 + 72) = v5;

  v8 = objc_alloc((Class)BCManagedObjectIDMonitor);
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "persistentStoreCoordinator"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForExcludingContainerLibraryAssets](BKLibraryManager, "predicateForExcludingContainerLibraryAssets"));
  v10 = objc_msgSend(v8, "initWithContext:coordinator:entityName:predicate:mapProperty:propertiesOfInterest:observer:", 0, v13, CFSTR("BKLibraryAsset"), v9, CFSTR("assetID"), 0, *(_QWORD *)(a1 + 32));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

}

id sub_3E068(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "allKeys", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "statusForAssetID:", v7));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", v7, 1, -1, 0.0));
        objc_msgSend(v8, "updateWithStatus:", v9);

        objc_msgSend(*(id *)(a1 + 32), "_addAssetID:", v7);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_updatedAssets");
}

id sub_3E3F0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "rearrangeObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "rearrangeObjects");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "rearrangeObjects");
}

uint64_t sub_3E42C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_3E438(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "rearrangeObjects");
}

uint64_t sub_3E440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_3E740(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v4, "encodeObject:forKey:", *(_QWORD *)(a1 + 32), CFSTR("Root"));
  objc_msgSend(v4, "finishEncoding");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "encodedData"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_persistedInfoURL"));
  objc_msgSend(v2, "writeToURL:atomically:", v3, 1);

}

void sub_3EAE8(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  id v11;
  void *v12;

  if (a2 == 2)
  {
    v11 = objc_begin_catch(exc_buf);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_persistedInfoURL"));
    NSLog(CFSTR("Failed to read: %@ -- %@"));

    objc_end_catch();
    JUMPOUT(0x3EA64);
  }
  objc_begin_catch(exc_buf);
  objc_exception_rethrow();
}

void sub_3EB5C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_3F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_3F42C(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v5;
  void *v6;
  char *v7;
  double v8;
  id v9;

  v9 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  v6 = v9;
  if (v5)
  {
    v7 = (char *)objc_msgSend(v9, "state");
    if ((unint64_t)(v7 - 2) < 2)
    {
LABEL_5:
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v6 = v9;
      goto LABEL_6;
    }
    v6 = v9;
    if ((unint64_t)(v7 - 4) <= 1)
    {
      objc_msgSend(v9, "progressValue");
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v8
                                                                  + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                              + 24);
      goto LABEL_5;
    }
  }
LABEL_6:

}

void sub_3F6A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  float v26;
  float v27;
  void *v28;
  double v29;
  double v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  void *v36;
  unsigned int v37;
  id v38;
  void *v39;
  _QWORD block[4];
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];

  v3 = a2;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v47;
    v38 = v4;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v47 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v9));
        if (v10)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryAssetWithAssetID:inManagedObjectContext:", v9, v3));
          if ((objc_msgSend(v11, "isContainer") & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 56), "addObject:", v9);
LABEL_34:

            goto LABEL_35;
          }
          if (!objc_msgSend(v10, "state"))
            goto LABEL_34;
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "seriesID"));
          if (v12)
          {
            v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryAssetWithAssetID:inManagedObjectContext:", v12, v3));
            v14 = (void *)v13;
            if (v13)
            {
              v39 = (void *)v13;
              objc_msgSend(*(id *)(a1 + 56), "addObject:", v12);
              v15 = (unint64_t)objc_msgSend(v10, "state");
              if (v15 > 0xB)
                goto LABEL_31;
              v14 = v39;
              if (((1 << v15) & 0xFA0) == 0)
              {
                if (((1 << v15) & 0x1C) != 0 && (objc_msgSend(v39, "isDownloading") & 1) == 0)
                {
                  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "purchasedAndLocalParent"));
                  if (v16)
                    v35 = 0;
                  else
                    v35 = objc_msgSend(v11, "isSample") ^ 1;

                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localOnlySeriesItemsParent"));
                  if (v17)
                    v37 = 0;
                  else
                    v37 = objc_msgSend(v11, "isSample") ^ 1;

                  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v9));
                  if ((char *)objc_msgSend(v18, "state") - 2 <= (_BYTE *)&dword_0 + 2)
                  {
                    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryMutableAssetWithAssetID:inManagedObjectContext:", v12, v3));
                    objc_msgSend(v34, "setState:", 2);
                    if ((v35 | v37) == 1)
                    {
                      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryMutableAssetWithAssetID:inManagedObjectContext:", v9, v3));
                      if (v35)
                      {
                        v36 = v19;
                        objc_msgSend(v19, "setPurchasedAndLocalParent:", v34);
                        objc_msgSend(*(id *)(a1 + 48), "updateAuthorForSeriesContainer:", v34);
                        v19 = v36;
                      }
                      if (v37)
                      {
                        v20 = v19;
                        objc_msgSend(v19, "setLocalOnlySeriesItemsParent:", v34);
                        v19 = v20;
                      }

                    }
                  }

                }
LABEL_31:
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectForKey:", v12));
                v22 = (char *)objc_msgSend(v21, "integerValue");

                v23 = *(void **)(a1 + 64);
                v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v22 + 1));
                objc_msgSend(v23, "setObject:forKey:", v24, v12);

                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "objectForKey:", v12));
                objc_msgSend(v25, "floatValue");
                v27 = v26;

                v28 = *(void **)(a1 + 72);
                objc_msgSend(v10, "progressValue");
                v30 = v29 + v27;
                *(float *)&v30 = v30;
                v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v30));
                objc_msgSend(v28, "setObject:forKey:", v31, v12);

                v4 = v38;
                v14 = v39;
              }
            }

          }
          goto LABEL_34;
        }
LABEL_35:

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    }
    while (v6);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_3FAFC;
  block[3] = &unk_C2788;
  v32 = *(id *)(a1 + 56);
  v33 = *(_QWORD *)(a1 + 80);
  v41 = v32;
  v42 = v33;
  v43 = *(id *)(a1 + 64);
  v44 = *(id *)(a1 + 72);
  v45 = *(id *)(a1 + 48);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_3FAFC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  float v12;
  float v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "statusForAssetID:", v7));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v7));
        v10 = objc_msgSend(v9, "integerValue");

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKey:", v7));
        objc_msgSend(v11, "floatValue");
        v13 = v12;

        if (v10)
        {
          v14 = (id)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", v7, 4, -1, (float)(v13 / (float)(unint64_t)v10)));
          objc_msgSend(v8, "updateWithStatus:", v14);
        }
        else
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", v7, 5, -1, 1.0));
          objc_msgSend(v8, "updateWithStatus:", v15);

          v16 = *(void **)(a1 + 64);
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          v17[2] = sub_3FD08;
          v17[3] = &unk_C17B8;
          v18 = v16;
          v19 = v7;
          objc_msgSend(v18, "performBlockOnWorkerQueue:", v17);
          v14 = v18;
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v4);
  }

}

void sub_3FD08(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryMutableAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), a2));
  if (objc_msgSend(v2, "state") != 5)
    objc_msgSend(v2, "setState:", 5);

}

void sub_3FE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_3FE80(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2))
  {
    if (objc_msgSend(v5, "canPause"))
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (objc_msgSend(v5, "canResume"))
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }

}

void sub_4000C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_40030(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v7))
  {
    if (objc_msgSend(v5, "state") == (char *)&dword_4 + 1)
    {
      if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 104), "containsObject:", *(_QWORD *)(a1 + 32))
        || (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "containsObject:", v7) & 1) == 0)
      {
        v6 = *(_QWORD *)(a1 + 48);
LABEL_9:
        ++*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24);
      }
    }
    else if (objc_msgSend(v5, "state") == (char *)&dword_0 + 1
           && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "containsObject:", v7) & 1) == 0)
    {
      v6 = *(_QWORD *)(a1 + 56);
      goto LABEL_9;
    }
  }

}

void sub_4020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_40240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  BOOL v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "statusForAssetID:", a2));
  if (objc_msgSend(v7, "state") == (char *)&dword_8 + 1)
  {
    v3 = *(_QWORD *)(a1 + 40);
LABEL_5:
    v4 = (_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
    v5 = v7;
    goto LABEL_6;
  }
  if (objc_msgSend(v7, "state") == (char *)&dword_8 + 2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    goto LABEL_5;
  }
  v6 = objc_msgSend(v7, "state") == (char *)&dword_8 + 3;
  v5 = v7;
  if (!v6)
    goto LABEL_7;
  v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
LABEL_6:
  ++*v4;
LABEL_7:

}

void sub_40390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_403A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_403B8(uint64_t a1)
{

}

void sub_403C0(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  NSMutableArray *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  if (!objc_msgSend(a3, "count"))
  {
    v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v5)
    {
      v6 = objc_opt_new(NSMutableArray);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    objc_msgSend(v5, "addObject:", v9);
  }

}

id sub_4075C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_processDownloadRelatedNotificationsCompletion:", a2);
}

id sub_40878(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "addObject:", *(_QWORD *)(a1 + 40));
}

void sub_40904(uint64_t a1)
{
  NSMutableArray *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  id v13;
  void *v14;
  unsigned int v15;
  id v16;
  uint64_t v17;
  NSMutableArray *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *group;
  id obj;
  _QWORD block[4];
  id v36;
  _QWORD v37[4];
  NSObject *v38;
  _QWORD v39[4];
  NSObject *v40;
  _QWORD v41[4];
  NSObject *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];

  v2 = objc_opt_new(NSMutableArray);
  v32 = a1;
  group = dispatch_group_create();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 32) + 216);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v44;
    while (1)
    {
      v7 = 0;
      v8 = v5;
      do
      {
        if (*(_QWORD *)v44 != v6)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v7);
        if (v8)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v7), "name"));
          v11 = objc_msgSend(v8, "isEqualToString:", v10);

          if ((v11 & 1) == 0
            && objc_msgSend(v8, "isEqualToString:", CFSTR("BKLibraryDownloadStatusNotification"))
            && -[NSMutableArray count](v2, "count"))
          {
            dispatch_group_enter(group);
            v12 = *(void **)(v32 + 32);
            v13 = -[NSMutableArray copy](v2, "copy");
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_40D74;
            v41[3] = &unk_C1400;
            v42 = group;
            objc_msgSend(v12, "_processDownloadStatuses:completion:", v13, v41);

            -[NSMutableArray removeAllObjects](v2, "removeAllObjects");
          }
        }
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name", v32));
        v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("BKLibraryDownloadStatusNotification"));

        if (v15)
        {
          v16 = v4;
          v17 = v6;
          v18 = v2;
          v19 = objc_opt_class(NSSet);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userInfo"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("BKLibraryDownloadStatusKey")));
          v22 = BUDynamicCast(v19, v21);
          v23 = objc_claimAutoreleasedReturnValue(v22);

          if (-[NSObject count](v23, "count"))
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject allObjects](v23, "allObjects"));
            v2 = v18;
            -[NSMutableArray addObjectsFromArray:](v18, "addObjectsFromArray:", v24);

          }
          else
          {
            v2 = v18;
          }
          v6 = v17;
          v4 = v16;
        }
        else
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
          v26 = objc_msgSend(v25, "isEqualToString:", CFSTR("BKLibraryOwnershipDidChangeNotification"));

          if (!v26)
            goto LABEL_19;
          dispatch_group_enter(group);
          v27 = *(void **)(v32 + 32);
          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472;
          v39[2] = sub_40D7C;
          v39[3] = &unk_C1400;
          v40 = group;
          objc_msgSend(v27, "_processLibraryOwnershipNotification:completion:", v9, v39);
          v23 = v40;
        }

LABEL_19:
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));

        v7 = (char *)v7 + 1;
        v8 = v5;
      }
      while (v4 != v7);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      if (!v4)
        goto LABEL_23;
    }
  }
  v5 = 0;
LABEL_23:

  objc_msgSend(*(id *)(*(_QWORD *)(v32 + 32) + 216), "removeAllObjects");
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("BKLibraryDownloadStatusNotification"))
    && -[NSMutableArray count](v2, "count"))
  {
    dispatch_group_enter(group);
    v28 = *(void **)(v32 + 32);
    v29 = -[NSMutableArray copy](v2, "copy");
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_40D84;
    v37[3] = &unk_C1400;
    v38 = group;
    objc_msgSend(v28, "_processDownloadStatuses:completion:", v29, v37);

  }
  v30 = *(void **)(v32 + 40);
  v31 = *(NSObject **)(*(_QWORD *)(v32 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_40D8C;
  block[3] = &unk_C2738;
  v36 = v30;
  dispatch_group_notify(group, v31, block);

}

void sub_40D74(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_40D7C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_40D84(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_40D8C(uint64_t a1)
{
  void (**v1)(void);
  void (**v2)(void);

  v1 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    v1[2]();
    v1 = v2;
  }

}

void sub_40E74(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_40F08;
  v7[3] = &unk_C12F8;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v4;
  objc_msgSend(v2, "_updateAssetsWithBlock:", v7);
  v5 = objc_retainBlock(*(id *)(a1 + 48));
  v6 = v5;
  if (v5)
    (*((void (**)(id))v5 + 2))(v5);

}

id sub_40F08(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assetID", v11));
        if (v8)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "statusForAssetID:", v8));
          if (objc_msgSend(v9, "state") != &dword_8 && objc_msgSend(v7, "state") != &dword_8)
            objc_msgSend(*(id *)(a1 + 40), "_addAssetID:", v8);
          objc_msgSend(v9, "updateWithStatus:", v7);
          if (objc_msgSend(v9, "state") == &dword_8)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "removeObjectForKey:", v8);
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "removeObject:", v8);
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 104), "removeObject:", v8);
            objc_msgSend(*(id *)(a1 + 40), "_removeAssetID:", v8);
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "removeObjectForKey:", v8);
          }

        }
        else
        {
          v11 = v7;
          BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryAssetStatusController.m", 1045, "-[BKLibraryAssetStatusController _processDownloadStatuses:completion:]_block_invoke_2", "NO", CFSTR("should get non-nil assetID for progress updates: %@"));
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 40), "_updatedAssets");
}

void sub_4117C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_411F0;
  v5[3] = &unk_C12F8;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "_updateAssetsWithBlock:", v5);

}

void sub_411F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *j;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  void *v19;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("BKLibraryUpdateAssetsKey")));

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "allKeys"));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_updateInfoForAssetID:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i)));
        objc_msgSend(v9, "removeObjectForKey:", CFSTR("ContentUpdate"));

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v6);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = v3;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v22;
    do
    {
      for (j = 0; j != v11; j = (char *)j + 1)
      {
        if (*(_QWORD *)v22 != v12)
          objc_enumerationMutation(obj);
        v14 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)j);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_updateInfoForAssetID:", v14));
        objc_msgSend(v15, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("ContentUpdate"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "arrangedObjects"));
        v17 = objc_msgSend(v16, "containsObject:", v14);

        if ((v17 & 1) == 0)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "statusForAssetID:", v14));
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", v14, 1, -1, 0.0));
          objc_msgSend(v18, "updateWithStatus:", v19);

          objc_msgSend(*(id *)(a1 + 40), "_addAssetID:", v14);
        }

      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    }
    while (v11);
  }

  objc_msgSend(*(id *)(a1 + 40), "_updatedAssets");
}

id sub_41508(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_removeAssetID:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_updatedAssets");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "removeObject:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "removeObject:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

id sub_415FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "addObject:", *(_QWORD *)(a1 + 40));
}

void sub_4197C(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "statusForAssetID:", *(_QWORD *)(a1 + 40)));
  if (!objc_msgSend(v3, "state") || objc_msgSend(v3, "state") == (char *)&dword_0 + 1)
    objc_msgSend(*(id *)(a1 + 32), "_removeTrackingOfAssetID:", *(_QWORD *)(a1 + 40));
  if ((*(_WORD *)(a1 + 56) != 2 || objc_msgSend(v3, "state") != (char *)&dword_4 + 1)
    && (objc_msgSend(v3, "state") == (char *)&dword_4 + 1 || objc_msgSend(v3, "state") == &dword_4))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", *(_QWORD *)(a1 + 40), 0, -1, 0.0));
    objc_msgSend(v3, "updateWithStatus:", v2);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_41A50(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_41ACC;
  v3[3] = &unk_C12F8;
  v2 = *(void **)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = v2;
  objc_msgSend(v4, "_updateAssetsWithBlock:", v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_41ACC(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "statusForAssetID:", *(_QWORD *)(a1 + 40)));
  if (!objc_msgSend(v3, "state"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", *(_QWORD *)(a1 + 40), 4, -1, 0.0));
    objc_msgSend(v3, "updateWithStatus:", v2);

  }
  objc_msgSend(*(id *)(a1 + 32), "_addAssetID:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_updatedAssets");

}

void sub_41B54(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  char v12;
  unsigned __int8 v13;
  _QWORD v14[4];
  id v15;
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "arrangedObjects"));
  v3 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(a1 + 40));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "arrangedObjects"));
  v5 = objc_msgSend(v4, "containsObject:", *(_QWORD *)(a1 + 40));

  if ((v3 & 1) != 0 || v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "statusForAssetID:", *(_QWORD *)(a1 + 40)));
    if (objc_msgSend(v6, "state") == &dword_4 && *(_WORD *)(a1 + 56) != 3)
    {
      v7 = *(void **)(a1 + 32);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_41CE0;
      v14[3] = &unk_C12F8;
      v15 = v6;
      v16 = *(id *)(a1 + 40);
      objc_msgSend(v7, "_updateAssetsWithBlock:", v14);

    }
    if ((objc_msgSend(v6, "hasFinished") & 1) == 0)
    {
      v8 = *(void **)(a1 + 32);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_41D38;
      v9[3] = &unk_C28E0;
      v12 = v5;
      v10 = v6;
      v11 = *(id *)(a1 + 40);
      v13 = v3;
      objc_msgSend(v8, "_updateAssetsWithBlock:", v9);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_41CE0(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", *(_QWORD *)(a1 + 40), 5, -1, 1.0));
  objc_msgSend(v1, "updateWithStatus:", v2);

}

void sub_41D38(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 32);
    v1 = *(_QWORD *)(a1 + 40);
    v3 = 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 49))
      return;
    v2 = *(void **)(a1 + 32);
    v1 = *(_QWORD *)(a1 + 40);
    v3 = 1;
  }
  v4 = (id)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", v1, v3, -1, 0.0));
  objc_msgSend(v2, "updateWithStatus:");

}

void sub_41DCC(uint64_t a1)
{
  void (**v1)(void);
  void (**v2)(void);

  v1 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    v1[2]();
    v1 = v2;
  }

}

void sub_41E80(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "statusForAssetID:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", *(_QWORD *)(a1 + 40), 7, -1, 0.0));
  objc_msgSend(v3, "updateWithStatus:", v2);

  objc_msgSend(*(id *)(a1 + 32), "_addAssetID:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_updatedAssets");

}

void sub_41FCC(uint64_t a1, int a2)
{
  void *v2;
  _QWORD v3[5];
  id v4;

  if (a2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_4203C;
    v3[3] = &unk_C12F8;
    v2 = *(void **)(a1 + 40);
    v3[4] = *(_QWORD *)(a1 + 32);
    v4 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  }
}

void sub_4203C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "statusForAssetID:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "updateWithWaitingToBeDownloadable:", 1);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(v3 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_420FC;
  v7[3] = &unk_C2930;
  v7[4] = v3;
  v8 = v4;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v5, "waitForBookWithAssetID:toBeDownloadableWithTimeout:completion:", v8, v7, 120.0);

}

void sub_420FC(uint64_t a1, int a2)
{
  void *v3;
  id *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  _QWORD block[5];
  id v9;
  id v10;

  if (a2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_421E4;
    block[3] = &unk_C1918;
    v3 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v4 = &v9;
    v9 = v3;
    v10 = *(id *)(a1 + 48);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_425D8;
    v6[3] = &unk_C12F8;
    v5 = *(void **)(a1 + 40);
    v6[4] = *(_QWORD *)(a1 + 32);
    v4 = &v7;
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
  }

}

void sub_421E4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  _QWORD v7[4];
  _QWORD *v8;
  _QWORD v9[5];
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_42358;
  v12[3] = &unk_C12F8;
  v2 = *(void **)(a1 + 40);
  v13 = *(id *)(a1 + 32);
  v14 = v2;
  objc_msgSend(v13, "_updateAssetsWithBlock:", v12);
  if ((objc_msgSend(*(id *)(a1 + 48), "canStart") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 48), "canRestart"))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_42388;
    v9[3] = &unk_C1918;
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = *(id *)(a1 + 48);
    v11 = *(id *)(a1 + 40);
    v3 = objc_retainBlock(v9);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "arrangedObjects"));
    v5 = objc_msgSend(v4, "containsObject:", *(_QWORD *)(a1 + 40));

    if ((v5 & 1) != 0)
    {
      ((void (*)(_QWORD *))v3[2])(v3);
    }
    else
    {
      v6 = *(void **)(a1 + 32);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_425CC;
      v7[3] = &unk_C2908;
      v8 = v3;
      objc_msgSend(v6, "checkForUpdates:", v7);

    }
  }

}

id sub_42358(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "removeObject:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "removeObject:", *(_QWORD *)(a1 + 40));
}

void sub_42388(uint64_t a1)
{
  void *v2;
  _QWORD block[5];
  id v4;
  id v5;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_42414;
  block[3] = &unk_C1918;
  v2 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v4 = v2;
  v5 = *(id *)(a1 + 48);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_42414(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_425B4;
  v10[3] = &unk_C1400;
  v2 = *(void **)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_updateAssetsWithBlock:", v10);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "arrangedObjects"));
  if (objc_msgSend(v3, "containsObject:", *(_QWORD *)(a1 + 48)))
  {
    if ((objc_msgSend(*(id *)(a1 + 40), "canStart") & 1) != 0)
    {

LABEL_6:
      v5 = *(void **)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 48);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
      objc_msgSend(v5, "_startUpdateForAssetIDs:", v6);

      goto LABEL_11;
    }
    v4 = objc_msgSend(*(id *)(a1 + 40), "canRestart");

    if ((v4 & 1) != 0)
      goto LABEL_6;
  }
  else
  {

  }
  if ((objc_msgSend(*(id *)(a1 + 40), "canPause") & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 40), "canResume") & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 40), "canRestart") & 1) == 0)
  {
    v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_425C0;
    v8[3] = &unk_C12F8;
    v8[4] = v7;
    v9 = *(id *)(a1 + 48);
    objc_msgSend(v7, "_updateAssetsWithBlock:", v8);

  }
LABEL_11:

}

id sub_425B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateWithWaitingToBeDownloadable:", 0);
}

id sub_425C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_showUpdateFailureForAssetID:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_425CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_425D8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_showUpdateFailureForAssetID:", *(_QWORD *)(a1 + 40));
}

void sub_42670(uint64_t a1)
{
  NSMutableDictionary *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSMutableDictionary *v10;
  _QWORD v11[5];
  NSMutableDictionary *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = objc_opt_new(NSMutableDictionary);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(void **)(v8 + 64);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_427E0;
  v11[3] = &unk_C2958;
  v11[4] = v8;
  v12 = v2;
  v10 = v2;
  objc_msgSend(v9, "startUpdateForAssets:completion:", v10, v11);

}

void sub_427E0(uint64_t a1, char a2)
{
  void *v2;
  _QWORD v3[5];
  id v4;

  if ((a2 & 1) == 0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_42850;
    v3[3] = &unk_C12F8;
    v2 = *(void **)(a1 + 40);
    v3[4] = *(_QWORD *)(a1 + 32);
    v4 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  }
}

void sub_42850(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_428C4;
  v5[3] = &unk_C12F8;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "_updateAssetsWithBlock:", v5);

}

void sub_428C4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "statusForAssetID:", v7, (_QWORD)v10));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDownloadStatus statusWithAssetID:state:progressValue:timeRemaining:](BKLibraryDownloadStatus, "statusWithAssetID:state:progressValue:timeRemaining:", v7, 7, -1, 0.0));
        objc_msgSend(v8, "updateWithStatus:", v9);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void sub_42A90(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 56);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "pauseDownloadForAssetID:", *(_QWORD *)(a1 + 40), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_42C0C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 56);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "resumeDownloadForAssetID:", *(_QWORD *)(a1 + 40), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_42F48(uint64_t a1)
{
  NSMutableArray *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = objc_opt_new(NSMutableArray);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "copy", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", v8));
        if (objc_msgSend(v9, "state") == (char *)&dword_4 + 1)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeObjectForKey:", v8);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeObjectForKey:", v8);
          -[NSMutableArray addObject:](v2, "addObject:", v8);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "removeObject:", v8);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "removeObject:", v8);
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  if (-[NSMutableArray count](v2, "count"))
    objc_msgSend(*(id *)(a1 + 32), "_removeAssetIDs:", v2);

}

void sub_43134(uint64_t a1)
{
  NSMutableArray *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = objc_opt_new(NSMutableArray);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "copy", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", v8));
        if (objc_msgSend(v9, "state") == (char *)&dword_8 + 3)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeObjectForKey:", v8);
          -[NSMutableArray addObject:](v2, "addObject:", v8);
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  if (-[NSMutableArray count](v2, "count"))
    objc_msgSend(*(id *)(a1 + 32), "_removeAssetIDs:", v2);

}

void sub_43334(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  uint64_t v11;

  v5 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_433D8;
  v8[3] = &unk_C2980;
  v6 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = a2;
  v9 = v5;
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

}

uint64_t sub_433D8(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setCheckingForUpdates:", 0);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
  return result;
}

void sub_4352C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = objc_alloc_init((Class)NSMutableSet);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "arrangedObjects"));
  objc_msgSend(v2, "addObjectsFromArray:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "arrangedObjects"));
  objc_msgSend(v2, "addObjectsFromArray:", v4);

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", v10, (_QWORD)v14));
        v12 = v11;
        if (v11)
        {
          if (objc_msgSend(v11, "state") == (char *)&dword_4 + 1)
          {
            v13 = 104;
          }
          else
          {
            if (objc_msgSend(v12, "state") != (char *)&dword_0 + 1)
              goto LABEL_12;
            v13 = 112;
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + v13), "addObject:", v10);
        }
LABEL_12:

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

}

id sub_43728(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_4377C;
  v3[3] = &unk_C1400;
  v3[4] = v1;
  return objc_msgSend(v1, "_updateAssetsWithBlock:", v3);
}

id sub_4377C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "rearrangeObjects");
}

void sub_43924(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_4399C;
  v4[3] = &unk_C12F8;
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

id sub_4399C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deletedObjects"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "_removeTrackingOfAssetID:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_43ACC;
  v9[3] = &unk_C1400;
  v9[4] = v7;
  return objc_msgSend(v7, "_updateAssetsWithBlock:", v9);
}

id sub_43ACC(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "rearrangeObjects");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "rearrangeObjects");
}

uint64_t sub_43BA8(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "assetID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v4));
  v6 = (*(uint64_t (**)(uint64_t, void *))(v2 + 16))(v2, v5);

  return v6;
}

id sub_43DBC(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_43E10;
  v3[3] = &unk_C1400;
  v3[4] = v1;
  return objc_msgSend(v1, "_updateAssetsWithBlock:", v3);
}

id sub_43E10(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "rearrangeObjects");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "rearrangeObjects");
}

void sub_448EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const __CFString *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[8];
  uint8_t buf[4];
  const __CFString *v18;

  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = BKLibraryAssetDetailsLog();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a1 + 40))
        v4 = CFSTR("YES");
      else
        v4 = CFSTR("NO");
      *(_DWORD *)buf = 138543362;
      v18 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Set enable cloud merge:%{public}@", buf, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = *(_BYTE *)(a1 + 40);
    if (*(_BYTE *)(a1 + 40))
    {
      v5 = objc_alloc((Class)BCManagedObjectIDMonitor);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "persistentStoreCoordinator"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForExcludingContainerLibraryAssets](BKLibraryManager, "predicateForExcludingContainerLibraryAssets"));
      v16[0] = CFSTR("isFinished");
      v16[1] = CFSTR("notFinished");
      v16[2] = CFSTR("taste");
      v16[3] = CFSTR("tasteSyncedToStore");
      v16[4] = CFSTR("lastOpenDate");
      v16[5] = CFSTR("dateFinished");
      v16[6] = CFSTR("isTrackedAsRecent");
      v16[7] = CFSTR("lastEngagedDate");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 8));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v9));
      v11 = objc_msgSend(v5, "initWithContext:coordinator:entityName:predicate:mapProperty:propertiesOfInterest:observer:", 0, v7, CFSTR("BKLibraryAsset"), v8, CFSTR("assetID"), v10, *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(a1 + 32), "setLibraryAssetMonitor:", v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudAssetDetailManager"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_44B98;
      v15[3] = &unk_C29F8;
      v15[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v12, "currentAssetDetailCloudSyncVersions:", v15);

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudReadingNowDetailManager"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_44D38;
      v14[3] = &unk_C29F8;
      v14[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v13, "currentReadingNowDetailCloudSyncVersions:", v14);

    }
  }
}

void sub_44B98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_44C3C;
  v6[3] = &unk_C17B8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "performNamed:workerQueueBlock:", CFSTR("setEnableCloudMerge"), v6);

}

void sub_44C3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCAssetDetail"), v3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "historyToken"));
  if (!v6 || !objc_msgSend(v5, "localVersion"))
  {

    goto LABEL_8;
  }
  v7 = objc_msgSend(v5, "localVersion");
  v8 = objc_msgSend(v5, "syncVersion");

  if (v7 != v8)
  {
LABEL_8:
    objc_msgSend(*(id *)(a1 + 32), "p_syncAllAssetDetailChangesToCloudInMOC:", v3);
    goto LABEL_9;
  }
  v9 = BKLibraryAssetDetailsLog();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_82740();

LABEL_9:
  objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudAssetDetailManagerInMOC:reason:", v3, CFSTR("enableCloudMerge"));

}

void sub_44D38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_44DDC;
  v6[3] = &unk_C17B8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "performNamed:workerQueueBlock:", CFSTR("updateReadingNowDetails"), v6);

}

void sub_44DDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  unsigned int v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  uint8_t v15[16];
  uint8_t buf[16];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCReadingNowDetail"), v3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "historyToken"));
  if (v6 && objc_msgSend(v5, "localVersion"))
  {
    v7 = objc_msgSend(v5, "localVersion");
    v8 = objc_msgSend(v5, "syncVersion");

    if (v7 == v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
      v10 = objc_msgSend(v9, "verboseLoggingEnabled");

      if (v10)
      {
        v11 = BKLibraryAssetDetailsDevelopmentLog();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v15 = 0;
          _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "\"\\\"BCReadingNowDetail cloudSyncVersions in sync on enabling cloud merge\\\"\"", v15, 2u);
        }

      }
      goto LABEL_12;
    }
  }
  else
  {

  }
  v13 = BKLibraryAssetDetailsLog();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "BCReadingNowDetail cloudSyncVersions out of date. SKIP AssetPopulation.Setting all records to cloud", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "p_syncAllReadingNowChangesToCloudInMOC:", v3);
LABEL_12:

}

id sub_44FDC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudReadingNowDetailManagerInMOC:reason:", a2, CFSTR("enableReadingNowSync"));
}

void sub_45474(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  float v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  float v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  float v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[5];
  id v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  double v62;
  _BYTE v63[128];

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v9 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
    if (!v9)
      goto LABEL_29;
    v10 = v9;
    v11 = *(_QWORD *)v54;
    while (1)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v54 != v11)
          objc_enumerationMutation(v5);
        v13 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v13, "avoidSync") & 1) == 0)
        {
          v19 = objc_opt_class(BCMutableAssetDetail);
          v20 = *(void **)(a1 + 32);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationAssetID"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v21));
          v23 = BUDynamicCast(v19, v22);
          v15 = objc_claimAutoreleasedReturnValue(v23);

          v24 = BKLibraryAssetDetailsLog();
          v25 = objc_claimAutoreleasedReturnValue(v24);
          v26 = v25;
          if (v15)
          {
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationAssetID"));
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationLocation"));
              objc_msgSend(v13, "readingProgress");
              *(_DWORD *)buf = 138412802;
              v58 = v27;
              v59 = 2112;
              v60 = v28;
              v61 = 2048;
              v62 = v29;
              _os_log_impl(&dword_0, v26, OS_LOG_TYPE_DEFAULT, "BCAssetDetail synchronizing #globalAnnotation for assetID:%@, location:%@, progress:%f", buf, 0x20u);

            }
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationLocation"));
            -[NSObject setReadingPositionCFIString:](v15, "setReadingPositionCFIString:", v30);

            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationVersion"));
            -[NSObject setReadingPositionAnnotationVersion:](v15, "setReadingPositionAnnotationVersion:", v31);

            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "assetVersion"));
            -[NSObject setReadingPositionAssetVersion:](v15, "setReadingPositionAssetVersion:", v32);

            objc_msgSend(v13, "readingProgress");
            -[NSObject setReadingProgress:](v15, "setReadingProgress:");
            objc_msgSend(v13, "readingProgressHighWaterMark");
            -[NSObject setReadingProgressHighWaterMark:](v15, "setReadingProgressHighWaterMark:");
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "plUserData"));
            -[NSObject setReadingPositionUserData:](v15, "setReadingPositionUserData:", v33);

            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "plLocationRangeStart"));
            -[NSObject setReadingPositionLocationRangeStart:](v15, "setReadingPositionLocationRangeStart:", objc_msgSend(v34, "intValue"));

            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "plLocationRangeEnd"));
            -[NSObject setReadingPositionLocationRangeEnd:](v15, "setReadingPositionLocationRangeEnd:", objc_msgSend(v35, "intValue"));

            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "plAbsolutePhysicalLocation"));
            -[NSObject setReadingPositionAbsolutePhysicalLocation:](v15, "setReadingPositionAbsolutePhysicalLocation:", objc_msgSend(v36, "intValue"));

            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "plStorageUUID"));
            -[NSObject setReadingPositionStorageUUID:](v15, "setReadingPositionStorageUUID:", v37);

            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "locationModificationDate"));
            if (v38)
            {

              goto LABEL_18;
            }
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationLocation"));
            if (objc_msgSend(v43, "length"))
            {

              goto LABEL_24;
            }
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "plUserData"));
            v45 = objc_msgSend(v44, "length");

            if (v45)
LABEL_24:
              v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationModificationDate"));
            else
LABEL_18:
              v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "locationModificationDate"));
            v26 = v39;
            -[NSObject setReadingPositionLocationUpdateDate:](v15, "setReadingPositionLocationUpdateDate:", v39);
          }
          else if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationAssetID"));
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationLocation"));
            objc_msgSend(v13, "readingProgress");
            *(_DWORD *)buf = 138412802;
            v58 = v40;
            v59 = 2112;
            v60 = v41;
            v61 = 2048;
            v62 = v42;
            _os_log_error_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "error getting mutable assetDetail for annotationID: %@, location:%@, progress:%f ", buf, 0x20u);

          }
          goto LABEL_27;
        }
        v14 = BKLibraryAssetDetailsLog();
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationAssetID"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "annotationLocation"));
          objc_msgSend(v13, "readingProgress");
          *(_DWORD *)buf = 138412802;
          v58 = v16;
          v59 = 2112;
          v60 = v17;
          v61 = 2048;
          v62 = v18;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "Skipping synchronization of #globalAnnotation for assetID:%@, location:%@, progress:%f", buf, 0x20u);

        }
LABEL_27:

      }
      v10 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
      if (!v10)
      {
LABEL_29:
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cloudAssetDetailManager"));
        v50[0] = _NSConcreteStackBlock;
        v50[1] = 3221225472;
        v50[2] = sub_45A1C;
        v50[3] = &unk_C2A48;
        v47 = *(_QWORD *)(a1 + 32);
        v49 = *(void **)(a1 + 48);
        v48 = *(_QWORD *)(a1 + 56);
        v50[4] = *(_QWORD *)(a1 + 40);
        v52 = v48;
        v51 = v49;
        objc_msgSend(v46, "setAssetDetails:completion:", v47, v50);

        v6 = 0;
        goto LABEL_30;
      }
    }
  }
  v7 = BKLibraryAssetDetailsLog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_827CC();

LABEL_30:
}

void sub_45A1C(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  id v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  id v16;
  id v17;
  _QWORD v18[6];
  uint8_t buf[4];
  void *v20;

  v7 = a4;
  if (!a2)
  {
    v16 = BKLibraryAssetDetailsLog();
    v13 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_82854();
    goto LABEL_12;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_45C08;
  v18[3] = &unk_C2A20;
  v9 = *(_QWORD *)(a1 + 48);
  v18[4] = *(_QWORD *)(a1 + 32);
  v18[5] = v9;
  objc_msgSend(v8, "performNamed:workerQueueBlock:", CFSTR("setSyncVersion"), v18);

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
  v11 = objc_msgSend(v10, "verboseLoggingEnabled");

  if (a3)
  {
    if (v11)
    {
      v12 = BKLibraryAssetDetailsDevelopmentLog();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "componentsJoinedByString:", CFSTR(", ")));
        *(_DWORD *)buf = 138412290;
        v20 = v14;
        v15 = "\"\\\"succesfully set assetDetails for assetIDs: [%@]\\\"\"";
LABEL_11:
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);

        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  else if (v11)
  {
    v17 = BKLibraryAssetDetailsDevelopmentLog();
    v13 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "componentsJoinedByString:", CFSTR(", ")));
      *(_DWORD *)buf = 138412290;
      v20 = v14;
      v15 = "\"\\\"succesfully set assetDetails, but no changes for assetIDs: [%@]\\\"\"";
      goto LABEL_11;
    }
LABEL_12:

  }
}

void sub_45C08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCAssetDetail"), v3));

  objc_msgSend(v5, "setSyncVersion:", *(_QWORD *)(a1 + 40));
}

void sub_45C84(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCAssetDetail"), v3));

  objc_msgSend(v5, "setSyncVersion:", *(_QWORD *)(a1 + 40));
}

void sub_45EEC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  unsigned int v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[6];
  _QWORD v32[5];
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  void *v41;

  v2 = BKLibraryAssetDetailsLog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("assetID")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bu_prettyDescription"));
    *(_DWORD *)buf = 138412290;
    v41 = v5;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "p_syncReadingNowDetailsForAssets assets%@", buf, 0xCu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCReadingNowDetail"), *(_QWORD *)(a1 + 48)));

    objc_msgSend(v7, "setLocalVersion:", (char *)objc_msgSend(v7, "localVersion") + 1);
    v29 = v7;
    v28 = objc_msgSend(v7, "localVersion");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v30 = a1;
    v9 = *(id *)(a1 + 32);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v36 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
          v15 = objc_msgSend(v14, "hasImportantReadingNowDetails");
          v16 = BKLibraryAssetDetailsLog();
          v17 = objc_claimAutoreleasedReturnValue(v16);
          v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
          if (v15)
          {
            if (v18)
            {
              *(_DWORD *)buf = 138412290;
              v41 = v14;
              _os_log_debug_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "*********** hasImportantReadingNowDetails for asset %@", buf, 0xCu);
            }

            v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "readingNowDetailRepresentation"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "assetID"));

            if (v19)
            {
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "assetID"));
              objc_msgSend(v8, "setObject:forKey:", v17, v20);

            }
          }
          else if (v18)
          {
            *(_DWORD *)buf = 138412290;
            v41 = v14;
            _os_log_debug_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "*********** does not hasImportantReadingNowDetails for asset %@", buf, 0xCu);
          }

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      }
      while (v11);
    }

    if (objc_msgSend(v8, "count"))
    {
      v21 = BKLibraryAssetDetailsLog();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        sub_82904(v8);

    }
    if (objc_msgSend(v8, "count"))
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allKeys"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v30 + 40), "cloudReadingNowDetailManager"));
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_46304;
      v32[3] = &unk_C2A48;
      v25 = *(_QWORD *)(v30 + 40);
      v33 = v23;
      v34 = v28;
      v32[4] = v25;
      v26 = v23;
      objc_msgSend(v24, "setReadingNowDetails:completion:", v8, v32);

    }
    else
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v30 + 40), "libraryManager"));
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_46498;
      v31[3] = &unk_C2A20;
      v31[4] = *(_QWORD *)(v30 + 40);
      v31[5] = v28;
      objc_msgSend(v27, "performBlockOnWorkerQueue:", v31);

    }
  }
}

void sub_46304(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  _BOOL4 v12;
  id v13;
  NSObject *v14;
  _QWORD v15[6];

  v7 = a4;
  if (a2)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_4641C;
    v15[3] = &unk_C2A20;
    v9 = *(_QWORD *)(a1 + 48);
    v15[4] = *(_QWORD *)(a1 + 32);
    v15[5] = v9;
    objc_msgSend(v8, "performNamed:workerQueueBlock:", CFSTR("syncReadingNowDetailsForAssets"), v15);

    v10 = BKLibraryAssetDetailsLog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (a3)
    {
      if (v12)
        sub_82970(a1);
    }
    else if (v12)
    {
      sub_829E8(a1);
    }

  }
  else
  {
    v13 = BKLibraryAssetDetailsLog();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_82A60();

  }
}

void sub_4641C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCReadingNowDetail"), v3));

  objc_msgSend(v5, "setSyncVersion:", *(_QWORD *)(a1 + 40));
}

void sub_46498(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCReadingNowDetail"), v3));

  objc_msgSend(v5, "setSyncVersion:", *(_QWORD *)(a1 + 40));
}

void sub_466D4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD block[4];
  id v24;
  uint64_t v25;
  id v26;
  _QWORD v27[5];
  id v28;
  uint8_t buf[4];
  id v30;

  v2 = BKLibraryAssetDetailsLog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_82C50(a1);

  if (objc_msgSend(*(id *)(a1 + 32), "enableCloudMerge"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addedObjects"));
    v5 = objc_msgSend(v4, "mutableCopy");

    if (objc_msgSend(v5, "count"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
      v7 = objc_msgSend(v6, "verboseLoggingEnabled");

      if (v7)
      {
        v8 = BKLibraryAssetDetailsDevelopmentLog();
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v30 = objc_msgSend(v5, "count");
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "\"\\\"ManagedObjectBackgroundMonitor found %lu assets added\\\"\"", buf, 0xCu);
        }

      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudAssetDetailManager"));
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_469B4;
      v27[3] = &unk_C2AC0;
      v27[4] = *(_QWORD *)(a1 + 32);
      v11 = v5;
      v28 = v11;
      objc_msgSend(v10, "assetDetailsForAssetIDs:completion:", v11, v27);

      v12 = _os_activity_create(&dword_0, "Books/added-ReadingNow", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_46E18;
      block[3] = &unk_C1918;
      v13 = *(id *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 32);
      v24 = v13;
      v25 = v14;
      v26 = v11;
      os_activity_apply(v12, block);

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "updatedObjects"));
    if (objc_msgSend(v15, "count"))
    {
      v16 = _os_activity_create(&dword_0, "Books/updated-ReadingNow", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_4730C;
      v20[3] = &unk_C12F8;
      v17 = v15;
      v18 = *(_QWORD *)(a1 + 32);
      v21 = v17;
      v22 = v18;
      os_activity_apply(v16, v20);

    }
    else
    {
      v19 = BKLibraryAssetDetailsLog();
      v16 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        sub_82C24();
    }

  }
}

void sub_469B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[4];
  NSObject *v17;
  uint64_t v18;
  id v19;
  id v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = BKLibraryAssetDetailsLog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_82CD0();
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_46AC4;
    v16[3] = &unk_C2A98;
    v13 = v7;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v8;
    objc_msgSend(v12, "performBlockOnWorkerQueue:", v16);

    v11 = v17;
  }

}

void sub_46AC4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  void *v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 2);
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager", v30));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
        v11 = v3;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "libraryMutableAssetWithAssetID:inManagedObjectContext:", v10, v3));

        objc_msgSend(v12, "configureFromAssetDetail:", v8);
        if (objc_msgSend(v12, "needsGlobalAnnotation"))
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "readingPositionCFIString"));
          if (objc_msgSend(v13, "length"))
          {

          }
          else
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "readingPositionUserData"));
            v15 = objc_msgSend(v14, "length");

            if (!v15)
              goto LABEL_11;
          }
          objc_msgSend(v30, "addObject:", v8);
        }
LABEL_11:
        v16 = *(void **)(a1 + 48);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
        objc_msgSend(v16, "removeObjectIdenticalTo:", v17);

        v3 = v11;
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    }
    while (v5);
  }

  v18 = *(void **)(a1 + 40);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "annotationProvider"));
  objc_msgSend(v18, "_updateGlobalAnnotationsFromDetails:annotationProvider:", v30, v19);

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
  objc_msgSend(v20, "updateCloudVersionFromCloudSyncVersions:inContext:", *(_QWORD *)(a1 + 56), v3);

  if (objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "libraryAssetsWithAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 48), v3));

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v24 = v23;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v26; j = (char *)j + 1)
        {
          if (*(_QWORD *)v33 != v27)
            objc_enumerationMutation(v24);
          v29 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v29, "hasImportantAssetDetails", v30))
            objc_msgSend(v21, "addObject:", v29);
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      }
      while (v26);
    }

    if (objc_msgSend(v21, "count"))
      objc_msgSend(*(id *)(a1 + 40), "p_syncAssetDetailsForAssets:inMOC:", v21, v3);

  }
}

void sub_46E18(id *a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "addedObjects"));
  v3 = objc_msgSend(v2, "mutableCopy");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "cloudReadingNowDetailManager"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_46EE0;
  v8[3] = &unk_C2AE8;
  v5 = a1[6];
  v6 = a1[5];
  v9 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "readingNowDetailsForAssetIDs:completion:", v7, v8);

}

void sub_46EE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[4];
  NSObject *v19;
  uint64_t v20;
  id v21;
  id v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = BKLibraryAssetDetailsLog();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    sub_82DDC();

  if (v9)
  {
    v12 = BKLibraryAssetDetailsLog();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_82D54();
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_47020;
    v18[3] = &unk_C2A98;
    v15 = v7;
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(void **)(a1 + 48);
    v19 = v15;
    v20 = v16;
    v21 = v17;
    v22 = v8;
    objc_msgSend(v14, "performBlockOnWorkerQueue:", v18);

    v13 = v19;
  }

}

void sub_47020(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  id v25;
  id v26;
  NSObject *v27;
  _BOOL4 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 2);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "assetID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "libraryMutableAssetWithAssetID:inManagedObjectContext:", v11, v3));

        objc_msgSend(v12, "configureFromReadingNowDetail:", v9);
        v13 = *(void **)(a1 + 48);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "assetID"));
        objc_msgSend(v13, "removeObjectIdenticalTo:", v14);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v6);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
  objc_msgSend(v15, "updateCloudVersionFromCloudSyncVersions:inContext:", *(_QWORD *)(a1 + 56), v3);

  if (objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "libraryAssetsWithAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 48), v3));

    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v19 = v18;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v30;
      do
      {
        for (j = 0; j != v21; j = (char *)j + 1)
        {
          if (*(_QWORD *)v30 != v22)
            objc_enumerationMutation(v19);
          v24 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v24, "hasImportantReadingNowDetails", (_QWORD)v29))
            objc_msgSend(v16, "addObject:", v24);
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      }
      while (v21);
    }

    v25 = objc_msgSend(v16, "count");
    v26 = BKLibraryAssetDetailsLog();
    v27 = objc_claimAutoreleasedReturnValue(v26);
    v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    if (v25)
    {
      if (v28)
        sub_82E78();

      objc_msgSend(*(id *)(a1 + 40), "p_syncReadingNowDetailsForAssets:inMOC:", v16, v3);
    }
    else
    {
      if (v28)
        sub_82E4C();

    }
  }

}

void sub_4730C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  int8x16_t v6;
  _QWORD v7[4];
  int8x16_t v8;

  v2 = BKLibraryAssetDetailsLog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_82EA4(a1);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_473CC;
  v7[3] = &unk_C17B8;
  v6 = *(int8x16_t *)(a1 + 32);
  v5 = (id)v6.i64[0];
  v8 = vextq_s8(v6, v6, 8uLL);
  objc_msgSend(v4, "performBlockOnWorkerQueue:", v7);

}

void sub_473CC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "libraryAssetsWithAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), v3));

  objc_msgSend(*(id *)(a1 + 32), "p_syncAssetDetailsForAssets:inMOC:", v5, v3);
  v6 = BKLibraryAssetDetailsLog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_82F0C();

  objc_msgSend(*(id *)(a1 + 32), "p_syncReadingNowDetailsForAssets:inMOC:", v5, v3);
}

void sub_474DC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  NSObject *v5;
  void *v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[16];

  if ((objc_msgSend(*(id *)(a1 + 32), "processingAssetDetailChanges") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v3 = objc_msgSend(v2, "verboseLoggingEnabled");

    if (v3)
    {
      v4 = BKLibraryAssetDetailsDevelopmentLog();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "\"\\\"#assetDetailChanged BCCloudAssetDetailManagerChanged notification received, deferring processing\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setReceivedAssetDetailChangesNotification:", 1);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setProcessingAssetDetailChanges:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v7 = objc_msgSend(v6, "verboseLoggingEnabled");

    if (v7)
    {
      v8 = BKLibraryAssetDetailsDevelopmentLog();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "\"\\\"#assetDetailChanged BCCloudAssetDetailManagerChanged notification received, starting processing\\\"\"", buf, 2u);
      }

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_47650;
    v11[3] = &unk_C1590;
    v11[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v10, "performBackgroundReadOnlyBlock:", v11);

  }
}

id sub_47650(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudAssetDetailManagerInMOC:reason:", a2, CFSTR("BCCloudAssetDetailManagerChanged"));
}

void sub_47740(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  _QWORD v10[5];
  uint8_t buf[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "receivedAssetDetailChangesNotification");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
  v4 = objc_msgSend(v3, "verboseLoggingEnabled");

  if (v2)
  {
    if (v4)
    {
      v5 = BKLibraryAssetDetailsDevelopmentLog();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "\"\\\"#assetDetailChanged completed fetchAgain, processing deferred notification.\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setReceivedAssetDetailChangesNotification:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_47898;
    v10[3] = &unk_C1590;
    v10[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v7, "performBackgroundReadOnlyBlock:", v10);

  }
  else
  {
    if (v4)
    {
      v8 = BKLibraryAssetDetailsDevelopmentLog();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "\"\\\"#assetDetailChanged completed fetchAgain, NO deferred notification.\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setProcessingAssetDetailChanges:", 0);
  }
}

id sub_47898(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudAssetDetailManagerInMOC:reason:", a2, CFSTR("deferred"));
}

void sub_47A20(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  double v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  double v27;
  void *v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  double v40;
  float v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  float v46;
  id v47;
  NSObject *v48;
  void *v49;
  float v50;
  double v51;
  float v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  float v56;
  double v57;
  float v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  unsigned __int8 v65;
  void *v66;
  void *v67;
  void *v68;
  unsigned __int8 v69;
  void *v70;
  void *v71;
  void *v72;
  unsigned __int8 v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  NSObject *v78;
  void *v79;
  double v80;
  void *v81;
  double v82;
  void *v83;
  void *v84;
  double v85;
  double v86;
  void *v87;
  double v88;
  double v89;
  uint64_t v90;
  const __CFString *v91;
  double v92;
  id v93;
  int v94;
  uint64_t v95;
  _BOOL4 v96;
  void *v97;
  double v98;
  double v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id obj;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint8_t v111[4];
  uint64_t v112;
  uint8_t buf[4];
  void *v114;
  __int16 v115;
  const __CFString *v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  _BYTE v123[128];

  v6 = a2;
  v7 = a3;
  v103 = a4;
  v104 = v7;
  if (!v7)
  {
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v10 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
    if (!v10)
      goto LABEL_56;
    v11 = v10;
    v12 = *(_QWORD *)v108;
    obj = v6;
    while (1)
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v108 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "annotationAssetID"));
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v15));
        v17 = v16;
        if (v16)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionLocationUpdateDate](v16, "readingPositionLocationUpdateDate"));
          objc_msgSend(v18, "timeIntervalSinceReferenceDate");
          v20 = v19;
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "locationModificationDate"));
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;

          if (v20 > v23)
          {
            v24 = ((uint64_t (*)(void))BKMobileCloudSyncAnnotationsLog)();
            v25 = objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "annotationLocation"));
              v27 = COERCE_DOUBLE(objc_msgSend(v26, "length"));
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "plUserData"));
              v29 = COERCE_DOUBLE(objc_msgSend(v28, "length"));
              *(_DWORD *)buf = 138413058;
              v114 = v15;
              v115 = 2048;
              v116 = v17;
              v117 = 2048;
              v118 = v27;
              v119 = 2048;
              v120 = v29;
              _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "About to CloudKit merge into annotation with assetID:%@ from assetDetail:%p annotation.annotationLocation.length=%lu annotation.plUserData.length=%lu", buf, 0x2Au);

            }
            objc_msgSend(v14, "readingProgress");
            v31 = v30;
            -[__CFString readingProgress](v17, "readingProgress");
            v33 = v32;
            objc_msgSend(v14, "readingProgress");
            v35 = v34;
            if (v33 != v34)
            {
              -[__CFString readingProgress](v17, "readingProgress");
              objc_msgSend(v14, "setReadingProgress:");
            }
            -[__CFString readingProgressHighWaterMark](v17, "readingProgressHighWaterMark");
            v37 = v36;
            objc_msgSend(v14, "readingProgressHighWaterMark");
            v39 = v38;
            -[__CFString readingProgressHighWaterMark](v17, "readingProgressHighWaterMark");
            v41 = *(float *)&v40;
            if (v37 > v39)
            {
              v42 = objc_msgSend(v14, "setReadingProgressHighWaterMark:", v40);
              goto LABEL_27;
            }
            v42 = objc_msgSend(v14, "readingProgressHighWaterMark");
            if (v41 < v46)
            {
              v47 = BKLibraryAssetDetailsLog();
              v48 = objc_claimAutoreleasedReturnValue(v47);
              if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
              {
                v49 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString assetID](v17, "assetID"));
                objc_msgSend(v14, "readingProgressHighWaterMark");
                v51 = v50;
                -[__CFString readingProgressHighWaterMark](v17, "readingProgressHighWaterMark");
                *(_DWORD *)buf = 138413058;
                v114 = v49;
                v115 = 2048;
                v116 = v17;
                v117 = 2048;
                v118 = v51;
                v119 = 2048;
                v120 = v52;
                _os_log_impl(&dword_0, v48, OS_LOG_TYPE_INFO, "BCMutableAssetDetail assetID:%@ assetDetail:%p attempt to move annotations readingProgressHighWaterMark backwards from %f to %f", buf, 0x2Au);

              }
            }
            if (v33 != v35)
            {
LABEL_27:
              v53 = BKMobileCloudSyncAnnotationsLog(v42);
              v54 = objc_claimAutoreleasedReturnValue(v53);
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
              {
                v55 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString assetID](v17, "assetID"));
                objc_msgSend(v14, "readingProgress");
                v57 = v56;
                objc_msgSend(v14, "readingProgressHighWaterMark");
                *(_DWORD *)buf = 138413314;
                v114 = v55;
                v115 = 2048;
                v116 = v17;
                v117 = 2048;
                v118 = v31;
                v119 = 2048;
                v120 = v57;
                v121 = 2048;
                v122 = v58;
                _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEFAULT, "Adopting reading progress for assetID:%@ assetDetail:%p synced from cloud. annotation.readingProgress:%f readingProgress: %f highWaterMark: %f", buf, 0x34u);

              }
            }
            v59 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionCFIString](v17, "readingPositionCFIString"));
            objc_msgSend(v14, "setDifferentString:forKey:", v59, CFSTR("annotationLocation"));

            v60 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionAnnotationVersion](v17, "readingPositionAnnotationVersion"));
            objc_msgSend(v14, "setDifferentString:forKey:", v60, CFSTR("annotationVersion"));

            v61 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionAssetVersion](v17, "readingPositionAssetVersion"));
            objc_msgSend(v14, "setDifferentString:forKey:", v61, CFSTR("assetVersion"));

            v62 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionUserData](v17, "readingPositionUserData"));
            objc_msgSend(v14, "setDifferentValue:forKey:klass:", v62, CFSTR("plUserData"), objc_opt_class(NSData));

            if (-[__CFString readingPositionLocationRangeStart](v17, "readingPositionLocationRangeStart"))
            {
              v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -[__CFString readingPositionLocationRangeStart](v17, "readingPositionLocationRangeStart")));
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "plLocationRangeStart"));
              v65 = objc_msgSend(v63, "isEqual:", v64);

              if ((v65 & 1) == 0)
              {
                v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -[__CFString readingPositionLocationRangeStart](v17, "readingPositionLocationRangeStart")));
                objc_msgSend(v14, "setPlLocationRangeStart:", v66);

              }
            }
            if (-[__CFString readingPositionLocationRangeEnd](v17, "readingPositionLocationRangeEnd"))
            {
              v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -[__CFString readingPositionLocationRangeEnd](v17, "readingPositionLocationRangeEnd")));
              v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "plAbsolutePhysicalLocation"));
              v69 = objc_msgSend(v67, "isEqual:", v68);

              if ((v69 & 1) == 0)
              {
                v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -[__CFString readingPositionLocationRangeEnd](v17, "readingPositionLocationRangeEnd")));
                objc_msgSend(v14, "setPlLocationRangeEnd:", v70);

              }
            }
            if (-[__CFString readingPositionAbsolutePhysicalLocation](v17, "readingPositionAbsolutePhysicalLocation"))
            {
              v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -[__CFString readingPositionAbsolutePhysicalLocation](v17, "readingPositionAbsolutePhysicalLocation")));
              v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "plAbsolutePhysicalLocation"));
              v73 = objc_msgSend(v71, "isEqual:", v72);

              if ((v73 & 1) == 0)
              {
                v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -[__CFString readingPositionAbsolutePhysicalLocation](v17, "readingPositionAbsolutePhysicalLocation")));
                objc_msgSend(v14, "setPlAbsolutePhysicalLocation:", v74);

              }
            }
            v75 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionStorageUUID](v17, "readingPositionStorageUUID"));
            objc_msgSend(v14, "setDifferentString:forKey:", v75, CFSTR("plStorageUUID"));

            v76 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionLocationUpdateDate](v17, "readingPositionLocationUpdateDate"));
            objc_msgSend(v14, "setDifferentDate:forKey:", v76, CFSTR("locationModificationDate"));

            v77 = BKLibraryAssetDetailsLog();
            v78 = objc_claimAutoreleasedReturnValue(v77);
            if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
            {
              v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "annotationLocation"));
              v80 = COERCE_DOUBLE(objc_msgSend(v79, "length"));
              v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "plUserData"));
              v82 = COERCE_DOUBLE(objc_msgSend(v81, "length"));
              *(_DWORD *)buf = 138413058;
              v114 = v15;
              v115 = 2048;
              v116 = v17;
              v117 = 2048;
              v118 = v80;
              v119 = 2048;
              v120 = v82;
              _os_log_impl(&dword_0, v78, OS_LOG_TYPE_INFO, "After CloudKit merge into annotation with assetID:%@ assetDetail:%p annotation.annotationLocation.length=%lu annotation.plUserData.length=%lu", buf, 0x2Au);

              goto LABEL_47;
            }
            goto LABEL_48;
          }
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "locationModificationDate"));
          if (v45)
          {

            goto LABEL_42;
          }
          v83 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionLocationUpdateDate](v17, "readingPositionLocationUpdateDate"));

          if (v83)
          {
LABEL_42:
            v84 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString readingPositionLocationUpdateDate](v17, "readingPositionLocationUpdateDate"));
            objc_msgSend(v84, "timeIntervalSinceReferenceDate");
            v86 = v85;
            v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "locationModificationDate"));
            objc_msgSend(v87, "timeIntervalSinceReferenceDate");
            v89 = v88;

            v90 = ((uint64_t (*)(void))BKMobileCloudSyncAnnotationsLog)();
            v78 = objc_claimAutoreleasedReturnValue(v90);
            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
            {
              v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "locationModificationDate"));
              if (v86 == v89)
                v91 = CFSTR("same-dated");
              else
                v91 = CFSTR("older");
              v92 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(-[__CFString readingPositionLocationUpdateDate](v17, "readingPositionLocationUpdateDate")));
              *(_DWORD *)buf = 138543874;
              v114 = v79;
              v115 = 2114;
              v116 = v91;
              v117 = 2114;
              v118 = v92;
              _os_log_impl(&dword_0, v78, OS_LOG_TYPE_DEFAULT, "Ignoring request to update global annotation dated %{public}@ to %{public}@ asset detail reading location from %{public}@", buf, 0x20u);

LABEL_47:
            }
LABEL_48:

          }
          v93 = objc_msgSend(v14, "hasChanges");
          v94 = (int)v93;
          v95 = BKMobileCloudSyncAnnotationsLog(v93);
          v44 = objc_claimAutoreleasedReturnValue(v95);
          v96 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
          if (v94)
          {
            if (v96)
            {
              v97 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString assetID](v17, "assetID"));
              v98 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(-[__CFString readingPositionCFIString](v17, "readingPositionCFIString")));
              v99 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "location")));
              *(_DWORD *)buf = 138413058;
              v114 = v97;
              v115 = 2048;
              v116 = v17;
              v117 = 2112;
              v118 = v98;
              v119 = 2112;
              v120 = v99;
              _os_log_impl(&dword_0, v44, OS_LOG_TYPE_DEFAULT, "Adopting reading position for assetID:%@ assetDetail:%p synced from cloud: cfi: %@,  annotationLocation: %@", buf, 0x2Au);

            }
          }
          else if (v96)
          {
            v100 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString assetID](v17, "assetID"));
            *(_DWORD *)buf = 138412546;
            v114 = v100;
            v115 = 2048;
            v116 = v17;
            _os_log_impl(&dword_0, v44, OS_LOG_TYPE_DEFAULT, "No changes for reading position for assetID:%@ assetDetail:%p  synced from cloud", buf, 0x16u);

          }
          goto LABEL_54;
        }
        v43 = ((uint64_t (*)(void))BKMobileCloudSyncAnnotationsLog)();
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          sub_82F38(v111, v14, &v112, v44);
LABEL_54:

      }
      v6 = obj;
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
      if (!v11)
        goto LABEL_56;
    }
  }
  v8 = BKLibraryAssetDetailsLog();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_82FAC();

LABEL_56:
  v101 = objc_retainBlock(v103);
  v102 = v101;
  if (v101)
    (*((void (**)(id))v101 + 2))(v101);

}

void sub_485FC(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, char a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  id v21;
  char v22;

  v10 = a2;
  v11 = a4;
  v12 = a5;
  if (v12)
  {
    v13 = BKLibraryAssetDetailsLog();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_8302C();

  }
  else
  {
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "enableCloudMergeQueue"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_48730;
    v17[3] = &unk_C2B60;
    v16 = *(void **)(a1 + 40);
    v17[4] = *(_QWORD *)(a1 + 32);
    v18 = v16;
    v19 = v10;
    v20 = v11;
    v21 = *(id *)(a1 + 48);
    v22 = a6;
    dispatch_async(v15, v17);

  }
}

void sub_48730(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[5];
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  char v13;

  if (objc_msgSend(*(id *)(a1 + 32), "enableCloudMerge"))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_48850;
    v7[3] = &unk_C2B38;
    v2 = *(void **)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 56);
    v3 = *(id *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 32);
    v10 = v3;
    v11 = v4;
    v12 = *(id *)(a1 + 64);
    v13 = *(_BYTE *)(a1 + 72);
    objc_msgSend(v2, "performNamed:workerQueueBlockAndWait:", CFSTR("checkForChangesFromCloudAssetDetailManager"), v7);

  }
  else
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getChangesQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_48AB4;
    block[3] = &unk_C1400;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(v5, block);

  }
}

void sub_48850(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t v26[128];
  uint8_t buf[4];
  id v28;
  __int16 v29;
  uint64_t v30;

  v21 = a2;
  objc_msgSend(v21, "setSessionContextType:", 2);
  v3 = BKLibraryAssetDetailsLog();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134218242;
    v28 = v5;
    v29 = 2112;
    v30 = v6;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "getAssetDetailChangesSince #assetDetailChanged updated %lu records currentSyncVersions:%@", buf, 0x16u);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v7 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v23;
    v19 = v7;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "assetID"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryMutableAssetWithAssetID:inManagedObjectContext:", v13, v21));
        objc_msgSend(v14, "configureFromAssetDetail:", v12);
        if (objc_msgSend(v14, "needsGlobalAnnotation"))
        {
          v15 = v10;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "readingPositionCFIString"));
          if (objc_msgSend(v16, "length"))
          {

            v10 = v15;
          }
          else
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "readingPositionUserData"));
            v18 = objc_msgSend(v17, "length");

            v7 = v19;
            v10 = v15;
            if (!v18)
              goto LABEL_13;
          }
          objc_msgSend(v20, "addObject:", v12);
        }
LABEL_13:

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(a1 + 56), "_updateGlobalAnnotationsFromDetails:annotationProvider:", v20, *(_QWORD *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 56), "_updateAssetDetailCloudVersionFromCloudSyncVersions:inMOC:fetchAgain:", *(_QWORD *)(a1 + 40), v21, *(unsigned __int8 *)(a1 + 72));

}

id sub_48AB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setProcessingAssetDetailChanges:", 0);
}

void sub_48B44(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getChangesQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_48BB8;
  block[3] = &unk_C1400;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, block);

}

void sub_48BB8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  void *v6;
  _QWORD v7[5];

  if ((objc_msgSend(*(id *)(a1 + 32), "processingReadingNowChanges") & 1) != 0)
  {
    v2 = BKLibraryAssetDetailsLog();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_8308C();

    objc_msgSend(*(id *)(a1 + 32), "setReceivedReadingNowChangesNotification:", 1);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setProcessingReadingNowChanges:", 1);
    v4 = BKLibraryAssetDetailsLog();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_830B8();

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_48CA4;
    v7[3] = &unk_C1590;
    v7[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v6, "performBackgroundReadOnlyBlock:", v7);

  }
}

id sub_48CA4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudReadingNowDetailManagerInMOC:reason:", a2, CFSTR("BCCloudReadingNowManagerChanged"));
}

void sub_48D88(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  uint64_t v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCReadingNowDetail"), *(_QWORD *)(a1 + 40)));
  v4 = objc_msgSend(v3, "mutableCopy");

  v5 = BKLibraryAssetDetailsLog();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v13 = v4;
    v14 = 2114;
    v15 = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "Books/BKLibrary-checkForReadingNowChange _checkForChangesFromCloudReadingNowDetailManagerInMOC cloudSyncVersions:%{public}@, reason:%{public}@", buf, 0x16u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudReadingNowDetailManager"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_48EE4;
  v10[3] = &unk_C2BD8;
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v2;
  v9 = v2;
  objc_msgSend(v8, "getReadingNowDetailChangesSince:completion:", v4, v10);

}

void sub_48EE4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[4];
  NSObject *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  char v27;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  if (v14)
  {
    v15 = BKLibraryAssetDetailsLog();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_830E4();
  }
  else
  {
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "enableCloudMergeQueue"));
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_49020;
    v21[3] = &unk_C2B60;
    v22 = v11;
    v18 = v12;
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(void **)(a1 + 40);
    v23 = v18;
    v24 = v19;
    v25 = v20;
    v26 = v13;
    v27 = a6;
    dispatch_async(v17, v21);

    v16 = v22;
  }

}

void sub_49020(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[5];
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  char v14;

  v2 = BKLibraryAssetDetailsLog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_83144(a1);

  if (objc_msgSend(*(id *)(a1 + 48), "enableCloudMerge"))
  {
    v4 = *(void **)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_4915C;
    v9[3] = &unk_C2BB0;
    v10 = *(id *)(a1 + 32);
    v11 = *(id *)(a1 + 56);
    v5 = *(id *)(a1 + 64);
    v14 = *(_BYTE *)(a1 + 72);
    v6 = *(_QWORD *)(a1 + 48);
    v12 = v5;
    v13 = v6;
    objc_msgSend(v4, "performNamed:workerQueueBlockAndWait:", CFSTR("checkForChangesFromCloudReadingNowDetailManager"), v9);

  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "getChangesQueue"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_49468;
    v8[3] = &unk_C1400;
    v8[4] = *(_QWORD *)(a1 + 48);
    dispatch_async(v7, v8);

  }
}

void sub_4915C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _QWORD block[5];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("assetID")));

  v6 = BKLibraryAssetDetailsLog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_831EC(v5);

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v8 = *(id *)(a1 + 32);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "assetID"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryMutableAssetWithAssetID:inManagedObjectContext:", v14, v3));
        objc_msgSend(v15, "configureFromReadingNowDetail:", v13);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v10);
  }

  objc_msgSend(*(id *)(a1 + 40), "updateCloudVersionFromCloudSyncVersions:inContext:", *(_QWORD *)(a1 + 48), v3);
  v16 = *(void **)(a1 + 56);
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(v16, "_checkForChangesFromCloudReadingNowDetailManagerInMOC:reason:", v3, CFSTR("fetchAgain"));
  }
  else
  {
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "getChangesQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_49370;
    block[3] = &unk_C1400;
    block[4] = *(_QWORD *)(a1 + 56);
    dispatch_async(v17, block);

  }
}

void sub_49370(uint64_t a1)
{
  unsigned int v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  void *v6;
  _QWORD v7[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "receivedReadingNowChangesNotification");
  v3 = BKLibraryAssetDetailsLog();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v5)
      sub_83264();

    objc_msgSend(*(id *)(a1 + 32), "setReceivedReadingNowChangesNotification:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_49454;
    v7[3] = &unk_C1590;
    v7[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v6, "performBackgroundReadOnlyBlock:", v7);

  }
  else
  {
    if (v5)
      sub_83290();

    objc_msgSend(*(id *)(a1 + 32), "setProcessingReadingNowChanges:", 0);
  }
}

id sub_49454(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudReadingNowDetailManagerInMOC:reason:", a2, CFSTR("deferred"));
}

id sub_49468(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setProcessingReadingNowChanges:", 0);
}

void sub_49530(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v3 = a1[4];
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCAssetDetail"), v4));

  objc_msgSend(v6, "setLocalVersion:", (char *)objc_msgSend(v6, "localVersion") + 1);
  v7 = objc_msgSend(v6, "localVersion");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "bu_dictionaryUsingPropertyAsKey:", CFSTR("assetID")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allKeys"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "cloudAssetDetailManager"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_49680;
  v15[3] = &unk_C2C50;
  v11 = a1[4];
  v16 = v8;
  v17 = v11;
  v20 = v7;
  v12 = a1[6];
  v18 = v9;
  v19 = v12;
  v13 = v9;
  v14 = v8;
  objc_msgSend(v10, "assetDetailsForAssetIDs:completion:", v13, v15);

}

void sub_49680(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  float v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id obj;
  _QWORD v34[5];
  id v35;
  id v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  double v47;
  _BYTE v48[128];

  v6 = a2;
  v7 = a4;
  if (v7)
  {
    v8 = BKLibraryAssetDetailsLog();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_832BC();

    v10 = objc_retainBlock(*(id *)(a1 + 56));
    v11 = v10;
    if (v10)
      (*((void (**)(id))v10 + 2))(v10);
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v32 = v6;
    obj = v6;
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v39 != v14)
            objc_enumerationMutation(obj);
          v16 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "assetID"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v17));
          v19 = BKLibraryAssetDetailsLog();
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "readingPositionCFIString"));
            objc_msgSend(v18, "readingProgress");
            *(_DWORD *)buf = 138412802;
            v43 = v17;
            v44 = 2112;
            v45 = v21;
            v46 = 2048;
            v47 = v22;
            _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "BCAssetDetail updateAssetDetails #globalAnnotation for assetID:%@, location:%@, progress:%f", buf, 0x20u);

          }
          objc_msgSend(v18, "readingProgress");
          objc_msgSend(v16, "setReadingProgress:");
          objc_msgSend(v18, "readingProgressHighWaterMark");
          objc_msgSend(v16, "setReadingProgressHighWaterMark:");
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "readingPositionCFIString"));
          objc_msgSend(v16, "setReadingPositionCFIString:", v23);

          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "readingPositionAnnotationVersion"));
          objc_msgSend(v16, "setReadingPositionAnnotationVersion:", v24);

          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "readingPositionAssetVersion"));
          objc_msgSend(v16, "setReadingPositionAssetVersion:", v25);

          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "readingPositionUserData"));
          objc_msgSend(v16, "setReadingPositionUserData:", v26);

          objc_msgSend(v16, "setReadingPositionLocationRangeStart:", objc_msgSend(v18, "readingPositionLocationRangeStart"));
          objc_msgSend(v16, "setReadingPositionLocationRangeEnd:", objc_msgSend(v18, "readingPositionLocationRangeEnd"));
          objc_msgSend(v16, "setReadingPositionAbsolutePhysicalLocation:", objc_msgSend(v18, "readingPositionAbsolutePhysicalLocation"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "readingPositionStorageUUID"));
          objc_msgSend(v16, "setReadingPositionStorageUUID:", v27);

          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "readingPositionUserUpdatedDate"));
          objc_msgSend(v16, "setReadingPositionLocationUpdateDate:", v28);

          objc_msgSend(v11, "setObject:forKeyedSubscript:", v16, v17);
        }
        v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
      }
      while (v13);
    }

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cloudAssetDetailManager"));
    v34[0] = _NSConcreteStackBlock;
    v34[2] = sub_49A7C;
    v34[3] = &unk_C2C28;
    v31 = *(void **)(a1 + 56);
    v30 = *(_QWORD *)(a1 + 64);
    v34[4] = *(_QWORD *)(a1 + 40);
    v37 = v30;
    v34[1] = 3221225472;
    v36 = v31;
    v35 = *(id *)(a1 + 48);
    objc_msgSend(v29, "setAssetDetails:completion:", v11, v34);

    v7 = 0;
    v6 = v32;
  }

}

void sub_49A7C(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  _QWORD v22[5];
  id v23;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;

  v7 = a4;
  if (a2)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v22[0] = _NSConcreteStackBlock;
    v22[2] = sub_49CA0;
    v22[3] = &unk_C2C00;
    v10 = *(void **)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v22[4] = *(_QWORD *)(a1 + 32);
    v24 = v9;
    v22[1] = 3221225472;
    v23 = v10;
    objc_msgSend(v8, "performBlockOnWorkerQueue:", v22);

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v12 = objc_msgSend(v11, "verboseLoggingEnabled");

    if (a3)
    {
      if (v12)
      {
        v13 = BKLibraryAssetDetailsDevelopmentLog();
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "componentsJoinedByString:", CFSTR(", ")));
          *(_DWORD *)buf = 138412290;
          v26 = v15;
          v16 = "\"\\\"succesfully set assetDetails for assetIDs: [%@]\\\"\"";
LABEL_14:
          _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);

          goto LABEL_15;
        }
        goto LABEL_15;
      }
    }
    else if (v12)
    {
      v21 = BKLibraryAssetDetailsDevelopmentLog();
      v14 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "componentsJoinedByString:", CFSTR(", ")));
        *(_DWORD *)buf = 138412290;
        v26 = v15;
        v16 = "\"\\\"succesfully set assetDetails, but no changes for assetIDs: [%@]\\\"\"";
        goto LABEL_14;
      }
LABEL_15:

    }
    goto LABEL_17;
  }
  v17 = BKLibraryAssetDetailsLog();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    sub_82854();

  v19 = objc_retainBlock(*(id *)(a1 + 48));
  v20 = v19;
  if (v19)
    (*((void (**)(id))v19 + 2))(v19);

LABEL_17:
}

void sub_49CA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCAssetDetail"), v3));

  objc_msgSend(v7, "setSyncVersion:", *(_QWORD *)(a1 + 48));
  v5 = objc_retainBlock(*(id *)(a1 + 40));
  v6 = v5;
  if (v5)
    (*((void (**)(id))v5 + 2))(v5);

}

void sub_49DF8(uint64_t a1, void *a2)
{
  id v3;
  NSMutableDictionary *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  v4 = objc_opt_new(NSMutableDictionary);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v18 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "libraryAssetsWithAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), v3));

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "assetID"));

        if (v13)
        {
          if (objc_msgSend(v12, "isManagedBook"))
            v14 = &__kCFBooleanTrue;
          else
            v14 = &__kCFBooleanFalse;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "assetID"));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v14, v15);

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v9);
  }

  v16 = objc_retainBlock(*(id *)(a1 + 48));
  v17 = v16;
  if (v16)
    (*((void (**)(id, NSMutableDictionary *))v16 + 2))(v16, v4);

}

void sub_4A138(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_4A14C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_4A160(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

id sub_4A17C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "count");
}

void sub_4A328(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_alloc_init((Class)NSMutableSet);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

}

void sub_4A5BC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD block[5];
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  _BYTE v30[128];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys"));
  v5 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v21 = (void *)v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("storeID IN %@"), v4));
  objc_msgSend(v5, "setPredicate:", v6);

  objc_msgSend(v5, "setFetchBatchSize:", 32);
  v29 = 0;
  v22 = v3;
  v20 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v5, &v29));
  v19 = v29;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "storeID"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v14));
        if (v15)
        {
          v16 = *(_QWORD *)(a1 + 40);
          v17 = *(NSObject **)(v16 + 16);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_4A840;
          block[3] = &unk_C12F8;
          block[4] = v16;
          v24 = v14;
          dispatch_sync(v17, block);
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v15, "isExplicit")));
          objc_msgSend(v13, "setDifferentNumber:forKey:", v18, CFSTR("isExplicit"));

        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v10);
  }

}

void sub_4A840(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "qDownloadingStoreIDs"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

void sub_4A914(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  _QWORD block[4];
  id v14;
  uint64_t v15;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_libraryAssetsForPostProcessingInManagedObjectContext:", a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", CFSTR("storeID")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v5));

  if (objc_msgSend(v6, "count"))
  {
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_4AA80;
    block[3] = &unk_C12F8;
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 32);
    v14 = v8;
    v15 = v9;
    dispatch_sync(v7, block);
    if (objc_msgSend(v8, "count"))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[AEUserPublishing sharedInstance](AEUserPublishing, "sharedInstance"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allObjects"));
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_4AAE8;
      v12[3] = &unk_C2CA8;
      v12[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v10, "productProfilesForStoreIDs:completion:", v11, v12);

    }
  }

}

void sub_4AA80(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "qDownloadingStoreIDs"));
  objc_msgSend(v2, "minusSet:", v3);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "qDownloadingStoreIDs"));
  objc_msgSend(v4, "unionSet:", *(_QWORD *)(a1 + 32));

}

void sub_4AAE8(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  _QWORD block[5];

  v5 = a2;
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "_postProcessExplicitFlagForProductProfiles:", v5);
    objc_msgSend(*(id *)(a1 + 32), "_postProcessCoverImagesForProductProfiles:", v5);
LABEL_3:

    return;
  }
  if (!v5)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(NSObject **)(v3 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_4AB88;
    block[3] = &unk_C1400;
    block[4] = v3;
    dispatch_sync(v4, block);
    goto LABEL_3;
  }

}

void sub_4AB88(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "qDownloadingStoreIDs"));
  objc_msgSend(v1, "removeAllObjects");

}

void sub_4CAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_4CACC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_4CADC(uint64_t a1)
{

}

intptr_t sub_4CAE4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "purchasedDSID"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_4CF70(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "collectionProvider"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collectionsWithCollectionIDs:inManagedObjectContext:error:", *(_QWORD *)(a1 + 40), v4, 0));

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_4D058;
  v8[3] = &unk_C2D58;
  v9 = *(id *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sortedArrayUsingComparator:", v8));
  if (+[BKUserSortOrderManager resortAscendingSortKeyedObjects:](BKUserSortOrderManager, "resortAscendingSortKeyedObjects:", v6))
  {
    objc_msgSend(*(id *)(a1 + 32), "resetNextCollectionSort");
    objc_msgSend(*(id *)(a1 + 32), "saveMetaData");
  }

}

uint64_t sub_4D058(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "collectionID"));
  v8 = objc_msgSend(v5, "indexOfObject:", v7);

  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collectionID"));

  v11 = objc_msgSend(v9, "indexOfObject:", v10);
  if (v8 >= v11)
    v12 = 0;
  else
    v12 = -1;
  if (v8 > v11)
    return 1;
  else
    return v12;
}

void sub_4ED2C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _BOOL8 v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *i;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  _BYTE v40[128];
  _BYTE v41[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v30 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
  if (!v4)
    goto LABEL_20;
  v5 = v4;
  v6 = *(_QWORD *)v36;
  do
  {
    v7 = 0;
    do
    {
      if (*(_QWORD *)v36 != v6)
        objc_enumerationMutation(v3);
      v8 = *(id *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v7);
      if (objc_msgSend(v8, "isValid"))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "libraryMutableAssetWithAssetID:inManagedObjectContext:", v9, *(_QWORD *)(a1 + 32)));

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "storeID"));
        if (v11)
        {
          v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "storeID"));
          goto LABEL_9;
        }
        if (objc_msgSend(v8, "isHidden")
          && (v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID")),
              v16 = objc_msgSend(v15, "length"),
              v15,
              v16))
        {
          v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
LABEL_9:
          v13 = (void *)v12;
          objc_msgSend(v30, "addObject:", v12);

          v14 = *(_BYTE *)(a1 + 56) != 0;
LABEL_10:
          objc_msgSend(v10, "setIsHidden:", v14);
        }
        else if (*(_BYTE *)(a1 + 56))
        {
          v14 = 1;
          goto LABEL_10;
        }

      }
      v7 = (char *)v7 + 1;
    }
    while (v5 != v7);
    v17 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
    v5 = v17;
  }
  while (v17);
LABEL_20:

  v18 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 56))
    +[BKJaliscoStatus addHidden:inMOC:](BKJaliscoStatus, "addHidden:inMOC:", v30, v18, v2);
  else
    +[BKJaliscoStatus addLocal:inMOC:](BKJaliscoStatus, "addLocal:inMOC:", v30, v18, v2);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reverseObjectEnumerator"));
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v21; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v22)
          objc_enumerationMutation(v19);
        v24 = *(id *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v24, "isValid"))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[BKUserSortOrderManager nextSortKeyForCollection:](BKUserSortOrderManager, "nextSortKeyForCollection:", *(_QWORD *)(a1 + 48)));
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[BKCollectionMember collectionMemberDictionaryWithLibraryAsset:sortKey:](BKCollectionMember, "collectionMemberDictionaryWithLibraryAsset:sortKey:", v24, v25));

          if (v26)
          {
            v27 = *(void **)(a1 + 48);
            v39 = v26;
            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
            objc_msgSend(v27, "addCollectionMemberDictionaries:forceToTop:", v28, *(unsigned __int8 *)(a1 + 57));

          }
        }

      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
    }
    while (v21);
  }

  objc_msgSend(*(id *)(a1 + 48), "updateLastModification");
  if (objc_msgSend(*(id *)(a1 + 32), "hasChanges"))
    objc_msgSend(*(id *)(a1 + 32), "save:", 0);

}

void sub_4F1D0(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.iBooks.BKCollectionSortKey", v4);
  v3 = (void *)qword_DE4B0;
  qword_DE4B0 = (uint64_t)v2;

}

void sub_4F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_4F300(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_4F310(uint64_t a1)
{

}

void sub_4F318(uint64_t a1)
{
  id *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = *(id **)(a1 + 32);
  if (v2[1])
  {
    if (objc_msgSend(v2[1], "integerValue"))
      goto LABEL_16;
    v2 = *(id **)(a1 + 32);
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "members", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v3);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i), "sortKey"));
        v10 = objc_msgSend(v9, "integerValue");

        if (v10 > v6)
          v6 = v10;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }

  v11 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v6));
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v11;

LABEL_16:
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_4F504(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;

}

void sub_4F5B4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sortKey"));
  v3 = objc_msgSend(v2, "longLongValue");
  v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "longLongValue");

  if ((uint64_t)v3 > (uint64_t)v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sortKey"));
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(void **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v5;

  }
}

id sub_504F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setTitle:", *(_QWORD *)(a1 + 40));
}

void sub_51C1C(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];
  _QWORD v4[5];

  v3[0] = &off_C9EC8;
  v3[1] = &off_C9EE0;
  v4[0] = kBKCollectionDefaultIDBooks;
  v4[1] = kBKCollectionDefaultIDBooks;
  v3[2] = &off_C9EF8;
  v3[3] = &off_C9F10;
  v4[2] = kBKCollectionDefaultIDBooks;
  v4[3] = kBKCollectionDefaultIDPDFs;
  v3[4] = &off_C9F28;
  v4[4] = kBKCollectionDefaultIDAudiobooks;
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 5));
  v2 = (void *)qword_DE4C8;
  qword_DE4C8 = v1;

}

void sub_526D0(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_52768;
  v4[3] = &unk_C2E20;
  v4[4] = v3;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v3, "annotationsForAssetIDs:completion:", v5, v4);

}

void sub_52768(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryManager"));
  v11 = objc_msgSend(v5, "newManagedObjectContext");

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NewMOC 7 %s %@"), "-[BKLibraryAssetModificationDateManager resetModificationDateForAssetIDs:completion:]_block_invoke_2", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v11, "setName:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetForAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), v11));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatesFromLibraryAssets:annotations:", v7, v4));

  objc_msgSend(*(id *)(a1 + 32), "consumeUpdates:inManagedObjectContext:", v8, v11);
  v9 = objc_retainBlock(*(id *)(a1 + 48));
  v10 = v9;
  if (v9)
    (*((void (**)(id))v9 + 2))(v9);

}

void sub_52B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_52B88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_52B98(uint64_t a1)
{

}

void sub_52BA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  _QWORD v19[2];
  const __CFString *v20;
  _QWORD v21[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("AEAnnotation")));
  objc_msgSend(v4, "setResultType:", 2);
  v21[0] = CFSTR("annotationAssetID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[AEAnnotation maxUserModificationDateExpressionDescription](AEAnnotation, "maxUserModificationDateExpressionDescription"));
  v21[1] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 2));
  objc_msgSend(v4, "setPropertiesToFetch:", v6);

  v20 = CFSTR("annotationAssetID");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));
  objc_msgSend(v4, "setPropertiesToGroupBy:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[AEAnnotation predicateForAnnotationsWithAssetIDInList:includingDeleted:](AEAnnotation, "predicateForAnnotationsWithAssetIDInList:includingDeleted:", *(_QWORD *)(a1 + 32), 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[AEAnnotation predicateForAnnotationsIncludingDeletedWithUserModificationDate](AEAnnotation, "predicateForAnnotationsIncludingDeletedWithUserModificationDate"));
  v19[0] = v8;
  v19[1] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v19, 2));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v10));
  objc_msgSend(v4, "setPredicate:", v11);

  v18 = 0;
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v18));

  v13 = v18;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v12;

  v16 = objc_retainBlock(*(id *)(a1 + 40));
  v17 = v16;
  if (v16)
    (*((void (**)(id, _QWORD))v16 + 2))(v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

id BKLibraryCollectionLog()
{
  if (qword_DE4D8 != -1)
    dispatch_once(&qword_DE4D8, &stru_C2E68);
  return (id)qword_DE4D0;
}

void sub_5322C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BKLibrary.Collections");
  v2 = (void *)qword_DE4D0;
  qword_DE4D0 = (uint64_t)v1;

}

id BKLibraryCollectionDevelopmentLog()
{
  if (qword_DE4E8 != -1)
    dispatch_once(&qword_DE4E8, &stru_C2E88);
  return (id)qword_DE4E0;
}

void sub_5329C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BKLibrary.Collections.Development");
  v2 = (void *)qword_DE4E0;
  qword_DE4E0 = (uint64_t)v1;

}

id BKLibraryAssetDetailsLog()
{
  if (qword_DE4F8 != -1)
    dispatch_once(&qword_DE4F8, &stru_C2EA8);
  return (id)qword_DE4F0;
}

void sub_5330C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BKLibrary.AssetDetails");
  v2 = (void *)qword_DE4F0;
  qword_DE4F0 = (uint64_t)v1;

}

id BKLibraryAssetDetailsDevelopmentLog()
{
  if (qword_DE508 != -1)
    dispatch_once(&qword_DE508, &stru_C2EC8);
  return (id)qword_DE500;
}

void sub_5337C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BKLibrary.AssetDetails.Development");
  v2 = (void *)qword_DE500;
  qword_DE500 = (uint64_t)v1;

}

id BKLibraryPriceManagerLog()
{
  if (qword_DE518 != -1)
    dispatch_once(&qword_DE518, &stru_C2EE8);
  return (id)qword_DE510;
}

void sub_533EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BKLibrary.PriceManager");
  v2 = (void *)qword_DE510;
  qword_DE510 = (uint64_t)v1;

}

id BKLibraryPriceManagerDevelopmentLog()
{
  if (qword_DE528 != -1)
    dispatch_once(&qword_DE528, &stru_C2F08);
  return (id)qword_DE520;
}

void sub_5345C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BKLibrary.PriceManager.Development");
  v2 = (void *)qword_DE520;
  qword_DE520 = (uint64_t)v1;

}

id BKLibraryPriceTrackingLog()
{
  if (qword_DE538 != -1)
    dispatch_once(&qword_DE538, &stru_C2F28);
  return (id)qword_DE530;
}

void sub_534CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BKLibrary.PriceTracking");
  v2 = (void *)qword_DE530;
  qword_DE530 = (uint64_t)v1;

}

void sub_536D8(id a1)
{
  void *v1;

  v1 = (void *)qword_DE540;
  qword_DE540 = (uint64_t)&off_CA0D8;

}

void sub_54190(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_541AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_libraryDataSourcePerformanceChanged");

}

uint64_t sub_541D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_54280(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryManager"));
  objc_msgSend(v5, "libraryDataSource:reloadInGroup:", *(_QWORD *)(a1 + 32), v4);

}

void sub_544F0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_5458C;
  v7[3] = &unk_C12F8;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_barrier_async(v4, v7);

}

void sub_5458C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void (*v11)(uint64_t, void *, void *);
  void *v12;
  id v13;

  v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v3 = *(void **)(a1 + 32);
  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_546FC;
  v12 = &unk_C2F98;
  v13 = v2;
  v4 = v2;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", &v9);
  v5 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v5, "encodeObject:forKey:", v4, CFSTR("Root"));
  objc_msgSend(v5, "finishEncoding");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encodedData"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cacheURL"));
  objc_msgSend(v6, "writeToURL:atomically:", v7, 1);

  objc_msgSend(*(id *)(a1 + 40), "_updateCreationDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryManager"));
  objc_msgSend(v8, "libraryDataSource:updateWithName:block:", _NSConcreteStackBlock, 3221225472, sub_5478C, &unk_C2F70, *(_QWORD *)(a1 + 40), v9, v10, v11, v12);

}

void sub_546FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v5 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "profileDictionary"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryDataSourcePerformanceAsset profileKeysOfInterest](BKLibraryDataSourcePerformanceAsset, "profileKeysOfInterest"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dictionaryWithValuesForKeys:", v6));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v5);

}

void sub_5478C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryManager"));
  objc_msgSend(v5, "libraryDataSource:reloadInGroup:", *(_QWORD *)(a1 + 32), v4);

}

void sub_54CE0(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 10))
  {
    *(_BYTE *)(v2 + 10) = 1;
    v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "checkResourceIsReachableAndReturnError:", 0);
    v4 = *(void **)(a1 + 32);
    if (v3)
      objc_msgSend(v4, "_updateCreationDate");
    else
      objc_msgSend(v4, "_fetchProductProfiles");
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_cachedProductProfiles"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allKeys"));

  kdebug_trace(725353716, 65, 0, 0, 0);
  v6 = objc_retainBlock(*(id *)(a1 + 40));
  v7 = v6;
  if (v6)
    (*((void (**)(id, id, _QWORD))v6 + 2))(v6, v8, 0);

}

void sub_54EE4(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  BKLibraryDataSourcePerformanceAsset *v8;
  void *v9;
  BKLibraryDataSourcePerformanceAsset *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(a1[4], "count"));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = a1[4];
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v8 = [BKLibraryDataSourcePerformanceAsset alloc];
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "identifier"));
        v10 = -[BKLibraryDataSourcePerformanceAsset initWithAssetID:identifier:](v8, "initWithAssetID:identifier:", v7, v9);

        v11 = (uint64_t)objc_msgSend(v7, "integerValue");
        if (objc_msgSend(a1[5], "createSeriesContainers"))
        {
          if (v11 % 5)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v11 % 5));
            -[BKLibraryDataSourcePerformanceAsset setSeriesSortKey:](v10, "setSeriesSortKey:", v12);

            v13 = (char *)(v11 - v11 % 5);
          }
          else
          {
            -[BKLibraryDataSourcePerformanceAsset setContentType:](v10, "setContentType:", 5);
            v13 = (char *)v11;
          }
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v13));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stringValue"));
          -[BKLibraryDataSourcePerformanceAsset setSeriesID:](v10, "setSeriesID:", v15);

        }
        objc_msgSend(v2, "addObject:", v10);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v4);
  }

  kdebug_trace(725353716, 67, 0, 0, 0);
  v16 = objc_retainBlock(a1[6]);
  v17 = v16;
  if (v16)
    (*((void (**)(id, id, _QWORD))v16 + 2))(v16, v2, 0);

}

void sub_5514C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  BKLibraryDataSourcePerformanceAsset *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  BKLibraryDataSourcePerformanceAsset *v15;
  id v16;
  void *v17;
  id obj;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_cachedProductProfiles"));
  v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v19 = a1;
  obj = *(id *)(a1 + 40);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v8));

        if (v9)
        {
          v10 = [BKLibraryDataSourcePerformanceAsset alloc];
          v11 = v3;
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v8));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v19 + 32), "identifier"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v19 + 32), "creationDate"));
          v15 = -[BKLibraryDataSourcePerformanceAsset initWithAssetID:productProfile:identifier:date:](v10, "initWithAssetID:productProfile:identifier:date:", v8, v12, v13, v14);

          v3 = v11;
          objc_msgSend(v11, "addObject:", v15);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v5);
  }

  kdebug_trace(725353716, 67, 0, 0, 0);
  v16 = objc_retainBlock(*(id *)(v19 + 48));
  v17 = v16;
  if (v16)
    (*((void (**)(id, id, _QWORD))v16 + 2))(v16, v3, 0);

}

void sub_558A8(id a1)
{
  BKLibraryFileSizeManager *v1;
  void *v2;

  v1 = objc_opt_new(BKLibraryFileSizeManager);
  v2 = (void *)qword_DE560;
  qword_DE560 = (uint64_t)v1;

}

id sub_55A24(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dq_readPersistedInfoFromDisk");
}

void sub_55B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_55B40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_55B50(uint64_t a1)
{

}

void sub_55B58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetPathToCacheItemDict"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  v3 = v8;
  if (v8)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fileSizeNumber"));
    v5 = objc_msgSend(v4, "copy");
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v3 = v8;
  }

}

void sub_55CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_55CF0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dq_filesSizeForCacheItemRequest:", *(_QWORD *)(a1 + 40)));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_55DE0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetPathToCacheItemDict", (_QWORD)v12));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v7));

        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetPathToCacheItemDict"));
          objc_msgSend(v10, "removeObjectForKey:", v7);

        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 40), "dq_persistInfoToDisk");
}

void sub_56038(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dq_filesSizeForCacheItemRequest:", *(_QWORD *)(a1 + 40)));
  v5 = objc_msgSend(v2, "copy");

  v3 = objc_retainBlock(*(id *)(a1 + 48));
  v4 = v3;
  if (v3)
    (*((void (**)(id, id, _QWORD))v3 + 2))(v3, v5, 0);

}

void sub_561B4(id *a1)
{
  NSMutableDictionary *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v2 = objc_opt_new(NSMutableDictionary);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = a1[4];
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v7);
        if (!v8)
          BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryFileSizeManager.m", 249, "-[BKLibraryFileSizeManager filesSizesForCacheItemRequests:completion:]_block_invoke", "cacheItemRequest", 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID", (_QWORD)v17));

        if (!v9)
          BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryFileSizeManager.m", 250, "-[BKLibraryFileSizeManager filesSizesForCacheItemRequests:completion:]_block_invoke", "cacheItemRequest.assetID", 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetURL"));

        if (!v10)
          BCReportAssertionFailureWithMessage("/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibraryFileSizeManager.m", 251, "-[BKLibraryFileSizeManager filesSizesForCacheItemRequests:completion:]_block_invoke", "cacheItemRequest.assetURL", 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));

        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "dq_filesSizeForCacheItemRequest:", v8));
          v13 = objc_msgSend(v12, "copy");
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v13, v14);

        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }

  v15 = objc_retainBlock(a1[6]);
  v16 = v15;
  if (v15)
    (*((void (**)(id, NSMutableDictionary *, _QWORD))v15 + 2))(v15, v2, 0);

}

void sub_56460(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetPathToCacheItemDict"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allKeys"));

  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_5651C;
    v7[3] = &unk_C17B8;
    v5 = v3;
    v6 = *(_QWORD *)(a1 + 32);
    v8 = v5;
    v9 = v6;
    objc_msgSend(v4, "performBackgroundReadOnlyBlock:", v7);

  }
}

void sub_5651C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BKLibraryManager predicateForAssetIDsTaggedLibraryAssets:](BKLibraryManager, "predicateForAssetIDsTaggedLibraryAssets:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v4, "setPredicate:", v5);

  v13 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v13));

  v7 = v13;
  if (objc_msgSend(v6, "count"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("assetID")));
    if (objc_msgSend(v8, "count"))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", *(_QWORD *)(a1 + 32)));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v8));
      objc_msgSend(v9, "minusSet:", v10);
      v11 = *(void **)(a1 + 40);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allObjects"));
      objc_msgSend(v11, "clearCacheEntryForAssetID:", v12);

    }
  }

}

id sub_5697C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dq_persistInfoToDisk");
}

void sub_5721C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, int a16, __int16 a17, __int16 a18, int a19)
{
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;

  if (a2)
  {
    if (a2 == 2)
    {
      v20 = objc_begin_catch(a1);
      v22 = BCIMLog(v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 136315650;
        *(_QWORD *)((char *)&buf + 4) = "-[BKLibraryFileSizeManager dq_readPersistedInfoFromDisk]";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = "/Library/Caches/com.apple.xbs/Sources/Alder/frameworks/BKLibrary/Source/BKLibra"
                                         "ryFileSizeManager.m";
        a18 = 1024;
        a19 = 537;
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "%s %s:%d", (uint8_t *)&buf, 0x1Cu);
      }

      v26 = BCIMLog(v24, v25);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "_persistedInfoURL"));
        LODWORD(buf) = 138412546;
        *(_QWORD *)((char *)&buf + 4) = v28;
        WORD6(buf) = 2112;
        *(_QWORD *)((char *)&buf + 14) = v20;
        _os_log_impl(&dword_0, v27, OS_LOG_TYPE_INFO, "@\"Failed to read: %@ -- %@\"", (uint8_t *)&buf, 0x16u);

      }
      objc_end_catch();
      JUMPOUT(0x571D8);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

id BKLibraryAssetIdentifierFromAsset(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "assetID"));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "assetID"));

    v4 = objc_claimAutoreleasedReturnValue(+[BKAssetID identifierWithAssetID:](BKAssetID, "identifierWithAssetID:", v3));
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "temporaryAssetID"));

    v4 = objc_claimAutoreleasedReturnValue(+[BKTemporaryAssetID identifierWithTemporaryAssetID:](BKTemporaryAssetID, "identifierWithTemporaryAssetID:", v3));
  }
  v5 = (void *)v4;

  return v5;
}

void sub_57BD8(id a1)
{
  BKLibraryImportStatusController *v1;
  void *v2;

  v1 = objc_alloc_init(BKLibraryImportStatusController);
  v2 = (void *)qword_DE570;
  qword_DE570 = (uint64_t)v1;

}

void sub_57D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_57DC4(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  void *v4;
  NSObject *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_57E94;
    block[3] = &unk_C1428;
    v6 = WeakRetained;
    v10 = v6;
    v11 = v8;
    dispatch_sync(v5, block);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "coalescedZeroing"));
    objc_msgSend(v7, "signalWithCompletion:", &stru_C3008);

  }
}

void sub_57E94(uint64_t a1)
{
  void (**v2)(void);
  void (**v3)(void);

  objc_msgSend(*(id *)(a1 + 32), "setTotalImportOperations:", objc_msgSend(*(id *)(a1 + 32), "actualTotalImportOperations"));
  objc_msgSend(*(id *)(a1 + 32), "setCompletedImportOperations:", objc_msgSend(*(id *)(a1 + 32), "actualCompletedImportOperations"));
  objc_msgSend(*(id *)(a1 + 32), "setFailedImportOperations:", objc_msgSend(*(id *)(a1 + 32), "actualFailedImportOperations"));
  objc_msgSend(*(id *)(a1 + 32), "setTotalImportOperationsProcessed:", (char *)objc_msgSend(*(id *)(a1 + 32), "totalImportOperationsProcessed") + 1);
  v2 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    v2[2]();
    v2 = v3;
  }

}

void sub_57F28(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  _QWORD *v8;
  id v9;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_57FCC;
    block[3] = &unk_C1428;
    v8 = WeakRetained;
    v9 = v6;
    dispatch_sync(v5, block);

  }
}

void sub_57FCC(uint64_t a1)
{
  void (**v2)(void);
  void (**v3)(void);

  objc_msgSend(*(id *)(a1 + 32), "setActualTotalImportOperations:", (_BYTE *)objc_msgSend(*(id *)(a1 + 32), "actualTotalImportOperations")- ((char *)objc_msgSend(*(id *)(a1 + 32), "actualFailedImportOperations")+ (_QWORD)objc_msgSend(*(id *)(a1 + 32), "actualCompletedImportOperations")));
  objc_msgSend(*(id *)(a1 + 32), "setActualCompletedImportOperations:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setActualFailedImportOperations:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setTotalImportOperations:", objc_msgSend(*(id *)(a1 + 32), "actualTotalImportOperations"));
  objc_msgSend(*(id *)(a1 + 32), "setCompletedImportOperations:", objc_msgSend(*(id *)(a1 + 32), "actualCompletedImportOperations"));
  objc_msgSend(*(id *)(a1 + 32), "setFailedImportOperations:", objc_msgSend(*(id *)(a1 + 32), "actualFailedImportOperations"));
  objc_msgSend(*(id *)(a1 + 32), "setTotalImportOperationsProcessed:", (char *)objc_msgSend(*(id *)(a1 + 32), "totalImportOperationsProcessed") + 1);
  v2 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    v2[2]();
    v2 = v3;
  }

}

id sub_5812C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setActualTotalImportOperations:", (char *)objc_msgSend(*(id *)(a1 + 32), "actualTotalImportOperations") + 1);
}

id sub_581DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setActualCompletedImportOperations:", (char *)objc_msgSend(*(id *)(a1 + 32), "actualCompletedImportOperations") + 1);
}

id sub_5828C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setActualFailedImportOperations:", (char *)objc_msgSend(*(id *)(a1 + 32), "actualFailedImportOperations") + 1);
}

void sub_588E4(id *a1)
{
  id v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8[2];
  id v9;
  _QWORD v10[4];
  int8x16_t v11;
  id v12;

  if (objc_msgSend(a1[4], "length"))
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_58A34;
    v10[3] = &unk_C21D0;
    *(_OWORD *)v8 = *((_OWORD *)a1 + 2);
    v2 = v8[0];
    v11 = vextq_s8(*(int8x16_t *)v8, *(int8x16_t *)v8, 8uLL);
    v12 = a1[6];
    v3 = objc_retainBlock(v10);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "expirationDate"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v6 = objc_msgSend(v4, "compare:", v5);

    if (v6 == (id)-1)
      objc_msgSend(a1[5], "_invalidate:", v3);
    else
      ((void (*)(_QWORD *))v3[2])(v3);

  }
  else
  {
    v7 = objc_retainBlock(a1[6]);
    if (v7)
    {
      v9 = v7;
      (*((void (**)(id, id, _QWORD))v7 + 2))(v7, a1[4], 0);
      v7 = v9;
    }

  }
}

void sub_58A34(uint64_t a1)
{
  void *v2;
  void (**v3)(void);
  void (**v4)(void);
  void (*v5)(void);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void (**v12)(void);
  void *v13;
  void *v14;
  id v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "prices"));
  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (v15)
  {
    v3 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 48));
    v4 = v3;
    if (!v3)
    {
LABEL_5:

      goto LABEL_15;
    }
    v5 = v3[2];
LABEL_4:
    v5();
    goto LABEL_5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allStoreAssets"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", *(_QWORD *)(a1 + 40)));

  v8 = *(void **)(a1 + 48);
  if (!v7)
  {
    v12 = objc_retainBlock(v8);
    v4 = v12;
    if (!v12)
      goto LABEL_5;
    v5 = v12[2];
    goto LABEL_4;
  }
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandlers"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

    v11 = objc_retainBlock(*(id *)(a1 + 48));
    if (v10)
    {
      objc_msgSend(v10, "addObject:", v11);

      v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandlers"));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, *(_QWORD *)(a1 + 40));
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](NSMutableArray, "arrayWithObject:", v11));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandlers"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, *(_QWORD *)(a1 + 40));

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_fetchPricesForStoreAssetIDs");
LABEL_15:

}

void sub_58C70(uint64_t a1)
{
  id v2;

  if (objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "completionHandlers"));
    objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

  }
}

void sub_58D64(uint64_t a1)
{
  void *v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSValue valueWithNonretainedObject:](NSValue, "valueWithNonretainedObject:"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "listeners"));
    objc_msgSend(v2, "addObject:", v3);

  }
}

void sub_58E6C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "listeners"));
    v3 = objc_msgSend(v2, "count");

    if (v3)
    {
      v4 = 0;
      while (1)
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "listeners"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v4));
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "nonretainedObjectValue"));

        if (v8 == *(id *)(a1 + 32))
          break;

        if (v3 == (id)++v4)
          return;
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "listeners"));
      objc_msgSend(v7, "removeObjectAtIndex:", v4);

    }
  }
}

id sub_58FF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate:", *(_QWORD *)(a1 + 40));
}

void sub_590E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  BKLibraryPriceManagerAsset *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  BKLibraryPriceManagerAsset *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void **v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];

  v5 = a2;
  v6 = a3;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v39;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v39 != v9)
          objc_enumerationMutation(v5);
        v11 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v10);
        v12 = -[BKLibraryPriceManagerAsset initWithType:storeID:]([BKLibraryPriceManagerAsset alloc], "initWithType:storeID:", 0, v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allStoreAssets"));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, v11);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    }
    while (v8);
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v14 = v6;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v35;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v35 != v17)
          objc_enumerationMutation(v14);
        v19 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v18);
        v20 = -[BKLibraryPriceManagerAsset initWithType:storeID:]([BKLibraryPriceManagerAsset alloc], "initWithType:storeID:", 1, v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allStoreAssets"));
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v20, v19);

        v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
    }
    while (v16);
  }

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allStoreAssets"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seriesAssets"));
  objc_msgSend(v22, "addEntriesFromDictionary:", v23);

  objc_msgSend(*(id *)(a1 + 32), "setGenerationCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "generationCount") + 1);
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 900.0));
  objc_msgSend(*(id *)(a1 + 32), "setExpirationDate:", v24);

  v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue"));
  v28 = _NSConcreteStackBlock;
  v29 = 3221225472;
  v30 = sub_593E4;
  v31 = &unk_C1428;
  v26 = *(void **)(a1 + 40);
  v32 = *(_QWORD *)(a1 + 32);
  v33 = v26;
  dispatch_async(v25, &v28);

  v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue", v28, v29, v30, v31, v32));
  dispatch_resume(v27);

}

void sub_593E4(uint64_t a1)
{
  void (**v2)(void);
  void (**v3)(void);

  objc_msgSend(*(id *)(a1 + 32), "_notifyListeners:", 0);
  v2 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    v2[2]();
    v2 = v3;
  }

}

void sub_596EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "generationCount") == *(id *)(a1 + 40))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_597B8;
    block[3] = &unk_C1918;
    v11 = v6;
    v8 = v5;
    v9 = *(_QWORD *)(a1 + 32);
    v12 = v8;
    v13 = v9;
    dispatch_async(v7, block);

  }
}

void sub_597B8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  BOOL v19;
  id v20;
  id v21;
  uint64_t v22;
  void *k;
  uint64_t v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  _BYTE v41[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  if (*(_QWORD *)(a1 + 32) || !objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "allStoreAssets", 0));
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(v2, "setValue:forKey:", &stru_C40E8, *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i));
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
      }
      while (v5);
    }
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allValues"));
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v36;
      do
      {
        for (j = 0; j != v10; j = (char *)j + 1)
        {
          if (*(_QWORD *)v36 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)j);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "id"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "priceFormatted"));
          v16 = v15;
          if (v15)
            v17 = v15;
          else
            v17 = (id)objc_claimAutoreleasedReturnValue(+[BCMAssetWrapper actionTextForType:withAsset:](BCMAssetWrapper, "actionTextForType:withAsset:", 0, v13));
          v18 = v17;

          if (v14)
            v19 = v18 == 0;
          else
            v19 = 1;
          if (!v19)
            objc_msgSend(v2, "setValue:forKey:", v18, v14);

        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
      }
      while (v10);
    }

    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "allStoreAssets"));
    v20 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v32;
      do
      {
        for (k = 0; k != v21; k = (char *)k + 1)
        {
          if (*(_QWORD *)v32 != v22)
            objc_enumerationMutation(v3);
          v24 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)k);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v24));

          if (!v25)
            objc_msgSend(v2, "setValue:forKey:", &stru_C40E8, v24);
        }
        v21 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
      }
      while (v21);
    }
  }

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "prices"));
  objc_msgSend(v26, "addEntriesFromDictionary:", v2);

  objc_msgSend(*(id *)(a1 + 48), "_notifyListeners:", v2);
  objc_msgSend(*(id *)(a1 + 48), "_callCompletionHandlers:", v2);

}

void sub_59F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_59F7C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "invalidate:", 0);

  v4 = objc_loadWeakRetained(v2);
  v5 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_5A0AC;
  v11[3] = &unk_C30E0;
  v12 = v5;
  v13 = *(id *)(a1 + 40);
  objc_msgSend(v4, "fetchPriceForAssetID:completion:", v12, v11);

  v6 = objc_loadWeakRetained(v2);
  v7 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_5A134;
  v8[3] = &unk_C30E0;
  v9 = v7;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v6, "fetchPriceForAssetID:completion:", v9, v8);

}

void sub_5A0AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
    NSLog(CFSTR("-------> 1 Successfully got price for store item:%@, %@"), *(_QWORD *)(a1 + 32), v5);
  else
    NSLog(CFSTR("-------> 1 Failed to get price for store item:%@"), *(_QWORD *)(a1 + 32));
  v7 = objc_retainBlock(*(id *)(a1 + 40));
  v8 = v7;
  if (v7)
    (*((void (**)(id))v7 + 2))(v7);

}

void sub_5A134(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
    NSLog(CFSTR("-------> 2 Successfully got price for store item:%@, %@"), *(_QWORD *)(a1 + 32), v5);
  else
    NSLog(CFSTR("-------> 2 Failed to get price for store item:%@"), *(_QWORD *)(a1 + 32));
  v7 = objc_retainBlock(*(id *)(a1 + 40));
  v8 = v7;
  if (v7)
    (*((void (**)(id))v7 + 2))(v7);

}

void sub_5A470(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_5A500;
  v6[3] = &unk_C17E0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

void sub_5A500(uint64_t a1)
{
  void *v2;
  void (**v3)(id, void *);

  v3 = (void (**)(id, void *))objc_retainBlock(*(id *)(a1 + 40));
  if (v3)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "image"));
    v3[2](v3, v2);

  }
}

void sub_5A674(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_5A74C;
    v8[3] = &unk_C3130;
    v9 = *(id *)(a1 + 32);
    objc_msgSend(v4, "fetchImageShadowForAsset:size:completion:", v5, v8, *(double *)(a1 + 48), *(double *)(a1 + 56));

  }
  else
  {
    v6 = objc_retainBlock(*(id *)(a1 + 32));
    v7 = v6;
    if (v6)
      (*((void (**)(id, _QWORD))v6 + 2))(v6, 0);

  }
}

void sub_5A74C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_retainBlock(*(id *)(a1 + 32));
  v4 = v3;
  if (v3)
    (*((void (**)(id, id))v3 + 2))(v3, v5);

}

void sub_5A864(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_5A8F4;
  v6[3] = &unk_C17E0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

void sub_5A8F4(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void sub_5AAE4(uint64_t a1, void *a2)
{
  void (**v3)(id, void *);
  void *v4;
  id v5;

  v5 = a2;
  v3 = (void (**)(id, void *))objc_retainBlock(*(id *)(a1 + 32));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "image"));
    v3[2](v3, v4);

  }
}

void sub_5ACB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = *(void **)(a1 + 48);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
    v6 = *(unsigned __int8 *)(a1 + 72);
    v7 = *(unsigned __int8 *)(a1 + 73);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_5ADAC;
    v11[3] = &unk_C3130;
    v8 = *(_QWORD *)(a1 + 32);
    v12 = *(id *)(a1 + 40);
    objc_msgSend(v4, "fetchImageForAsset:size:includeSpine:includeShadow:coverEffectsEnvironment:completion:", v5, v6, v7, v8, v11, *(double *)(a1 + 56), *(double *)(a1 + 64));

  }
  else
  {
    v9 = objc_retainBlock(*(id *)(a1 + 40));
    v10 = v9;
    if (v9)
      (*((void (**)(id, _QWORD))v9 + 2))(v9, 0);

  }
}

void sub_5ADAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_retainBlock(*(id *)(a1 + 32));
  v4 = v3;
  if (v3)
    (*((void (**)(id, id))v3 + 2))(v3, v5);

}

void sub_5B018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_5B040(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_5B050(uint64_t a1)
{

}

void sub_5B058(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v3 = a2;
  v4 = BCImageCacheLog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v10 = 138412802;
    v11 = v3;
    v12 = 2160;
    v13 = 1752392040;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "BKLibrary+BCCacheManager: Received image %@ for fetchImageForAsset for asset ID %{mask.hash}@", (uint8_t *)&v10, 0x20u);
  }

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v3;
  v9 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_5B998(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_5BA40;
  v6[3] = &unk_C1F70;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "performBlockOnCollectionsWorkerQueue:", v6);

}

id sub_5BA40(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performResetCollectionsInMoc:changeSet:completion:", a2, 0, *(_QWORD *)(a1 + 40));
}

void sub_5BA54(uint64_t a1, void *a2)
{
  id v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t *v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  os_unfair_lock_s *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v3 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = sub_5BC08;
  v23 = sub_5BC18;
  v24 = 0;
  v4 = *(os_unfair_lock_s **)(a1 + 32);
  v5 = v4 + 2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v15 = sub_5BC20;
  v16 = &unk_C31D0;
  v18 = &v19;
  v17 = v4;
  v6 = v14;
  os_unfair_lock_lock_with_options(v5, 0x10000);
  v15((uint64_t)v6);
  os_unfair_lock_unlock(v5);

  if (objc_msgSend((id)v20[5], "count"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_5BCAC;
    v10[3] = &unk_C31F8;
    v11 = *(id *)(a1 + 32);
    v13 = &v19;
    v12 = v3;
    objc_msgSend(v7, "performBlockOnCollectionsWorkerQueue:", v10);

    v8 = v11;
  }
  else
  {
    v9 = objc_retainBlock(v3);
    v8 = v9;
    if (v9)
      (*((void (**)(id))v9 + 2))(v9);
  }

  _Block_object_dispose(&v19, 8);
}

void sub_5BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_5BC08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_5BC18(uint64_t a1)
{

}

void sub_5BC20(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resetCollectionsChangeSet"));
  v3 = objc_msgSend(v2, "copy");
  v4 = a1 + 40;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;

  v7 = BKLibraryLog(objc_msgSend(*(id *)(a1 + 32), "setResetCollectionsChangeSet:", 0));
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_837E4(v4);

}

id sub_5BCAC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performResetCollectionsInMoc:changeSet:completion:", a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 40));
}

void sub_5BE38(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const __CFString *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD block[7];
  _QWORD v14[4];
  NSObject *v15;
  _QWORD *v16;
  _QWORD v17[4];
  NSObject *v18;
  __int128 *p_buf;
  _QWORD v20[5];
  id v21;
  __int128 buf;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 12))
  {
    v2 = BKLibraryCollectionLog();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 40))
        v4 = CFSTR("YES");
      else
        v4 = CFSTR("NO");
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Set enable cloud merge:%{public}@", (uint8_t *)&buf, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 12) = *(_BYTE *)(a1 + 40);
    if (*(_BYTE *)(a1 + 40))
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v23 = 0x3032000000;
      v24 = sub_5BC08;
      v25 = sub_5BC18;
      v26 = 0;
      v20[0] = 0;
      v20[1] = v20;
      v20[2] = 0x3032000000;
      v20[3] = sub_5BC08;
      v20[4] = sub_5BC18;
      v21 = 0;
      v5 = dispatch_group_create();
      dispatch_group_enter(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudCollectionsManager"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collectionDetailManager"));
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_5C114;
      v17[3] = &unk_C3220;
      p_buf = &buf;
      v8 = v5;
      v18 = v8;
      objc_msgSend(v7, "currentCollectionDetailCloudSyncVersions:", v17);

      dispatch_group_enter(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudCollectionsManager"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "collectionMemberManager"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_5C160;
      v14[3] = &unk_C3220;
      v16 = v20;
      v11 = v8;
      v15 = v11;
      objc_msgSend(v10, "currentCollectionMemberCloudSyncVersions:", v14);

      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "enableCloudMergeQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_5C1AC;
      block[3] = &unk_C3270;
      block[4] = *(_QWORD *)(a1 + 32);
      block[5] = &buf;
      block[6] = v20;
      dispatch_group_notify(v11, v12, block);

      _Block_object_dispose(v20, 8);
      _Block_object_dispose(&buf, 8);

    }
  }
}

void sub_5C0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_5C114(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_5C160(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_5C1AC(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_5C228;
  v3[3] = &unk_C3248;
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v2, "performBlockOnCollectionsWorkerQueue:", v3);

}

void sub_5C228(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  uint8_t v18[16];
  uint8_t buf[16];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCCollectionDetail"), v3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCCollectionMember"), v3));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "historyToken"));
  if (v8 && objc_msgSend(v5, "localVersion"))
  {
    v9 = objc_msgSend(v5, "localVersion");
    v10 = objc_msgSend(v5, "syncVersion");

    if (v9 == v10)
      goto LABEL_9;
  }
  else
  {

  }
  v11 = BKLibraryCollectionLog();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "BCCollectionDetail cloud is dirty.  Setting all records to cloud", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "mergeCurrentCollectionDetailsToCloudInMoc:", v3);
LABEL_9:
  if ((objc_msgSend(v3, "hasChanges") & 1) == 0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "historyToken"));
    if (v13 && objc_msgSend(v7, "localVersion"))
    {
      v14 = objc_msgSend(v7, "localVersion");
      v15 = objc_msgSend(v7, "syncVersion");

      if (v14 == v15)
        goto LABEL_18;
    }
    else
    {

    }
  }
  v16 = BKLibraryCollectionLog();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "BCCollectionMember cloud is dirty.  Setting all records to cloud", v18, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "mergeCurrentCollectionMembersToCloudInMoc:", v3);
LABEL_18:
  objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudCollectionDetailManagerInMOC:reason:", v3, CFSTR("enableCloudMerge"));
  objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudCollectionMemberManagerInMOC:reason:", v3, CFSTR("enableCloudMerge"));

}

void sub_5CC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_5CC30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD activity_block[5];
  id v8;
  id v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  activity_block[0] = _NSConcreteStackBlock;
  activity_block[1] = 3221225472;
  activity_block[2] = sub_5CCFC;
  activity_block[3] = &unk_C3298;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  v4 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  activity_block[4] = v5;
  v8 = v4;
  v9 = v3;
  v6 = v3;
  _os_activity_initiate(&dword_0, "Fetch Default Books Collection", OS_ACTIVITY_FLAG_DEFAULT, activity_block);

  objc_destroyWeak(&v11);
}

void sub_5CCFC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v10 = 0;
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v4, v5, &v10));
    v7 = v10;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v6;

  }
}

void sub_5D894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_5D8AC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD activity_block[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  activity_block[0] = _NSConcreteStackBlock;
  activity_block[1] = 3221225472;
  activity_block[2] = sub_5D960;
  activity_block[3] = &unk_C32E8;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v10 = v4;
  v11 = v5;
  v6 = v3;
  _os_activity_initiate(&dword_0, "Insert New Collection", OS_ACTIVITY_FLAG_DEFAULT, activity_block);

}

void sub_5D960(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BKCollection insertNewCollectionWithCollectionID:inManagedObjectContext:](BKCollection, "insertNewCollectionWithCollectionID:inManagedObjectContext:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v3 = objc_retainBlock(*(id *)(a1 + 48));
  v4 = v3;
  if (v3)
    (*((void (**)(id, void *))v3 + 2))(v3, v2);

  objc_msgSend(v2, "setLocalModDate:", 0);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v2;

}

void sub_5DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_5DD7C(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = (void *)a1[4];
  v4 = (void *)a1[5];
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "collectionID"));
  LOBYTE(v3) = objc_msgSend(v3, "deleteCollectionWithCollectionID:inManagedObjectContext:error:", v6, v5, 0);

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (_BYTE)v3;
}

void sub_5DE84(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v5 = a3;
  v6 = BKLibraryCollectionLog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138412290;
      v11 = v9;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Removed %@ from Want to Read.", (uint8_t *)&v10, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_838BC();
  }

}

void sub_5E034(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  _QWORD v21[2];
  _BYTE v22[128];

  v3 = a2;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = a1[4];
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v10 = objc_opt_class(NSString);
        if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
        {
          v11 = v9;
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "libraryMutableAssetWithAssetID:inManagedObjectContext:", v11, v3));
          if ((objc_msgSend(v12, "isContainer") & 1) == 0)
          {
            v20[0] = CFSTR("BKLibraryAssetMarkedLocation");
            v20[1] = CFSTR("BKLibraryAssetIDKey");
            v21[0] = BALocationTypeFromAddToFinishCollection;
            v21[1] = v11;
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 2));
            objc_msgSend(v12, "setFinishedStateUserSetsFinished:userInfo:", 0, v13);

          }
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    }
    while (v6);
  }

  v14 = objc_retainBlock(a1[6]);
  v15 = v14;
  if (v14)
    (*((void (**)(id, uint64_t, _QWORD))v14 + 2))(v14, 1, 0);

}

void sub_5E388(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  char v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  char v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionOnMainQueueWithCollectionID:error:", *(_QWORD *)(a1 + 40), 0));
    if (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", kBKCollectionDefaultIDFinished))
    {
      objc_msgSend(*(id *)(a1 + 32), "markAssetsAsFinished:completion:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));
      goto LABEL_12;
    }
    if (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", kBKCollectionDefaultIDWantToRead))
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_5E5DC;
      v22[3] = &unk_C3360;
      v23 = v2;
      v24 = *(id *)(a1 + 48);
      v5 = *(id *)(a1 + 56);
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(void **)(a1 + 40);
      v25 = v5;
      v26 = v6;
      v27 = v7;
      v29 = *(_BYTE *)(a1 + 72);
      v28 = *(id *)(a1 + 64);
      objc_msgSend(v23, "performBlockOnCollectionsWorkerQueue:", v22);

      v8 = v23;
LABEL_11:

      goto LABEL_12;
    }
    if (!objc_msgSend(v3, "isDefaultCollection")
      || objc_msgSend(v3, "allowsManualAddition"))
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_5E8A4;
      v14[3] = &unk_C3360;
      v15 = v2;
      v16 = *(id *)(a1 + 48);
      v9 = *(id *)(a1 + 56);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(void **)(a1 + 40);
      v17 = v9;
      v18 = v10;
      v19 = v11;
      v21 = *(_BYTE *)(a1 + 72);
      v20 = *(id *)(a1 + 64);
      objc_msgSend(v15, "performBlockOnCollectionsWorkerQueue:", v14);

      v8 = v15;
      goto LABEL_11;
    }
    v12 = objc_retainBlock(*(id *)(a1 + 64));
    v13 = v12;
    if (v12)
      (*((void (**)(id, _QWORD, _QWORD))v12 + 2))(v12, 0, 0);

  }
  else
  {
    v4 = objc_retainBlock(*(id *)(a1 + 64));
    v3 = v4;
    if (v4)
      (*((void (**)(id, _QWORD, _QWORD))v4 + 2))(v4, 0, 0);
  }
LABEL_12:

}

void sub_5E5DC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *j;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryAssetsWithAssetIDsContainedInList:tempAssetIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v11, "isContainer") & 1) == 0)
          objc_msgSend(v5, "addObject:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v8);
  }

  v12 = *(void **)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v32 = 0;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v13, v3, &v32));
  v26 = v32;
  v27 = v3;
  objc_msgSend(v14, "addLibraryAssets:hideAssets:inManagedObjectContext:forceToTop:", v5, 0, v3, *(unsigned __int8 *)(a1 + 80));
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v15 = v5;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v29;
    do
    {
      for (j = 0; j != v17; j = (char *)j + 1)
      {
        if (*(_QWORD *)v29 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(*(id *)(a1 + 56), "allowsAutoDownloadOfSamplesToWantToRead")
          && objc_msgSend(v20, "isValid"))
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "storeID"));
          if (v21
            && (objc_msgSend(v20, "isOwned") & 1) == 0
            && (objc_msgSend(v20, "isLocal") & 1) == 0)
          {
            v22 = objc_msgSend(v20, "isDownloading");

            if ((v22 & 1) != 0)
              continue;
            v23 = *(void **)(a1 + 56);
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "storeID"));
            objc_msgSend(v23, "p_downloadSampleBook:", v21);
          }

        }
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
    }
    while (v17);
  }

  v24 = objc_retainBlock(*(id *)(a1 + 72));
  v25 = v24;
  if (v24)
    (*((void (**)(id, BOOL, id))v24 + 2))(v24, v14 != 0, v26);

}

void sub_5E8A4(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryAssetsWithAssetIDsContainedInList:tempAssetIDs:inManagedObjectContext:", v4, v5, v6));
  v8 = *(void **)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v14 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v9, v6, &v14));
  v11 = v14;
  objc_msgSend(v10, "addLibraryAssets:hideAssets:inManagedObjectContext:forceToTop:", v7, 0, v6, *(unsigned __int8 *)(a1 + 80));

  v12 = objc_retainBlock(*(id *)(a1 + 72));
  v13 = v12;
  if (v12)
    (*((void (**)(id, BOOL, id))v12 + 2))(v12, v10 != 0, v11);

}

void sub_5EA54(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a3;
  v5 = objc_retainBlock(*(id *)(a1 + 32));
  v6 = v5;
  if (v5)
    (*((void (**)(id, BOOL, id))v5 + 2))(v5, a2 != 0, v7);

}

void sub_5EC6C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  BKCollectionControllerMemberManagingModifyResponse *v20;
  void *v21;
  void *v22;
  BKCollectionControllerMemberManagingModifyResponse *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  unsigned int v31;
  _QWORD v32[5];
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  _BYTE v40[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKCollectionMember")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("collection.collectionID == %@ AND %K == %@"), *(_QWORD *)(a1 + 32), CFSTR("assetID"), *(_QWORD *)(a1 + 40)));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setFetchBatchSize:", 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, 0));
  if (objc_msgSend(v6, "count"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryManager"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "libraryAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), v3));

    v9 = *(void **)(a1 + 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", *(_QWORD *)(a1 + 32)));
    v31 = objc_msgSend(v9, "p_shouldDeleteAsset:removingFromCollectionIDs:", v8, v10);

  }
  else
  {
    v8 = 0;
    v31 = 0;
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v11 = v6;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v36;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v36 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(v3, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v15));
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v13);
  }

  v16 = BCAssetContentTypeFromBKAssetContentType(objc_msgSend(v8, "contentType"));
  v17 = *(void **)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 32);
  v34 = 0;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v18, v3, &v34));
  v30 = v34;
  v20 = [BKCollectionControllerMemberManagingModifyResponse alloc];
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetID"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "title"));
  v23 = -[BKCollectionControllerMemberManagingModifyResponse initWithAssetID:assetContentType:collectionTitle:](v20, "initWithAssetID:assetContentType:collectionTitle:", v21, v16, v22);

  v24 = v31;
  if (!v8)
    v24 = 0;
  if (v24 == 1)
  {
    v25 = *(void **)(a1 + 56);
    v39 = v8;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_5EFC4;
    v32[3] = &unk_C17E0;
    v27 = *(id *)(a1 + 64);
    v32[4] = v23;
    v33 = v27;
    objc_msgSend(v25, "deleteAssets:exhaustive:completion:", v26, 0, v32);

    v28 = v33;
  }
  else
  {
    v29 = objc_retainBlock(*(id *)(a1 + 64));
    v28 = v29;
    if (v29)
      (*((void (**)(id, BKCollectionControllerMemberManagingModifyResponse *, _QWORD))v29 + 2))(v29, v23, 0);
  }

}

void sub_5EFC4(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), 0);
    v2 = v3;
  }

}

void sub_5F170(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;

  v6 = a4;
  if ((a2 & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = BKLibraryCollectionLog();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_8391C();

    v7 = objc_msgSend(v6, "copy");
  }
  v10 = objc_retainBlock(*(id *)(a1 + 40));
  v11 = v10;
  if (v10)
    (*((void (**)(id, uint64_t, id))v10 + 2))(v10, a2, v7);

}

void sub_5F214(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_5F29C;
  v3[3] = &unk_C17B8;
  v4 = v2;
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v4, "performBlockOnWorkerQueue:", v3);

}

void sub_5F29C(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryMutableAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 40), a2));
  objc_msgSend(v2, "setFinishedStateUserSetsFinished:userInfo:", 0, 0);

}

void sub_5F3B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a3;
  v5 = objc_retainBlock(*(id *)(a1 + 32));
  v6 = v5;
  if (v5)
    (*((void (**)(id, BOOL, id))v5 + 2))(v5, a2 != 0, v7);

}

void sub_5F6B4(uint64_t a1, int a2, void *a3)
{
  BKCollectionControllerMemberManagingModifyResponse *v5;
  id v6;
  void *v7;
  BKCollectionControllerMemberManagingModifyResponse *v8;
  id v9;

  v9 = a3;
  if (a2)
  {
    v5 = -[BKCollectionControllerMemberManagingModifyResponse initWithAssetID:assetContentType:collectionTitle:]([BKCollectionControllerMemberManagingModifyResponse alloc], "initWithAssetID:assetContentType:collectionTitle:", &stru_C40E8, 0, &stru_C40E8);
    v6 = objc_retainBlock(*(id *)(a1 + 32));
    v7 = v6;
    if (v6)
      (*((void (**)(id, BKCollectionControllerMemberManagingModifyResponse *, id))v6 + 2))(v6, v5, v9);

  }
  else
  {
    v8 = (BKCollectionControllerMemberManagingModifyResponse *)objc_retainBlock(*(id *)(a1 + 32));
    v5 = v8;
    if (v8)
      (*(void (**)(BKCollectionControllerMemberManagingModifyResponse *, _QWORD, id))&v8->assetID[8])(v8, 0, v9);
  }

}

void sub_5F764(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  char v8;
  void *v9;
  id v10;
  uint64_t v11;
  BKCollectionControllerMemberManagingModifyResponse *v12;
  void *v13;
  void *v14;
  BKCollectionControllerMemberManagingModifyResponse *v15;
  id v16;
  unsigned __int8 v17;
  id v18;
  NSObject *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  _QWORD v25[4];
  __int128 v26;
  uint64_t v27;
  id v28;
  BKCollectionControllerMemberManagingModifyResponse *v29;
  id v30;
  char v31;
  char v32;
  id v33;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 32);
  v33 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v4, v3, &v33));
  v7 = v33;
  if ((objc_msgSend(v6, "allowsManualAddition") & 1) != 0)
  {
    v8 = 0;
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v8 = objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", kBKCollectionDefaultIDSamples) ^ 1;
    if (!v6)
      goto LABEL_12;
  }
  if ((v8 & 1) == 0 && *(_QWORD *)(a1 + 48) && !v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "libraryAssetWithAssetID:inManagedObjectContext:", *(_QWORD *)(a1 + 48), v3));

    v11 = BCAssetContentTypeFromBKAssetContentType(objc_msgSend(v10, "contentType"));
    v12 = [BKCollectionControllerMemberManagingModifyResponse alloc];
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "assetID"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "title"));
    v15 = -[BKCollectionControllerMemberManagingModifyResponse initWithAssetID:assetContentType:collectionTitle:](v12, "initWithAssetID:assetContentType:collectionTitle:", v13, v11, v14);

    if (objc_msgSend(v10, "isValid"))
    {
      v16 = objc_msgSend(v6, "addCollectionMemberAvoidingDupesWithAssetID:sortKey:forceToTop:", *(_QWORD *)(a1 + 48), 0, *(unsigned __int8 *)(a1 + 64));
      if ((objc_msgSend(v10, "isOwned") & 1) != 0
        || (objc_msgSend(v10, "isLocal") & 1) != 0)
      {
        v17 = 1;
      }
      else
      {
        v17 = objc_msgSend(v10, "isDownloading");
      }
      if (objc_msgSend(*(id *)(a1 + 32), "allowsAutoDownloadOfSamplesToWantToRead")
        && (v17 & 1) == 0
        && *(_BYTE *)(a1 + 65))
      {
        objc_msgSend(*(id *)(a1 + 32), "p_downloadSampleBook:", *(_QWORD *)(a1 + 48));
      }
      v24 = objc_retainBlock(*(id *)(a1 + 56));
      v20 = v24;
      if (v24)
        (*((void (**)(id, BKCollectionControllerMemberManagingModifyResponse *, _QWORD))v24 + 2))(v24, v15, 0);
    }
    else
    {
      v20 = objc_msgSend(objc_alloc((Class)BCMutableStoreItem), "initWithStoreID:", *(_QWORD *)(a1 + 48));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[BCCloudAssetManager sharedManager](BCCloudAssetManager, "sharedManager"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "storeAssetManager"));

      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_5FA88;
      v25[3] = &unk_C3478;
      v26 = *(_OWORD *)(a1 + 32);
      v27 = *(_QWORD *)(a1 + 48);
      v31 = *(_BYTE *)(a1 + 64);
      v28 = v10;
      v32 = *(_BYTE *)(a1 + 65);
      v23 = *(id *)(a1 + 56);
      v29 = v15;
      v30 = v23;
      objc_msgSend(v22, "addStoreItem:completion:", v20, v25);

    }
    goto LABEL_25;
  }
LABEL_12:
  v18 = BKLibraryCollectionLog();
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    sub_83980((_QWORD *)(a1 + 40), a1, v19);

  v10 = objc_retainBlock(*(id *)(a1 + 56));
  if (v10)
  {
    v15 = (BKCollectionControllerMemberManagingModifyResponse *)objc_msgSend(v7, "copy");
    (*((void (**)(id, _QWORD, BKCollectionControllerMemberManagingModifyResponse *))v10 + 2))(v10, 0, v15);
LABEL_25:

  }
}

void sub_5FA88(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(id, _QWORD, id);
  id v19;
  _QWORD v20[4];
  __int128 v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  char v26;
  char v27;

  v6 = a4;
  if (a2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v20[0] = _NSConcreteStackBlock;
    v20[2] = sub_5FBC4;
    v20[3] = &unk_C3450;
    v8 = *(void **)(a1 + 56);
    v22 = *(_QWORD *)(a1 + 48);
    v26 = *(_BYTE *)(a1 + 80);
    v20[1] = 3221225472;
    v21 = *(_OWORD *)(a1 + 32);
    v23 = v8;
    v27 = *(_BYTE *)(a1 + 81);
    v9 = *(id *)(a1 + 72);
    v24 = *(_QWORD *)(a1 + 64);
    v25 = v9;
    objc_msgSend(v7, "performBlockOnCollectionsWorkerQueue:", v20);

  }
  else
  {
    v10 = BKLibraryCollectionLog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_839F8(a1, v11, v12, v13, v14, v15, v16, v17);

    v18 = (void (**)(id, _QWORD, id))objc_retainBlock(*(id *)(a1 + 72));
    if (v18)
    {
      v19 = objc_msgSend(v6, "copy");
      v18[2](v18, 0, v19);

    }
  }

}

void sub_5FBC4(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  id v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mutableCollectionWithCollectionID:inManagedObjectContext:error:", *(_QWORD *)(a1 + 40), a2, 0));
  v3 = objc_msgSend(v7, "addCollectionMemberAvoidingDupesWithAssetID:sortKey:forceToTop:", *(_QWORD *)(a1 + 48), 0, *(unsigned __int8 *)(a1 + 80));
  if ((objc_msgSend(*(id *)(a1 + 56), "isOwned") & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 56), "isLocal") & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 56), "isDownloading");
  }
  if (objc_msgSend(*(id *)(a1 + 32), "allowsAutoDownloadOfSamplesToWantToRead")
    && (v4 & 1) == 0
    && *(_BYTE *)(a1 + 81))
  {
    objc_msgSend(*(id *)(a1 + 32), "p_downloadSampleBook:", *(_QWORD *)(a1 + 48));
  }
  v5 = objc_retainBlock(*(id *)(a1 + 72));
  v6 = v5;
  if (v5)
    (*((void (**)(id, _QWORD, _QWORD))v5 + 2))(v5, *(_QWORD *)(a1 + 64), 0);

}

void sub_5FE24(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  unsigned int v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  _QWORD v30[4];
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  id v39;
  _BYTE v40[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v11 = objc_msgSend(v10, "verboseLoggingEnabled");

    if (v11)
    {
      v12 = BKLibraryCollectionDevelopmentLog();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v37 = v14;
        v38 = 2112;
        v39 = v9;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "\"\\\"sample download failed for storeID: %@, error: %@\\\"\"", buf, 0x16u);
      }
LABEL_19:

    }
  }
  else if (objc_msgSend(v7, "count"))
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allValues"));
    v15 = -[NSObject countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    if (v15)
    {
      v16 = v15;
      v27 = 0;
      v28 = v8;
      v29 = v7;
      v17 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v33 != v17)
            objc_enumerationMutation(v13);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i), "bookSampleDownloadURL", v27, v28, v29));
          if (v19)
          {
            v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uiManagerProviderForAddingToWantToRead"));
            v21 = (void *)v20;
            if (v20)
            {
              v22 = (*(uint64_t (**)(uint64_t))(v20 + 16))(v20);
              v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
            }
            else
            {
              v23 = 0;
            }
            v24 = objc_alloc((Class)BLDownloadManifestRequest);
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLRequest requestWithURL:](NSURLRequest, "requestWithURL:", v19));
            v26 = objc_msgSend(v24, "initWithURLRequest:", v25);

            v30[0] = _NSConcreteStackBlock;
            v30[1] = 3221225472;
            v30[2] = sub_600D0;
            v30[3] = &unk_C34C8;
            v31 = v19;
            objc_msgSend(v26, "startWithUIManager:manifestResponseBlock:", v23, v30);

          }
        }
        v16 = -[NSObject countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      }
      while (v16);
      v8 = v28;
      v7 = v29;
      v9 = v27;
    }
    goto LABEL_19;
  }

}

void sub_600D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  id v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  id v21;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "validDownloadIDs"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
  v9 = objc_msgSend(v8, "verboseLoggingEnabled");

  if (v5 || !v7)
  {
    if (v9)
    {
      v16 = BKLibraryCollectionDevelopmentLog();
      v11 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = 138412546;
        v19 = v17;
        v20 = 2112;
        v21 = v5;
        v13 = "\"\\\"sample download failed for URL: %@, error: %@\\\"\"";
        v14 = v11;
        v15 = 22;
        goto LABEL_9;
      }
LABEL_10:

    }
  }
  else if (v9)
  {
    v10 = BKLibraryCollectionDevelopmentLog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v18 = 138412290;
      v19 = v12;
      v13 = "\"\\\"sample download started for URL: %@\\\"\"";
      v14 = v11;
      v15 = 12;
LABEL_9:
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v18, v15);
      goto LABEL_10;
    }
    goto LABEL_10;
  }

}

void sub_603EC(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  id v28;
  uint64_t v29;
  _BYTE v30[128];

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "p_shouldDeleteAsset:removingFromCollectionIDs:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKCollectionMember")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("collection.collectionID IN %@ AND assetID == %@"), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
  objc_msgSend(v5, "setPredicate:", v6);

  objc_msgSend(v5, "setFetchBatchSize:", 32);
  v28 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v5, &v28));
  v8 = v28;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v25;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v25 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(v3, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v13));
        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v11);
  }

  if (objc_msgSend(v9, "count"))
    v14 = v8 == 0;
  else
    v14 = 0;
  v15 = v14;
  if (v4)
  {
    v16 = *(void **)(a1 + 64);
    v29 = *(_QWORD *)(a1 + 40);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v29, 1));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_60668;
    v20[3] = &unk_C3518;
    v22 = *(id *)(a1 + 72);
    v23 = v15;
    v21 = v8;
    objc_msgSend(v16, "deleteAssets:exhaustive:completion:", v17, 0, v20);

    v18 = v22;
  }
  else
  {
    v19 = objc_retainBlock(*(id *)(a1 + 72));
    v18 = v19;
    if (v19)
      (*((void (**)(id, uint64_t, id))v19 + 2))(v19, v15, v8);
  }

}

void sub_60668(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void sub_6082C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32;
  _BYTE v33[128];

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", *(_QWORD *)(a1 + 48)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "p_assetsRequiringDeletion:removingFromCollectionIDs:", v5, v6));

  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 48);
  v32 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v9, v3, &v32));
  v11 = v32;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKCollectionMember")));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("collection == %@ AND assetID IN %@"), v10, *(_QWORD *)(a1 + 56)));
  objc_msgSend(v12, "setPredicate:", v13);

  objc_msgSend(v12, "setFetchBatchSize:", 32);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v12, 0));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v29;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v29 != v17)
          objc_enumerationMutation(v14);
        objc_msgSend(v3, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v18));
        v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    }
    while (v16);
  }
  if (objc_msgSend(v14, "count"))
    v19 = v11 == 0;
  else
    v19 = 0;
  v20 = v19;
  if (objc_msgSend(v7, "count"))
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_60AC4;
    v24[3] = &unk_C3518;
    v21 = *(void **)(a1 + 64);
    v26 = *(id *)(a1 + 72);
    v27 = v20;
    v25 = v11;
    objc_msgSend(v21, "deleteAssets:exhaustive:completion:", v7, 0, v24);

    v22 = v26;
  }
  else
  {
    v23 = objc_retainBlock(*(id *)(a1 + 72));
    v22 = v23;
    if (v23)
      (*((void (**)(id, uint64_t, id))v23 + 2))(v23, v20, v11);
  }

}

void sub_60AC4(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void sub_60B40(id a1, BKLibraryManagedObjectContext *a2)
{
  +[BKCollection cleanupDefaultCollections:](BKCollection, "cleanupDefaultCollections:", a2);
}

void sub_616F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void sub_61724(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryManager"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCCollectionDetail"), v4));

  objc_msgSend(v6, "setLocalVersion:", (char *)objc_msgSend(v6, "localVersion") + 1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "localVersion");

}

void sub_617B8(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  id v14;
  id v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v7 = a4;
  if (!a2)
  {
    v14 = BKLibraryCollectionLog();
    v11 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_83A60();
    goto LABEL_12;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
  v9 = objc_msgSend(v8, "verboseLoggingEnabled");

  if (a3)
  {
    if (v9)
    {
      v10 = BKLibraryCollectionDevelopmentLog();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v17 = 138543362;
        v18 = v12;
        v13 = "\"\\\"collectionDetailManager succesfully set collectionDetails for collectionIDs: %{public}@\\\"\"";
LABEL_11:
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v17, 0xCu);
        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  else if (v9)
  {
    v15 = BKLibraryCollectionDevelopmentLog();
    v11 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = 138543362;
      v18 = v16;
      v13 = "\"\\\"collectionDetailManager succesfully set collectionDetails, but no changes for collectionIDs: %{public}@\\\"\"";
      goto LABEL_11;
    }
LABEL_12:

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_61924(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  id v17;

  v5 = a3;
  v6 = BKLibraryCollectionLog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v14 = 138543362;
      v15 = v9;
      v10 = "collectionDetailManager succesfully deleted collectionIDs: %{public}@";
      v11 = v7;
      v12 = 12;
LABEL_6:
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, v12);
    }
  }
  else if (v8)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 138543618;
    v15 = v13;
    v16 = 2112;
    v17 = v5;
    v10 = "collectionDetailManager warning deleting collectionIDs: %{public}@ error:%@";
    v11 = v7;
    v12 = 22;
    goto LABEL_6;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_61A34(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_61AA8;
  v3[3] = &unk_C35A8;
  v4 = *(_OWORD *)(a1 + 32);
  objc_msgSend(v2, "performBlockOnCollectionsWorkerQueue:", v3);

}

void sub_61AA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCCollectionDetail"), v3));

  objc_msgSend(v5, "setSyncVersion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_62168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_62198(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "libraryManager"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCCollectionMember"), v4));

  objc_msgSend(v6, "setLocalVersion:", (char *)objc_msgSend(v6, "localVersion") + 1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "localVersion");

}

void sub_6222C(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  id v14;
  id v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v7 = a4;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  if (!a2)
  {
    v14 = BKLibraryCollectionLog();
    v11 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_83AC0();
    goto LABEL_12;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
  v9 = objc_msgSend(v8, "verboseLoggingEnabled");

  if (a3)
  {
    if (v9)
    {
      v10 = BKLibraryCollectionDevelopmentLog();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 40);
        v17 = 138412290;
        v18 = v12;
        v13 = "\"\\\"collectionMemberManager succesfully set collectionMember memberIDs: %@\\\"\"";
LABEL_11:
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v17, 0xCu);
        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  else if (v9)
  {
    v15 = BKLibraryCollectionDevelopmentLog();
    v11 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 40);
      v17 = 138412290;
      v18 = v16;
      v13 = "\"\\\"collectionMemberManager succesfully set, but no changes for collectionMember memberIDs: %@\\\"\"";
      goto LABEL_11;
    }
LABEL_12:

  }
}

void sub_62398(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v5 = a3;
  v6 = BKLibraryCollectionLog();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138412290;
      v11 = v9;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "collectionMemberManager succesfully deleted collectionMember memberIDs: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_83B24();
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_62484(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_624F8;
  v3[3] = &unk_C35A8;
  v4 = *(_OWORD *)(a1 + 32);
  objc_msgSend(v2, "performBlockOnCollectionsWorkerQueue:", v3);

}

void sub_624F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudSyncVersionsForDataType:inContext:", CFSTR("BCCollectionMember"), v3));

  objc_msgSend(v5, "setSyncVersion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_62BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_62C14(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "enableCloudMerge");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_62CB0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  NSObject *v5;
  void *v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[16];

  if ((objc_msgSend(*(id *)(a1 + 32), "processingCollectionDetailChanges") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v3 = objc_msgSend(v2, "verboseLoggingEnabled");

    if (v3)
    {
      v4 = BKLibraryCollectionDevelopmentLog();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionDetailChanged BCCloudCollectionDetailManagerChanged notification received, deferring processing\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setReceivedCollectionDetailChangesNotification:", 1);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setProcessingCollectionDetailChanges:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v7 = objc_msgSend(v6, "verboseLoggingEnabled");

    if (v7)
    {
      v8 = BKLibraryCollectionDevelopmentLog();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionDetailChanged BCCloudCollectionDetailManagerChanged notification received, starting processing\\\"\"", buf, 2u);
      }

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_62E24;
    v11[3] = &unk_C1590;
    v11[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v10, "performBackgroundReadOnlyBlock:", v11);

  }
}

id sub_62E24(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudCollectionDetailManagerInMOC:reason:", a2, CFSTR("BCCloudCollectionDetailManagerChanged"));
}

void sub_62FB0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD v23[5];
  _QWORD v24[4];
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  char v29;
  _QWORD block[6];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "enableCloudMergeQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_631C0;
  block[3] = &unk_C31D0;
  block[4] = *(_QWORD *)(a1 + 32);
  block[5] = &v31;
  dispatch_sync(v15, block);

  if (v14)
  {
    v16 = BKLibraryCollectionLog();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_83C00();

  }
  else
  {
    v18 = *(void **)(a1 + 32);
    if (*((_BYTE *)v32 + 24))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "libraryManager"));
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_631F0;
      v24[3] = &unk_C2BB0;
      v25 = v11;
      v20 = v13;
      v21 = *(_QWORD *)(a1 + 32);
      v26 = v20;
      v27 = v21;
      v28 = v12;
      v29 = a6;
      objc_msgSend(v19, "performBlockOnCollectionsWorkerQueue:", v24);

    }
    else
    {
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "getChangesQueue"));
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_639E4;
      v23[3] = &unk_C1400;
      v23[4] = *(_QWORD *)(a1 + 32);
      dispatch_async(v22, v23);

    }
  }
  _Block_object_dispose(&v31, 8);

}

void sub_631A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_631C0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "enableCloudMerge");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_631F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  __int128 v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  NSObject *v37;
  id v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  NSObject *v50;
  __int128 v51;
  __int128 v52;
  id v53;
  id v54;
  void *v55;
  _QWORD block[5];
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint8_t v68[128];
  uint8_t buf[4];
  id v70;
  __int16 v71;
  void *v72;

  v3 = a2;
  objc_msgSend(v3, "setSessionContextType:", 1);
  v4 = BKLibraryCollectionLog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "count");
    v7 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 134218242;
    v70 = v6;
    v71 = 2112;
    v72 = v7;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "getCollectionDetailChangesSince #collectionDetailChanged updated %lu records currentSyncVersions:%@", buf, 0x16u);
  }

  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v8 = *(id *)(a1 + 32);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
  v55 = v3;
  if (v9)
  {
    v11 = v9;
    v12 = *(_QWORD *)v64;
    *(_QWORD *)&v10 = 138412290;
    v51 = v10;
    v53 = v8;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v64 != v12)
          objc_enumerationMutation(v8);
        v14 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "collectionID", v51));
        if (v15)
        {
          v16 = *(void **)(a1 + 48);
          v62 = 0;
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v15, v3, &v62));
          v18 = v62;
          if (v18)
          {
            v19 = BKLibraryCollectionLog();
            v20 = objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v51;
              v70 = v15;
              _os_log_error_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "Error retrieving collection for ID:%@", buf, 0xCu);
            }
          }
          else
          {
            if (v17)
            {
              objc_msgSend(v17, "configureFromCollectionDetail:shouldCompareModificationDate:", v14, 1);
            }
            else
            {
              v21 = BKLibraryCollectionLog();
              v22 = objc_claimAutoreleasedReturnValue(v21);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "name"));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "collectionID"));
                *(_DWORD *)buf = 138412546;
                v70 = v23;
                v71 = 2112;
                v72 = v24;
                _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "Collection Detail Inserted.  Creating title: %@, collectionID: %@", buf, 0x16u);

              }
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "collectionID"));
              v3 = v55;
              v17 = (void *)objc_claimAutoreleasedReturnValue(+[BKCollection insertNewCollectionWithCollectionID:inManagedObjectContext:](BKCollection, "insertNewCollectionWithCollectionID:inManagedObjectContext:", v25, v55));

              objc_msgSend(v17, "configureFromCollectionDetail:shouldCompareModificationDate:", v14, 0);
              v8 = v53;
            }
            v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryManager"));
            -[NSObject resetNextCollectionSort](v20, "resetNextCollectionSort");
          }

        }
      }
      v11 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
    }
    while (v11);
  }

  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v26 = *(id *)(a1 + 56);
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v58, v67, 16);
  if (v27)
  {
    v29 = v27;
    v30 = *(_QWORD *)v59;
    *(_QWORD *)&v28 = 138412290;
    v52 = v28;
    v54 = v26;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v59 != v30)
          objc_enumerationMutation(v26);
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)v31), "objectForKeyedSubscript:", CFSTR("collectionID"), v52));
        if (v32)
        {
          v33 = *(void **)(a1 + 48);
          v57 = 0;
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v32, v55, &v57));
          v35 = v57;
          if (v35)
          {
            v36 = BKLibraryCollectionLog();
            v37 = objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v52;
              v70 = v32;
              _os_log_error_impl(&dword_0, v37, OS_LOG_TYPE_ERROR, "Error retrieving collection for ID:%@", buf, 0xCu);
            }
            goto LABEL_30;
          }
          if (v34)
          {
            if (objc_msgSend(v34, "canDeleteCollection"))
            {
              v38 = BKLibraryCollectionLog();
              v39 = objc_claimAutoreleasedReturnValue(v38);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "title"));
                v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "collectionID"));
                *(_DWORD *)buf = 138412546;
                v70 = v40;
                v71 = 2112;
                v72 = v41;
                _os_log_impl(&dword_0, v39, OS_LOG_TYPE_INFO, "Collection Detail removed.  Deleting title:%@ collectionID: %@", buf, 0x16u);

                v26 = v54;
              }

              objc_msgSend(v55, "deleteObject:", v34);
            }
            else
            {
              v42 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
              v43 = objc_msgSend(v42, "verboseLoggingEnabled");

              v26 = v54;
              if (v43)
              {
                v44 = BKLibraryCollectionDevelopmentLog();
                v37 = objc_claimAutoreleasedReturnValue(v44);
                if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                {
                  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "title"));
                  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "collectionID"));
                  *(_DWORD *)buf = 138412546;
                  v70 = v45;
                  v71 = 2112;
                  v72 = v46;
                  _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEFAULT, "\"\\\"Collection Detail removed.  NOT Deleting default collection title:%@ collectionID: %@\\\"\"", buf, 0x16u);

                  v26 = v54;
                }
LABEL_30:

              }
            }
          }

        }
        v31 = (char *)v31 + 1;
      }
      while (v29 != v31);
      v47 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v58, v67, 16);
      v29 = v47;
    }
    while (v47);
  }

  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "libraryManager"));
  objc_msgSend(v48, "updateCloudVersionFromCloudSyncVersions:inContext:", *(_QWORD *)(a1 + 40), v55);

  v49 = *(void **)(a1 + 48);
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(v49, "_checkForChangesFromCloudCollectionDetailManagerInMOC:reason:", v55, CFSTR("fetchAgain"));
  }
  else
  {
    v50 = objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "getChangesQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_63878;
    block[3] = &unk_C1400;
    block[4] = *(_QWORD *)(a1 + 48);
    dispatch_async(v50, block);

  }
  objc_msgSend(*(id *)(a1 + 48), "setupDefaultCollectionsInManagedObjectContext:", v55);

}

void sub_63878(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  _QWORD v10[5];
  uint8_t buf[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "receivedCollectionDetailChangesNotification");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
  v4 = objc_msgSend(v3, "verboseLoggingEnabled");

  if (v2)
  {
    if (v4)
    {
      v5 = BKLibraryCollectionDevelopmentLog();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionDetailChanged completed fetchAgain, processing deferred notification.\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setReceivedCollectionDetailChangesNotification:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_639D0;
    v10[3] = &unk_C1590;
    v10[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v7, "performBackgroundReadOnlyBlock:", v10);

  }
  else
  {
    if (v4)
    {
      v8 = BKLibraryCollectionDevelopmentLog();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionDetailChanged completed fetchAgain, NO deferred notification.\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setProcessingCollectionDetailChanges:", 0);
  }
}

id sub_639D0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudCollectionDetailManagerInMOC:reason:", a2, CFSTR("deferred"));
}

id sub_639E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setProcessingCollectionDetailChanges:", 0);
}

void sub_63A5C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  NSObject *v5;
  void *v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[16];

  if ((objc_msgSend(*(id *)(a1 + 32), "processingCollectionMemberChanges") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v3 = objc_msgSend(v2, "verboseLoggingEnabled");

    if (v3)
    {
      v4 = BKLibraryCollectionDevelopmentLog();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionMemberChanged BCCloudCollectionMemberManagerChanged notification received, deferring processing\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setReceivedCollectionMemberChangesNotification:", 1);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setProcessingCollectionMemberChanges:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
    v7 = objc_msgSend(v6, "verboseLoggingEnabled");

    if (v7)
    {
      v8 = BKLibraryCollectionDevelopmentLog();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionMemberChanged BCCloudCollectionMemberManagerChanged notification received, starting processing\\\"\"", buf, 2u);
      }

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_63BD0;
    v11[3] = &unk_C1590;
    v11[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v10, "performBackgroundReadOnlyBlock:", v11);

  }
}

id sub_63BD0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudCollectionMemberManagerInMOC:reason:", a2, CFSTR("BCCloudCollectionMemberManagerChanged"));
}

void sub_63D5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD v23[5];
  _QWORD v24[4];
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  char v29;
  _QWORD block[6];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "enableCloudMergeQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_63F6C;
  block[3] = &unk_C31D0;
  block[4] = *(_QWORD *)(a1 + 32);
  block[5] = &v31;
  dispatch_sync(v15, block);

  if (v14)
  {
    v16 = BKLibraryCollectionLog();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_83C60();

  }
  else
  {
    v18 = *(void **)(a1 + 32);
    if (*((_BYTE *)v32 + 24))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "libraryManager"));
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_63F9C;
      v24[3] = &unk_C2BB0;
      v25 = v11;
      v20 = v13;
      v21 = *(_QWORD *)(a1 + 32);
      v26 = v20;
      v27 = v21;
      v28 = v12;
      v29 = a6;
      objc_msgSend(v19, "performBlockOnCollectionsWorkerQueue:", v24);

    }
    else
    {
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "getChangesQueue"));
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_64954;
      v23[3] = &unk_C1400;
      v23[4] = *(_QWORD *)(a1 + 32);
      dispatch_async(v22, v23);

    }
  }
  _Block_object_dispose(&v31, 8);

}

void sub_63F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_63F6C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "enableCloudMerge");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_63F9C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  _UNKNOWN **v8;
  char **v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *i;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  BOOL v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  NSObject *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unsigned int v57;
  id v58;
  NSObject *v59;
  void *v60;
  void *v61;
  NSObject *v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  _QWORD block[5];
  id v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  id v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  uint8_t v87[128];
  uint8_t buf[4];
  id v89;
  __int16 v90;
  void *v91;

  v67 = a2;
  objc_msgSend(v67, "setSessionContextType:", 1);
  v3 = BKLibraryCollectionLog();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 134218242;
    v89 = v5;
    v90 = 2112;
    v91 = v6;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "getCollectionMemberChangesSince #collectionMemberChanged updated %lu records currentSyncVersions:%@", buf, 0x16u);
  }

  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v7 = *(id *)(a1 + 32);
  v8 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
  v9 = &selRef_cachedFileSizeForAssetWithAssetID_;
  v64 = a1;
  v72 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v82, v87, 16);
  if (v72)
  {
    v70 = *(_QWORD *)v83;
    v63 = v7;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v83 != v70)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * (_QWORD)v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "collectionMemberID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[BCCollectionMember assetIDFromCollectionMemberID:](BCCollectionMember, "assetIDFromCollectionMemberID:", v12));
        v14 = objc_claimAutoreleasedReturnValue(+[BCCollectionMember collectionIDFromCollectionMemberID:](BCCollectionMember, "collectionIDFromCollectionMemberID:", v12));
        v15 = (void *)v14;
        if (v13)
          v16 = v14 == 0;
        else
          v16 = 1;
        if (!v16 && +[BKCollection shouldSyncCollectionID:](BKCollection, "shouldSyncCollectionID:", v14))
        {
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "p_fetchOrCreatePlaceholderCollectionForCollectionID:moc:", v15, v67));
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKCollectionMember")));
          v68 = (void *)v17;
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("collection == %@ AND assetID == %@"), v17, v13));
          objc_msgSend(v18, "setPredicate:", v19);

          v81 = 0;
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "executeFetchRequest:error:", v18, &v81));
          v21 = v81;
          v65 = v20;
          if (v21)
          {
            v22 = BKLibraryCollectionLog();
            v23 = objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v89 = v15;
              v90 = 2112;
              v91 = v13;
              _os_log_error_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "Error retrieving collectionMember for collectionID: %@ assetID: %@", buf, 0x16u);
            }
            goto LABEL_18;
          }
          if (objc_msgSend(v20, "count"))
          {
            v24 = objc_opt_class(BKCollectionMember);
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "lastObject"));
            v26 = BUDynamicCast(v24, v25);
            v23 = objc_claimAutoreleasedReturnValue(v26);

            -[NSObject configureFromCollectionMember:](v23, "configureFromCollectionMember:", v11);
            objc_msgSend(v68, "updateMaxSortKeyWithMember:", v23);
            goto LABEL_18;
          }
          if (!objc_msgSend(v20, "count"))
          {
            v27 = BKLibraryCollectionLog();
            v28 = objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "collectionMemberID"));
              *(_DWORD *)buf = 138412290;
              v89 = v29;
              _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, "Collection Member Inserted.  Creating member for collectionMemberID: %@", buf, 0xCu);

            }
            v23 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v11, "sortOrder")));
            v30 = objc_msgSend(v68, "addCollectionMemberAvoidingDupesWithAssetID:sortKey:forceToTop:", v13, v23, 0);
LABEL_18:

            a1 = v64;
            v8 = &_s10Foundation12NotificationV6objectypSgvg_ptr;
          }

          v9 = &selRef_cachedFileSizeForAssetWithAssetID_;
          v7 = v63;
        }

        v10 = (char *)v10 + 1;
      }
      while (v72 != v10);
      v31 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v82, v87, 16);
      v72 = v31;
    }
    while (v31);
  }

  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v32 = *(id *)(a1 + 56);
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v77, v86, 16);
  if (!v33)
    goto LABEL_55;
  v34 = v33;
  v35 = *(_QWORD *)v78;
  v71 = *(_QWORD *)v78;
  v73 = v32;
  do
  {
    for (i = 0; i != v34; i = (char *)i + 1)
    {
      if (*(_QWORD *)v78 != v35)
        objc_enumerationMutation(v32);
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", CFSTR("collectionMemberID")));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8[268], "assetIDFromCollectionMemberID:", v37));
      v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8[268], "collectionIDFromCollectionMemberID:", v37));
      v40 = (void *)v39;
      if (v38)
        v41 = v39 == 0;
      else
        v41 = 1;
      if (!v41 && objc_msgSend(v9 + 495, "shouldSyncCollectionID:", v39))
      {
        v42 = *(void **)(v64 + 48);
        v76 = 0;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "mutableCollectionWithCollectionID:inManagedObjectContext:error:", v40, v67, &v76));
        v44 = v76;
        if (v44)
        {
          v45 = BKLibraryCollectionLog();
          v46 = objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v89 = v40;
            _os_log_error_impl(&dword_0, v46, OS_LOG_TYPE_ERROR, "Error retrieving collection for collectionID: %@", buf, 0xCu);
          }
          goto LABEL_47;
        }
        v46 = objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKCollectionMember")));
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("collection == %@ AND assetID == %@"), v43, v38));
        -[NSObject setPredicate:](v46, "setPredicate:", v47);

        v75 = 0;
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "executeFetchRequest:error:", v46, &v75));
        v49 = v75;
        if (v49)
        {
          v69 = v48;
          v50 = BKLibraryCollectionLog();
          v51 = objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v89 = v40;
            v90 = 2112;
            v91 = v38;
            _os_log_error_impl(&dword_0, v51, OS_LOG_TYPE_ERROR, "Error retrieving collection member for collectionID: %@, assetID: %@", buf, 0x16u);
          }
LABEL_45:

          v48 = v69;
        }
        else if (objc_msgSend(v48, "count"))
        {
          v52 = objc_opt_class(BKCollectionMember);
          v53 = v48;
          v54 = v52;
          v69 = v53;
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "lastObject"));
          v55 = BUDynamicCast(v54, v66);
          v51 = objc_claimAutoreleasedReturnValue(v55);

          objc_msgSend(v67, "deleteObject:", v51);
          goto LABEL_45;
        }

LABEL_47:
        v8 = &_s10Foundation12NotificationV6objectypSgvg_ptr;

        if (!v43)
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
          v57 = objc_msgSend(v56, "verboseLoggingEnabled");

          if (v57)
          {
            v58 = BKLibraryCollectionDevelopmentLog();
            v59 = objc_claimAutoreleasedReturnValue(v58);
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_0, v59, OS_LOG_TYPE_DEFAULT, "\"\\\"Attempt to remove collectionMember for a collection that does not exist any more.\\\"\"", buf, 2u);
            }

          }
        }

        v9 = &selRef_cachedFileSizeForAssetWithAssetID_;
        v35 = v71;
        v32 = v73;
      }

    }
    v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v77, v86, 16);
  }
  while (v34);
LABEL_55:

  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v64 + 48), "libraryManager"));
  objc_msgSend(v60, "updateCloudVersionFromCloudSyncVersions:inContext:", *(_QWORD *)(v64 + 40), v67);

  v61 = *(void **)(v64 + 48);
  if (*(_BYTE *)(v64 + 64))
  {
    objc_msgSend(v61, "_checkForChangesFromCloudCollectionMemberManagerInMOC:reason:", v67, CFSTR("fetchAgain"));
  }
  else
  {
    v62 = objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "getChangesQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_647E8;
    block[3] = &unk_C1400;
    block[4] = *(_QWORD *)(v64 + 48);
    dispatch_async(v62, block);

  }
  objc_msgSend(*(id *)(v64 + 48), "setupDefaultCollectionsInManagedObjectContext:", v67);

}

void sub_647E8(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  _QWORD v10[5];
  uint8_t buf[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "receivedCollectionMemberChangesNotification");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BULogUtilities shared](BULogUtilities, "shared"));
  v4 = objc_msgSend(v3, "verboseLoggingEnabled");

  if (v2)
  {
    if (v4)
    {
      v5 = BKLibraryCollectionDevelopmentLog();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionMemberChanged completed fetchAgain, processing deferred notification.\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setReceivedCollectionMemberChangesNotification:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryManager"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_64940;
    v10[3] = &unk_C1590;
    v10[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v7, "performBackgroundReadOnlyBlock:", v10);

  }
  else
  {
    if (v4)
    {
      v8 = BKLibraryCollectionDevelopmentLog();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "\"\\\"#collectionMemberChanged completed fetchAgain, NO deferred notification.\\\"\"", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setProcessingCollectionMemberChanges:", 0);
  }
}

id sub_64940(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForChangesFromCloudCollectionMemberManagerInMOC:reason:", a2, CFSTR("deferred"));
}

id sub_64954(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setProcessingCollectionMemberChanges:", 0);
}

void sub_665A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  void *v37;
  void *v38;
  id v39;
  id obj;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("asset")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v5));

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  if (v7)
  {
    v8 = v7;
    v41 = *(_QWORD *)v43;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v43 != v41)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "assetID"));

        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "assetID"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("assetID == %@ AND temporaryAssetID == NULL"), v12));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "filteredArrayUsingPredicate:", v13));

        }
        else
        {
          v14 = 0;
        }
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "temporaryAssetID"));

        if (v15)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "temporaryAssetID"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("assetID == NULL AND temporaryAssetID == %@"), v16));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "filteredArrayUsingPredicate:", v17));

        }
        else
        {
          v18 = 0;
        }
        v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "assetID"));
        if (v19
          && (v20 = (void *)v19,
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "temporaryAssetID")),
              v21,
              v20,
              v21))
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "assetID"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "temporaryAssetID"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("assetID == %@ AND temporaryAssetID == %@"), v22, v23));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "filteredArrayUsingPredicate:", v24));

        }
        else
        {
          v25 = 0;
        }
        if (objc_msgSend(v25, "count"))
        {
          objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v14);
          objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v18);
          if ((unint64_t)objc_msgSend(v25, "count") >= 2)
          {
            v26 = 1;
            do
            {
              v27 = *(void **)(a1 + 32);
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectAtIndexedSubscript:", v26));
              objc_msgSend(v27, "addObject:", v28);

              ++v26;
            }
            while (v26 < (unint64_t)objc_msgSend(v25, "count"));
          }
        }
        else if (objc_msgSend(v14, "count"))
        {
          v29 = *(void **)(a1 + 40);
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
          objc_msgSend(v29, "addObject:", v30);

          if ((unint64_t)objc_msgSend(v14, "count") >= 2)
          {
            v31 = 1;
            do
            {
              v32 = *(void **)(a1 + 32);
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", v31));
              objc_msgSend(v32, "addObject:", v33);

              ++v31;
            }
            while (v31 < (unint64_t)objc_msgSend(v14, "count"));
          }
          objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v18);
        }
        else if (objc_msgSend(v18, "count"))
        {
          v34 = *(void **)(a1 + 40);
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
          objc_msgSend(v34, "addObject:", v35);

          if ((unint64_t)objc_msgSend(v18, "count") >= 2)
          {
            v36 = 1;
            do
            {
              v37 = *(void **)(a1 + 32);
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", v36));
              objc_msgSend(v37, "addObject:", v38);

              ++v36;
            }
            while (v36 < (unint64_t)objc_msgSend(v18, "count"));
          }
        }

        v9 = (char *)v9 + 1;
      }
      while (v9 != v8);
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
      v8 = v39;
    }
    while (v39);
  }

}

void sub_66A64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  NSPredicate *v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  id v20;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("BKCollectionMember")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("asset == NULL AND (assetID != NULL OR temporaryAssetID != NULL)")));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setFetchBatchSize:", 32);
  v18 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v18));
  v7 = v18;
  if (v7)
  {
    v8 = BKLibraryCollectionLog();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_83D2C();

  }
  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "p_updateAssetInMembers:moc:", v6, v3);
    if (objc_msgSend(v3, "hasChanges"))
    {
      v10 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("self isKindOfClass: %@"), objc_opt_class(BKCollectionMember));
      v11 = objc_claimAutoreleasedReturnValue(v10);
      v12 = BKLibraryCollectionLog();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "updatedObjects"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "filteredSetUsingPredicate:", v11));
        v16 = objc_msgSend(v15, "count");
        *(_DWORD *)buf = 134217984;
        v20 = v16;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "Fixed asset link for %lu BKCollectionMembers.", buf, 0xCu);

      }
    }
    else
    {
      v17 = BKLibraryCollectionLog();
      v11 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "No BKCollectionMembers with missing asset link have existing assets.", buf, 2u);
      }
    }

  }
}

void sub_66D14(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  BOOL v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  void *v22;
  id v23;
  id v24;
  NSObject *p_super;
  _BOOL4 v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  NSMutableSet *v36;
  _QWORD v37[4];
  NSMutableSet *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  uint8_t buf[4];
  id v46;
  __int16 v47;
  id v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  _QWORD v52[2];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("BKLibraryAsset"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("contentType == %@ AND isSupplementalContent == NO AND supplementalContentParent == NULL"), &off_C9FA0));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setFetchBatchSize:", 32);
  objc_msgSend(v4, "setReturnsDistinctResults:", 1);
  v44 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v44));
  v7 = v44;
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 0;
  if (v8)
  {
    v31 = a1;
    v33 = v6;
    v36 = objc_opt_new(NSMutableSet);
    v52[0] = kBKCollectionDefaultAll;
    v52[1] = kBKCollectionDefaultIDPDFs;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v52, 2));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v11));

    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0;
    v34 = v4;
    v35 = v3;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v39));
    v32 = v39;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "collectionMembers"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "valueForKey:", CFSTR("collectionID")));
          v21 = objc_msgSend(v12, "isSubsetOfSet:", v20);

          if ((v21 & 1) == 0)
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "assetID"));
            -[NSMutableSet addObject:](v36, "addObject:", v22);

          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
      }
      while (v15);
    }

    v23 = -[NSMutableSet count](v36, "count");
    v24 = BKLibraryCollectionLog();
    p_super = objc_claimAutoreleasedReturnValue(v24);
    v26 = os_log_type_enabled(p_super, OS_LOG_TYPE_INFO);
    if (v23)
    {
      v9 = v32;
      v6 = v33;
      if (v26)
      {
        v27 = -[NSMutableSet count](v36, "count");
        v28 = objc_msgSend(v33, "count");
        v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet description](v36, "description"));
        *(_DWORD *)buf = 134218498;
        v46 = v27;
        v47 = 2048;
        v48 = v28;
        v49 = 2112;
        v50 = v29;
        _os_log_impl(&dword_0, p_super, OS_LOG_TYPE_INFO, "%lu out of %lu PDF assets don't have required BKCollectionMembers, resetting them now: %@", buf, 0x20u);

      }
      v30 = *(void **)(v31 + 32);
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_67130;
      v37[3] = &unk_C1400;
      v38 = v36;
      objc_msgSend(v30, "resetCollectionsForAssetIDs:completion:", v38, v37);
      p_super = &v38->super.super;
    }
    else
    {
      v9 = v32;
      v6 = v33;
      if (v26)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, p_super, OS_LOG_TYPE_INFO, "PDFs are in PDF Collection, same as All Collection", buf, 2u);
      }
    }
    v4 = v34;
    v3 = v35;

  }
  else
  {
    v9 = v7;
    v10 = BKLibraryCollectionLog();
    v36 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(&v36->super.super, OS_LOG_TYPE_ERROR))
      sub_83D8C(v9, &v36->super.super);
  }

}

void sub_67130(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  int v5;
  id v6;

  v2 = BKLibraryCollectionLog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    v5 = 134217984;
    v6 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Done resetting collections for %lu PDF assets", (uint8_t *)&v5, 0xCu);
  }

}

id sub_67518(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performResetCollectionsInMoc:changeSet:completion:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_675E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resetCollectionsChangeSet"));

  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  if (v2)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resetCollectionsChangeSet"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "setByAddingObjectsFromSet:", v6));
    objc_msgSend(*(id *)(a1 + 32), "setResetCollectionsChangeSet:", v5);

  }
  else
  {
    objc_msgSend(v3, "setResetCollectionsChangeSet:", *(_QWORD *)(a1 + 40));
  }
}

id sub_67910(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "changedValues"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allKeys"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v4));
  v6 = objc_msgSend(v5, "intersectsSet:", *(_QWORD *)(a1 + 32));

  return v6;
}

void sub_68F0C(uint64_t a1, char a2)
{
  id v3;
  NSObject *v4;

  if ((a2 & 1) == 0)
  {
    v3 = BKLibraryCollectionLog();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_83ED8(a1, v4);

  }
}

void sub_692D0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void type metadata accessor for BCAssetContentType(uint64_t a1)
{
  sub_6A990(a1, &qword_DD9C8, (uint64_t)&unk_C37F8);
}

void type metadata accessor for BooksDefaultsKey(uint64_t a1)
{
  sub_6A990(a1, &qword_DD9D0, (uint64_t)&unk_C3818);
}

uint64_t sub_69304(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unsigned int v9;

  if (*a1 != *a2)
    return 0;
  v3 = *((_QWORD *)a2 + 4);
  v4 = *((_QWORD *)a1 + 4);
  v6 = *((double *)a2 + 2);
  v5 = *((double *)a2 + 3);
  v8 = *((double *)a1 + 2);
  v7 = *((double *)a1 + 3);
  v9 = sub_70698(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & (v8 == v6);
  if (v7 != v5)
    v9 = 0;
  if (v4 == v3)
    return v9;
  else
    return 0;
}

uint64_t sub_6937C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  NSString v24;
  unsigned int v25;
  void (*v26)(char *, unint64_t, uint64_t);
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t updated;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  double v38;
  uint64_t v39;
  char v40;
  char v41;
  char *v42;
  double v43;
  char *v44;
  char *v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t result;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char v75;

  v3 = v2;
  v69 = a2;
  v5 = sub_6A50C(&qword_DDA60);
  v72 = *(_QWORD *)(v5 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v64 - v9;
  v11 = sub_6A50C(&qword_DDA68);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v68 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v16 = __chkstk_darwin(v15);
  v70 = (char *)&v64 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v64 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v64 - v21;
  v71 = v3;
  v65 = v5;
  v66 = v10;
  v64 = v8;
  v67 = v23;
  if (a1)
  {
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(a1, "BOOLForKey:", v24);

    v26 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    v26(v22, v3, v11);
    v27 = v3;
    if (v25)
    {
      v28 = *(void (**)(char *, uint64_t))(v12 + 8);
      v28(v22, v11);
      v29 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    v26((char *)&v64 - v21, v3, v11);
    v27 = v3;
  }
  v74 = (void *)BRCBooksDefaultsKeyPriceTrackingEnabled;
  _AnyDefaultsValue.subscript.getter(&v73, &type metadata for Bool, (char **)&v74, v11, &type metadata for Bool);
  v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28(v22, v11);
  v29 = v73 & 1;
  if (!a1)
  {
    v32 = ((uint64_t (*)(char *, unint64_t, uint64_t))v26)(v20, v27, v11);
    v30 = v70;
    goto LABEL_9;
  }
LABEL_6:
  v30 = v70;
  v31 = (char *)sub_69984();
  v32 = ((uint64_t (*)(char *, unint64_t, uint64_t))v26)(v20, v27, v11);
  if (v31)
  {
    v28(v20, v11);
    goto LABEL_13;
  }
LABEL_9:
  updated = _AnyDefaultsValue<>.priceTrackingUpdateScheduleSteps.getter(v32);
  if (updated)
    v31 = (char *)updated;
  else
    v31 = (char *)&_swiftEmptyArrayStorage;
  v28(v20, v11);
  if (!a1)
  {
    v26(v30, v27, v11);
    v34 = v72;
    goto LABEL_17;
  }
LABEL_13:
  v34 = v72;
  v35 = sub_7DC2C();
  v37 = v36;
  v26(v30, v71, v11);
  if ((v37 & 1) == 0)
  {
    v38 = *(double *)&v35;
    v28(v30, v11);
    goto LABEL_21;
  }
  v27 = v71;
LABEL_17:
  v73 = BRCBooksDefaultsKeyPriceTrackingDealAbsoluteThreshold;
  _AnyDefaultsValue.subscript.getter((char **)&v74, &type metadata for Double, &v73, v11, &type metadata for Double);
  v28(v30, v11);
  if (v75)
    v38 = 0.0;
  else
    v38 = *(double *)&v74;
  if (!a1)
  {
    v42 = v67;
    v26(v67, v27, v11);
    goto LABEL_24;
  }
LABEL_21:
  v39 = sub_7DC2C();
  v41 = v40;
  v42 = v67;
  v26(v67, v71, v11);
  if ((v41 & 1) == 0)
  {
    v43 = *(double *)&v39;
    v28(v42, v11);
    v44 = v68;
    goto LABEL_28;
  }
LABEL_24:
  v44 = v68;
  v73 = BRCBooksDefaultsKeyPriceTrackingDealRelativeThreshold;
  _AnyDefaultsValue.subscript.getter((char **)&v74, &type metadata for Double, &v73, v11, &type metadata for Double);
  v28(v42, v11);
  if (v75)
    v43 = 0.0;
  else
    v43 = *(double *)&v74;
  if (!a1)
  {
    v26(v44, v71, v11);
LABEL_32:
    v73 = BRCBooksDefaultsKeyPriceTrackingCardLimit;
    _AnyDefaultsValue.subscript.getter((char **)&v74, &type metadata for Int, &v73, v11, &type metadata for Int);
    v28(v44, v11);
    if (v75)
      v45 = 0;
    else
      v45 = (char *)v74;
    v48 = *((_QWORD *)v31 + 2);
    if (!v48)
      goto LABEL_30;
    goto LABEL_36;
  }
LABEL_28:
  v45 = (char *)sub_7E064();
  v47 = v46;
  v26(v44, v71, v11);
  if ((v47 & 1) != 0)
    goto LABEL_32;
  v28(v44, v11);
  v48 = *((_QWORD *)v31 + 2);
  if (!v48)
  {
LABEL_30:
    result = swift_bridgeObjectRelease(v31);
    v50 = &_swiftEmptyArrayStorage;
    v51 = v69;
    goto LABEL_39;
  }
LABEL_36:
  v67 = v45;
  LODWORD(v70) = v29;
  v74 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v48);
  v71 = sub_6A54C();
  v52 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v68 = v31;
  v53 = &v31[v52];
  v54 = *(_QWORD *)(v34 + 72);
  v55 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  v56 = (uint64_t)v64;
  v57 = v65;
  v58 = v66;
  do
  {
    v55(v58, v53, v57);
    v55((char *)v56, v58, v57);
    v59 = sub_69DFC(v56);
    v60 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v58, v57);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v60);
    v61 = *((_QWORD *)v74 + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v61);
    v62 = v61;
    v34 = v72;
    v63 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
    specialized ContiguousArray._endMutation()(v63);
    v53 += v54;
    --v48;
  }
  while (v48);
  v50 = v74;
  result = swift_bridgeObjectRelease(v68);
  v51 = v69;
  LOBYTE(v29) = (_BYTE)v70;
  v45 = v67;
LABEL_39:
  *(_BYTE *)v51 = v29;
  *(_QWORD *)(v51 + 8) = v50;
  *(double *)(v51 + 16) = v38;
  *(double *)(v51 + 24) = v43;
  *(_QWORD *)(v51 + 32) = v45;
  return result;
}

_QWORD *sub_69984()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  id v46[4];

  v1 = sub_6A50C(&qword_DDA60);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v0, "stringForKey:", v9);

  if (!v10)
    return v10;
  v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v46[0] = v11;
  v46[1] = v13;
  v14 = sub_6A588();
  if ((Collection.isNotEmpty.getter(&type metadata for String, v14) & 1) == 0)
  {
    swift_bridgeObjectRelease(v13);
    return 0;
  }
  static String.Encoding.utf8.getter();
  v15 = String.data(using:allowLossyConversion:)(v8, 0, v11, v13);
  v17 = v16;
  swift_bridgeObjectRelease(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v17 >> 60 == 15)
  {
LABEL_15:
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_6A5CC(v36, (uint64_t)qword_DEF98);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_0, v38, v39, "Invalid 'update schedule steps' override value in user defaults", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    return 0;
  }
  v18 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v46[0] = 0;
  v20 = objc_msgSend(v18, "JSONObjectWithData:options:error:", isa, 0, v46);

  v21 = v46[0];
  if (!v20)
  {
    v34 = v46[0];
    v35 = _convertNSErrorToError(_:)(v21);

    swift_willThrow();
    sub_6A5E4(v15, v17);
    swift_errorRelease(v35);
    goto LABEL_15;
  }
  v22 = v46[0];
  _bridgeAnyObjectToAny(_:)(v46, v20);
  swift_unknownObjectRelease(v20);
  v23 = sub_6A50C(&qword_DDA80);
  if ((swift_dynamicCast(&v45, v46, (char *)&type metadata for Any + 8, v23, 6) & 1) == 0)
  {
    sub_6A5E4(v15, v17);
    goto LABEL_15;
  }
  v24 = v45;
  v25 = *(_QWORD *)(v45 + 16);
  if (v25)
  {
    v42 = v15;
    v43 = v17;
    v46[0] = &_swiftEmptyArrayStorage;
    v44 = v25;
    sub_79804(0, v25, 0);
    v10 = v46[0];
    type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey(0);
    v27 = v26;
    v28 = sub_6A1D4(&qword_DDA88, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey, (uint64_t)&unk_9616C);
    v29 = 0;
    do
    {
      v30 = v24;
      v31 = swift_bridgeObjectRetain(*(_QWORD *)(v24 + 8 * v29 + 32));
      _AnyDefaultsValue.init(_:)(v31, v27, v28);
      v46[0] = v10;
      v33 = v10[2];
      v32 = v10[3];
      if (v33 >= v32 >> 1)
      {
        sub_79804(v32 > 1, v33 + 1, 1);
        v10 = v46[0];
      }
      ++v29;
      v10[2] = v33 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v33, v4, v1);
      v24 = v30;
    }
    while (v44 != v29);
    sub_6A5E4(v42, v43);
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    sub_6A5E4(v15, v17);
    swift_bridgeObjectRelease(v24);
    return &_swiftEmptyArrayStorage;
  }
  return v10;
}

id sub_69DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v2 = v1;
  v11 = BRCBooksDefaultsPriceTrackingUpdateScheduleStepsKeyDuration;
  v4 = sub_6A50C(&qword_DDA60);
  _AnyDefaultsValue.subscript.getter(&v12, &type metadata for Int, &v11, v4, &type metadata for Int);
  if (v13)
    v5 = 0;
  else
    v5 = v12;
  v11 = BRCBooksDefaultsPriceTrackingUpdateScheduleStepsKeyMinUpdateInterval;
  _AnyDefaultsValue.subscript.getter(&v12, &type metadata for Int, &v11, v4, &type metadata for Int);
  if (v13)
    v6 = 0;
  else
    v6 = v12;
  v11 = BRCBooksDefaultsPriceTrackingUpdateScheduleStepsKeySchedulerConfigIdealInterval;
  _AnyDefaultsValue.subscript.getter(&v12, &type metadata for Int, &v11, v4, &type metadata for Int);
  if (v13)
    v7 = 0;
  else
    v7 = v12;
  v11 = BRCBooksDefaultsPriceTrackingUpdateScheduleStepsKeySchedulerConfigMinInterval;
  _AnyDefaultsValue.subscript.getter(&v12, &type metadata for Int, &v11, v4, &type metadata for Int);
  if (v13)
    v8 = 0;
  else
    v8 = v12;
  v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "initWithDuration:minUpdateInterval:schedulerConfigIdealInterval:schedulerConfigMinInterval:", v5, v6, v7, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return v9;
}

uint64_t sub_69F7C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_69FA4(uint64_t a1, uint64_t a2)
{
  return sub_6A36C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_69FC4(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_6A038(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_6A0B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_6A0F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_6A1D4(&qword_DD9F0, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsKey, (uint64_t)&unk_95D9C);
  v3 = sub_6A1D4(&qword_DD9F8, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsKey, (uint64_t)&unk_95D3C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_6A17C()
{
  return sub_6A1D4(&qword_DD9D8, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsKey, (uint64_t)&unk_95D00);
}

uint64_t sub_6A1A8()
{
  return sub_6A1D4(&qword_DD9E0, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsKey, (uint64_t)&unk_95CD4);
}

uint64_t sub_6A1D4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_6A214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_6A1D4(&qword_DDB48, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey, (uint64_t)&unk_960DC);
  v3 = sub_6A1D4(&qword_DDB50, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey, (uint64_t)&unk_9607C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_6A298@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_6A2DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_6A1D4((unint64_t *)&qword_DDB58, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_961A8);
  v3 = sub_6A1D4(&qword_DDB60, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_95F7C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_6A360(uint64_t a1, uint64_t a2)
{
  return sub_6A36C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_6A36C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_6A3A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_6A3E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_6A458()
{
  return sub_6A1D4(&qword_DD9E8, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsKey, (uint64_t)&unk_95D70);
}

uint64_t sub_6A484(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_6A50C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_6A54C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_DDA70;
  if (!qword_DDA70)
  {
    v1 = objc_opt_self(BDSDistributedPriceTrackingConfigUpdateScheduleStep);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_DDA70);
  }
  return result;
}

unint64_t sub_6A588()
{
  unint64_t result;

  result = qword_DDA78;
  if (!qword_DDA78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_DDA78);
  }
  return result;
}

uint64_t sub_6A5CC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_6A5E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_6A5F8(a1, a2);
  return a1;
}

uint64_t sub_6A5F8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_release)();
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey(uint64_t a1)
{
  sub_6A990(a1, qword_DDA90, (uint64_t)&unk_C3840);
}

uint64_t sub_6A650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t initializeBufferWithCopyOfBuffer for AssetSnapshot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_6A688(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t sub_6A690(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_6A6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 sub_6A738(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_6A74C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t sub_6A798(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_6A7E0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s13PriceTrackingVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_6A950(a1, a2, a3, a4, (uint64_t)&_s13PriceTrackingVMn);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_6A990(a1, &qword_DDB18, (uint64_t)&unk_C38C0);
}

uint64_t sub_6A848()
{
  return sub_6A1D4(&qword_DDB20, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_95F40);
}

uint64_t sub_6A874()
{
  return sub_6A1D4(&qword_DDB28, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_95F14);
}

uint64_t sub_6A8A0()
{
  return sub_6A1D4(&qword_DDA88, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey, (uint64_t)&unk_9616C);
}

uint64_t sub_6A8CC()
{
  return sub_6A1D4(&qword_DDB30, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey, (uint64_t)&unk_96050);
}

uint64_t sub_6A8F8()
{
  return sub_6A1D4(&qword_DDB38, (uint64_t (*)(uint64_t))type metadata accessor for BooksDefaultsPriceTrackingUpdateScheduleStepsKey, (uint64_t)&unk_960B0);
}

uint64_t sub_6A924()
{
  return sub_6A1D4(&qword_DDB40, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_95FB0);
}

uint64_t sub_6A950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void type metadata accessor for BKAssetContentType(uint64_t a1)
{
  sub_6A990(a1, &qword_DDB68, (uint64_t)&unk_C38E8);
}

void sub_6A990(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

_QWORD *sub_6A9DC(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  char *v62;
  id v63;
  uint64_t v64;
  id v65;
  objc_super v66;

  v11 = v10;
  v64 = a2;
  v65 = a1;
  v56 = a9;
  v20 = sub_6A50C(&qword_DDC08);
  __chkstk_darwin(v20);
  v62 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v11);
  *(_QWORD *)(v11 + 120) = 0;
  v22 = swift_unknownObjectWeakInit(v11 + 112, 0);
  *(_BYTE *)(v11 + 208) = 1;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_QWORD *)(v11 + 120) = &off_C3DE0;
  swift_unknownObjectWeakAssign(v22, a1);
  *(_QWORD *)(v11 + 128) = a2;
  *(_QWORD *)(v11 + 136) = a3;
  *(_QWORD *)(v11 + 144) = a4;
  *(_QWORD *)(v11 + 152) = a5;
  *(_QWORD *)(v11 + 160) = &protocol witness table for BCDefaultCloudGlobalMetadataManager;
  *(_QWORD *)(v11 + 168) = a6;
  *(_QWORD *)(v11 + 176) = &protocol witness table for RCDataContainer;
  *(_QWORD *)(v11 + 184) = a7;
  *(_QWORD *)(v11 + 192) = a8;
  *(_QWORD *)(v11 + 200) = a10;
  v58 = a8;
  v23 = (objc_class *)type metadata accessor for PriceTracker();
  v66.receiver = (id)v11;
  v66.super_class = v23;
  swift_unknownObjectRetain(a2, v24);
  v63 = a3;
  v61 = a4;
  swift_retain(a5);
  v60 = a6;
  v59 = a7;
  swift_unknownObjectRetain(a8, v25);
  v57 = a10;
  v26 = objc_msgSendSuper2(&v66, "init");
  v27 = swift_allocObject(&unk_C3A58, 24, 7);
  swift_weakInit(v27 + 16, v26);
  sub_71884(0, &qword_DDCE0, BUCoalescingCallBlock_ptr);
  v28 = (_QWORD *)swift_allocObject(&unk_C3A80, 56, 7);
  v28[2] = 0xD00000000000002FLL;
  v28[3] = 0x80000000000A50D0;
  v29 = v56;
  v28[4] = v56;
  v28[5] = &unk_DDCD8;
  v28[6] = v27;
  v30 = v29;
  v31 = v26;
  v32 = sub_7F6C0((uint64_t)sub_718C0, (uint64_t)v28, 20.0, 10.0, 0xD00000000000002FLL, 0x80000000000A50D0, (uint64_t (*)())sub_6AF70, 0);
  v33 = (void *)v31[27];
  v31[27] = v32;

  v34 = swift_allocObject(&unk_C3A58, 24, 7);
  swift_weakInit(v34 + 16, v31);
  v35 = (_QWORD *)swift_allocObject(&unk_C3AA8, 56, 7);
  v35[2] = 0xD000000000000027;
  v35[3] = 0x80000000000A5100;
  v35[4] = v30;
  v35[5] = &unk_DDCF0;
  v35[6] = v34;
  v56 = v30;
  v36 = (void *)sub_7F6C0((uint64_t)sub_718C0, (uint64_t)v35, 5.0, 0.25, 0xD000000000000027, 0x80000000000A5100, (uint64_t (*)())sub_6B0FC, 0);
  v55 = v36;
  v37 = swift_allocObject(&unk_C3A58, 24, 7);
  swift_weakInit(v37 + 16, v31);
  v38 = swift_allocObject(&unk_C3AD0, 24, 7);
  *(_QWORD *)(v38 + 16) = v36;
  v39 = type metadata accessor for TaskPriority(0);
  v40 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v62, 1, 1, v39);
  v41 = (_QWORD *)swift_allocObject(&unk_C3AF8, 112, 7);
  v41[2] = 0;
  v41[3] = 0;
  v43 = v60;
  v42 = v61;
  v41[4] = v61;
  v41[5] = &unk_DDD10;
  v41[6] = v38;
  v41[7] = a5;
  v54 = a5;
  v41[8] = &unk_DDD00;
  v41[9] = v37;
  v45 = v58;
  v44 = v59;
  v41[10] = v43;
  v41[11] = v44;
  v46 = v57;
  v41[12] = v45;
  v41[13] = v46;
  v61 = v42;
  swift_retain(a5);
  v60 = v43;
  v47 = v44;
  swift_unknownObjectRetain(v45, v48);
  v49 = v46;
  swift_retain_n(v37, 2);
  v50 = v55;
  swift_retain(v38);
  v51 = sub_6DC84(v40, (uint64_t)&unk_DDD20, (uint64_t)v41);
  sub_7030C(v40);

  swift_unknownObjectRelease(v64);
  swift_release(v54);

  swift_unknownObjectRelease(v45);
  swift_release_n(v37, 2);
  swift_release(v38);

  v52 = v31[28];
  v31[28] = v51;
  swift_release(v52);
  return v31;
}

uint64_t sub_6AE5C(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a2;
  *(_BYTE *)(v2 + 64) = a1;
  return swift_task_switch(sub_6AE78, 0, 0);
}

uint64_t sub_6AE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = Strong;
  v4 = swift_task_alloc(dword_DDC6C);
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)v4 = v0;
  *(_QWORD *)(v4 + 8) = sub_6AF20;
  v5 = *(_BYTE *)(v0 + 64);
  *(_QWORD *)(v4 + 128) = v3;
  *(_BYTE *)(v4 + 184) = v5;
  return swift_task_switch(sub_6E578, v3, 0);
}

uint64_t sub_6AF20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v0;
  v2 = *(_QWORD *)(v5 + 48);
  v1 = *(_QWORD *)(v5 + 56);
  v3 = *v0;
  v5 = v3;
  swift_task_dealloc(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_6AF70(uint64_t a1, uint64_t a2)
{
  sub_6B108(a1, a2, "[PriceTracker] Timed out while updating configuration");
}

uint64_t sub_6AF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_6AF94, 0, 0);
}

uint64_t sub_6AF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
    return swift_task_switch(sub_6B008, Strong, 0);
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6B008()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(int **)(v1 + 232);
  *(_QWORD *)(v0 + 56) = v2;
  v3 = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v0 + 64) = v3;
  sub_74968((uint64_t)v2, v3);
  swift_release(v1);
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = sub_6B0A4;
  return v6();
}

uint64_t sub_6B0A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 64);
  v2 = *(_QWORD *)(*v0 + 56);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  sub_6DEEC(v2, v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_6B0FC(uint64_t a1, uint64_t a2)
{
  sub_6B108(a1, a2, "[PriceTracker] Timed out while firing state change");
}

void sub_6B108(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_6A5CC(v4, (uint64_t)qword_DEF98);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_0, oslog, v6, a3, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_6B1DC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_6B1F4, 0, 0);
}

uint64_t sub_6B1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
    return swift_task_switch(sub_6B268, Strong, 0);
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6B268()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  objc_msgSend(*(id *)(v1 + 216), "signal");
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6B2AC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_6B2C4, 0, 0);
}

uint64_t sub_6B2C4()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "signal");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6B2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 4608) = v12;
  *(_OWORD *)(v8 + 4592) = v11;
  *(_OWORD *)(v8 + 4576) = v10;
  *(_QWORD *)(v8 + 4568) = a8;
  *(_QWORD *)(v8 + 4560) = a7;
  *(_QWORD *)(v8 + 4552) = a6;
  *(_QWORD *)(v8 + 4544) = a5;
  *(_QWORD *)(v8 + 4536) = a4;
  return swift_task_switch(sub_6B33C, 0, 0);
}

uint64_t sub_6B33C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = v0[575];
  v19 = v0[576];
  v1 = v0[574];
  v17 = v0[573];
  v2 = v0[572];
  v3 = v0[571];
  v4 = v0[570];
  v5 = v0[569];
  v6 = v0[568];
  v7 = v0[567];
  v8 = (_QWORD *)swift_task_alloc(48);
  v0[577] = v8;
  v8[2] = v7;
  v8[3] = v6;
  v8[4] = v5;
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_DDD38, v8);
  v9 = (_QWORD *)swift_task_alloc(64);
  v0[578] = v9;
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v9[5] = v6;
  v9[6] = v5;
  swift_asyncLet_begin(v0 + 82, 0, (char *)&type metadata for () + 8, &unk_DDD48, v9);
  v10 = (_QWORD *)swift_task_alloc(64);
  v0[579] = v10;
  v10[2] = v17;
  v10[3] = v3;
  v10[4] = v2;
  v10[5] = v6;
  v10[6] = v5;
  swift_asyncLet_begin(v0 + 162, 0, (char *)&type metadata for () + 8, &unk_DDD58, v10);
  v11 = (_QWORD *)swift_task_alloc(64);
  v0[580] = v11;
  v11[2] = v1;
  v11[3] = v3;
  v11[4] = v2;
  v11[5] = v6;
  v11[6] = v5;
  swift_asyncLet_begin(v0 + 242, 0, (char *)&type metadata for () + 8, &unk_DDD68, v11);
  v12 = (_QWORD *)swift_task_alloc(64);
  v0[581] = v12;
  v12[2] = v1;
  v12[3] = v3;
  v12[4] = v2;
  v12[5] = v6;
  v12[6] = v5;
  swift_asyncLet_begin(v0 + 322, 0, (char *)&type metadata for () + 8, &unk_DDD78, v12);
  v13 = (_QWORD *)swift_task_alloc(64);
  v0[582] = v13;
  v13[2] = v18;
  v13[3] = v3;
  v13[4] = v2;
  v13[5] = v6;
  v13[6] = v5;
  swift_asyncLet_begin(v0 + 402, 0, (char *)&type metadata for () + 8, &unk_DDD88, v13);
  v14 = (_QWORD *)swift_task_alloc(64);
  v0[583] = v14;
  v14[2] = v19;
  v14[3] = v3;
  v14[4] = v2;
  v14[5] = v6;
  v14[6] = v5;
  swift_asyncLet_begin(v0 + 482, 0, (char *)&type metadata for () + 8, &unk_DDD98, v14);
  return swift_asyncLet_get(v0 + 2, v15, sub_6B570, v0 + 562);
}

uint64_t sub_6B570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 656, a2, sub_6B588, v2 + 4496);
}

uint64_t sub_6B588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 1296, a2, sub_6B5A0, v2 + 4496);
}

uint64_t sub_6B5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 1936, a2, sub_6B5B8, v2 + 4496);
}

uint64_t sub_6B5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 2576, a2, sub_6B5D0, v2 + 4496);
}

uint64_t sub_6B5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 3216, a2, sub_6B5E8, v2 + 4496);
}

uint64_t sub_6B5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 3856, a2, sub_6B600, v2 + 4496);
}

uint64_t sub_6B600()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 3856);
}

uint64_t sub_6B618()
{
  return swift_task_switch(sub_6B62C, 0, 0);
}

uint64_t sub_6B62C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 4664));
  return swift_asyncLet_finish(v0 + 3216);
}

uint64_t sub_6B670()
{
  return swift_task_switch(sub_6B684, 0, 0);
}

uint64_t sub_6B684()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 4656));
  return swift_asyncLet_finish(v0 + 2576);
}

uint64_t sub_6B6C8()
{
  return swift_task_switch(sub_6B6DC, 0, 0);
}

uint64_t sub_6B6DC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 4648));
  return swift_asyncLet_finish(v0 + 1936);
}

uint64_t sub_6B720()
{
  return swift_task_switch(sub_6B734, 0, 0);
}

uint64_t sub_6B734()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 4640));
  return swift_asyncLet_finish(v0 + 1296);
}

uint64_t sub_6B778()
{
  return swift_task_switch(sub_6B78C, 0, 0);
}

uint64_t sub_6B78C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 4632));
  return swift_asyncLet_finish(v0 + 656);
}

uint64_t sub_6B7D0()
{
  return swift_task_switch(sub_6B7E4, 0, 0);
}

uint64_t sub_6B7E4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 4624));
  return swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_6B828()
{
  return swift_task_switch(sub_6B83C, 0, 0);
}

uint64_t sub_6B83C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 4616));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6B86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  v5 = sub_6A50C(&qword_DDF78);
  v4[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[6] = v6;
  v4[7] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6B8D4, 0, 0);
}

uint64_t sub_6B8D4()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = objc_msgSend(*(id *)(v0 + 16), "stringForKey:", BDSPriceTrackerCardList);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  *(_QWORD *)(v0 + 64) = v5;
  v6 = *(_QWORD *)(v0 + 32);
  sub_7D358(*(_QWORD *)(v0 + 56));
  v7 = dword_DDF84;
  swift_retain(v6);
  v8 = (_QWORD *)swift_task_alloc(v7);
  *(_QWORD *)(v0 + 72) = v8;
  *v8 = v0;
  v8[1] = sub_6B998;
  return sub_720A4(v3, v5, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_6B998()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 48);
  v2 = *(_QWORD *)(*v0 + 56);
  v5 = *(_QWORD *)(*v0 + 32);
  v4 = *(_QWORD *)(*v0 + 40);
  v7 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_6BA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (__cdecl *v12)();

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  v7 = sub_6A50C(&qword_DDDA0);
  v6[7] = v7;
  v6[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_6A50C(&qword_DDF28);
  v6[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[10] = v9;
  v6[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t (__cdecl *)())((char *)&dword_DDF30 + dword_DDF30);
  v10 = (_QWORD *)swift_task_alloc(unk_DDF34);
  v6[12] = v10;
  *v10 = v6;
  v10[1] = sub_6BAE0;
  return v12();
}

uint64_t sub_6BAE0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_BYTE *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6BB3C, 0, 0);
}

uint64_t sub_6BB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = type metadata accessor for BCDefaultCloudGlobalMetadataManager(0);
  dispatch thunk of BCCloudGlobalMetadataManaging.changeSignals.getter(v6, &protocol witness table for BCDefaultCloudGlobalMetadataManager);
  v7 = swift_allocObject(&unk_C3C28, 24, 7);
  swift_weakInit(v7 + 16, v5);
  v8 = swift_allocObject(&unk_C3C50, 32, 7);
  *(_QWORD *)(v8 + 16) = &unk_DDF40;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = sub_74914(&qword_DDDE8, &qword_DDDA0, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  AsyncMapSequence.init(_:transform:)(v2, &unk_DDF50, v8, v1, &type metadata for Bool, v9);
  v10 = dword_DDF5C;
  swift_retain(v4);
  swift_retain(v3);
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 104) = v11;
  *v11 = v0;
  v11[1] = sub_6BC78;
  return sub_726AC(*(_BYTE *)(v0 + 112), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_6BC78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(*v0 + 80);
  v1 = *(_QWORD *)(*v0 + 88);
  v4 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 72);
  v5 = *(_QWORD *)(*v0 + 48);
  v6 = *(_QWORD *)(*v0 + 32);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  swift_release(v5);
  swift_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_6BD14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of BCCloudGlobalMetadataManaging.fetchBool(forKey:)[1]);
  *(_QWORD *)(v1 + 24) = v3;
  *v3 = v1;
  v3[1] = sub_6BD84;
  return dispatch thunk of BCCloudGlobalMetadataManaging.fetchBool(forKey:)(0xD000000000000023, 0x80000000000A5160, v2, &protocol witness table for BCDefaultCloudGlobalMetadataManager);
}

uint64_t sub_6BD84(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 24);
  v5 = *v2;
  *(_QWORD *)(v5 + 32) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_6BDF8, 0, 0);
  else
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(a1 & 1);
}

uint64_t sub_6BDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_6A5CC(v2, (uint64_t)qword_DEF98);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "[Metadata] Failed to get notificationsEnabled: %@", v8, 0xCu);
    v11 = sub_6A50C(&qword_DDCB8);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 32));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_6BFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  v7 = sub_6A50C(&qword_DDEE0);
  v6[14] = v7;
  v6[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_6A50C(&qword_DDEE8);
  v6[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[17] = v9;
  v6[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_6A50C(&qword_DDA68);
  v6[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[20] = v11;
  v6[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6C088, 0, 0);
}

uint64_t sub_6C088()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0[20];
  v2 = v0[21];
  v3 = v0[19];
  v4 = v0[15];
  v15 = v0[14];
  v16 = v0[11];
  v17 = v0[13];
  v5 = type metadata accessor for RCDataContainer(0);
  RCDataContaining.booksDefaultsValue.getter(v5, &protocol witness table for RCDataContainer);
  sub_6937C(0, (uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  RCDataContaining.booksDefaultsValues()(v5, &protocol witness table for RCDataContainer);
  sub_73FC8(0, v6, v7, v8);
  v10 = v9;
  v0[7] = v5;
  v0[8] = &protocol witness table for RCDataContainer;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 7, &opaque type descriptor for <<opaque return type of RCDataContaining.booksDefaultsValues()>>, 1);
  AsyncMapSequence.init(_:transform:)(v4, &unk_DDEF0, 0, v15, v10, OpaqueTypeConformance2);
  v12 = dword_DDF04;
  swift_retain(v16);
  swift_retain(v17);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[22] = v13;
  *v13 = v0;
  v13[1] = sub_6C1D4;
  return sub_74014((uint64_t)(v0 + 2), v0[18], v0[10], v0[11], v0[12], v0[13]);
}

uint64_t sub_6C1D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *v0 + 16;
  v2 = *(_QWORD *)(*v0 + 168);
  v4 = *(_QWORD *)(*v0 + 136);
  v3 = *(_QWORD *)(*v0 + 144);
  v6 = *(_QWORD *)(*v0 + 120);
  v5 = *(_QWORD *)(*v0 + 128);
  v7 = *(_QWORD *)(*v0 + 104);
  v8 = *(_QWORD *)(*v0 + 88);
  v10 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  swift_release(v7);
  swift_release(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_6E0D0(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_6C28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_task_switch(sub_6C2A4, 0, 0);
}

uint64_t sub_6C2A4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 56);
  sub_6937C(0, v0 + 16);
  v2 = *(_OWORD *)(v0 + 16);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v0 + 48);
  *(_OWORD *)v1 = v2;
  *(_OWORD *)(v1 + 16) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6C2EC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 84) = *a1;
  *(_BYTE *)(v6 + 85) = *(_BYTE *)a2;
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a2 + 8);
  return swift_task_switch(sub_6C320, 0, 0);
}

uint64_t sub_6C320()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_6A5CC(v1, (uint64_t)qword_DEF98);
  v0[7] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = (int *)v0[2];

  v9 = (uint64_t (*)(void))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[8] = v7;
  *v7 = v0;
  v7[1] = sub_6C430;
  return v9();
}

uint64_t sub_6C430()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_6C484, 0, 0);
}

uint64_t sub_6C484()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  uint8_t *v7;
  int *v9;
  _QWORD *v10;
  uint64_t (*v11)(void);

  if (*(unsigned __int8 *)(v0 + 85) == *(unsigned __int8 *)(v0 + 84))
    return (*(uint64_t (**)(void))(v0 + 8))();
  v1 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 48);
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v0 + 85);
    v7 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67109120;
    *(_DWORD *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 84, v7 + 4, v7 + 8);
    swift_bridgeObjectRelease(v5);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  }

  v9 = *(int **)(v0 + 32);
  v11 = (uint64_t (*)(void))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v0 + 72) = v10;
  *v10 = v0;
  v10[1] = sub_6C5E8;
  return v11();
}

uint64_t sub_6C5E8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_6C630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  v7 = sub_6A50C(&qword_DDE50);
  v6[7] = v7;
  v6[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_6A50C(&qword_DDE58);
  v6[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[10] = v9;
  v6[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6C6C4, 0, 0);
}

uint64_t sub_6C6C4()
{
  uint64_t v0;
  id v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = objc_msgSend(*(id *)(v0 + 16), "activeStoreAccount");
  v2 = v1;
  if (v1)

  v3 = v2 != 0;
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  sub_6C86C(v4);
  v8 = sub_74914(&qword_DDE78, &qword_DDE50, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  AsyncMapSequence.init(_:transform:)(v4, &unk_DDEC0, 0, v5, &type metadata for Bool, v8);
  v9 = dword_DDECC;
  swift_retain(v7);
  swift_retain(v6);
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 96) = v10;
  *v10 = v0;
  v10[1] = sub_6C7D0;
  return sub_72BA8(v3, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_6C7D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(*v0 + 88);
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 80);
  v4 = *(_QWORD *)(*v0 + 64);
  v5 = *(_QWORD *)(*v0 + 48);
  v6 = *(_QWORD *)(*v0 + 32);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  swift_release(v5);
  swift_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_6C86C@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  objc_class *v16;
  char *v17;
  uint64_t v18;
  id v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  id v22;
  objc_super v24;

  v3 = sub_6A50C(&qword_DDEA8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_6A50C((uint64_t *)&unk_DDEB0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  v14 = sub_6A50C((uint64_t *)&unk_DE270);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  static AsyncStream.makeStream(of:bufferingPolicy:)(a1, v13, v14, v6, v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v15(v11, v13, v7);
  v16 = (objc_class *)type metadata accessor for AccountsObserver(0);
  v17 = (char *)objc_allocWithZone(v16);
  v18 = swift_unknownObjectWeakInit(&v17[OBJC_IVAR____TtC9BKLibraryP33_05F439DD99DBF9E3F4595B1087281DC916AccountsObserver_provider], 0);
  swift_unknownObjectWeakAssign(v18, v1);
  v15(&v17[OBJC_IVAR____TtC9BKLibraryP33_05F439DD99DBF9E3F4595B1087281DC916AccountsObserver_continuation], v11, v7);
  v24.receiver = v17;
  v24.super_class = v16;
  v19 = objc_msgSendSuper2(&v24, "init");
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  objc_msgSend(v1, "addObserver:accountTypes:", v19, 1);
  v21 = swift_allocObject(&unk_C3C00, 32, 7);
  *(_QWORD *)(v21 + 16) = v1;
  *(_QWORD *)(v21 + 24) = v19;
  v22 = v1;
  AsyncStream.Continuation.onTermination.setter(sub_73FB4, v21, v7);
  return ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
}

uint64_t sub_6CA78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_6CA94, 0, 0);
}

uint64_t sub_6CA94()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 24) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6CAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  v7 = sub_6A50C(&qword_DDE50);
  v6[7] = v7;
  v6[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_6A50C(&qword_DDE58);
  v6[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[10] = v9;
  v6[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_6A50C(&qword_DDE60);
  v6[12] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[13] = v11;
  v6[14] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6CB6C, 0, 0);
}

uint64_t sub_6CB6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v1 = v0[10];
  v2 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[7];
  v14 = v0[4];
  v15 = v0[6];
  v6 = (void *)v0[2];
  v16 = objc_msgSend(v6, "isStoreAccountManagedAppleID");
  sub_6C86C(v4);
  v7 = swift_allocObject(&unk_C3BD8, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  v8 = sub_74914(&qword_DDE78, &qword_DDE50, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  v9 = v6;
  AsyncMapSequence.init(_:transform:)(v4, &unk_DDE70, v7, v5, &type metadata for Bool, v8);
  v10 = sub_74914(&qword_DDE80, &qword_DDE58, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  AsyncSequence<>.removeDuplicates()(v3, v10, &protocol witness table for Bool);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  v11 = dword_DDE8C;
  swift_retain(v14);
  swift_retain(v15);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[15] = v12;
  *v12 = v0;
  v12[1] = sub_6CCDC;
  return sub_730A4(v16, v0[14], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_6CCDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(*v0 + 112);
  v2 = *(_QWORD *)(*v0 + 96);
  v3 = *(_QWORD *)(*v0 + 104);
  v4 = *(_QWORD *)(*v0 + 88);
  v5 = *(_QWORD *)(*v0 + 64);
  v6 = *(_QWORD *)(*v0 + 48);
  v7 = *(_QWORD *)(*v0 + 32);
  v9 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_release(v6);
  swift_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_6CD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  v7 = sub_6A50C(&qword_DDE18);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6CDF8, 0, 0);
}

uint64_t sub_6CDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = objc_msgSend(*(id *)(v0 + 16), "isBookStoreAllowed");
  sub_6CF30(v1);
  v5 = dword_DDE24;
  swift_retain(v3);
  swift_retain(v2);
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 80) = v6;
  *v6 = v0;
  v6[1] = sub_6CEA0;
  return sub_735A0(v4, *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_6CEA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*v0 + 72);
  v2 = *(_QWORD *)(*v0 + 56);
  v3 = *(_QWORD *)(*v0 + 64);
  v4 = *(_QWORD *)(*v0 + 48);
  v5 = *(_QWORD *)(*v0 + 32);
  v7 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v4);
  swift_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_6CF30@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  objc_class *v15;
  char *v16;
  id v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  objc_super v22;

  v3 = sub_6A50C((uint64_t *)&unk_DDE40);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_6A50C((uint64_t *)&unk_DE430);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  static AsyncStream.makeStream(of:bufferingPolicy:)(a1, v13, &type metadata for Bool, v6, &type metadata for Bool);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v11, v13, v7);
  v15 = (objc_class *)type metadata accessor for RestrictionsObserver(0);
  v16 = (char *)objc_allocWithZone(v15);
  v14(&v16[OBJC_IVAR____TtC9BKLibraryP33_58FC24B0C0DE226ACFC9DF3CB0D6712B20RestrictionsObserver_continuation], v11, v7);
  v22.receiver = v16;
  v22.super_class = v15;
  v17 = objc_msgSendSuper2(&v22, "init");
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, v7);
  objc_msgSend(v1, "addObserver:", v17);
  v19 = swift_allocObject(&unk_C3BB0, 32, 7);
  *(_QWORD *)(v19 + 16) = v1;
  *(_QWORD *)(v19 + 24) = v17;
  swift_unknownObjectRetain(v1, v20);
  AsyncStream.Continuation.onTermination.setter(sub_73EE0, v19, v7);
  return ((uint64_t (*)(char *, uint64_t))v18)(v13, v7);
}

uint64_t sub_6D114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[3] = a2;
  v8 = sub_6A50C(&qword_DDDA0);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_6A50C(&qword_DDDA8);
  v6[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_DDDB4);
  v6[13] = v11;
  *v11 = v6;
  v11[1] = sub_6D1D4;
  v11[17] = a2;
  return swift_task_switch(sub_6D4C4, 0, 0);
}

uint64_t sub_6D1D4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_BYTE *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6D230, 0, 0);
}

uint64_t sub_6D230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(void **)(v0 + 24);
  v6 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v7 = AMSBagChangedNotification;
  v8 = objc_msgSend(v5, "backingBag");
  v9 = NSNotificationCenter.notifications(named:object:)(v7, v8);
  swift_unknownObjectRelease(v8);

  *(_QWORD *)(v0 + 16) = v9;
  v10 = type metadata accessor for NSNotificationCenter.Notifications(0);
  v11 = sub_71EFC();
  AsyncMapSequence.init(_:transform:)(v0 + 16, &unk_DE2B8, 0, v10, (char *)&type metadata for () + 8, v11);
  v12 = swift_allocObject(&unk_C3B48, 24, 7);
  *(_QWORD *)(v12 + 16) = v5;
  v13 = swift_allocObject(&unk_C3B70, 32, 7);
  *(_QWORD *)(v13 + 16) = &unk_DDDC8;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = v5;
  v15 = sub_6A50C(&qword_DDDE0);
  v16 = sub_74914(&qword_DDDE8, &qword_DDDA0, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  AsyncMapSequence.init(_:transform:)(v2, &unk_DDDD8, v13, v1, v15, v16);
  v17 = dword_DDDF4;
  swift_retain(v4);
  swift_retain(v3);
  v18 = (_QWORD *)swift_task_alloc(v17);
  *(_QWORD *)(v0 + 112) = v18;
  *v18 = v0;
  v18[1] = sub_6D410;
  return sub_73A9C(*(_BYTE *)(v0 + 120), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_6D410()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(*v0 + 88);
  v1 = *(_QWORD *)(*v0 + 96);
  v4 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 80);
  v5 = *(_QWORD *)(*v0 + 56);
  v6 = *(_QWORD *)(*v0 + 40);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_release(v5);
  swift_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_6D4AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch(sub_6D4C4, 0, 0);
}

uint64_t sub_6D4C4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 16;
  v2 = objc_msgSend(*(id *)(v0 + 136), "isBooksStoreEnabled");
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_6D57C;
  v3 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v4 = (_QWORD *)(v0 + 80);
  v4[1] = 0x40000000;
  v4[2] = sub_70374;
  v4[3] = &unk_C3B88;
  v4[4] = v3;
  objc_msgSend(v2, "valueWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_6D57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_6D634;
  else
    v2 = sub_6D5DC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_6D5DC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(v0 + 144);
  v2 = *(void **)(v0 + 120);
  v3 = objc_msgSend(v2, "BOOLValue");

  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_6D634()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = type metadata accessor for Logger(0);
  sub_6A5CC(v3, (uint64_t)qword_DEF98);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 152);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 80) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    v12 = sub_6A50C(&qword_DDCB8);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 152));
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
}

uint64_t sub_6D810(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_DDDB4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_74A70;
  v3[17] = a1;
  return swift_task_switch(sub_6D4C4, 0, 0);
}

uint64_t sub_6D870(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = v3;
  v4[1] = sub_6D8C8;
  return v6();
}

uint64_t sub_6D8C8(char a1)
{
  uint64_t *v1;
  _BYTE *v3;
  uint64_t v5;

  v3 = *(_BYTE **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  *v3 = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_6D918(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 56) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 64) = v9;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v6 + 96) = *a2;
  return swift_task_switch(sub_6D988, 0, 0);
}

uint64_t sub_6D988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  int v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = sub_6A5CC(v3, (uint64_t)qword_DEF98);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(unsigned __int8 *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 72);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136315138;
    v25 = v11;
    v12 = 1702195828;
    if ((v8 & 1) == 0)
      v12 = 0x65736C6166;
    v13 = 0xE400000000000000;
    if ((v8 & 1) == 0)
      v13 = 0xE500000000000000;
    if (v8 == 2)
      v14 = 7104878;
    else
      v14 = v12;
    if (v8 == 2)
      v15 = 0xE300000000000000;
    else
      v15 = v13;
    *(_QWORD *)(v0 + 16) = sub_70DEC(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v22);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  v19 = *(int **)(v0 + 24);
  v24 = (uint64_t (*)(void))((char *)v19 + *v19);
  v20 = (_QWORD *)swift_task_alloc(v19[1]);
  *(_QWORD *)(v0 + 80) = v20;
  *v20 = v0;
  v20[1] = sub_6DBB8;
  return v24();
}

uint64_t sub_6DBB8()
{
  uint64_t *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *v0;
  v2 = *(int **)(*v0 + 40);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 88) = v3;
  *v3 = v6;
  v3[1] = sub_6DC30;
  return v5();
}

uint64_t sub_6DC30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 72);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_6DC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_6A50C(&qword_DDC08);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_71B48(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_7030C((uint64_t)v8);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12, v15);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v18 = v17;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v19 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_C3B20, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v11, v21, (char *)&type metadata for () + 8, &unk_DDD28, v20);
}

uint64_t PriceTracker.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  if (v1)
  {
    swift_retain(*(_QWORD *)(v0 + 224));
    Task.cancel()();
    swift_release(v1);
  }
  sub_6DEC8(v0 + 112);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 152));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 168));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 184));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 192));

  swift_release(*(_QWORD *)(v0 + 224));
  sub_6DEEC(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_6DEC8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_6DEEC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t PriceTracker.__deallocating_deinit()
{
  uint64_t v0;

  PriceTracker.deinit();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_6DF14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 232);
  v4 = *(_QWORD *)(v2 + 240);
  *(_QWORD *)(v2 + 232) = a1;
  *(_QWORD *)(v2 + 240) = a2;
  swift_retain(a2);
  return sub_6DEEC(v3, v4);
}

uint64_t sub_6DF4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[7] = v0;
  v2 = sub_6A50C(&qword_DDA68);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6DFB0, v0, 0);
}

uint64_t sub_6DFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v4 + 176);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 168));
  RCDataContaining.booksDefaultsValue.getter(ObjectType, v5);
  sub_6937C(*(void **)(v4 + 136), v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_6E0D0(v0 + 16);
  v7 = *(_BYTE *)(v0 + 16);
  v8 = swift_task_alloc(dword_DDBE4);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)v8 = v0;
  *(_QWORD *)(v8 + 8) = sub_6E078;
  v9 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 32) = v7;
  return swift_task_switch(sub_6E114, v9, 0);
}

uint64_t sub_6E078(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 80);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 88));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_6E0D0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_6E0F8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 32) = a1;
  return swift_task_switch(sub_6E114, v1, 0);
}

uint64_t sub_6E114()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;

  if (*(_BYTE *)(v0 + 32) != 1)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_6A5CC(v8, (uint64_t)qword_DEF98);
    v5 = Logger.logObject.getter(v9);
    v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_23;
    v7 = "[PriceTracker] Disabled by remote config";
    goto LABEL_22;
  }
  v1 = *(void **)(*(_QWORD *)(v0 + 16) + 184);
  v2 = objc_msgSend(v1, "activeStoreAccount");

  if (!v2)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_6A5CC(v10, (uint64_t)qword_DEF98);
    v5 = Logger.logObject.getter(v11);
    v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_23;
    v7 = "[PriceTracker] Not signed in to store account";
    goto LABEL_22;
  }
  if ((objc_msgSend(v1, "isStoreAccountManagedAppleID") & 1) != 0)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_6A5CC(v3, (uint64_t)qword_DEF98);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_23;
    v7 = "[PriceTracker] Store account is managed";
    goto LABEL_22;
  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 192), "isBookStoreAllowed"))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 200);
    v13 = (_QWORD *)swift_task_alloc(dword_DDDB4);
    *(_QWORD *)(v0 + 24) = v13;
    *v13 = v0;
    v13[1] = sub_6E3F4;
    v13[17] = v12;
    return swift_task_switch(sub_6D4C4, 0, 0);
  }
  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_6A5CC(v15, (uint64_t)qword_DEF98);
  v5 = Logger.logObject.getter(v16);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = "[PriceTracker] Book Store is restricted";
LABEL_22:
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_0, v5, v6, v7, v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
LABEL_23:

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_6E3F4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 33) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6E450, v3, 0);
}

uint64_t sub_6E450()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(v0 + 33);
  v2 = *(_QWORD *)(v0 + 16);
  if (v1 != 2)
  {
    *(_BYTE *)(v2 + 208) = v1 & 1;
    if ((v1 & 1) == 0)
      goto LABEL_3;
LABEL_9:
    v8 = 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  if ((*(_BYTE *)(v2 + 208) & 1) != 0)
    goto LABEL_9;
LABEL_3:
  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_6A5CC(v3, (uint64_t)qword_DEF98);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_0, v5, v6, "[PriceTracker] Book Store is disabled by bag", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = 0;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_6E55C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = v1;
  *(_BYTE *)(v2 + 184) = a1;
  return swift_task_switch(sub_6E578, v1, 0);
}

uint64_t sub_6E578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;

  if ((*(_BYTE *)(v0 + 184) & 1) == 0)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_6A5CC(v1, (uint64_t)qword_DEF98);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_0, v3, v4, "[PriceTracker] [updateConfiguration] WARNING: Running without active background task", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

  }
  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_6A5CC(v6, (uint64_t)qword_DEF98);
  *(_QWORD *)(v0 + 136) = v7;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "[PriceTracker] [updateConfiguration] Collecting...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (_QWORD *)swift_task_alloc(dword_DDC74);
  *(_QWORD *)(v0 + 144) = v11;
  *v11 = v0;
  v11[1] = sub_6E728;
  return sub_6EC0C();
}

uint64_t sub_6E728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6E788, v3, 0);
}

uint64_t sub_6E788(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "[PriceTracker] [updateConfiguration] Sending...", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = v1[19];
  v6 = v1[16];

  v7 = *(void **)(v6 + 128);
  if (v5)
  {
    v8 = (void *)v1[19];
    v9 = v8;
  }
  else
  {
    v9 = objc_msgSend((id)objc_opt_self(BDSDistributedPriceTrackingConfig), "disabledConfig");
    v8 = 0;
  }
  v10 = v1 + 2;
  v1[20] = v8;
  v1[21] = v9;
  v1[2] = v1;
  v1[3] = sub_6E8D8;
  v11 = swift_continuation_init(v1 + 2, 1);
  v1[10] = _NSConcreteStackBlock;
  v12 = v1 + 10;
  v12[1] = 0x40000000;
  v12[2] = sub_6EB98;
  v12[3] = &unk_C3A08;
  v12[4] = v11;
  v13 = v8;
  objc_msgSend(v7, "priceTrackingSetConfiguration:completion:", v9, v12);
  return swift_continuation_await(v10);
}

uint64_t sub_6E8D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 176) = v2;
  if (v2)
    v3 = sub_6E9F8;
  else
    v3 = sub_6E938;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 128), 0);
}

uint64_t sub_6E938()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  NSObject *v4;
  uint8_t *v5;
  NSObject *v6;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(NSObject **)(v0 + 160);
  if (v3)
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_0, v1, v2, "[PriceTracker] [updateConfiguration] Completed", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
    v6 = v1;
  }
  else
  {
    v6 = *(NSObject **)(v0 + 160);
    v4 = v1;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6E9F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(void **)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(void **)(v0 + 160);
  swift_willThrow();

  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 176);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v5, v6, "[PriceTracker] [updateConfiguration] Failed: %@", v8, 0xCu);
    v11 = sub_6A50C(&qword_DDCB8);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 176);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6EB98(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_6A50C(&qword_DDCC0);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_6EC0C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[16] = v0;
  v2 = sub_6A50C(&qword_DDA68);
  v1[17] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[18] = v3;
  v1[19] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6EC70, v0, 0);
}

uint64_t sub_6EC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v4 + 176);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 168));
  RCDataContaining.booksDefaultsValue.getter(ObjectType, v5);
  sub_6937C(*(void **)(v4 + 136), v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_BYTE *)(v0 + 16);
  v8 = swift_task_alloc(dword_DDBE4);
  *(_QWORD *)(v0 + 160) = v8;
  *(_QWORD *)v8 = v0;
  *(_QWORD *)(v8 + 8) = sub_6ED30;
  v9 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 32) = v7;
  return swift_task_switch(sub_6E114, v9, 0);
}

uint64_t sub_6ED30(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_BYTE *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6ED90, v3, 0);
}

uint64_t sub_6ED90()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t ObjectType;
  int *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(v0 + 200) != 1)
  {
    sub_6E0D0(v0 + 16);
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_6A5CC(v7, (uint64_t)qword_DEF98);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v9, v10))
      goto LABEL_13;
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    v12 = "[PriceTracker] [configuration] Tracking is not enabled";
    goto LABEL_12;
  }
  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 128) + 112);
  *(_QWORD *)(v0 + 168) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 120);
    ObjectType = swift_getObjectType(Strong);
    v4 = *(int **)(v2 + 8);
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc(v4[1]);
    *(_QWORD *)(v0 + 176) = v5;
    *v5 = v0;
    v5[1] = sub_6EF98;
    return v15(201, ObjectType, v2);
  }
  sub_6E0D0(v0 + 16);
  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_6A5CC(v13, (uint64_t)qword_DEF98);
  v9 = Logger.logObject.getter(v14);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    v12 = "[PriceTracker] [configuration] Missing library manager";
LABEL_12:
    _os_log_impl(&dword_0, v9, v10, v12, v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
LABEL_13:

  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_6EF98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6EFF8, v3, 0);
}

uint64_t sub_6EFF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  _QWORD *v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = v0[23];
  v0[13] = v1;
  v2 = v0 + 13;
  v3 = (unint64_t)v1 >> 62;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v45 = v1;
    else
      v45 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v4 = *(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8));
  }
  if (v4 >= 201)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_6A5CC(v5, (uint64_t)qword_DEF98);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v9 = 134217984;
      v0[15] = 200;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v9 + 4, v9 + 12);
      _os_log_impl(&dword_0, v7, v8, "[PriceTracker] [configuration] Tracked item count exceeds limit %ld", v9, 0xCu);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = v0[23];
    if (v3)
    {
      if (v1 < 0)
        v46 = v0[23];
      else
        v46 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v0[23], 2);
      v47 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRetain(v10);
      v48 = _CocoaArrayWrapper.endIndex.getter(v46);
      result = swift_bridgeObjectRelease(v10);
      if (v48 < 0)
      {
        __break(1u);
        return result;
      }
      v14 = v0[23];
      if (v47 >= 200)
        v49 = 200;
      else
        v49 = v47;
      if (v47 >= 0)
        v11 = v49;
      else
        v11 = 200;
      swift_bridgeObjectRetain(v0[23]);
      v15 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease(v14);
      if (v15 < (uint64_t)v11)
      {
        __break(1u);
        goto LABEL_53;
      }
    }
    else
    {
      if (*(uint64_t *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8)) >= 200)
        v11 = 200;
      else
        v11 = *(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain(v0[23]);
    }
    if ((v1 & 0xC000000000000001) != 0 && v11)
    {
      sub_71884(0, (unint64_t *)&unk_DDC98, BDSDistributedPriceTrackingConfigItemID_ptr);
      v12 = 0;
      do
      {
        v13 = v12 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v12);
        v12 = v13;
      }
      while (v11 != v13);
    }
    if (v3)
    {
      v16 = v0[23];
      if (v1 < 0)
        v17 = v0[23];
      else
        v17 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v0[23]);
      v15 = _CocoaArrayWrapper.subscript.getter(0, v11, v17);
      v1 = v18;
      v14 = v19;
      v11 = v20;
      swift_bridgeObjectRelease_n(v16, 2);
      if ((v11 & 1) == 0)
        goto LABEL_24;
    }
    else
    {
      v14 = 0;
      v15 = v1 & 0xFFFFFFFFFFFFFF8;
      v1 = (v1 & 0xFFFFFFFFFFFFFF8) + 32;
      v11 = (2 * v11) | 1;
      if ((v11 & 1) == 0)
      {
LABEL_24:
        v21 = v0[23];
        v22 = sub_7142C(v15, v1, v14, v11);
        swift_bridgeObjectRelease(v21);
LABEL_31:
        swift_unknownObjectRelease(v15);
        *v2 = (uint64_t)v22;
        goto LABEL_32;
      }
    }
    v23 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v24 = swift_unknownObjectRetain_n(v15, 2);
    v25 = (_QWORD *)swift_dynamicCastClass(v24, v23);
    if (!v25)
    {
      swift_unknownObjectRelease(v15);
      v25 = &_swiftEmptyArrayStorage;
    }
    v26 = v25[2];
    swift_release(v25);
    if (!__OFSUB__(v11 >> 1, v14))
    {
      if (v26 == (v11 >> 1) - v14)
      {
        v27 = v0[23];
        v22 = (_QWORD *)swift_dynamicCastClass(v15, v23);
        swift_bridgeObjectRelease(v27);
        if (!v22)
        {
          swift_unknownObjectRelease(v15);
          v22 = &_swiftEmptyArrayStorage;
        }
        goto LABEL_31;
      }
      goto LABEL_54;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    swift_unknownObjectRelease(v15);
    goto LABEL_24;
  }
LABEL_32:
  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_6A5CC(v28, (uint64_t)qword_DEF98);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v50 = v33;
    *(_DWORD *)v32 = 136315138;
    swift_beginAccess(v0 + 13, v0 + 10, 0, 0);
    v34 = *v2;
    v35 = sub_71884(0, (unint64_t *)&unk_DDC98, BDSDistributedPriceTrackingConfigItemID_ptr);
    v36 = swift_bridgeObjectRetain(v34);
    v37 = Array.description.getter(v36, v35);
    v39 = v38;
    swift_bridgeObjectRelease(v34);
    v0[14] = sub_70DEC(v37, v39, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease(v39);
    _os_log_impl(&dword_0, v30, v31, "[PriceTracker] [configuration] Tracked items: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }

  v40 = v0[16];
  v41 = *(_QWORD *)(v40 + 160);
  ObjectType = swift_getObjectType(*(_QWORD *)(v40 + 152));
  v43 = (_QWORD *)swift_task_alloc(dword_DE2B4);
  v0[24] = v43;
  *v43 = v0;
  v43[1] = sub_6F54C;
  return sub_7CAC4(ObjectType, v41);
}

uint64_t sub_6F54C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_BYTE *)(*(_QWORD *)v1 + 201) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6F5AC, v3, 0);
}

uint64_t sub_6F5AC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  NSNumber v3;
  NSNumber v4;
  id v5;
  Class isa;
  id v7;
  Class v8;
  Class v9;
  id v10;
  uint64_t v12;

  v1 = *(unsigned __int8 *)(v0 + 201);
  swift_beginAccess(v0 + 104, v0 + 56, 0, 0);
  v2 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain(v2);
  sub_70DC4(v0 + 16);
  v3.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
  v4.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
  v5 = 0;
  if (v1 == 1)
    v5 = sub_7E860();
  v12 = *(_QWORD *)(v0 + 168);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v7 = objc_allocWithZone((Class)BDSDistributedPriceTrackingConfig);
  sub_71884(0, (unint64_t *)&unk_DDC98, BDSDistributedPriceTrackingConfigItemID_ptr);
  v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  sub_71884(0, (unint64_t *)&qword_DDA70, BDSDistributedPriceTrackingConfigUpdateScheduleStep_ptr);
  v9 = Array._bridgeToObjectiveC()().super.isa;
  sub_6E0D0(v0 + 16);
  v10 = objc_msgSend(v7, "initWithItemIDs:updateScheduleSteps:dealAbsoluteThreshold:dealRelativeThreshold:notification:cardLimit:", v8, v9, v3.super.super.isa, v4.super.super.isa, v5, isa);

  swift_unknownObjectRelease(v12);
  sub_6E0D0(v0 + 16);
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

uint64_t sub_6F74C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[7] = v0;
  v2 = sub_6A50C(&qword_DDA68);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_6F7B0, v0, 0);
}

uint64_t sub_6F7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v4 + 176);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 168));
  RCDataContaining.booksDefaultsValue.getter(ObjectType, v5);
  sub_6937C(*(void **)(v4 + 136), v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_6E0D0(v0 + 16);
  v7 = *(_BYTE *)(v0 + 16);
  v8 = swift_task_alloc(dword_DDBE4);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)v8 = v0;
  *(_QWORD *)(v8 + 8) = sub_6F878;
  v9 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 32) = v7;
  return swift_task_switch(sub_6E114, v9, 0);
}

uint64_t sub_6F878(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_BYTE *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_6F8D8, v3, 0);
}

uint64_t sub_6F8D8()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (*(_BYTE *)(v0 + 96) == 1
    && (v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 56) + 144), "stringForKey:", BDSPriceTrackerCardList)) != 0)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0xE000000000000000;
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v5);
}

uint64_t sub_6F970()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_6F988, v0, 0);
}

uint64_t sub_6F988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 160);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 152));
  v4 = (_QWORD *)swift_task_alloc(dword_DE2B4);
  *(_QWORD *)(v0 + 24) = v4;
  *v4 = v0;
  v4[1] = sub_6F9F0;
  return sub_7CAC4(ObjectType, v2);
}

uint64_t sub_6F9F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_6FA40(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 32) = a1;
  return swift_task_switch(sub_6FA5C, v1, 0);
}

uint64_t sub_6FA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 160);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 152));
  v4 = (_QWORD *)swift_task_alloc(dword_DE2AC);
  *(_QWORD *)(v0 + 24) = v4;
  *v4 = v0;
  v4[1] = sub_6FACC;
  return sub_7CD80(*(unsigned __int8 *)(v0 + 32), ObjectType, v2);
}

uint64_t sub_6FACC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

id sub_6FB14()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;

  v1 = *(void **)(v0 + 136);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  return v3;
}

uint64_t sub_6FB70()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_6FB88, v0, 0);
}

uint64_t sub_6FB88()
{
  uint64_t v0;
  void *v1;
  NSString v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 16) + 136);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setBool:forKey:", 1, v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void PriceTracker.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 248, 15);
  swift_defaultActor_initialize(v1);
  _swift_stdlib_reportUnimplementedInitializer("BKLibrary.PriceTracker", 22, "init()", 6, 0);
  __break(1u);
}

void PriceTracker.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  _swift_stdlib_reportUnimplementedInitializer("BKLibrary.PriceTracker", 22, "init()", 6, 0);
  __break(1u);
}

uint64_t PriceTracker.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

_QWORD *PriceTracker.__allocating_init(libraryManager:bdsPriceTracker:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return PriceTracker.init(libraryManager:bdsPriceTracker:)(a1, a2);
}

_QWORD *PriceTracker.init(libraryManager:bdsPriceTracker:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t ObjectType;

  v3 = v2;
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v6 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
  v7 = objc_msgSend(v6, "userDefaults");

  type metadata accessor for BCDefaultCloudGlobalMetadataManager(0);
  v8 = static BCCloudGlobalMetadataManaging<>.default.getter();
  type metadata accessor for RCDataContainer(0);
  v9 = (void *)static RCDataContainer.default.getter();
  v10 = objc_msgSend((id)objc_opt_self(BUAccountsProvider), "sharedProvider");
  v11 = objc_msgSend((id)objc_opt_self(BURestrictionsProvider), "sharedInstance");
  v12 = objc_msgSend((id)objc_opt_self(UIApplication), "nonisolatedSharedApplication");
  v13 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  v14 = type metadata accessor for PriceTracker();
  swift_allocObject(v14, 248, 15);
  v15 = sub_6A9DC(a1, a2, v5, v7, v8, v9, v10, (uint64_t)v11, v12, v13);
  ObjectType = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, ObjectType, 248, 15);
  return v15;
}

uint64_t type metadata accessor for PriceTracker()
{
  return objc_opt_self(BKLibraryPriceTracker);
}

Swift::Void __swiftcall PriceTracker.objc_setNeedsConfigurationUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[4];

  v1 = v0;
  v2 = sub_6A50C(&qword_DDC08);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_C39B8, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_7030C((uint64_t)v4);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15, v18);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v19;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v20 = swift_allocObject(&unk_C39E0, 32, 7);
  *(_QWORD *)(v20 + 16) = &unk_DDC18;
  *(_QWORD *)(v20 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v21 = 0;
  }
  v22 = swift_task_create(v13, v21, (char *)&type metadata for () + 8, &unk_DDC28, v20);
  swift_release(v22);
}

uint64_t sub_700E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_70100, a4, 0);
}

uint64_t sub_70100()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 216), "signal");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_7013C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_7030C(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10, v13);
      v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v16 = v15;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v14 = 0;
  v16 = 0;
LABEL_6:
  v18 = swift_allocObject(&unk_C3A30, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  if (v16 | v14)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v14;
    v21[3] = v16;
  }
  else
  {
    v19 = 0;
  }
  return swift_task_create(v9, v19, (char *)&type metadata for () + 8, &unk_DDCC8, v18);
}

uint64_t sub_70280()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_702AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_DDC14);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_74A74;
  v3[2] = v2;
  return swift_task_switch(sub_70100, v2, 0);
}

uint64_t sub_7030C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_6A50C(&qword_DDC08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_70374(uint64_t result, void *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(result + 32);
  if (a4)
  {
    v6 = sub_6A50C(&qword_DDCC0);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else if (a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
    *(_QWORD *)v10 = a2;
    *(_BYTE *)(v10 + 8) = a3;
    v11 = a2;
    return swift_continuation_throwingResume(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_70404(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_7041C, 0, 0);
}

uint64_t sub_7041C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t (__cdecl *v5)();

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v5 = (uint64_t (__cdecl *)())((char *)&dword_DDF30 + dword_DDF30);
  v3 = (_QWORD *)swift_task_alloc(unk_DDF34);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_704B8;
  return v5();
}

uint64_t sub_704B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 56));
  swift_release(v3);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_70510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[7] = v10;
  v8[8] = v11;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_7053C, 0, 0);
}

uint64_t sub_7053C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[8];
  v2 = v0[6];
  v4 = v0[2];
  v3 = (void *)v0[3];
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  v0[9] = 0x80000000000A5190;
  v6 = unk_DE2C4;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_DE2C0
                                                                                             + dword_DE2C0);
  swift_retain(v2);
  swift_retain(v1);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[10] = v7;
  *v7 = v0;
  v7[1] = sub_70628;
  return v9(0xD000000000000016, 0x80000000000A5190, v0[4], v0[5], v0[6], v0[7], v0[8]);
}

uint64_t sub_70628()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 72);
  v2 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 48);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v2);
  swift_release(v3);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

id sub_70698(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id result;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  char v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5 = (void *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    v7 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
LABEL_38:
    if (a2 < 0)
      v24 = a2;
    else
      v24 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(a2);
    if (v6 == v25)
      goto LABEL_4;
    return 0;
  }
  if (a1 < 0)
    v23 = a1;
  else
    v23 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(a1);
  v7 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
    goto LABEL_38;
LABEL_3:
  if (v6 != *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8)))
    return 0;
LABEL_4:
  if (!v6)
    return &dword_0 + 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v8 = a1;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return &dword_0 + 1;
  if (v6 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v26 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_47:
    result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
  {
    __break(1u);
    goto LABEL_49;
  }
  result = *(id *)(a1 + 32);
LABEL_18:
  v5 = result;
  v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_49:
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_21:
    v14 = v13;
    sub_71884(0, (unint64_t *)&qword_DDA70, BDSDistributedPriceTrackingConfigUpdateScheduleStep_ptr);
    v15 = static NSObject.== infix(_:_:)(v5, v14);

    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return (id)v6;
        v21 = i - 4;
        if (v26)
        {
          v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
          if (v2)
            goto LABEL_23;
        }
        else
        {
          if (v21 >= *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
          {
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          v22 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_23:
            v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v21 >= *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8)))
          goto LABEL_45;
        v18 = *(id *)(a2 + 8 * i);
LABEL_24:
        v19 = v18;
        v20 = static NSObject.== infix(_:_:)(v22, v18);

        if ((v20 & 1) == 0)
          return (id)v6;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8)))
  {
    v13 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_70920(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_70984;
  return v6(a1);
}

uint64_t sub_70984()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_709D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_DDC24);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_74A74;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_DDC20 + dword_DDC20))(a1, v4);
}

void sub_70A40(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  NSString v4;

  v3 = *(void **)(*(_QWORD *)a1 + 136);
  v4 = String._bridgeToObjectiveC()();
  LOBYTE(v3) = objc_msgSend(v3, "BOOLForKey:", v4);

  *a2 = (_BYTE)v3;
}

void sub_70AAC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *a1;
  v3 = *(void **)(*(_QWORD *)a2 + 136);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setBool:forKey:", v2, v4);

}

uint64_t method lookup function for PriceTracker(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PriceTracker);
}

uint64_t dispatch thunk of PriceTracker.setStateChangeHandler(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of PriceTracker.featureEnabled.getter()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((char *)&stru_108.reserved2 + (swift_isaMask & *v0));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_74A70;
  return v5();
}

uint64_t dispatch thunk of PriceTracker.cardListString.getter()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((char *)&stru_158.size + (swift_isaMask & *v0));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70C0C;
  return v5();
}

uint64_t sub_70C0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of PriceTracker.notificationsEnabled.getter()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((char *)&stru_158.offset + (swift_isaMask & *v0));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_74A70;
  return v5();
}

uint64_t dispatch thunk of PriceTracker.setNotificationsEnabled(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((char *)&stru_158.reloff + (swift_isaMask & *v1));
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_74A74;
  return v7(a1);
}

uint64_t dispatch thunk of PriceTracker.hasShownOptInAlert.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of PriceTracker.didShowOptInAlert()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)&stru_1A8.segname[(swift_isaMask & *v0) - 8];
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_74A74;
  return v5();
}

uint64_t sub_70DC4(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_70DEC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_70EBC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_717E4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_717E4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_717C4(v12);
  return v7;
}

uint64_t sub_70EBC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_71074(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_71074(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_71108(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_712E0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_712E0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_71108(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_7127C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_7127C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_6A50C(&qword_DDCB0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_712E0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_6A50C(&qword_DDCB0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_7142C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return &_swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = &_swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_6A50C(&qword_DDCA8);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    sub_71884(0, (unint64_t *)&unk_DDC98, BDSDistributedPriceTrackingConfigItemID_ptr);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_715BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_715D4, 0, 0);
}

uint64_t sub_715D4()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = *(_BYTE **)(v0 + 16);
  *v1 = objc_msgSend(*(id *)(v0 + 24), "isStoreAccountManagedAppleID");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_71610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v23;

  v14 = sub_6A50C(&qword_DDC08);
  __chkstk_darwin(v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a5;
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  v19 = (_QWORD *)swift_allocObject(&unk_C3C78, 88, 7);
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = v17;
  v19[7] = a6;
  v19[8] = a7;
  v19[9] = a1;
  v19[10] = a2;
  swift_bridgeObjectRetain(a4);
  v20 = v17;
  swift_retain(a7);
  swift_retain(a2);
  v21 = sub_7013C((uint64_t)v16, (uint64_t)&unk_DDFA8, (uint64_t)v19);
  return swift_release(v21);
}

uint64_t sub_71728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v13 = *a6;
  v14 = (_QWORD *)swift_task_alloc(dword_DDFB4);
  *(_QWORD *)(v8 + 16) = v14;
  *v14 = v8;
  v14[1] = sub_74A74;
  v14[7] = v16;
  v14[8] = v17;
  v14[5] = a7;
  v14[6] = a8;
  v14[3] = a5;
  v14[4] = v13;
  v14[2] = a4;
  return swift_task_switch(sub_7053C, 0, 0);
}

uint64_t sub_717C4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_717E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_71820(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_DDCD4);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_74A74;
  *(_QWORD *)(v4 + 40) = v1;
  *(_BYTE *)(v4 + 64) = a1;
  return swift_task_switch(sub_6AE78, 0, 0);
}

uint64_t sub_71884(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_718C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_DDCEC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_71920;
  v2[5] = v0;
  return swift_task_switch(sub_6AF94, 0, 0);
}

uint64_t sub_71920()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_7196C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_719A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_71610(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_719B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_DDCFC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_74A74;
  v2[5] = v0;
  return swift_task_switch(sub_6B1F4, 0, 0);
}

uint64_t sub_71A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_DDD0C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_74A74;
  v3[2] = v2;
  return swift_task_switch(sub_6B2C4, 0, 0);
}

uint64_t sub_71A6C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_71AD0()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = swift_task_alloc(dword_DDD1C);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_74A74;
  *(_OWORD *)(v2 + 4584) = v6;
  *(_OWORD *)(v2 + 4600) = v7;
  *(_OWORD *)(v2 + 4552) = v4;
  *(_OWORD *)(v2 + 4568) = v5;
  *(_OWORD *)(v2 + 4536) = v3;
  return swift_task_switch(sub_6B33C, 0, 0);
}

uint64_t sub_71B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_6A50C(&qword_DDC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_71B90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_DDD34);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_74A74;
  return sub_6B86C(a1, v4, v5, v6);
}

uint64_t sub_71BFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_DDD44);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_71920;
  return sub_6BA24(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_71C7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_DDD54);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_74A74;
  return sub_6BFC8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_71CFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_DDD64);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_74A74;
  return sub_6C630(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_71D7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_DDD74);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_74A74;
  return sub_6CAAC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_71DFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_DDD84);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_74A74;
  return sub_6CD8C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_71E7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_DDD94);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_74A74;
  return sub_6D114(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_71EFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_DDDB8;
  if (!qword_DDDB8)
  {
    v1 = type metadata accessor for NSNotificationCenter.Notifications(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSNotificationCenter.Notifications, v1);
    atomic_store(result, &qword_DDDB8);
  }
  return result;
}

uint64_t sub_71F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_DDDC4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_71F90;
  return sub_6D810(v2);
}

uint64_t sub_71F90(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_71FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_DDDD4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_74A74;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_DDDD0 + dword_DDDD0))(a1, a2, v6);
}

uint64_t sub_72060(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_720A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = sub_6A50C(&qword_DDF78);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_6A50C(&qword_DDF88);
  v5[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[13] = v9;
  v5[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_7213C, 0, 0);
}

uint64_t sub_7213C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 48), v1);
  v3 = sub_74914(&qword_DDF90, &qword_DDF78, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  swift_bridgeObjectRetain(v2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v3);
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 32);
  sub_74914(&qword_DDF98, &qword_DDF88, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v4 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 136) = v4;
  *v4 = v0;
  v4[1] = sub_72238;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 16, 0, 0);
}

uint64_t sub_72238()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_7228C, 0, 0);
}

uint64_t sub_7228C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t (*v21)(void);
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 152) = v1;
  v3 = *(_QWORD *)(v0 + 128);
  if (v1 == 1)
  {
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v4, *(_QWORD *)(v0 + 96));
    swift_bridgeObjectRelease(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (v3)
  {
    if (v1)
    {
      v7 = *(_QWORD *)(v0 + 120);
      v8 = v3 == v1 && v7 == v2;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, *(_QWORD *)(v0 + 128), v2, v1, 0) & 1) != 0)
      {
        sub_74954(v2, v1);
LABEL_13:
        sub_74914(&qword_DDF98, &qword_DDF88, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
        v9 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
        *(_QWORD *)(v0 + 136) = v9;
        *v9 = v0;
        v9[1] = sub_72238;
        return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 16, 0, 0);
      }
      v3 = *(_QWORD *)(v0 + 128);
    }
    swift_bridgeObjectRelease(v3);
  }
  else if (!v1)
  {
    sub_74954(v2, 0);
    *(_QWORD *)(v0 + 128) = 0;
    goto LABEL_13;
  }
  v10 = qword_DD8A0;
  swift_bridgeObjectRetain(v1);
  if (v10 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v11 = type metadata accessor for Logger(0);
  sub_6A5CC(v11, (uint64_t)qword_DEF98);
  v12 = swift_bridgeObjectRetain_n(v1, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v22 = v16;
    *(_DWORD *)v15 = 136315138;
    if (v1)
      v17 = v2;
    else
      v17 = 0;
    if (v1)
      v18 = v1;
    else
      v18 = 0xE000000000000000;
    swift_bridgeObjectRetain(v1);
    *(_QWORD *)(v15 + 4) = sub_70DEC(v17, v18, &v22);
    swift_bridgeObjectRelease(v18);
    sub_74954(v2, v1);
    sub_74954(v2, v1);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_74954(v2, v1);
    sub_74954(v2, v1);
  }

  v19 = *(int **)(v0 + 56);
  v21 = (uint64_t (*)(void))((char *)v19 + *v19);
  v20 = (_QWORD *)swift_task_alloc(v19[1]);
  *(_QWORD *)(v0 + 160) = v20;
  *v20 = v0;
  v20[1] = sub_725B8;
  return v21();
}

uint64_t sub_725B8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_7260C, 0, 0);
}

uint64_t sub_7260C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_74954(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 144);
  sub_74914(&qword_DDF98, &qword_DDF88, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v1 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_72238;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 16, 0, 0);
}

uint64_t sub_726AC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 129) = a1;
  v7 = sub_6A50C(&qword_DDF28);
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_6A50C(&qword_DDF60);
  *(_QWORD *)(v6 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 88) = v10;
  *(_QWORD *)(v6 + 96) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_72748, 0, 0);
}

uint64_t sub_72748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 56);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), v1);
  v2 = sub_74914(&qword_DDF68, &qword_DDF28, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  *(_BYTE *)(v0 + 130) = *(_BYTE *)(v0 + 129);
  sub_74914(&qword_DDF70, &qword_DDF60, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_72830;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
}

uint64_t sub_72830()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_72884, 0, 0);
}

uint64_t sub_72884()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);

  v1 = *(unsigned __int8 *)(v0 + 128);
  *(_BYTE *)(v0 + 131) = v1;
  if (v1 == 2)
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v2, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else if (((v1 ^ *(unsigned __int8 *)(v0 + 130)) & 1) != 0)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_6A5CC(v5, (uint64_t)qword_DEF98);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 67109120;
      *(_DWORD *)(v9 + 4) = v1 & 1;
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(int **)(v0 + 24);

    v13 = (uint64_t (*)(void))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 112) = v11;
    *v11 = v0;
    v11[1] = sub_72A7C;
    return v13();
  }
  else
  {
    sub_74914(&qword_DDF70, &qword_DDF60, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
    v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 104) = v12;
    *v12 = v0;
    v12[1] = sub_72830;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
  }
}

uint64_t sub_72A7C()
{
  uint64_t *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *v0;
  v2 = *(int **)(*v0 + 40);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 120) = v3;
  *v3 = v6;
  v3[1] = sub_72AF4;
  return v5();
}

uint64_t sub_72AF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  *(_BYTE *)(v1 + 130) = *(_BYTE *)(v1 + 131) & 1;
  sub_74914(&qword_DDF70, &qword_DDF60, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v1 + 104) = v3;
  *v3 = v2;
  v3[1] = sub_72830;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1 + 128, 0, 0);
}

uint64_t sub_72BA8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 129) = a1;
  v7 = sub_6A50C(&qword_DDE58);
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_6A50C(&qword_DDED0);
  *(_QWORD *)(v6 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 88) = v10;
  *(_QWORD *)(v6 + 96) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_72C44, 0, 0);
}

uint64_t sub_72C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 56);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), v1);
  v2 = sub_74914(&qword_DDE80, &qword_DDE58, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  *(_BYTE *)(v0 + 130) = *(_BYTE *)(v0 + 129);
  sub_74914(&qword_DDED8, &qword_DDED0, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_72D2C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
}

uint64_t sub_72D2C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_72D80, 0, 0);
}

uint64_t sub_72D80()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);

  v1 = *(unsigned __int8 *)(v0 + 128);
  *(_BYTE *)(v0 + 131) = v1;
  if (v1 == 2)
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v2, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else if (((v1 ^ *(unsigned __int8 *)(v0 + 130)) & 1) != 0)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_6A5CC(v5, (uint64_t)qword_DEF98);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 67109120;
      *(_DWORD *)(v9 + 4) = v1 & 1;
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(int **)(v0 + 24);

    v13 = (uint64_t (*)(void))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 112) = v11;
    *v11 = v0;
    v11[1] = sub_72F78;
    return v13();
  }
  else
  {
    sub_74914(&qword_DDED8, &qword_DDED0, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
    v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 104) = v12;
    *v12 = v0;
    v12[1] = sub_72D2C;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
  }
}

uint64_t sub_72F78()
{
  uint64_t *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *v0;
  v2 = *(int **)(*v0 + 40);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 120) = v3;
  *v3 = v6;
  v3[1] = sub_72FF0;
  return v5();
}

uint64_t sub_72FF0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  *(_BYTE *)(v1 + 130) = *(_BYTE *)(v1 + 131) & 1;
  sub_74914(&qword_DDED8, &qword_DDED0, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v1 + 104) = v3;
  *v3 = v2;
  v3[1] = sub_72D2C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1 + 128, 0, 0);
}

uint64_t sub_730A4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 129) = a1;
  v7 = sub_6A50C(&qword_DDE60);
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_6A50C(&qword_DDE90);
  *(_QWORD *)(v6 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 88) = v10;
  *(_QWORD *)(v6 + 96) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_73140, 0, 0);
}

uint64_t sub_73140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 56);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), v1);
  v2 = sub_74914(&qword_DDE98, &qword_DDE60, (uint64_t)&protocol conformance descriptor for AsyncRemoveDuplicatesSequence<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  *(_BYTE *)(v0 + 130) = *(_BYTE *)(v0 + 129);
  sub_74914(&qword_DDEA0, &qword_DDE90, (uint64_t)&protocol conformance descriptor for AsyncRemoveDuplicatesSequence<A>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_73228;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
}

uint64_t sub_73228()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_7327C, 0, 0);
}

uint64_t sub_7327C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);

  v1 = *(unsigned __int8 *)(v0 + 128);
  *(_BYTE *)(v0 + 131) = v1;
  if (v1 == 2)
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v2, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else if (((v1 ^ *(unsigned __int8 *)(v0 + 130)) & 1) != 0)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_6A5CC(v5, (uint64_t)qword_DEF98);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 67109120;
      *(_DWORD *)(v9 + 4) = v1 & 1;
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(int **)(v0 + 24);

    v13 = (uint64_t (*)(void))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 112) = v11;
    *v11 = v0;
    v11[1] = sub_73474;
    return v13();
  }
  else
  {
    sub_74914(&qword_DDEA0, &qword_DDE90, (uint64_t)&protocol conformance descriptor for AsyncRemoveDuplicatesSequence<A>.Iterator);
    v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 104) = v12;
    *v12 = v0;
    v12[1] = sub_73228;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
  }
}

uint64_t sub_73474()
{
  uint64_t *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *v0;
  v2 = *(int **)(*v0 + 40);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 120) = v3;
  *v3 = v6;
  v3[1] = sub_734EC;
  return v5();
}

uint64_t sub_734EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  *(_BYTE *)(v1 + 130) = *(_BYTE *)(v1 + 131) & 1;
  sub_74914(&qword_DDEA0, &qword_DDE90, (uint64_t)&protocol conformance descriptor for AsyncRemoveDuplicatesSequence<A>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v1 + 104) = v3;
  *v3 = v2;
  v3[1] = sub_73228;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1 + 128, 0, 0);
}

uint64_t sub_735A0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 129) = a1;
  v7 = sub_6A50C(&qword_DDE18);
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_6A50C(&qword_DDE28);
  *(_QWORD *)(v6 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 88) = v10;
  *(_QWORD *)(v6 + 96) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_7363C, 0, 0);
}

uint64_t sub_7363C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 56);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), v1);
  v2 = sub_74914(&qword_DDE30, &qword_DDE18, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  *(_BYTE *)(v0 + 130) = *(_BYTE *)(v0 + 129);
  sub_74914(&qword_DDE38, &qword_DDE28, (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_73724;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
}

uint64_t sub_73724()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_73778, 0, 0);
}

uint64_t sub_73778()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);

  v1 = *(unsigned __int8 *)(v0 + 128);
  *(_BYTE *)(v0 + 131) = v1;
  if (v1 == 2)
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v2, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else if (((v1 ^ *(unsigned __int8 *)(v0 + 130)) & 1) != 0)
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_6A5CC(v5, (uint64_t)qword_DEF98);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 67109120;
      *(_DWORD *)(v9 + 4) = v1 & 1;
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(int **)(v0 + 24);

    v13 = (uint64_t (*)(void))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 112) = v11;
    *v11 = v0;
    v11[1] = sub_73970;
    return v13();
  }
  else
  {
    sub_74914(&qword_DDE38, &qword_DDE28, (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
    v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 104) = v12;
    *v12 = v0;
    v12[1] = sub_73724;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 128, 0, 0);
  }
}

uint64_t sub_73970()
{
  uint64_t *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *v0;
  v2 = *(int **)(*v0 + 40);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 120) = v3;
  *v3 = v6;
  v3[1] = sub_739E8;
  return v5();
}

uint64_t sub_739E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  *(_BYTE *)(v1 + 130) = *(_BYTE *)(v1 + 131) & 1;
  sub_74914(&qword_DDE38, &qword_DDE28, (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v1 + 104) = v3;
  *v3 = v2;
  v3[1] = sub_73724;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1 + 128, 0, 0);
}

uint64_t sub_73A9C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 123) = a1;
  v7 = sub_6A50C(&qword_DDDA8);
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_6A50C(&qword_DDDF8);
  *(_QWORD *)(v6 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 88) = v10;
  *(_QWORD *)(v6 + 96) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_73B38, 0, 0);
}

uint64_t sub_73B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 120) = *(_BYTE *)(v0 + 123);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  v5 = sub_74914(&qword_DDE08, &qword_DDDA8, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v5);
  sub_74914(&qword_DDE10, &qword_DDDF8, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 104) = v6;
  *v6 = v0;
  v6[1] = sub_73C20;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 121, 0, 0);
}

uint64_t sub_73C20()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_73C74, 0, 0);
}

uint64_t sub_73C74()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(unsigned __int8 *)(v0 + 121);
  if (v1 == 3)
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v2, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_BYTE *)(v0 + 122) = v1;
  v5 = *(unsigned __int8 *)(v0 + 120);
  if (v5 != 2)
  {
    if (v1 == 2 || ((((v1 & 1) == 0) ^ v5) & 1) == 0)
      goto LABEL_9;
LABEL_8:
    sub_74914(&qword_DDE10, &qword_DDDF8, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
    v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_73C20;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 121, 0, 0);
  }
  if (v1 == 2)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)(v0 + 120) = v1;
  v7 = (_QWORD *)swift_task_alloc(dword_DDE04);
  *(_QWORD *)(v0 + 112) = v7;
  *v7 = v0;
  v7[1] = sub_73DD0;
  return sub_6D918(v0 + 120, (_BYTE *)(v0 + 122), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_73DD0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_task_switch(sub_73E24, 0, 0);
}

uint64_t sub_73E24()
{
  uint64_t v0;
  _QWORD *v1;

  sub_74914(&qword_DDE10, &qword_DDDF8, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v1 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_73C20;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 121, 0, 0);
}

uint64_t sub_73EB4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

id sub_73EE0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "removeObserver:", *(_QWORD *)(v0 + 24));
}

uint64_t sub_73EF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_73F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_DDE6C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_74A74;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_DDE68 + dword_DDE68))(a1, a2, v6);
}

uint64_t sub_73F88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_73FB4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "removeObserver:accountTypes:", *(_QWORD *)(v0 + 24), 1);
}

void sub_73FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_DDEF8)
  {
    v4 = _s13PriceTrackingVMa(0, a2, a3, a4);
    if (!v5)
      atomic_store(v4, &qword_DDEF8);
  }
}

uint64_t sub_74014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[21] = a5;
  v6[22] = a6;
  v6[19] = a3;
  v6[20] = a4;
  v6[17] = a1;
  v6[18] = a2;
  v7 = sub_6A50C(&qword_DDEE8);
  v6[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[24] = v8;
  v6[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_6A50C(&qword_DDF08);
  v6[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[27] = v10;
  v6[28] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_740AC, 0, 0);
}

uint64_t sub_740AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v5;
  *(_OWORD *)(v0 + 32) = v7;
  *(_QWORD *)(v0 + 48) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = sub_74914(&qword_DDF18, &qword_DDEE8, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  swift_bridgeObjectRetain(v8);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v9);
  sub_74914(&qword_DDF20, &qword_DDF08, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v10 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 232) = v10;
  *v10 = v0;
  v10[1] = sub_741B4;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 56, 0, 0);
}

uint64_t sub_741B4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  return swift_task_switch(sub_74208, 0, 0);
}

void sub_74208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  char v20;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  char v33;
  uint64_t v34;
  id v35;
  void *v36;
  char v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
  {
    v26 = *(_QWORD *)(v0 + 224);
    v27 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(v26, *(_QWORD *)(v0 + 208));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(double *)(v0 + 72);
  v3 = *(double *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56) & 1;
  *(_BYTE *)(v0 + 96) = v5;
  *(_QWORD *)(v0 + 104) = v1;
  *(double *)(v0 + 112) = v4;
  *(double *)(v0 + 120) = v3;
  *(_QWORD *)(v0 + 128) = v2;
  v6 = *(_QWORD *)(v0 + 24);
  if ((((v5 == 0) ^ *(unsigned __int8 *)(v0 + 16)) & 1) == 0)
    goto LABEL_32;
  v7 = *(double *)(v0 + 32);
  v8 = *(double *)(v0 + 40);
  v9 = (void *)((unint64_t)v6 >> 62);
  v10 = *(_QWORD *)(v0 + 48);
  if (!((unint64_t)v6 >> 62))
  {
    v11 = *(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
    v12 = (unint64_t)v1 >> 62;
    if (!((unint64_t)v1 >> 62))
      goto LABEL_5;
LABEL_59:
    if (v1 < 0)
      v43 = v1;
    else
      v43 = v1 & 0xFFFFFFFFFFFFFF8;
    v44 = v10;
    swift_bridgeObjectRetain(v1);
    v45 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v1);
    v10 = v44;
    if (v11 != v45)
      goto LABEL_32;
    goto LABEL_6;
  }
  if (v6 < 0)
    v41 = *(_QWORD *)(v0 + 24);
  else
    v41 = v6 & 0xFFFFFFFFFFFFFF8;
  v42 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  v11 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease(v6);
  v10 = v42;
  v12 = (unint64_t)v1 >> 62;
  if ((unint64_t)v1 >> 62)
    goto LABEL_59;
LABEL_5:
  if (v11 != *(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8)))
    goto LABEL_32;
LABEL_6:
  if (!v11)
    goto LABEL_25;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
  v14 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v6 < 0)
    v13 = v6;
  if (v9)
    v14 = v13;
  v15 = v1 & 0xFFFFFFFFFFFFFF8;
  v16 = (v1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v1 < 0)
    v15 = v1;
  if (v12)
    v16 = v15;
  if (v14 == v16)
    goto LABEL_25;
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_65;
  }
  v48 = v6 & 0xC000000000000001;
  v49 = v10;
  if ((v6 & 0xC000000000000001) != 0)
  {
LABEL_65:
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    goto LABEL_20;
  }
  if (!*(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8)))
  {
    __break(1u);
    goto LABEL_67;
  }
  v17 = *(id *)(v6 + 32);
LABEL_20:
  v9 = v17;
  v47 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_67:
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_23;
  }
  if (!*(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v18 = *(id *)(v1 + 32);
LABEL_23:
  v19 = v18;
  sub_71884(0, (unint64_t *)&qword_DDA70, BDSDistributedPriceTrackingConfigUpdateScheduleStep_ptr);
  v20 = static NSObject.== infix(_:_:)(v9, v19);

  v10 = v49;
  if ((v20 & 1) == 0)
    goto LABEL_32;
  if (v11 != 1)
  {
    if (v48)
    {
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v6);
LABEL_39:
      v30 = v29;
      if (v47)
      {
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v1);
        goto LABEL_43;
      }
      if (*(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)) >= 2uLL)
      {
        v31 = *(id *)(v1 + 40);
LABEL_43:
        v32 = v31;
        v33 = static NSObject.== infix(_:_:)(v30, v31);

        v10 = v49;
        if ((v33 & 1) != 0)
        {
          v46 = 2 - v11;
          v34 = 6;
          while (v46 + v34 != 6)
          {
            v38 = v34 - 4;
            if (v48)
            {
              v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v6);
            }
            else
            {
              if (v38 >= *(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8)))
                goto LABEL_69;
              v39 = *(id *)(v6 + 8 * v34);
            }
            v40 = v39;
            if (v47)
            {
              v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v1);
            }
            else
            {
              if (v38 >= *(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
                goto LABEL_70;
              v35 = *(id *)(v1 + 8 * v34);
            }
            v36 = v35;
            v37 = static NSObject.== infix(_:_:)(v40, v35);

            ++v34;
            v10 = v49;
            if ((v37 & 1) == 0)
              goto LABEL_32;
          }
          goto LABEL_25;
        }
LABEL_32:
        swift_bridgeObjectRelease(v6);
        *(_BYTE *)(v0 + 16) = v5;
        *(_QWORD *)(v0 + 24) = v1;
        *(double *)(v0 + 32) = v4;
        *(double *)(v0 + 40) = v3;
        *(_QWORD *)(v0 + 48) = v2;
        v23 = dword_DDF14;
        swift_bridgeObjectRetain(v1);
        v24 = swift_task_alloc(v23);
        *(_QWORD *)(v0 + 240) = v24;
        *(_QWORD *)v24 = v0;
        *(_QWORD *)(v24 + 8) = sub_74704;
        v25 = *(_OWORD *)(v0 + 168);
        *(_OWORD *)(v24 + 16) = *(_OWORD *)(v0 + 152);
        *(_OWORD *)(v24 + 32) = v25;
        *(_BYTE *)(v24 + 84) = *(_BYTE *)(v0 + 16);
        *(_BYTE *)(v24 + 85) = *(_BYTE *)(v0 + 96);
        *(_QWORD *)(v24 + 48) = *(_QWORD *)(v0 + 104);
        swift_task_switch(sub_6C320, 0, 0);
        return;
      }
LABEL_72:
      __break(1u);
      return;
    }
    if (*(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8)) >= 2uLL)
    {
      v29 = *(id *)(v6 + 40);
      goto LABEL_39;
    }
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
LABEL_25:
  if (v7 != v4 || v8 != v3 || v10 != v2)
    goto LABEL_32;
  swift_bridgeObjectRelease(v1);
  sub_74914(&qword_DDF20, &qword_DDF08, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v28 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 232) = v28;
  *v28 = v0;
  v28[1] = sub_741B4;
  _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 56, 0, 0);
}

uint64_t sub_74704()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_74758, 0, 0);
}

uint64_t sub_74758()
{
  uint64_t v0;
  _QWORD *v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  sub_74914(&qword_DDF20, &qword_DDF08, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>.Iterator);
  v1 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 232) = v1;
  *v1 = v0;
  v1[1] = sub_741B4;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 56, 0, 0);
}

uint64_t sub_747F0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_74814()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_DDF3C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_71F90;
  v2[5] = v0;
  return swift_task_switch(sub_7041C, 0, 0);
}

uint64_t sub_74870()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_74894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_DDF4C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_74A74;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_DDF48 + dword_DDF48))(a1, a2, v6);
}

uint64_t sub_74914(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_72060(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_74954(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_74968(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_74978()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

void sub_749BC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_DDFA4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_74A74;
  __asm { BR              X9; sub_71728 }
}

uint64_t sub_74A94()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_74B10(v0, qword_DEF98);
  sub_6A5CC(v0, (uint64_t)qword_DEF98);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000000A51B0, 0xD000000000000017, 0x80000000000A51D0);
}

uint64_t *sub_74B10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t CollectionControllerMemberManagingAddRequest.storeID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_storeID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_storeID + 8));
  return v1;
}

uint64_t CollectionControllerMemberManagingAddRequest.collectionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_collectionID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_collectionID + 8));
  return v1;
}

uint64_t CollectionControllerMemberManagingAddRequest.forceToTop.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_forceToTop);
}

id CollectionControllerMemberManagingAddRequest.__allocating_init(storeID:collectionID:forceToTop:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  objc_class *v5;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  objc_super v15;

  v11 = objc_allocWithZone(v5);
  v12 = &v11[OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_storeID];
  *v12 = a1;
  v12[1] = a2;
  v13 = &v11[OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_collectionID];
  *v13 = a3;
  v13[1] = a4;
  v11[OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_forceToTop] = a5;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, "init");
}

id CollectionControllerMemberManagingAddRequest.init(storeID:collectionID:forceToTop:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE *v5;
  objc_class *ObjectType;
  _QWORD *v12;
  _QWORD *v13;
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType(v5);
  v12 = &v5[OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_storeID];
  *v12 = a1;
  v12[1] = a2;
  v13 = &v5[OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_collectionID];
  *v13 = a3;
  v13[1] = a4;
  v5[OBJC_IVAR___BKCollectionControllerMemberManagingAddRequest_forceToTop] = a5;
  v15.receiver = v5;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

id CollectionControllerMemberManagingAddRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void CollectionControllerMemberManagingAddRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BKLibrary.CollectionControllerMemberManagingAddRequest", 54, "init()", 6, 0);
  __break(1u);
}

uint64_t CollectionControllerMemberManagingRemoveRequest.storeID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_storeID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_storeID + 8));
  return v1;
}

uint64_t CollectionControllerMemberManagingRemoveRequest.collectionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_collectionID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_collectionID
                                     + 8));
  return v1;
}

id CollectionControllerMemberManagingRemoveRequest.__allocating_init(storeID:collectionID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_storeID];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  v11 = &v9[OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_collectionID];
  *(_QWORD *)v11 = a3;
  *((_QWORD *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, "init");
}

id CollectionControllerMemberManagingRemoveRequest.init(storeID:collectionID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  char *v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = &v4[OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_storeID];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  v11 = &v4[OBJC_IVAR___BKCollectionControllerMemberManagingRemoveRequest_collectionID];
  *(_QWORD *)v11 = a3;
  *((_QWORD *)v11 + 1) = a4;
  v13.receiver = v4;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

void CollectionControllerMemberManagingRemoveRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BKLibrary.CollectionControllerMemberManagingRemoveRequest", 57, "init()", 6, 0);
  __break(1u);
}

uint64_t CollectionControllerMemberManagingModifyResponse.assetID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_assetID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_assetID + 8));
  return v1;
}

uint64_t CollectionControllerMemberManagingModifyResponse.assetContentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_assetContentType);
}

id sub_7512C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  NSString v4;

  v3 = *(_QWORD *)(a1 + *a3 + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t CollectionControllerMemberManagingModifyResponse.collectionTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_collectionTitle);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_collectionTitle
                                     + 8));
  return v1;
}

id CollectionControllerMemberManagingModifyResponse.__allocating_init(assetID:assetContentType:collectionTitle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  char *v13;
  objc_super v15;

  v11 = (char *)objc_allocWithZone(v5);
  v12 = &v11[OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_assetID];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  *(_QWORD *)&v11[OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_assetContentType] = a3;
  v13 = &v11[OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_collectionTitle];
  *(_QWORD *)v13 = a4;
  *((_QWORD *)v13 + 1) = a5;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, "init");
}

id CollectionControllerMemberManagingModifyResponse.init(assetID:assetContentType:collectionTitle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  objc_class *ObjectType;
  char *v12;
  char *v13;
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType(v5);
  v12 = &v5[OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_assetID];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  *(_QWORD *)&v5[OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_assetContentType] = a3;
  v13 = &v5[OBJC_IVAR___BKCollectionControllerMemberManagingModifyResponse_collectionTitle];
  *(_QWORD *)v13 = a4;
  *((_QWORD *)v13 + 1) = a5;
  v15.receiver = v5;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

void CollectionControllerMemberManagingModifyResponse.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BKLibrary.CollectionControllerMemberManagingModifyResponse", 58, "init()", 6, 0);
  __break(1u);
}

id _s9BKLibrary48CollectionControllerMemberManagingModifyResponseCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CollectionControllerMemberManagingAddRequest()
{
  return objc_opt_self(BKCollectionControllerMemberManagingAddRequest);
}

uint64_t method lookup function for CollectionControllerMemberManagingAddRequest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CollectionControllerMemberManagingAddRequest);
}

uint64_t dispatch thunk of CollectionControllerMemberManagingModifyResponse.__allocating_init(assetID:assetContentType:collectionTitle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for CollectionControllerMemberManagingRemoveRequest()
{
  return objc_opt_self(BKCollectionControllerMemberManagingRemoveRequest);
}

uint64_t method lookup function for CollectionControllerMemberManagingRemoveRequest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CollectionControllerMemberManagingRemoveRequest);
}

uint64_t dispatch thunk of CollectionControllerMemberManagingRemoveRequest.__allocating_init(storeID:collectionID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_7546C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *a3 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *a4 + 8));
}

uint64_t type metadata accessor for CollectionControllerMemberManagingModifyResponse()
{
  return objc_opt_self(BKCollectionControllerMemberManagingModifyResponse);
}

uint64_t method lookup function for CollectionControllerMemberManagingModifyResponse(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CollectionControllerMemberManagingModifyResponse);
}

uint64_t sub_754D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_754F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_75514(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for WeakUnsafeSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_6A950(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakUnsafeSendable);
}

uint64_t BKLibraryManager.libraryData(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_75564, 0, 0);
}

uint64_t sub_75564()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (int8x16_t *)swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = type metadata accessor for LibraryData(0);
  *v2 = v0;
  v2[1] = sub_75608;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000013, 0x80000000000A5450, sub_757FC, v1, v3);
}

uint64_t sub_75608()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_7567C, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_7567C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_756B0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v6 = sub_6A50C(&qword_DE138);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = (v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_C3DA0, v12 + 8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v11, v9, v6);
  *(_QWORD *)(v13 + v12) = a3;
  aBlock[4] = sub_771B4;
  v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_75E18;
  aBlock[3] = &unk_C3DB8;
  v14 = _Block_copy(aBlock);
  v15 = v18;
  v16 = a3;
  swift_release(v15);
  objc_msgSend(a2, "performBackgroundReadOnlyBlock:", v14);
  _Block_release(v14);
}

void sub_757FC(uint64_t a1)
{
  uint64_t v1;

  sub_756B0(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_75804(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;

  v4 = type metadata accessor for LibraryData(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_allocWithZone((Class)NSFetchRequest);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithEntityName:", v8);

  v10 = objc_msgSend((id)objc_opt_self(BKLibraryManager), "predicateForLocalOrDownloadingOrImportingLibraryAssets");
  objc_msgSend(v9, "setPredicate:", v10);

  objc_msgSend(v9, "setReturnsDistinctResults:", 1);
  v11 = sub_71884(0, (unint64_t *)&qword_DE130, &off_C0918);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v9, v11);
  v13 = v12;
  v24 = &_swiftEmptyArrayStorage;
  if (!((unint64_t)v12 >> 62))
  {
    v14 = *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v12);
    if (v14)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease_n(v13, 2);
    v18 = &_swiftEmptyArrayStorage;
LABEL_15:
    v20 = swift_bridgeObjectRetain(v18);
    LibraryData.init(librarySummary:)(v20);
    v21 = sub_6A50C(&qword_DE138);
    CheckedContinuation.resume(returning:)(v6, v21);
    swift_bridgeObjectRelease(v18);

    return;
  }
  if (v12 < 0)
    v19 = v12;
  else
    v19 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v14 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v14)
    goto LABEL_14;
LABEL_3:
  if (v14 >= 1)
  {
    v15 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
      else
        v16 = *(id *)(v13 + 8 * v15 + 32);
      v17 = v16;
      ++v15;
      v23 = v16;
      sub_75A9C(&v23, a3, (unint64_t *)&v24);

    }
    while (v14 != v15);
    swift_bridgeObjectRelease_n(v13, 2);
    v18 = v24;
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_75A9C(void **a1, void *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  id v15;
  NSString v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  signed int v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t *v37;
  unint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  _BYTE v43[12];
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unint64_t *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a3;
  v50 = type metadata accessor for LibraryItemTypeData(0);
  v5 = *(_QWORD *)(v50 - 8);
  v6 = __chkstk_darwin(v50);
  v49 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v47 = &v43[-v8];
  v52 = type metadata accessor for ContentType(0);
  v51 = *(_QWORD *)(v52 - 8);
  v9 = __chkstk_darwin(v52);
  v11 = &v43[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v43[-v12];
  v14 = *a1;
  v15 = objc_msgSend(v14, "permanentOrTemporaryAssetID");
  v16 = v15;
  v17 = v15;
  if (!v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v19 = v18;
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v21 = v20;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
  }
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v45 = v23;
  v46 = v22;
  v24 = v15;
  v25 = objc_msgSend(v14, "contentType");
  v44 = objc_msgSend(v14, "isSample");
  type metadata accessor for Utilities(0);
  dispatch thunk of static Utilities.contentType(from:)(v25);
  v26 = objc_msgSend(a2, "contentPrivateIDForContentID:", v17);

  if (v26)
  {
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  v30 = objc_msgSend(a2, "contentUserIDForContentID:", v16);

  if (v30)
  {
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

  }
  else
  {
    v31 = 0;
    v33 = 0;
  }
  v34 = v47;
  if (!v29)
  {
    v27 = 0;
    v29 = 0xE000000000000000;
  }
  if (!v33)
  {
    v31 = 0;
    v33 = 0xE000000000000000;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v51 + 16))(v11, v13, v52);
  LibraryItemTypeData.init(contentPrivateID:contentUserID:contentType:contentID:isSample:)(v27, v29, v31, v33, v11, v46, v45, v44);
  v36 = v49;
  v35 = v50;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v49, v34, v50);
  v37 = v48;
  v38 = *v48;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
  *v37 = v38;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v38 = sub_795D0(0, *(_QWORD *)(v38 + 16) + 1, 1, v38);
    *v37 = v38;
  }
  v41 = *(_QWORD *)(v38 + 16);
  v40 = *(_QWORD *)(v38 + 24);
  if (v41 >= v40 >> 1)
  {
    v38 = sub_795D0(v40 > 1, v41 + 1, 1, v38);
    *v37 = v38;
  }
  *(_QWORD *)(v38 + 16) = v41 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v38+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v41, v36, v35);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v34, v35);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v51 + 8))(v13, v52);
}

void sub_75E18(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t BKLibraryManager.collectionSummaryData()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_75E80, 0, 0);
}

uint64_t sub_75E80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[3];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  v4 = type metadata accessor for CollectionSummaryData(0);
  *v3 = v0;
  v3[1] = sub_75F20;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0xD000000000000017, 0x80000000000A5470, sub_76108, v2, v4);
}

uint64_t sub_75F20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_75F94, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 32));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_75F94()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_75FC8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD aBlock[5];
  uint64_t v14;

  v4 = sub_6A50C(&qword_DE110);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_C3D50, v8 + v6, v7 | 7);
  *(_QWORD *)(v9 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_770E0;
  v14 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_75E18;
  aBlock[3] = &unk_C3D68;
  v10 = _Block_copy(aBlock);
  v11 = v14;
  v12 = a2;
  swift_release(v11);
  objc_msgSend(v12, "performBackgroundReadOnlyBlock:", v10);
  _Block_release(v10);
}

void sub_76108(uint64_t a1)
{
  uint64_t v1;

  sub_75FC8(a1, *(void **)(v1 + 16));
}

uint64_t sub_76110(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  id v48;
  NSString v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  id v68;
  NSString v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  void (**v107)(char *, char *, uint64_t);
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  os_log_t v125;
  void *v126;
  void *v127;
  uint64_t *v128;
  unsigned __int8 *v129;
  _QWORD *v130;
  id v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  void (**v150)(char *, char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;

  v135 = type metadata accessor for CollectionSummaryData(0);
  v134 = *(_QWORD *)(v135 - 8);
  v6 = __chkstk_darwin(v135);
  v132 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v133 = (char *)&v117 - v8;
  v9 = type metadata accessor for CollectionIDData(0);
  v150 = *(void (***)(char *, char *, uint64_t))(v9 - 8);
  v151 = v9;
  v10 = __chkstk_darwin(v9);
  v149 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v148 = (char *)&v117 - v13;
  v14 = __chkstk_darwin(v12);
  v139 = (char *)&v117 - v15;
  __chkstk_darwin(v14);
  v138 = (char *)&v117 - v16;
  v17 = type metadata accessor for Logger(0);
  v144 = *(_QWORD *)(v17 - 8);
  v145 = v17;
  __chkstk_darwin(v17);
  v147 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (unsigned __int8 *)objc_msgSend(a2, "collectionProvider");
  v154 = 0;
  v20 = objc_msgSend(v19, "defaultCollectionsInManagedObjectContext:withError:", a1, &v154);
  v21 = v154;
  if (!v20)
  {
    v89 = v154;
LABEL_51:
    v90 = (void *)_convertNSErrorToError(_:)(v21);

    swift_willThrow();
    v154 = v90;
    swift_errorRetain(v90);
    v91 = sub_6A50C(&qword_DE110);
    CheckedContinuation.resume(throwing:)(&v154, v91);
    swift_unknownObjectRelease(v19);
    return swift_errorRelease(v90);
  }
  v22 = v20;
  v23 = sub_6A50C(&qword_DE118);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);
  v25 = v21;

  v154 = 0;
  v26 = objc_msgSend(v19, "userCollectionsInManagedObjectContext:withError:", a1, &v154);
  v21 = v154;
  if (!v26)
  {
    v89 = v154;
    swift_bridgeObjectRelease(v24);
    goto LABEL_51;
  }
  v27 = v26;
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v23);
  v29 = v21;

  if ((unint64_t)v24 >> 62)
    goto LABEL_72;
  v32 = *(_QWORD *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFF8));
LABEL_5:
  v130 = a3;
  v129 = v19;
  if (v32)
  {
    v136 = a1;
    v140 = 0;
    v146 = v24 & 0xC000000000000001;
    v128 = &v153;
    a3 = &_swiftEmptyArrayStorage;
    v142 = kBKCollectionDefaultAll;
    v33 = 4;
    v137 = kBKCollectionDefaultIDFinished;
    *(_QWORD *)&v31 = 136315394;
    v121 = v31;
    v118 = (unint64_t)"libraryData(using:)";
    v120 = 0x80000000000A5470;
    v119 = (char *)&type metadata for Any + 8;
    v122 = 0x80000000000A54C0;
    *(_QWORD *)&v31 = 136315650;
    v117 = v31;
    v141 = v24;
    v143 = v32;
    while (1)
    {
      v34 = v33 - 4;
      if (v146)
      {
        v35 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v24);
        v36 = v33 - 3;
        if (__OFADD__(v34, 1))
          goto LABEL_70;
      }
      else
      {
        v35 = *(void **)(v24 + 8 * v33);
        swift_unknownObjectRetain(v35, v30);
        v36 = v33 - 3;
        if (__OFADD__(v34, 1))
        {
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          if (v24 < 0)
            v110 = v24;
          else
            v110 = v24 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v24);
          v32 = _CocoaArrayWrapper.endIndex.getter(v110);
          swift_bridgeObjectRelease(v24);
          goto LABEL_5;
        }
      }
      v37 = objc_msgSend(v35, "collectionID", (_QWORD)v117, *((_QWORD *)&v117 + 1));
      if (v37)
      {
        v38 = v37;
        v19 = (unsigned __int8 *)static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;
        if (!(id)BALog())
          goto LABEL_83;
        Logger.init(_:)();
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
        v43 = v42;
        if ((unsigned __int8 *)v41 == v19 && v42 == v40)
        {
          swift_bridgeObjectRelease(v40);
        }
        else
        {
          a1 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v19, v40, 0);
          swift_bridgeObjectRelease(v43);
          if ((a1 & 1) == 0)
          {
            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
            v46 = v45;
            if ((unsigned __int8 *)v44 == v19 && v45 == v40)
            {

              swift_bridgeObjectRelease(v40);
              goto LABEL_26;
            }
            v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v19, v40, 0);
            swift_bridgeObjectRelease(v46);
            if ((v47 & 1) != 0)
            {

LABEL_26:
              v48 = objc_allocWithZone((Class)NSFetchRequest);
              v49 = String._bridgeToObjectiveC()();
              a1 = (uint64_t)objc_msgSend(v48, "initWithEntityName:", v49);

              v50 = objc_msgSend((id)objc_opt_self(BKLibraryManager), "predicateFor_All_Finished_LibraryAssets");
              objc_msgSend((id)a1, "setPredicate:", v50);

              v51 = sub_71884(0, (unint64_t *)&qword_DE130, &off_C0918);
              v52 = v140;
              v53 = NSManagedObjectContext.count<A>(for:)(a1, v51);
              if (v52)
              {
                swift_errorRetain(v52);
                v54 = swift_errorRetain(v52);
                v55 = Logger.logObject.getter(v54);
                v56 = static os_log_type_t.error.getter();
                LODWORD(v131) = v56;
                if (os_log_type_enabled(v55, v56))
                {
                  v57 = swift_slowAlloc(22, -1);
                  v140 = v52;
                  v58 = v57;
                  v124 = (uint64_t *)swift_slowAlloc(8, -1);
                  v126 = (void *)swift_slowAlloc(32, -1);
                  v154 = v126;
                  *(_DWORD *)v58 = v121;
                  v125 = v55;
                  v152 = sub_70DEC(0xD000000000000017, v120, (uint64_t *)&v154);
                  v127 = (void *)a1;
                  v59 = v128;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v128, v58 + 4, v58 + 12);
                  *(_WORD *)(v58 + 12) = 2112;
                  v123 = v58 + 14;
                  v60 = v140;
                  swift_errorRetain(v140);
                  v61 = _swift_stdlib_bridgeErrorToNSError(v60);
                  v152 = v61;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v59, v123, v58 + 22);
                  v62 = v124;
                  *v124 = v61;
                  v63 = v140;
                  swift_errorRelease(v140);
                  swift_errorRelease(v63);
                  v64 = v125;
                  _os_log_impl(&dword_0, v125, (os_log_type_t)v131, "%s: error finding finished collection members: %@", (uint8_t *)v58, 0x16u);
                  v65 = sub_6A50C(&qword_DDCB8);
                  swift_arrayDestroy(v62, 1, v65);
                  swift_slowDealloc(v62, -1, -1);
                  a1 = (uint64_t)v126;
                  swift_arrayDestroy(v126, 1, v119);
                  swift_slowDealloc(a1, -1, -1);
                  swift_slowDealloc(v58, -1, -1);
                  v66 = &v155;
                  goto LABEL_33;
                }

                swift_errorRelease(v52);
LABEL_38:

                swift_errorRelease(v52);
                swift_errorRelease(v52);
                goto LABEL_39;
              }
              v67 = v53;
              v140 = 0;

            }
            else
            {
              v68 = objc_allocWithZone((Class)NSFetchRequest);
              v69 = String._bridgeToObjectiveC()();
              v131 = objc_msgSend(v68, "initWithEntityName:", v69);

              v70 = objc_msgSend((id)objc_opt_self(BKLibraryManager), "predicateForCollectionMembersInCollectionID:hideUnownedItems:", v38, 0);
              v71 = v131;
              objc_msgSend(v131, "setPredicate:", v70);

              v72 = sub_71884(0, (unint64_t *)&unk_DE120, off_C0910);
              v52 = v140;
              v73 = NSManagedObjectContext.fetch<A>(_:)(v71, v72);
              if (v52)
              {
                swift_bridgeObjectRetain(v40);
                swift_errorRetain(v52);
                swift_bridgeObjectRetain(v40);
                v74 = swift_errorRetain(v52);
                v55 = Logger.logObject.getter(v74);
                v75 = static os_log_type_t.error.getter();
                a1 = v75;
                if (!os_log_type_enabled(v55, v75))
                {

                  swift_errorRelease(v52);
                  swift_bridgeObjectRelease_n(v40, 2);
                  goto LABEL_38;
                }
                v76 = swift_slowAlloc(32, -1);
                LODWORD(v126) = a1;
                a1 = v76;
                v124 = (uint64_t *)swift_slowAlloc(8, -1);
                v127 = (void *)swift_slowAlloc(64, -1);
                v154 = v127;
                *(_DWORD *)a1 = v117;
                v125 = v55;
                v152 = sub_70DEC(0xD000000000000017, v118 | 0x8000000000000000, (uint64_t *)&v154);
                v140 = v52;
                v77 = v128;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v128, a1 + 4, a1 + 12);
                *(_WORD *)(a1 + 12) = 2080;
                swift_bridgeObjectRetain(v40);
                v152 = sub_70DEC((uint64_t)v19, v40, (uint64_t *)&v154);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v77, a1 + 14, a1 + 22);
                swift_bridgeObjectRelease_n(v40, 3);
                *(_WORD *)(a1 + 22) = 2112;
                v123 = a1 + 24;
                v78 = v140;
                swift_errorRetain(v140);
                v79 = _swift_stdlib_bridgeErrorToNSError(v78);
                v152 = v79;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v77, v123, a1 + 32);
                v80 = v124;
                *v124 = v79;
                v81 = v140;
                swift_errorRelease(v140);
                swift_errorRelease(v81);
                v64 = v125;
                _os_log_impl(&dword_0, v125, (os_log_type_t)v126, "%s: error finding %s members: %@", (uint8_t *)a1, 0x20u);
                v82 = sub_6A50C(&qword_DDCB8);
                swift_arrayDestroy(v80, 1, v82);
                swift_slowDealloc(v80, -1, -1);
                v83 = v127;
                swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v83, -1, -1);
                swift_slowDealloc(a1, -1, -1);
                v66 = &v156;
LABEL_33:

                swift_errorRelease(v140);
LABEL_39:
                v67 = 0;
                v140 = 0;
              }
              else
              {
                a1 = v73;
                v140 = 0;
                if ((unint64_t)v73 >> 62)
                {
                  if (v73 < 0)
                    v88 = v73;
                  else
                    v88 = v73 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(v73);
                  v67 = _CocoaArrayWrapper.endIndex.getter(v88);

                  swift_bridgeObjectRelease_n(a1, 2);
                }
                else
                {
                  v67 = *(_QWORD *)((char *)&dword_10 + (v73 & 0xFFFFFFFFFFFFF8));
                  swift_bridgeObjectRelease(v73);

                }
              }
            }
            v84 = v138;
            static CollectionIDData.data(with:for:)(v67, v19, v40);
            swift_bridgeObjectRelease(v40);
            v150[2](v139, v84, v151);
            if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0)
              a3 = (_QWORD *)sub_795E4(0, a3[2] + 1, 1, (unint64_t)a3);
            v24 = v141;
            v86 = a3[2];
            v85 = a3[3];
            if (v86 >= v85 >> 1)
              a3 = (_QWORD *)sub_795E4(v85 > 1, v86 + 1, 1, (unint64_t)a3);
            a3[2] = v86 + 1;
            v19 = (unsigned __int8 *)v150;
            v87 = v151;
            v150[4]((char *)a3 + ((v19[80] + 32) & ~(unint64_t)v19[80]) + (_QWORD)v150[9] * v86, v139, v151);
            swift_unknownObjectRelease(v35);
            (*((void (**)(char *, uint64_t))v19 + 1))(v138, v87);
            (*(void (**)(char *, uint64_t))(v144 + 8))(v147, v145);
            v32 = v143;
            goto LABEL_8;
          }
        }
        (*(void (**)(char *, uint64_t))(v144 + 8))(v147, v145);
        swift_unknownObjectRelease(v35);
        swift_bridgeObjectRelease(v40);

        v24 = v141;
        v32 = v143;
      }
      else
      {
        swift_unknownObjectRelease(v35);
      }
LABEL_8:
      ++v33;
      if (v36 == v32)
        goto LABEL_53;
    }
  }
  a3 = &_swiftEmptyArrayStorage;
LABEL_53:
  swift_bridgeObjectRelease(v24);
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v111 = v28;
    else
      v111 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v94 = _CocoaArrayWrapper.endIndex.getter(v111);
    swift_bridgeObjectRelease(v28);
    if (v94)
    {
LABEL_55:
      v147 = (char *)(v28 & 0xC000000000000001);
      v95 = 4;
      v38 = (void *)v28;
      while (1)
      {
        a1 = v95 - 4;
        if (v147)
        {
          v19 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(v95 - 4, v28);
          v28 = v95 - 3;
          if (__OFADD__(a1, 1))
            goto LABEL_71;
        }
        else
        {
          v19 = *(unsigned __int8 **)(v28 + 8 * v95);
          swift_unknownObjectRetain(v19, v93);
          v28 = v95 - 3;
          if (__OFADD__(a1, 1))
            goto LABEL_71;
        }
        v96 = objc_msgSend(v19, "members", (_QWORD)v117);
        if (!v96)
          break;
        v97 = v96;
        v98 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v96, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

        v99 = *(_QWORD *)(v98 + 16);
        swift_bridgeObjectRelease(v98);
        v100 = objc_msgSend(v19, "collectionID");
        if (!v100)
          goto LABEL_82;
        v101 = v100;
        v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
        v104 = v103;

        v105 = v148;
        static CollectionIDData.data(with:for:)(v99, v102, v104);
        swift_bridgeObjectRelease(v104);
        v150[2](v149, v105, v151);
        if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0)
          a3 = (_QWORD *)sub_795E4(0, a3[2] + 1, 1, (unint64_t)a3);
        v24 = a3[2];
        v106 = a3[3];
        if (v24 >= v106 >> 1)
          a3 = (_QWORD *)sub_795E4(v106 > 1, v24 + 1, 1, (unint64_t)a3);
        a3[2] = v24 + 1;
        v107 = v150;
        v108 = v151;
        v150[4]((char *)a3+ ((*((unsigned __int8 *)v107 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v107 + 80))+ (_QWORD)v150[9] * v24, v149, v151);
        swift_unknownObjectRelease(v19);
        ((void (*)(char *, uint64_t))v107[1])(v148, v108);
        ++v95;
        v109 = v28 == v94;
        v28 = (uint64_t)v38;
        if (v109)
          goto LABEL_80;
      }
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:

      __break(1u);
    }
  }
  else
  {
    v94 = *(_QWORD *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFF8));
    if (v94)
      goto LABEL_55;
  }
LABEL_80:
  swift_bridgeObjectRelease(v28);
  v112 = v133;
  CollectionSummaryData.init(collectionSummary:)(a3);
  v113 = v134;
  v114 = v132;
  v115 = v135;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v132, v112, v135);
  v116 = sub_6A50C(&qword_DE110);
  CheckedContinuation.resume(returning:)(v114, v116);
  swift_unknownObjectRelease(v129);
  return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v112, v115);
}

uint64_t sub_77068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_6A50C(&qword_DE110);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_770E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_6A50C(&qword_DE110) - 8) + 80);
  return sub_76110(a1, *(void **)(v1 + 16), (_QWORD *)(v1 + ((v3 + 24) & ~v3)));
}

uint64_t sub_77124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_77134(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_7713C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_6A50C(&qword_DE138);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_771B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_6A50C(&qword_DE138) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_75804(a1, v1 + v4, *(void **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_77210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 184) = v1;
  v4 = (_QWORD *)swift_task_alloc(dword_DE154);
  *(_QWORD *)(v2 + 192) = v4;
  *v4 = v2;
  v4[1] = sub_77274;
  v4[18] = a1;
  v4[19] = v1;
  return swift_task_switch(sub_77974, 0, 0);
}

uint64_t sub_77274(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_77794;
  else
    v5 = sub_772E0;
  return swift_task_switch(v5, 0, 0);
}

_QWORD *sub_772E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  int v16;
  _QWORD *result;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;

  *(_OWORD *)(v0 + 136) = 0u;
  *(_QWORD *)(v0 + 176) = &_swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 152) = 0u;
  v2 = sub_7AFE4(*(_QWORD *)(v1 + 16), 0);
  specialized Array._endMutation()(v2);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 216) = v3;
  if (!v3)
  {
LABEL_15:
    v21 = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
    sub_7816C(v0 + 136);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
  }
  v4 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 200));
  v5 = 0;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    *(_QWORD *)(v0 + 256) = v7;
    *(_QWORD *)(v0 + 240) = 0;
    *(_QWORD *)(v0 + 248) = 0;
    *(_QWORD *)(v0 + 224) = v5;
    *(_QWORD *)(v0 + 232) = v6;
    v8 = v4 + 120 * v7;
    v9 = *(_OWORD *)(v8 + 32);
    v10 = *(_OWORD *)(v8 + 48);
    v11 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(v0 + 64) = v11;
    *(_OWORD *)(v0 + 16) = v9;
    *(_OWORD *)(v0 + 32) = v10;
    v12 = *(_OWORD *)(v8 + 96);
    v13 = *(_OWORD *)(v8 + 112);
    v14 = *(_OWORD *)(v8 + 128);
    *(_DWORD *)(v0 + 127) = *(_DWORD *)(v8 + 143);
    *(_OWORD *)(v0 + 96) = v13;
    *(_OWORD *)(v0 + 112) = v14;
    *(_OWORD *)(v0 + 80) = v12;
    v15 = *(_BYTE *)(v0 + 130);
    v16 = *(unsigned __int16 *)(v0 + 128);
    result = sub_7B0A0((_QWORD *)(v0 + 16));
    if (v16 == 1)
      break;
    if (v16 == 6)
    {
      if ((v15 & 1) == 0)
      {
        v22 = 1;
LABEL_17:
        *(_BYTE *)(v0 + 131) = v22;
        v23 = (_QWORD *)swift_task_alloc(dword_DE15C);
        *(_QWORD *)(v0 + 264) = v23;
        *v23 = v0;
        v23[1] = sub_774A8;
        return (_QWORD *)sub_7830C(v0 + 16);
      }
      goto LABEL_8;
    }
    v18 = __OFADD__(v5++, 1);
    if (v18)
      goto LABEL_19;
    *(_QWORD *)(v0 + 136) = v5;
LABEL_12:
    v19 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 256) + 1;
    sub_7B128((_QWORD *)(v0 + 16));
    if (v20 == v19)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
      goto LABEL_15;
    }
    v7 = *(_QWORD *)(v0 + 256) + 1;
    v4 = *(_QWORD *)(v0 + 200);
  }
  if ((v15 & 1) == 0)
  {
    v22 = 0;
    goto LABEL_17;
  }
LABEL_8:
  v18 = __OFADD__(v6++, 1);
  if (!v18)
  {
    *(_QWORD *)(v0 + 144) = v6;
    goto LABEL_12;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_774A8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_BYTE *)(*(_QWORD *)v1 + 132) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_77504, 0, 0);
}

_QWORD *sub_77504()
{
  _OWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;

  if ((*(_BYTE *)(v2 + 132) & 1) == 0)
  {
    v4 = *(_QWORD *)(v2 + 248);
    v3 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_26;
    v6 = *(unsigned __int8 *)(v2 + 131);
    v7 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 160) = v3;
    v8 = objc_allocWithZone((Class)BDSDistributedPriceTrackingConfigItemID);
    swift_bridgeObjectRetain(v7);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v0 = objc_msgSend(v8, "initWithAdamID:isAudiobook:", v9, v6);

    if (!v0)
      goto LABEL_8;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v1 = *(_QWORD *)((char *)&dword_10 + (*(_QWORD *)(v2 + 176) & 0xFFFFFFFFFFFFFF8));
    v4 = *(_QWORD *)((char *)&dword_18 + (*(_QWORD *)(v2 + 176) & 0xFFFFFFFFFFFFFF8));
    if (v1 >= v4 >> 1)
      goto LABEL_27;
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v2 + 240);
  v5 = v4 + 1;
  if (__OFADD__(v4, 1))
    goto LABEL_25;
  *(_QWORD *)(v2 + 152) = v5;
  v3 = *(_QWORD *)(v2 + 248);
LABEL_9:
  v0 = (_OWORD *)(v2 + 16);
  v11 = *(_QWORD *)(v2 + 224);
  v1 = *(_QWORD *)(v2 + 232);
  v12 = *(_QWORD *)(v2 + 216);
  v13 = *(_QWORD *)(v2 + 256) + 1;
  sub_7B128((_QWORD *)(v2 + 16));
  if (v13 == v12)
  {
LABEL_10:
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 200));
    v14 = *(_QWORD *)(v2 + 176);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 200));
    sub_7816C(v2 + 136);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(v2 + 8))(v14);
  }
  while (1)
  {
    while (1)
    {
      v16 = *(_QWORD *)(v2 + 256) + 1;
      *(_QWORD *)(v2 + 248) = v3;
      *(_QWORD *)(v2 + 256) = v16;
      *(_QWORD *)(v2 + 232) = v1;
      *(_QWORD *)(v2 + 240) = v5;
      *(_QWORD *)(v2 + 224) = v11;
      v17 = *(_QWORD *)(v2 + 200) + 120 * v16;
      v18 = *(_OWORD *)(v17 + 80);
      v20 = *(_OWORD *)(v17 + 32);
      v19 = *(_OWORD *)(v17 + 48);
      *(_OWORD *)(v2 + 48) = *(_OWORD *)(v17 + 64);
      *(_OWORD *)(v2 + 64) = v18;
      *v0 = v20;
      *(_OWORD *)(v2 + 32) = v19;
      v22 = *(_OWORD *)(v17 + 112);
      v21 = *(_OWORD *)(v17 + 128);
      v23 = *(_OWORD *)(v17 + 96);
      *(_DWORD *)(v2 + 127) = *(_DWORD *)(v17 + 143);
      *(_OWORD *)(v2 + 96) = v22;
      *(_OWORD *)(v2 + 112) = v21;
      *(_OWORD *)(v2 + 80) = v23;
      v24 = *(_BYTE *)(v2 + 130);
      v25 = *(unsigned __int16 *)(v2 + 128);
      result = sub_7B0A0((_QWORD *)(v2 + 16));
      if (v25 != 1)
        break;
      if ((v24 & 1) == 0)
      {
        v31 = 0;
        goto LABEL_23;
      }
LABEL_16:
      v4 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v1 + 1, 1);
LABEL_7:
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
        specialized Array._endMutation()(v10);
LABEL_8:
        v5 = *(_QWORD *)(v2 + 240);
        goto LABEL_9;
      }
      *(_QWORD *)(v2 + 144) = v4;
      v26 = *(_QWORD *)(v2 + 216);
      v27 = *(_QWORD *)(v2 + 256) + 1;
      sub_7B128((_QWORD *)(v2 + 16));
      ++v1;
      if (v27 == v26)
        goto LABEL_10;
    }
    if (v25 == 6)
    {
      if ((v24 & 1) == 0)
      {
        v31 = 1;
LABEL_23:
        *(_BYTE *)(v2 + 131) = v31;
        v32 = (_QWORD *)swift_task_alloc(dword_DE15C);
        *(_QWORD *)(v2 + 264) = v32;
        *v32 = v2;
        v32[1] = sub_774A8;
        return (_QWORD *)sub_7830C(v2 + 16);
      }
      goto LABEL_16;
    }
    if (__OFADD__(v11++, 1))
      break;
    *(_QWORD *)(v2 + 136) = v11;
    v29 = *(_QWORD *)(v2 + 216);
    v30 = *(_QWORD *)(v2 + 256) + 1;
    sub_7B128((_QWORD *)(v2 + 16));
    if (v30 == v29)
      goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_77794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v1 = *(_QWORD *)(v0 + 208);
  v2 = type metadata accessor for Logger(0);
  sub_6A5CC(v2, (uint64_t)qword_DEF98);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 208);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 168) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "[WTR-members] Failed to get snapshots for price-tracking assets: %@", v8, 0xCu);
    v11 = sub_6A50C(&qword_DDCB8);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 208));
    swift_errorRelease(v7);
  }

  swift_errorRelease(*(_QWORD *)(v0 + 208));
  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptyArrayStorage);
}

uint64_t sub_7795C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = v1;
  return swift_task_switch(sub_77974, 0, 0);
}

uint64_t sub_77974()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v3 = v0[18];
  v2 = (void *)v0[19];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_77A14;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_785D0;
  v5[3] = &unk_C3E08;
  v5[4] = v4;
  objc_msgSend(v2, "storeAssetIDsOfWantToReadWithLimit:completion:", v3, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_77A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_780F4;
  else
    v2 = sub_77A74;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_77A74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[19];
  v2 = v0[15];
  v0[21] = v2;
  v3 = swift_task_alloc(32);
  v0[22] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[23] = v4;
  v5 = sub_6A50C(&qword_DE170);
  *v4 = v0;
  v4[1] = sub_77B2C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001BLL, 0x80000000000A5540, sub_7B1E4, v3, v5);
}

uint64_t sub_77B2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_78130;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 176));
    v4 = sub_77B98;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_77B98()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  unint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  _QWORD *v62;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = (_QWORD *)sub_78C0C((uint64_t)&_swiftEmptyArrayStorage);
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v46 = v0;
    swift_bridgeObjectRetain(v1);
    v45 = v1;
    v4 = (uint64_t *)(v1 + 80);
    while (1)
    {
      v10 = (char *)*(v4 - 5);
      v50 = v3;
      v51 = *(v4 - 6);
      v11 = *(v4 - 3);
      v13 = (unint64_t *)*(v4 - 2);
      v12 = *(v4 - 1);
      v14 = v4[1];
      v52 = *(v4 - 4);
      v53 = *v4;
      v15 = v4[3];
      v54 = v4[2];
      v16 = v4[5];
      v56 = v4[4];
      v58 = v4[6];
      v60 = *((_WORD *)v4 + 32);
      v61 = *((_BYTE *)v4 + 66);
      v59 = v4[7];
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain_n(v12, 2);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v14);
      v55 = v15;
      swift_bridgeObjectRetain(v15);
      v57 = v16;
      swift_bridgeObjectRetain(v16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      v62 = v2;
      v0 = sub_7EF14((uint64_t)v13, v12);
      v19 = v2[2];
      v20 = (v18 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        swift_once(&qword_DD8A0, sub_74A94);
LABEL_20:
        v34 = type metadata accessor for Logger(0);
        sub_6A5CC(v34, (uint64_t)qword_DEF98);
        v35 = swift_retain(v13);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v39 = swift_slowAlloc(32, -1);
          v62 = (_QWORD *)v39;
          *(_DWORD *)v38 = 136315138;
          v40 = swift_retain(v13);
          v41 = Set.description.getter(v40, &type metadata for String, &protocol witness table for String);
          v43 = v42;
          swift_release(v13);
          *(_QWORD *)(v0 + 136) = sub_70DEC(v41, v43, (uint64_t *)&v62);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v38 + 4, v38 + 12);
          swift_bridgeObjectRelease(v43);
          swift_release_n(v13, 2);
          _os_log_impl(&dword_0, v36, v37, "[WTR-members] Missing snapshots for store IDs %s", v38, 0xCu);
          swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v38, -1, -1);
        }
        else
        {
          swift_release_n(v13, 2);
        }

        return (*(uint64_t (**)(char *))(v0 + 8))(v10);
      }
      v22 = v18;
      if (v2[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v18 & 1) != 0)
            goto LABEL_3;
        }
        else
        {
          sub_7B5F4();
          v2 = v62;
          if ((v22 & 1) != 0)
            goto LABEL_3;
        }
      }
      else
      {
        sub_7B1EC(v21, isUniquelyReferenced_nonNull_native);
        v2 = v62;
        v23 = sub_7EF14((uint64_t)v13, v12);
        if ((v22 & 1) != (v24 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v0 = v23;
        if ((v22 & 1) != 0)
        {
LABEL_3:
          v5 = v2[7] + 120 * v0;
          v6 = *(_QWORD *)(v5 + 8);
          v7 = *(_QWORD *)(v5 + 24);
          v8 = *(_QWORD *)(v5 + 40);
          v9 = *(_QWORD *)(v5 + 56);
          v47 = *(_QWORD *)(v5 + 72);
          v48 = *(_QWORD *)(v5 + 88);
          v49 = *(_QWORD *)(v5 + 104);
          *(_QWORD *)v5 = v51;
          *(_QWORD *)(v5 + 8) = v10;
          *(_QWORD *)(v5 + 16) = v52;
          *(_QWORD *)(v5 + 24) = v11;
          *(_QWORD *)(v5 + 32) = v13;
          *(_QWORD *)(v5 + 40) = v12;
          *(_QWORD *)(v5 + 48) = v53;
          *(_QWORD *)(v5 + 56) = v14;
          *(_QWORD *)(v5 + 64) = v54;
          *(_QWORD *)(v5 + 72) = v55;
          *(_QWORD *)(v5 + 80) = v56;
          *(_QWORD *)(v5 + 88) = v57;
          *(_QWORD *)(v5 + 96) = v58;
          *(_QWORD *)(v5 + 104) = v59;
          *(_WORD *)(v5 + 112) = v60;
          *(_BYTE *)(v5 + 114) = v61;
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease(v6);
          swift_bridgeObjectRelease(v7);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v47);
          swift_bridgeObjectRelease(v48);
          swift_bridgeObjectRelease(v49);
          goto LABEL_4;
        }
      }
      v2[(v0 >> 6) + 8] |= 1 << v0;
      v25 = (unint64_t **)(v2[6] + 16 * v0);
      *v25 = v13;
      v25[1] = (unint64_t *)v12;
      v26 = v2[7] + 120 * v0;
      *(_QWORD *)v26 = v51;
      *(_QWORD *)(v26 + 8) = v10;
      *(_QWORD *)(v26 + 16) = v52;
      *(_QWORD *)(v26 + 24) = v11;
      *(_QWORD *)(v26 + 32) = v13;
      *(_QWORD *)(v26 + 40) = v12;
      *(_QWORD *)(v26 + 48) = v53;
      *(_QWORD *)(v26 + 56) = v14;
      *(_QWORD *)(v26 + 64) = v54;
      *(_QWORD *)(v26 + 72) = v55;
      *(_QWORD *)(v26 + 80) = v56;
      *(_QWORD *)(v26 + 88) = v57;
      *(_QWORD *)(v26 + 96) = v58;
      *(_QWORD *)(v26 + 104) = v59;
      *(_WORD *)(v26 + 112) = v60;
      *(_BYTE *)(v26 + 114) = v61;
      v27 = v2[2];
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        goto LABEL_27;
      v2[2] = v29;
      swift_bridgeObjectRetain(v12);
LABEL_4:
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v12);
      v4 += 15;
      v3 = v50 - 1;
      if (v50 == 1)
      {
        v1 = v45;
        swift_bridgeObjectRelease(v45);
        v0 = v46;
        break;
      }
    }
  }
  v30 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRetain(v2);
  v10 = sub_7B94C(v30, (uint64_t)v2);
  swift_bridgeObjectRelease(v2);
  v31 = *(_QWORD *)(v30 + 16);
  v32 = *(_QWORD *)(v0 + 168);
  if (v31 != *((_QWORD *)v10 + 2))
  {
    v33 = sub_7BB88(*(_QWORD *)(v0 + 168));
    swift_bridgeObjectRelease(v32);
    v13 = sub_79D3C((uint64_t)v2, v33);
    swift_bridgeObjectRelease(v2);
    if (qword_DD8A0 != -1)
      goto LABEL_28;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  swift_bridgeObjectRelease(v2);
  return (*(uint64_t (**)(char *))(v0 + 8))(v10);
}

uint64_t sub_780F4()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_78130()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_7816C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_6A5CC(v2, (uint64_t)qword_DEF98);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_beginAccess(a1, v12, 0, 0);
    v7 = sub_79308();
    v9 = v8;
    v11 = sub_70DEC(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v9);
    _os_log_impl(&dword_0, oslog, v4, "[WTR-members] stats -> %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_7830C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 64) = v1;
  v4 = (_QWORD *)swift_task_alloc(dword_DE164);
  *(_QWORD *)(v2 + 72) = v4;
  *v4 = v2;
  v4[1] = sub_78370;
  v4[40] = a1;
  v4[41] = v1;
  return swift_task_switch(sub_78E24, 0, 0);
}

uint64_t sub_78370(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 72));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_7858C;
  }
  else
  {
    *(_QWORD *)(v4 + 80) = a1;
    v5 = sub_783E8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_783E8()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 80), "familyID");
    v3 = v2;
    if (v2)
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
      v6 = v5;

      *(_QWORD *)(v0 + 16) = v4;
      *(_QWORD *)(v0 + 24) = v6;
      v3 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v0 + 16, &type metadata for String);
      sub_7B1B0(v0 + 16);
    }
    v7 = objc_msgSend(v1, "purchasedDSID");
    v8 = v7;
    if (v7)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

      *(_QWORD *)(v0 + 32) = v9;
      *(_QWORD *)(v0 + 40) = v11;
      v8 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v0 + 32, &type metadata for String);
      sub_7B1B0(v0 + 32);
    }
    v12 = objc_msgSend(v1, "downloadedDSID");
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      *(_QWORD *)(v0 + 48) = v14;
      *(_QWORD *)(v0 + 56) = v16;
      v17 = _bridgeAnythingToObjectiveC<A>(_:)(v0 + 48, &type metadata for String);
      sub_7B1B0(v0 + 48);
    }
    else
    {
      v17 = 0;
    }
    v1 = *(void **)(v0 + 80);
  }
  else
  {
    v8 = 0;
    v3 = 0;
    v17 = 0;
  }
  v18 = objc_msgSend(*(id *)(v0 + 64), "isFamilyPurchaseWithFamilyID:purchaserDSID:downloaderDSID:", v3, v8, v17);
  swift_unknownObjectRelease(v17);
  swift_unknownObjectRelease(v8);
  swift_unknownObjectRelease(v3);
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(id))(v0 + 8))(v18);
}

uint64_t sub_7858C()
{
  uint64_t v0;

  return (*(uint64_t (**)(id))(v0 + 8))(objc_msgSend(*(id *)(v0 + 64), "isFamilyPurchaseWithFamilyID:purchaserDSID:downloaderDSID:", 0, 0, 0));
}

uint64_t sub_785D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_6A50C(&qword_DDCC0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
    return swift_continuation_throwingResume(v3);
  }
}

void sub_78664(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v6 = sub_6A50C(&qword_DE190);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_787C8(a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_C3E30, v12 + v8, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_7BD1C;
  v16 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_78B90;
  aBlock[3] = &unk_C3E48;
  v14 = _Block_copy(aBlock);
  swift_release(v16);
  objc_msgSend(a2, "fetchLibraryAssetsFromStoreIDs:handler:", isa, v14);
  _Block_release(v14);

}

_QWORD *sub_787C8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = &_swiftEmptyArrayStorage;
    sub_79820(0, v1, 0);
    v2 = &_swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_79820(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_79820(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_7C2CC(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_788EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD v38[14];
  unsigned __int16 v39;
  unsigned __int8 v40;
  _QWORD v41[16];

  if (a2)
  {
    v3 = swift_errorRetain(a2);
    swift_willThrow(v3);
    v41[0] = a2;
    v4 = sub_6A50C(&qword_DE190);
    return CheckedContinuation.resume(throwing:)(v41, v4);
  }
  v6 = a1;
  if (!a1)
  {
    v9 = (char *)&_swiftEmptyArrayStorage;
LABEL_25:
    v37 = v9;
    v23 = sub_6A50C(&qword_DE190);
    return CheckedContinuation.resume(returning:)(&v37, v23);
  }
  if (!((unint64_t)a1 >> 62))
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain_n(a1, 2);
    if (v7)
      goto LABEL_6;
LABEL_23:
    v9 = (char *)&_swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_25;
  }
  if (a1 >= 0)
    v21 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v21 = a1;
  swift_bridgeObjectRetain_n(a1, 2);
  v22 = v21;
  v6 = a1;
  result = _CocoaArrayWrapper.endIndex.getter(v22);
  v7 = result;
  if (!result)
    goto LABEL_23;
LABEL_6:
  if (v7 >= 1)
  {
    v8 = 0;
    v25 = v6 & 0xC000000000000001;
    v9 = (char *)&_swiftEmptyArrayStorage;
    v26 = v7;
    do
    {
      if (v25)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      else
        v11 = *(id *)(v6 + 8 * v8 + 32);
      v12 = v11;
      sub_7BED8(v11, (uint64_t)v38);
      v13 = v38[0];
      v15 = v38[2];
      v14 = v38[3];
      v16 = v38[5];
      v35 = v38[4];
      v36 = v38[1];
      v33 = v38[7];
      v34 = v38[6];
      v31 = v38[9];
      v32 = v38[8];
      v29 = v38[11];
      v30 = v38[10];
      v27 = v38[13];
      v28 = v38[12];
      v17 = v40;
      v18 = v39;

      sub_7C288((uint64_t)v38, (uint64_t)v41, &qword_DE198);
      if (v41[5])
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = sub_794B0(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v20 = *((_QWORD *)v9 + 2);
        v19 = *((_QWORD *)v9 + 3);
        if (v20 >= v19 >> 1)
          v9 = sub_794B0((char *)(v19 > 1), v20 + 1, 1, v9);
        *((_QWORD *)v9 + 2) = v20 + 1;
        v10 = &v9[120 * v20];
        *((_QWORD *)v10 + 4) = v13;
        *((_QWORD *)v10 + 5) = v36;
        *((_QWORD *)v10 + 6) = v15;
        *((_QWORD *)v10 + 7) = v14;
        *((_QWORD *)v10 + 8) = v35;
        *((_QWORD *)v10 + 9) = v16;
        *((_QWORD *)v10 + 10) = v34;
        *((_QWORD *)v10 + 11) = v33;
        *((_QWORD *)v10 + 12) = v32;
        *((_QWORD *)v10 + 13) = v31;
        *((_QWORD *)v10 + 14) = v30;
        *((_QWORD *)v10 + 15) = v29;
        *((_QWORD *)v10 + 16) = v28;
        *((_QWORD *)v10 + 17) = v27;
        *((_WORD *)v10 + 72) = v18;
        v10[146] = ((v18 | (v17 << 16)) >> 16) & 1;
        v6 = a1;
      }
      ++v8;
    }
    while (v26 != v8);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_78B90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  unint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_7BD84();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

unint64_t sub_78C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  unint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[19];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_10:
    v23 = v1;
LABEL_11:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v4;
  }
  sub_6A50C(&qword_DE178);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
    goto LABEL_10;
  v25 = v3 + 64;
  swift_retain(v3);
  v27 = v5 - 1;
  v6 = 32;
  for (i = v1; ; v1 = i)
  {
    v26 = v6;
    v7 = v1 + v6;
    v8 = *(_OWORD *)(v7 + 48);
    v38 = *(_OWORD *)(v7 + 32);
    v39 = v8;
    v9 = *(_OWORD *)(v7 + 80);
    v40 = *(_OWORD *)(v7 + 64);
    v41 = v9;
    v10 = *(_OWORD *)(v7 + 112);
    v42 = *(_OWORD *)(v7 + 96);
    *(_OWORD *)v43 = v10;
    *(_DWORD *)&v43[15] = *(_DWORD *)(v7 + 127);
    v11 = *(_OWORD *)(v7 + 16);
    v37[0] = *(_OWORD *)v7;
    v37[1] = v11;
    v12 = v11;
    v13 = v38;
    v14 = v39;
    v15 = v40;
    v35 = v41;
    v36 = *((_QWORD *)&v40 + 1);
    v33 = v42;
    v34 = *((_QWORD *)&v41 + 1);
    v31 = v10;
    v32 = *((_QWORD *)&v42 + 1);
    v30 = *(_QWORD *)&v43[8];
    v28 = v43[18];
    v29 = *(_WORD *)&v43[16];
    v16 = v37[0];
    sub_7BC24(v37);
    result = sub_7EF14(v16, *((uint64_t *)&v16 + 1));
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)(v25 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_OWORD *)(v4[6] + 16 * result) = v16;
    v19 = v4[7] + 120 * result;
    *(_OWORD *)v19 = v12;
    *(_OWORD *)(v19 + 16) = v13;
    *(_OWORD *)(v19 + 32) = v14;
    *(_QWORD *)(v19 + 48) = v15;
    *(_QWORD *)(v19 + 56) = v36;
    *(_QWORD *)(v19 + 64) = v35;
    *(_QWORD *)(v19 + 72) = v34;
    *(_QWORD *)(v19 + 80) = v33;
    *(_QWORD *)(v19 + 88) = v32;
    *(_QWORD *)(v19 + 96) = v31;
    *(_QWORD *)(v19 + 104) = v30;
    *(_WORD *)(v19 + 112) = v29;
    *(_BYTE *)(v19 + 114) = v28;
    v20 = v4[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_13;
    v4[2] = v22;
    if (!v27)
    {
      swift_release(v4);
      v23 = i;
      goto LABEL_11;
    }
    --v27;
    v6 = v26 + 136;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_78E0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 320) = a1;
  *(_QWORD *)(v2 + 328) = v1;
  return swift_task_switch(sub_78E24, 0, 0);
}

uint64_t sub_78E24()
{
  _QWORD *v0;
  NSString v1;
  NSString v2;
  uint64_t v3;
  NSString v4;
  NSString v5;
  NSString v6;
  NSString v7;
  NSString v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  NSString v14;
  NSString v15;

  sub_7C288(v0[40], (uint64_t)(v0 + 23), &qword_DE168);
  sub_7C288((uint64_t)(v0 + 23), (uint64_t)(v0 + 21), &qword_DE168);
  if (v0[22])
    v1 = String._bridgeToObjectiveC()();
  else
    v1 = 0;
  v15 = v1;
  v0[42] = v1;
  sub_7C288(v0[40] + 16, (uint64_t)(v0 + 35), &qword_DE168);
  sub_7C288((uint64_t)(v0 + 35), (uint64_t)(v0 + 19), &qword_DE168);
  if (v0[20])
    v2 = String._bridgeToObjectiveC()();
  else
    v2 = 0;
  v14 = v2;
  v0[43] = v2;
  v3 = v0[40];
  v4 = String._bridgeToObjectiveC()();
  v0[44] = v4;
  sub_7C288(v3 + 48, (uint64_t)(v0 + 27), &qword_DE168);
  sub_7C288((uint64_t)(v0 + 27), (uint64_t)(v0 + 17), &qword_DE168);
  if (v0[18])
    v5 = String._bridgeToObjectiveC()();
  else
    v5 = 0;
  v0[45] = v5;
  sub_7C288(v0[40] + 64, (uint64_t)(v0 + 29), &qword_DE168);
  sub_7C288((uint64_t)(v0 + 29), (uint64_t)(v0 + 15), &qword_DE168);
  if (v0[16])
    v6 = String._bridgeToObjectiveC()();
  else
    v6 = 0;
  v0[46] = v6;
  sub_7C288(v0[40] + 80, (uint64_t)(v0 + 31), &qword_DE168);
  sub_7C288((uint64_t)(v0 + 31), (uint64_t)(v0 + 37), &qword_DE168);
  if (v0[38])
    v7 = String._bridgeToObjectiveC()();
  else
    v7 = 0;
  v0[47] = v7;
  sub_7C288(v0[40] + 96, (uint64_t)(v0 + 33), &qword_DE168);
  sub_7C288((uint64_t)(v0 + 33), (uint64_t)(v0 + 25), &qword_DE168);
  if (v0[26])
    v8 = String._bridgeToObjectiveC()();
  else
    v8 = 0;
  v9 = v0 + 2;
  v0[48] = v8;
  v10 = (void *)v0[41];
  v0[7] = v0 + 39;
  v0[2] = v0;
  v0[3] = sub_790D8;
  v11 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v12 = v0 + 10;
  v12[1] = 0x40000000;
  v12[2] = sub_7922C;
  v12[3] = &unk_C3DF0;
  v12[4] = v11;
  objc_msgSend(v10, "assetAccountIdentifiersForAssetID:path:storeID:purchasedDSID:downloadedDSID:familyID:dataSourceID:completion:", v15, v14, v4, v5, v6, v7, v8, v12);
  return swift_continuation_await(v9);
}

uint64_t sub_790D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 392) = v1;
  if (v1)
    v2 = sub_791B0;
  else
    v2 = sub_79138;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_79138()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 376);
  v3 = *(void **)(v0 + 360);
  v2 = *(void **)(v0 + 368);
  v5 = *(void **)(v0 + 344);
  v4 = *(void **)(v0 + 352);
  v6 = *(void **)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 312);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_791B0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = *(void **)(v0 + 384);
  v3 = *(void **)(v0 + 368);
  v2 = *(void **)(v0 + 376);
  v5 = *(void **)(v0 + 352);
  v4 = *(void **)(v0 + 360);
  v7 = *(void **)(v0 + 336);
  v6 = *(void **)(v0 + 344);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_7922C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_6A50C(&qword_DDCC0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    swift_unknownObjectRetain(a2, a2);
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_792BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_DE14C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_71F90;
  return sub_77210(a1);
}

uint64_t sub_79308()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;

  _StringGuts.grow(_:)(56);
  v0._countAndFlagsBits = 0x3A6465726F6E6769;
  v0._object = (void *)0xE900000000000020;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0x746365726964202CLL;
  v3._object = (void *)0xEF203A64656E774FLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._countAndFlagsBits = 0x796C696D6166202CLL;
  v6._object = (void *)0xEF203A64656E774FLL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 0x3A646E756F66202CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  return 0;
}

char *sub_794B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_6A50C(&qword_DE188);
      v11 = (char *)swift_allocObject(v10, 120 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 120);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[120 * v8 + 32])
          memmove(v13, a4 + 32, 120 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_7B858(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_795D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_795F8(a1, a2, a3, a4, &qword_DE1B0, (uint64_t (*)(_QWORD))&type metadata accessor for LibraryItemTypeData);
}

uint64_t sub_795E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_795F8(a1, a2, a3, a4, &qword_DE1A8, (uint64_t (*)(_QWORD))&type metadata accessor for CollectionIDData);
}

uint64_t sub_795F8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_6A50C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_7BDC0(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_79804(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_7983C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_79820(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_79A24(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_7983C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_6A50C(&qword_DE1B8);
  v11 = *(_QWORD *)(sub_6A50C(&qword_DDA60) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_6A50C(&qword_DDA60);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_79A24(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_6A50C(&qword_DE1A0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_79B90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_7A9F0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t *sub_79D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 64);
    v41 = a1 + 64;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v40)
          goto LABEL_47;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_47;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_47;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_47;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_7BC1C(a1);
                  return (unint64_t *)v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_7A480((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_7BC1C(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_7A480((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_7BC1C(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_7A1A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_6A50C(&qword_DE180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t *sub_7A480(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v39;
  unint64_t *v40;
  _QWORD v41[9];
  uint64_t v42;

  v7 = *(_QWORD *)(a3 + 16);
  v40 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v42 = a3 + 56;
  while (2)
  {
    v39 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          v14 = (unint64_t)(a5[2] + 64) >> 6;
          v15 = a5[3];
          if (v13 >= v14)
            goto LABEL_43;
          v16 = a5[1];
          v17 = *(_QWORD *)(v16 + 8 * v13);
          if (!v17)
          {
            v15 = v9 + 1;
            if (v9 + 2 >= v14)
              goto LABEL_43;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              v13 = v9 + 2;
            }
            else
            {
              v15 = v9 + 2;
              if (v9 + 3 >= v14)
                goto LABEL_43;
              v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                v13 = v9 + 3;
              }
              else
              {
                v13 = v9 + 4;
                v15 = v9 + 3;
                if (v9 + 4 >= v14)
                  goto LABEL_43;
                v17 = *(_QWORD *)(v16 + 8 * v13);
                if (!v17)
                {
                  v15 = v14 - 1;
                  v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    v17 = *(_QWORD *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain(a3);
                  return (unint64_t *)sub_7A75C(v40, a2, v39, a3);
                }
              }
            }
          }
LABEL_21:
          v11 = (v17 - 1) & v17;
          v12 = __clz(__rbit64(v17)) + (v13 << 6);
          v9 = v13;
        }
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v42 + 8 * (v24 >> 6))) != 0)
          break;
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      v27 = *(_QWORD *)(a3 + 48);
      v28 = (_QWORD *)(v27 + 16 * v24);
      v29 = v28[1];
      v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) == 0)
      {
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v42 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_29:
      v31 = v40[v25];
      v40[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v39 - 1;
    if (__OFSUB__(v39, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v39 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_7A75C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_6A50C(&qword_DE180);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_7A9F0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_7A1A4(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_7AB88();
      goto LABEL_22;
    }
    sub_7AD38(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_7AB88()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_6A50C(&qword_DE180);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_7AD38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_6A50C(&qword_DE180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_7AFE4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((char *)&dword_18 + (v5 & 0xFFFFFFFFFFFFF8)) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

_QWORD *sub_7B0A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  swift_bridgeObjectRetain(a1[13]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *sub_7B128(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_7B1B0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

void sub_7B1E4(uint64_t a1)
{
  uint64_t v1;

  sub_78664(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

Swift::Int sub_7B1EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_6A50C(&qword_DE178);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    v36 = v11;
    v37 = v7;
    while (1)
    {
      if (v10)
      {
        v42 = (v10 - 1) & v10;
        v21 = __clz(__rbit64(v10)) | (v14 << 6);
      }
      else
      {
        if (__OFADD__(v14++, 1))
          goto LABEL_42;
        if (v14 >= v11)
        {
LABEL_34:
          swift_release(v5);
          if ((a2 & 1) == 0)
            break;
          v33 = 1 << *(_BYTE *)(v5 + 32);
          if (v33 >= 64)
            bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v35 = -1 << v33;
          v34 = v5;
          *(_QWORD *)(v5 + 16) = 0;
          goto LABEL_40;
        }
        v23 = v35[v14];
        if (!v23)
        {
          v24 = v14 + 1;
          if (v14 + 1 >= v11)
            goto LABEL_34;
          v23 = v35[v24];
          if (!v23)
          {
            while (1)
            {
              v14 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v14 >= v11)
                goto LABEL_34;
              v23 = v35[v14];
              ++v24;
              if (v23)
                goto LABEL_23;
            }
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
            return result;
          }
          ++v14;
        }
LABEL_23:
        v42 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v26 = *v25;
      v27 = v25[1];
      v28 = *(_QWORD *)(v5 + 56) + 120 * v21;
      v38 = *(_QWORD *)v28;
      v48 = *(_OWORD *)(v28 + 24);
      v49 = *(_OWORD *)(v28 + 8);
      v41 = *(_QWORD *)(v28 + 48);
      v46 = *(_OWORD *)(v28 + 72);
      v47 = *(_OWORD *)(v28 + 56);
      v45 = *(_OWORD *)(v28 + 88);
      v43 = *(_QWORD *)(v28 + 104);
      v44 = *(_QWORD *)(v28 + 40);
      v39 = *(_BYTE *)(v28 + 114);
      v40 = *(_WORD *)(v28 + 112);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v47);
        v11 = v36;
        swift_bridgeObjectRetain(v46);
        v7 = v37;
        swift_bridgeObjectRetain(v45);
      }
      Hasher.init(_seed:)(v50, *(_QWORD *)(v7 + 40));
      String.hash(into:)(v50, v26, v27);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v31 = v17 == v30;
          if (v17 == v30)
            v17 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v32 == -1);
        v18 = __clz(__rbit64(~v32)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
      *v19 = v26;
      v19[1] = v27;
      v20 = *(_QWORD *)(v7 + 56) + 120 * v18;
      *(_QWORD *)v20 = v38;
      *(_OWORD *)(v20 + 8) = v49;
      *(_OWORD *)(v20 + 24) = v48;
      v10 = v42;
      *(_QWORD *)(v20 + 40) = v44;
      *(_QWORD *)(v20 + 48) = v41;
      *(_OWORD *)(v20 + 56) = v47;
      *(_OWORD *)(v20 + 72) = v46;
      *(_OWORD *)(v20 + 88) = v45;
      *(_QWORD *)(v20 + 104) = v43;
      *(_WORD *)(v20 + 112) = v40;
      *(_BYTE *)(v20 + 114) = v39;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  v34 = v5;
LABEL_40:
  result = swift_release(v34);
  *v3 = v7;
  return result;
}

void *sub_7B5F4()
{
  uint64_t *v0;
  uint64_t v1;
  void *result;
  unint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  int64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_6A50C(&qword_DE178);
  v38 = v0;
  v1 = *v0;
  v41 = static _DictionaryStorage.copy(original:)(*v0);
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_24:
    result = (void *)swift_release(v1);
    *v38 = v41;
    return result;
  }
  result = (void *)(v41 + 64);
  v3 = (unint64_t)((1 << *(_BYTE *)(v41 + 32)) + 63) >> 6;
  if (v41 != v1 || (unint64_t)result >= v1 + 64 + 8 * v3)
    result = memmove(result, (const void *)(v1 + 64), 8 * v3);
  v5 = 0;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v1 + 16);
  v6 = 1 << *(_BYTE *)(v1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v1 + 64);
  v39 = (unint64_t)(v6 + 63) >> 6;
  v40 = v1 + 64;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v5++, 1))
      goto LABEL_26;
    if (v5 >= v39)
      goto LABEL_24;
    v36 = *(_QWORD *)(v40 + 8 * v5);
    if (!v36)
      break;
LABEL_23:
    v8 = (v36 - 1) & v36;
    v10 = __clz(__rbit64(v36)) + (v5 << 6);
LABEL_12:
    v11 = 16 * v10;
    v12 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v10);
    v13 = *v12;
    v14 = v12[1];
    v15 = 120 * v10;
    v16 = *(_QWORD *)(v1 + 56) + v15;
    v17 = *(_QWORD *)v16;
    v19 = *(_QWORD *)(v16 + 40);
    v18 = *(_QWORD *)(v16 + 48);
    v20 = *(_QWORD *)(v16 + 104);
    v21 = *(_WORD *)(v16 + 112);
    v22 = *(_BYTE *)(v16 + 114);
    v23 = (_QWORD *)(*(_QWORD *)(v41 + 48) + v11);
    v24 = *(_OWORD *)(v16 + 8);
    v25 = *(_OWORD *)(v16 + 24);
    v26 = *(_OWORD *)(v16 + 56);
    v27 = *(_OWORD *)(v16 + 72);
    v28 = *(_OWORD *)(v16 + 88);
    *v23 = v13;
    v23[1] = v14;
    v29 = *(_QWORD *)(v41 + 56) + v15;
    *(_QWORD *)v29 = v17;
    *(_OWORD *)(v29 + 8) = v24;
    *(_OWORD *)(v29 + 24) = v25;
    *(_QWORD *)(v29 + 40) = v19;
    *(_QWORD *)(v29 + 48) = v18;
    *(_OWORD *)(v29 + 56) = v26;
    *(_OWORD *)(v29 + 72) = v27;
    *(_OWORD *)(v29 + 88) = v28;
    *(_QWORD *)(v29 + 104) = v20;
    v30 = v24;
    *(_WORD *)(v29 + 112) = v21;
    *(_BYTE *)(v29 + 114) = v22;
    v31 = v25;
    v32 = v26;
    v33 = v27;
    v34 = v28;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    result = (void *)swift_bridgeObjectRetain(v34);
  }
  v37 = v5 + 1;
  if (v5 + 1 >= v39)
    goto LABEL_24;
  v36 = *(_QWORD *)(v40 + 8 * v37);
  if (v36)
  {
    ++v5;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v5 >= v39)
      goto LABEL_24;
    v36 = *(_QWORD *)(v40 + 8 * v5);
    ++v37;
    if (v36)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_7B858(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 120 * a1 + 32;
  v6 = a3 + 120 * v4;
  if (v5 >= v6 || v5 + 120 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_7B94C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (char *)&_swiftEmptyArrayStorage;
  v24 = swift_bridgeObjectRetain(a1);
  v4 = (uint64_t *)(v24 + 40);
  v5 = (char *)&_swiftEmptyArrayStorage;
  v25 = a2;
  do
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain_n(*v4, 2);
      v8 = sub_7EF14(v7, v6);
      if ((v9 & 1) != 0)
      {
        v10 = *(_QWORD *)(a2 + 56) + 120 * v8;
        v11 = *(_QWORD *)(v10 + 8);
        v37 = *(_QWORD *)v10;
        v12 = *(_QWORD *)(v10 + 24);
        v36 = *(_QWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v10 + 40);
        v33 = *(_QWORD *)(v10 + 48);
        v34 = *(_QWORD *)(v10 + 32);
        v14 = v5;
        v15 = *(_QWORD *)(v10 + 56);
        v16 = *(_QWORD *)(v10 + 72);
        v31 = *(_QWORD *)(v10 + 80);
        v32 = *(_QWORD *)(v10 + 64);
        v17 = *(_QWORD *)(v10 + 88);
        v26 = *(_BYTE *)(v10 + 114);
        v27 = *(_WORD *)(v10 + 112);
        v28 = *(_QWORD *)(v10 + 104);
        v29 = *(_QWORD *)(v10 + 96);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v11);
        v35 = v12;
        swift_bridgeObjectRetain(v12);
        v30 = v13;
        v18 = v13;
        v19 = v15;
        v5 = v14;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRelease_n(v6, 2);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v5 = sub_794B0(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
        v21 = *((_QWORD *)v5 + 2);
        v20 = *((_QWORD *)v5 + 3);
        a2 = v25;
        if (v21 >= v20 >> 1)
          v5 = sub_794B0((char *)(v20 > 1), v21 + 1, 1, v5);
        *((_QWORD *)v5 + 2) = v21 + 1;
        v22 = &v5[120 * v21];
        *((_QWORD *)v22 + 4) = v37;
        *((_QWORD *)v22 + 5) = v11;
        *((_QWORD *)v22 + 6) = v36;
        *((_QWORD *)v22 + 7) = v35;
        *((_QWORD *)v22 + 8) = v34;
        *((_QWORD *)v22 + 9) = v30;
        *((_QWORD *)v22 + 10) = v33;
        *((_QWORD *)v22 + 11) = v19;
        *((_QWORD *)v22 + 12) = v32;
        *((_QWORD *)v22 + 13) = v16;
        *((_QWORD *)v22 + 14) = v31;
        *((_QWORD *)v22 + 15) = v17;
        *((_QWORD *)v22 + 16) = v29;
        *((_QWORD *)v22 + 17) = v28;
        *((_WORD *)v22 + 72) = v27;
        v22[146] = v26;
      }
      else
      {
        swift_bridgeObjectRelease_n(v6, 2);
      }
    }
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v24);
  return v5;
}

uint64_t sub_7BB88(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_79B90(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_7BC1C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_7BC24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  swift_bridgeObjectRetain(a1[15]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_7BCB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_6A50C(&qword_DE190);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_7BD1C(uint64_t a1, uint64_t a2)
{
  sub_6A50C(&qword_DE190);
  return sub_788EC(a1, a2);
}

uint64_t sub_7BD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_7BD7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_7BD84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_DE130;
  if (!qword_DE130)
  {
    v1 = objc_opt_self(BKLibraryAsset);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_DE130);
  }
  return result;
}

uint64_t sub_7BDC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_7BED8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;

  v4 = objc_msgSend(a1, "storeID");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v58 = v7;
    v59 = v6;

    v8 = objc_msgSend(a1, "assetID");
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v56 = v11;
      v57 = v10;

    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
    v20 = objc_msgSend(a1, "path");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v54 = v23;
      v55 = v22;

    }
    else
    {
      v54 = 0;
      v55 = 0;
    }
    v24 = objc_msgSend(a1, "purchasedDSID");
    if (v24)
    {
      v25 = v24;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

    }
    else
    {
      v52 = 0;
      v27 = 0;
    }
    v28 = objc_msgSend(a1, "downloadedDSID", v52);
    if (v28)
    {
      v29 = v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v32 = v31;

    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v33 = objc_msgSend(a1, "familyID");
    if (v33)
    {
      v34 = v33;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v37 = v36;

    }
    else
    {
      v35 = 0;
      v37 = 0;
    }
    v38 = objc_msgSend(a1, "dataSourceIdentifier");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v42 = (unsigned __int16)objc_msgSend(a1, "contentType");
    if (objc_msgSend(a1, "isOwned"))
      v43 = 0x10000;
    else
      v43 = 0;
    v44 = v43 & 0xFFFF0000 | v42;
    v46 = v58;
    v45 = v59;
    v48 = v56;
    v47 = v57;
    v50 = v54;
    v49 = v55;
    v51 = v53;
  }
  else
  {
    if (qword_DD8A0 != -1)
      swift_once(&qword_DD8A0, sub_74A94);
    v12 = type metadata accessor for Logger(0);
    sub_6A5CC(v12, (uint64_t)qword_DEF98);
    v13 = a1;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v60 = v13;
      v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v16 + 4, v16 + 12);
      *v17 = v13;

      _os_log_impl(&dword_0, v14, v15, "[WTR-members] Received WTR collection member asset: %@ without store ID", v16, 0xCu);
      v19 = sub_6A50C(&qword_DDCB8);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

    }
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v45 = 0;
    v46 = 0;
    v51 = 0;
    v27 = 0;
    v30 = 0;
    v32 = 0;
    v35 = 0;
    v37 = 0;
    v39 = 0;
    v41 = 0;
    v44 = 0;
  }
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v48;
  *(_QWORD *)(a2 + 16) = v49;
  *(_QWORD *)(a2 + 24) = v50;
  *(_QWORD *)(a2 + 32) = v45;
  *(_QWORD *)(a2 + 40) = v46;
  *(_QWORD *)(a2 + 48) = v51;
  *(_QWORD *)(a2 + 56) = v27;
  *(_QWORD *)(a2 + 64) = v30;
  *(_QWORD *)(a2 + 72) = v32;
  *(_QWORD *)(a2 + 80) = v35;
  *(_QWORD *)(a2 + 88) = v37;
  *(_QWORD *)(a2 + 96) = v39;
  *(_QWORD *)(a2 + 104) = v41;
  *(_WORD *)(a2 + 112) = v44;
  *(_BYTE *)(a2 + 114) = BYTE2(v44);
}

uint64_t sub_7C288(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_6A50C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_OWORD *sub_7C2CC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t destroy for AssetSnapshot(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for AssetSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for AssetSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  return a1;
}

__n128 initializeWithTake for AssetSnapshot(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_DWORD *)(a1 + 111) = *(_DWORD *)((char *)a2 + 111);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for AssetSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetSnapshot(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 115))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetSnapshot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 114) = 0;
    *(_WORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 115) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 115) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetSnapshot()
{
  return &type metadata for AssetSnapshot;
}

uint64_t sub_7C73C()
{
  return type metadata accessor for AccountsObserver(0);
}

uint64_t type metadata accessor for AccountsObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_DE258;
  if (!qword_DE258)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccountsObserver);
  return result;
}

void sub_7C780(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  sub_7C7F8(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_7C7F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_DE268)
  {
    v2 = sub_72060((uint64_t *)&unk_DE270);
    v3 = type metadata accessor for AsyncStream.Continuation(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_DE268);
  }
}

uint64_t sub_7C850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *Strong;
  void *v10;
  id v11;
  uint64_t v13;
  id v14;

  v1 = sub_6A50C((uint64_t *)&unk_DDEB0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_6A50C((uint64_t *)&unk_DE280);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC9BKLibraryP33_05F439DD99DBF9E3F4595B1087281DC916AccountsObserver_continuation, v1);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9BKLibraryP33_05F439DD99DBF9E3F4595B1087281DC916AccountsObserver_provider);
  if (Strong)
  {
    v10 = Strong;
    v11 = objc_msgSend(Strong, "activeStoreAccount");
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v11 = 0;
  }
  v14 = v11;
  AsyncStream.Continuation.yield(_:)(&v14, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_7C99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return swift_task_switch(sub_7C9B8, 0, 0);
}

uint64_t sub_7C9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  Notification.object.getter();
  if (!*(_QWORD *)(v0 + 40))
  {
    sub_7CA84(v0 + 16);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_9:
    v6 = 0;
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(v6 & 1);
  }
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  if (v3 == v1 && v4 == v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
    v6 = 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 56), v1, v2, 0);
    swift_bridgeObjectRelease(v4);
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v6 & 1);
}

uint64_t sub_7CA70()
{
  uint64_t v0;

  return sub_7CA7C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_7CA7C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_7CA84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_6A50C(&qword_DE2A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_7CAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of BCCloudGlobalMetadataManaging.fetchBool(forKey:)[1]);
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = sub_7CB3C;
  return dispatch thunk of BCCloudGlobalMetadataManaging.fetchBool(forKey:)(0xD000000000000023, 0x80000000000A5160, a1, a2);
}

uint64_t sub_7CB3C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 24);
  v5 = *v2;
  *(_QWORD *)(v5 + 32) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_7CBB0, 0, 0);
  else
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(a1 & 1);
}

uint64_t sub_7CBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_6A5CC(v2, (uint64_t)qword_DEF98);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "[Metadata] Failed to get notificationsEnabled: %@", v8, 0xCu);
    v11 = sub_6A50C(&qword_DDCB8);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 32));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_7CD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  *(_BYTE *)(v3 + 44) = a1;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of BCCloudGlobalMetadataManaging.update(_:forKey:)[1]);
  *(_QWORD *)(v3 + 24) = v7;
  *v7 = v3;
  v7[1] = sub_7CE04;
  return dispatch thunk of BCCloudGlobalMetadataManaging.update(_:forKey:)(a1, 0xD000000000000023, 0x80000000000A5160, a2, a3);
}

uint64_t sub_7CE04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  v3 = *v1;
  *(_QWORD *)(v3 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_7CE70, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_7CE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (qword_DD8A0 != -1)
    swift_once(&qword_DD8A0, sub_74A94);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_6A5CC(v2, (uint64_t)qword_DEF98);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = *(unsigned __int8 *)(v0 + 44);
    v9 = swift_slowAlloc(18, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109378;
    *(_DWORD *)(v0 + 40) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 44, v9 + 4, v9 + 8);
    *(_WORD *)(v9 + 8) = 2112;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 10, v9 + 18);
    *v10 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "[Metadata] Failed to set notificationsEnabled → %{BOOL}d: %@", (uint8_t *)v9, 0x12u);
    v12 = sub_6A50C(&qword_DDCB8);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 32));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_7D060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch(sub_7D084, 0, 0);
}

uint64_t sub_7D084()
{
  _QWORD *v0;
  void *v1;
  int *v2;
  NSString v3;
  id v4;
  _QWORD *v5;
  uint64_t (*v7)(BOOL);

  v1 = (void *)v0[4];
  v2 = (int *)v0[5];
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "beginBackgroundTaskWithName:expirationHandler:", v3, 0);
  v0[9] = v4;

  v0[10] = UIBackgroundTaskInvalid;
  v7 = (uint64_t (*)(BOOL))((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[11] = v5;
  *v5 = v0;
  v5[1] = sub_7D130;
  return v7(v4 != (id)UIBackgroundTaskInvalid);
}

uint64_t sub_7D130()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_7D184, 0, 0);
}

uint64_t sub_7D184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  (*(void (**)(void))(v0 + 56))();
  if (v2 != v1)
    objc_msgSend(*(id *)(v0 + 32), "endBackgroundTask:", *(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NSUserDefaults.priceTrackerDealAbsoluteThresholdOverride.getter()
{
  return sub_7DC2C();
}

uint64_t NSUserDefaults.priceTrackerDealRelativeThresholdOverride.getter()
{
  return sub_7DC2C();
}

id NSUserDefaults.priceTrackerCardLimitOverride.getter()
{
  return sub_7E064();
}

id NSUserDefaults.priceTrackerEnabledOverride.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

uint64_t NSUserDefaults.priceTrackerUpdateScheduleStepsOverride.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "stringForKey:", v1);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_7D358@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  _BYTE v27[8];
  uint64_t v28;

  v26[1] = a1;
  v1 = sub_6A50C(&qword_DE2C8);
  __chkstk_darwin(v1);
  v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_6A50C(&qword_DE2D0);
  __chkstk_darwin(v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
  v8 = (void *)BDSPriceTrackerCardListDidChangeObject;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(BDSPriceTrackerCardListDidChangeObject);
  v11 = v10;
  v12 = BDSPriceTrackerCardListDidChange;
  v13 = v8;
  v14 = NSNotificationCenter.notifications(named:object:)(v12, v8);

  v15 = swift_allocObject(&unk_C3FA0, 32, 7);
  *(_QWORD *)(v15 + 16) = v9;
  *(_QWORD *)(v15 + 24) = v11;
  v28 = v14;
  v16 = type metadata accessor for NSNotificationCenter.Notifications(0);
  v17 = sub_71EFC();
  AsyncFilterSequence.init(_:isIncluded:)(&v28, &unk_DE2D8, v15, v16, v17);
  v18 = sub_74914(&qword_DE2E0, &qword_DE2C8, (uint64_t)&protocol conformance descriptor for AsyncFilterSequence<A>);
  AsyncMapSequence.init(_:transform:)(v3, &unk_DE290, 0, v1, (char *)&type metadata for () + 8, v18);

  v19 = swift_unknownObjectWeakInit(v27, 0);
  v20 = swift_unknownObjectWeakAssign(v19, v26[0]);
  sub_7E58C(v20, (uint64_t)&v28);
  sub_7E58C((uint64_t)&v28, (uint64_t)v27);
  v21 = swift_allocObject(&unk_C3FC8, 24, 7);
  sub_7E58C((uint64_t)v27, v21 + 16);
  v22 = swift_allocObject(&unk_C3FF0, 32, 7);
  *(_QWORD *)(v22 + 16) = &unk_DE2F8;
  *(_QWORD *)(v22 + 24) = v21;
  v23 = sub_6A50C(&qword_DE168);
  v24 = sub_74914(&qword_DE310, &qword_DE2D0, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  return AsyncMapSequence.init(_:transform:)(v6, &unk_DE308, v22, v4, v23, v24);
}

id NSUserDefaults.priceTrackerHasShownOptInAlert.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

void NSUserDefaults.priceTrackerHasShownOptInAlert.setter(char a1)
{
  sub_7D7C8(a1);
}

uint64_t sub_7D64C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_7D664, 0, 0);
}

uint64_t sub_7D664()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 16));
  if (!Strong)
    goto LABEL_5;
  v2 = Strong;
  v3 = objc_msgSend(Strong, "stringForKey:", BDSPriceTrackerCardList);
  if (!v3)
  {

LABEL_5:
    v5 = 0;
    v7 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v7);
  }
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v7);
}

uint64_t sub_7D6F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = v3;
  v4[1] = sub_7D750;
  return v6();
}

uint64_t sub_7D750(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v7;

  v5 = *(_QWORD **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 24));
  *v5 = a1;
  v5[1] = a2;
  return (*(uint64_t (**)(void))(v7 + 8))();
}

void NSUserDefaults.priceTrackerEnabledOverride.setter(char a1)
{
  sub_7D7C8(a1);
}

void sub_7D7C8(char a1)
{
  void *v1;
  id v3;

  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setBool:forKey:", a1 & 1, v3);

}

void (*NSUserDefaults.priceTrackerEnabledOverride.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  NSString v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "BOOLForKey:", v3);

  *(_BYTE *)(a1 + 8) = v4;
  return sub_7D88C;
}

void sub_7D88C(uint64_t a1)
{
  sub_7E2A0(a1);
}

void sub_7D8A8(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "stringForKey:", v4);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a2 = v6;
  a2[1] = v8;
}

void sub_7D93C(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  NSString v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  if (v2)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v4 = 0;
  }
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKey:", v4, v5);
  swift_unknownObjectRelease(v4);

}

void NSUserDefaults.priceTrackerUpdateScheduleStepsOverride.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", v4, v5);
  swift_unknownObjectRelease(v4);

}

uint64_t (*NSUserDefaults.priceTrackerUpdateScheduleStepsOverride.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "stringForKey:", v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_7DB0C;
}

uint64_t sub_7DB0C(uint64_t a1, char a2)
{
  uint64_t v3;
  NSString v4;
  void *v5;
  NSString v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v3);
    }
    else
    {
      v4 = 0;
    }
    v5 = *(void **)(a1 + 16);
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setObject:forKey:", v4, v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    if (v3)
    {
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v3);
    }
    else
    {
      v4 = 0;
    }
    v7 = *(void **)(a1 + 16);
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setObject:forKey:", v4, v6);
  }

  return swift_unknownObjectRelease(v4);
}

void NSUserDefaults.priceTrackerDealAbsoluteThresholdOverride.setter(uint64_t a1, char a2)
{
  sub_7DE08(a1, a2);
}

uint64_t sub_7DC2C()
{
  void *v0;
  NSString v1;
  id v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v7, v2);
    swift_unknownObjectRelease(v2);
    sub_7CA84((uint64_t)v7);
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "doubleForKey:", v3);
    v5 = v4;

    return v5;
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    sub_7CA84((uint64_t)v7);
    return 0;
  }
}

uint64_t (*NSUserDefaults.priceTrackerDealAbsoluteThresholdOverride.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = sub_7DC2C();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return sub_7DD5C;
}

uint64_t sub_7DD5C(uint64_t a1)
{
  return sub_7DEEC(a1);
}

void sub_7DD70(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  id v4;

  v2 = *a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    isa = 0;
  else
    isa = Double._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", isa, v4);
  swift_unknownObjectRelease(isa);

}

void NSUserDefaults.priceTrackerDealRelativeThresholdOverride.setter(uint64_t a1, char a2)
{
  sub_7DE08(a1, a2);
}

void sub_7DE08(uint64_t a1, char a2)
{
  void *v2;
  NSNumber v3;
  id v4;

  if ((a2 & 1) != 0)
    v3.super.super.isa = 0;
  else
    v3.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", v3.super.super.isa, v4);
  swift_unknownObjectRelease(v3.super.super.isa);

}

uint64_t (*NSUserDefaults.priceTrackerDealRelativeThresholdOverride.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = sub_7DC2C();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return sub_7DED8;
}

uint64_t sub_7DED8(uint64_t a1)
{
  return sub_7DEEC(a1);
}

uint64_t sub_7DEEC(uint64_t a1)
{
  Class isa;
  void *v3;
  NSString v4;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    isa = 0;
  else
    isa = Double._bridgeToObjectiveC()().super.super.isa;
  v3 = *(void **)(a1 + 16);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKey:", isa, v4);

  return swift_unknownObjectRelease(isa);
}

void sub_7DF68(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  id v4;

  v2 = *a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    isa = 0;
  else
    isa = Int._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", isa, v4);
  swift_unknownObjectRelease(isa);

}

void NSUserDefaults.priceTrackerCardLimitOverride.setter(uint64_t a1, char a2)
{
  void *v2;
  NSNumber v3;
  id v4;

  if ((a2 & 1) != 0)
    v3.super.super.isa = 0;
  else
    v3.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", v3.super.super.isa, v4);
  swift_unknownObjectRelease(v3.super.super.isa);

}

id sub_7E064()
{
  void *v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;
  _OWORD v6[2];

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
    sub_7CA84((uint64_t)v6);
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v0, "integerForKey:", v3);

  }
  else
  {
    memset(v6, 0, sizeof(v6));
    sub_7CA84((uint64_t)v6);
    return 0;
  }
  return v4;
}

uint64_t (*NSUserDefaults.priceTrackerCardLimitOverride.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = sub_7E064();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return sub_7E18C;
}

uint64_t sub_7E18C(uint64_t a1)
{
  Class isa;
  void *v3;
  NSString v4;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    isa = 0;
  else
    isa = Int._bridgeToObjectiveC()().super.super.isa;
  v3 = *(void **)(a1 + 16);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKey:", isa, v4);

  return swift_unknownObjectRelease(isa);
}

void (*NSUserDefaults.priceTrackerHasShownOptInAlert.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  NSString v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "BOOLForKey:", v3);

  *(_BYTE *)(a1 + 8) = v4;
  return sub_7E284;
}

void sub_7E284(uint64_t a1)
{
  sub_7E2A0(a1);
}

void sub_7E2A0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)a1;
  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setBool:forKey:", v2, v3);

}

void sub_7E2F4(void **a1@<X0>, _BYTE *a2@<X8>)
{
  sub_7E440(a1, a2);
}

void sub_7E310(unsigned __int8 *a1, void **a2)
{
  sub_7E4B4(a1, a2);
}

uint64_t sub_7E334@<X0>(uint64_t a1@<X8>)
{
  return sub_7E3E8(0xD000000000000029, 0x80000000000A4C20, (uint64_t (*)(uint64_t, uint64_t))sub_7DC2C, a1);
}

void sub_7E358(uint64_t a1, void **a2)
{
  sub_7DD70(a1, a2);
}

uint64_t sub_7E37C@<X0>(uint64_t a1@<X8>)
{
  return sub_7E3E8(0xD000000000000029, 0x80000000000A4BF0, (uint64_t (*)(uint64_t, uint64_t))sub_7DC2C, a1);
}

void sub_7E3A0(uint64_t a1, void **a2)
{
  sub_7DD70(a1, a2);
}

uint64_t sub_7E3C4@<X0>(uint64_t a1@<X8>)
{
  return sub_7E3E8(0xD00000000000001DLL, 0x80000000000A4BD0, (uint64_t (*)(uint64_t, uint64_t))sub_7E064, a1);
}

uint64_t sub_7E3E8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t (*a3)(uint64_t, uint64_t)@<X5>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = a3(a1, a2);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

void sub_7E424(void **a1@<X0>, _BYTE *a2@<X8>)
{
  sub_7E440(a1, a2);
}

void sub_7E440(void **a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  NSString v4;

  v3 = *a1;
  v4 = String._bridgeToObjectiveC()();
  LOBYTE(v3) = objc_msgSend(v3, "BOOLForKey:", v4);

  *a2 = (_BYTE)v3;
}

void sub_7E498(unsigned __int8 *a1, void **a2)
{
  sub_7E4B4(a1, a2);
}

void sub_7E4B4(unsigned __int8 *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *a1;
  v3 = *a2;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setBool:forKey:", v2, v4);

}

uint64_t sub_7E508()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_7E52C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_DE29C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_71F90;
  return sub_7C99C(a1, v5, v4);
}

uint64_t sub_7E58C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_6A50C(&qword_DE2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_7E5D4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_7E5F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_DE2F4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_70C0C;
  v2[2] = v0 + 16;
  return swift_task_switch(sub_7D664, 0, 0);
}

uint64_t sub_7E658()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_7E67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_DE304);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_71920;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_DE300 + dword_DE300))(a1, a2, v6);
}

id sub_7E6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  NSString v17;
  NSString v18;
  NSString v19;
  NSString v20;
  NSString v21;
  NSString v22;
  id v23;
  id v25;

  v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v12));
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a12);
  v23 = objc_msgSend(v25, "initWithTitleSingleAudiobook:titleSingleBook:titleMultiple:bodySingleAudiobook:bodySingleBook:bodyMultiple:", v17, v18, v19, v20, v21, v22);

  return v23;
}

id sub_7E860()
{
  id result;
  void *v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSString v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSString v38;
  NSString v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  result = BKLibraryFrameworkBundle();
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v1 = result;
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, v3, 0);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  result = BKLibraryFrameworkBundle();
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = result;
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, v10, 0);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  result = BKLibraryFrameworkBundle();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v15 = result;
  v16 = String._bridgeToObjectiveC()();
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, v17, 0);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  result = BKLibraryFrameworkBundle();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v22 = result;
  v46 = v21;
  v47 = v19;
  v48 = v7;
  v49 = v5;
  v23 = String._bridgeToObjectiveC()();
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v22, "localizedStringForKey:value:table:", v23, v24, 0);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v44 = v27;
  v45 = v26;

  result = BKLibraryFrameworkBundle();
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v28 = result;
  v29 = v14;
  v30 = v12;
  v31 = String._bridgeToObjectiveC()();
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v28, "localizedStringForKey:value:table:", v31, v32, 0);

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  result = BKLibraryFrameworkBundle();
  if (result)
  {
    v37 = result;
    sub_7EC74();
    v38 = String._bridgeToObjectiveC()();
    v39 = String._bridgeToObjectiveC()();
    v40 = objc_msgSend(v37, "localizedStringForKey:value:table:", v38, v39, 0);

    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    return sub_7E6FC(v49, v48, v30, v29, v47, v46, v45, v44, v34, v36, v41, v43);
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_7EC74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_DE318;
  if (!qword_DE318)
  {
    v1 = objc_opt_self(BDSDistributedPriceTrackingConfigNotification);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_DE318);
  }
  return result;
}

uint64_t sub_7EE0C()
{
  return type metadata accessor for UserDefaultsObserver(0);
}

uint64_t type metadata accessor for UserDefaultsObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_DE350;
  if (!qword_DE350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserDefaultsObserver);
  return result;
}

void sub_7EE50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_7EEBC(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_7EEBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_DE360)
  {
    v2 = sub_72060(&qword_DE2A0);
    v3 = type metadata accessor for AsyncStream.Continuation(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_DE360);
  }
}

unint64_t sub_7EF14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_7EFF8(a1, a2, v5);
}

unint64_t sub_7EF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_7F0D8(a1, v7);
}

unint64_t sub_7EFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_7F0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_7F24C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSString *v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = sub_6A50C(&qword_DE368);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && *(_QWORD *)(a2 + 16))
  {
    v7 = NSKeyValueChangeNewKey;
    v8 = sub_7EF78((uint64_t)v7);
    if ((v9 & 1) != 0)
    {
      sub_717E4(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }

  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  sub_7F410((uint64_t)&v17, (uint64_t)&v15);
  if (!*((_QWORD *)&v16 + 1))
  {
    sub_7CA84((uint64_t)&v15);
    goto LABEL_12;
  }
  v10 = sub_7F458();
  if ((swift_dynamicCast(&v14, &v15, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_12:
    sub_7F410((uint64_t)&v17, (uint64_t)&v15);
    goto LABEL_13;
  }

  v15 = 0u;
  v16 = 0u;
LABEL_13:
  v11 = sub_6A50C(&qword_DE370);
  AsyncStream.Continuation.yield(_:)(&v15, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_7CA84((uint64_t)&v17);
}

unint64_t sub_7F3C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_DDB58;
  if (!qword_DDB58)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(&unk_961A8, v1);
    atomic_store(result, (unint64_t *)&qword_DDB58);
  }
  return result;
}

uint64_t sub_7F410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_6A50C(&qword_DE2A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_7F458()
{
  unint64_t result;
  uint64_t v1;

  result = qword_DE378;
  if (!qword_DE378)
  {
    v1 = objc_opt_self(NSNull);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_DE378);
  }
  return result;
}

uint64_t sub_7F5BC()
{
  return type metadata accessor for RestrictionsObserver(0);
}

uint64_t type metadata accessor for RestrictionsObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_DE410;
  if (!qword_DE410)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RestrictionsObserver);
  return result;
}

void sub_7F600(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_7F66C();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_7F66C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_DE420)
  {
    v0 = type metadata accessor for AsyncStream.Continuation(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_DE420);
  }
}

uint64_t sub_7F6C0(uint64_t a1, uint64_t a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(), uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  double v22;
  uint64_t v23;
  NSString v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  void **v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t (*v33)();
  uint64_t v34;

  v9 = v8;
  v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v9));
  v18 = swift_allocObject(&unk_C4018, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  v33 = sub_7F8D8;
  v34 = v18;
  v29 = _NSConcreteStackBlock;
  v30 = 1107296256;
  v31 = sub_7F8F8;
  v32 = &unk_C4030;
  v19 = _Block_copy(&v29);
  v20 = v34;
  swift_retain(a2);
  result = swift_release(v20);
  v22 = round(a3);
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v22 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v22 < 65536.0)
  {
    v23 = (int)v22;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    v33 = a7;
    v34 = a8;
    v29 = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = sub_7F980;
    v32 = &unk_C4058;
    v25 = _Block_copy(&v29);
    v26 = v34;
    swift_retain(a8);
    swift_release(v26);
    v27 = objc_msgSend(v17, "initWithNotifyBlock:notifyTimeout:blockDescription:notifyTimeoutBlock:", v19, v23, v24, v25);
    _Block_release(v25);

    _Block_release(v19);
    v28 = v27;
    objc_msgSend(v28, "setCoalescingDelay:", a4);

    swift_release(a2);
    swift_release(a8);
    return (uint64_t)v28;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_7F8B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_7F8D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_7F8F8(uint64_t a1, void *aBlock)
{
  uint64_t v2;
  void (*v3)(uint64_t (*)(), uint64_t);
  void *v4;
  uint64_t v5;

  v3 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject(&unk_C4090, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  swift_retain(v2);
  v3(sub_7F9F8, v5);
  swift_release(v2);
  return swift_release(v5);
}

uint64_t sub_7F968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_7F978(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_7F980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v6 = v5;
  swift_retain(v2);
  v3(v4, v6);
  swift_release(v2);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_7F9D4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_7F9F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t BKLibraryAsset.finishedDateKind.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = objc_msgSend(v1, "finishedDateKind");
  if (v3 == 2)
  {
    v8 = (unsigned int *)&enum case for FinishedDateKind.yearOnly(_:);
LABEL_6:
    v9 = *v8;
    v10 = type metadata accessor for FinishedDateKind(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104))(a1, v9, v10);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v6 = a1;
    v7 = 0;
    v4 = v10;
    return v5(v6, v7, 1, v4);
  }
  if ((unsigned __int16)v3 == 1)
  {
    v8 = (unsigned int *)&enum case for FinishedDateKind.fullDate(_:);
    goto LABEL_6;
  }
  v4 = type metadata accessor for FinishedDateKind(0);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v6 = a1;
  v7 = 1;
  return v5(v6, v7, 1, v4);
}

void sub_7FAC8(void *a1)
{
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;

  objc_msgSend(a1, "sourceFileType");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sourceFilePath"));
  sub_4258();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x12u);

}

void sub_7FB78(void *a1)
{
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;

  objc_msgSend(a1, "sourceFileType");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sourceFilePath"));
  sub_4258();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x1Cu);

  sub_4238();
}

void sub_7FC28()
{
  uint64_t v0;
  os_log_t v1;

  sub_41C0();
  sub_41E8(&dword_0, v0, v1, "Error initializing unarchiving copier. sourceURL {%{mask.hash}@} error {%@}");
  sub_4228();
}

void sub_7FC88(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 134217984;
  v4 = v2;
  _os_log_debug_impl(&dword_0, a2, OS_LOG_TYPE_DEBUG, "Preparing to uncompress to total file size: %llu", (uint8_t *)&v3, 0xCu);
  sub_4230();
}

void sub_7FCFC()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "BKExtractFileOperation _performCopyFromPath: Unable to set protection key on copied file at %@: %@");
  sub_4230();
}

void sub_7FD5C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_4248(&dword_0, a2, a3, "BKExtractFileOperation _performCopyFromPath: copyItemAtPath failed. error: %@", a5, a6, a7, a8, 2u);
  sub_4230();
}

void sub_7FDC0()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "BKExtractFileOperation _performMoveFromPath: Unable to not exclude from backup item at %@: %@");
  sub_4230();
}

void sub_7FE20()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "BKExtractFileOperation _performMoveFromPath: Unable to set protection key on moved file at %@: %@");
  sub_4230();
}

void sub_7FE80(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_4248(&dword_0, a2, a3, "BKExtractFileOperation _performMoveFromPath: moveItemAtPath failed. error: %@", a5, a6, a7, a8, 2u);
  sub_4230();
}

void sub_7FEE4(uint64_t a1, void *a2)
{
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;

  objc_msgSend(a2, "BOOLValue");
  __error();
  sub_4258();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x22u);
  sub_4238();
}

void sub_7FF9C()
{
  uint64_t v0;
  os_log_t v1;

  sub_41C0();
  sub_41E8(&dword_0, v0, v1, "BKExtractFileOperation _fixFilePermissions: getResourceValue failed. key: NSURLIsDirectoryKey url: %{mask.hash}@ error: %@");
  sub_4228();
}

void sub_7FFFC()
{
  uint64_t v0;
  os_log_t v1;

  sub_41C0();
  sub_41E8(&dword_0, v0, v1, "BKExtractFileOperation _performZipExtractionFromPath: removeItemAtPath failed. path: %{mask.hash}@ error: %@");
  sub_4228();
}

void sub_8005C()
{
  uint64_t v0;
  os_log_t v1;

  sub_41C0();
  sub_41E8(&dword_0, v0, v1, "BKExtractFileOperation _performZipExtractionFromPath: moveItemAtPath failed. path: %{mask.hash}@ error: %@");
  sub_4228();
}

void sub_800BC()
{
  uint64_t v0;
  os_log_t v1;

  sub_41C0();
  sub_41E8(&dword_0, v0, v1, "BKExtractFileOperation _performZipExtractionFromPath: Error extracting file. path: %{mask.hash}@ exception: %@");
  sub_4228();
}

void sub_8011C()
{
  uint64_t v0;
  os_log_t v1;

  sub_41C0();
  sub_41E8(&dword_0, v0, v1, "Error extracting file at path {%{mask.hash}@} error {%@}");
  sub_4228();
}

void sub_8017C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_5008(&dword_0, a2, a3, "setFinishedStateUserSetsFinished: set on series container: %@", (uint8_t *)&v3);
}

void sub_801E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_4FF8(&dword_0, a1, a3, "setFinishedStateUserSetsFinished: request made when isFinished=YES and notFinished=NO", a5, a6, a7, a8, 0);
  sub_5014();
}

void sub_80218(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_4FF8(&dword_0, a1, a3, "setFinishedStateUserSetsUnfinished request made when isFinished=NO and notFinished=YES", a5, a6, a7, a8, 0);
  sub_5014();
}

void sub_80248(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_4FF8(&dword_0, a1, a3, "setFinishedStateRemoveFromFinishedCollection request made when isFinished=NO and notFinished=YES", a5, a6, a7, a8, 0);
  sub_5014();
}

void sub_80278(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "debugDescription"));
  v5 = 138412290;
  v6 = v3;
  sub_5008(&dword_0, a2, v4, "setFinishedStateAddToFinishedCollection set on series container: %@", (uint8_t *)&v5);

}

uint64_t sub_80304()
{
  char *v0;
  uint64_t v1;

  v0 = dlerror();
  v1 = abort_report_np("%s", v0);
  return sub_80324(v1);
}

void sub_80324()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_4FF8(&dword_0, v0, v1, "managerWithDataSources: initializer not called!", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_80350()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_4FF8(&dword_0, v0, v1, "MRP: timed out waiting for dates", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_8037C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "MRP: error fetching MRP from library %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_803DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "Test migration requested", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_80408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_3AB74(&dword_0, v0, v1, "Remove library database per user default: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80468(uint64_t a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  uint64_t v4;

  v2[0] = 67109378;
  v2[1] = 360;
  v3 = 2112;
  v4 = a1;
  _os_log_fault_impl(&dword_0, a2, OS_LOG_TYPE_FAULT, "BCCoalescingCallBlock notification block did not call its completion handler after %hus.  Block is the _coalescedLibraryReload on BKLibraryManager %@.", (uint8_t *)v2, 0x12u);
  sub_4230();
}

void sub_804E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Fetch error: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80548()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Invalid version string: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_805A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Invalid comparison version string: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80608()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AC3C(&dword_0, v0, v1, "Expecting workerQueueBlockAndWait to be called from non-main thread", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_80634()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed to fetch series IDs to update: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80694()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed to get series info updating interval bag value, will fallback to use default: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_806F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed to fetch non-series audiobook IDs to update: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80754()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "wq_dq_saveDatabaseContext had NO changes", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_80780()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "ERROR fetching items. %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_807E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_3AC58(a1, a2), "seriesID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_3ABF0(&dword_0, v6, v7, "ERROR: Where's the container for %@");

  sub_3AC4C();
}

void sub_80830(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a1, "count")));
  sub_3AB18();
  _os_log_debug_impl(&dword_0, a2, OS_LOG_TYPE_DEBUG, "Fetched: %@", v4, 0xCu);

  sub_3AB98();
}

void sub_808CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "persistentStorePath: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_8092C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "persistentStoreName: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_8098C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "documentsPath: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_809EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_4FF8(&dword_0, v0, v1, "Unable to create persistent store URL.", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_80A18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "creating a new moc", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_80A44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "ERROR: Could not determine book count - %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80AA4(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "componentsJoinedByString:", CFSTR(", ")));
  v7 = 138412546;
  v8 = v4;
  sub_3AB64();
  sub_3AB24(&dword_0, a3, v6, "reload data source %@ fetched assetIDs=[%@]", (uint8_t *)&v7);

  sub_3AB08();
}

void sub_80B40()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_3AC24();
  sub_3AB24(&dword_0, v0, (uint64_t)v0, "Datasource {%@} failed to fetch assets error {%@}", v1);
  sub_4230();
}

void sub_80BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_3AC04();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "objectAtIndexedSubscript:", v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v0));
  sub_3ABBC();
  sub_3AB84(&dword_0, v5, v6, "Datasource {%@} failed to fetch asset %@ at index %@", v7, v8, v9, v10, v11);

  sub_4238();
}

void sub_80C58()
{
  uint64_t v0;
  os_log_t v1;

  sub_3ABA4();
  sub_41FC(&dword_0, v0, v1, "Datasource {%@} failed to fetch assets error {%@}");
  sub_4230();
}

void sub_80CC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "earliestPurchaseTimestampWithCompletion: executeFetchRequest error: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80D20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_4FF8(&dword_0, v0, v1, "_addDataSourceIdentifierAndStateObserver assetID was invalid", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_80D4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "no datasource for libraryAsset %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_80DAC()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Skipping remove because fetch {%@} failed with error {%@}");
  sub_4230();
}

void sub_80E0C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_3ABA4();
  sub_3AB24(&dword_0, v0, v1, "assets removed: %@ %@", v2);
  sub_4230();
}

void sub_80E74()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Failed to update assets because fetch {%@} failed with error {%@}");
  sub_4230();
}

void sub_80ED4(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  const char *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count")));
  v5 = 136315394;
  v6 = "-[BKLibraryManager _libraryDataSource:updatedAssets:]_block_invoke";
  sub_3AB64();
  sub_3AB24(&dword_0, a2, v4, "%s: %@ assets updated", (uint8_t *)&v5);

  sub_3AB98();
}

void sub_80F7C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "seriesID"));
  v7 = 138412546;
  v8 = v4;
  sub_3AB64();
  sub_3AB24(&dword_0, a2, v6, "StackLog: We should be clearing purchasedAndLocalParent: assetID: %@  seriesID: %@", (uint8_t *)&v7);

  sub_3AB08();
}

void sub_81024(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  const char *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a1, "count")));
  v5 = 136315394;
  v6 = "-[BKLibraryManager _libraryDataSource:addedAssets:]";
  sub_3AB64();
  sub_3AB24(&dword_0, a2, v4, "%s: %@ assets added", (uint8_t *)&v5);

  sub_3AB98();
}

void sub_810C8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_3AB74(&dword_0, a1, a3, "%s: executing in worker queue", a5, a6, a7, a8, 2u);
  sub_4230();
}

void sub_81138()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Failed to fetch assets to unclaim {%@} -- {%@}");
  sub_4230();
}

void sub_81198(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Expecting either the assetID or the temporaryAssetID to be set", buf, 2u);
}

void sub_811D4(uint64_t a1, __int16 a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", a2));
  v7 = 138412546;
  v8 = a1;
  sub_3AB64();
  sub_3AB24(&dword_0, a3, v6, "Ownership Change:%@  (%@)", (uint8_t *)&v7);

  sub_3AB08();
}

void sub_81274(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "insertedObjects"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("assetID")));
  v8 = 138412546;
  v9 = a1;
  sub_3AB64();
  sub_3AAFC(&dword_0, a3, v7, "Mismatch in insertedIDs: %@ and moc.insertedObjects assetID's:%@", (uint8_t *)&v8);

  sub_3AB08();
}

void sub_8132C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Skipping purge -- reason {%@}", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_8138C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Skipping integration -- reason {%@}", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_813EC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "title"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "assetID"));
  sub_3ABD0();
  sub_3AB84(&dword_0, v5, v6, "{%@} creating asset {%@} assetID {%@}", v7, v8, v9, v10, v11);

  sub_4238();
}

void sub_81488()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_4210();
  sub_3AB24(&dword_0, v0, (uint64_t)v0, "Adding a new asset: %@ dataSource: %@", v1);
  sub_4230();
}

void sub_814F0()
{
  NSObject *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[12];
  __int16 v6;
  uint64_t v7;

  sub_3AC04();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "identifier"));
  sub_3AB18();
  v6 = 2112;
  v7 = v3;
  sub_3AAFC(&dword_0, v0, v4, "#datasource FAILED to fetch assets to reconcile for: %@, error=%@", v5);

  sub_3AB08();
}

void sub_81588(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "componentsJoinedByString:", CFSTR(", ")));
  sub_3AB18();
  sub_3AC10(&dword_0, v3, v4, "#datasource STILL pending to be reconciled after 1 minute: [%{public}@]", v5, v6, v7, v8, v9);

  sub_3AB08();
}

void sub_81620(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "componentsJoinedByString:", CFSTR(", ")));
  sub_3AB18();
  sub_3AC10(&dword_0, v3, v4, "#datasource STILL pending to be reconciled after 3 minutes: [%{public}@]", v5, v6, v7, v8, v9);

  sub_3AB08();
}

void sub_816B8()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Couldn't get books count of purchased books %@ -- %@");
  sub_4230();
}

void sub_81718()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Error fetching purchased count for %@ -- %@");
  sub_4230();
}

void sub_81778()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Error fetching total count for %@ -- %@");
  sub_4230();
}

void sub_817D8()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Failed to fetch libraryAssets with identifiers %@ error: %@");
  sub_4230();
}

void sub_81838()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "libraryAssetsForAppIntentsSearchTerm: executeFetchRequest failed. error: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_81898()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Failed to fetch LibraryAsset with identifier {%@}{%@}");
  sub_4230();
}

void sub_818F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_4FF8(&dword_0, v0, v1, "libraryMutableAssetWithAssetID called with no assetID", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_81924()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_4FF8(&dword_0, v0, v1, "libraryMutableAssetWithAssetID called with no assetIdentifier", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_81950()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Failed to fetch count {%@} -- {%@}");
  sub_4230();
}

void sub_819B0()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Failed to fetch libraryAssets with assetIDs {%@} {%@}");
  sub_4230();
}

void sub_81A10()
{
  NSObject *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_3AC04();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "seriesID"));
  sub_3AB4C();
  sub_3AAFC(&dword_0, v0, v3, "Couldn't get new local book with seriesID %@ -- %@", v4);

  sub_3AB08();
}

void sub_81A94()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Couldn't get books of series item %@ -- %@");
  sub_4230();
}

void sub_81AF4()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Couldn't get books count of series items %@ -- %@");
  sub_4230();
}

void sub_81B54(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetID"));
  sub_3AB18();
  sub_5008(&dword_0, a2, v4, "localNonSampleLibraryAssetStoreSummariesExcludeAudiobooks: AssetID: %@ is missing libraryAsset.storeID, skipping this asset in results.", v5);

  sub_3AB98();
}

void sub_81BD4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_3AC58(a1, a2), "assetID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_3ABF0(&dword_0, v6, v7, "localNonSampleLibraryAssetStoreSummariesExcludeAudiobooks: AssetID: %@ is missing libraryAsset.versionNumber.");

  sub_3AC4C();
}

void sub_81C24(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_3AB74(&dword_0, a1, a3, "Trying to create a fetchRequest for an entity type:%ld that is not supported.", a5, a6, a7, a8, 0);
  sub_4230();
}

void sub_81C90()
{
  uint64_t v0;
  os_log_t v1;

  sub_3AC24();
  sub_41FC(&dword_0, v0, v1, "Failed to remove %@ from Want to Read. %@");
  sub_4230();
}

void sub_81CF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Encounted error when counting books in continue reading %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_81D54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Seeded %lu books", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_81DB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed to retrieve assets when seeding recent books list. %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_81E14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed to purge assets. %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_81E74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Error purging recent books. %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_81ED4(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *a1;
  v4 = 141558274;
  v5 = 1752392040;
  v6 = 2112;
  v7 = v3;
  sub_3AAFC(&dword_0, a2, a3, "applyPendingUpdateForAssetID: libraryAsset not found. assetID: %{mask.hash}@", (uint8_t *)&v4);
  sub_4230();
}

void sub_81F54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_4FF8(&dword_0, v0, v1, "applyPendingUpdateForAssetID: No data sources handled the pending update.", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_81F80()
{
  NSObject *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_3AC04();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "storePlaylistID"));
  sub_3AB4C();
  sub_3AAFC(&dword_0, v0, v3, "Failed to fetch supplemental content libraryAssets with storePlaylistID %@ error: %@", v4);

  sub_3AB08();
}

void sub_82004(void *a1, NSObject *a2)
{
  void *v4;
  int v5;
  void *v6;
  __int16 v7;
  unsigned int v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetID"));
  v5 = 138412546;
  v6 = v4;
  v7 = 1024;
  v8 = objc_msgSend(a1, "isSupplementalContent");
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Reset supplemental content libraryAsset %@: it has isSupplementalContent set to %hhd, but no storePlaylistID", (uint8_t *)&v5, 0x12u);

  sub_3AB08();
}

void sub_820AC(void *a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  __int16 v8;
  uint64_t v9;
  uint8_t v10[14];
  void *v11;
  __int16 v12;
  uint64_t v13;

  objc_msgSend(a1, "count");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "storePlaylistID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lastObject"));
  sub_3ABBC();
  v11 = v6;
  v12 = v8;
  v13 = v9;
  _os_log_error_impl(&dword_0, a3, OS_LOG_TYPE_ERROR, "Fetched %ld audiobook libraryAssets with storePlaylistID %@ for supplemental content, will use last one %@.", v10, 0x20u);

  sub_4238();
}

void sub_8216C()
{
  NSObject *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_3AC04();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "storePlaylistID"));
  sub_3AB4C();
  sub_3AAFC(&dword_0, v0, v3, "Failed to fetch audiobook libraryAsset with storePlaylistID %@ for supplemental content, error: %@", v4);

  sub_3AB08();
}

void sub_821F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "Done _migrateFromOldDatabase", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_8221C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "Starting _migrateFromOldDatabase", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_82248(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_3AB18();
  sub_5008(&dword_0, a2, v4, "Bootstrap Samples collection: Failed to fetch asset IDs, error: %@", v5);

  sub_3AB98();
}

void sub_822C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed to write migration cache: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_82328()
{
  uint64_t v0;
  os_log_t v1;

  sub_4210();
  sub_41FC(&dword_0, v0, v1, "Error removing old database file: %@  error: %@");
  sub_4230();
}

void sub_82388()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_3AB74(&dword_0, v0, v1, "managedObjectBackgroundMonitor - result of changedAssetIDs: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_823E8(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "addedObjects"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "updatedObjects"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "deletedObjects"));
  sub_3ABD0();
  sub_3AB84(&dword_0, v5, v6, "managedObjectBackgroundMonitor - added: %@, updated: %@, deleted: %@", v7, v8, v9, v10, v11);

  sub_4238();
}

void sub_82490()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed to fetch cloudSyncVersions error: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_824F0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_4248(&dword_0, a2, a3, "Expect to be able to find a library asset: %@", a5, a6, a7, a8, 2u);
  sub_4230();
}

void sub_82558()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Failed fetching explicit assets: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_825B8()
{
  uint64_t v0;
  os_log_t v1;

  sub_3ABA4();
  sub_41FC(&dword_0, v0, v1, "#datasource FAILED fetchAssets from: %{public}@ with error=%@");
  sub_4230();
}

void sub_82620(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetID"));
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_debug_impl(&dword_0, a3, OS_LOG_TYPE_DEBUG, "BKLibraryAsset asset: %@ readingNowDetailRepresentation %@", (uint8_t *)&v6, 0x16u);

}

void sub_826CC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Error unarchiving asset status controller data: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_82740()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "BCAssetDetail cloudSyncVersions in sync on enabling cloud merge", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_8276C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "error retrieving libraryManager assets: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_827CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_3AC04();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 48), "componentsJoinedByString:", CFSTR(", ")));
  sub_3AB4C();
  sub_4A138(&dword_0, v2, v3, "error setting getting global annotations for assetIDs: [%@] error=%@", v4, v5, v6, v7, v8);

  sub_3AB08();
}

void sub_82854()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_3AC04();
  v1 = objc_msgSend((id)sub_4A160(v0), "componentsJoinedByString:", CFSTR(", "));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_3AB4C();
  sub_4A138(&dword_0, v3, v4, "error setting assetDetails for assetIDs: [%@] error=%@", v5, v6, v7, v8, v9);

  sub_3AB08();
}

void sub_828D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "********** about to call from -p_syncAllReadingNowChangesToIcloudInMOC:", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_82904(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "count");
  sub_3AB18();
  sub_4A14C(&dword_0, v1, v2, "BCReadingNowDetail found %lu details to sync", v3, v4, v5, v6, v7);
  sub_3AB98();
}

void sub_82970(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = objc_msgSend((id)sub_4A160(a1), "bu_prettyDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_3AB18();
  sub_4A14C(&dword_0, v3, v4, "RND:succesfully set ReadingNowDetails for assetIDs: [%@]", v5, v6, v7, v8, v9);

  sub_3AB98();
}

void sub_829E8(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = objc_msgSend((id)sub_4A160(a1), "bu_prettyDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_3AB18();
  sub_4A14C(&dword_0, v3, v4, "RND:succesfully set ReadingNowDetails, but no changes for assetIDs: [%@]", v5, v6, v7, v8, v9);

  sub_3AB98();
}

void sub_82A60()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_3AC04();
  v1 = objc_msgSend((id)sub_4A160(v0), "bu_prettyDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_3AB4C();
  sub_4A138(&dword_0, v3, v4, "RND:error setting ReadingNowDetails for assetIDs: [%@] error=%@", v5, v6, v7, v8, v9);

  sub_3AB08();
}

void sub_82ADC(void *a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  unsigned int v15;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a1, "sessionContextType")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "persistentStoreCoordinator"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "libraryManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "persistentStoreCoordinator"));
  v10 = 138412802;
  v11 = a1;
  v12 = 2112;
  v13 = v6;
  v14 = 1024;
  v15 = objc_msgSend(v7, "hasStoreInCommonWith:", v9);
  _os_log_debug_impl(&dword_0, a3, OS_LOG_TYPE_DEBUG, "********** NOT DOING ANYTHING. context: %@, context.sessionContextType: %@, [context.persistentStoreCoordinator hasStoreInCommonWith:self.libraryManager.persistentStoreCoordinator]: %{BOOL}d", (uint8_t *)&v10, 0x1Cu);

}

void sub_82BF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "managedObjectBackgroundMonitor:didSaveNotify:", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_82C24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "********** not calling from -managedObjectBackgroundMonitor:didSaveNotification for updatedItems", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_82C50(uint64_t a1)
{
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;

  objc_msgSend(*(id *)(a1 + 32), "enableCloudMerge");
  sub_4A16C();
  _os_log_debug_impl(v1, v2, v3, v4, v5, 8u);
  sub_4230();
}

void sub_82CD0()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_3AC04();
  v1 = objc_msgSend((id)sub_4A160(v0), "componentsJoinedByString:", CFSTR(", "));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_3AB4C();
  sub_4A138(&dword_0, v3, v4, "error retrieving asset details for assetIDs: [%@] error=%@", v5, v6, v7, v8, v9);

  sub_3AB08();
}

void sub_82D54()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_3AC04();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 48), "componentsJoinedByString:", CFSTR(", ")));
  sub_3AB4C();
  sub_4A138(&dword_0, v2, v3, "error retrieving reading now details for assetIDs: [%@] error=%@", v4, v5, v6, v7, v8);

  sub_3AB08();
}

void sub_82DDC()
{
  uint64_t v0;
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;

  sub_3AC04();
  sub_4A17C(v0);
  sub_3AB4C();
  sub_4A16C();
  _os_log_debug_impl(v1, v2, v3, v4, v5, 0x16u);
  sub_3AB98();
}

void sub_82E4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "********** not calling from -managedObjectBackgroundMonitor:didSaveNotification for addedItems", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_82E78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "********** about to call from -managedObjectBackgroundMonitor:didSaveNotification for addedItems", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_82EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_4A17C(a1);
  sub_3AB18();
  sub_4A14C(&dword_0, v1, v2, "ManagedObjectBackgroundMonitor found %lu assets updated", v3, v4, v5, v6, v7);
  sub_3AB98();
}

void sub_82F0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "********** about to call from -managedObjectBackgroundMonitor:didSaveNotification updatedItems", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_82F38(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "annotationAssetID"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_error_impl(&dword_0, a4, OS_LOG_TYPE_ERROR, "mismatched annotation for %@", a1, 0xCu);

}

void sub_82FAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_3AC04();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 32), "allKeys"));
  sub_3AB4C();
  sub_4A138(&dword_0, v2, v3, "error getting mutable assetDetails for %@: %@", v4, v5, v6, v7, v8);

  sub_3AB08();
}

void sub_8302C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "error retrieving getAssetDetailChangesSince:%@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_8308C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "#ReadingNowChanged BCCloudReadingNowManagerChanged notification received, deferring processing", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_830B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "#ReadingNowChanged BCCloudReadingNowManagerChanged notification received, starting processing", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_830E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "error getReadingNowDetailChangesSince:%@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_83144(uint64_t a1)
{
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;

  objc_msgSend(*(id *)(a1 + 48), "enableCloudMerge");
  sub_4A16C();
  _os_log_debug_impl(v1, v2, v3, v4, v5, 0x1Cu);
}

void sub_831EC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bu_prettyDescription"));
  sub_3AB18();
  sub_4A14C(&dword_0, v2, v3, "merging cloudDetails into app library:%@", v4, v5, v6, v7, v8);

  sub_3AB98();
}

void sub_83264()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "#ReadingNowChanged completed fetchAgain, processing deferred notification.", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_83290()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB30();
  sub_3AB3C(&dword_0, v0, v1, "#ReadingNowChanged completed fetchAgain, NO deferred notification.", v2, v3, v4, v5, v6);
  sub_5014();
}

void sub_832BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_3AC04();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 48), "componentsJoinedByString:", CFSTR(", ")));
  sub_3AB4C();
  sub_4A138(&dword_0, v2, v3, "error retrieving assetDetails for assetIDs: [%@] error=%@", v4, v5, v6, v7, v8);

  sub_3AB08();
}

void sub_83344(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "collectionID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetID"));
  sub_4A138(&dword_0, v3, v4, "BKCollectionMember does not have a valid collectionID: %@ or assetID: %@", v5, v6, v7, v8, 2u);

  sub_3AB08();
}

void sub_833E8(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "collection"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "asset"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v9 = 138412802;
  v10 = v4;
  v11 = 2112;
  v12 = v6;
  v13 = 2112;
  v14 = v8;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "BKCollectionMember missing assetID.  Configuring with %@ for collectionMember %@ - %@", (uint8_t *)&v9, 0x20u);

}

void sub_834EC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetID"));
  sub_4E750();
  sub_4A138(&dword_0, v2, v3, "BKCollectionMember invalid update with collectionMember.  Asset ID Mismatch! %{public}@ != %{public}@", v4, v5, v6, v7, v8);

  sub_3AB08();
}

void sub_8356C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "collectionID"));
  sub_4E750();
  sub_4A138(&dword_0, v2, v3, "BKCollectionMember invalid update with collectionMember.  Collection ID Mismatch! %{public}@ != %{public}@", v4, v5, v6, v7, v8);

  sub_3AB08();
}

void sub_835EC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "collectionID"));
  sub_4E750();
  sub_4A138(&dword_0, v2, v3, "BKCollectionMember Configuring from a deleted collection member %{public}@ != %{public}@", v4, v5, v6, v7, v8);

  sub_3AB08();
}

void sub_8366C(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "cacheURL"));
  v6 = 138543618;
  v7 = v5;
  v8 = 2114;
  v9 = a2;
  _os_log_error_impl(&dword_0, a3, OS_LOG_TYPE_ERROR, "Error unarchiving product profiles at %{public}@: %{public}@", (uint8_t *)&v6, 0x16u);

}

void sub_83718(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138543618;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2114;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Failed to read: %{public}@ -- %{public}@", buf, 0x16u);

}

void sub_8377C(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 141558274;
  *(_QWORD *)(buf + 4) = 1752392040;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a1;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "BKLibrary+BCCacheManager: Timed out waiting for fetchImageForAsset for asset ID %{mask.hash}@", buf, 0x16u);

}

void sub_837E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40), "count");
  sub_3AB18();
  sub_4A14C(&dword_0, v1, v2, "_performResetCollectionsInMoc signal  %lu", v3, v4, v5, v6, v7);
  sub_3AB98();
}

void sub_8385C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Error fetching default collections, error = %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_838BC()
{
  uint64_t v0;
  os_log_t v1;

  sub_692D0(__stack_chk_guard);
  sub_3AC24();
  sub_41FC(&dword_0, v0, v1, "Failed to remove %@ from Want to Read. %@");
  sub_4230();
}

void sub_8391C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_692D0(__stack_chk_guard);
  sub_4248(&dword_0, v0, v1, "Error adding storeItem for storeID: %@", v2, v3, v4, v5, 2u);
  sub_4230();
}

void sub_83980(_QWORD *a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = *(_QWORD *)(a2 + 48);
  sub_41FC(&dword_0, a2, a3, "Error adding to collection: %@ storeID: %@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_4230();
}

void sub_839F8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_4248(&dword_0, a2, a3, "Error adding storeItem for storeID: %@", a5, a6, a7, a8, 2u);
  sub_4230();
}

void sub_83A60()
{
  uint64_t v0;
  os_log_t v1;

  sub_692D0(__stack_chk_guard);
  sub_3AC24();
  sub_41FC(&dword_0, v0, v1, "collectionDetailManager error setting collectionDetails for collectionIDs: %{public}@ error:%@");
  sub_4230();
}

void sub_83AC0()
{
  uint64_t v0;
  os_log_t v1;

  sub_3AC24();
  sub_41FC(&dword_0, v0, v1, "collectionMemberManager error setting collectionMember memberIDs: %@ error:%@");
  sub_4230();
}

void sub_83B24()
{
  uint64_t v0;
  os_log_t v1;

  sub_692D0(__stack_chk_guard);
  sub_3AC24();
  sub_41FC(&dword_0, v0, v1, "collectionMemberManager warning deleting collectionMember  memberIDs: %@ error:%@");
  sub_4230();
}

void sub_83B84(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "object"));
  sub_3AB18();
  sub_4A14C(&dword_0, v2, v3, "Received moc did save from: %@", v4, v5, v6, v7, v8);

  sub_3AB98();
}

void sub_83C00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "error retrieving getCollectionDetailChangesSince:%@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_83C60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "error retrieving getCollectionMemberChangesSince:%@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_83CC0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "count");
  sub_3AB18();
  sub_4A14C(&dword_0, v1, v2, "Found %lu BKCollectionMembers with missing asset link. Trying to link them to an existing asset.", v3, v4, v5, v6, v7);
  sub_3AB98();
}

void sub_83D2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Error fetching BKCollectionMembers with missing asset link: %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_83D8C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_3AB18();
  sub_5008(&dword_0, a2, v4, "Failed to fetch PDF assets, error: %@", v5);

  sub_3AB98();
}

void sub_83E0C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(a1, "count");
  sub_3AB18();
  sub_4A14C(&dword_0, v1, v2, "#resetCollections: gatherChangedAssetsCollectionsWithLibraryMoc %lu", v3, v4, v5, v6, v7);
  sub_3AB98();
}

void sub_83E78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_3AB18();
  sub_4248(&dword_0, v0, v1, "Error saving MOC in resetCollections %@", v2, v3, v4, v5, v6);
  sub_4230();
}

void sub_83ED8(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeID"));
  sub_3AB18();
  sub_5008(&dword_0, a2, v4, "Error adding storeItem for storeID: %@", v5);

  sub_3AB98();
}

void sub_83F5C()
{
  uint64_t v0;
  os_log_t v1;

  sub_3AB18();
  sub_41FC(&dword_0, v0, v1, "Failed to fetch libraryAssets with contentTypes {%@} {%@}");
  sub_4230();
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingLastPathComponent");
}

id objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForDirectory:inDomain:appropriateForURL:create:error:");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend__addArrayControllerWithFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addArrayControllerWithFilter:");
}

id objc_msgSend__addAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAssetID:");
}

id objc_msgSend__addBitmask_toUpdate_inMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addBitmask:toUpdate:inMethod:");
}

id objc_msgSend__addDataSourceIdentifierAndStateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDataSourceIdentifierAndStateObserver:");
}

id objc_msgSend__addMemberWithAsset_toCollection_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addMemberWithAsset:toCollection:moc:");
}

id objc_msgSend__assetIDsForCollectionID_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetIDsForCollectionID:moc:");
}

id objc_msgSend__assetPurchasedDSIDForLibraryAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetPurchasedDSIDForLibraryAsset:");
}

id objc_msgSend__bookWasOpenedWithStoreID_permlink_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bookWasOpenedWithStoreID:permlink:date:");
}

id objc_msgSend__cachedProductProfiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedProductProfiles");
}

id objc_msgSend__callCompletionHandlers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionHandlers:");
}

id objc_msgSend__checkForChangesFromCloudAssetDetailManagerInMOC_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForChangesFromCloudAssetDetailManagerInMOC:reason:");
}

id objc_msgSend__checkForChangesFromCloudCollectionDetailManagerInMOC_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForChangesFromCloudCollectionDetailManagerInMOC:reason:");
}

id objc_msgSend__checkForChangesFromCloudCollectionMemberManagerInMOC_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForChangesFromCloudCollectionMemberManagerInMOC:reason:");
}

id objc_msgSend__checkForChangesFromCloudReadingNowDetailManagerInMOC_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForChangesFromCloudReadingNowDetailManagerInMOC:reason:");
}

id objc_msgSend__cleanUpOrphanedSampleAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpOrphanedSampleAssets:");
}

id objc_msgSend__compareVersionWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compareVersionWith:");
}

id objc_msgSend__continueReadingPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueReadingPredicate");
}

id objc_msgSend__dataSourceMatchingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataSourceMatchingPredicate:");
}

id objc_msgSend__dataSourcesMatchingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataSourcesMatchingPredicate:");
}

id objc_msgSend__dateComponentsForYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateComponentsForYear:");
}

id objc_msgSend__dateFinishedForYearOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateFinishedForYearOnly:");
}

id objc_msgSend__documentsURLWithFilename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_documentsURLWithFilename:");
}

id objc_msgSend__ensureBackupAttributeOnItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureBackupAttributeOnItemAtPath:error:");
}

id objc_msgSend__enumerateDataSources_intersectingWithAssetIDs_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateDataSources:intersectingWithAssetIDs:usingBlock:");
}

id objc_msgSend__fetchImageForAsset_size_includeSpine_includeShadow_allowGeneric_coverEffectsEnvironment_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchImageForAsset:size:includeSpine:includeShadow:allowGeneric:coverEffectsEnvironment:completion:");
}

id objc_msgSend__fetchLibraryAssetsWithTypes_searchTerm_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchLibraryAssetsWithTypes:searchTerm:inManagedObjectContext:");
}

id objc_msgSend__fetchPricesForStoreAssetIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPricesForStoreAssetIDs");
}

id objc_msgSend__fetchPricesForStoreAssets_forGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPricesForStoreAssets:forGeneration:");
}

id objc_msgSend__fetchProductProfiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchProductProfiles");
}

id objc_msgSend__fileSizeForAssetAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileSizeForAssetAtURL:");
}

id objc_msgSend__filterAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterAsset:");
}

id objc_msgSend__filterDownloadForAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterDownloadForAsset:");
}

id objc_msgSend__filterUpdateForAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterUpdateForAsset:");
}

id objc_msgSend__filterUploadsForAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterUploadsForAsset:");
}

id objc_msgSend__fixFilePermissions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fixFilePermissions:");
}

id objc_msgSend__forceFileProtectionOnItemAtPath_usingFileManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceFileProtectionOnItemAtPath:usingFileManager:error:");
}

id objc_msgSend__hasActiveDownloadForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasActiveDownloadForAssetID:");
}

id objc_msgSend__includeInDownloadsForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_includeInDownloadsForAssetID:");
}

id objc_msgSend__includeInUploadsForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_includeInUploadsForAssetID:");
}

id objc_msgSend__includedInUpdatesForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_includedInUpdatesForAssetID:");
}

id objc_msgSend__initializeProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeProgress");
}

id objc_msgSend__installedUnzippedAssetDiskSpaceMetrics_directory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installedUnzippedAssetDiskSpaceMetrics:directory:");
}

id objc_msgSend__invalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidate:");
}

id objc_msgSend__isMultiUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isMultiUser");
}

id objc_msgSend__isSignedInForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSignedInForAssetID:");
}

id objc_msgSend__isUbiquityItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isUbiquityItem");
}

id objc_msgSend__libraryAssetsForPostProcessingInManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryAssetsForPostProcessingInManagedObjectContext:");
}

id objc_msgSend__libraryDataSource_removedAssetsWithAssetIDs_orTemporaryAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryDataSource:removedAssetsWithAssetIDs:orTemporaryAssetIDs:");
}

id objc_msgSend__libraryDataSourcePerformanceChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryDataSourcePerformanceChanged");
}

id objc_msgSend__migrateFromOldDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateFromOldDatabase");
}

id objc_msgSend__notifyLibraryOperationDone_assetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyLibraryOperationDone:assetIDs:");
}

id objc_msgSend__notifyListeners_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyListeners:");
}

id objc_msgSend__passesExplicitContentFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passesExplicitContentFilter:");
}

id objc_msgSend__performCopyFromPath_toPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performCopyFromPath:toPath:");
}

id objc_msgSend__performInitialDataBaseMaintenance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performInitialDataBaseMaintenance");
}

id objc_msgSend__performMoveFromPath_toPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performMoveFromPath:toPath:");
}

id objc_msgSend__performReload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performReload");
}

id objc_msgSend__performZipExtractionFromPath_toPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performZipExtractionFromPath:toPath:");
}

id objc_msgSend__persistedInfoURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistedInfoURL");
}

id objc_msgSend__persistentStoreOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistentStoreOptions");
}

id objc_msgSend__postProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postProcess");
}

id objc_msgSend__postProcessCoverImagesForProductProfiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postProcessCoverImagesForProductProfiles:");
}

id objc_msgSend__postProcessExplicitFlagForProductProfiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postProcessExplicitFlagForProductProfiles:");
}

id objc_msgSend__predicateForAssetsWithContentTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForAssetsWithContentTypes:");
}

id objc_msgSend__predicateForBooksInSeriesWithCorrectAuthorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForBooksInSeriesWithCorrectAuthorInfo:");
}

id objc_msgSend__predicateForBooksInSeriesWithCorrectSortAuthorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForBooksInSeriesWithCorrectSortAuthorInfo:");
}

id objc_msgSend__predicateForBooksShownInAllBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForBooksShownInAllBooks");
}

id objc_msgSend__predicateForSearchText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForSearchText:");
}

id objc_msgSend__previouslyReadPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_previouslyReadPredicate");
}

id objc_msgSend__processDownloadStatuses_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processDownloadStatuses:completion:");
}

id objc_msgSend__processLibraryOwnershipNotification_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processLibraryOwnershipNotification:completion:");
}

id objc_msgSend__rawSeriesAuthorForContainerID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rawSeriesAuthorForContainerID:context:");
}

id objc_msgSend__rawSeriesSortAuthorForContainerID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rawSeriesSortAuthorForContainerID:context:");
}

id objc_msgSend__readLibraryVesionInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readLibraryVesionInfo");
}

id objc_msgSend__readPersistedInfoFromDisk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readPersistedInfoFromDisk");
}

id objc_msgSend__recentlyEngagedPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recentlyEngagedPredicate");
}

id objc_msgSend__recentlyReadPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recentlyReadPredicate");
}

id objc_msgSend__refreshArtForAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshArtForAsset:");
}

id objc_msgSend__reloadDataSource_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadDataSource:completion:");
}

id objc_msgSend__reloadWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadWithCompletion:");
}

id objc_msgSend__removeAllMembersFromCollection_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAllMembersFromCollection:moc:");
}

id objc_msgSend__removeArrayController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeArrayController:");
}

id objc_msgSend__removeAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAssetID:");
}

id objc_msgSend__removeAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAssetIDs:");
}

id objc_msgSend__removeBitmask_fromUpdate_inMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBitmask:fromUpdate:inMethod:");
}

id objc_msgSend__removeDataSourceIdentifierAndStateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDataSourceIdentifierAndStateObserver:");
}

id objc_msgSend__removeDupesByAssetID_inMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDupesByAssetID:inMoc:");
}

id objc_msgSend__removeDupesByTemporaryAssetID_inMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDupesByTemporaryAssetID:inMoc:");
}

id objc_msgSend__removeDuplicateCollectionMembers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDuplicateCollectionMembers");
}

id objc_msgSend__removeObsoletePersistedInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeObsoletePersistedInfo");
}

id objc_msgSend__removePossibleDupes_inMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePossibleDupes:inMoc:");
}

id objc_msgSend__removeTrackingOfAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeTrackingOfAssetID:");
}

id objc_msgSend__reportingProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportingProgress");
}

id objc_msgSend__resetAuthorsAndStacksInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetAuthorsAndStacksInContext:");
}

id objc_msgSend__resetNilAuthorsOnAllBooksInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetNilAuthorsOnAllBooksInContext:");
}

id objc_msgSend__resetNilAuthorsOnAllSeriesInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetNilAuthorsOnAllSeriesInContext:");
}

id objc_msgSend__resetSeriesIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetSeriesIDs:");
}

id objc_msgSend__scheduleOperationGroupWithName_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleOperationGroupWithName:block:");
}

id objc_msgSend__setFinishedStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFinishedStates:");
}

id objc_msgSend__setupUICoreDataStack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupUICoreDataStack");
}

id objc_msgSend__shouldPropagateNilAssetIDForDataSourceWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldPropagateNilAssetIDForDataSourceWithIdentifier:");
}

id objc_msgSend__sortAndInitializeDataSources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortAndInitializeDataSources:");
}

id objc_msgSend__sortUserCollectionToTop_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortUserCollectionToTop:moc:");
}

id objc_msgSend__spotlightAssetsWithContentTypes_searchTerm_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spotlightAssetsWithContentTypes:searchTerm:inManagedObjectContext:");
}

id objc_msgSend__startUpdateForAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startUpdateForAssetIDs:");
}

id objc_msgSend__trimUpdateDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trimUpdateDictionary");
}

id objc_msgSend__updateAcknowledgeCountsWithAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAcknowledgeCountsWithAssetIDs:");
}

id objc_msgSend__updateAssetDetailCloudVersionFromCloudSyncVersions_inMOC_fetchAgain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAssetDetailCloudVersionFromCloudSyncVersions:inMOC:fetchAgain:");
}

id objc_msgSend__updateAssetsWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAssetsWithBlock:");
}

id objc_msgSend__updateAuthorForSeriesContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAuthorForSeriesContainer:");
}

id objc_msgSend__updateCountsForAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCountsForAssetIDs:");
}

id objc_msgSend__updateCreationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCreationDate");
}

id objc_msgSend__updateEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEnabled");
}

id objc_msgSend__updateGlobalAnnotationsFromDetails_annotationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGlobalAnnotationsFromDetails:annotationProvider:");
}

id objc_msgSend__updateInfoForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateInfoForAssetID:");
}

id objc_msgSend__updateLibraryAssetWithID_withLastOpenDate_withMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLibraryAssetWithID:withLastOpenDate:withMoc:");
}

id objc_msgSend__updateMostRecentPurchaseDateCacheFromDataSources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMostRecentPurchaseDateCacheFromDataSources");
}

id objc_msgSend__updateProcessingAuthenticationStateDeferred(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProcessingAuthenticationStateDeferred");
}

id objc_msgSend__updateProcessingAuthenticationStateImmediate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProcessingAuthenticationStateImmediate");
}

id objc_msgSend__updateRelationshipsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRelationshipsInContext:");
}

id objc_msgSend__updateSeriesContainerDownloadStatusForAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSeriesContainerDownloadStatusForAssetIDs:");
}

id objc_msgSend__updateTotalPercentCompleteForAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTotalPercentCompleteForAssetIDs:");
}

id objc_msgSend__updateUploadStatusForAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUploadStatusForAssetIDs:");
}

id objc_msgSend__updatedAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatedAssets");
}

id objc_msgSend__validateIsState2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateIsState2");
}

id objc_msgSend__validateIsState3(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateIsState3");
}

id objc_msgSend__writePersistentInfoIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writePersistentInfoIfNeeded");
}

id objc_msgSend__zipExtractionPathFromSourcePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_zipExtractionPathFromSourcePath:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountID");
}

id objc_msgSend_actionTextForType_withAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionTextForType:withAsset:");
}

id objc_msgSend_activeStoreAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeStoreAccount");
}

id objc_msgSend_actualAuthorFromMetedata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actualAuthorFromMetedata:");
}

id objc_msgSend_actualCompletedImportOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actualCompletedImportOperations");
}

id objc_msgSend_actualFailedImportOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actualFailedImportOperations");
}

id objc_msgSend_actualTotalImportOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actualTotalImportOperations");
}

id objc_msgSend_addCollectionMemberAvoidingDupesWithAsset_assetID_temporaryAssetID_sortKey_forceToTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCollectionMemberAvoidingDupesWithAsset:assetID:temporaryAssetID:sortKey:forceToTop:");
}

id objc_msgSend_addCollectionMemberAvoidingDupesWithAssetID_sortKey_forceToTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCollectionMemberAvoidingDupesWithAssetID:sortKey:forceToTop:");
}

id objc_msgSend_addCollectionMemberDictionaries_forceToTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCollectionMemberDictionaries:forceToTop:");
}

id objc_msgSend_addCustomOperationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCustomOperationBlock:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addHidden_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHidden:inMOC:");
}

id objc_msgSend_addLibraryAssets_hideAssets_inManagedObjectContext_forceToTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLibraryAssets:hideAssets:inManagedObjectContext:forceToTop:");
}

id objc_msgSend_addLocal_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocal:inMOC:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationBlock:");
}

id objc_msgSend_addPersistentStoreWithType_configuration_URL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPersistentStoreWithType:configuration:URL:options:error:");
}

id objc_msgSend_addStatus_forStoreIds_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStatus:forStoreIds:inMOC:");
}

id objc_msgSend_addStoreItem_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStoreItem:completion:");
}

id objc_msgSend_addedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addedObjects");
}

id objc_msgSend_adoptMigratedProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adoptMigratedProperties:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allLocalStoreIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allLocalStoreIds:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allStoreAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allStoreAssets");
}

id objc_msgSend_allStoreIdsForStatus_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allStoreIdsForStatus:inMOC:");
}

id objc_msgSend_allUnownedStoreAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allUnownedStoreAssetIDs:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allowsAutoDownloadOfSamplesToWantToRead(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsAutoDownloadOfSamplesToWantToRead");
}

id objc_msgSend_allowsManualAddition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsManualAddition");
}

id objc_msgSend_allowsManualAdditionToCollectionWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsManualAdditionToCollectionWithID:");
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_DSID");
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_annotationAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationAssetID");
}

id objc_msgSend_annotationLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationLocation");
}

id objc_msgSend_annotationModificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationModificationDate");
}

id objc_msgSend_annotationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationProvider");
}

id objc_msgSend_annotationVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationVersion");
}

id objc_msgSend_annotationsForAssetIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotationsForAssetIDs:completion:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationCacheDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationCacheDirectory");
}

id objc_msgSend_applicationDocumentsDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDocumentsDirectory");
}

id objc_msgSend_applyPendingUpdateForAsset_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyPendingUpdateForAsset:completion:");
}

id objc_msgSend_archiveTransientProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveTransientProperties:");
}

id objc_msgSend_arrangedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrangedObjects");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asset");
}

id objc_msgSend_assetAccountIdentifiersForAsset_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetAccountIdentifiersForAsset:completion:");
}

id objc_msgSend_assetAccountIdentifiersForAssetID_path_storeID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetAccountIdentifiersForAssetID:path:storeID:completion:");
}

id objc_msgSend_assetAccountIdentifiersForAssetID_path_storeID_purchasedDSID_downloadedDSID_familyID_dataSourceID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetAccountIdentifiersForAssetID:path:storeID:purchasedDSID:downloadedDSID:familyID:dataSourceID:completion:");
}

id objc_msgSend_assetDetailManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDetailManager");
}

id objc_msgSend_assetDetailRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDetailRepresentation");
}

id objc_msgSend_assetDetailsForAssetIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDetailsForAssetIDs:completion:");
}

id objc_msgSend_assetDetailsModificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDetailsModificationDate");
}

id objc_msgSend_assetForLibraryAsset_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetForLibraryAsset:completion:");
}

id objc_msgSend_assetGUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetGUID");
}

id objc_msgSend_assetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetID");
}

id objc_msgSend_assetIDFromCollectionMemberID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetIDFromCollectionMemberID:");
}

id objc_msgSend_assetIDsInDataSourceWithIdentifier_intersectingWithAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetIDsInDataSourceWithIdentifier:intersectingWithAssetIDs:");
}

id objc_msgSend_assetIDsOfStoreAssetsWithPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetIDsOfStoreAssetsWithPredicate:");
}

id objc_msgSend_assetIsHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetIsHidden");
}

id objc_msgSend_assetLogID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetLogID");
}

id objc_msgSend_assetPartsForLibraryAsset_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetPartsForLibraryAsset:completion:");
}

id objc_msgSend_assetPathToCacheItemDict(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetPathToCacheItemDict");
}

id objc_msgSend_assetURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetURL");
}

id objc_msgSend_assetUpdatesByIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetUpdatesByIdentifier");
}

id objc_msgSend_assetVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetVersion");
}

id objc_msgSend_attributeSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeSet");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_author(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "author");
}

id objc_msgSend_authorCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorCount");
}

id objc_msgSend_authorNames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorNames");
}

id objc_msgSend_availableDefaultCollectionIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableDefaultCollectionIDs");
}

id objc_msgSend_availableDefaultCollectionIDsForOS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableDefaultCollectionIDsForOS");
}

id objc_msgSend_availableSelectableDefaultCollectionIDsForOS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableSelectableDefaultCollectionIDsForOS");
}

id objc_msgSend_avoidSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avoidSync");
}

id objc_msgSend_backgroundReadOnlyContextPool(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundReadOnlyContextPool");
}

id objc_msgSend_batchDeleteEntity_matching_prefetchRelationships_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchDeleteEntity:matching:prefetchRelationships:");
}

id objc_msgSend_beginAuthentication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAuthentication:");
}

id objc_msgSend_bookCoverForLibraryAssetProperties_size_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookCoverForLibraryAssetProperties:size:completion:");
}

id objc_msgSend_bookDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookDescription");
}

id objc_msgSend_bookHighWaterMarkProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookHighWaterMarkProgress");
}

id objc_msgSend_bookSampleDownloadURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookSampleDownloadURL");
}

id objc_msgSend_booksToDelete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "booksToDelete");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bu_arrayByRemovingNSNulls(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_arrayByRemovingNSNulls");
}

id objc_msgSend_bu_arrayByRemovingNSNullsInvokingBlockForNulls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_arrayByRemovingNSNullsInvokingBlockForNulls:");
}

id objc_msgSend_bu_dictionaryUsingPropertyAsKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_dictionaryUsingPropertyAsKey:");
}

id objc_msgSend_bu_prettyDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_prettyDescription");
}

id objc_msgSend_bu_reversedArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_reversedArray");
}

id objc_msgSend_buildRootFolderShorthandMapCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildRootFolderShorthandMapCompletion:");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bytesDownloaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytesDownloaded");
}

id objc_msgSend_cacheURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheURL");
}

id objc_msgSend_canDeleteCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canDeleteCollection");
}

id objc_msgSend_canDeleteFromAllDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canDeleteFromAllDevices");
}

id objc_msgSend_canImportURL_openInPlace_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canImportURL:openInPlace:options:");
}

id objc_msgSend_canMakeAssetsLocal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canMakeAssetsLocal");
}

id objc_msgSend_canPause(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPause");
}

id objc_msgSend_canRedownload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRedownload");
}

id objc_msgSend_canRedownloadAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRedownloadAssets");
}

id objc_msgSend_canRemoveFromCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRemoveFromCollection");
}

id objc_msgSend_canRestart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRestart");
}

id objc_msgSend_canResume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canResume");
}

id objc_msgSend_canStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canStart");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperations");
}

id objc_msgSend_cancelDownloadForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDownloadForAssetID:");
}

id objc_msgSend_changedValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changedValues");
}

id objc_msgSend_checkForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForUpdates:");
}

id objc_msgSend_checkNonSeriesAudiobooksWithManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkNonSeriesAudiobooksWithManagedObjectContext:");
}

id objc_msgSend_checkOwnedSingleBookSeriesWithManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkOwnedSingleBookSeriesWithManagedObjectContext:");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_cleanupDateFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupDateFinished");
}

id objc_msgSend_cleanupDefaultCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupDefaultCollections");
}

id objc_msgSend_clearAgingDocumentInbox(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAgingDocumentInbox");
}

id objc_msgSend_clearCacheEntryForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCacheEntryForAssetID:");
}

id objc_msgSend_clearCacheFiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCacheFiles");
}

id objc_msgSend_clearLastUsedStoreAccountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLastUsedStoreAccountID");
}

id objc_msgSend_clearMaxSortKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearMaxSortKey");
}

id objc_msgSend_clearSortKeysFromAssetsInMOCForUpgrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSortKeysFromAssetsInMOCForUpgrade:");
}

id objc_msgSend_cloudAssetDetailManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudAssetDetailManager");
}

id objc_msgSend_cloudAssetType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudAssetType");
}

id objc_msgSend_cloudCollectionsManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudCollectionsManager");
}

id objc_msgSend_cloudReadingNowDetailManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudReadingNowDetailManager");
}

id objc_msgSend_cloudSyncVersionsForDataType_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudSyncVersionsForDataType:inContext:");
}

id objc_msgSend_cloudVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudVersion");
}

id objc_msgSend_coalescedDataSourceReloadByIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coalescedDataSourceReloadByIdentifier");
}

id objc_msgSend_coalescedDataSourceReloadByIdentifierSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coalescedDataSourceReloadByIdentifierSync");
}

id objc_msgSend_coalescedResetAllCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coalescedResetAllCollections");
}

id objc_msgSend_coalescedResetChangedCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coalescedResetChangedCollections");
}

id objc_msgSend_coalescedStatusChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coalescedStatusChange");
}

id objc_msgSend_coalescedZeroing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coalescedZeroing");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_collection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collection");
}

id objc_msgSend_collectionController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionController");
}

id objc_msgSend_collectionDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionDescription");
}

id objc_msgSend_collectionDetailManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionDetailManager");
}

id objc_msgSend_collectionDetailRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionDetailRepresentation");
}

id objc_msgSend_collectionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionID");
}

id objc_msgSend_collectionIDFromCollectionMemberID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionIDFromCollectionMemberID:");
}

id objc_msgSend_collectionId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionId");
}

id objc_msgSend_collectionManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionManager");
}

id objc_msgSend_collectionManagerDidModifyWantToReadCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionManagerDidModifyWantToReadCollection:");
}

id objc_msgSend_collectionMemberDictionariesWithAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberDictionariesWithAssetIDs:");
}

id objc_msgSend_collectionMemberDictionaryWithLibraryAsset_sortKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberDictionaryWithLibraryAsset:sortKey:");
}

id objc_msgSend_collectionMemberID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberID");
}

id objc_msgSend_collectionMemberIDWithCollectionID_assetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberIDWithCollectionID:assetID:");
}

id objc_msgSend_collectionMemberManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberManager");
}

id objc_msgSend_collectionMemberRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberRepresentation");
}

id objc_msgSend_collectionMembers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMembers");
}

id objc_msgSend_collectionOnMainQueueWithCollectionID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionOnMainQueueWithCollectionID:error:");
}

id objc_msgSend_collectionProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionProvider");
}

id objc_msgSend_collectionWithCollectionID_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionWithCollectionID:inManagedObjectContext:error:");
}

id objc_msgSend_collectionsWithCollectionIDs_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionsWithCollectionIDs:inManagedObjectContext:error:");
}

id objc_msgSend_collectionsWorkerChildContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionsWorkerChildContext");
}

id objc_msgSend_combinedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combinedState");
}

id objc_msgSend_comments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "comments");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completionHandlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionHandlers");
}

id objc_msgSend_completionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionQueue");
}

id objc_msgSend_component_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "component:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_computeCounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeCounts");
}

id objc_msgSend_configs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configs");
}

id objc_msgSend_configureFromAssetDetail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromAssetDetail:");
}

id objc_msgSend_configureFromBackupSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromBackupSummary:");
}

id objc_msgSend_configureFromCollectionDetail_shouldCompareModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromCollectionDetail:shouldCompareModificationDate:");
}

id objc_msgSend_configureFromCollectionMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromCollectionMember:");
}

id objc_msgSend_configureFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromDictionary:");
}

id objc_msgSend_configureFromReadingNowDetail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromReadingNowDetail:");
}

id objc_msgSend_consumeUpdates_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumeUpdates:inManagedObjectContext:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contentPredicateForSeriesID_onlyPurchased_forceCloud_allowsExplicit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentPredicateForSeriesID:onlyPurchased:forceCloud:allowsExplicit:");
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentType");
}

id objc_msgSend_contentTypesForDefaultCollectionWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentTypesForDefaultCollectionWithID:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_coordinateReadingItemAtURL_options_error_byAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinateReadingItemAtURL:options:error:byAccessor:");
}

id objc_msgSend_coordinateWritingItemAtURL_options_error_byAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinateWritingItemAtURL:options:error:byAccessor:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyEntityPropertiesArray_fromEntityName_withPredicate_sortBy_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyEntityPropertiesArray:fromEntityName:withPredicate:sortBy:ascending:");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyNextCollectionSortKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyNextCollectionSortKey:");
}

id objc_msgSend_copyToURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyToURL:error:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForActionItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForActionItem:");
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForFetchRequest:error:");
}

id objc_msgSend_countTotalFileSize_totalFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countTotalFileSize:totalFileCount:");
}

id objc_msgSend_coverAspectRatio(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverAspectRatio");
}

id objc_msgSend_coverEffectRTLOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverEffectRTLOverride");
}

id objc_msgSend_coverEffectsContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverEffectsContent");
}

id objc_msgSend_coverEffectsNightMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverEffectsNightMode");
}

id objc_msgSend_coverSourceRank(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverSourceRank");
}

id objc_msgSend_coverWritingMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverWritingMode");
}

id objc_msgSend_coverWritingModeLanguageAndPageProgressionDirectionFromAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverWritingModeLanguageAndPageProgressionDirectionFromAssetID:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createSeriesContainers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSeriesContainers");
}

id objc_msgSend_createSeriesUpdaterMoc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSeriesUpdaterMoc");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creationDate");
}

id objc_msgSend_currentAssetDetailCloudSyncVersions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentAssetDetailCloudSyncVersions:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentCollectionDetailCloudSyncVersions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCollectionDetailCloudSyncVersions:");
}

id objc_msgSend_currentCollectionMemberCloudSyncVersions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCollectionMemberCloudSyncVersions:");
}

id objc_msgSend_currentReachabilityStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentReachabilityStatus");
}

id objc_msgSend_currentReadingNowDetailCloudSyncVersions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentReadingNowDetailCloudSyncVersions:");
}

id objc_msgSend_currentlyDownloading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyDownloading");
}

id objc_msgSend_dataSourceConformingToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceConformingToProtocol:");
}

id objc_msgSend_dataSourceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceIdentifier");
}

id objc_msgSend_dataSourceInsertionDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceInsertionDate");
}

id objc_msgSend_dataSourceWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceWithIdentifier:");
}

id objc_msgSend_dataSources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSources");
}

id objc_msgSend_dataSourcesBitmask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourcesBitmask");
}

id objc_msgSend_dataSourcesByIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourcesByIdentifier");
}

id objc_msgSend_dataSourcesConformingToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourcesConformingToProtocol:");
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataType");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFinished");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultAllBooksCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultAllBooksCollection");
}

id objc_msgSend_defaultAudioBooksCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultAudioBooksCollection");
}

id objc_msgSend_defaultBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBag");
}

id objc_msgSend_defaultBookLibrary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBookLibrary");
}

id objc_msgSend_defaultBooksCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBooksCollection");
}

id objc_msgSend_defaultCacheManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCacheManager");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCollections");
}

id objc_msgSend_defaultContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultContainer");
}

id objc_msgSend_defaultDownloadedCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultDownloadedCollection");
}

id objc_msgSend_defaultFinishedCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFinishedCollection");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultPDFsCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultPDFsCollection");
}

id objc_msgSend_defaultSamplesCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSamplesCollection");
}

id objc_msgSend_defaultSortModeForCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSortModeForCollectionID:");
}

id objc_msgSend_defaultViewModeForCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultViewModeForCollectionID:");
}

id objc_msgSend_defaultWantToReadCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWantToReadCollection");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteAssets_exhaustive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAssets:exhaustive:");
}

id objc_msgSend_deleteAssets_exhaustive_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAssets:exhaustive:completion:");
}

id objc_msgSend_deleteCollectionDetailForCollectionIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCollectionDetailForCollectionIDs:completion:");
}

id objc_msgSend_deleteCollectionMemberForCollectionMemberIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCollectionMemberForCollectionMemberIDs:completion:");
}

id objc_msgSend_deleteCollectionWithCollectionID_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCollectionWithCollectionID:inManagedObjectContext:error:");
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_deleteRemovesFromCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRemovesFromCollection");
}

id objc_msgSend_deletedFlag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedFlag");
}

id objc_msgSend_deletedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedObjects");
}

id objc_msgSend_describedImageWithIdentifier_size_processingOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "describedImageWithIdentifier:size:processingOptions:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_desktopSupportLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desktopSupportLevel");
}

id objc_msgSend_destinationFilePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationFilePath");
}

id objc_msgSend_destroyPersistentStoreAtURL_withType_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destroyPersistentStoreAtURL:withType:options:error:");
}

id objc_msgSend_details(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "details");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_dictionaryWithValuesForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithValuesForKeys:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didMigrateBooksCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMigrateBooksCollection:");
}

id objc_msgSend_disableUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableUpdates");
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchQueue");
}

id objc_msgSend_displayAuthor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayAuthor");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantPast");
}

id objc_msgSend_documentsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "documentsURL");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadRelatedNotificationCoalescingBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadRelatedNotificationCoalescingBlock");
}

id objc_msgSend_downloadedDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadedDSID");
}

id objc_msgSend_downloadingCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadingCount");
}

id objc_msgSend_dqSyncQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dqSyncQueue");
}

id objc_msgSend_dq_assetsToReconcile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dq_assetsToReconcile");
}

id objc_msgSend_dq_filesSizeForCacheItemRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dq_filesSizeForCacheItemRequest:");
}

id objc_msgSend_dq_libraryDataSource_reconcileAssets_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dq_libraryDataSource:reconcileAssets:reason:");
}

id objc_msgSend_dq_persistInfoToDisk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dq_persistInfoToDisk");
}

id objc_msgSend_dq_sync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dq_sync:");
}

id objc_msgSend_dq_unclaimIdentifiers_forDataSourceBitmask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dq_unclaimIdentifiers:forDataSourceBitmask:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_eligibleBooksProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleBooksProvider");
}

id objc_msgSend_enableCloudMerge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCloudMerge");
}

id objc_msgSend_enableCloudMergeQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCloudMergeQueue");
}

id objc_msgSend_enableUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableUpdates");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedData");
}

id objc_msgSend_entityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityForName:inManagedObjectContext:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_ephemeralAssetsRedundant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ephemeralAssetsRedundant:");
}

id objc_msgSend_ephemeralSamplesPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ephemeralSamplesPredicate");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "error");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_evaluateWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateWithObject:");
}

id objc_msgSend_examineURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "examineURL:completion:");
}

id objc_msgSend_excludeAudiobooksPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "excludeAudiobooksPredicate");
}

id objc_msgSend_excludeEphemeralAssetsPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "excludeEphemeralAssetsPredicate");
}

id objc_msgSend_excludeHiddenAssetsPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "excludeHiddenAssetsPredicate");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequest:error:");
}

id objc_msgSend_executeWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWithCompletion:");
}

id objc_msgSend_expectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedDate");
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expirationDate");
}

id objc_msgSend_familyID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyID");
}

id objc_msgSend_fetchAllLocalBooksEligibleToBeMadeUbiquitousWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllLocalBooksEligibleToBeMadeUbiquitousWithCompletion:");
}

id objc_msgSend_fetchAssetIDsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAssetIDsWithCompletion:");
}

id objc_msgSend_fetchAssetsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAssetsWithCompletion:");
}

id objc_msgSend_fetchAssetsWithIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAssetsWithIDs:completion:");
}

id objc_msgSend_fetchCGImageFor_forRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCGImageFor:forRequest:completion:");
}

id objc_msgSend_fetchDefaultBooksCollectionInUIMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDefaultBooksCollectionInUIMoc:");
}

id objc_msgSend_fetchImageForAsset_size_includeSpine_coverEffectsEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchImageForAsset:size:includeSpine:coverEffectsEnvironment:");
}

id objc_msgSend_fetchImageForAsset_size_includeSpine_includeShadow_coverEffectsEnvironment_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchImageForAsset:size:includeSpine:includeShadow:coverEffectsEnvironment:completion:");
}

id objc_msgSend_fetchImageShadowForAsset_size_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchImageShadowForAsset:size:completion:");
}

id objc_msgSend_fetchLibraryAssetsFromAssetIDs_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLibraryAssetsFromAssetIDs:handler:");
}

id objc_msgSend_fetchMigratedProperties_deleteFoundAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMigratedProperties:deleteFoundAssets:");
}

id objc_msgSend_fetchMixedAssetsWithBookIds_audiobookIds_relationships_views_additionalParameters_batchSize_metadata_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMixedAssetsWithBookIds:audiobookIds:relationships:views:additionalParameters:batchSize:metadata:completionHandler:");
}

id objc_msgSend_fetchPriceForAssetID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPriceForAssetID:completion:");
}

id objc_msgSend_fetchRequestForRecentlyEngaged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestForRecentlyEngaged");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_fetchUserQuotaWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserQuotaWithCompletion:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileModificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileModificationDate");
}

id objc_msgSend_fileOnDiskLastTouchDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileOnDiskLastTouchDate");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSize");
}

id objc_msgSend_fileSizeNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSizeNumber");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURL");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredSetUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredSetUsingPredicate:");
}

id objc_msgSend_finalizeAuthentication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeAuthentication:");
}

id objc_msgSend_finishEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishEncoding");
}

id objc_msgSend_finishedDateKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedDateKind");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_fixCollectionMemberAssetLinks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixCollectionMemberAssetLinks");
}

id objc_msgSend_fixFilePermissions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixFilePermissions");
}

id objc_msgSend_fixPDFCollectionIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixPDFCollectionIfNeeded");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_forceToTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceToTop");
}

id objc_msgSend_forcedFileProtection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcedFileProtection");
}

id objc_msgSend_foundText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foundText");
}

id objc_msgSend_gatherChangedAssetsCollectionsWithLibraryMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gatherChangedAssetsCollectionsWithLibraryMoc:");
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generation");
}

id objc_msgSend_generationCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generationCount");
}

id objc_msgSend_generationFetched(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generationFetched");
}

id objc_msgSend_genre(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genre");
}

id objc_msgSend_genres(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genres");
}

id objc_msgSend_getAssetDetailChangesSince_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAssetDetailChangesSince:completion:");
}

id objc_msgSend_getChangesQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getChangesQueue");
}

id objc_msgSend_getCollectionDetailChangesSince_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCollectionDetailChangesSince:completion:");
}

id objc_msgSend_getCollectionMemberChangesSince_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCollectionMemberChangesSince:completion:");
}

id objc_msgSend_getQuotaInfoForPrimaryAccountCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getQuotaInfoForPrimaryAccountCompletion:");
}

id objc_msgSend_getReadingNowDetailChangesSince_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getReadingNowDetailChangesSince:completion:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_ghostBookCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ghostBookCount");
}

id objc_msgSend_grouping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grouping");
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChanges");
}

id objc_msgSend_hasCheckedOwnedSingleBookSeriesAndNonSeriesAudiobooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCheckedOwnedSingleBookSeriesAndNonSeriesAudiobooks");
}

id objc_msgSend_hasFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasFinished");
}

id objc_msgSend_hasImportantAssetDetails(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasImportantAssetDetails");
}

id objc_msgSend_hasImportantReadingNowDetails(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasImportantReadingNowDetails");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasRACSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRACSupport");
}

id objc_msgSend_hasSpecifiedFinishedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSpecifiedFinishedDate");
}

id objc_msgSend_hasStoreInCommonWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStoreInCommonWith:");
}

id objc_msgSend_hasTooManyAuthors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTooManyAuthors");
}

id objc_msgSend_hasTooManyNarrators(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTooManyNarrators");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hidden");
}

id objc_msgSend_hiddenAssetStoreIDsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hiddenAssetStoreIDsWithCompletion:");
}

id objc_msgSend_historyToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historyToken");
}

id objc_msgSend_historyTokenOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historyTokenOffset");
}

id objc_msgSend_iTunesU(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iTunesU");
}

id objc_msgSend_iTunesUCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iTunesUCount");
}

id objc_msgSend_id(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "id");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierForMyBooksCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierForMyBooksCollection");
}

id objc_msgSend_identifierWithAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierWithAssetID:");
}

id objc_msgSend_identifierWithTemporaryAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierWithTemporaryAssetID:");
}

id objc_msgSend_identifiersForAssetsNeedingReconcile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiersForAssetsNeedingReconcile");
}

id objc_msgSend_im_imageWithCGImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_imageWithCGImage:");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageSource");
}

id objc_msgSend_importURL_openInPlace_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importURL:openInPlace:options:completion:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectIdenticalTo:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initWithAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAsset:");
}

id objc_msgSend_initWithAsset_dataSource_dataSourceBitmask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAsset:dataSource:dataSourceBitmask:");
}

id objc_msgSend_initWithAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:");
}

id objc_msgSend_initWithAssetID_assetContentType_collectionTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:assetContentType:collectionTitle:");
}

id objc_msgSend_initWithAssetID_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:identifier:");
}

id objc_msgSend_initWithAssetID_notify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:notify:");
}

id objc_msgSend_initWithAssetID_productProfile_identifier_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:productProfile:identifier:date:");
}

id objc_msgSend_initWithAssetID_progressValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:progressValue:");
}

id objc_msgSend_initWithAssetID_state_progressValue_timeRemaining_bytesDownloaded_fileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:state:progressValue:timeRemaining:bytesDownloaded:fileSize:");
}

id objc_msgSend_initWithAssetID_state_supplementalContentState_progressValue_timeRemaining_bytesDownloaded_fileSize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:state:supplementalContentState:progressValue:timeRemaining:bytesDownloaded:fileSize:error:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithCacheItemRequestWithAssetID_assetURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCacheItemRequestWithAssetID:assetURL:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCollectionID:");
}

id objc_msgSend_initWithCollectionMemberID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCollectionMemberID:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContent:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_coordinator_entityName_predicate_mapProperty_propertiesOfInterest_observer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:coordinator:entityName:predicate:mapProperty:propertiesOfInterest:observer:");
}

id objc_msgSend_initWithContextProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextProvider:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntityName:");
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchRequest:");
}

id objc_msgSend_initWithFileID_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileID:line:");
}

id objc_msgSend_initWithFilter_notify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFilter:notify:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithKey_ascending_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:ascending:selector:");
}

id objc_msgSend_initWithLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibrary:");
}

id objc_msgSend_initWithLibraryAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryAsset:");
}

id objc_msgSend_initWithLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryManager:");
}

id objc_msgSend_initWithLibraryManager_bdsPriceTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryManager:bdsPriceTracker:");
}

id objc_msgSend_initWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLongLong:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithNotifyBlock_blockDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNotifyBlock:blockDescription:");
}

id objc_msgSend_initWithNotifyBlock_notifyTimeout_blockDescription_notifyTimeoutBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNotifyBlock:notifyTimeout:blockDescription:notifyTimeoutBlock:");
}

id objc_msgSend_initWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:forKeys:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithPersistentStoreURL_bdsPriceTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentStoreURL:bdsPriceTracker:");
}

id objc_msgSend_initWithPurchasedDSID_downloadedDSID_familyID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPurchasedDSID:downloadedDSID:familyID:");
}

id objc_msgSend_initWithQueryString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueryString:attributes:");
}

id objc_msgSend_initWithRelease_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRelease:");
}

id objc_msgSend_initWithStoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreID:");
}

id objc_msgSend_initWithStoreID_collectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreID:collectionID:");
}

id objc_msgSend_initWithStoreID_collectionID_forceToTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreID:collectionID:forceToTop:");
}

id objc_msgSend_initWithTemporaryAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTemporaryAssetID:");
}

id objc_msgSend_initWithType_storeID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:storeID:");
}

id objc_msgSend_initWithURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:options:error:");
}

id objc_msgSend_initWithURLRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLRequest:");
}

id objc_msgSend_initialDataSourceFetchInitiated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialDataSourceFetchInitiated");
}

id objc_msgSend_insertNewCollectionWithCollectionID_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertNewCollectionWithCollectionID:inManagedObjectContext:");
}

id objc_msgSend_insertNewLibraryAssetWithIdentifier_assetID_orTemporaryAssetID_type_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertNewLibraryAssetWithIdentifier:assetID:orTemporaryAssetID:type:inManagedObjectContext:");
}

id objc_msgSend_insertNewObjectForEntityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertNewObjectForEntityForName:inManagedObjectContext:");
}

id objc_msgSend_insertedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertedObjects");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_internetReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internetReachable");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_intersectsSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectsSet:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate:");
}

id objc_msgSend_isAccountModificationAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountModificationAllowed");
}

id objc_msgSend_isAllBooksCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAllBooksCollection:");
}

id objc_msgSend_isAudiobook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAudiobook");
}

id objc_msgSend_isAudiobookPreview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAudiobookPreview");
}

id objc_msgSend_isAudiobookTrackContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAudiobookTrackContentType:");
}

id objc_msgSend_isBook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBook");
}

id objc_msgSend_isCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloud");
}

id objc_msgSend_isContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContainer");
}

id objc_msgSend_isDefaultCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDefaultCollection");
}

id objc_msgSend_isDefaultCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDefaultCollection:");
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeleted");
}

id objc_msgSend_isDevelopment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDevelopment");
}

id objc_msgSend_isDownloading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDownloading");
}

id objc_msgSend_isDownloadingSupplementalContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDownloadingSupplementalContent");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEphemeral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEphemeral");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExplicit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExplicit");
}

id objc_msgSend_isExplicitContentAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExplicitContentAllowed");
}

id objc_msgSend_isExplicitMaterialAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExplicitMaterialAllowed");
}

id objc_msgSend_isFault(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFault");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFileURL");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHidden");
}

id objc_msgSend_isImporting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isImporting");
}

id objc_msgSend_isInSamples(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInSamples");
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalInstall");
}

id objc_msgSend_isLocal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocal");
}

id objc_msgSend_isLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocked");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isManagedBook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManagedBook");
}

id objc_msgSend_isNew(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNew");
}

id objc_msgSend_isNonLocalSample(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonLocalSample");
}

id objc_msgSend_isOwned(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOwned");
}

id objc_msgSend_isPreorderBook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPreorderBook");
}

id objc_msgSend_isProof(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProof");
}

id objc_msgSend_isReturningUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReturningUser");
}

id objc_msgSend_isRightToLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRightToLeft");
}

id objc_msgSend_isRunningInStoreDemoMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningInStoreDemoMode");
}

id objc_msgSend_isSample(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSample");
}

id objc_msgSend_isSeriesCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSeriesCollection");
}

id objc_msgSend_isSeriesCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSeriesCollectionID:");
}

id objc_msgSend_isSeriesItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSeriesItem");
}

id objc_msgSend_isShowPurchasesEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShowPurchasesEnabled");
}

id objc_msgSend_isStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStore");
}

id objc_msgSend_isStoreAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStoreAllowed");
}

id objc_msgSend_isStoreAudiobook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStoreAudiobook");
}

id objc_msgSend_isStoreItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStoreItem");
}

id objc_msgSend_isSubsetOfSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubsetOfSet:");
}

id objc_msgSend_isSupplementalContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupplementalContent");
}

id objc_msgSend_isTimestampNewerThanMaxDeletedAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTimestampNewerThanMaxDeletedAge:");
}

id objc_msgSend_isTrackedAsRecent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTrackedAsRecent");
}

id objc_msgSend_isUbiquitousBook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUbiquitousBook");
}

id objc_msgSend_isUbiquitousItemAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUbiquitousItemAtURL:");
}

id objc_msgSend_isUserSignedInToiCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserSignedInToiCloud");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValid");
}

id objc_msgSend_isValidForDeserialization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidForDeserialization:");
}

id objc_msgSend_keysOfEntriesPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysOfEntriesPassingTest:");
}

id objc_msgSend_kind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kind");
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "language");
}

id objc_msgSend_languageIsArabic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageIsArabic:");
}

id objc_msgSend_languageIsHebrew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageIsHebrew:");
}

id objc_msgSend_lastEngagedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastEngagedDate");
}

id objc_msgSend_lastModification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastModification");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastOpenDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastOpenDate");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_libraryAssetForAssetIDs_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetForAssetIDs:inManagedObjectContext:");
}

id objc_msgSend_libraryAssetOnMainQueueWithAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetOnMainQueueWithAssetID:");
}

id objc_msgSend_libraryAssetOnMainQueueWithPermanentOrTemporaryAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetOnMainQueueWithPermanentOrTemporaryAssetID:");
}

id objc_msgSend_libraryAssetStatusController_isAccountPrimaryAndSignedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetStatusController:isAccountPrimaryAndSignedIn:");
}

id objc_msgSend_libraryAssetStatusController_makeAccountPrimaryAndSignedIn_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetStatusController:makeAccountPrimaryAndSignedIn:completion:");
}

id objc_msgSend_libraryAssetWithAssetID_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetWithAssetID:inManagedObjectContext:");
}

id objc_msgSend_libraryAssetWithAssetIdentifier_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetWithAssetIdentifier:inManagedObjectContext:");
}

id objc_msgSend_libraryAssetWithPermanentOrTemporaryAssetID_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetWithPermanentOrTemporaryAssetID:inManagedObjectContext:");
}

id objc_msgSend_libraryAssetsWithAssetIDs_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetsWithAssetIDs:inManagedObjectContext:");
}

id objc_msgSend_libraryAssetsWithAssetIDsContainedInList_tempAssetIDs_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryAssetsWithAssetIDsContainedInList:tempAssetIDs:inManagedObjectContext:");
}

id objc_msgSend_libraryDataSource_addedAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:addedAssets:");
}

id objc_msgSend_libraryDataSource_addedAssets_inGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:addedAssets:inGroup:");
}

id objc_msgSend_libraryDataSource_reloadInGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:reloadInGroup:");
}

id objc_msgSend_libraryDataSource_removedAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:removedAssets:");
}

id objc_msgSend_libraryDataSource_removedAssets_inGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:removedAssets:inGroup:");
}

id objc_msgSend_libraryDataSource_updateWithName_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:updateWithName:block:");
}

id objc_msgSend_libraryDataSource_updatedAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:updatedAssets:");
}

id objc_msgSend_libraryDataSource_updatedAssets_inGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDataSource:updatedAssets:inGroup:");
}

id objc_msgSend_libraryDidReload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryDidReload:");
}

id objc_msgSend_libraryManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager");
}

id objc_msgSend_libraryMutableAssetWithAssetID_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryMutableAssetWithAssetID:inManagedObjectContext:");
}

id objc_msgSend_libraryMutableAssetWithPermanentOrTemporaryAssetID_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryMutableAssetWithPermanentOrTemporaryAssetID:inManagedObjectContext:");
}

id objc_msgSend_listeners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listeners");
}

id objc_msgSend_loadCachedMigrationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadCachedMigrationData");
}

id objc_msgSend_loadCoreDataPersistentStoreInitializedHandler_migrationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadCoreDataPersistentStoreInitializedHandler:migrationHandler:");
}

id objc_msgSend_localITSAudiobookCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localITSAudiobookCount");
}

id objc_msgSend_localJaliscoBooksOnlyCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localJaliscoBooksOnlyCount");
}

id objc_msgSend_localModDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localModDate");
}

id objc_msgSend_localOnlyBookCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localOnlyBookCount");
}

id objc_msgSend_localOnlySeriesItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localOnlySeriesItems");
}

id objc_msgSend_localOnlySeriesItemsParent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localOnlySeriesItemsParent");
}

id objc_msgSend_localSampleCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localSampleCount");
}

id objc_msgSend_localUbiquityCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localUbiquityCount");
}

id objc_msgSend_localVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localVersion");
}

id objc_msgSend_localiTunesUCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localiTunesUCount");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "location");
}

id objc_msgSend_locationModificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationModificationDate");
}

id objc_msgSend_lockupProfilesForStoreIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockupProfilesForStoreIDs:completion:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longValue");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_majorVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "majorVersion");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectContext");
}

id objc_msgSend_managedObjectModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectModel");
}

id objc_msgSend_mappedAssetContentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mappedAssetContentType");
}

id objc_msgSend_mappedAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mappedAssetID");
}

id objc_msgSend_markAsFinishedStoreID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAsFinishedStoreID:completion:");
}

id objc_msgSend_markAssetsAsFinished_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAssetsAsFinished:completion:");
}

id objc_msgSend_maxModificationDateColumnName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxModificationDateColumnName");
}

id objc_msgSend_maxSortKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxSortKey");
}

id objc_msgSend_maxUserModificationDateExpressionDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxUserModificationDateExpressionDescription");
}

id objc_msgSend_memberOfOtherManualCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "memberOfOtherManualCollection");
}

id objc_msgSend_memberOfSampleCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "memberOfSampleCollection");
}

id objc_msgSend_members(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "members");
}

id objc_msgSend_mergeChangesFromContextDidSaveNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeChangesFromContextDidSaveNotification:");
}

id objc_msgSend_mergeChangesFromRemoteContextSave_intoContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeChangesFromRemoteContextSave:intoContexts:");
}

id objc_msgSend_mergeCurrentCollectionDetailsToCloudInMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeCurrentCollectionDetailsToCloudInMoc:");
}

id objc_msgSend_mergeCurrentCollectionMembersToCloudInMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeCurrentCollectionMembersToCloudInMoc:");
}

id objc_msgSend_mergedSerializedStatus_summaries_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergedSerializedStatus:summaries:inMOC:");
}

id objc_msgSend_metadataForPersistentStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataForPersistentStore:");
}

id objc_msgSend_metadataMigrationVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataMigrationVersion");
}

id objc_msgSend_metadataObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataObjectForKey:");
}

id objc_msgSend_migrateCollections_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateCollections:context:");
}

id objc_msgSend_migrateDataSources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateDataSources:");
}

id objc_msgSend_migrateMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateMetaData:");
}

id objc_msgSend_migratePurgeOldDatabases(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migratePurgeOldDatabases");
}

id objc_msgSend_migrateSortOrderKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateSortOrderKeys:");
}

id objc_msgSend_migrateToMyBooksWithAssetIDs_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateToMyBooksWithAssetIDs:inManagedObjectContext:");
}

id objc_msgSend_migrateWithMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateWithMoc:");
}

id objc_msgSend_migratedPropertiesChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migratedPropertiesChanged");
}

id objc_msgSend_migratedSortOrderData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migratedSortOrderData");
}

id objc_msgSend_migratedSortOrderDataByPluginAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migratedSortOrderDataByPluginAssetID");
}

id objc_msgSend_migrationCachePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationCachePath");
}

id objc_msgSend_migrationDispatchQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationDispatchQueue");
}

id objc_msgSend_migrationMoc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationMoc");
}

id objc_msgSend_migrationOldDatabaseFolderPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationOldDatabaseFolderPath");
}

id objc_msgSend_minorVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minorVersion");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modificationDate");
}

id objc_msgSend_modifyGlobalAnnotationsWithAssetIDs_type_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyGlobalAnnotationsWithAssetIDs:type:performBlock:");
}

id objc_msgSend_mostRecentPurchaseDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostRecentPurchaseDate:");
}

id objc_msgSend_mostRecentlyEngagedLibraryAssetsWithTypes_limit_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostRecentlyEngagedLibraryAssetsWithTypes:limit:inManagedObjectContext:");
}

id objc_msgSend_mostRecentlyOpenedLibraryAssetsWithTypes_limit_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostRecentlyOpenedLibraryAssetsWithTypes:limit:inManagedObjectContext:");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_mq_setupAndStartQueryWithGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mq_setupAndStartQueryWithGroup:");
}

id objc_msgSend_multipleAuthors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multipleAuthors");
}

id objc_msgSend_mutableCollectionWithCollectionID_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCollectionWithCollectionID:inManagedObjectContext:error:");
}

id objc_msgSend_mutableCollectionsWithCollectionIDs_includeDeleted_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCollectionsWithCollectionIDs:includeDeleted:inManagedObjectContext:error:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_narratorCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "narratorCount");
}

id objc_msgSend_narratorNames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "narratorNames");
}

id objc_msgSend_needsDuplicateCollectionMembersRemoved(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsDuplicateCollectionMembersRemoved");
}

id objc_msgSend_needsGlobalAnnotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsGlobalAnnotation");
}

id objc_msgSend_needsMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsMigration");
}

id objc_msgSend_needsResetNilAuthorsOnAllBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsResetNilAuthorsOnAllBooks");
}

id objc_msgSend_needsResetNilAuthorsOnAllSeries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsResetNilAuthorsOnAllSeries");
}

id objc_msgSend_needsResetSeriesStacksAndCollectionMembershipOnAllBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsResetSeriesStacksAndCollectionMembershipOnAllBooks");
}

id objc_msgSend_newCapturedEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newCapturedEnvironment:");
}

id objc_msgSend_newManagedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newManagedObjectContext");
}

id objc_msgSend_newManagedObjectContextWithClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newManagedObjectContextWithClass:");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextSortKeyForCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextSortKeyForCollection:");
}

id objc_msgSend_nonLocalSampleCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonLocalSampleCount");
}

id objc_msgSend_nonUserUpdateLastOpenDateTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonUserUpdateLastOpenDateTo:");
}

id objc_msgSend_nonlocalUbiquityCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonlocalUbiquityCount");
}

id objc_msgSend_nonlocaliTunesUCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonlocaliTunesUCount");
}

id objc_msgSend_nonretainedObjectValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonretainedObjectValue");
}

id objc_msgSend_notFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notFinished");
}

id objc_msgSend_notPredicateWithSubpredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notPredicateWithSubpredicate:");
}

id objc_msgSend_notify(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notify");
}

id objc_msgSend_notifyBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyBlock");
}

id objc_msgSend_notifyBlocksForNewAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyBlocksForNewAssets");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "now");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_numRandomBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numRandomBooks");
}

id objc_msgSend_numberOfItemsIniCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfItemsIniCloud");
}

id objc_msgSend_numberOfLibraryAssetsInManagdObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfLibraryAssetsInManagdObjectContext:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsPassingTest:");
}

id objc_msgSend_onAnnotationsMatchingPredicate_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAnnotationsMatchingPredicate:performBlock:");
}

id objc_msgSend_orPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orPredicateWithSubpredicates:");
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithArray:");
}

id objc_msgSend_ownershipObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownershipObservers");
}

id objc_msgSend_ownershipSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownershipSync");
}

id objc_msgSend_p_assetsRequiringDeletion_removingFromCollectionIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_assetsRequiringDeletion:removingFromCollectionIDs:");
}

id objc_msgSend_p_deleteAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_deleteAssets:");
}

id objc_msgSend_p_deleteAssets_exhaustive_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_deleteAssets:exhaustive:completion:");
}

id objc_msgSend_p_downloadSampleBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_downloadSampleBook:");
}

id objc_msgSend_p_fetchOrCreatePlaceholderCollectionForCollectionID_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_fetchOrCreatePlaceholderCollectionForCollectionID:moc:");
}

id objc_msgSend_p_libraryAssetWithIdentifier_predicate_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_libraryAssetWithIdentifier:predicate:inManagedObjectContext:");
}

id objc_msgSend_p_shouldDeleteAsset_removingFromCollectionIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_shouldDeleteAsset:removingFromCollectionIDs:");
}

id objc_msgSend_p_syncAllAssetDetailChangesToCloudInMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_syncAllAssetDetailChangesToCloudInMOC:");
}

id objc_msgSend_p_syncAllReadingNowChangesToCloudInMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_syncAllReadingNowChangesToCloudInMOC:");
}

id objc_msgSend_p_syncAssetDetailsForAssets_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_syncAssetDetailsForAssets:inMOC:");
}

id objc_msgSend_p_syncCollectionMembers_deletedCollectionMembers_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_syncCollectionMembers:deletedCollectionMembers:inContext:");
}

id objc_msgSend_p_syncCollections_deletedCollections_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_syncCollections:deletedCollections:inContext:");
}

id objc_msgSend_p_syncReadingNowDetailsForAssets_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_syncReadingNowDetailsForAssets:inMOC:");
}

id objc_msgSend_p_updateAsset_inCollectionMember_withMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_updateAsset:inCollectionMember:withMOC:");
}

id objc_msgSend_p_updateAssetInMembers_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_updateAssetInMembers:moc:");
}

id objc_msgSend_pageCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageCount");
}

id objc_msgSend_pageProgressionDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageProgressionDirection");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pauseDownloadForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseDownloadForAssetID:");
}

id objc_msgSend_performAddRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAddRequest:completion:");
}

id objc_msgSend_performBackgroundReadOnlyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBackgroundReadOnlyBlock:");
}

id objc_msgSend_performBackgroundReadOnlyBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBackgroundReadOnlyBlockAndWait:");
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performBlockInUIContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockInUIContext:");
}

id objc_msgSend_performBlockOnCollectionsWorkerQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockOnCollectionsWorkerQueue:");
}

id objc_msgSend_performBlockOnCollectionsWorkerQueueAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockOnCollectionsWorkerQueueAndWait:");
}

id objc_msgSend_performBlockOnUserSideQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockOnUserSideQueue:");
}

id objc_msgSend_performBlockOnWorkerQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockOnWorkerQueue:");
}

id objc_msgSend_performNamed_workerQueueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performNamed:workerQueueBlock:");
}

id objc_msgSend_performNamed_workerQueueBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performNamed:workerQueueBlockAndWait:");
}

id objc_msgSend_performReadOnlyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performReadOnlyBlock:");
}

id objc_msgSend_performRemoveRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRemoveRequest:completion:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorOnMainThread:withObject:waitUntilDone:");
}

id objc_msgSend_permanentOrTemporaryAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "permanentOrTemporaryAssetID");
}

id objc_msgSend_permlink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "permlink");
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreCoordinator");
}

id objc_msgSend_persistentStoreName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreName");
}

id objc_msgSend_persistentStoreURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreURL");
}

id objc_msgSend_persistentStores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStores");
}

id objc_msgSend_plAbsolutePhysicalLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plAbsolutePhysicalLocation");
}

id objc_msgSend_plLocationRangeEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plLocationRangeEnd");
}

id objc_msgSend_plLocationRangeStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plLocationRangeStart");
}

id objc_msgSend_plStorageUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plStorageUUID");
}

id objc_msgSend_plUserData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plUserData");
}

id objc_msgSend_placeholder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholder");
}

id objc_msgSend_plistEntryAsDictionaryFromAssetID_path_needsCoordination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plistEntryAsDictionaryFromAssetID:path:needsCoordination:");
}

id objc_msgSend_postIntegrateCleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postIntegrateCleanup");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_predicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicate");
}

id objc_msgSend_predicateForAllBooksExceptSeriesLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAllBooksExceptSeriesLibraryAssets");
}

id objc_msgSend_predicateForAllBooksWithSeriesID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAllBooksWithSeriesID:");
}

id objc_msgSend_predicateForAllDefaultCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAllDefaultCollections");
}

id objc_msgSend_predicateForAllOwnedAudiobooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAllOwnedAudiobooks");
}

id objc_msgSend_predicateForAllOwnedBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAllOwnedBooks");
}

id objc_msgSend_predicateForAllStoreLibraryAssetsExcludingUnpurchasedSeriesAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAllStoreLibraryAssetsExcludingUnpurchasedSeriesAssets");
}

id objc_msgSend_predicateForAllUnownedLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAllUnownedLibraryAssets");
}

id objc_msgSend_predicateForAnnotationsIncludingDeletedWithUserModificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAnnotationsIncludingDeletedWithUserModificationDate");
}

id objc_msgSend_predicateForAnnotationsWithAssetIDInList_includingDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAnnotationsWithAssetIDInList:includingDeleted:");
}

id objc_msgSend_predicateForAssetIDTaggedLibraryAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAssetIDTaggedLibraryAsset:");
}

id objc_msgSend_predicateForAssetIDsTaggedLibraryAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAssetIDsTaggedLibraryAssets:");
}

id objc_msgSend_predicateForAssetIdentifierTaggedLibraryAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAssetIdentifierTaggedLibraryAsset:");
}

id objc_msgSend_predicateForAssetsAvailableToAppIntentsWithTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAssetsAvailableToAppIntentsWithTypes:");
}

id objc_msgSend_predicateForAssetsInCollectionID_allowExplicit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAssetsInCollectionID:allowExplicit:");
}

id objc_msgSend_predicateForAssetsInCollectionID_allowExplicit_includeSeriesItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAssetsInCollectionID:allowExplicit:includeSeriesItems:");
}

id objc_msgSend_predicateForAudiobooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForAudiobooks");
}

id objc_msgSend_predicateForCollectionMembersInCollectionID_hideUnownedItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForCollectionMembersInCollectionID:hideUnownedItems:");
}

id objc_msgSend_predicateForCollectionMembersInCollectionID_hideUnownedItems_allowExplicit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForCollectionMembersInCollectionID:hideUnownedItems:allowExplicit:");
}

id objc_msgSend_predicateForCollectionWithCollectionIDInList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForCollectionWithCollectionIDInList:");
}

id objc_msgSend_predicateForContainerLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForContainerLibraryAssets");
}

id objc_msgSend_predicateForContainerWithSeriesIDLibraryAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForContainerWithSeriesIDLibraryAsset:");
}

id objc_msgSend_predicateForContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForContentType:");
}

id objc_msgSend_predicateForContentTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForContentTypes:");
}

id objc_msgSend_predicateForDataSourceIdentifierTaggedLibraryAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForDataSourceIdentifierTaggedLibraryAssets:");
}

id objc_msgSend_predicateForDeletedDefaultCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForDeletedDefaultCollections");
}

id objc_msgSend_predicateForDownloadableStoreLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForDownloadableStoreLibraryAssets");
}

id objc_msgSend_predicateForDownloadingStoreLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForDownloadingStoreLibraryAssets");
}

id objc_msgSend_predicateForExcludingCollectionMembersWithContainerLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForExcludingCollectionMembersWithContainerLibraryAssets");
}

id objc_msgSend_predicateForExcludingCollectionMembersWithSideloadedAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForExcludingCollectionMembersWithSideloadedAssets");
}

id objc_msgSend_predicateForExcludingContainerLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForExcludingContainerLibraryAssets");
}

id objc_msgSend_predicateForExcludingUnownedAudiobookAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForExcludingUnownedAudiobookAssets");
}

id objc_msgSend_predicateForGlobalAnnotationsWithAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForGlobalAnnotationsWithAssetIDs:");
}

id objc_msgSend_predicateForInTheCloudLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForInTheCloudLibraryAssets");
}

id objc_msgSend_predicateForLibraryAssetWithValidAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLibraryAssetWithValidAssetID");
}

id objc_msgSend_predicateForLibraryAssetsMarkedAsNew(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLibraryAssetsMarkedAsNew");
}

id objc_msgSend_predicateForLibraryAssetsMissingExplicitContentFlag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLibraryAssetsMissingExplicitContentFlag");
}

id objc_msgSend_predicateForLibraryAssetsRecentlyOpened(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLibraryAssetsRecentlyOpened");
}

id objc_msgSend_predicateForLibraryAssetsWithSeriesID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLibraryAssetsWithSeriesID:");
}

id objc_msgSend_predicateForLocalBooksWithSeriesID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLocalBooksWithSeriesID:");
}

id objc_msgSend_predicateForLocalLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLocalLibraryAssets");
}

id objc_msgSend_predicateForLocalOrDownloadingLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLocalOrDownloadingLibraryAssets");
}

id objc_msgSend_predicateForLocalStoreAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForLocalStoreAssets");
}

id objc_msgSend_predicateForMatchingSearchStringLibraryAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForMatchingSearchStringLibraryAssets:");
}

id objc_msgSend_predicateForMostRecentBooksOpened(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForMostRecentBooksOpened");
}

id objc_msgSend_predicateForNextInSeriesLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForNextInSeriesLibraryAssets");
}

id objc_msgSend_predicateForNonDeletedUserCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForNonDeletedUserCollections");
}

id objc_msgSend_predicateForNonEphemeralSamplesLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForNonEphemeralSamplesLibraryAssets");
}

id objc_msgSend_predicateForNonPreorders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForNonPreorders");
}

id objc_msgSend_predicateForNotContentTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForNotContentTypes:");
}

id objc_msgSend_predicateForNotSamplesLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForNotSamplesLibraryAssets");
}

id objc_msgSend_predicateForOwnedSingleAssetSeries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForOwnedSingleAssetSeries");
}

id objc_msgSend_predicateForPermanentOrTemporaryAssetIDTaggedLibraryAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForPermanentOrTemporaryAssetIDTaggedLibraryAsset:");
}

id objc_msgSend_predicateForPurchasedBooksAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForPurchasedBooksAssets");
}

id objc_msgSend_predicateForSamples(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForSamples");
}

id objc_msgSend_predicateForSearchableLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForSearchableLibraryAssets");
}

id objc_msgSend_predicateForSeriesBooksIncludingNextForID_includeAllBooksInSeries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForSeriesBooksIncludingNextForID:includeAllBooksInSeries:");
}

id objc_msgSend_predicateForSupplementalContentLibraryAssetsWithStorePlaylistID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForSupplementalContentLibraryAssetsWithStorePlaylistID:");
}

id objc_msgSend_predicateForTemporaryAssetIDTaggedLibraryAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForTemporaryAssetIDTaggedLibraryAsset:");
}

id objc_msgSend_predicateForTemporaryAssetIDsTaggedLibraryAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForTemporaryAssetIDsTaggedLibraryAssets:");
}

id objc_msgSend_predicateForUnownedSeriesLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForUnownedSeriesLibraryAssets");
}

id objc_msgSend_predicateForUnownedStoreLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForUnownedStoreLibraryAssets");
}

id objc_msgSend_predicateFor_AllBooks_LibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateFor_AllBooks_LibraryAssets");
}

id objc_msgSend_predicateFor_All_Finished_LibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateFor_All_Finished_LibraryAssets");
}

id objc_msgSend_predicateFor_All_Marked_As_Finished_LibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateFor_All_Marked_As_Finished_LibraryAssets");
}

id objc_msgSend_predicateToExcludeAssetsForSeriesAndStoreItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeAssetsForSeriesAndStoreItems");
}

id objc_msgSend_predicateToExcludeAssetsForSeriesAndStoreItemsNotAddedToCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeAssetsForSeriesAndStoreItemsNotAddedToCollections");
}

id objc_msgSend_predicateToExcludeAssetsForUnpurchasedItemsInCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeAssetsForUnpurchasedItemsInCollection:");
}

id objc_msgSend_predicateToExcludeAssetsInASeriesContainerWithOwnedBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeAssetsInASeriesContainerWithOwnedBooks");
}

id objc_msgSend_predicateToExcludeAssetsWithExplicitContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeAssetsWithExplicitContent");
}

id objc_msgSend_predicateToExcludeAssetsWithSeriesContainersWithNoOwnedBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeAssetsWithSeriesContainersWithNoOwnedBooks");
}

id objc_msgSend_predicateToExcludeAudiobookSupplementalContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeAudiobookSupplementalContent");
}

id objc_msgSend_predicateToExcludeCollectionMembersForAudiobookSupplementalContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeCollectionMembersForAudiobookSupplementalContent");
}

id objc_msgSend_predicateToExcludeCollectionMembersForSeriesAndStoreItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeCollectionMembersForSeriesAndStoreItems");
}

id objc_msgSend_predicateToExcludeCollectionMembersForSeriesAndStoreItemsNotAddedToCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeCollectionMembersForSeriesAndStoreItemsNotAddedToCollections");
}

id objc_msgSend_predicateToExcludeCollectionMembersForUnpurchasedItemsInCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeCollectionMembersForUnpurchasedItemsInCollection:");
}

id objc_msgSend_predicateToExcludeCollectionMembersInASeriesContainerWithOwnedBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeCollectionMembersInASeriesContainerWithOwnedBooks");
}

id objc_msgSend_predicateToExcludeCollectionMembersWithExplicitContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeCollectionMembersWithExplicitContent");
}

id objc_msgSend_predicateToExcludeCollectionMembersWithSeriesContainersWithNoOwnedBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeCollectionMembersWithSeriesContainersWithNoOwnedBooks");
}

id objc_msgSend_predicateToExcludeLibraryAssetsAndContainersWithExplicitContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeLibraryAssetsAndContainersWithExplicitContent");
}

id objc_msgSend_predicateToExcludeLibraryAssetsWithExplicitContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeLibraryAssetsWithExplicitContent");
}

id objc_msgSend_predicateToExcludeSeriesLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeSeriesLibraryAssets");
}

id objc_msgSend_predicateToExcludeUnownedLibraryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateToExcludeUnownedLibraryAssets");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predicateWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithValue:");
}

id objc_msgSend_priceFormatted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priceFormatted");
}

id objc_msgSend_priceManager_updatedPrices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priceManager:updatedPrices:");
}

id objc_msgSend_priceTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priceTracker");
}

id objc_msgSend_prices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prices");
}

id objc_msgSend_prioritizeImport_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prioritizeImport:completion:");
}

id objc_msgSend_processGatheredChangedAssetsCollections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processGatheredChangedAssetsCollections:");
}

id objc_msgSend_processPendingChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPendingChanges");
}

id objc_msgSend_processingAssetDetailChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingAssetDetailChanges");
}

id objc_msgSend_processingAuthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingAuthentication");
}

id objc_msgSend_processingCollectionDetailChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingCollectionDetailChanges");
}

id objc_msgSend_processingCollectionMemberChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingCollectionMemberChanges");
}

id objc_msgSend_processingOptionsFor_coverEffectsEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingOptionsFor:coverEffectsEnvironment:");
}

id objc_msgSend_processingReadingNowChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingReadingNowChanges");
}

id objc_msgSend_productProfilesForStoreIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productProfilesForStoreIDs:completion:");
}

id objc_msgSend_profileDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profileDictionary");
}

id objc_msgSend_profileKeysOfInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profileKeysOfInterest");
}

id objc_msgSend_progressValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressValue");
}

id objc_msgSend_propagateAdditionalDataWithAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propagateAdditionalDataWithAsset:");
}

id objc_msgSend_propagateDataProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propagateDataProperties");
}

id objc_msgSend_propagateNilAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propagateNilAssetID");
}

id objc_msgSend_propertiesForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesForKeys:");
}

id objc_msgSend_propertiesToPropagate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesToPropagate");
}

id objc_msgSend_purchaseDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseDate");
}

id objc_msgSend_purchaseDates_hack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseDates_hack");
}

id objc_msgSend_purchasedAndLocalParent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchasedAndLocalParent");
}

id objc_msgSend_purchasedAndLocalSeriesItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchasedAndLocalSeriesItems");
}

id objc_msgSend_purchasedDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchasedDSID");
}

id objc_msgSend_qDownloadingStoreIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "qDownloadingStoreIDs");
}

id objc_msgSend_q_removeOldMigrationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "q_removeOldMigrationData");
}

id objc_msgSend_queryStringForSearchString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryStringForSearchString:attributes:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_quotaFetcher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quotaFetcher");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_randomBookBaseID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "randomBookBaseID");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rank(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rank");
}

id objc_msgSend_rating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rating");
}

id objc_msgSend_readPercent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readPercent");
}

id objc_msgSend_readingNowDetailManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingNowDetailManager");
}

id objc_msgSend_readingNowDetailRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingNowDetailRepresentation");
}

id objc_msgSend_readingNowDetailsForAssetIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingNowDetailsForAssetIDs:completion:");
}

id objc_msgSend_readingPositionAbsolutePhysicalLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionAbsolutePhysicalLocation");
}

id objc_msgSend_readingPositionAnnotationVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionAnnotationVersion");
}

id objc_msgSend_readingPositionAssetVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionAssetVersion");
}

id objc_msgSend_readingPositionCFIString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionCFIString");
}

id objc_msgSend_readingPositionLocationRangeEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionLocationRangeEnd");
}

id objc_msgSend_readingPositionLocationRangeStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionLocationRangeStart");
}

id objc_msgSend_readingPositionLocationUpdateDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionLocationUpdateDate");
}

id objc_msgSend_readingPositionStorageUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionStorageUUID");
}

id objc_msgSend_readingPositionUserData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionUserData");
}

id objc_msgSend_readingPositionUserUpdatedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingPositionUserUpdatedDate");
}

id objc_msgSend_readingProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingProgress");
}

id objc_msgSend_readingProgressHighWaterMark(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingProgressHighWaterMark");
}

id objc_msgSend_rearrangeObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rearrangeObjects");
}

id objc_msgSend_receivedAssetDetailChangesNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedAssetDetailChangesNotification");
}

id objc_msgSend_receivedCollectionDetailChangesNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedCollectionDetailChangesNotification");
}

id objc_msgSend_receivedCollectionMemberChangesNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedCollectionMemberChangesNotification");
}

id objc_msgSend_receivedReadingNowChangesNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedReadingNowChangesNotification");
}

id objc_msgSend_refreshAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAllObjects");
}

id objc_msgSend_refreshFamily(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshFamily");
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDefaults:");
}

id objc_msgSend_releaseDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseDate");
}

id objc_msgSend_reloadDataSource_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadDataSource:completion:");
}

id objc_msgSend_remoteContextDidSave_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteContextDidSave:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAssetID_fromCollectionID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAssetID:fromCollectionID:completion:");
}

id objc_msgSend_removeImagesForAssetID_temporaryAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeImagesForAssetID:temporaryAssetID:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectIdenticalTo:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removePersistentStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePersistentStore:error:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_resetAllAssetsCollectionsWithLibraryManagedObjectContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetAllAssetsCollectionsWithLibraryManagedObjectContext:completion:");
}

id objc_msgSend_resetCollections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCollections");
}

id objc_msgSend_resetCollectionsChangeSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCollectionsChangeSet");
}

id objc_msgSend_resetCollectionsForAssetIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCollectionsForAssetIDs:completion:");
}

id objc_msgSend_resetDescendingSortKeyedObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDescendingSortKeyedObjects:");
}

id objc_msgSend_resetNextCollectionSort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetNextCollectionSort");
}

id objc_msgSend_resetSeriesOnAllBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSeriesOnAllBooks");
}

id objc_msgSend_resolveLibraryAsset_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveLibraryAsset:options:completion:");
}

id objc_msgSend_resolvedSortMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvedSortMode");
}

id objc_msgSend_resortAscendingSortKeyedObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resortAscendingSortKeyedObjects:");
}

id objc_msgSend_resortDescendingSortKeyedObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resortDescendingSortKeyedObjects:");
}

id objc_msgSend_resourceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceName");
}

id objc_msgSend_restartDownloadForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restartDownloadForAssetID:");
}

id objc_msgSend_resultCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultCount");
}

id objc_msgSend_resumeDownloadForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeDownloadForAssetID:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_rightsId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightsId");
}

id objc_msgSend_rightsInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightsInfo");
}

id objc_msgSend_runningPPT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runningPPT");
}

id objc_msgSend_sampleCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleCount");
}

id objc_msgSend_sampleDataSourceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleDataSourceIdentifier");
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save:");
}

id objc_msgSend_saveCachedMigrationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCachedMigrationData");
}

id objc_msgSend_saveContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveContext");
}

id objc_msgSend_saveLibrary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveLibrary");
}

id objc_msgSend_saveManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveManagedObjectContext:");
}

id objc_msgSend_saveMetaData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveMetaData");
}

id objc_msgSend_sequenceDisplayName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sequenceDisplayName");
}

id objc_msgSend_sequenceNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sequenceNumber");
}

id objc_msgSend_serializeAllStatus_inMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeAllStatus:inMOC:");
}

id objc_msgSend_seriesAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesAssets");
}

id objc_msgSend_seriesBooks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesBooks");
}

id objc_msgSend_seriesBooksForSeriesID_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesBooksForSeriesID:inManagedObjectContext:");
}

id objc_msgSend_seriesCollectionIDForSeriesID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesCollectionIDForSeriesID:");
}

id objc_msgSend_seriesCollectionWithSeriesID_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesCollectionWithSeriesID:name:");
}

id objc_msgSend_seriesContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesContainer");
}

id objc_msgSend_seriesContainerForSeriesID_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesContainerForSeriesID:inManagedObjectContext:");
}

id objc_msgSend_seriesID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesID");
}

id objc_msgSend_seriesIDFromSeriesCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesIDFromSeriesCollectionID:");
}

id objc_msgSend_seriesInfoUpdateIntervalEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesInfoUpdateIntervalEnabled");
}

id objc_msgSend_seriesIsCloudOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesIsCloudOnly");
}

id objc_msgSend_seriesIsHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesIsHidden");
}

id objc_msgSend_seriesIsOrdered(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesIsOrdered");
}

id objc_msgSend_seriesItemCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesItemCount");
}

id objc_msgSend_seriesManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesManager");
}

id objc_msgSend_seriesSortKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesSortKey");
}

id objc_msgSend_seriesStackBooksForBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesStackBooksForBook:");
}

id objc_msgSend_seriesStackCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesStackCount");
}

id objc_msgSend_seriesStackIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesStackIDs");
}

id objc_msgSend_seriesUpdaterResetWithIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesUpdaterResetWithIDs:");
}

id objc_msgSend_sessionContextType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionContextType");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setActualCompletedImportOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActualCompletedImportOperations:");
}

id objc_msgSend_setActualFailedImportOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActualFailedImportOperations:");
}

id objc_msgSend_setActualTotalImportOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActualTotalImportOperations:");
}

id objc_msgSend_setAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAsset:");
}

id objc_msgSend_setAssetDetails_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDetails:completion:");
}

id objc_msgSend_setAssetDetailsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDetailsManager:");
}

id objc_msgSend_setAssetDetailsModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDetailsModificationDate:");
}

id objc_msgSend_setAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetID:");
}

id objc_msgSend_setAssetPathToCacheItemDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetPathToCacheItemDict:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthor:");
}

id objc_msgSend_setBackgroundReadOnlyContextPool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundReadOnlyContextPool:");
}

id objc_msgSend_setBookHighWaterMarkProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBookHighWaterMarkProgress:");
}

id objc_msgSend_setBookmarkTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBookmarkTime:");
}

id objc_msgSend_setByAddingObjectsFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObjectsFromSet:");
}

id objc_msgSend_setCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendar:");
}

id objc_msgSend_setCanPauseCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanPauseCount:");
}

id objc_msgSend_setCanResumeCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanResumeCount:");
}

id objc_msgSend_setCheckingForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckingForUpdates:");
}

id objc_msgSend_setCloudAssetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudAssetType:");
}

id objc_msgSend_setCloudVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudVersion:");
}

id objc_msgSend_setCoalescingDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoalescingDelay:");
}

id objc_msgSend_setCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollection:");
}

id objc_msgSend_setCollectionDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionDescription:");
}

id objc_msgSend_setCollectionDetails_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionDetails:completion:");
}

id objc_msgSend_setCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionID:");
}

id objc_msgSend_setCollectionMembers_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionMembers:completion:");
}

id objc_msgSend_setCollectionsWorkerChildContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionsWorkerChildContext:");
}

id objc_msgSend_setCompletedImportOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletedImportOperations:");
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionHandler:");
}

id objc_msgSend_setContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentType:");
}

id objc_msgSend_setCoverEffectRTLOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoverEffectRTLOverride:");
}

id objc_msgSend_setCoverEffectsContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoverEffectsContent:");
}

id objc_msgSend_setCoverEffectsNightMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoverEffectsNightMode:");
}

id objc_msgSend_setCreateSeriesContainers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreateSeriesContainers:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCreationDateToNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDateToNow");
}

id objc_msgSend_setDataSourceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSourceIdentifier:");
}

id objc_msgSend_setDataSourcesBitmask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSourcesBitmask:");
}

id objc_msgSend_setDataSourcesByIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSourcesByIdentifier:");
}

id objc_msgSend_setDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataType:");
}

id objc_msgSend_setDateFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFinished:");
}

id objc_msgSend_setDatePlaybackTimeUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatePlaybackTimeUpdated:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDefaultAllBooksCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultAllBooksCollection:");
}

id objc_msgSend_setDefaultAudioBooksCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultAudioBooksCollection:");
}

id objc_msgSend_setDefaultBooksCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultBooksCollection:");
}

id objc_msgSend_setDefaultDownloadedCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultDownloadedCollection:");
}

id objc_msgSend_setDefaultFinishedCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultFinishedCollection:");
}

id objc_msgSend_setDefaultSamplesCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultSamplesCollection:");
}

id objc_msgSend_setDefaultWantToReadCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultWantToReadCollection:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeletedFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletedFlag:");
}

id objc_msgSend_setDidMigrateFromITunesSyncToICloudSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidMigrateFromITunesSyncToICloudSync:");
}

id objc_msgSend_setDifferentDate_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDifferentDate:forKey:");
}

id objc_msgSend_setDifferentNumber_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDifferentNumber:forKey:");
}

id objc_msgSend_setDifferentObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDifferentObject:forKey:");
}

id objc_msgSend_setDifferentString_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDifferentString:forKey:");
}

id objc_msgSend_setDifferentValue_forKey_klass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDifferentValue:forKey:klass:");
}

id objc_msgSend_setDownloadAssetsTotalPercentComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadAssetsTotalPercentComplete:");
}

id objc_msgSend_setEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntity:");
}

id objc_msgSend_setEra_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEra:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setExplicitContentRestricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExplicitContentRestricted:");
}

id objc_msgSend_setFailedImportOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailedImportOperations:");
}

id objc_msgSend_setFetchBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchBatchSize:");
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchLimit:");
}

id objc_msgSend_setFileOnDiskLastTouchDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileOnDiskLastTouchDate:");
}

id objc_msgSend_setFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileSize:");
}

id objc_msgSend_setFileSizeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileSizeNumber:");
}

id objc_msgSend_setFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileURL:");
}

id objc_msgSend_setFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilter:");
}

id objc_msgSend_setFinishedDateKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishedDateKind:");
}

id objc_msgSend_setFinishedStateUserSetsFinished_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishedStateUserSetsFinished:userInfo:");
}

id objc_msgSend_setFoundItemsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFoundItemsHandler:");
}

id objc_msgSend_setGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneration:");
}

id objc_msgSend_setGenerationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenerationCount:");
}

id objc_msgSend_setGenerationFetched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenerationFetched:");
}

id objc_msgSend_setHasCheckedOwnedSingleBookSeriesAndNonSeriesAudiobooks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCheckedOwnedSingleBookSeriesAndNonSeriesAudiobooks:");
}

id objc_msgSend_setHasDownloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasDownloads:");
}

id objc_msgSend_setHasUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUpdates:");
}

id objc_msgSend_setHasUpdatesOrDownloadsOrUploads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUpdatesOrDownloadsOrUploads:");
}

id objc_msgSend_setHasUploads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUploads:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHistoryToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHistoryToken:");
}

id objc_msgSend_setHistoryTokenOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHistoryTokenOffset:");
}

id objc_msgSend_setInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInteger:forKey:");
}

id objc_msgSend_setIsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEnabled:");
}

id objc_msgSend_setIsEphemeral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEphemeral:");
}

id objc_msgSend_setIsFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFinished:");
}

id objc_msgSend_setIsHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsHidden:");
}

id objc_msgSend_setIsNew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsNew:");
}

id objc_msgSend_setIsTrackedAsRecent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsTrackedAsRecent:");
}

id objc_msgSend_setLastEngagedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastEngagedDate:");
}

id objc_msgSend_setLastModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastModification:");
}

id objc_msgSend_setLastOpenDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastOpenDate:");
}

id objc_msgSend_setLibraryAssetMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibraryAssetMonitor:");
}

id objc_msgSend_setLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibraryManager:");
}

id objc_msgSend_setLocalFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalFileURL:");
}

id objc_msgSend_setLocalModDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalModDate:");
}

id objc_msgSend_setLocalOnlySeriesItemsParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalOnlySeriesItemsParent:");
}

id objc_msgSend_setLocalVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalVersion:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaximumDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumDelay:");
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergePolicy:");
}

id objc_msgSend_setMetadataObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadataObject:forKey:");
}

id objc_msgSend_setMigratedPropertiesChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMigratedPropertiesChanged:");
}

id objc_msgSend_setMigratedSortOrderData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMigratedSortOrderData:");
}

id objc_msgSend_setMigratedSortOrderDataByPluginAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMigratedSortOrderDataByPluginAssetID:");
}

id objc_msgSend_setModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModificationDate:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNeedsConfigurationUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsConfigurationUpdate");
}

id objc_msgSend_setNeedsDuplicateCollectionMembersRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsDuplicateCollectionMembersRemoved:");
}

id objc_msgSend_setNeedsMigration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsMigration:");
}

id objc_msgSend_setNeedsResetNilAuthorsOnAllBooks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsResetNilAuthorsOnAllBooks:");
}

id objc_msgSend_setNeedsResetNilAuthorsOnAllSeries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsResetNilAuthorsOnAllSeries:");
}

id objc_msgSend_setNeedsResetSeriesStacksAndCollectionMembershipOnAllBooks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsResetSeriesStacksAndCollectionMembershipOnAllBooks:");
}

id objc_msgSend_setNotFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotFinished:");
}

id objc_msgSend_setNotificationBatchingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationBatchingInterval:");
}

id objc_msgSend_setNumRandomBooks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumRandomBooks:");
}

id objc_msgSend_setNumberOfItemsIniCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfItemsIniCloud:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPlAbsolutePhysicalLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlAbsolutePhysicalLocation:");
}

id objc_msgSend_setPlLocationRangeEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlLocationRangeEnd:");
}

id objc_msgSend_setPlLocationRangeStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlLocationRangeStart:");
}

id objc_msgSend_setPlaceholder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholder:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPrimitiveValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimitiveValue:forKey:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProcessingAssetDetailChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingAssetDetailChanges:");
}

id objc_msgSend_setProcessingAuthentication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingAuthentication:");
}

id objc_msgSend_setProcessingCollectionDetailChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingCollectionDetailChanges:");
}

id objc_msgSend_setProcessingCollectionMemberChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingCollectionMemberChanges:");
}

id objc_msgSend_setProcessingReadingNowChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingReadingNowChanges:");
}

id objc_msgSend_setPropertiesToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToFetch:");
}

id objc_msgSend_setPropertiesToGroupBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToGroupBy:");
}

id objc_msgSend_setPropertiesToPropagate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToPropagate:");
}

id objc_msgSend_setPurchaseDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseDate:");
}

id objc_msgSend_setPurchaseDates_hack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseDates_hack:");
}

id objc_msgSend_setPurchasedAndLocalParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchasedAndLocalParent:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setRandomBookBaseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRandomBookBaseID:");
}

id objc_msgSend_setReadingNowDetails_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingNowDetails:completion:");
}

id objc_msgSend_setReadingPositionAbsolutePhysicalLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionAbsolutePhysicalLocation:");
}

id objc_msgSend_setReadingPositionAnnotationVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionAnnotationVersion:");
}

id objc_msgSend_setReadingPositionAssetVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionAssetVersion:");
}

id objc_msgSend_setReadingPositionCFIString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionCFIString:");
}

id objc_msgSend_setReadingPositionLocationRangeEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionLocationRangeEnd:");
}

id objc_msgSend_setReadingPositionLocationRangeStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionLocationRangeStart:");
}

id objc_msgSend_setReadingPositionLocationUpdateDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionLocationUpdateDate:");
}

id objc_msgSend_setReadingPositionStorageUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionStorageUUID:");
}

id objc_msgSend_setReadingPositionUserData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingPositionUserData:");
}

id objc_msgSend_setReadingProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingProgress:");
}

id objc_msgSend_setReadingProgressHighWaterMark_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingProgressHighWaterMark:");
}

id objc_msgSend_setReceivedAssetDetailChangesNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedAssetDetailChangesNotification:");
}

id objc_msgSend_setReceivedCollectionDetailChangesNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedCollectionDetailChangesNotification:");
}

id objc_msgSend_setReceivedCollectionMemberChangesNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedCollectionMemberChangesNotification:");
}

id objc_msgSend_setReceivedReadingNowChangesNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedReadingNowChangesNotification:");
}

id objc_msgSend_setReloading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReloading:");
}

id objc_msgSend_setRequestOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestOptions:");
}

id objc_msgSend_setResetCollectionsChangeSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetCollectionsChangeSet:");
}

id objc_msgSend_setResetSeriesOnAllBooks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetSeriesOnAllBooks:");
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValue:forKey:error:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setReturnsDistinctResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReturnsDistinctResults:");
}

id objc_msgSend_setReturnsObjectsAsFaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReturnsObjectsAsFaults:");
}

id objc_msgSend_setRightsId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightsId:");
}

id objc_msgSend_setRunningPPT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunningPPT:");
}

id objc_msgSend_setSaveContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSaveContext:");
}

id objc_msgSend_setSearchScopes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchScopes:");
}

id objc_msgSend_setSeriesAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeriesAssets:");
}

id objc_msgSend_setSeriesContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeriesContainer:");
}

id objc_msgSend_setSeriesID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeriesID:");
}

id objc_msgSend_setSeriesSortKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeriesSortKey:");
}

id objc_msgSend_setSessionContextType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionContextType:");
}

id objc_msgSend_setSinfData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSinfData:");
}

id objc_msgSend_setSortAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortAuthor:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setSortKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortKey:");
}

id objc_msgSend_setSortMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortMode:");
}

id objc_msgSend_setSortOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortOrder:");
}

id objc_msgSend_setSortTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortTitle:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreID:");
}

id objc_msgSend_setStoreId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreId:");
}

id objc_msgSend_setStoreURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreURL:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setSyncVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncVersion:");
}

id objc_msgSend_setTaste_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaste:");
}

id objc_msgSend_setTasteSyncedToStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTasteSyncedToStore:");
}

id objc_msgSend_setTemporaryAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporaryAssetID:");
}

id objc_msgSend_setTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTotalImportOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalImportOperations:");
}

id objc_msgSend_setTotalImportOperationsProcessed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalImportOperationsProcessed:");
}

id objc_msgSend_setUiManagerProviderForAddingToWantToRead_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUiManagerProviderForAddingToWantToRead:");
}

id objc_msgSend_setUnacknowledgedDownloadsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnacknowledgedDownloadsCount:");
}

id objc_msgSend_setUnacknowledgedUpdatesCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnacknowledgedUpdatesCount:");
}

id objc_msgSend_setUndoManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUndoManager:");
}

id objc_msgSend_setUpgradeAssetSortKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpgradeAssetSortKeys:");
}

id objc_msgSend_setUploadStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadStatus:");
}

id objc_msgSend_setUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrl:");
}

id objc_msgSend_setUsq_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsq_moc:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setViewMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewMode:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWorkerChildContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkerChildContext:");
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYear:");
}

id objc_msgSend_setupDefaultCollectionsInManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDefaultCollectionsInManagedObjectContext:");
}

id objc_msgSend_setupStateObservation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupStateObservation");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedController");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedProvider");
}

id objc_msgSend_sharedReachabilityForInternetConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedReachabilityForInternetConnection");
}

id objc_msgSend_shortBookTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortBookTitle");
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortDescription");
}

id objc_msgSend_shouldBeInDownloadedCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBeInDownloadedCollection");
}

id objc_msgSend_shouldBeInMySamplesCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBeInMySamplesCollection");
}

id objc_msgSend_shouldHaveContinueAndPreviousContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHaveContinueAndPreviousContent");
}

id objc_msgSend_shouldSyncCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSyncCollectionID:");
}

id objc_msgSend_shouldSyncCollectionMembers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSyncCollectionMembers");
}

id objc_msgSend_sideloadedItemCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sideloadedItemCount");
}

id objc_msgSend_signalWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalWithCompletion:");
}

id objc_msgSend_sinfData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinfData");
}

id objc_msgSend_sortAuthor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortAuthor");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortDescriptorsForMode_collectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorsForMode:collectionID:");
}

id objc_msgSend_sortKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortKey");
}

id objc_msgSend_sortKeyForDefaultCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortKeyForDefaultCollectionID:");
}

id objc_msgSend_sortKeyQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortKeyQueue");
}

id objc_msgSend_sortMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortMode");
}

id objc_msgSend_sortOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortOrder");
}

id objc_msgSend_sortTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortTitle");
}

id objc_msgSend_sortUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sourceFilePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceFilePath");
}

id objc_msgSend_sourceFileType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceFileType");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAccessingSecurityScopedResource");
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoring");
}

id objc_msgSend_startQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startQuery");
}

id objc_msgSend_startUpdateForAssets_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUpdateForAssets:completion:");
}

id objc_msgSend_startWithUIManager_manifestResponseBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithUIManager:manifestResponseBlock:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stateStringDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateStringDescription:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusForAssetID:");
}

id objc_msgSend_statusValueHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusValueHidden");
}

id objc_msgSend_statusValueLocal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusValueLocal");
}

id objc_msgSend_statusWithAssetID_state_progressValue_timeRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusWithAssetID:state:progressValue:timeRemaining:");
}

id objc_msgSend_stopAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAccessingSecurityScopedResource");
}

id objc_msgSend_stopQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopQuery");
}

id objc_msgSend_storeAssetManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeAssetManager");
}

id objc_msgSend_storeDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeDelegate");
}

id objc_msgSend_storeID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeID");
}

id objc_msgSend_storeId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeId");
}

id objc_msgSend_storeItemCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeItemCount");
}

id objc_msgSend_storePlaylistID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storePlaylistID");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByEscapingSearchString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByEscapingSearchString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_supplementalContentAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supplementalContentAssets");
}

id objc_msgSend_supplementalContentParent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supplementalContentParent");
}

id objc_msgSend_supplementalContentState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supplementalContentState");
}

id objc_msgSend_syncVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncVersion");
}

id objc_msgSend_synchronousFileSizeForCacheItemRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousFileSizeForCacheItemRequest:");
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemTimeZone");
}

id objc_msgSend_taste(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taste");
}

id objc_msgSend_tasteSyncedToStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tasteSyncedToStore");
}

id objc_msgSend_temporaryAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporaryAssetID");
}

id objc_msgSend_testQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testQueue");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeRemaining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeRemaining");
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_titleEditsSavedInLibraryOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleEditsSavedInLibraryOnly");
}

id objc_msgSend_titleForDefaultCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleForDefaultCollectionID:");
}

id objc_msgSend_togglePausedForAssetID_orTemporaryAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "togglePausedForAssetID:orTemporaryAssetID:");
}

id objc_msgSend_totalImportOperationsProcessed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalImportOperationsProcessed");
}

id objc_msgSend_totalStorage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalStorage");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_ubiquityCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ubiquityCount");
}

id objc_msgSend_ubiquityErrorCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ubiquityErrorCount");
}

id objc_msgSend_ubiquityStatusMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ubiquityStatusMonitor");
}

id objc_msgSend_uiChildContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiChildContext");
}

id objc_msgSend_uiManagerProviderForAddingToWantToRead(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiManagerProviderForAddingToWantToRead");
}

id objc_msgSend_ui_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ui_persistentStoreCoordinator");
}

id objc_msgSend_unclaimedAssetIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unclaimedAssetIDs");
}

id objc_msgSend_unclaimedTemporaryAssetIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unclaimedTemporaryAssetIDs");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueTitleForMyBooksCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueTitleForMyBooksCollection:");
}

id objc_msgSend_unknownAuthor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unknownAuthor");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_updateAsset_coverArt_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAsset:coverArt:completion:");
}

id objc_msgSend_updateAsset_fromURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAsset:fromURL:completion:");
}

id objc_msgSend_updateAsset_isEphemeral_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAsset:isEphemeral:completion:");
}

id objc_msgSend_updateAsset_userEditedTitle_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAsset:userEditedTitle:completion:");
}

id objc_msgSend_updateAuthorForSeriesContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAuthorForSeriesContainer:");
}

id objc_msgSend_updateBook_withTitle_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBook:withTitle:completion:");
}

id objc_msgSend_updateCloudVersionFromCloudSyncVersions_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCloudVersionFromCloudSyncVersions:inContext:");
}

id objc_msgSend_updateCollectionMemberAssetLinksForAssetIDs_temporaryAssetIDs_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCollectionMemberAssetLinksForAssetIDs:temporaryAssetIDs:moc:");
}

id objc_msgSend_updateCollectionMemberAssetLinksInMOCForUpgrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCollectionMemberAssetLinksInMOCForUpgrade:");
}

id objc_msgSend_updateDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDate");
}

id objc_msgSend_updateDownloadStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDownloadStatus");
}

id objc_msgSend_updateExpiredSeriesForAssetAdamIDsWithTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateExpiredSeriesForAssetAdamIDsWithTypes:");
}

id objc_msgSend_updateFetchDigest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFetchDigest");
}

id objc_msgSend_updateIsDownloadingSupplementalContentAndCombinedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIsDownloadingSupplementalContentAndCombinedState:");
}

id objc_msgSend_updateLastModification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastModification");
}

id objc_msgSend_updateLibraryAssetWithID_withLastOpenDate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLibraryAssetWithID:withLastOpenDate:completion:");
}

id objc_msgSend_updateMaxSortKeyWithMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMaxSortKeyWithMember:");
}

id objc_msgSend_updateSeriesContainerSeriesStackAssetIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSeriesContainerSeriesStackAssetIDs:");
}

id objc_msgSend_updateSeriesForAssetAdamIDsWithTypes_forceCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSeriesForAssetAdamIDsWithTypes:forceCheck:");
}

id objc_msgSend_updateSeriesForSeriesAdamIDsWithTypes_forceCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSeriesForSeriesAdamIDsWithTypes:forceCheck:");
}

id objc_msgSend_updateSeriesRelationshipsForSeriesAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSeriesRelationshipsForSeriesAsset:");
}

id objc_msgSend_updateSeriesRelationshipsForSeriesContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSeriesRelationshipsForSeriesContainer:");
}

id objc_msgSend_updateSupplementalContentRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSupplementalContentRelationship:");
}

id objc_msgSend_updateURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateURL:completion:");
}

id objc_msgSend_updateWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithStatus:");
}

id objc_msgSend_updateWithWaitingToBeDownloadable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithWaitingToBeDownloadable:");
}

id objc_msgSend_updatedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedObjects");
}

id objc_msgSend_updateiTunesUCollectionMembersForAssetIDs_temporaryAssetIDs_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateiTunesUCollectionMembersForAssetIDs:temporaryAssetIDs:moc:");
}

id objc_msgSend_updatesFromLibraryAssets_annotations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatesFromLibraryAssets:annotations:");
}

id objc_msgSend_updatesScheduleQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatesScheduleQueue");
}

id objc_msgSend_upgradeAssetSortKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeAssetSortKeys");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "url");
}

id objc_msgSend_useFileCoordination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useFileCoordination");
}

id objc_msgSend_usePPTLaunchContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usePPTLaunchContent");
}

id objc_msgSend_usePerformancePredicates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usePerformancePredicates");
}

id objc_msgSend_userCollectionsInManagedObjectContext_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userCollectionsInManagedObjectContext:withError:");
}

id objc_msgSend_userCollectionsOnMainQueueWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userCollectionsOnMainQueueWithError:");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userUpdateDateFinished_ofKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userUpdateDateFinished:ofKind:");
}

id objc_msgSend_usq_moc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usq_moc");
}

id objc_msgSend_utiTypeForContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "utiTypeForContentType:");
}

id objc_msgSend_validDownloadIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validDownloadIDs");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCompletion:");
}

id objc_msgSend_valueWithNonretainedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithNonretainedObject:");
}

id objc_msgSend_verboseLoggingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verboseLoggingEnabled");
}

id objc_msgSend_versionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionNumber");
}

id objc_msgSend_versionNumberHumanReadable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionNumberHumanReadable");
}

id objc_msgSend_viewMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewMode");
}

id objc_msgSend_waitForAssetID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForAssetID:completion:");
}

id objc_msgSend_waitForBookWithAssetID_toBeDownloadableWithTimeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForBookWithAssetID:toBeDownloadableWithTimeout:completion:");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceAndNewlineCharacterSet");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey:");
}

id objc_msgSend_willDeleteAssets_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willDeleteAssets:completion:");
}

id objc_msgSend_workerChildContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workerChildContext");
}

id objc_msgSend_wq_countOfBooksInContinueReadingIncludingExplicitContent_limit_onWorkerQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wq_countOfBooksInContinueReadingIncludingExplicitContent:limit:onWorkerQueue:");
}

id objc_msgSend_wq_dq_integrateClaimedAssetsReason_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wq_dq_integrateClaimedAssetsReason:context:");
}

id objc_msgSend_wq_dq_saveDatabaseContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wq_dq_saveDatabaseContext:");
}

id objc_msgSend_wq_reconcileDataSourceAssetsForReason_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wq_reconcileDataSourceAssetsForReason:context:");
}

id objc_msgSend_wq_seedRecentsListWithRecentlyOpenedBooksNoOlderThanDate_limit_onWorkerQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wq_seedRecentsListWithRecentlyOpenedBooksNoOlderThanDate:limit:onWorkerQueue:");
}

id objc_msgSend_wq_seriesIDsToResetWithLibraryManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wq_seriesIDsToResetWithLibraryManagedObjectContext:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_year(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "year");
}
