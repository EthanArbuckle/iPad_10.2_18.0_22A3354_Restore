uint64_t destroy for Page(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for LocalizerRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[6];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  v9 = a1 + a2[9];
  v10 = type metadata accessor for ToolbarPrincipalType(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  v12 = a1 + a2[15];
  v13 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16]));
  v14 = a1 + a2[17];
  v15 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19]));
  swift_release(*(_QWORD *)(a1 + a2[20]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[22] + 8));
  v16 = a1 + a2[23];
  result = *(_QWORD *)(v16 + 8);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(*(_QWORD *)(v16 + 32));
  }
  return result;
}

_QWORD *initializeWithCopy for Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t, __n128);
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char *v65;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_5C154(&qword_3217B8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v12)((char *)a2 + v15, 1, v10))
  {
    v18 = sub_5C154(&qword_3217B8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  v19 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
  v20 = a3[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for ToolbarPrincipalType(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_5C154(&qword_322F98);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = a3[10];
  v27 = a3[11];
  v28 = *(_QWORD *)((char *)a2 + v26);
  *(_QWORD *)((char *)a1 + v26) = v28;
  v29 = *(_QWORD *)((char *)a2 + v27);
  *(_QWORD *)((char *)a1 + v27) = v29;
  v30 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v31 = *(_QWORD *)((char *)a2 + v30);
  *(_QWORD *)((char *)a1 + v30) = v31;
  v32 = a3[14];
  v33 = a3[15];
  v34 = (_QWORD *)((char *)a1 + v32);
  v35 = (_QWORD *)((char *)a2 + v32);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = (char *)a1 + v33;
  v65 = (char *)a2 + v33;
  v38 = type metadata accessor for PageData(0);
  v39 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v38 - 8) + 16);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v31);
  v40 = swift_bridgeObjectRetain(v36);
  v39(v37, v65, v38, v40);
  v41 = a3[16];
  v42 = a3[17];
  v43 = *(_QWORD *)((char *)a2 + v41);
  *(_QWORD *)((char *)a1 + v41) = v43;
  v44 = (char *)a1 + v42;
  v45 = (char *)a2 + v42;
  v46 = type metadata accessor for PageMetrics(0);
  v47 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
  v48 = swift_bridgeObjectRetain(v43);
  v47(v44, v45, v46, v48);
  v49 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v50 = *(_QWORD *)((char *)a2 + v49);
  *(_QWORD *)((char *)a1 + v49) = v50;
  v51 = a3[20];
  v52 = a3[21];
  v53 = *(_QWORD *)((char *)a2 + v51);
  *(_QWORD *)((char *)a1 + v51) = v53;
  *((_BYTE *)a1 + v52) = *((_BYTE *)a2 + v52);
  v54 = a3[22];
  v55 = a3[23];
  v56 = (_QWORD *)((char *)a1 + v54);
  v57 = (_QWORD *)((char *)a2 + v54);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = (char *)a1 + v55;
  v60 = (char *)a2 + v55;
  v61 = *(_QWORD *)((char *)a2 + v55 + 8);
  swift_bridgeObjectRetain(v50);
  swift_retain(v53);
  swift_bridgeObjectRetain(v58);
  if (v61)
  {
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *((_QWORD *)v59 + 1) = v61;
    *((_OWORD *)v59 + 1) = *((_OWORD *)v60 + 1);
    v62 = *((_QWORD *)v60 + 4);
    *((_QWORD *)v59 + 4) = v62;
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v62);
  }
  else
  {
    v63 = *((_OWORD *)v60 + 1);
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *((_OWORD *)v59 + 1) = v63;
    *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
  }
  return a1;
}

char *assignWithCopy for Page(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_5C154(&qword_3217B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = (char *)a2 + v17;
  v20 = v13(&a1[v17], 1, v11);
  v21 = v13(v19, 1, v11);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
LABEL_12:
    v22 = sub_5C154(&qword_3217B8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v18, v19, v11);
LABEL_13:
  a1[a3[7]] = *((_BYTE *)a2 + a3[7]);
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  v23 = a3[9];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for ToolbarPrincipalType(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_18:
    v31 = sub_5C154(&qword_322F98);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_19:
  v32 = a3[10];
  v33 = *(_QWORD *)((char *)a2 + v32);
  v34 = *(_QWORD *)&a1[v32];
  *(_QWORD *)&a1[v32] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = a3[11];
  v36 = *(_QWORD *)((char *)a2 + v35);
  v37 = *(_QWORD *)&a1[v35];
  *(_QWORD *)&a1[v35] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  a1[a3[12]] = *((_BYTE *)a2 + a3[12]);
  v38 = a3[13];
  v39 = *(_QWORD *)((char *)a2 + v38);
  v40 = *(_QWORD *)&a1[v38];
  *(_QWORD *)&a1[v38] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = a3[14];
  v42 = &a1[v41];
  v43 = (_QWORD *)((char *)a2 + v41);
  *(_QWORD *)v42 = *v43;
  v44 = v43[1];
  v45 = *((_QWORD *)v42 + 1);
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  v46 = a3[15];
  v47 = &a1[v46];
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 24))(v47, v48, v49);
  v50 = a3[16];
  v51 = *(_QWORD *)((char *)a2 + v50);
  v52 = *(_QWORD *)&a1[v50];
  *(_QWORD *)&a1[v50] = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = a3[17];
  v54 = &a1[v53];
  v55 = (char *)a2 + v53;
  v56 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  a1[a3[18]] = *((_BYTE *)a2 + a3[18]);
  v57 = a3[19];
  v58 = *(_QWORD *)((char *)a2 + v57);
  v59 = *(_QWORD *)&a1[v57];
  *(_QWORD *)&a1[v57] = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  v60 = a3[20];
  v61 = *(_QWORD *)((char *)a2 + v60);
  v62 = *(_QWORD *)&a1[v60];
  *(_QWORD *)&a1[v60] = v61;
  swift_retain(v61);
  swift_release(v62);
  a1[a3[21]] = *((_BYTE *)a2 + a3[21]);
  v63 = a3[22];
  v64 = &a1[v63];
  v65 = (_QWORD *)((char *)a2 + v63);
  *(_QWORD *)v64 = *v65;
  v66 = v65[1];
  v67 = *((_QWORD *)v64 + 1);
  *((_QWORD *)v64 + 1) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = a3[23];
  v69 = &a1[v68];
  v70 = (_QWORD *)((char *)a2 + v68);
  v71 = *(_QWORD *)&a1[v68 + 8];
  v72 = v70[1];
  if (v71)
  {
    if (v72)
    {
      *(_QWORD *)v69 = *v70;
      v73 = v70[1];
      *((_QWORD *)v69 + 1) = v73;
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRelease(v71);
      *((_QWORD *)v69 + 2) = v70[2];
      *((_QWORD *)v69 + 3) = v70[3];
      v74 = v70[4];
      v75 = *((_QWORD *)v69 + 4);
      *((_QWORD *)v69 + 4) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75);
    }
    else
    {
      sub_984B0((uint64_t)v69);
      v78 = v70[4];
      v79 = *((_OWORD *)v70 + 1);
      *(_OWORD *)v69 = *(_OWORD *)v70;
      *((_OWORD *)v69 + 1) = v79;
      *((_QWORD *)v69 + 4) = v78;
    }
  }
  else if (v72)
  {
    *(_QWORD *)v69 = *v70;
    v76 = v70[1];
    *((_QWORD *)v69 + 1) = v76;
    *((_QWORD *)v69 + 2) = v70[2];
    *((_QWORD *)v69 + 3) = v70[3];
    v77 = v70[4];
    *((_QWORD *)v69 + 4) = v77;
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v77);
  }
  else
  {
    v80 = *(_OWORD *)v70;
    v81 = *((_OWORD *)v70 + 1);
    *((_QWORD *)v69 + 4) = v70[4];
    *(_OWORD *)v69 = v80;
    *((_OWORD *)v69 + 1) = v81;
  }
  return a1;
}

_OWORD *initializeWithTake for Page(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;

  *a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_5C154(&qword_3217B8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = sub_5C154(&qword_3217B8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  *((_BYTE *)a1 + a3[7]) = a2[a3[7]];
  *((_BYTE *)a1 + v17) = a2[v17];
  v18 = a3[9];
  v19 = (char *)a1 + v18;
  v20 = &a2[v18];
  v21 = type metadata accessor for ToolbarPrincipalType(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_5C154(&qword_322F98);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)&a2[v24];
  v25 = a3[13];
  *((_BYTE *)a1 + a3[12]) = a2[a3[12]];
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)&a2[v25];
  v26 = a3[15];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)&a2[a3[14]];
  v27 = (char *)a1 + v26;
  v28 = &a2[v26];
  v29 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  v30 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)&a2[a3[16]];
  v31 = (char *)a1 + v30;
  v32 = &a2[v30];
  v33 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v34 = a3[19];
  *((_BYTE *)a1 + a3[18]) = a2[a3[18]];
  *(_QWORD *)((char *)a1 + v34) = *(_QWORD *)&a2[v34];
  v35 = a3[21];
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)&a2[a3[20]];
  *((_BYTE *)a1 + v35) = a2[v35];
  v36 = a3[23];
  *(_OWORD *)((char *)a1 + a3[22]) = *(_OWORD *)&a2[a3[22]];
  v37 = (char *)a1 + v36;
  v38 = &a2[v36];
  *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
  v39 = *((_OWORD *)v38 + 1);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *((_OWORD *)v37 + 1) = v39;
  return a1;
}

char *assignWithTake for Page(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;

  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_5C154(&qword_3217B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = (char *)a2 + v17;
  v20 = v13(&a1[v17], 1, v11);
  v21 = v13(v19, 1, v11);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v19, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
LABEL_12:
    v22 = sub_5C154(&qword_3217B8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v18, v19, v11);
LABEL_13:
  v23 = a3[8];
  a1[a3[7]] = *((_BYTE *)a2 + a3[7]);
  a1[v23] = *((_BYTE *)a2 + v23);
  v24 = a3[9];
  v25 = &a1[v24];
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for ToolbarPrincipalType(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    v32 = sub_5C154(&qword_322F98);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_19:
  v33 = a3[10];
  v34 = *(_QWORD *)&a1[v33];
  *(_QWORD *)&a1[v33] = *(_QWORD *)((char *)a2 + v33);
  swift_bridgeObjectRelease(v34);
  v35 = a3[11];
  v36 = *(_QWORD *)&a1[v35];
  *(_QWORD *)&a1[v35] = *(_QWORD *)((char *)a2 + v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[13];
  a1[a3[12]] = *((_BYTE *)a2 + a3[12]);
  v38 = *(_QWORD *)&a1[v37];
  *(_QWORD *)&a1[v37] = *(_QWORD *)((char *)a2 + v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[14];
  v40 = &a1[v39];
  v41 = (_QWORD *)((char *)a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  v44 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease(v44);
  v45 = a3[15];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  v49 = a3[16];
  v50 = *(_QWORD *)&a1[v49];
  *(_QWORD *)&a1[v49] = *(_QWORD *)((char *)a2 + v49);
  swift_bridgeObjectRelease(v50);
  v51 = a3[17];
  v52 = &a1[v51];
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  v55 = a3[19];
  a1[a3[18]] = *((_BYTE *)a2 + a3[18]);
  v56 = *(_QWORD *)&a1[v55];
  *(_QWORD *)&a1[v55] = *(_QWORD *)((char *)a2 + v55);
  swift_bridgeObjectRelease(v56);
  v57 = a3[20];
  v58 = *(_QWORD *)&a1[v57];
  *(_QWORD *)&a1[v57] = *(_QWORD *)((char *)a2 + v57);
  swift_release(v58);
  v59 = a3[22];
  a1[a3[21]] = *((_BYTE *)a2 + a3[21]);
  v60 = &a1[v59];
  v61 = (_QWORD *)((char *)a2 + v59);
  v63 = *v61;
  v62 = v61[1];
  v64 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v60 = v63;
  *((_QWORD *)v60 + 1) = v62;
  swift_bridgeObjectRelease(v64);
  v65 = a3[23];
  v66 = (uint64_t)&a1[v65];
  v67 = (char *)a2 + v65;
  v68 = *(_QWORD *)&a1[v65 + 8];
  if (!v68)
  {
LABEL_23:
    v72 = *((_OWORD *)v67 + 1);
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *(_OWORD *)(v66 + 16) = v72;
    *(_QWORD *)(v66 + 32) = *((_QWORD *)v67 + 4);
    return a1;
  }
  v69 = *((_QWORD *)v67 + 1);
  if (!v69)
  {
    sub_984B0(v66);
    goto LABEL_23;
  }
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *(_QWORD *)(v66 + 8) = v69;
  swift_bridgeObjectRelease(v68);
  *(_QWORD *)(v66 + 16) = *((_QWORD *)v67 + 2);
  v70 = *((_QWORD *)v67 + 4);
  v71 = *(_QWORD *)(v66 + 32);
  *(_QWORD *)(v66 + 24) = *((_QWORD *)v67 + 3);
  *(_QWORD *)(v66 + 32) = v70;
  swift_bridgeObjectRelease(v71);
  return a1;
}

uint64_t getEnumTagSinglePayload for Page(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13FB90);
}

uint64_t sub_13FB90(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3217B8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_5C154(&qword_322F98);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v13 = type metadata accessor for PageData(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[15];
        }
        else
        {
          v10 = type metadata accessor for PageMetrics(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[17];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13FC8C);
}

uint64_t sub_13FC8C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3217B8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_5C154(&qword_322F98);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v13 = type metadata accessor for PageData(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[15];
        }
        else
        {
          v10 = type metadata accessor for PageMetrics(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[17];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_13FD78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;

  v10 = &unk_260508;
  sub_C1800(319, (unint64_t *)&qword_324600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest);
  if (v3 <= 0x3F)
  {
    v11 = *(_QWORD *)(v2 - 8) + 64;
    v12 = v11;
    v13 = &unk_260520;
    v14 = &unk_260520;
    sub_C1800(319, (unint64_t *)&unk_325938, (uint64_t (*)(uint64_t))&type metadata accessor for ToolbarPrincipalType);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      v16 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v17 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v18 = &unk_260520;
      v19 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v20 = &unk_260538;
      v6 = type metadata accessor for PageData(319);
      if (v7 <= 0x3F)
      {
        v21 = *(_QWORD *)(v6 - 8) + 64;
        v22 = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8 = type metadata accessor for PageMetrics(319);
        if (v9 <= 0x3F)
        {
          v23 = *(_QWORD *)(v8 - 8) + 64;
          v24 = &unk_260520;
          v25 = (char *)&value witness table for Builtin.BridgeObject + 64;
          v26 = (char *)&value witness table for Builtin.NativeObject + 64;
          v27 = &unk_260520;
          v28 = &unk_260538;
          v29 = &unk_260550;
          swift_initStructMetadata(a1, 256, 20, &v10, a1 + 16);
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for Page.StackType()
{
  return &type metadata for Page.StackType;
}

uint64_t _s11BookStoreUI4PageV9StackTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_13FF1C + 4 * byte_26022B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_13FF50 + 4 * byte_260226[v4]))();
}

uint64_t sub_13FF50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_13FF58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13FF60);
  return result;
}

uint64_t sub_13FF6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13FF74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_13FF78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_13FF80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Page.UpdateError()
{
  return &type metadata for Page.UpdateError;
}

uint64_t getEnumTagSinglePayload for Page.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Page.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_140078 + 4 * byte_260235[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1400AC + 4 * byte_260230[v4]))();
}

uint64_t sub_1400AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1400B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1400BCLL);
  return result;
}

uint64_t sub_1400C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1400D0);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1400D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1400DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Page.CodingKeys()
{
  return &type metadata for Page.CodingKeys;
}

unint64_t sub_1400FC()
{
  unint64_t result;

  result = qword_3259B0;
  if (!qword_3259B0)
  {
    result = swift_getWitnessTable(&unk_260664, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3259B0);
  }
  return result;
}

unint64_t sub_140144()
{
  unint64_t result;

  result = qword_3259B8;
  if (!qword_3259B8)
  {
    result = swift_getWitnessTable(&unk_26059C, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3259B8);
  }
  return result;
}

unint64_t sub_14018C()
{
  unint64_t result;

  result = qword_3259C0;
  if (!qword_3259C0)
  {
    result = swift_getWitnessTable(&unk_2605C4, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3259C0);
  }
  return result;
}

unint64_t sub_1401D0()
{
  unint64_t result;

  result = qword_3259D0;
  if (!qword_3259D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page.StackType, &type metadata for Page.StackType);
    atomic_store(result, (unint64_t *)&qword_3259D0);
  }
  return result;
}

uint64_t sub_140214(uint64_t a1)
{
  return sub_14025C(a1, qword_345FE0, 0xD000000000000019, 0x8000000000272210);
}

uint64_t sub_140238(uint64_t a1)
{
  return sub_14025C(a1, qword_345FF8, 0xD000000000000021, 0x80000000002721E0);
}

uint64_t sub_14025C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for PPTTestCase.Name(0);
  sub_5DD20(v7, a2);
  sub_5240C(v7, (uint64_t)a2);
  return PPTTestCase.Name.init(_:)(a3, a4);
}

uint64_t sub_1402B8(uint64_t a1, uint64_t a2)
{
  return sub_1402F0(a1, a2, (uint64_t)&unk_2EE520, (uint64_t)sub_14069C, (uint64_t)&unk_2EE538);
}

uint64_t sub_1402D4(uint64_t a1, uint64_t a2)
{
  return sub_1402F0(a1, a2, (uint64_t)&unk_2EE4D0, (uint64_t)sub_14069C, (uint64_t)&unk_2EE4E8);
}

uint64_t sub_1402F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD aBlock[5];
  uint64_t v58;

  v49 = a4;
  v50 = a5;
  v46 = a2;
  v47 = a3;
  v43 = a1;
  v52 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v52 - 8);
  v5 = __chkstk_darwin(v52);
  v51 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0, v5);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  __chkstk_darwin(v7);
  v48 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ScrollViewProxy(0);
  v9 = *(_QWORD *)(v41 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v41);
  v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PPTTestCase(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DispatchTime(0, v14);
  v16 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v42 = (char *)&v40 - v20;
  v21 = sub_14065C();
  v45 = static OS_dispatch_queue.main.getter(v21);
  static DispatchTime.now()();
  + infix(_:_:)(v18, 0.2);
  v44 = *(void (**)(char *, uint64_t))(v16 + 8);
  v44(v18, v56);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v43, v11);
  v22 = v40;
  v23 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v40, v46, v41);
  v24 = *(unsigned __int8 *)(v12 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = *(unsigned __int8 *)(v9 + 80);
  v27 = (v13 + v26 + v25) & ~v26;
  v28 = swift_allocObject(v47, v27 + v10, v24 | v26 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v28 + v25, v15, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v28 + v27, v22, v23);
  aBlock[4] = v49;
  v58 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_69F04;
  aBlock[3] = v50;
  v29 = _Block_copy(aBlock);
  v30 = swift_release(v58);
  v31 = v48;
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v32 = sub_1202E8();
  v33 = sub_5C154(&qword_324CF0);
  v34 = sub_120330();
  v36 = v51;
  v35 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v52, v32);
  v37 = v42;
  v38 = (void *)v45;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v42, v31, v36, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v54);
  return ((uint64_t (*)(char *, uint64_t))v44)(v37, v56);
}

unint64_t sub_14065C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31FCD8;
  if (!qword_31FCD8)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_31FCD8);
  }
  return result;
}

uint64_t sub_1406A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1406B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1406BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ScrollViewProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_140770()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for PPTTestCase(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return PPTTestCase.performScrollTest(_:)(v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t storeEnumTagSinglePayload for PageError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_14082C + 4 * byte_2606E5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_140860 + 4 * byte_2606E0[v4]))();
}

uint64_t sub_140860(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_140868(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x140870);
  return result;
}

uint64_t sub_14087C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x140884);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_140888(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_140890(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageError()
{
  return &type metadata for PageError;
}

_QWORD *sub_1408AC(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = a1;
  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    swift_errorRetain(*a2);
    *v3 = v5;
    *((_BYTE *)v3 + 8) = *((_BYTE *)a2 + 8);
    v8 = a2[3];
    v3[2] = a2[2];
    v3[3] = v8;
    v9 = a2[4];
    v3[4] = v9;
    v10 = a3[8];
    v11 = (_QWORD *)((char *)v3 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    swift_retain(v8);
    swift_retain(v9);
    v13 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v17 = a3[9];
    v18 = (_QWORD *)((char *)v3 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v22 = type metadata accessor for FontConstants(0, v21);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
      v23 = 1;
    }
    else
    {
      v24 = *v19;
      *v18 = *v19;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v23);
    v25 = a3[10];
    v26 = (char *)v3 + v25;
    v27 = (char *)a2 + v25;
    *v26 = *v27;
    v5 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v26 + 1) = v5;
  }
  swift_retain(v5);
  return v3;
}

uint64_t sub_140A48(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;

  swift_errorRelease(*a1);
  swift_release(a1[3]);
  swift_release(a1[4]);
  v4 = (_QWORD *)((char *)a1 + a2[8]);
  v5 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + a2[9]);
  v8 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v10 = type metadata accessor for FontConstants(0, v9);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_release(*(_QWORD *)((char *)a1 + a2[10] + 8));
}

uint64_t sub_140B34(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  swift_errorRetain(*a2);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a3[8];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)((char *)a2 + v9);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = a3[9];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v21 = type metadata accessor for FontConstants(0, v20);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v18;
    *v17 = *v18;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v22);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = (uint64_t)a2 + v24;
  *(_BYTE *)v25 = *(_BYTE *)v26;
  v27 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v25 + 8) = v27;
  swift_retain(v27);
  return a1;
}

uint64_t *sub_140CA8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a2;
  swift_errorRetain(*a2);
  v7 = *a1;
  *a1 = v6;
  swift_errorRelease(v7);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = a3[8];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_5E09C((uint64_t)a1 + v12, &qword_320160);
    v15 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = a3[9];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_5E09C((uint64_t)a1 + v19, &qword_320290);
    v22 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v24 = type metadata accessor for FontConstants(0, v23);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v20, v21, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v21;
      *v20 = *v21;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v25);
  }
  v27 = a3[10];
  v28 = (uint64_t)a1 + v27;
  v29 = (uint64_t)a2 + v27;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  v30 = *(_QWORD *)(v28 + 8);
  v31 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v28 + 8) = v31;
  swift_retain(v31);
  swift_release(v30);
  return a1;
}

uint64_t sub_140E6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for SizeConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[9];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v16 = type metadata accessor for FontConstants(0, v15);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v12, v13, v16);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t *sub_140FC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  *a1 = *a2;
  swift_errorRelease(v6);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v7);
  v8 = a1[4];
  a1[4] = a2[4];
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = a3[8];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_5E09C((uint64_t)a1 + v9, &qword_320160);
    v12 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v14 = a3[9];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    sub_5E09C((uint64_t)a1 + v14, &qword_320290);
    v17 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v19 = type metadata accessor for FontConstants(0, v18);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v15, v16, v19);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v20 = a3[10];
  v21 = (uint64_t)a1 + v20;
  v22 = (uint64_t)a2 + v20;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  swift_release(v23);
  return a1;
}

uint64_t sub_14116C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_141178);
}

uint64_t sub_141178(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3201B0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_5C154(&qword_320BC8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_141220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14122C);
}

char *sub_14122C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3201B0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_5C154(&qword_320BC8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for PageErrorView(uint64_t a1)
{
  uint64_t result;

  result = qword_325A78;
  if (!qword_325A78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageErrorView);
  return result;
}

void sub_14130C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "\b";
  v6[1] = &unk_260730;
  v6[2] = (char *)&value witness table for () + 64;
  v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_663E4(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_663E4(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      v6[6] = &unk_260748;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_1413E8(char a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;

  v2 = type metadata accessor for LocalizerLookupStrategy(0);
  v3 = __chkstk_darwin(v2);
  v4 = type metadata accessor for LocalizerDefaultValue(0, v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_141494(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  LocalizerDefaultValue.init(stringLiteral:)("Content Not Available", 21, 2, a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, enum case for LocalizerLookupStrategy.default(_:), v1);
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001ELL, 0x80000000002725E0, 0, v4, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v3);
}

void sub_1416AC(char a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;

  v2 = type metadata accessor for LocalizerLookupStrategy(0);
  v3 = __chkstk_darwin(v2);
  v4 = type metadata accessor for LocalizerDefaultValue(0, v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_141758(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  LocalizerDefaultValue.init(stringLiteral:)("The content you’ve requested isn’t currently available.", 59, 0, a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, enum case for LocalizerLookupStrategy.default(_:), v3);
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000024, 0x8000000000272450, 0, v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v2);
  v8 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v1, 0, 1, v8);
}

unint64_t sub_141984@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_145B70(*a1);
  *a2 = result;
  return result;
}

void sub_1419AC(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

unint64_t sub_1419BC()
{
  unint64_t result;

  result = qword_325AC8;
  if (!qword_325AC8)
  {
    result = swift_getWitnessTable(&unk_2607D8, &type metadata for PageError);
    atomic_store(result, (unint64_t *)&qword_325AC8);
  }
  return result;
}

uint64_t sub_141A00(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_145AE8();
  v5 = sub_145B2C();
  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t sub_141A44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B8010, 1);
}

uint64_t sub_141A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;

  v2 = v1;
  v86 = a1;
  v85 = type metadata accessor for PageViewEventViewModifier(0);
  __chkstk_darwin(v85);
  v75 = (uint64_t *)((char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5C154(&qword_3237B8);
  __chkstk_darwin(v4);
  v80 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Metrics.NavigationType(0);
  v78 = *(_QWORD *)(v6 - 8);
  v79 = v6;
  __chkstk_darwin(v6);
  v76 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageMetrics(0);
  v83 = *(_QWORD *)(v8 - 8);
  v84 = v8;
  __chkstk_darwin(v8);
  v81 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v82 = (char *)&v65 - v11;
  v12 = type metadata accessor for PageData(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v72 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v87 = (char *)&v65 - v17;
  v18 = type metadata accessor for DataStackID(0, v16);
  v68 = *(_QWORD *)(v18 - 8);
  v69 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_325570);
  __chkstk_darwin(v21);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v65 - v25;
  v67 = sub_5C154(&qword_325AD0);
  __chkstk_darwin(v67);
  v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_5C154(&qword_325AD8);
  v73 = *(_QWORD *)(v29 - 8);
  v74 = v29;
  __chkstk_darwin(v29);
  v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_5C154(&qword_325AE0);
  v32 = __chkstk_darwin(v70);
  v71 = (char *)&v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v28 = static HorizontalAlignment.center.getter(v32);
  *((_QWORD *)v28 + 1) = 0;
  v28[16] = 0;
  v34 = (uint64_t)&v28[*(int *)(sub_5C154(&qword_325AE8) + 44)];
  v77 = v2;
  sub_142120(v2, v34);
  PageData.init(pageID:pageType:)(0, 0xE000000000000000, 0x676150726F727245, 0xE900000000000065, v35);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
  DataStackID.init(stringLiteral:)(0x676150726F727245, 0xE900000000000065);
  v36 = sub_5C154(&qword_321F20);
  v37 = swift_allocObject(v36, 80, 7);
  *(_OWORD *)(v37 + 16) = xmmword_258070;
  v38 = (_QWORD *)(v37 + 32);
  sub_5E1A4((uint64_t)v26, (uint64_t)v23, &qword_325570);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v23, 1, v12) == 1)
  {
    sub_5E09C((uint64_t)v23, &qword_325570);
    *(_OWORD *)v38 = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(_OWORD *)(v37 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v37 + 56) = v12;
    *(_QWORD *)(v37 + 64) = sub_648E0((unint64_t *)&unk_326230, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
    *(_QWORD *)(v37 + 72) = sub_648E0((unint64_t *)&unk_322510, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
    v39 = sub_668BC(v38);
    (*(void (**)(_QWORD *, char *, uint64_t))(v13 + 32))(v39, v23, v12);
  }
  v40 = sub_67060(&qword_325AF0, &qword_325AD0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v66 = v31;
  View.appAnalyticsData(_:for:)(v37, v20, v67, v40);
  v41 = swift_bridgeObjectRelease(v37);
  (*(void (**)(char *, uint64_t, __n128))(v68 + 8))(v20, v69, v41);
  sub_5E09C((uint64_t)v26, &qword_325570);
  sub_5E09C((uint64_t)v28, &qword_325AD0);
  v77 = *(_QWORD *)(v77 + 32);
  v42 = v77;
  v43 = v87;
  PageData.init(pageID:pageType:)(0, 0xE000000000000000, 0x676150726F727245, 0xE900000000000065, v44);
  v46 = v78;
  v45 = v79;
  v47 = v76;
  (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v76, enum case for Metrics.NavigationType.forward(_:), v79);
  v48 = type metadata accessor for JSNetworkPerformanceMetrics(0);
  v49 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v80, 1, 1, v48);
  v50 = v82;
  static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(0x726F727245, 0xE500000000000000, 0, 0xE000000000000000, v47, v49, 1, 1);
  sub_5E09C(v49, &qword_3237B8);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
  v51 = v72;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v72, v43, v12);
  v53 = v83;
  v52 = v84;
  v54 = v81;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v81, v50, v84);
  KeyPath = swift_getKeyPath(&unk_260890);
  v56 = v12;
  v57 = (uint64_t)v75;
  *v75 = KeyPath;
  *(_BYTE *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = v42;
  v58 = v85;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v57 + *(int *)(v85 + 24), v51, v56);
  *(_QWORD *)(v57 + *(int *)(v58 + 28)) = _swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v57 + *(int *)(v58 + 32), v54, v52);
  v59 = (uint64_t)v71;
  sub_5E160(v57, (uint64_t)&v71[*(int *)(v70 + 36)], type metadata accessor for PageViewEventViewModifier);
  v61 = v73;
  v60 = v74;
  v62 = v66;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v59, v66, v74);
  v63 = *(void (**)(char *, uint64_t))(v53 + 8);
  swift_retain(v77);
  v63(v50, v52);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v87, v56);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
  return sub_66F14(v59, v86, &qword_325AE0);
}

uint64_t sub_142120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v81;
  double v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __n128 v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int *v218;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(char *, char *, uint64_t);
  void (*v223)(char *, uint64_t);
  void (*v224)(char *, uint64_t, uint64_t);
  void (*v225)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v226;
  void (*v227)(char *, _QWORD, uint64_t);
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  double v304[2];
  uint64_t v305;

  v281 = a2;
  v264 = type metadata accessor for ButtonViewModel.ActionKind(0);
  v263 = *(_QWORD *)(v264 - 8);
  __chkstk_darwin(v264);
  v265 = (uint64_t *)((char *)&v220 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v259 = type metadata accessor for LocalizerLookupStrategy(0);
  v257 = *(_QWORD *)(v259 - 8);
  v4 = __chkstk_darwin(v259);
  v255 = (char *)&v220 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for LocalizerDefaultValue(0, v4);
  v253 = *(_QWORD *)(v254 - 8);
  v6 = __chkstk_darwin(v254);
  v250 = (char *)&v220 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = type metadata accessor for ButtonViewModel.Content(0, v6);
  v249 = *(_QWORD *)(v252 - 8);
  v8 = __chkstk_darwin(v252);
  v258 = (char *)&v220 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for ButtonViewModel.Style(0, v8);
  v243 = *(_QWORD *)(v244 - 8);
  v10 = __chkstk_darwin(v244);
  v251 = (char *)&v220 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = type metadata accessor for ButtonViewModel.Kind(0, v10);
  v241 = *(_QWORD *)(v242 - 8);
  v12 = __chkstk_darwin(v242);
  v248 = (char *)&v220 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = type metadata accessor for ButtonViewModel.Shape(0, v12);
  v239 = *(_QWORD *)(v240 - 8);
  v14 = __chkstk_darwin(v240);
  v247 = (char *)&v220 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for ButtonViewModel.Size(0, v14);
  v237 = *(_QWORD *)(v238 - 8);
  v16 = __chkstk_darwin(v238);
  v246 = (char *)&v220 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ButtonViewModel(0, v16);
  v19 = __chkstk_darwin(v18);
  v245 = (char *)&v220 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = type metadata accessor for ButtonView(0, v19);
  v261 = *(_QWORD *)(v262 - 8);
  __chkstk_darwin(v262);
  v260 = (char *)&v220 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v292 = sub_5C154(&qword_325AF8);
  v279 = *(_QWORD *)(v292 - 8);
  __chkstk_darwin(v292);
  v256 = (char *)&v220 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5C154(&qword_325B00);
  __chkstk_darwin(v23);
  v280 = (uint64_t)&v220 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v293 = (char *)&v220 - v26;
  v27 = sub_5C154(&qword_320288);
  __chkstk_darwin(v27);
  v221 = (uint64_t)&v220 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = sub_5C154(&qword_325B08);
  v275 = *(_QWORD *)(v288 - 8);
  __chkstk_darwin(v288);
  v220 = (uint64_t)&v220 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PageErrorView(0);
  __chkstk_darwin(v30);
  v270 = (char *)&v220 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_325B10);
  __chkstk_darwin(v32);
  v278 = (uint64_t)&v220 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v300 = (char *)&v220 - v35;
  v290 = sub_5C154(&qword_320388);
  v282 = *(_QWORD *)(v290 - 8);
  v36 = __chkstk_darwin(v290);
  v289 = (char *)&v220 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = type metadata accessor for SizeConstants.Spacing(0, v36);
  v287 = *(_QWORD *)(v269 - 8);
  __chkstk_darwin(v269);
  v286 = (char *)&v220 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = type metadata accessor for SizeConstants(0);
  v284 = *(_QWORD *)(v285 - 8);
  __chkstk_darwin(v285);
  v283 = (uint64_t)&v220 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_5C154(&qword_325B18);
  __chkstk_darwin(v232);
  v234 = (uint64_t)&v220 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = sub_5C154(&qword_325B20);
  __chkstk_darwin(v233);
  v236 = (uint64_t)&v220 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = sub_5C154(&qword_325B28);
  v267 = *(_QWORD *)(v268 - 8);
  __chkstk_darwin(v268);
  v235 = (uint64_t)&v220 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v43);
  v274 = (char *)&v220 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_5C154(&qword_325B30);
  __chkstk_darwin(v45);
  v277 = (uint64_t)&v220 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v301 = (uint64_t)&v220 - v48;
  v49 = sub_5C154(&qword_31F7E8);
  v50 = __chkstk_darwin(v49);
  v52 = (char *)&v220 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Font.TextStyle(0, v50);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = __chkstk_darwin(v53);
  v57 = (char *)&v220 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v297 = type metadata accessor for FontConstants(0, v55);
  v276 = *(char **)(v297 - 8);
  __chkstk_darwin(v297);
  v59 = (char *)&v220 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v299 = v59;
  v60 = type metadata accessor for LocalizerRequest(0);
  v61 = *(_QWORD *)(v60 - 8);
  v294 = v60;
  v295 = v61;
  __chkstk_darwin(v60);
  v266 = (char *)&v220 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63);
  v65 = (char *)&v220 - v64;
  v298 = type metadata accessor for LocalizedText(0);
  v272 = *(_QWORD *)(v298 - 8);
  __chkstk_darwin(v298);
  v67 = (char *)&v220 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = sub_5C154(&qword_325B38);
  __chkstk_darwin(v296);
  v271 = (char *)&v220 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_5C154(&qword_325B40);
  __chkstk_darwin(v273);
  v70 = (char *)&v220 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71);
  v302 = (uint64_t)&v220 - v72;
  v303 = a1;
  sub_1413E8(*(_BYTE *)(a1 + 8));
  v228 = v65;
  LocalizedText.init(_:)(v65);
  v291 = v30;
  sub_77618((uint64_t)v59);
  v73 = v54;
  v74 = *(void (**)(char *, _QWORD, uint64_t))(v54 + 104);
  v75 = v57;
  v76 = v53;
  v227 = v74;
  v74(v57, enum case for Font.TextStyle.title2(_:), v53);
  v77 = enum case for Font.Design.serif (_:);
  v78 = type metadata accessor for Font.Design(0);
  v79 = *(_QWORD *)(v78 - 8);
  v224 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 104);
  v224(v52, v77, v78);
  v80 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56);
  v226 = v78;
  v225 = v80;
  v81 = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v80)(v52, 0, 1, v78);
  v82 = static Font.Weight.bold.getter(v81);
  v83 = static Font.system(_:design:weight:)(v75, v52, *(_QWORD *)&v82, 0);
  v229 = v52;
  sub_5E09C((uint64_t)v52, &qword_31F7E8);
  v84 = *(void (**)(char *, uint64_t))(v73 + 8);
  v230 = v75;
  v85 = v76;
  v86 = v84;
  v231 = v85;
  ((void (*)(char *))v84)(v75);
  v223 = (void (*)(char *, uint64_t))*((_QWORD *)v276 + 1);
  v223(v299, v297);
  KeyPath = swift_getKeyPath(&unk_2608C0);
  v88 = v272;
  v89 = (uint64_t)v271;
  v90 = v298;
  v222 = *(void (**)(char *, char *, uint64_t))(v272 + 16);
  v222(v271, v67, v298);
  v91 = (uint64_t *)(v89 + *(int *)(v296 + 36));
  *v91 = KeyPath;
  v91[1] = v83;
  v92 = v67;
  v272 = *(_QWORD *)(v88 + 8);
  v93 = ((uint64_t (*)(char *, uint64_t))v272)(v67, v90);
  v94 = static Color.primary.getter(v93);
  v95 = swift_getKeyPath(&unk_2608F0);
  sub_5E1A4(v89, (uint64_t)v70, &qword_325B38);
  v96 = (uint64_t *)&v70[*(int *)(v273 + 36)];
  *v96 = v95;
  v96[1] = v94;
  v97 = (uint64_t)v274;
  sub_5E09C(v89, &qword_325B38);
  v276 = v70;
  sub_66F14((uint64_t)v70, v302, &qword_325B40);
  sub_1416AC(*(_BYTE *)(v303 + 8));
  v98 = v295;
  v99 = v294;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v295 + 48))(v97, 1) == 1)
  {
    sub_5E09C(v97, &qword_3217B8);
    v100 = 1;
    v101 = v292;
    v102 = (uint64_t)v293;
    v104 = (uint64_t)v300;
    v103 = v301;
    v105 = v290;
    v106 = v291;
    v107 = v289;
    v108 = v269;
    v109 = (uint64_t)v270;
    v110 = v268;
  }
  else
  {
    v111 = v266;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v266, v97, v99);
    v112 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
    v113 = v228;
    v112(v228, v111, v99);
    LocalizedText.init(_:)(v113);
    v114 = (uint64_t)v299;
    sub_77618((uint64_t)v299);
    v115 = v230;
    v116 = v231;
    v227(v230, enum case for Font.TextStyle.body(_:), v231);
    v117 = (uint64_t)v229;
    v118 = v226;
    v224(v229, enum case for Font.Design.default(_:), v226);
    v225(v117, 0, 1, v118);
    v119 = static Font.system(_:design:weight:)(v115, v117, 0, 1);
    sub_5E09C(v117, &qword_31F7E8);
    v86(v115, v116);
    v223((char *)v114, v297);
    v120 = swift_getKeyPath(&unk_2608C0);
    v121 = v298;
    v222((char *)v89, v92, v298);
    v122 = (uint64_t *)(v89 + *(int *)(v296 + 36));
    *v122 = v120;
    v122[1] = v119;
    ((void (*)(char *, uint64_t))v272)(v92, v121);
    v123 = swift_getKeyPath(&unk_260950);
    v124 = v234;
    sub_5E1A4(v89, v234, &qword_325B38);
    v125 = v124 + *(int *)(v232 + 36);
    *(_QWORD *)v125 = v123;
    *(_BYTE *)(v125 + 8) = 1;
    sub_5E09C(v89, &qword_325B38);
    v126 = objc_msgSend((id)objc_opt_self(UIColor), "bc_booksGray");
    v127 = Color.init(_:)(v126);
    v128 = swift_getKeyPath(&unk_2608F0);
    v129 = v236;
    sub_5E1A4(v124, v236, &qword_325B18);
    v130 = (uint64_t *)(v129 + *(int *)(v233 + 36));
    *v130 = v128;
    v130[1] = v127;
    v131 = sub_5E09C(v124, &qword_325B18);
    LOBYTE(v127) = static Edge.Set.top.getter(v131);
    v106 = v291;
    v132 = v283;
    v133 = sub_76D64(v283);
    v134 = v286;
    SizeConstants.spacing.getter(v133);
    (*(void (**)(uint64_t, uint64_t))(v284 + 8))(v132, v285);
    v107 = v289;
    v108 = v269;
    ScalableSizeConstants.scaled.getter(v269, &protocol witness table for SizeConstants.Spacing);
    (*(void (**)(char *, uint64_t))(v287 + 8))(v134, v108);
    v135 = swift_getKeyPath(&unk_260980);
    v136 = sub_79620();
    v105 = v290;
    SizeConstants.Scaled.subscript.getter(v304, v135, v290, v136);
    swift_release(v135);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v107, v105);
    v137 = EdgeInsets.init(_all:)(v304[0]);
    v139 = v138;
    v141 = v140;
    v143 = v142;
    v144 = v235;
    sub_5E1A4(v129, v235, &qword_325B20);
    v145 = v268;
    v146 = v144 + *(int *)(v268 + 36);
    *(_BYTE *)v146 = v127;
    *(double *)(v146 + 8) = v137;
    *(_QWORD *)(v146 + 16) = v139;
    *(_QWORD *)(v146 + 24) = v141;
    *(_QWORD *)(v146 + 32) = v143;
    *(_BYTE *)(v146 + 40) = 0;
    sub_5E09C(v129, &qword_325B20);
    (*(void (**)(char *, uint64_t))(v295 + 8))(v266, v294);
    v147 = v301;
    sub_66F14(v144, v301, &qword_325B28);
    v100 = 0;
    v102 = (uint64_t)v293;
    v103 = v147;
    v101 = v292;
    v109 = (uint64_t)v270;
    v110 = v145;
    v104 = (uint64_t)v300;
  }
  v148 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v267 + 56))(v103, v100, 1, v110);
  v149 = static Capabilities.isInternalBuild.getter(v148);
  sub_5E11C(v303, v109, type metadata accessor for PageErrorView);
  if ((v149 & 1) != 0)
  {
    v150 = v109 + *(int *)(v106 + 40);
    v151 = *(_BYTE *)v150;
    v152 = *(double *)(v150 + 8);
    LOBYTE(v304[0]) = v151;
    v304[1] = v152;
    v153 = sub_5C154(&qword_325B50);
    State.wrappedValue.getter(&v305, v153);
    sub_6685C(v109, type metadata accessor for PageErrorView);
    if ((v305 & 1) != 0)
    {
      v154 = 1;
    }
    else
    {
      v155 = v221;
      v156 = sub_14384C(v221);
      LODWORD(v299) = static Edge.Set.top.getter(v156);
      v157 = v283;
      v158 = sub_76D64(v283);
      v159 = v286;
      SizeConstants.spacing.getter(v158);
      (*(void (**)(uint64_t, uint64_t))(v284 + 8))(v157, v285);
      ScalableSizeConstants.scaled.getter(v108, &protocol witness table for SizeConstants.Spacing);
      (*(void (**)(char *, uint64_t))(v287 + 8))(v159, v108);
      v160 = swift_getKeyPath(&unk_260920);
      v161 = sub_79620();
      SizeConstants.Scaled.subscript.getter(v304, v160, v105, v161);
      swift_release(v160);
      (*(void (**)(char *, uint64_t))(v282 + 8))(v107, v105);
      v162 = EdgeInsets.init(_all:)(v304[0]);
      v164 = v163;
      v166 = v165;
      v168 = v167;
      v169 = v220;
      sub_5E1A4(v155, v220, &qword_320288);
      v170 = v169 + *(int *)(v288 + 36);
      *(_BYTE *)v170 = (_BYTE)v299;
      *(double *)(v170 + 8) = v162;
      *(_QWORD *)(v170 + 16) = v164;
      *(_QWORD *)(v170 + 24) = v166;
      *(_QWORD *)(v170 + 32) = v168;
      *(_BYTE *)(v170 + 40) = 0;
      v171 = v155;
      v104 = (uint64_t)v300;
      sub_5E09C(v171, &qword_320288);
      sub_66F14(v169, v104, &qword_325B08);
      v154 = 0;
    }
  }
  else
  {
    sub_6685C(v109, type metadata accessor for PageErrorView);
    v154 = 1;
  }
  v172 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v275 + 56))(v104, v154, 1, v288);
  if (*(unsigned __int8 *)(v303 + 8) >= 2u)
  {
    v173 = v246;
    (*(void (**)(char *, _QWORD, uint64_t))(v237 + 104))(v246, enum case for ButtonViewModel.Size.small(_:), v238);
    v174 = v247;
    (*(void (**)(char *, _QWORD, uint64_t))(v239 + 104))(v247, enum case for ButtonViewModel.Shape.capsule(_:), v240);
    v175 = v248;
    (*(void (**)(char *, _QWORD, uint64_t))(v241 + 104))(v248, enum case for ButtonViewModel.Kind.solid(_:), v242);
    v176 = v251;
    v177.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v243 + 104))(v251, enum case for ButtonViewModel.Style.primary(_:), v244);
    v178 = v108;
    v179 = v250;
    LocalizerDefaultValue.init(stringLiteral:)("Try Again", 9, 2, v177);
    v180 = v257;
    v181 = v255;
    v182 = v259;
    (*(void (**)(char *, _QWORD, uint64_t))(v257 + 104))(v255, enum case for LocalizerLookupStrategy.default(_:), v259);
    v183 = v258;
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000016, 0x8000000000272230, 0, v179, v181);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v181, v182);
    (*(void (**)(char *, uint64_t))(v253 + 8))(v179, v254);
    (*(void (**)(char *, _QWORD, uint64_t))(v249 + 104))(v183, enum case for ButtonViewModel.Content.title(_:), v252);
    v184 = v265;
    sub_143B28(v265);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v263 + 104))(v184, enum case for ButtonViewModel.ActionKind.actionModel(_:), v264);
    v185 = v245;
    v186 = v174;
    v101 = v292;
    ButtonViewModel.init(size:shape:kind:style:content:isEnabled:action:)(v173, v186, v175, v176, v183, 1, v184);
    v187 = v260;
    v188 = ButtonView.init(model:)(v185);
    LOBYTE(v184) = static Edge.Set.top.getter(v188);
    v189 = v283;
    v190 = sub_76D64(v283);
    v191 = v286;
    SizeConstants.spacing.getter(v190);
    (*(void (**)(uint64_t, uint64_t))(v284 + 8))(v189, v285);
    v192 = v289;
    ScalableSizeConstants.scaled.getter(v178, &protocol witness table for SizeConstants.Spacing);
    (*(void (**)(char *, uint64_t))(v287 + 8))(v191, v178);
    v193 = swift_getKeyPath(&unk_260920);
    v194 = sub_79620();
    v195 = v290;
    SizeConstants.Scaled.subscript.getter(v304, v193, v290, v194);
    swift_release(v193);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v192, v195);
    v196 = EdgeInsets.init(_all:)(v304[0]);
    v198 = v197;
    v200 = v199;
    v202 = v201;
    v203 = v261;
    v204 = (uint64_t)v256;
    v205 = v262;
    (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v256, v187, v262);
    v206 = v204 + *(int *)(v101 + 36);
    *(_BYTE *)v206 = (_BYTE)v184;
    *(double *)(v206 + 8) = v196;
    *(_QWORD *)(v206 + 16) = v198;
    *(_QWORD *)(v206 + 24) = v200;
    *(_QWORD *)(v206 + 32) = v202;
    *(_BYTE *)(v206 + 40) = 0;
    v207 = v187;
    v102 = (uint64_t)v293;
    v104 = (uint64_t)v300;
    (*(void (**)(char *, uint64_t))(v203 + 8))(v207, v205);
    sub_66F14(v204, v102, &qword_325AF8);
    v172 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 56))(v102, v172, 1, v101);
  v208 = v302;
  v209 = (uint64_t)v276;
  sub_5E1A4(v302, (uint64_t)v276, &qword_325B40);
  v210 = v301;
  v211 = v277;
  sub_5E1A4(v301, v277, &qword_325B30);
  v212 = v278;
  sub_5E1A4(v104, v278, &qword_325B10);
  v213 = v102;
  v214 = v102;
  v215 = v280;
  sub_5E1A4(v213, v280, &qword_325B00);
  v216 = v281;
  sub_5E1A4(v209, v281, &qword_325B40);
  v217 = v104;
  v218 = (int *)sub_5C154(&qword_325B48);
  sub_5E1A4(v211, v216 + v218[12], &qword_325B30);
  sub_5E1A4(v212, v216 + v218[16], &qword_325B10);
  sub_5E1A4(v215, v216 + v218[20], &qword_325B00);
  sub_5E09C(v214, &qword_325B00);
  sub_5E09C(v217, &qword_325B10);
  sub_5E09C(v210, &qword_325B30);
  sub_5E09C(v208, &qword_325B40);
  sub_5E09C(v215, &qword_325B00);
  sub_5E09C(v212, &qword_325B10);
  sub_5E09C(v211, &qword_325B30);
  return sub_5E09C(v209, &qword_325B40);
}

uint64_t sub_14384C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  __n128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v2 = type metadata accessor for SizeConstants.CornerRadius(0);
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (double *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_5C154(&qword_325B58);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_5C154(&qword_320280);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v14 = static Alignment.topTrailing.getter(v18);
  v14[1] = v19;
  v20 = sub_5C154(&qword_325B60);
  sub_143EF8(v1, (uint64_t)v14 + *(int *)(v20 + 44));
  type metadata accessor for PageErrorView(0);
  v21 = sub_76D64((uint64_t)v8);
  SizeConstants.cornerRadius.getter(v21);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = SizeConstants.CornerRadius.smallButton.getter(v22);
  v24.n128_f64[0] = (*(double (**)(char *, uint64_t))(v34 + 8))(v4, v35);
  v25 = (char *)v11 + *(int *)(v9 + 20);
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  *v11 = v23;
  v11[1] = v23;
  v28 = (uint64_t)&v17[*(int *)(v15 + 36)];
  sub_5E11C((uint64_t)v11, v28, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v28 + *(int *)(sub_5C154(&qword_325B68) + 36)) = 256;
  sub_5E1A4((uint64_t)v14, (uint64_t)v17, &qword_325B58);
  sub_6685C((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v29 = sub_5E09C((uint64_t)v14, &qword_325B58);
  v30 = static Alignment.center.getter(v29);
  sub_74670(0.0, 1, 0.0, 1, 320.0, 0, 0.0, 1, v36, 0.0, 1, 0.0, 1, v30, v31);
  return sub_5E09C((uint64_t)v17, &qword_320280);
}

uint64_t sub_143B28@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  double v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v43 = a1;
  v1 = type metadata accessor for PageErrorView(0);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  v40 = *(_QWORD *)(v1 - 8);
  v41 = v2;
  v3 = __chkstk_darwin(v1);
  v39 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Metrics.Location(0, v3);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Metrics.ClickActionType(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Metrics.TargetType(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for ActionMetrics(0);
  v18 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v36 - v23;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v15 + 104))(v17, enum case for Metrics.TargetType.button(_:), v14, v22);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for Metrics.ClickActionType.reload(_:), v9);
  static Metrics.Location.genericButton.getter(v25);
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(0, 0xE000000000000000, v17, v13, 0, 0, 0, v8);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v38);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v24, v36);
  v27 = v39;
  sub_5E11C(v42, v39, type metadata accessor for PageErrorView);
  v28 = *(unsigned __int8 *)(v40 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_2EE650, v29 + v41, v28 | 7);
  sub_5E160(v27, v30 + v29, type metadata accessor for PageErrorView);
  v32 = type metadata accessor for ClosureAction(0, v31);
  v33 = v43;
  v43[3] = v32;
  v33[4] = &protocol witness table for ClosureAction;
  sub_668BC(v33);
  v34 = ClosureAction.init(actionMetrics:body:)(v20, sub_145AA4, v30);
  return (*(uint64_t (**)(char *, uint64_t, double))(v18 + 8))(v24, v26, v34);
}

uint64_t sub_143DF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  v10 = v1;
  swift_errorRetain(v1);
  v2 = sub_5C154((uint64_t *)&unk_321CD0);
  v3 = sub_5C154(&qword_325BD0);
  if (swift_dynamicCast(v8, &v10, v2, v3, 6))
  {
    sub_5DC98(v8, (uint64_t)v11);
    v4 = v12;
    v5 = v13;
    sub_66898(v11, v12);
    v6 = Error.localizedDescription.getter(v4, *(_QWORD *)(v5 + 8));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v11);
  }
  else
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_5E09C((uint64_t)v8, &qword_325BD8);
    v11[0] = 0;
    v11[1] = 0xE000000000000000;
    *(_QWORD *)&v8[0] = v1;
    _print_unlocked<A, B>(_:_:)(v8, v11, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return v11[0];
  }
  return v6;
}

uint64_t sub_143EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  __n128 v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t);
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  _BYTE *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v67[4];
  int v68;
  double (*v69)(_BYTE *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  _BYTE *v76;
  uint64_t v77;
  unint64_t v78;
  void (*v79)(_BYTE *, uint64_t);
  void (*v80)(_BYTE *, uint64_t);
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  unsigned __int8 v88;
  _BYTE v89[7];
  _BYTE v90[7];
  unsigned __int8 v91;
  _BYTE v92[7];
  unsigned __int8 v93;
  _BYTE v94[7];
  unsigned __int8 v95;
  char v96;
  _BYTE v97[7];
  _BYTE v98[7];
  _BYTE v99[7];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  double v113;
  uint64_t v114;
  unsigned __int8 v115;
  _BYTE v116[7];
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  _BYTE v122[7];
  uint64_t v123;
  char v124;
  _BYTE v125[7];
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  _BYTE v131[7];
  char v132;
  _BYTE v133[7];
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _BYTE v139[7];
  uint64_t v140;
  char v141;

  v71 = a2;
  v3 = sub_5C154(&qword_325B70);
  __chkstk_darwin(v3);
  v76 = &v67[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v75 = (uint64_t *)&v67[-v6];
  v77 = sub_5C154(&qword_320388);
  v87 = *(uint64_t *)(v77 - 8);
  v7 = __chkstk_darwin(v77);
  v9 = &v67[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for SizeConstants.Spacing(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v67[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for SizeConstants(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v67[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v70 = a1 + *(int *)(type metadata accessor for PageErrorView(0) + 32);
  v72 = a1;
  v18 = sub_76D64((uint64_t)v17);
  SizeConstants.spacing.getter(v18);
  v80 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
  v80(v17, v14);
  ScalableSizeConstants.scaled.getter(v10, &protocol witness table for SizeConstants.Spacing);
  v79 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v79(v13, v10);
  KeyPath = swift_getKeyPath(&unk_260980);
  v78 = sub_79620();
  v20 = v77;
  SizeConstants.Scaled.subscript.getter(&v100, KeyPath, v77, v78);
  swift_release(KeyPath);
  v69 = *(double (**)(_BYTE *, uint64_t))(v87 + 8);
  v21.n128_f64[0] = v69(v9, v20);
  v83 = v100;
  *(double *)&v87 = COERCE_DOUBLE(static HorizontalAlignment.center.getter(v21));
  v22 = sub_144654((uint64_t)&v113);
  v85 = v114;
  v86 = v113;
  v84 = v115;
  v81 = v117;
  v73 = v118;
  v68 = v119;
  v82 = *((_QWORD *)&v119 + 1);
  v74 = static Edge.Set.horizontal.getter(v22);
  v23 = sub_76D64((uint64_t)v17);
  SizeConstants.spacing.getter(v23);
  v80(v17, v14);
  ScalableSizeConstants.scaled.getter(v10, &protocol witness table for SizeConstants.Spacing);
  v79(v13, v10);
  v24 = swift_getKeyPath(&unk_2609B0);
  v25 = v77;
  SizeConstants.Scaled.subscript.getter(&v113, v24, v77, v78);
  swift_release(v24);
  v26 = (void (*)(_BYTE *, uint64_t))v69;
  v69(v9, v25);
  v27 = EdgeInsets.init(_all:)(v113);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v95 = 0;
  v93 = v84;
  v91 = v68;
  v88 = 0;
  v84 = static Edge.Set.vertical.getter(v34);
  v35 = sub_76D64((uint64_t)v17);
  SizeConstants.spacing.getter(v35);
  v80(v17, v14);
  ScalableSizeConstants.scaled.getter(v10, &protocol witness table for SizeConstants.Spacing);
  v79(v13, v10);
  v36 = swift_getKeyPath(&unk_2609E0);
  SizeConstants.Scaled.subscript.getter(&v113, v36, v25, v78);
  swift_release(v36);
  v26(v9, v25);
  v37 = EdgeInsets.init(_all:)(v113);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  LOBYTE(v25) = v95;
  LODWORD(v77) = v95;
  LOBYTE(v10) = v93;
  LODWORD(v78) = v93;
  LOBYTE(v14) = v91;
  LODWORD(v79) = v91;
  LODWORD(v80) = v88;
  v96 = 0;
  v44 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  v45 = Color.init(_:)(v44);
  LODWORD(v70) = static Edge.Set.all.getter(v45);
  LOBYTE(v9) = v96;
  v47 = static HorizontalAlignment.center.getter(v46);
  v48 = (uint64_t)v75;
  *v75 = v47;
  *(_QWORD *)(v48 + 8) = 0;
  *(_BYTE *)(v48 + 16) = 1;
  v49 = sub_5C154(&qword_325B78);
  sub_144844(v72, v48 + *(int *)(v49 + 44), v50);
  v51 = v76;
  sub_5E1A4(v48, (uint64_t)v76, &qword_325B70);
  *(_QWORD *)&v100 = v87;
  *((_QWORD *)&v100 + 1) = v83;
  LOBYTE(v101) = v25;
  *(_DWORD *)((char *)&v101 + 1) = *(_DWORD *)v94;
  DWORD1(v101) = *(_DWORD *)&v94[3];
  *((double *)&v101 + 1) = v86;
  *(_QWORD *)&v102 = v85;
  BYTE8(v102) = v10;
  *(_DWORD *)((char *)&v102 + 9) = *(_DWORD *)v92;
  HIDWORD(v102) = *(_DWORD *)&v92[3];
  v103 = v81;
  v52 = v73;
  *(_QWORD *)&v104 = v73;
  BYTE8(v104) = v14;
  HIDWORD(v104) = *(_DWORD *)&v90[3];
  *(_DWORD *)((char *)&v104 + 9) = *(_DWORD *)v90;
  *(_QWORD *)&v105 = v82;
  LOBYTE(v10) = v74;
  BYTE8(v105) = v74;
  HIDWORD(v105) = *(_DWORD *)&v89[3];
  *(_DWORD *)((char *)&v105 + 9) = *(_DWORD *)v89;
  *(double *)&v106 = v27;
  *((_QWORD *)&v106 + 1) = v29;
  *(_QWORD *)&v107 = v31;
  *((_QWORD *)&v107 + 1) = v33;
  LOBYTE(v108) = (_BYTE)v80;
  *(_DWORD *)((char *)&v108 + 1) = *(_DWORD *)v98;
  DWORD1(v108) = *(_DWORD *)&v98[3];
  BYTE8(v108) = v84;
  *(_DWORD *)((char *)&v108 + 9) = *(_DWORD *)v97;
  HIDWORD(v108) = *(_DWORD *)&v97[3];
  *(double *)&v109 = v37;
  *((_QWORD *)&v109 + 1) = v39;
  *(_QWORD *)&v110 = v41;
  *((_QWORD *)&v110 + 1) = v43;
  LOBYTE(v111) = (_BYTE)v9;
  *(_DWORD *)((char *)&v111 + 1) = *(_DWORD *)v99;
  DWORD1(v111) = *(_DWORD *)&v99[3];
  *((_QWORD *)&v111 + 1) = v45;
  LOBYTE(v25) = v70;
  v112 = v70;
  v53 = v100;
  v54 = v101;
  v55 = v81;
  v56 = v71;
  *(_OWORD *)(v71 + 32) = v102;
  *(_OWORD *)(v56 + 48) = v55;
  *(_OWORD *)v56 = v53;
  *(_OWORD *)(v56 + 16) = v54;
  v57 = v104;
  v58 = v105;
  v59 = v107;
  *(_OWORD *)(v56 + 96) = v106;
  *(_OWORD *)(v56 + 112) = v59;
  *(_OWORD *)(v56 + 64) = v57;
  *(_OWORD *)(v56 + 80) = v58;
  v60 = v108;
  v61 = v109;
  v62 = v110;
  v63 = v111;
  *(_BYTE *)(v56 + 192) = v25;
  *(_OWORD *)(v56 + 160) = v62;
  *(_OWORD *)(v56 + 176) = v63;
  *(_OWORD *)(v56 + 128) = v60;
  *(_OWORD *)(v56 + 144) = v61;
  v64 = v56;
  v65 = sub_5C154(&qword_325B80);
  sub_5E1A4((uint64_t)v51, v64 + *(int *)(v65 + 48), &qword_325B70);
  sub_1457F4((uint64_t)&v100);
  sub_5E09C(v48, &qword_325B70);
  sub_5E09C((uint64_t)v51, &qword_325B70);
  v113 = *(double *)&v87;
  v114 = v83;
  v115 = v77;
  *(_DWORD *)v116 = *(_DWORD *)v94;
  *(_DWORD *)&v116[3] = *(_DWORD *)&v94[3];
  *(double *)&v117 = v86;
  *((_QWORD *)&v117 + 1) = v85;
  LOBYTE(v118) = v78;
  *(_DWORD *)((char *)&v118 + 1) = *(_DWORD *)v92;
  HIDWORD(v118) = *(_DWORD *)&v92[3];
  v119 = v81;
  v120 = v52;
  v121 = (char)v79;
  *(_DWORD *)&v122[3] = *(_DWORD *)&v90[3];
  *(_DWORD *)v122 = *(_DWORD *)v90;
  v123 = v82;
  v124 = v10;
  *(_DWORD *)&v125[3] = *(_DWORD *)&v89[3];
  *(_DWORD *)v125 = *(_DWORD *)v89;
  v126 = v27;
  v127 = v29;
  v128 = v31;
  v129 = v33;
  v130 = (char)v80;
  *(_DWORD *)v131 = *(_DWORD *)v98;
  *(_DWORD *)&v131[3] = *(_DWORD *)&v98[3];
  v132 = v84;
  *(_DWORD *)&v133[3] = *(_DWORD *)&v97[3];
  *(_DWORD *)v133 = *(_DWORD *)v97;
  v134 = v37;
  v135 = v39;
  v136 = v41;
  v137 = v43;
  v138 = (char)v9;
  *(_DWORD *)v139 = *(_DWORD *)v99;
  *(_DWORD *)&v139[3] = *(_DWORD *)&v99[3];
  v140 = v45;
  v141 = v25;
  return sub_145878((uint64_t)&v113);
}

double sub_144654@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x8000000000272280);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Font.footnote.getter(v3, v4);
  v11 = Text.font(_:)(v10, v3, v5, v9, v7);
  v35 = v12;
  v36 = v11;
  v14 = v13;
  v37 = v15;
  swift_release(v10);
  v34 = v14 & 1;
  sub_6693C(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v38[0] = sub_143DF4();
  v38[1] = v16;
  v17 = sub_668F8();
  v18 = Text.init<A>(_:)(v38, &type metadata for String, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v25 = static Font.caption.getter(v18, v19);
  v26 = Text.font(_:)(v25, v18, v20, v24, v22);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_release(v25);
  v30 &= 1u;
  sub_6693C(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  LOBYTE(v38[0]) = v34;
  *(_QWORD *)a1 = v36;
  *(_QWORD *)(a1 + 8) = v35;
  *(_BYTE *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = v37;
  *(_QWORD *)(a1 + 32) = v26;
  *(_QWORD *)(a1 + 40) = v28;
  *(_BYTE *)(a1 + 48) = v30;
  *(_QWORD *)(a1 + 56) = v32;
  sub_7BBCC(v36, v35, v34);
  swift_bridgeObjectRetain(v37);
  sub_7BBCC(v26, v28, v30);
  swift_bridgeObjectRetain(v32);
  sub_6693C(v26, v28, v30);
  swift_bridgeObjectRelease(v32);
  sub_6693C(v36, v35, v38[0]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v37).n128_u64[0];
  return result;
}

uint64_t sub_144844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t OpaqueTypeConformance2;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  char *v121;
  char *v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(char *, uint64_t);
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  _QWORD v163[4];

  v155 = a1;
  v153 = a2;
  v162 = type metadata accessor for SizeConstants.Spacing(0, a3);
  v143 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v161 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for SizeConstants(0);
  v141 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v159 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for AutomaticHoverEffect(0);
  v147 = *(char **)(v156 - 8);
  v5 = __chkstk_darwin(v156);
  v7 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BorderlessButtonStyle(0, v5);
  v146 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for PageErrorView(0);
  v11 = *(_QWORD *)(v140 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v140);
  v13 = sub_5C154(&qword_325B88);
  v145 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v121 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_5C154(&qword_325B90);
  v124 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v16 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_5C154(&qword_325B98);
  v139 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v150 = (char *)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v122 = (char *)&v120 - v19;
  v157 = sub_5C154(&qword_325BA0);
  __chkstk_darwin(v157);
  v148 = (char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v138 = (char *)&v120 - v22;
  v23 = sub_5C154(&qword_325BA8);
  __chkstk_darwin(v23);
  v152 = (uint64_t)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v151 = (uint64_t)&v120 - v26;
  __chkstk_darwin(v27);
  v149 = (uint64_t *)((char *)&v120 - v28);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v120 - v31;
  *(_QWORD *)v32 = static VerticalAlignment.center.getter(v30);
  *((_QWORD *)v32 + 1) = 0;
  v158 = v32;
  v32[16] = 1;
  sub_5E11C(v155, (uint64_t)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PageErrorView);
  v33 = *(unsigned __int8 *)(v11 + 80);
  v34 = (v33 + 16) & ~v33;
  v136 = v34 + v12;
  v135 = v33 | 7;
  v35 = swift_allocObject(&unk_2EE600, v34 + v12, v33 | 7);
  v137 = v34;
  v142 = (uint64_t)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v16;
  v37 = v121;
  sub_5E160(v142, v35 + v34, type metadata accessor for PageErrorView);
  v38 = sub_5C154(&qword_31F7B8);
  v39 = sub_66FDC();
  v134 = v38;
  v133 = v39;
  v40 = Button.init(action:label:)(sub_145900, v35, sub_145478, 0, v38);
  BorderlessButtonStyle.init()(v40);
  v41 = sub_67060(&qword_325BB0, &qword_325B88, (uint64_t)&protocol conformance descriptor for Button<A>);
  v42 = sub_648E0(&qword_325BB8, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  View.buttonStyle<A>(_:)(v10, v13, v8, v41, v42);
  v43 = *(void (**)(char *, uint64_t))(v146 + 8);
  v144 = v10;
  v129 = v43;
  v43(v10, v8);
  v128 = *(uint64_t (**)(char *, uint64_t))(v145 + 8);
  v44 = v128(v37, v13);
  static CustomHoverEffect<>.automatic.getter(v44);
  v145 = v13;
  v163[0] = v13;
  v163[1] = v8;
  v45 = v122;
  v146 = v8;
  v131 = v41;
  v163[2] = v41;
  v163[3] = v42;
  v130 = v42;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v163, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v47 = sub_648E0(&qword_321F80, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v48 = v154;
  v49 = v156;
  v127 = OpaqueTypeConformance2;
  v126 = v47;
  View.hoverEffect<A>(_:isEnabled:)(v7, 1, v154, v156, OpaqueTypeConformance2, v47);
  v50 = (void (*)(char *, uint64_t))*((_QWORD *)v147 + 1);
  v147 = v7;
  v125 = v50;
  v50(v7, v49);
  v124 = *(_QWORD *)(v124 + 8);
  v51 = ((uint64_t (*)(char *, uint64_t))v124)(v36, v48);
  v52 = static Edge.Set.top.getter(v51);
  v53 = v52;
  v54 = static Edge.Set.trailing.getter(v52);
  v55 = Edge.Set.init(rawValue:)(0);
  v56 = Edge.Set.init(rawValue:)(v55);
  if (Edge.Set.init(rawValue:)(v56 & v53) != v53)
    v55 = Edge.Set.init(rawValue:)(v55 | v53);
  v57 = Edge.Set.init(rawValue:)(v55);
  if (Edge.Set.init(rawValue:)(v57 & v54) == v54)
  {
    v58 = v132;
  }
  else
  {
    v58 = v132;
    LOBYTE(v55) = Edge.Set.init(rawValue:)(v55 | v54);
  }
  v132 = sub_5C154(&qword_325BC0);
  v59 = v159;
  v60 = (uint64_t)&v158[*(int *)(v132 + 44)];
  v61 = v155;
  v140 = v155 + *(int *)(v140 + 32);
  v62 = sub_76D64(v159);
  v63 = v161;
  SizeConstants.spacing.getter(v62);
  v141 = *(_QWORD *)(v141 + 8);
  v64 = ((uint64_t (*)(uint64_t, uint64_t))v141)(v59, v160);
  v65 = SizeConstants.Spacing.xs.getter(v64);
  v143 = *(_QWORD *)(v143 + 8);
  ((void (*)(char *, uint64_t))v143)(v63, v162);
  v66 = EdgeInsets.init(_all:)(v65);
  v68 = v67;
  v70 = v69;
  v72 = v71;
  v73 = v139;
  v74 = (uint64_t)v138;
  v75 = v58;
  v123 = *(void (**)(char *, char *, uint64_t))(v139 + 16);
  v123(v138, v45, v58);
  v76 = v74 + *(int *)(v157 + 36);
  *(_BYTE *)v76 = v55;
  *(double *)(v76 + 8) = v66;
  *(_QWORD *)(v76 + 16) = v68;
  *(_QWORD *)(v76 + 24) = v70;
  *(_QWORD *)(v76 + 32) = v72;
  *(_BYTE *)(v76 + 40) = 0;
  v77 = *(void (**)(char *, uint64_t))(v73 + 8);
  v77(v45, v58);
  sub_66F14(v74, v60, &qword_325BA0);
  v79 = static VerticalAlignment.center.getter(v78);
  v80 = (uint64_t)v149;
  *v149 = v79;
  *(_QWORD *)(v80 + 8) = 0;
  *(_BYTE *)(v80 + 16) = 1;
  v81 = v142;
  sub_5E11C(v61, v142, type metadata accessor for PageErrorView);
  v82 = swift_allocObject(&unk_2EE628, v136, v135);
  sub_5E160(v81, v82 + v137, type metadata accessor for PageErrorView);
  v83 = Button.init(action:label:)(sub_145910, v82, sub_145510, 0, v134);
  v84 = v144;
  BorderlessButtonStyle.init()(v83);
  v85 = v145;
  v86 = v146;
  View.buttonStyle<A>(_:)(v84, v145, v146, v131, v130);
  v129(v84, v86);
  v87 = v128(v37, v85);
  v88 = v147;
  static CustomHoverEffect<>.automatic.getter(v87);
  v89 = v150;
  v90 = v154;
  v91 = v156;
  View.hoverEffect<A>(_:isEnabled:)(v88, 1, v154, v156, v127, v126);
  v125(v88, v91);
  v92 = ((uint64_t (*)(char *, uint64_t))v124)(v36, v90);
  v93 = static Edge.Set.top.getter(v92);
  v94 = v93;
  v95 = static Edge.Set.trailing.getter(v93);
  v96 = Edge.Set.init(rawValue:)(0);
  v97 = Edge.Set.init(rawValue:)(v96);
  if (Edge.Set.init(rawValue:)(v97 & v94) != v94)
    v96 = Edge.Set.init(rawValue:)(v96 | v94);
  v98 = Edge.Set.init(rawValue:)(v96);
  if (Edge.Set.init(rawValue:)(v98 & v95) != v95)
    LOBYTE(v96) = Edge.Set.init(rawValue:)(v96 | v95);
  v99 = v80 + *(int *)(v132 + 44);
  v100 = v159;
  v101 = sub_76D64(v159);
  v102 = v161;
  SizeConstants.spacing.getter(v101);
  v103 = ((uint64_t (*)(uint64_t, uint64_t))v141)(v100, v160);
  v104 = SizeConstants.Spacing.xs.getter(v103);
  ((void (*)(char *, uint64_t))v143)(v102, v162);
  v105 = EdgeInsets.init(_all:)(v104);
  v107 = v106;
  v109 = v108;
  v111 = v110;
  v112 = (uint64_t)v148;
  v123(v148, v89, v75);
  v113 = v112 + *(int *)(v157 + 36);
  *(_BYTE *)v113 = v96;
  *(double *)(v113 + 8) = v105;
  *(_QWORD *)(v113 + 16) = v107;
  *(_QWORD *)(v113 + 24) = v109;
  *(_QWORD *)(v113 + 32) = v111;
  *(_BYTE *)(v113 + 40) = 0;
  v77(v89, v75);
  sub_66F14(v112, v99, &qword_325BA0);
  v114 = (uint64_t)v158;
  v115 = v151;
  sub_5E1A4((uint64_t)v158, v151, &qword_325BA8);
  v116 = v152;
  sub_5E1A4(v80, v152, &qword_325BA8);
  v117 = v153;
  sub_5E1A4(v115, v153, &qword_325BA8);
  v118 = sub_5C154(&qword_325BC8);
  sub_5E1A4(v116, v117 + *(int *)(v118 + 48), &qword_325BA8);
  sub_5E09C(v80, &qword_325BA8);
  sub_5E09C(v114, &qword_325BA8);
  sub_5E09C(v116, &qword_325BA8);
  return sub_5E09C(v115, &qword_325BA8);
}

uint64_t sub_14535C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];

  v2 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v4[2] = a1;
  withAnimation<A>(_:_:)(v2, sub_145958, v4, (char *)&type metadata for () + 8);
  return swift_release(v2);
}

uint64_t sub_1453C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PageErrorView(0) + 40) + 8);
  swift_retain(v1);
  v2 = sub_5C154(&qword_325B50);
  State.wrappedValue.getter(&v5, v2);
  v4 = (v5 & 1) == 0;
  State.wrappedValue.setter(&v4, v2);
  return swift_release(v1);
}

uint64_t sub_145478@<X0>(uint64_t *a1@<X8>)
{
  return sub_14552C(0xD000000000000011, 0x800000000026FDF0, a1);
}

void sub_145494()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v0 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  sub_143DF4();
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setString:", v3, swift_bridgeObjectRelease(v2).n128_f64[0]);

}

uint64_t sub_145510@<X0>(uint64_t *a1@<X8>)
{
  return sub_14552C(0xD000000000000010, 0x8000000000272260, a1);
}

uint64_t sub_14552C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  v4 = Image.init(systemName:)(a1, a2);
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v6 = Color.init(_:)(v5);
  result = swift_getKeyPath(&unk_2608F0);
  *a3 = v4;
  a3[1] = result;
  a3[2] = v6;
  return result;
}

uint64_t sub_1455A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1455C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1455F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_145618@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_145640(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_145668(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_145690@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1456B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1456E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_14570C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_145734(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_145758(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

void sub_14577C(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.m.getter();
}

void sub_1457A4(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.l.getter();
}

void sub_1457CC(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.xl.getter();
}

uint64_t sub_1457F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 184);
  sub_7BBCC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_7BBCC(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_145878(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 184);
  sub_6693C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_6693C(v3, v4, v5);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_145900()
{
  return sub_14591C(sub_14535C);
}

uint64_t sub_145910()
{
  return sub_14591C((uint64_t (*)(uint64_t))sub_145494);
}

uint64_t sub_14591C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageErrorView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_145958()
{
  uint64_t v0;

  return sub_1453C8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_145974()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for PageErrorView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_errorRelease(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  v7 = (_QWORD *)(v0 + v4 + v1[8]);
  v8 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[9]);
  v11 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v13 = type metadata accessor for FontConstants(0, v12);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10, v13);
  }
  else
  {
    swift_release(*v10);
  }
  swift_release(*(_QWORD *)(v6 + v1[10] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_145AA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageErrorView(0) - 8) + 80);
  return (*(uint64_t (**)(void))(v0 + ((v1 + 16) & ~v1) + 16))();
}

unint64_t sub_145AE8()
{
  unint64_t result;

  result = qword_325BE0;
  if (!qword_325BE0)
  {
    result = swift_getWitnessTable(&unk_260760, &type metadata for PageError);
    atomic_store(result, (unint64_t *)&qword_325BE0);
  }
  return result;
}

unint64_t sub_145B2C()
{
  unint64_t result;

  result = qword_325BE8;
  if (!qword_325BE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_325BE8);
  }
  return result;
}

unint64_t sub_145B70(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

uint64_t sub_145B80(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  char v22;
  char v23;
  _BYTE v24[7];
  unsigned __int8 v25;
  uint64_t v26;

  v2 = sub_5C154(&qword_325BF0);
  v3 = __chkstk_darwin(v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for JSError(0, v3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v24[-v11];
  v26 = a1;
  swift_errorRetain(a1);
  v13 = sub_5C154((uint64_t *)&unk_321CD0);
  if (swift_dynamicCast(&v25, &v26, v13, &type metadata for PageError, 0))
  {
    swift_errorRelease(a1);
    v14 = v25;
LABEL_3:
    swift_errorRelease(v26);
    return v14;
  }
  swift_errorRelease(v26);
  v26 = a1;
  swift_errorRetain(a1);
  if (swift_dynamicCast(v12, &v26, v13, v6, 0))
  {
    v15 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v12, v6);
    JSError.userInfo.getter(v15);
    v16 = type metadata accessor for ScalarDictionary(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) == 1)
    {
      swift_errorRelease(a1);
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
      sub_5E09C((uint64_t)v5, &qword_325BF0);
      v14 = 2;
    }
    else
    {
      v21 = ScalarDictionary.subscript.getter(1701869940, 0xE400000000000000);
      v23 = v22;
      swift_errorRelease(a1);
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
      (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v5, v16);
      v14 = 2;
      if ((v23 & 1) == 0)
      {
        if (v21 >= 6)
          v14 = 2;
        else
          v14 = v21;
      }
    }
    goto LABEL_3;
  }
  v18 = swift_errorRelease(v26);
  v26 = a1;
  v19 = swift_dynamicCast(v18, &v26, v13, &type metadata for SeriesInfoError, 0);
  swift_errorRelease(v26);
  if (v19)
    return 0;
  else
    return 2;
}

unint64_t sub_145DEC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_325BF8;
  if (!qword_325BF8)
  {
    v1 = sub_667D0(&qword_325AE0);
    v2[0] = sub_667D0(&qword_325AD0);
    v2[1] = sub_67060(&qword_325AF0, &qword_325AD0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
    sub_648E0(&qword_3254C8, type metadata accessor for PageViewEventViewModifier, (uint64_t)&unk_25FD68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_325BF8);
  }
  return result;
}

uint64_t *sub_145EB8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PageData(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v7 + v13) = v14;
    swift_bridgeObjectRetain(v14);
  }
  return v7;
}

uint64_t sub_145F78(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 28)));
}

uint64_t *sub_145FD4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PageData(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v13 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t *sub_14606C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v12 = a3[7];
  v13 = *(uint64_t *)((char *)a2 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

_QWORD *sub_146110(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  return a1;
}

uint64_t *sub_146190(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v12 = *(uint64_t *)((char *)a1 + v11);
  *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_146220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14622C);
}

uint64_t sub_14622C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PageData(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1462A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1462B4);
}

char *sub_1462B4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PageData(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for YearInReviewPage(uint64_t a1)
{
  uint64_t result;

  result = qword_325C58;
  if (!qword_325C58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for YearInReviewPage);
  return result;
}

uint64_t sub_146364(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for PageData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1463EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v7 = UUID.init()(v6);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease(v17);
  v16 = v8;
  v17 = v10;
  v11._countAndFlagsBits = 0x746C75616665642DLL;
  v11._object = (void *)0xEF7265646165682DLL;
  String.append(_:)(v11);
  AnyHashable.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
  v12 = type metadata accessor for DefaultHeaderComponentModel(0);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v13 = a1 + *(int *)(v12 + 24);
  v14 = type metadata accessor for ImpressionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
}

uint64_t type metadata accessor for DefaultHeaderComponentModel(uint64_t a1)
{
  return sub_64960(a1, qword_325CF0, (uint64_t)&nominal type descriptor for DefaultHeaderComponentModel);
}

uint64_t sub_14654C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_146558);
}

uint64_t sub_146558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1465D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1465E4);
}

uint64_t sub_1465E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_31F480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_14665C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = &unk_260A68;
  sub_8C25C(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1466F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1466FC);
}

uint64_t sub_1466FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3201B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_14673C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_146748);
}

uint64_t sub_146748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3201B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DefaultHeaderComponent(uint64_t a1)
{
  return sub_64960(a1, qword_325D88, (uint64_t)&nominal type descriptor for DefaultHeaderComponent);
}

uint64_t sub_1467A0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0(&qword_325DC0, type metadata accessor for DefaultHeaderComponent, (uint64_t)&unk_260B50);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_1467F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_146920(v5, (uint64_t)v4);
  v6 = sub_648E0(&qword_325DC0, type metadata accessor for DefaultHeaderComponent, (uint64_t)&unk_260B50);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_14688C()
{
  return sub_648E0(&qword_325DC8, type metadata accessor for DefaultHeaderComponentModel, (uint64_t)&unk_260AE8);
}

uint64_t sub_1468B8()
{
  return sub_648E0(&qword_325DD0, type metadata accessor for DefaultHeaderComponent, (uint64_t)&unk_260A98);
}

uint64_t sub_1468E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B80B0, 1);
}

uint64_t sub_1468F4()
{
  return sub_648E0(&qword_325DD8, type metadata accessor for DefaultHeaderComponentModel, (uint64_t)&unk_260B10);
}

uint64_t sub_146920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultHeaderComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s14WantToReadMenuVwxx(uint64_t a1)
{
  _QWORD *v2;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v2 = (_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v2);
  else
    return swift_release(*v2);
}

uint64_t _s14WantToReadMenuVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (uint64_t *)(a1 + 40);
  v6 = (uint64_t *)(a2 + 40);
  v7 = *(_BYTE *)(a2 + 80);
  if ((v7 & 1) != 0)
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v8;
    (**(void (***)(uint64_t *, uint64_t *))(v8 - 8))(v5, v6);
  }
  else
  {
    v9 = *v6;
    *v5 = *v6;
    swift_retain(v9);
  }
  *(_BYTE *)(a1 + 80) = v7;
  return a1;
}

uint64_t _s14WantToReadMenuVwca(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  if (a1 != a2)
  {
    v4 = (uint64_t *)(a2 + 40);
    sub_5E09C(a1 + 40, &qword_3202F0);
    if ((*(_BYTE *)(a2 + 80) & 1) != 0)
    {
      v5 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v5;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
      *(_BYTE *)(a1 + 80) = 1;
    }
    else
    {
      v6 = *v4;
      *(_QWORD *)(a1 + 40) = *v4;
      *(_BYTE *)(a1 + 80) = 0;
      swift_retain(v6);
    }
  }
  return a1;
}

__n128 _s14WantToReadMenuVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s14WantToReadMenuVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    sub_5E09C(a1 + 40, &qword_3202F0);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  return a1;
}

uint64_t _s14WantToReadMenuVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s14WantToReadMenuVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s14WantToReadMenuVMa()
{
  return &_s14WantToReadMenuVN;
}

uint64_t sub_146BF8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B8118, 1);
}

_QWORD *sub_146C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t KeyPath;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v4 = _swiftEmptyArrayStorage;
  do
  {
    KeyPath = swift_getKeyPath(&unk_260CA0);
    swift_getAtKeyPath(v3, KeyPath);
    swift_release(KeyPath);
    if (v11)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_572E4(0, v4[2] + 1, 1, v4);
      v8 = v4[2];
      v7 = v4[3];
      if (v8 >= v7 >> 1)
        v4 = sub_572E4((_QWORD *)(v7 > 1), v8 + 1, 1, v4);
      v4[2] = v8 + 1;
      v5 = &v4[2 * v8];
      v5[4] = v10;
      v5[5] = v11;
    }
    v3 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(a1);
  return v4;
}

uint64_t sub_146D34@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[6];
  _QWORD v19[2];

  v2 = v1;
  v4 = v1[3];
  v5 = v2[4];
  sub_66898(v2, v4);
  v6 = AssetInfo.featuredEditions.getter(v4, v5);
  if (v6)
  {
    v7 = v6;
    v8 = v2[3];
    v9 = v2[4];
    sub_66898(v2, v8);
    if ((AssetInfo.supportsUnifiedProductPage.getter(v8, v9) & 1) != 0)
    {
      v10 = sub_146EF8(v2);
      v19[0] = sub_17EB50();
      v19[1] = v11;
      __chkstk_darwin(v19[0]);
      v18[2] = v7;
      v18[3] = v10;
      v18[4] = v2;
      v12 = sub_5C154(&qword_325DE8);
      v13 = sub_148440();
      v14 = sub_668F8();
      Section<>.init<A>(_:content:)(v19, sub_148434, v18, v12, &type metadata for String, v13, v14);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v7);
      v15 = sub_5C154(&qword_325DE0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 0, 1, v15);
    }
    swift_bridgeObjectRelease(v7);
  }
  v17 = sub_5C154(&qword_325DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 1, 1, v17);
}

uint64_t sub_146EF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v1 = a1[3];
  v2 = a1[4];
  sub_66898(a1, v1);
  v3 = AssetInfo.featuredEditions.getter(v1, v2);
  if (v3)
  {
    v4 = v3;
    v5 = sub_146C08(v3);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5 = _swiftEmptyArrayStorage;
  }
  v6 = (_QWORD *)sub_53348((uint64_t)_swiftEmptyArrayStorage);
  v7 = v5[2];
  if (v7)
  {
    swift_bridgeObjectRetain(v5);
    v8 = v5 + 5;
    while (1)
    {
      v10 = *(v8 - 1);
      v9 = *v8;
      swift_bridgeObjectRetain_n(*v8, 2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
      v13 = sub_582B4(v10, v9);
      v14 = v6[2];
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        break;
      v17 = v12;
      if (v6[3] >= v16)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_5AF8C();
      }
      else
      {
        sub_13B53C(v16, isUniquelyReferenced_nonNull_native);
        v18 = sub_582B4(v10, v9);
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_22;
        v13 = v18;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      if ((v17 & 1) == 0)
      {
        v6[(v13 >> 6) + 8] |= 1 << v13;
        v20 = (uint64_t *)(v6[6] + 16 * v13);
        *v20 = v10;
        v20[1] = v9;
        *(_QWORD *)(v6[7] + 8 * v13) = 0;
        v21 = v6[2];
        v22 = __OFADD__(v21, 1);
        v23 = v21 + 1;
        if (v22)
          goto LABEL_21;
        v6[2] = v23;
        swift_bridgeObjectRetain(v9);
      }
      v24 = v6[7];
      v25 = *(_QWORD *)(v24 + 8 * v13);
      v22 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v22)
        goto LABEL_20;
      v8 += 2;
      *(_QWORD *)(v24 + 8 * v13) = v26;
      swift_bridgeObjectRelease_n(v9, 2);
      if (!--v7)
      {
        swift_bridgeObjectRelease(v5);
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_1470F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v23;
  _OWORD v24[5];
  char v25;

  v6 = sub_5C154(&qword_325E08);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v24[0] = a1;
  swift_bridgeObjectRetain(a1);
  v9 = sub_5C154(&qword_325E10);
  v10 = sub_67060(&qword_325E18, &qword_325E10, (uint64_t)&protocol conformance descriptor for [A]);
  IndexedRandomAccessCollection.init(_:)(v24, v9, v10);
  KeyPath = swift_getKeyPath(&unk_260C20);
  sub_148580(a3, (uint64_t)v24);
  v12 = swift_allocObject(&unk_2EE8B0, 105, 7);
  *(_QWORD *)(v12 + 16) = a2;
  v13 = v24[3];
  *(_OWORD *)(v12 + 56) = v24[2];
  *(_OWORD *)(v12 + 72) = v13;
  *(_OWORD *)(v12 + 88) = v24[4];
  *(_BYTE *)(v12 + 104) = v25;
  v14 = v24[1];
  *(_OWORD *)(v12 + 24) = v24[0];
  *(_OWORD *)(v12 + 40) = v14;
  v15 = swift_allocObject(&unk_2EE8D8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1485FC;
  *(_QWORD *)(v15 + 24) = v12;
  swift_bridgeObjectRetain(a2);
  v16 = sub_5C154(&qword_325E20);
  v17 = sub_67060(&qword_325E28, &qword_325E08, (uint64_t)&protocol conformance descriptor for IndexedRandomAccessCollection<A>);
  v18 = sub_667D0(&qword_325DF8);
  v19 = sub_1484EC();
  *(_QWORD *)&v24[0] = &_s18WantToReadMenuItemVN;
  *((_QWORD *)&v24[0] + 1) = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v24, &opaque type descriptor for <<opaque return type of View.figaroLocationPositionOverride(_:)>>, 1);
  *(_QWORD *)&v24[0] = v18;
  *((_QWORD *)&v24[0] + 1) = OpaqueTypeConformance2;
  v21 = swift_getOpaqueTypeConformance2(v24, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetState(for:libraryAssetStateObserverProvider:)>>, 1);
  return ForEach<>.init(_:id:content:)(v8, KeyPath, sub_F0BCC, v15, v6, v16, v17, &protocol witness table for String, v21);
}

uint64_t sub_14730C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  _QWORD v27[2];
  _QWORD v28[5];
  BOOL v29;
  uint64_t KeyPath;
  char v31;

  v6 = sub_5C154(&qword_325DF8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2[3];
  v11 = a2[4];
  sub_66898(a2, v10);
  v12 = AssetInfo.editionKind.getter(v10, v11);
  if (v13)
    v14 = v13;
  else
    v14 = 0xE000000000000000;
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_9;
  if (!v13)
    v12 = 0;
  v15 = sub_582B4(v12, v14);
  if ((v16 & 1) != 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v15);
    swift_bridgeObjectRelease(v14);
    v18 = v17 > 1;
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(v14);
    v18 = 0;
  }
  sub_5E0D8((uint64_t)a2, (uint64_t)v28);
  v29 = v18;
  KeyPath = swift_getKeyPath(&unk_260C60);
  v31 = 0;
  v19 = sub_1484EC();
  View.figaroLocationPositionOverride(_:)(a1, &_s18WantToReadMenuItemVN, v19);
  sub_148634((uint64_t)v28);
  v20 = a2[3];
  v21 = a2[4];
  sub_66898(a2, v20);
  v22 = ContentInfo.id.getter(v20, *(_QWORD *)(v21 + 8));
  v24 = v23;
  sub_789DC((uint64_t)v28);
  v27[0] = &_s18WantToReadMenuItemVN;
  v27[1] = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v27, &opaque type descriptor for <<opaque return type of View.figaroLocationPositionOverride(_:)>>, 1);
  View.observeLibraryAssetState(for:libraryAssetStateObserverProvider:)(v22, v24, v28, v6, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v24);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v28);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1474FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  __n128 v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;

  v2 = v1;
  v110 = a1;
  v3 = type metadata accessor for UUID(0);
  v108 = *(_QWORD *)(v3 - 8);
  v109 = v3;
  __chkstk_darwin(v3);
  v107 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_31F590);
  v6 = __chkstk_darwin(v5);
  v106 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for Metrics.LocationType(0, v6);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v111 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_324BD0);
  v10 = __chkstk_darwin(v9);
  v97 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for Metrics.Location(0, v10);
  v102 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v101 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_321470);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Metrics.TargetType(0, v14);
  v113 = *(_QWORD *)(v17 - 8);
  v114 = v17;
  __chkstk_darwin(v17);
  v112 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ActionMetrics(0);
  v20 = __chkstk_darwin(v19);
  v115 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for AssetAction.Kind(0, v20);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v98 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v91 - v25;
  v27 = type metadata accessor for Metrics.ClickActionType(0, v24);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v91 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v1 + 24);
  v32 = *(_QWORD *)(v1 + 32);
  sub_66898((_QWORD *)v1, v31);
  v96 = ContentInfo.id.getter(v31, *(_QWORD *)(v32 + 8));
  v34 = v33;
  v35 = *(_QWORD *)(v1 + 48);
  v36 = *(_BYTE *)(v1 + 56);
  sub_64DD8(*(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56));
  LOBYTE(v32) = sub_768E8(v35, v36);
  sub_64FFC(v35, v36);
  v37 = (unsigned int *)&enum case for Metrics.ClickActionType.removeFromWantToRead(_:);
  v99 = v28;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 104);
  v39 = v30;
  if ((v32 & 1) == 0)
    v37 = (unsigned int *)&enum case for Metrics.ClickActionType.addToWantToRead(_:);
  v40 = *v37;
  v100 = v27;
  v38(v30, v40, v27);
  sub_64DD8(v35, v36);
  v41 = sub_768E8(v35, v36);
  sub_64FFC(v35, v36);
  if ((v41 & 1) != 0)
    static AssetAction.Kind.removeFromWantToRead(presentNotice:useNonSpecificDeterminerInMessage:)(1, 1);
  else
    static AssetAction.Kind.addToWantToRead(presentNotice:useNonSpecificDeterminerInMessage:)(1, 1);
  v92 = v26;
  v42 = *(_QWORD *)(v2 + 24);
  v43 = *(_QWORD *)(v2 + 32);
  sub_66898((_QWORD *)v2, v42);
  v93 = AssetInfo.isExplicit.getter(v42, v43);
  (*(void (**)(char *, _QWORD, uint64_t))(v113 + 104))(v112, enum case for Metrics.TargetType.button(_:), v114);
  v44 = static Metrics.actionDetails(for:assetInfo:)(v30, v2);
  v45 = *(_QWORD *)(v2 + 24);
  v46 = *(_QWORD *)(v2 + 32);
  sub_66898((_QWORD *)v2, v45);
  AssetInfo.sharableURL.getter(v45, v46);
  v47 = type metadata accessor for URL(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v16, 1, v47);
  v50 = v97;
  if ((_DWORD)v49 == 1)
  {
    sub_5E09C((uint64_t)v16, &qword_321470);
    v91 = 0;
    v51 = 0;
  }
  else
  {
    v91 = URL.absoluteString.getter(v49);
    v51 = v52;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v16, v47);
  }
  v53 = type metadata accessor for Metrics.IdType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v50, 1, 1, v53);
  v54 = v111;
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v111, enum case for Metrics.LocationType.button(_:), v95);
  v55 = *(_QWORD *)(v2 + 48);
  v56 = *(_BYTE *)(v2 + 56);
  swift_bridgeObjectRetain(v34);
  sub_64DD8(v55, v56);
  v57 = sub_768E8(v55, v56);
  sub_64FFC(v55, v56);
  if ((v57 & 1) != 0)
  {
    v58 = _s11BookStoreUI26ContextActionStringBuilderV31removeEditionKindFromWantToRead3forSS0A10Foundation9AssetInfo_p_tFZ_0((_QWORD *)v2);
    v60 = v59;
  }
  else
  {
    v61 = *(_QWORD *)(v2 + 24);
    v62 = *(_QWORD *)(v2 + 32);
    sub_66898((_QWORD *)v2, v61);
    v63 = dispatch thunk of AssetInfo.assetType.getter(v61, v62);
    static AssetType.== infix(_:_:)(v63, 0);
    v58 = sub_17EB50();
    v60 = v64;
    v65 = *(_QWORD *)(v2 + 24);
    v66 = *(_QWORD *)(v2 + 32);
    sub_66898((_QWORD *)v2, v65);
    v67 = AssetInfo.editionKind.getter(v65, v66);
    if (v68)
    {
      v69 = v67;
      v70 = v68;
      swift_bridgeObjectRelease(v60);
      v58 = v69;
      v60 = v70;
    }
    v54 = v111;
  }
  v90 = v60;
  v71 = v101;
  v72 = v96;
  Metrics.Location.init(adamId:artistName:fcKind:id:idType:isSG:kind:locationPosition:locationType:name:narratorName:)(v96, v34, 0, 0, 0, 0, 0, 0, v50, 0, 0, 0, 0, v54, v58, v90, 0, 0);
  v73 = v112;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v72, v34, v112, v39, v44, v91, v51, v71);
  swift_bridgeObjectRelease(v51);
  v74 = swift_bridgeObjectRelease(v44);
  (*(void (**)(char *, uint64_t, __n128))(v102 + 8))(v71, v104, v74);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v73, v114);
  v75 = v103;
  v76 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  v77 = v98;
  v78 = v92;
  v114 = (uint64_t)v39;
  v79 = v105;
  v76(v98, v92, v105);
  v80 = type metadata accessor for ClickData(0);
  v81 = v106;
  v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v106, 1, 1, v80);
  v83 = v107;
  v84 = UUID.init()(v82);
  v85 = UUID.uuidString.getter(v84);
  v87 = v86;
  (*(void (**)(char *, uint64_t))(v108 + 8))(v83, v109);
  v88 = swift_bridgeObjectRetain(v34);
  AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v85, v87, v72, v34, v72, v34, v93 & 1, v115, v88, v77, v81);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v79);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v114, v100);
}

uint64_t sub_147C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v4[2] = a1;
  v1 = sub_5C154(&qword_325E60);
  v2 = sub_67060(&qword_325E68, &qword_325E60, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return LabelGroup.init(content:)(sub_148A60, v4, v1, v2);
}

uint64_t sub_147CDC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  uint64_t *v24;
  double v25;
  void (*v26)(_BYTE *, uint64_t, double);
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;

  v4 = sub_5C154(&qword_325E70);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v10 = &v28[-v9];
  __chkstk_darwin(v11);
  v13 = &v28[-v12];
  v30 = a1;
  v29 = a1;
  type metadata accessor for FlatCoverView(0);
  sub_648E0(&qword_325E78, (uint64_t (*)(uint64_t))&type metadata accessor for FlatCoverView, (uint64_t)&protocol conformance descriptor for FlatCoverView);
  Label.init(title:icon:)(sub_148A68, v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v13, v10, v4);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    sub_66898((_QWORD *)a1, v18);
    v20 = dispatch thunk of AssetInfo.assetType.getter(v18, v19);
    if (v20)
    {
      if (v20 != 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        goto LABEL_16;
      }
      v21 = _s11BookStoreUI26ContextActionStringBuilderV011publishedByF03forSSSg0A10Foundation9AssetInfo_p_tFZ_0((_QWORD *)a1);
    }
    else
    {
      v21 = _s11BookStoreUI26ContextActionStringBuilderV010narratedByF03forSSSg0A10Foundation9AssetInfo_p_tFZ_0(a1);
    }
    if (v22)
      v15 = v21;
    else
      v15 = 0;
    if (v22)
      v16 = v22;
    else
      v16 = 0;
    if (v22)
      v17 = _swiftEmptyArrayStorage;
    else
      v17 = 0;
  }
LABEL_16:
  v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v23(v7, v13, v4);
  v23(a2, v7, v4);
  v24 = (uint64_t *)&a2[*(int *)(sub_5C154(&qword_325E80) + 48)];
  *v24 = v15;
  v24[1] = v16;
  v24[2] = 0;
  v24[3] = (uint64_t)v17;
  v25 = sub_9BA0C(v15, v16, 0, (uint64_t)v17);
  v26 = *(void (**)(_BYTE *, uint64_t, double))(v5 + 8);
  v26(v13, v4, v25);
  sub_9BA3C(v15, v16, 0, (uint64_t)v17);
  return ((uint64_t (*)(_BYTE *, uint64_t))v26)(v7, v4);
}

void sub_147F1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  sub_64DD8(v4, v5);
  v6 = sub_768E8(v4, v5);
  sub_64FFC(v4, v5);
  if ((v6 & 1) != 0)
  {
    v7 = _s11BookStoreUI26ContextActionStringBuilderV31removeEditionKindFromWantToRead3forSS0A10Foundation9AssetInfo_p_tFZ_0((_QWORD *)a1);
    v9 = v8;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    sub_66898((_QWORD *)a1, v10);
    v12 = dispatch thunk of AssetInfo.assetType.getter(v10, v11);
    static AssetType.== infix(_:_:)(v12, 0);
    v7 = sub_17EB50();
    v9 = v13;
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 32);
    sub_66898((_QWORD *)a1, v14);
    v16 = AssetInfo.editionKind.getter(v14, v15);
    if (v17)
    {
      v18 = v16;
      v19 = v17;
      swift_bridgeObjectRelease(v9);
      v7 = v18;
      v9 = v19;
    }
  }
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = _swiftEmptyArrayStorage;
}

uint64_t sub_148048@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __n128 v12;
  _BYTE v15[40];

  v4 = type metadata accessor for FlatCoverView(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_5E0D8((uint64_t)a1, (uint64_t)v15);
  v8 = a1[3];
  v9 = a1[4];
  sub_66898(a1, v8);
  v10 = dispatch thunk of AssetInfo.assetType.getter(v8, v9);
  v11 = static AssetType.== infix(_:_:)(v10, 0);
  v12.n128_u64[0] = 26.0;
  if ((v11 & 1) == 0)
    v12.n128_f64[0] = 40.0;
  FlatCoverView.init(assetInfo:intrinsicSize:cornerRadius:)(v15, 26.0, v12, 2.5);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t sub_148130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v1 = v0;
  v2 = sub_5C154(&qword_321D30);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_148664(v1, (uint64_t)v4);
  v5 = type metadata accessor for LibraryAssetState(0);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_5E09C((uint64_t)v4, &qword_321D30);
    v7 = 0;
  }
  else
  {
    v7 = LibraryAssetState.isInWantToRead.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  return v7 & 1;
}

uint64_t sub_1481FC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;

  v4 = sub_5C154(&qword_321D30);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_148664(a1, (uint64_t)v6);
  v7 = type metadata accessor for LibraryAssetState(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    result = sub_5E09C((uint64_t)v6, &qword_321D30);
    v10 = 0;
  }
  else
  {
    v10 = LibraryAssetState.isInWantToRead.getter();
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  *a2 = v10 & 1;
  return result;
}

uint64_t sub_1482D8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[2];
  _OWORD v14[2];
  _QWORD v15[5];

  v1 = sub_5C154(&qword_3261F0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ButtonRole(0, v2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v15[3] = type metadata accessor for AssetAction(0);
  v15[4] = sub_648E0(&qword_325E48, (uint64_t (*)(uint64_t))&type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
  v6 = sub_668BC(v15);
  sub_1474FC((uint64_t)v6);
  sub_1489F4(v0, (uint64_t)v13);
  v7 = (_OWORD *)swift_allocObject(&unk_2EE988, 73, 7);
  v8 = v13[1];
  v7[1] = v13[0];
  v7[2] = v8;
  v7[3] = v14[0];
  *(_OWORD *)((char *)v7 + 57) = *(_OWORD *)((char *)v14 + 9);
  v9 = sub_5C154(&qword_325E50);
  v10 = sub_67060(&qword_325E58, &qword_325E50, (uint64_t)&protocol conformance descriptor for LabelGroup<A>);
  return BooksActionButton.init(role:action:label:)(v4, v15, sub_148A58, v7, v9, v10);
}

uint64_t sub_148434()
{
  uint64_t *v0;

  return sub_1470F4(v0[2], v0[3], v0[4]);
}

unint64_t sub_148440()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  ValueMetadata *v4;
  unint64_t v5;

  result = qword_325DF0;
  if (!qword_325DF0)
  {
    v1 = sub_667D0(&qword_325DE8);
    v2 = sub_667D0(&qword_325DF8);
    v4 = &_s18WantToReadMenuItemVN;
    v5 = sub_1484EC();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.figaroLocationPositionOverride(_:)>>, 1);
    v4 = (ValueMetadata *)v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetState(for:libraryAssetStateObserverProvider:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_325DF0);
  }
  return result;
}

unint64_t sub_1484EC()
{
  unint64_t result;

  result = qword_325E00;
  if (!qword_325E00)
  {
    result = swift_getWitnessTable(&unk_260D00, &_s18WantToReadMenuItemVN);
    atomic_store(result, (unint64_t *)&qword_325E00);
  }
  return result;
}

uint64_t sub_148530(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_148538@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  result = ContentInfo.id.getter(v3, *(_QWORD *)(v4 + 8));
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_148580(uint64_t a1, uint64_t a2)
{
  _s14WantToReadMenuVwcp(a2, a1);
  return a2;
}

uint64_t sub_1485B4()
{
  uint64_t v0;
  _QWORD *v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 24));
  v1 = (_QWORD *)(v0 + 64);
  if ((*(_BYTE *)(v0 + 104) & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1);
  else
    swift_release(*v1);
  return swift_deallocObject(v0, 105, 7);
}

uint64_t sub_1485FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_14730C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_148608()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_148634(uint64_t a1)
{
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  sub_64FFC(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return a1;
}

uint64_t sub_148664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_321D30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1486AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  result = AssetInfo.editionKind.getter(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t _s18WantToReadMenuItemVwxx(uint64_t a1)
{
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  return sub_64FFC(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t _s18WantToReadMenuItemVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = a2;
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_64DD8(v5, v2);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v2;
  return a1;
}

uint64_t _s18WantToReadMenuItemVwca(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = a2;
  sub_65938((_QWORD *)a1, a2);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v2 + 40);
  v4 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  sub_64DD8(v4, (char)v2);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  sub_64FFC(v5, v6);
  return a1;
}

__n128 _s18WantToReadMenuItemVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s18WantToReadMenuItemVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  char v7;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v5;
  sub_64FFC(v6, v7);
  return a1;
}

uint64_t _s18WantToReadMenuItemVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s18WantToReadMenuItemVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s18WantToReadMenuItemVMa()
{
  return &_s18WantToReadMenuItemVN;
}

unint64_t sub_148908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_325E30;
  if (!qword_325E30)
  {
    v1 = sub_667D0(&qword_325E38);
    sub_14896C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_325E30);
  }
  return result;
}

unint64_t sub_14896C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_325E40;
  if (!qword_325E40)
  {
    v1 = sub_667D0(&qword_325DE0);
    sub_148440();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_325E40);
  }
  return result;
}

uint64_t sub_1489E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B8140, 1);
}

uint64_t sub_1489F4(uint64_t a1, uint64_t a2)
{
  _s18WantToReadMenuItemVwcp(a2, a1);
  return a2;
}

uint64_t sub_148A28()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  sub_64FFC(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_148A58()
{
  uint64_t v0;

  return sub_147C64(v0 + 16);
}

uint64_t sub_148A60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_147CDC(*(_QWORD *)(v1 + 16), a1);
}

void sub_148A68(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_147F1C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_148A70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_148048(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_148A78()
{
  return sub_67060(&qword_325E88, (uint64_t *)&unk_325E90, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
}

uint64_t static ContextActionStringBuilder.editionKindTitle(for:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[4];
  sub_66898(a1, v2);
  v4 = dispatch thunk of AssetInfo.assetType.getter(v2, v3);
  static AssetType.== infix(_:_:)(v4, 0);
  v5 = sub_17EB50();
  v7 = v6;
  v8 = a1[3];
  v9 = a1[4];
  sub_66898(a1, v8);
  v10 = AssetInfo.editionKind.getter(v8, v9);
  if (v11)
  {
    v12 = v10;
    swift_bridgeObjectRelease(v7);
    return v12;
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = a1[3];
  v3 = a1[4];
  sub_66898(a1, v2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 344))(&v18, v2, v3);
  if (v19)
  {
    sub_5DC98(&v18, (uint64_t)v20);
    v4 = v21;
    v5 = v22;
    sub_66898(v20, v21);
    v6 = dispatch thunk of AssetInfo.assetType.getter(v4, v5);
    static AssetType.== infix(_:_:)(v6, 0);
    v9 = sub_17EB50();
    v11 = v10;
    v12 = v21;
    v13 = v22;
    sub_66898(v20, v21);
    v14 = AssetInfo.editionKind.getter(v12, v13);
    if (v15)
    {
      v16 = v14;
      swift_bridgeObjectRelease(v11);
      v9 = v16;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v20);
  }
  else
  {
    sub_5E09C((uint64_t)&v18, &qword_320940);
    v7 = a1[3];
    v8 = a1[4];
    sub_66898(a1, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  }
  return v9;
}

uint64_t static ContextActionStringBuilder.narratedByString(for:)(_QWORD *a1)
{
  return sub_148CF0(a1, (uint64_t (*)(_QWORD *))_s11BookStoreUI26ContextActionStringBuilderV010narratedByF03forSSSg0A10Foundation9AssetInfo_p_tFZ_0);
}

uint64_t static ContextActionStringBuilder.publishedByString(for:)(_QWORD *a1)
{
  return sub_148CF0(a1, _s11BookStoreUI26ContextActionStringBuilderV011publishedByF03forSSSg0A10Foundation9AssetInfo_p_tFZ_0);
}

uint64_t sub_148CF0(_QWORD *a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[5];

  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 344))(&v7, v3, v4);
  if (v8)
  {
    sub_5DC98(&v7, (uint64_t)v9);
    v5 = a2(v9);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v9);
  }
  else
  {
    sub_5E09C((uint64_t)&v7, &qword_320940);
    return 0;
  }
  return v5;
}

uint64_t _s11BookStoreUI26ContextActionStringBuilderV31removeEditionKindFromWantToRead3forSS0A10Foundation9AssetInfo_p_tFZ_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1[3];
  v3 = a1[4];
  sub_66898(a1, v2);
  v4 = dispatch thunk of AssetInfo.assetType.getter(v2, v3);
  static AssetType.== infix(_:_:)(v4, 0);
  v5 = sub_17EB50();
  v7 = v6;
  v8 = a1[3];
  v9 = a1[4];
  sub_66898(a1, v8);
  v10 = AssetInfo.editionKind.getter(v8, v9);
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    swift_bridgeObjectRelease(v7);
    v5 = v12;
    v7 = v13;
  }
  v14 = sub_17EB50();
  v16 = v15;
  v17 = sub_5C154(&qword_3210B0);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_258070;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_939DC();
  *(_QWORD *)(v18 + 32) = v5;
  *(_QWORD *)(v18 + 40) = v7;
  v19 = static String.localizedStringWithFormat(_:_:)(v14, v16, v18);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v18);
  return v19;
}

uint64_t _s11BookStoreUI26ContextActionStringBuilderV010narratedByF03forSSSg0A10Foundation9AssetInfo_p_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[40];

  v2 = sub_5C154(&qword_322970);
  __chkstk_darwin(v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_5E0D8(a1, (uint64_t)v23);
  v5 = sub_5C154(&qword_31EF60);
  v7 = type metadata accessor for AudiobookInfo(0, v6);
  v8 = swift_dynamicCast(v4, v23, v5, v7, 6);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (!v8)
  {
    v10(v4, 1, 1, v7);
    sub_5E09C((uint64_t)v4, &qword_322970);
    return 0;
  }
  v11 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v10)(v4, 0, 1, v7);
  v12 = AudiobookInfo.narrator.getter(v11);
  v14 = v13;
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v4, v7);
  if (!v14)
    return 0;
  v15 = sub_17EB50();
  v17 = v16;
  v18 = sub_5C154(&qword_3210B0);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_258070;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_939DC();
  *(_QWORD *)(v19 + 32) = v12;
  *(_QWORD *)(v19 + 40) = v14;
  v20 = static String.localizedStringWithFormat(_:_:)(v15, v17, v19);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v19);
  return v20;
}

uint64_t sub_1490A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  Class isa;
  id v15;
  uint64_t v17;

  v2 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  AssetInfo.releaseDate.getter(v9, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_5E09C((uint64_t)v4, &qword_31F128);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v12 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setDateFormat:", v13);

    isa = Date._bridgeToObjectiveC()().super.isa;
    v15 = objc_msgSend(v12, "stringFromDate:", isa);

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v11;
}

uint64_t _s11BookStoreUI26ContextActionStringBuilderV011publishedByF03forSSSg0A10Foundation9AssetInfo_p_tFZ_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = a1[3];
  v3 = a1[4];
  sub_66898(a1, v2);
  v4 = AssetInfo.publisherName.getter(v2, v3);
  v6 = v5;
  if (v5)
  {
    v7 = sub_1490A8(a1);
    if (v8)
    {
      v9 = v7;
      v10 = v8;
      v11 = sub_17EB50();
      v13 = v12;
      v14 = sub_5C154(&qword_3210B0);
      v15 = swift_allocObject(v14, 112, 7);
      *(_OWORD *)(v15 + 16) = xmmword_255F00;
      *(_QWORD *)(v15 + 56) = &type metadata for String;
      v16 = sub_939DC();
      *(_QWORD *)(v15 + 32) = v4;
      *(_QWORD *)(v15 + 40) = v6;
      *(_QWORD *)(v15 + 96) = &type metadata for String;
      *(_QWORD *)(v15 + 104) = v16;
      *(_QWORD *)(v15 + 64) = v16;
      *(_QWORD *)(v15 + 72) = v9;
      *(_QWORD *)(v15 + 80) = v10;
      v4 = static String.localizedStringWithFormat(_:_:)(v11, v13, v15);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v15);
    }
  }
  return v4;
}

ValueMetadata *type metadata accessor for ContextActionStringBuilder()
{
  return &type metadata for ContextActionStringBuilder;
}

uint64_t ImageResourceProvider.init(cache:registry:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

id sub_14938C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 517);
  qword_325EA0 = (uint64_t)result;
  return result;
}

uint64_t sub_1493CC(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  int v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  Swift::String v29;
  _OWORD v30[2];
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;

  v11 = type metadata accessor for ImageResourceSource(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)v30 - v17);
  v20 = *v5;
  v19 = v5[1];
  v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
  v21((char *)v30 - v17, a1, v11, v16);
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v18, v11);
  if (v22 == enum case for ImageResourceSource.persistedCache(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v18, v11);
    v23 = *v18;
    v24 = v18[1];
    v34 = v20;
    v35 = v19;
    v33 = &type metadata for String;
    v31 = v23;
    v32 = v24;
    memset(v30, 0, sizeof(v30));
    v25 = sub_14A314(&v31, (uint64_t)v30, a2, a3, a4, a5);
    sub_5E09C((uint64_t)v30, &qword_31F8B0);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v31);
    return (uint64_t)v25;
  }
  if (v22 == enum case for ImageResourceSource.network(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v18, v11);
    v26 = *v18;
    v27 = v18[1];
    v31 = v20;
    v32 = v19;
    v25 = sub_149630(v26, v27, a2, a3, a4, a5);
    swift_bridgeObjectRelease(v27);
    return (uint64_t)v25;
  }
  ((void (*)(char *, uint64_t, uint64_t))v21)(v14, a1, v11);
  v31 = 0;
  v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v29._object = (void *)0x80000000002726F0;
  v29._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)(v14, &v31, v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v31, v32, "BookStoreUI/ImageResourceProvider.swift", 39, 2, 64, 0);
  __break(1u);
  return result;
}

id sub_149630(uint64_t a1, unint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  void **v6;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  NSString v22;
  id v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *object;
  NSString v32;
  unint64_t v33;
  Class isa;
  id v35;
  uint64_t v37;
  uint64_t v38;

  v13 = sub_5C154(&qword_325EA8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ImageFilter(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v6;
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "imageResourceForTemplatedURL:baseURL:naturalSize:contentsScale:", v22, 0, a4, a5, a6);

  if (v23)
  {
    sub_5E1A4(a3, (uint64_t)v16, &qword_325EA8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      sub_5E09C((uint64_t)v16, &qword_325EA8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
      swift_unknownObjectRetain(v23);
      object = ImageFilter.build()()._object;
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v33 = sub_52E00((uint64_t)_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v33);
      v35 = objc_msgSend(v21, "imageResource:naturalSize:contentsScale:withFilter:filterOptions:", v23, v32, isa, a4, a5, a6);
      swift_unknownObjectRelease(v23);

      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      if (v35)
      {
        swift_unknownObjectRelease(v23);
        return v35;
      }
    }
  }
  else
  {
    if (qword_31E5B0 != -1)
      swift_once(&qword_31E5B0, sub_126800);
    v24 = type metadata accessor for Logger(0);
    sub_5240C(v24, (uint64_t)qword_3250B8);
    v25 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain_n(a2, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = v25;
    if (os_log_type_enabled(v27, v25))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v38 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain(a2);
      v37 = sub_57CD8(a1, a2, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl(&dword_0, v27, v28, "Failed to create image resource for: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 0;
  }
  return v23;
}

char *ImageResourceProvider.mediaBackdrop(from:size:displayScale:)(uint64_t a1, double a2, double a3, double a4)
{
  __n128 *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  char *v17;
  char *v18;
  id v19;
  uint64_t v20;
  __n128 v22[2];

  v9 = sub_5C154(&qword_325EA8);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = *v4;
  v22[1] = v22[0];
  v12 = type metadata accessor for ImageFilter(0, v22[0]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = sub_1493CC(a1, (uint64_t)v11, a2, a3, a4);
  sub_5E09C((uint64_t)v11, &qword_325EA8);
  if (!v13)
    return 0;
  v14 = objc_msgSend((id)v22[0].n128_u64[0], "mediaBackdropImageResourceFrom:naturalSize:contentScale:", v13, a2, a3, a4);
  if (!v14)
  {
    swift_unknownObjectRelease(v13);
    return 0;
  }
  v15 = v14;
  if (qword_31E6D0 != -1)
    swift_once(&qword_31E6D0, sub_14938C);
  v16 = (void *)qword_325EA0;
  v17 = (char *)objc_msgSend((id)qword_325EA0, "objectForKey:", v15);
  if (v17)
  {
    v18 = v17;
  }
  else
  {
    v19 = objc_allocWithZone((Class)type metadata accessor for ImageResourceAdaptor());
    v20 = swift_unknownObjectRetain(v15);
    v18 = sub_149CA8(v20);
    objc_msgSend(v16, "setObject:forKey:", v18, v15);
  }
  swift_unknownObjectRelease(v15);
  swift_unknownObjectRelease(v13);
  return v18;
}

uint64_t type metadata accessor for ImageResourceAdaptor()
{
  return objc_opt_self(_TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor);
}

char *ImageResourceProvider.resource(from:size:displayScale:filter:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  id v11;
  uint64_t v12;
  __int128 v14;

  v14 = *v5;
  v6 = sub_1493CC(a1, a2, a3, a4, a5);
  if (!v6)
    return 0;
  v7 = v6;
  if (qword_31E6D0 != -1)
    swift_once(&qword_31E6D0, sub_14938C);
  v8 = (void *)qword_325EA0;
  v9 = (char *)objc_msgSend((id)qword_325EA0, "objectForKey:", v7, v14);
  if (v9)
  {
    v10 = v9;
  }
  else
  {
    v11 = objc_allocWithZone((Class)type metadata accessor for ImageResourceAdaptor());
    v12 = swift_unknownObjectRetain(v7);
    v10 = sub_149CA8(v12);
    objc_msgSend(v8, "setObject:forKey:", v10, v7);
  }
  swift_unknownObjectRelease(v7);
  return v10;
}

char *sub_149CA8(uint64_t a1)
{
  char *v1;
  void *v3;
  char *v4;
  id v5;
  char *v6;
  uint64_t v7;
  char *v8;
  objc_super v10;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor_resource] = a1;
  v3 = (void *)objc_opt_self(NSHashTable);
  v4 = v1;
  swift_unknownObjectRetain(a1);
  v5 = objc_msgSend(v3, "hashTableWithOptions:", 5);
  *(_QWORD *)&v4[OBJC_IVAR____TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor_observers] = v5;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for ImageResourceAdaptor();
  v6 = (char *)objc_msgSendSuper2(&v10, "init");
  v7 = *(_QWORD *)&v6[OBJC_IVAR____TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor_resource];
  v8 = v6;
  objc_msgSend((id)swift_unknownObjectRetain(v7), "addObserver:", v8);
  swift_unknownObjectRelease(v7);

  swift_unknownObjectRelease(a1);
  return v8;
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageResourceProvider(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for ImageResourceProvider(id *a1)
{

}

uint64_t assignWithCopy for ImageResourceProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for ImageResourceProvider(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ImageResourceProvider(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageResourceProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageResourceProvider()
{
  return &type metadata for ImageResourceProvider;
}

id sub_149F04()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor_resource], "removeObserver:", v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImageResourceAdaptor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_14A020()
{
  uint64_t v0;
  id v1;
  void *v2;
  id result;
  id v4;
  id v5;
  id v6;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor_resource), "imageContentWithOptions:", 1);
  if (!v1)
    return 0;
  v2 = v1;
  result = objc_msgSend(v1, "image");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "newImage");
    swift_unknownObjectRelease(v4);
    if (v5)
    {
      objc_msgSend(v2, "insets");
      v6 = objc_msgSend(v5, "imageWithAlignmentRectInsets:");

      return v6;
    }

    return 0;
  }
  __break(1u);
  return result;
}

id sub_14A0EC()
{
  uint64_t v0;
  id v1;
  void *v2;
  id result;
  id v4;
  id v5;
  id v6;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor_resource), "loadImage");
  if (!v1)
    return 0;
  v2 = v1;
  result = objc_msgSend(v1, "image");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "newImage");
    swift_unknownObjectRelease(v4);
    if (v5)
    {
      objc_msgSend(v2, "insets");
      v6 = objc_msgSend(v5, "imageWithAlignmentRectInsets:");

      return v6;
    }

    return 0;
  }
  __break(1u);
  return result;
}

void sub_14A2B8(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v7;

  swift_unknownObjectRetain(a3);
  v7 = a1;
  sub_14A974(a4);
  swift_unknownObjectRelease(a3);

}

id sub_14A314(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  NSString v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  NSObject *v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  os_log_type_t v48;
  __n128 v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *object;
  NSString v60;
  unint64_t v61;
  Class isa;
  id v63;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68[3];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v13 = sub_5C154(&qword_325EA8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ImageFilter(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void **)v6;
  v21 = *(void **)(v6 + 8);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v21, "imageProviderForKind:", v23);

  if (!v24)
  {
    if (qword_31E5B0 != -1)
      swift_once(&qword_31E5B0, sub_126800);
    v40 = type metadata accessor for Logger(0);
    sub_5240C(v40, (uint64_t)qword_3250B8);
    v41 = static os_log_type_t.error.getter();
    v42 = v41;
    v43 = Logger.logObject.getter(v41);
    if (os_log_type_enabled(v43, v42))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v68[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v70 = sub_57CD8(0x497972617262696CLL, 0xEB000000006D6574, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v44 + 4, v44 + 12);
      _os_log_impl(&dword_0, v43, v42, "No provider found in registry for: %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }

    return 0;
  }
  v66 = v22;
  v67 = a3;
  v25 = a1[3];
  v26 = sub_66898(a1, v25);
  v27 = _bridgeAnythingToObjectiveC<A>(_:)(v26, v25);
  sub_5E1A4(a2, (uint64_t)v68, &qword_31F8B0);
  v28 = v69;
  if (v69)
  {
    v29 = sub_66898(v68, v69);
    v65 = (uint64_t)&v65;
    v30 = v18;
    v31 = v17;
    v32 = v20;
    v33 = v24;
    v34 = *(_QWORD *)(v28 - 8);
    v35 = __chkstk_darwin(v29);
    v37 = (char *)&v65 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v34 + 16))(v37, v35);
    v38 = _bridgeAnythingToObjectiveC<A>(_:)(v37, v28);
    v39 = *(void (**)(char *, uint64_t))(v34 + 8);
    v24 = v33;
    v20 = v32;
    v17 = v31;
    v18 = v30;
    v39(v37, v28);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v68);
  }
  else
  {
    v38 = 0;
  }
  v46 = objc_msgSend(v24, "imageResourceForNaturalSize:contentsScale:instance:options:", v27, v38, a4, a5, a6);
  swift_unknownObjectRelease(v27);
  swift_unknownObjectRelease(v38);
  if (!v46)
  {
    if (qword_31E5B0 != -1)
      swift_once(&qword_31E5B0, sub_126800);
    v47 = type metadata accessor for Logger(0);
    sub_5240C(v47, (uint64_t)qword_3250B8);
    v48 = static os_log_type_t.error.getter();
    v50 = swift_unknownObjectRetain_n(v24, 2, v49);
    v51 = Logger.logObject.getter(v50);
    v52 = v48;
    if (os_log_type_enabled(v51, v48))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v68[0] = v54;
      *(_DWORD *)v53 = 136315138;
      v55 = objc_msgSend(v24, "description");
      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      v58 = v57;

      v70 = sub_57CD8(v56, v58, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v53 + 4, v53 + 12);
      swift_unknownObjectRelease_n(v24, 2);
      swift_bridgeObjectRelease(v58);
      _os_log_impl(&dword_0, v51, v52, "Failed to create image resource for using provider: %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
      swift_unknownObjectRelease(v24);

    }
    else
    {

      swift_unknownObjectRelease_n(v24, 3);
    }
    return 0;
  }
  sub_5E1A4(v67, (uint64_t)v16, &qword_325EA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    swift_unknownObjectRelease(v24);
    sub_5E09C((uint64_t)v16, &qword_325EA8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    swift_unknownObjectRetain(v46);
    object = ImageFilter.build()()._object;
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v61 = sub_52E00((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v61);
    v63 = objc_msgSend(v66, "imageResource:naturalSize:contentsScale:withFilter:filterOptions:", v46, v60, isa, a4, a5, a6);
    swift_unknownObjectRelease(v24);
    swift_unknownObjectRelease(v46);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    if (v63)
    {
      swift_unknownObjectRelease(v46);
      return v63;
    }
  }
  return v46;
}

void sub_14A974(SEL *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;

  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11BookStoreUIP33_5F65FBF02658678FCCE73175674AAD1F20ImageResourceAdaptor_observers), "allObjects");
  v4 = sub_5C154(&qword_325EE8);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
    if (v6)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v5);
    return;
  }
  if (v5 < 0)
    v9 = v5;
  else
    v9 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(v5);
  if (!v6)
    goto LABEL_13;
LABEL_3:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
      }
      else
      {
        v8 = *(void **)(v5 + 8 * i + 32);
        swift_unknownObjectRetain(v8);
      }
      objc_msgSend(v8, *a1, v1);
      swift_unknownObjectRelease(v8);
    }
    goto LABEL_13;
  }
  __break(1u);
}

id ContextActionDataModel.Asset.__allocating_init(assetInfo:)(_QWORD *a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  id v5;
  objc_super v7;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
  sub_5E0D8((uint64_t)a1, (uint64_t)&v3[OBJC_IVAR___BSUIContextActionDataAssetModel_initType]);
  v4[40] = 3;
  v7.receiver = v3;
  v7.super_class = v1;
  v5 = objc_msgSendSuper2(&v7, "init");
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return v5;
}

id ContextActionDataModel.__allocating_init(asset:sourceView:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return ContextActionDataModel.init(asset:sourceView:)(a1, a2);
}

void *ContextActionDataModel.initType.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + OBJC_IVAR___BSUIContextActionDataModel_initType);
  sub_14CABC(v1, *(void **)(v0 + OBJC_IVAR___BSUIContextActionDataModel_initType + 8), *(_BYTE *)(v0 + OBJC_IVAR___BSUIContextActionDataModel_initType + 16));
  return v1;
}

uint64_t sub_14AC90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR___BSUIContextActionDataModel_originatingLocation;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_6EF28(v3, a1);
}

uint64_t sub_14AD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR___BSUIContextActionDataModel_originatingLocation;
  swift_beginAccess(v3, v5, 33, 0);
  sub_AC6F8(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_14ADC8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[24];
  _BYTE v6[32];

  sub_6EF28(a1, (uint64_t)v6);
  v3 = *a2 + OBJC_IVAR___BSUIContextActionDataModel_originatingLocation;
  swift_beginAccess(v3, v5, 33, 0);
  sub_AC6F8((uint64_t)v6, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_14AE2C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_originatingLocation, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14AE7C()
{
  return sub_14AFE4(&OBJC_IVAR___BSUIContextActionDataModel_presentationRefID);
}

uint64_t sub_14AE94(uint64_t a1, uint64_t a2)
{
  return sub_14B0C4(a1, a2, &OBJC_IVAR___BSUIContextActionDataModel_presentationRefID);
}

uint64_t (*sub_14AEA0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_presentationRefID, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14AEF0()
{
  return sub_14AFE4(&OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance);
}

uint64_t sub_14AF08(uint64_t a1, uint64_t a2)
{
  return sub_14B0C4(a1, a2, &OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance);
}

uint64_t (*sub_14AF14(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance, a1, 33, 0);
  return j_j__swift_endAccess;
}

id sub_14AF64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  _BYTE v7[24];

  v3 = a1 + *a3;
  swift_beginAccess(v3, v7, 0, 0);
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  swift_bridgeObjectRetain(v4);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_14AFD8()
{
  return sub_14AFE4(&OBJC_IVAR___BSUIContextActionDataModel_presentationUID);
}

uint64_t sub_14AFE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v5, 0, 0);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_14B040(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v12[24];

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess(v9, v12, 1, 0);
  v10 = v9[1];
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_14B0B8(uint64_t a1, uint64_t a2)
{
  return sub_14B0C4(a1, a2, &OBJC_IVAR___BSUIContextActionDataModel_presentationUID);
}

uint64_t sub_14B0C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_14B11C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v10[24];

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess(v7, v10, 1, 0);
  v8 = v7[1];
  *v7 = v6;
  v7[1] = v5;
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRelease(v8);
}

uint64_t (*sub_14B180(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_presentationUID, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14B208()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro);
  swift_beginAccess(v0 + OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro, v3, 0, 0);
  return *v1;
}

uint64_t sub_14B294(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_14B2DC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14B364()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation);
  swift_beginAccess(v0 + OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation, v3, 0, 0);
  return *v1;
}

uint64_t sub_14B3F0(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_14B438(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14B4C0()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu);
  swift_beginAccess(v0 + OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu, v3, 0, 0);
  return *v1;
}

uint64_t sub_14B54C(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_14B594(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu, a1, 33, 0);
  return j__swift_endAccess;
}

void *sub_14B5E4()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem);
  swift_beginAccess(v0 + OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_14B63C(void *a1)
{
  sub_14B798(a1, &OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem);
}

uint64_t (*sub_14B648(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem, a1, 33, 0);
  return j_j__swift_endAccess;
}

id sub_14B698(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id *v3;
  _BYTE v5[24];

  v3 = (id *)(a1 + *a3);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3;
}

void *sub_14B6DC()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR___BSUIContextActionDataModel_sourcePoint);
  swift_beginAccess(v0 + OBJC_IVAR___BSUIContextActionDataModel_sourcePoint, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_14B734(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  void **v5;
  void *v6;
  id v7;
  _BYTE v8[24];

  v5 = (void **)(a1 + *a4);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = *v5;
  *v5 = a3;
  v7 = a3;

}

void sub_14B78C(void *a1)
{
  sub_14B798(a1, &OBJC_IVAR___BSUIContextActionDataModel_sourcePoint);
}

void sub_14B798(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;
  _BYTE v6[24];

  v4 = (void **)(v2 + *a2);
  swift_beginAccess(v4, v6, 1, 0);
  v5 = *v4;
  *v4 = a1;

}

void sub_14B7E4(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  void **v6;
  void *v7;
  id v8;
  _BYTE v9[24];

  v5 = *a1;
  v6 = (void **)(*a2 + *a5);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = *v6;
  *v6 = v5;
  v8 = v5;

}

uint64_t (*sub_14B840(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_sourcePoint, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14B890()
{
  return sub_14B954(&OBJC_IVAR___BSUIContextActionDataModel_transaction);
}

uint64_t sub_14B8A8(uint64_t a1)
{
  return sub_14BA10(a1, &OBJC_IVAR___BSUIContextActionDataModel_transaction);
}

uint64_t (*sub_14B8B4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_transaction, a1, 33, 0);
  return j_j__swift_endAccess;
}

id sub_14B904(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(a1 + *a3);
  swift_beginAccess(v3, v5, 0, 0);
  return (id)swift_unknownObjectRetain(*v3);
}

uint64_t sub_14B948()
{
  return sub_14B954(&OBJC_IVAR___BSUIContextActionDataModel_transactionProvider);
}

uint64_t sub_14B954(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_unknownObjectRetain(*v2);
}

uint64_t sub_14B9A4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (uint64_t *)(a1 + *a4);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = *v5;
  *v5 = a3;
  swift_unknownObjectRetain(a3);
  return swift_unknownObjectRelease(v6);
}

uint64_t sub_14BA04(uint64_t a1)
{
  return sub_14BA10(a1, &OBJC_IVAR___BSUIContextActionDataModel_transactionProvider);
}

uint64_t sub_14BA10(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_14BA5C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *a1;
  v6 = (uint64_t *)(*a2 + *a5);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = *v6;
  *v6 = v5;
  swift_unknownObjectRetain(v5);
  return swift_unknownObjectRelease(v7);
}

uint64_t (*sub_14BAC0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_transactionProvider, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14BB04(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v10[24];

  v4 = type metadata accessor for ContextAssetInfoAnalytics(0);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_AC784(a1, (uint64_t)v6);
  v7 = *a2 + OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes;
  swift_beginAccess(v7, v10, 33, 0);
  sub_AC740((uint64_t)v6, v7);
  return swift_endAccess(v10);
}

uint64_t sub_14BBAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_AC784(v3, a1);
}

uint64_t sub_14BBFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes;
  swift_beginAccess(v3, v5, 33, 0);
  sub_AC740(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_14BC54(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_14BC98()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation);
  swift_beginAccess(v0 + OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation, v3, 0, 0);
  return *v1;
}

uint64_t sub_14BCDC(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_14BD24(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation, a1, 33, 0);
  return j_j__swift_endAccess;
}

id ContextActionDataModel.__allocating_init(assets:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ContextActionDataModel.init(assets:)(a1);
}

id ContextActionDataModel.init(assets:)(uint64_t a1)
{
  _BYTE *v1;
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  objc_super v11;

  v3 = &v1[OBJC_IVAR___BSUIContextActionDataModel_originatingLocation];
  *v3 = 0u;
  v3[1] = 0u;
  v4 = &v1[OBJC_IVAR___BSUIContextActionDataModel_presentationRefID];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v1[OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v1[OBJC_IVAR___BSUIContextActionDataModel_presentationUID];
  *v6 = 0;
  v6[1] = 0;
  v1[OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro] = 0;
  v1[OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation] = 0;
  v1[OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___BSUIContextActionDataModel_sourcePoint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___BSUIContextActionDataModel_transaction] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___BSUIContextActionDataModel_transactionProvider] = 0;
  v7 = &v1[OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes];
  v8 = type metadata accessor for OdpSuggestionType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v1[OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation] = 0;
  v9 = &v1[OBJC_IVAR___BSUIContextActionDataModel_initType];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ContextActionDataModel(0);
  return objc_msgSendSuper2(&v11, "init");
}

id ContextActionDataModel.init(asset:sourceView:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _OWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  objc_super v13;

  v5 = &v2[OBJC_IVAR___BSUIContextActionDataModel_originatingLocation];
  *v5 = 0u;
  v5[1] = 0u;
  v6 = &v2[OBJC_IVAR___BSUIContextActionDataModel_presentationRefID];
  *v6 = 0;
  v6[1] = 0;
  v7 = &v2[OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v2[OBJC_IVAR___BSUIContextActionDataModel_presentationUID];
  *v8 = 0;
  v8[1] = 0;
  v2[OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro] = 0;
  v2[OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation] = 0;
  v2[OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___BSUIContextActionDataModel_sourcePoint] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___BSUIContextActionDataModel_transaction] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___BSUIContextActionDataModel_transactionProvider] = 0;
  v9 = &v2[OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes];
  v10 = type metadata accessor for OdpSuggestionType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v2[OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation] = 0;
  v11 = &v2[OBJC_IVAR___BSUIContextActionDataModel_initType];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  v11[16] = 0;
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for ContextActionDataModel(0);
  return objc_msgSendSuper2(&v13, "init");
}

void sub_14C074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];
  _BYTE v18[32];

  v2 = v1;
  v4 = type metadata accessor for ContextAssetInfoAnalytics(0);
  __chkstk_darwin(v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_325F60);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OdpSuggestionType(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v14 = sub_582B4(0x6F7361655250444FLL, 0xE90000000000006ELL);
    if ((v15 & 1) != 0)
    {
      sub_5E1EC(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)v18);
      if ((swift_dynamicCast(v17, v18, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        OdpSuggestionType.init(rawValue:)(v17[0], v17[1]);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
        {
          sub_5E09C((uint64_t)v9, &qword_325F60);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v13, v10);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
          v16 = v2 + OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes;
          swift_beginAccess(v16, v18, 33, 0);
          sub_AC740((uint64_t)v6, v16);
          swift_endAccess(v18);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        }
      }
    }
  }
}

void ContextActionDataModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.ContextActionDataModel", 34, "init()", 6, 0);
  __break(1u);
}

id ContextActionDataModel.__deallocating_deinit()
{
  return sub_14CB88(0, (uint64_t (*)(void))type metadata accessor for ContextActionDataModel);
}

uint64_t ContextActionDataModel.Asset.initType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14CBC8(v1 + OBJC_IVAR___BSUIContextActionDataAssetModel_initType, a1);
}

id ContextActionDataModel.Asset.__allocating_init(adamID:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v6[40] = 0;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, "init");
}

id ContextActionDataModel.Asset.init(adamID:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_super v5;

  v3 = &v2[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
  *(_QWORD *)v3 = a1;
  *((_QWORD *)v3 + 1) = a2;
  v3[40] = 0;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for ContextActionDataModel.Asset();
  return objc_msgSendSuper2(&v5, "init");
}

id ContextActionDataModel.Asset.__allocating_init(libraryAsset:productProfile:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return ContextActionDataModel.Asset.init(libraryAsset:productProfile:)(a1, a2);
}

id ContextActionDataModel.Asset.init(libraryAsset:productProfile:)(void *a1, void *a2)
{
  void *v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char *v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  objc_super v19;
  char v20[16];
  _QWORD v21[2];

  v21[0] = swift_getObjectType();
  v5 = v2;
  v6 = sub_5C154(&qword_325F68);
  v7 = String.init<A>(describing:)(v21, v6);
  v9 = v8;
  v21[0] = v7;
  v21[1] = v8;
  strcpy(v20, "BKLibraryAsset");
  v20[15] = -18;
  v10 = sub_668F8();
  v11 = StringProtocol.contains<A>(_:)(v20, &type metadata for String, &type metadata for String, v10, v10);
  swift_bridgeObjectRelease(v9);
  if ((v11 & 1) != 0)
  {
    v12 = &v5[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
    v13 = sub_14CC1C();
    *(_QWORD *)v12 = a1;
    *((_QWORD *)v12 + 3) = v13;
    *((_QWORD *)v12 + 4) = a2;
    v12[40] = 1;
    v14 = a2;
    v15 = a1;

    v19.receiver = v5;
    v19.super_class = (Class)type metadata accessor for ContextActionDataModel.Asset();
    v16 = objc_msgSendSuper2(&v19, "init");

  }
  else
  {

    v17 = type metadata accessor for ContextActionDataModel.Asset();
    swift_deallocPartialClassInstance(v5, v17, 49, 7);
    return 0;
  }
  return v16;
}

id ContextActionDataModel.Asset.__allocating_init(mResourceRawData:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  __n128 v4;

  v3 = objc_allocWithZone(v1);
  return ContextActionDataModel.Asset.init(mResourceRawData:)(a1, v4);
}

id ContextActionDataModel.Asset.init(mResourceRawData:)(uint64_t a1, __n128 a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  objc_class *v23;
  uint64_t v25;
  uint64_t v26;
  objc_super v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[40];
  __int128 v31;
  __int128 v32;

  v4 = type metadata accessor for MCatalogServiceConfig(0, a2);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MResource.Keys(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, enum case for MResource.Keys.type(_:), v7, v9);
  v12 = v2;
  v13 = MResource.Keys.rawValue.getter();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v28 = v13;
  v29 = v15;
  AnyHashable.init<A>(_:)(&v28, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v16 = sub_58318((uint64_t)v30), (v17 & 1) != 0))
  {
    sub_5E1EC(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v31);
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  sub_5DCEC((uint64_t)v30);
  if (*((_QWORD *)&v32 + 1))
  {
    if ((swift_dynamicCast(&v28, &v31, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v18 = v29;
      v19 = static MResourceType.classType(for:)(v28, v29);
      swift_bridgeObjectRelease(v18);
      if (v19)
      {
        static MCatalogServiceConfig.appMainConfig.getter(v20);
        v21 = dispatch thunk of MResource.__allocating_init(with:config:)(a1, v6);
        if (v21)
        {
          v22 = &v12[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
          *(_QWORD *)v22 = v21;
          v22[40] = 2;

          v23 = (objc_class *)type metadata accessor for ContextActionDataModel.Asset();
          v27.receiver = v12;
          v27.super_class = v23;
          return objc_msgSendSuper2(&v27, "init");
        }
      }
      else
      {
        swift_bridgeObjectRelease(a1);
      }

    }
    else
    {

      swift_bridgeObjectRelease(a1);
    }
  }
  else
  {

    swift_bridgeObjectRelease(a1);
    sub_5E09C((uint64_t)&v31, &qword_31F8B0);
  }
  v25 = type metadata accessor for ContextActionDataModel.Asset();
  swift_deallocPartialClassInstance(v12, v25, 49, 7);
  return 0;
}

id ContextActionDataModel.Asset.__allocating_init(mAsset:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  objc_super v6;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
  *(_QWORD *)v4 = a1;
  v4[40] = 2;
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, "init");
}

id ContextActionDataModel.Asset.init(mAsset:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_super v4;

  v2 = &v1[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
  *(_QWORD *)v2 = a1;
  v2[40] = 2;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ContextActionDataModel.Asset();
  return objc_msgSendSuper2(&v4, "init");
}

id ContextActionDataModel.Asset.init(assetInfo:)(_QWORD *a1)
{
  char *v1;
  char *v3;
  id v4;
  objc_super v6;

  v3 = &v1[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
  sub_5E0D8((uint64_t)a1, (uint64_t)&v1[OBJC_IVAR___BSUIContextActionDataAssetModel_initType]);
  v3[40] = 3;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for ContextActionDataModel.Asset();
  v4 = objc_msgSendSuper2(&v6, "init");
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return v4;
}

id sub_14CABC(void *a1, void *a2, char a3)
{
  id v4;

  if ((a3 & 1) != 0)
    return (id)swift_bridgeObjectRetain(a1);
  v4 = a2;
  return a1;
}

uint64_t type metadata accessor for ContextActionDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_325FA8;
  if (!qword_325FA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContextActionDataModel);
  return result;
}

void ContextActionDataModel.Asset.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.Asset", 17, "init()", 6, 0);
  __break(1u);
}

id ContextActionDataModel.Asset.__deallocating_deinit(uint64_t a1)
{
  return sub_14CB88(a1, type metadata accessor for ContextActionDataModel.Asset);
}

id sub_14CB88(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_14CBC8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ContextActionDataModel.Asset.InitType(a2, a1);
  return a2;
}

uint64_t type metadata accessor for ContextActionDataModel.Asset()
{
  return objc_opt_self(BSUIContextActionDataAssetModel);
}

unint64_t sub_14CC1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_325F78;
  if (!qword_325F78)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_325F78);
  }
  return result;
}

uint64_t sub_14CC58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR___BSUIContextActionDataModel_originatingLocation;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_6EF28(v3, a2);
}

uint64_t sub_14CCB0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_14CD0C(a1, &OBJC_IVAR___BSUIContextActionDataModel_presentationRefID, a2);
}

uint64_t sub_14CCBC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14B11C(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_presentationRefID);
}

uint64_t sub_14CCD8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_14CD0C(a1, &OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance, a2);
}

uint64_t sub_14CCE4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14B11C(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance);
}

uint64_t sub_14CD00@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_14CD0C(a1, &OBJC_IVAR___BSUIContextActionDataModel_presentationUID, a2);
}

uint64_t sub_14CD0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = v4[1];
  *a3 = *v4;
  a3[1] = v5;
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_14CD5C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14B11C(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_presentationUID);
}

uint64_t sub_14CD78@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_14CF60(a1, &OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro, a2);
}

uint64_t sub_14CD84(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14CFB8(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro);
}

uint64_t sub_14CD90@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_14CF60(a1, &OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation, a2);
}

uint64_t sub_14CD9C(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14CFB8(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation);
}

uint64_t sub_14CDA8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_14CF60(a1, &OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu, a2);
}

uint64_t sub_14CDB4(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14CFB8(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu);
}

id sub_14CDC0@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return sub_14CDF4(a1, &OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem, a2);
}

void sub_14CDCC(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_14B7E4(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_sourceBarButtonItem);
}

id sub_14CDE8@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return sub_14CDF4(a1, &OBJC_IVAR___BSUIContextActionDataModel_sourcePoint, a2);
}

id sub_14CDF4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, void **a3@<X8>)
{
  void **v4;
  void *v5;
  _BYTE v7[24];

  v4 = (void **)(*a1 + *a2);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = *v4;
  *a3 = *v4;
  return v5;
}

void sub_14CE40(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_14B7E4(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_sourcePoint);
}

uint64_t sub_14CE5C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_14CE90(a1, &OBJC_IVAR___BSUIContextActionDataModel_transaction, a2);
}

uint64_t sub_14CE68(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14BA5C(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_transaction);
}

uint64_t sub_14CE84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_14CE90(a1, &OBJC_IVAR___BSUIContextActionDataModel_transactionProvider, a2);
}

uint64_t sub_14CE90@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = *v4;
  *a3 = *v4;
  return swift_unknownObjectRetain(v5);
}

uint64_t sub_14CEE0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14BA5C(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_transactionProvider);
}

uint64_t sub_14CEFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_AC784(v3, a2);
}

uint64_t sub_14CF54@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_14CF60(a1, &OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation, a2);
}

uint64_t sub_14CF60@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;
  _BYTE v6[24];

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess(v4, v6, 0, 0);
  *a3 = *v4;
  return result;
}

uint64_t sub_14CFAC(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_14CFB8(a1, a2, a3, a4, &OBJC_IVAR___BSUIContextActionDataModel_actionItemNeedsDifferentiation);
}

uint64_t sub_14CFB8(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;
  _BYTE v8[24];

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess(v6, v8, 1, 0);
  *v6 = v5;
  return result;
}

uint64_t sub_14D000()
{
  return type metadata accessor for ContextActionDataModel(0);
}

uint64_t sub_14D008(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = &unk_260E48;
  v4[1] = &unk_260E60;
  v4[2] = &unk_260E78;
  v4[3] = &unk_260E78;
  v4[4] = &unk_260E78;
  v4[5] = &unk_260E90;
  v4[6] = &unk_260E90;
  v4[7] = &unk_260E90;
  v4[8] = &unk_260EA8;
  v4[9] = &unk_260EA8;
  v4[10] = &unk_260EA8;
  v4[11] = &unk_260EA8;
  result = type metadata accessor for ContextAssetInfoAnalytics(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(result - 8) + 64;
    v4[13] = &unk_260E90;
    result = swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ContextActionDataModel(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContextActionDataModel);
}

uint64_t dispatch thunk of ContextActionDataModel.originatingLocation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.originatingLocation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextActionDataModel.originatingLocation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationRefID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationRefID.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationRefID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationRefInstance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationRefInstance.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationRefInstance.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationUID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationUID.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.presentationUID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextActionDataModel.shouldReportFigaro.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.shouldReportFigaro.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContextActionDataModel.shouldReportFigaro.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.isAnODPRecommendation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.isAnODPRecommendation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.isAnODPRecommendation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.supportsSuggestionContextMenu.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.supportsSuggestionContextMenu.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_158.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextActionDataModel.supportsSuggestionContextMenu.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_158.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.sourceBarButtonItem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_158.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextActionDataModel.sourceBarButtonItem.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_158.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.sourceBarButtonItem.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_158.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContextActionDataModel.sourcePoint.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.sourcePoint.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.sourcePoint.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.transaction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.transaction.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.transaction.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1A8.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextActionDataModel.transactionProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1A8.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.transactionProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1A8.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextActionDataModel.transactionProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1A8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContextActionDataModel.analyticsAttributes.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1A8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContextActionDataModel.analyticsAttributes.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.analyticsAttributes.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.actionItemNeedsDifferentiation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.actionItemNeedsDifferentiation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.actionItemNeedsDifferentiation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextActionDataModel.__allocating_init(assets:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t dispatch thunk of ContextActionDataModel.__allocating_init(asset:sourceView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t dispatch thunk of ContextActionDataModel.setODPAnalytics(attributes:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1F8.segname[swift_isaMask & *v0])();
}

void destroy for ContextActionDataModel.InitType(uint64_t a1)
{
  sub_14D544(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_14D544(void *a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    swift_bridgeObjectRelease(a1);
  }
  else
  {

  }
}

uint64_t _s11BookStoreUI22ContextActionDataModelC8InitTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_14CABC(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ContextActionDataModel.InitType(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_14CABC(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_14D544(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ContextActionDataModel.InitType(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_14D544(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ContextActionDataModel.InitType()
{
  return &type metadata for ContextActionDataModel.InitType;
}

uint64_t method lookup function for ContextActionDataModel.Asset(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContextActionDataModel.Asset);
}

uint64_t dispatch thunk of ContextActionDataModel.Asset.__allocating_init(adamID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ContextActionDataModel.Asset.__allocating_init(mResourceRawData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ContextActionDataModel.Asset.__allocating_init(mAsset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ContextActionDataModel.Asset.__allocating_init(assetInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void destroy for ContextActionDataModel.Asset.InitType(uint64_t a1)
{
  int v2;
  void *v3;

  v2 = *(unsigned __int8 *)(a1 + 40);
  while (2)
  {
    switch(v2)
    {
      case 0:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        return;
      case 1:
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
        v3 = *(void **)(a1 + 32);
        goto LABEL_8;
      case 2:
        v3 = *(void **)a1;
LABEL_8:

        break;
      case 3:
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
        break;
      default:
        v2 = *(_DWORD *)a1 + 4;
        continue;
    }
    break;
  }
}

uint64_t initializeWithCopy for ContextActionDataModel.Asset.InitType(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  id v10;

  v4 = *(unsigned __int8 *)(a2 + 40);
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v5;
        *(_BYTE *)(a1 + 40) = 0;
        swift_bridgeObjectRetain(v5);
        return a1;
      case 1:
        v9 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
        v6 = *(void **)(a2 + 32);
        *(_QWORD *)(a1 + 32) = v6;
        v7 = 1;
        goto LABEL_8;
      case 2:
        v6 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = 2;
LABEL_8:
        *(_BYTE *)(a1 + 40) = v7;
        v10 = v6;
        break;
      case 3:
        v8 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v8;
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 3;
        break;
      default:
        v4 = *(_DWORD *)a2 + 4;
        continue;
    }
    return a1;
  }
}

uint64_t assignWithCopy for ContextActionDataModel.Asset.InitType(uint64_t a1, uint64_t a2)
{
  int v4;
  __n128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  id v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    while (2)
    {
      switch(v4)
      {
        case 0:
          v5 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          break;
        case 1:
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);

          break;
        case 2:

          break;
        case 3:
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
    v6 = *(unsigned __int8 *)(a2 + 40);
    while (2)
    {
      switch(v6)
      {
        case 0:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v7 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 8) = v7;
          *(_BYTE *)(a1 + 40) = 0;
          swift_bridgeObjectRetain(v7);
          return a1;
        case 1:
          v8 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v8;
          (**(void (***)(uint64_t, uint64_t, __n128))(v8 - 8))(a1, a2, v5);
          v9 = *(void **)(a2 + 32);
          *(_QWORD *)(a1 + 32) = v9;
          v10 = 1;
          goto LABEL_15;
        case 2:
          v9 = *(void **)a2;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v10 = 2;
LABEL_15:
          *(_BYTE *)(a1 + 40) = v10;
          v11 = v9;
          break;
        case 3:
          v12 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v12;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t, __n128))(v12 - 8))(a1, a2, v5);
          *(_BYTE *)(a1 + 40) = 3;
          break;
        default:
          v6 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
  }
  return a1;
}

uint64_t assignWithTake for ContextActionDataModel.Asset.InitType(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    while (2)
    {
      switch(v4)
      {
        case 0:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          break;
        case 1:
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);

          break;
        case 2:

          break;
        case 3:
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          break;
        case 1:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 1;
          break;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 2;
          break;
        case 3:
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v8;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 3;
          break;
        default:
          v5 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextActionDataModel.Asset.InitType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ContextActionDataModel.Asset.InitType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_14DAC8(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t sub_14DAE4(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContextActionDataModel.Asset.InitType()
{
  return &type metadata for ContextActionDataModel.Asset.InitType;
}

uint64_t sub_14DB1C(uint64_t a1)
{
  destroy for ContextActionDataModel.Asset.InitType(a1);
  return a1;
}

uint64_t sub_14DB48(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContextAssetInfoAnalytics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SeriesQuickActionButtonViewModel.init<A>(for:seriesPromotionState:with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  id *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  __n128 v42;
  char v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void (**v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  void (**v84)(_QWORD, _QWORD, _QWORD);
  uint64_t v85;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;

  v107 = a3;
  v109 = a1;
  v110 = a2;
  v100 = a6;
  v8 = type metadata accessor for SeriesData(0);
  v9 = __chkstk_darwin(v8);
  v103 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContentType(0, v9);
  v12 = __chkstk_darwin(v11);
  v98 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for AltType(0, v12);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v97 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_324C00);
  __chkstk_darwin(v15);
  v17 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = a5;
  v18 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v18);
  v20 = swift_getAssociatedTypeWitness(255, v18);
  v94 = (char *)AssociatedTypeWitness;
  v21 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (id *)((char *)&v93 - v24);
  v26 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0, v23);
  v105 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v104 = (char *)&v93 - v30;
  __chkstk_darwin(v31);
  v101 = (uint64_t *)((char *)&v93 - v32);
  sub_83130((uint64_t)v110, (uint64_t)&v114);
  v102 = a4;
  if (v118 >= 4u)
  {
    v36 = v95;
    v37 = v96;
    v94 = v17;
    if (v118 == 4)
    {
      v99 = v26;
      sub_5DC98(&v114, (uint64_t)&v119);
      sub_5E0D8((uint64_t)&v119, (uint64_t)&v111);
      v38 = (uint64_t)v94;
      CardInfo.init(with:alwaysPresentNewCardSet:)(&v111, 1);
      v39 = sub_14E4B8();
      BaseObjectGraph.inject<A>(_:)(&v111, v39, v39);
      v40 = (void *)v111;
      v93 = sub_5C154(&qword_325FE0);
      v41 = (uint64_t)&v28[*(int *)(v93 + 48)];
      sub_5E0D8((uint64_t)&v119, (uint64_t)v28);
      sub_14E4F4(v38, v41);
      v43 = SeriesInfo.isOrdered.getter(a4, v106, v42);
      v44 = (unsigned int *)&enum case for AltType.nextInSeries(_:);
      if ((v43 & 1) == 0)
        v44 = (unsigned int *)&enum case for AltType.moreInSeries(_:);
      (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v97, *v44, v37);
      v45 = v120;
      v46 = v121;
      sub_66898(&v119, v120);
      v47 = dispatch thunk of AssetInfo.assetType.getter(v45, v46);
      ContentType.init(assetType:)(v47);
      v48 = v120;
      v49 = v121;
      sub_66898(&v119, v120);
      v50 = ContentInfo.id.getter(v48, *(_QWORD *)(v49 + 8));
      v96 = v51;
      v52 = v120;
      v53 = v121;
      sub_66898(&v119, v120);
      v54 = AssetInfo.priceFormatted.getter(v52, v53);
      v56 = v55;
      v57 = objc_msgSend(v40, "currencyCode");
      *(_QWORD *)&v111 = 0;
      v58 = objc_msgSend(v57, "valueWithError:", &v111);

      v59 = (void *)v111;
      if (v58)
      {
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v62 = v61;
        v63 = v59;

        v64 = v108;
      }
      else
      {
        v73 = (id)v111;
        v74 = _convertNSErrorToError(_:)(v59);

        swift_willThrow(v75);
        swift_errorRelease(v74);
        v60 = 0;
        v62 = 0;
        v64 = 0;
      }
      v108 = v64;
      AltSeriesContentTypeExposureData.init(altType:altContentType:altContentID:altPricePoint:altPriceCurrency:)(v97, v98, v50, v96, v54, v56, v60, v62);

      sub_5E09C((uint64_t)v94, &qword_324C00);
      v68 = (void (**)(_QWORD, _QWORD, _QWORD))v105;
      v26 = v99;
      (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v28, enum case for SeriesQuickActionButtonViewModel.Style.listItem(_:), v99);
      v66 = v101;
      ((void (**)(_QWORD *, char *, uint64_t))v68)[4](v101, v28, v26);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v119);
      goto LABEL_21;
    }
    v72 = v109;
    v68 = (void (**)(_QWORD, _QWORD, _QWORD))v105;
    v66 = v101;
    if (!(v116 | v117 | (unint64_t)v114 | v115 | *((_QWORD *)&v114 + 1)))
    {
      v76 = v106;
      v101[3] = a4;
      v66[4] = v76;
      v87 = sub_668BC(v66);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v87, v72, a4);
      ((void (**)(_QWORD *, _QWORD, uint64_t))v68)[13](v66, enum case for SeriesQuickActionButtonViewModel.Style.share(_:), v26);
      goto LABEL_22;
    }
    v67 = enum case for SeriesQuickActionButtonViewModel.Style.placeholder(_:);
  }
  else
  {
    v33 = v20;
    v99 = v26;
    sub_5DC98(&v114, (uint64_t)&v119);
    v34 = v109;
    dispatch thunk of ContentInfo.dataSource.getter(a4, v18);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v21);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v119);

        v69 = v106;
        v70 = SeriesInfo.contentsForArtwork.getter(a4);
        v66 = v101;
        if (v70)
        {
          v71 = v70;
          v68 = (void (**)(_QWORD, _QWORD, _QWORD))v105;
          if (*(_QWORD *)(v70 + 16))
          {
            sub_5E0D8(v70 + 32, (uint64_t)&v111);
          }
          else
          {
            v113 = 0;
            v111 = 0u;
            v112 = 0u;
          }
          swift_bridgeObjectRelease(v71);
          if (*((_QWORD *)&v112 + 1))
          {
            sub_5DC98(&v111, (uint64_t)&v114);
            v88 = v116;
            v89 = v117;
            sub_66898(&v114, v116);
            *((_QWORD *)&v112 + 1) = a4;
            v113 = v69;
            v90 = sub_668BC(&v111);
            (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v90, v34, a4);
            v91 = v104;
            v68 = (void (**)(_QWORD, _QWORD, _QWORD))v105;
            AssetInfo.enrich(with:)(&v111, v88, v89);
            _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v111);
            v26 = v99;
            ((void (**)(char *, _QWORD, uint64_t))v68)[13](v91, enum case for SeriesQuickActionButtonViewModel.Style.quickActionBuy(_:), v99);
            v92 = v91;
            v76 = v69;
            ((void (**)(_QWORD *, char *, uint64_t))v68)[4](v66, v92, v26);
            _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v114);
            goto LABEL_22;
          }
        }
        else
        {
          v113 = 0;
          v111 = 0u;
          v112 = 0u;
          v68 = (void (**)(_QWORD, _QWORD, _QWORD))v105;
        }
        sub_5E09C((uint64_t)&v111, &qword_320940);
        v26 = v99;
        ((void (**)(_QWORD *, _QWORD, uint64_t))v68)[13](v66, enum case for SeriesQuickActionButtonViewModel.Style.placeholder(_:), v99);
        v76 = v69;
        goto LABEL_22;
      }
      (*(void (**)(id *, uint64_t))(v22 + 8))(v25, v21);
    }
    else
    {
      v65 = (uint64_t)v94;

      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v25, v65);
    }
    v26 = v99;
    v66 = v101;
    sub_5DC98(&v119, (uint64_t)v101);
    v67 = enum case for SeriesQuickActionButtonViewModel.Style.quickActionBuy(_:);
    v68 = (void (**)(_QWORD, _QWORD, _QWORD))v105;
  }
  ((void (**)(_QWORD *, uint64_t, uint64_t))v68)[13](v66, v67, v26);
LABEL_21:
  v76 = v106;
LABEL_22:
  v77 = v104;
  ((void (**)(char *, _QWORD *, uint64_t))v68)[2](v104, v66, v26);
  v78 = (char *)v102;
  v116 = v102;
  v117 = v76;
  v79 = sub_668BC(&v114);
  v80 = *((_QWORD *)v78 - 1);
  v81 = v109;
  (*(void (**)(_QWORD *, uint64_t, char *))(v80 + 16))(v79, v109, v78);
  v82 = v76;
  v83 = v66;
  v84 = v68;
  v85 = v103;
  sub_2344B0(v78, v82, v103);
  SeriesQuickActionButtonViewModel.init(style:seriesInfo:seriesData:)(v77, &v114, v85);
  swift_release(v107);
  sub_8307C(v110);
  (*(void (**)(uint64_t, char *))(v80 + 8))(v81, v78);
  return ((uint64_t (*)(_QWORD *, uint64_t))v84[1])(v83, v26);
}

unint64_t sub_14E4B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31FE50;
  if (!qword_31FE50)
  {
    v1 = objc_opt_self(BUBag);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_31FE50);
  }
  return result;
}

uint64_t sub_14E4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_324C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_14E53C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v8;
    v9 = v8;
    v10 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v8 - 8);
    v11 = swift_bridgeObjectRetain(v7);
    v10(a1 + 16, (uint64_t)(a2 + 2), v9, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v21 = *v14;
      *v13 = *v14;
      swift_retain(v21);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_14E65C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 16));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v5 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for SizeConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_14E6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2 + 16;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v8 - 8);
  v11 = swift_bridgeObjectRetain(v6);
  v10(a1 + 16, v7, v9, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = 1;
  }
  else
  {
    v18 = *v14;
    *v13 = *v14;
    swift_retain(v18);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  return a1;
}

_QWORD *sub_14E7C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_65938(a1 + 2, a2 + 2);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 24);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    sub_5E09C((uint64_t)a1 + v8, &qword_320160);
    v11 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  return a1;
}

uint64_t sub_14E8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for SizeConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_14E968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 16));
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 24);
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    sub_5E09C(a1 + v9, &qword_320160);
    v12 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for SizeConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_14EA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14EA5C);
}

uint64_t sub_14EA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3201B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_14EADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14EAE8);
}

uint64_t sub_14EAE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_3201B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for IveReadThisHeaderView(uint64_t a1)
{
  uint64_t result;

  result = qword_326040;
  if (!qword_326040)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IveReadThisHeaderView);
  return result;
}

void sub_14EB9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_260F08;
  v4[1] = &unk_260F20;
  sub_774D4(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_14EC18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B8488, 1);
}

void sub_14EC28(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.s.getter();
}

uint64_t sub_14EC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v0 = Image.init(systemName:)(0xD000000000000015, 0x8000000000272B20);
  v1 = Text.init(_:)(v0);
  v3 = v2;
  v5 = v4;
  v7 = v6 & 1;
  v8 = static Color.cyan.getter();
  v45 = v8;
  v9 = Text.foregroundStyle<A>(_:)(&v45, v1, v3, v7, v5, &type metadata for Color, &protocol witness table for Color);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  sub_6693C(v1, v3, v7);
  swift_release(v8);
  swift_bridgeObjectRelease(v5);
  v16 = static Text.+ infix(_:_:)(v9, v11, v15, v13, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v18 = v17;
  v20 = v19;
  v44 = v19;
  v22 = v21 & 1;
  v43 = v21 & 1;
  sub_6693C(v9, v11, v15);
  swift_bridgeObjectRelease(v13);
  v23 = sub_17EC4C();
  v25 = v24;
  LODWORD(v45) = static HierarchicalShapeStyle.secondary.getter();
  v26 = Text.foregroundStyle<A>(_:)(&v45, v23, v25, 0, _swiftEmptyArrayStorage, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v28 = v27;
  LOBYTE(v13) = v29;
  v31 = v30;
  swift_bridgeObjectRelease(v25);
  LOBYTE(v25) = v13 & 1;
  v32 = static Text.+ infix(_:_:)(v16, v18, v22, v20, v26, v28, v13 & 1, v31);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  sub_6693C(v26, v28, v25);
  swift_bridgeObjectRelease(v31);
  sub_6693C(v16, v18, v43);
  swift_bridgeObjectRelease(v44);
  v40 = static Font.body.getter(v39);
  v41 = Text.font(_:)(v40, v32, v34, v38, v36);
  swift_release(v40);
  sub_6693C(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  return v41;
}

void sub_14EEC8(uint64_t *a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t KeyPath;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  unint64_t v118;
  void (*v119)(char *, uint64_t);
  void (*v120)(char *, uint64_t);
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;

  v145 = a2;
  v140 = type metadata accessor for CoverViewModel.Style(0, a3);
  v139 = *(_QWORD *)(v140 - 8);
  v4 = __chkstk_darwin(v140);
  v136 = (uint64_t)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CoverViewModel(0, v4);
  v7 = __chkstk_darwin(v6);
  v138 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for CoverView(0, v7);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v137 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_5C154(&qword_326088);
  __chkstk_darwin(v142);
  v141 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v150 = (uint64_t)&v110 - v12;
  v13 = sub_5C154(&qword_31F7E8);
  v14 = __chkstk_darwin(v13);
  v125 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for Font.TextStyle(0, v14);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v122 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_5C154(&qword_320398);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v149 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_5C154(&qword_3203A0);
  __chkstk_darwin(v127);
  v126 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_5C154(&qword_3203A8);
  __chkstk_darwin(v128);
  v147 = (uint64_t)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v148 = (uint64_t)&v110 - v21;
  v22 = sub_5C154(&qword_320388);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = v22;
  __chkstk_darwin(v22);
  v26 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5C154(&qword_320390);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SizeConstants(0);
  v32 = *(_QWORD *)(v31 - 8);
  v117 = v31;
  __chkstk_darwin(v31);
  v34 = (char *)&v110 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = a1;
  v134 = sub_14EC50();
  v133 = v35;
  v135 = v36;
  v131 = v37 & 1;
  v132 = static Edge.Set.bottom.getter(v134);
  v121 = (char *)a1 + *(int *)(type metadata accessor for IveReadThisHeaderView(0) + 24);
  sub_76D64((uint64_t)v34);
  ScalableSizeConstants.scaled.getter(v31, &protocol witness table for SizeConstants);
  v120 = *(void (**)(char *, uint64_t))(v32 + 8);
  v120(v34, v31);
  KeyPath = swift_getKeyPath(&unk_260F88);
  v113 = v26;
  v115 = v27;
  SizeConstants.Scaled.subscript.getter(KeyPath, v27, &protocol witness table for SizeConstants.Spacing);
  swift_release(KeyPath);
  v119 = *(void (**)(char *, uint64_t))(v28 + 8);
  v119(v30, v27);
  v39 = swift_getKeyPath(&unk_260FB8);
  v118 = sub_79620();
  v114 = v24;
  SizeConstants.Scaled.subscript.getter(&v152, v39, v24, v118);
  swift_release(v39);
  v116 = *(void (**)(char *, uint64_t))(v23 + 8);
  v116(v26, v24);
  v40 = EdgeInsets.init(_all:)(*(double *)&v152);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v47 = v146[1];
  v112 = *v146;
  v111 = swift_getKeyPath(&unk_260FE8);
  v48 = v123;
  v49 = v122;
  v50 = v124;
  (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v122, enum case for Font.TextStyle.title2(_:), v124);
  v51 = enum case for Font.Design.serif (_:);
  v52 = type metadata accessor for Font.Design(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (uint64_t)v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 104))(v125, v51, v52);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
  swift_bridgeObjectRetain(v47);
  v55 = static Font.system(_:design:weight:)(v49, v54, 0, 1);
  sub_5E09C(v54, &qword_31F7E8);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  v56 = swift_getKeyPath(&unk_261018);
  v57 = v112;
  *(_QWORD *)&v152 = v112;
  *((_QWORD *)&v152 + 1) = v47;
  LOBYTE(v153) = 0;
  v58 = v111;
  *((_QWORD *)&v153 + 1) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v154 = v111;
  BYTE8(v154) = 1;
  v155 = v56;
  v156 = v55;
  v59 = sub_5C154(&qword_3203B0);
  v60 = sub_79594();
  View.bold(_:)(1, v59, v60);
  sub_6693C(v57, v47, 0);
  swift_release(v55);
  swift_release(v56);
  swift_release(v58);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  LOBYTE(v47) = static Edge.Set.bottom.getter(v61);
  sub_76D64((uint64_t)v34);
  v62 = v117;
  ScalableSizeConstants.scaled.getter(v117, &protocol witness table for SizeConstants);
  v120(v34, v62);
  v63 = swift_getKeyPath(&unk_260F88);
  v64 = v113;
  v65 = v115;
  SizeConstants.Scaled.subscript.getter(v63, v115, &protocol witness table for SizeConstants.Spacing);
  swift_release(v63);
  v119(v30, v65);
  v66 = swift_getKeyPath(&unk_261048);
  v67 = v114;
  SizeConstants.Scaled.subscript.getter(&v152, v66, v114, v118);
  swift_release(v66);
  v116(v64, v67);
  v68 = EdgeInsets.init(_all:)(*(double *)&v152);
  v70 = v69;
  v72 = v71;
  v74 = v73;
  v75 = v129;
  v76 = (uint64_t)v126;
  v77 = v149;
  v78 = v130;
  (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v126, v149, v130);
  v79 = v76 + *(int *)(v127 + 36);
  *(_BYTE *)v79 = v47;
  *(double *)(v79 + 8) = v68;
  *(_QWORD *)(v79 + 16) = v70;
  *(_QWORD *)(v79 + 24) = v72;
  *(_QWORD *)(v79 + 32) = v74;
  *(_BYTE *)(v79 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v78);
  v80 = v147;
  sub_5E1A4(v76, v147, &qword_3203A0);
  *(_WORD *)(v80 + *(int *)(v128 + 36)) = 256;
  sub_5E09C(v76, &qword_3203A0);
  v81 = v148;
  sub_66F14(v80, v148, &qword_3203A8);
  v82 = v146;
  v83 = v136;
  sub_5E0D8((uint64_t)(v146 + 2), v136);
  v84 = v82[5];
  v85 = v82[6];
  sub_66898(v82 + 2, v84);
  v86.n128_u64[0] = AssetInfo.coverAspectRatio.getter(v84, v85);
  *(double *)(v83 + 40) = CGSize.scaledToFit(in:times:horizontally:)(1, v86.n128_f64[0] > 1.0, 156.0, 156.0, v86, 1.0);
  *(_QWORD *)(v83 + 48) = v87;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v139 + 104))(v83, enum case for CoverViewModel.Style.image(_:), v140);
  v88 = v138;
  CoverViewModel.init(style:)(v83);
  v89 = v137;
  CoverView.init(model:cacheGeometry:)(v88, 0);
  v90 = v82[5];
  v91 = v82[6];
  sub_66898(v82 + 2, v90);
  v92.n128_u64[0] = AssetInfo.coverAspectRatio.getter(v90, v91);
  CGSize.scaledToFit(in:times:horizontally:)(1, v92.n128_f64[0] > 1.0, 156.0, 156.0, v92, 1.0);
  v94 = v93;
  v96 = static Alignment.center.getter(v95);
  _FrameLayout.init(width:height:alignment:)(&v152, 0, 1, v94, 0, v96, v97);
  v98 = v143;
  v99 = (uint64_t)v141;
  v100 = v144;
  (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v141, v89, v144);
  v101 = (_OWORD *)(v99 + *(int *)(v142 + 36));
  v102 = v153;
  *v101 = v152;
  v101[1] = v102;
  v101[2] = v154;
  (*(void (**)(char *, uint64_t))(v98 + 8))(v89, v100);
  v103 = v150;
  sub_66F14(v99, v150, &qword_326088);
  LOBYTE(v57) = v131;
  v151 = v131;
  sub_5E1A4(v81, v80, &qword_3203A8);
  sub_5E1A4(v103, v99, &qword_326088);
  v104 = v145;
  v105 = v134;
  v106 = v133;
  *v145 = v134;
  v104[1] = v106;
  *((_BYTE *)v104 + 16) = v57;
  v107 = v135;
  v104[3] = v135;
  *((_BYTE *)v104 + 32) = v132;
  *((double *)v104 + 5) = v40;
  v104[6] = v42;
  v104[7] = v44;
  v104[8] = v46;
  *((_BYTE *)v104 + 72) = 0;
  v108 = v104;
  v109 = sub_5C154(&qword_326090);
  sub_5E1A4(v80, (uint64_t)v108 + *(int *)(v109 + 48), &qword_3203A8);
  sub_5E1A4(v99, (uint64_t)v108 + *(int *)(v109 + 64), &qword_326088);
  sub_7BBCC(v105, v106, v57);
  swift_bridgeObjectRetain(v107);
  sub_7BBCC(v105, v106, v57);
  swift_bridgeObjectRetain(v107);
  sub_5E09C(v150, &qword_326088);
  sub_5E09C(v148, &qword_3203A8);
  sub_6693C(v105, v106, v57);
  swift_bridgeObjectRelease(v107);
  sub_5E09C(v99, &qword_326088);
  sub_5E09C(v147, &qword_3203A8);
  sub_6693C(v105, v106, v151);
  swift_bridgeObjectRelease(v107);
}

void sub_14FA44(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t *v2;
  uint64_t v4;
  __n128 v5;

  *(_QWORD *)a1 = static HorizontalAlignment.center.getter(a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v4 = sub_5C154(&qword_326080);
  sub_14EEC8(v2, (uint64_t *)(a1 + *(int *)(v4 + 44)), v5);
}

void sub_14FA8C(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.s.getter();
}

uint64_t sub_14FAC8()
{
  return sub_67060(&qword_326098, (uint64_t *)&unk_3260A0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_14FAF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;

  v4 = type metadata accessor for LocalizerLookupStrategy(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v5 = __chkstk_darwin(v4);
  v41 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizerDefaultValue(0, v5);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContentKind(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_66898(a1, v14);
  v45 = SeriesInfo.assetCount.getter(v14, v15);
  v46 = v16;
  v17 = a1[3];
  v18 = a1[4];
  sub_66898(a1, v17);
  v19 = SeriesInfo.assetMinimumCount.getter(v17, v18);
  v44 = v20;
  v21 = a1[3];
  v22 = a1[4];
  sub_66898(a1, v21);
  dispatch thunk of SeriesInfo.contentKind.getter(v21, v22);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v23 == enum case for ContentKind.pdf(_:))
  {
    v25 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
  }
  if (v23 != enum case for ContentKind.audiobook(_:))
  {
    v32 = a2;
    if (v23 != enum case for ContentKind.regularBook(_:))
    {
      if (v23 == enum case for ContentKind.manga(_:))
      {
        LocalizerDefaultValue.init(stringLiteral:)("Series · Manga", 15, 0, v24);
        v34 = v41;
        v33 = v42;
        v35 = v43;
        (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for LocalizerLookupStrategy.default(_:), v43);
        static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000024, 0x8000000000272B70, 0, v9, v34);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v40);
LABEL_10:
        v29 = type metadata accessor for LocalizerRequest(0);
        v30 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
        v31 = v32;
        return v30(v31, 0, 1, v29);
      }
      if (v23 != enum case for ContentKind.unknownBook(_:))
      {
        v38 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a2, 1, 1, v38);
        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      }
    }
    v36 = swift_allocObject(&unk_2EED20, 41, 7);
    *(_QWORD *)(v36 + 16) = v45;
    *(_BYTE *)(v36 + 24) = v46 & 1;
    *(_QWORD *)(v36 + 32) = v19;
    *(_BYTE *)(v36 + 40) = v44 & 1;
    static LocalizerRequest.custom(_:)(sub_150D50, v36, v37);
    swift_release(v36);
    goto LABEL_10;
  }
  v27 = swift_allocObject(&unk_2EED48, 41, 7);
  *(_QWORD *)(v27 + 16) = v45;
  *(_BYTE *)(v27 + 24) = v46 & 1;
  *(_QWORD *)(v27 + 32) = v19;
  *(_BYTE *)(v27 + 40) = v44 & 1;
  static LocalizerRequest.custom(_:)(sub_150D6C, v27, v28);
  swift_release(v27);
  v29 = type metadata accessor for LocalizerRequest(0);
  v30 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v31 = a2;
  return v30(v31, 0, 1, v29);
}

uint64_t sub_14FEB0(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t inited;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  __n128 v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  __n128 v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, __n128);
  char v83[96];
  char v84[80];

  LODWORD(v75) = a5;
  v74 = a4;
  LODWORD(v81) = a3;
  v76 = a2;
  v80 = type metadata accessor for LocalizerLookupStrategy(0);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v79 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3256B8);
  __chkstk_darwin(v7);
  v77 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v72 - v11;
  v13 = type metadata accessor for LocalizerDefaultValue(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v72 - v18;
  v20 = a1[3];
  v21 = a1[4];
  sub_66898(a1, v20);
  LocalizerDefaultValue.init(stringLiteral:)("Series", 6, 2, v22);
  v23 = Localizer.string(forKey:defaultValue:)(0xD00000000000001ELL, 0x8000000000271F20, v19, v20, v21);
  v25 = v24;
  v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v19, v13);
  v82 = (void (*)(char *, uint64_t, __n128))v26;
  if ((v81 & 1) != 0)
  {
    if ((v75 & 1) != 0)
    {
      swift_bridgeObjectRelease(v25);
      v67 = a1[3];
      v68 = a1[4];
      sub_66898(a1, v67);
      LocalizerDefaultValue.init(stringLiteral:)("Series", 6, 2, v69);
      v46 = Localizer.string(forKey:defaultValue:)(0xD00000000000001ELL, 0x8000000000271F20, v19, v67, v68);
      v82(v19, v13, v70);
    }
    else
    {
      v73 = a1[3];
      v76 = a1[4];
      sub_66898(a1, v73);
      v81 = v25;
      LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Audiobooks", 21, 2, v48);
      LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Audiobook", 20, 2, v49);
      v75 = v23;
      v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v51 = (uint64_t)v12;
      v50(v12, 1, 1, v13);
      v52 = (uint64_t)v77;
      v50(v77, 1, 1, v13);
      v53 = v78;
      v54 = v79;
      v55 = v80;
      (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v79, enum case for LocalizerLookupStrategy.default(_:), v80);
      v76 = Localizer.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v74, 0xD00000000000002DLL, 0x80000000002720D0, 0, v19, v16, v51, v52, 0, 0, v54, v73, v76);
      v74 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
      sub_150D90(v52);
      sub_150D90(v51);
      v57 = (void (*)(char *, uint64_t))v82;
      ((void (*)(char *, uint64_t))v82)(v16, v13);
      v57(v19, v13);
      v58 = a1[3];
      v59 = a1[4];
      sub_66898(a1, v58);
      v60 = sub_5C154(&qword_3206C0);
      inited = swift_initStackObject(v60, v84);
      *(_OWORD *)(inited + 16) = xmmword_255F00;
      *(_QWORD *)(inited + 32) = 0x736569726573;
      *(_QWORD *)(inited + 40) = 0xE600000000000000;
      v62 = v81;
      *(_QWORD *)(inited + 48) = v75;
      *(_QWORD *)(inited + 56) = v62;
      *(_QWORD *)(inited + 64) = 0xD000000000000011;
      *(_QWORD *)(inited + 72) = 0x8000000000272BF0;
      v63 = v74;
      *(_QWORD *)(inited + 80) = v76;
      *(_QWORD *)(inited + 88) = v63;
      v64 = sub_52A70(inited);
      LocalizerDefaultValue.init(stringLiteral:)("@@series@@ · @@localizedMinCount@@", 35, 0, v65);
      v46 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000039, 0x8000000000272BB0, v64, v19, v58, v59);
      v66 = swift_bridgeObjectRelease(v64);
      ((void (*)(char *, uint64_t, __n128))v57)(v19, v13, v66);
    }
  }
  else
  {
    v81 = v25;
    v27 = a1[3];
    v73 = a1[4];
    v28 = v27;
    v74 = sub_66898(a1, v27);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Audiobooks", 20, 2, v29);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Audiobook", 19, 2, v30);
    v75 = v23;
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v31(v12, 1, 1, v13);
    v32 = (uint64_t)v77;
    v31(v77, 1, 1, v13);
    v33 = v78;
    v34 = v79;
    v35 = v80;
    (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v79, enum case for LocalizerLookupStrategy.default(_:), v80);
    v76 = Localizer.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v76, 0xD000000000000026, 0x8000000000272000, 0, v19, v16, v12, v32, 0, 0, v34, v28, v73);
    v74 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    sub_150D90(v32);
    sub_150D90((uint64_t)v12);
    v37 = (void (*)(char *, uint64_t))v82;
    ((void (*)(char *, uint64_t))v82)(v16, v13);
    v37(v19, v13);
    v38 = a1[3];
    v39 = a1[4];
    sub_66898(a1, v38);
    v40 = sub_5C154(&qword_3206C0);
    v41 = swift_initStackObject(v40, v83);
    *(_OWORD *)(v41 + 16) = xmmword_255F00;
    *(_QWORD *)(v41 + 32) = 0x736569726573;
    *(_QWORD *)(v41 + 40) = 0xE600000000000000;
    v42 = v81;
    *(_QWORD *)(v41 + 48) = v75;
    *(_QWORD *)(v41 + 56) = v42;
    strcpy((char *)(v41 + 64), "localizedCount");
    *(_BYTE *)(v41 + 79) = -18;
    v43 = v74;
    *(_QWORD *)(v41 + 80) = v76;
    *(_QWORD *)(v41 + 88) = v43;
    v44 = sub_52A70(v41);
    LocalizerDefaultValue.init(stringLiteral:)("@@series@@ · @@localizedCount@@", 32, 0, v45);
    v46 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000032, 0x8000000000272C40, v44, v19, v38, v39);
    v47 = swift_bridgeObjectRelease(v44);
    ((void (*)(char *, uint64_t, __n128))v37)(v19, v13, v47);
  }
  return v46;
}

uint64_t sub_1505F8(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t inited;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  __n128 v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  __n128 v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, __n128);
  char v83[96];
  char v84[80];

  LODWORD(v75) = a5;
  v74 = a4;
  LODWORD(v81) = a3;
  v76 = a2;
  v80 = type metadata accessor for LocalizerLookupStrategy(0);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v79 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3256B8);
  __chkstk_darwin(v7);
  v77 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v72 - v11;
  v13 = type metadata accessor for LocalizerDefaultValue(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v72 - v18;
  v20 = a1[3];
  v21 = a1[4];
  sub_66898(a1, v20);
  LocalizerDefaultValue.init(stringLiteral:)("Series", 6, 2, v22);
  v23 = Localizer.string(forKey:defaultValue:)(0xD00000000000001ELL, 0x8000000000271F20, v19, v20, v21);
  v25 = v24;
  v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v19, v13);
  v82 = (void (*)(char *, uint64_t, __n128))v26;
  if ((v81 & 1) != 0)
  {
    if ((v75 & 1) != 0)
    {
      swift_bridgeObjectRelease(v25);
      v67 = a1[3];
      v68 = a1[4];
      sub_66898(a1, v67);
      LocalizerDefaultValue.init(stringLiteral:)("Series", 6, 2, v69);
      v46 = Localizer.string(forKey:defaultValue:)(0xD00000000000001ELL, 0x8000000000271F20, v19, v67, v68);
      v82(v19, v13, v70);
    }
    else
    {
      v73 = a1[3];
      v76 = a1[4];
      sub_66898(a1, v73);
      v81 = v25;
      LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Books", 16, 2, v48);
      LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Book", 15, 2, v49);
      v75 = v23;
      v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v51 = (uint64_t)v12;
      v50(v12, 1, 1, v13);
      v52 = (uint64_t)v77;
      v50(v77, 1, 1, v13);
      v53 = v78;
      v54 = v79;
      v55 = v80;
      (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v79, enum case for LocalizerLookupStrategy.default(_:), v80);
      v76 = Localizer.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v74, 0xD000000000000028, 0x8000000000272070, 0, v19, v16, v51, v52, 0, 0, v54, v73, v76);
      v74 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
      sub_150D90(v52);
      sub_150D90(v51);
      v57 = (void (*)(char *, uint64_t))v82;
      ((void (*)(char *, uint64_t))v82)(v16, v13);
      v57(v19, v13);
      v58 = a1[3];
      v59 = a1[4];
      sub_66898(a1, v58);
      v60 = sub_5C154(&qword_3206C0);
      inited = swift_initStackObject(v60, v84);
      *(_OWORD *)(inited + 16) = xmmword_255F00;
      *(_QWORD *)(inited + 32) = 0x736569726573;
      *(_QWORD *)(inited + 40) = 0xE600000000000000;
      v62 = v81;
      *(_QWORD *)(inited + 48) = v75;
      *(_QWORD *)(inited + 56) = v62;
      *(_QWORD *)(inited + 64) = 0xD000000000000011;
      *(_QWORD *)(inited + 72) = 0x8000000000272BF0;
      v63 = v74;
      *(_QWORD *)(inited + 80) = v76;
      *(_QWORD *)(inited + 88) = v63;
      v64 = sub_52A70(inited);
      LocalizerDefaultValue.init(stringLiteral:)("@@series@@ · @@localizedMinCount@@", 35, 0, v65);
      v46 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000039, 0x8000000000272BB0, v64, v19, v58, v59);
      v66 = swift_bridgeObjectRelease(v64);
      ((void (*)(char *, uint64_t, __n128))v57)(v19, v13, v66);
    }
  }
  else
  {
    v81 = v25;
    v27 = a1[3];
    v73 = a1[4];
    v28 = v27;
    v74 = sub_66898(a1, v27);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Books", 15, 2, v29);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Book", 14, 2, v30);
    v75 = v23;
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v31(v12, 1, 1, v13);
    v32 = (uint64_t)v77;
    v31(v77, 1, 1, v13);
    v33 = v78;
    v34 = v79;
    v35 = v80;
    (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v79, enum case for LocalizerLookupStrategy.default(_:), v80);
    v76 = Localizer.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v76, 0xD000000000000021, 0x8000000000271FB0, 0, v19, v16, v12, v32, 0, 0, v34, v28, v73);
    v74 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    sub_150D90(v32);
    sub_150D90((uint64_t)v12);
    v37 = (void (*)(char *, uint64_t))v82;
    ((void (*)(char *, uint64_t))v82)(v16, v13);
    v37(v19, v13);
    v38 = a1[3];
    v39 = a1[4];
    sub_66898(a1, v38);
    v40 = sub_5C154(&qword_3206C0);
    v41 = swift_initStackObject(v40, v83);
    *(_OWORD *)(v41 + 16) = xmmword_255F00;
    *(_QWORD *)(v41 + 32) = 0x736569726573;
    *(_QWORD *)(v41 + 40) = 0xE600000000000000;
    v42 = v81;
    *(_QWORD *)(v41 + 48) = v75;
    *(_QWORD *)(v41 + 56) = v42;
    strcpy((char *)(v41 + 64), "localizedCount");
    *(_BYTE *)(v41 + 79) = -18;
    v43 = v74;
    *(_QWORD *)(v41 + 80) = v76;
    *(_QWORD *)(v41 + 88) = v43;
    v44 = sub_52A70(v41);
    LocalizerDefaultValue.init(stringLiteral:)("@@series@@ · @@localizedCount@@", 32, 0, v45);
    v46 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000032, 0x8000000000272C40, v44, v19, v38, v39);
    v47 = swift_bridgeObjectRelease(v44);
    ((void (*)(char *, uint64_t, __n128))v37)(v19, v13, v47);
  }
  return v46;
}

uint64_t sub_150D40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_150D50(uint64_t a1)
{
  return sub_150D78(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1505F8);
}

uint64_t sub_150D5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_150D6C(uint64_t a1)
{
  return sub_150D78(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_14FEB0);
}

uint64_t sub_150D78(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40));
}

uint64_t sub_150D90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_3256B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_150DD0(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, _QWORD *);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  void (*v34)(id *);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;

  v4 = v3;
  v34 = a1;
  v35 = a2;
  v6 = sub_5C154((uint64_t *)&unk_326320);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)type metadata accessor for CoverViewModel(0, v7);
  v11 = *(v10 - 1);
  __chkstk_darwin(v10);
  v33 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v30 = (char *)&v28 - v14;
  if ((unint64_t)a3 >> 62)
    goto LABEL_20;
  v15 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a3);
  for (; v15; v15 = _CocoaArrayWrapper.endIndex.getter(v27))
  {
    v36 = v11;
    v32 = a3 & 0xC000000000000001;
    v37 = (char *)&_swiftEmptyArrayStorage;
    v11 = 4;
    v29 = a3;
    v31 = v15;
    while (1)
    {
      v16 = v10;
      v17 = v32
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a3)
          : *(id *)(a3 + 8 * v11);
      v10 = v17;
      v18 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v38 = v17;
      v34(&v38);
      if (v4)
      {
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(a3);

        return;
      }

      v19 = v36;
      v10 = v16;
      if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v36 + 48))(v9, 1, v16) == 1)
      {
        sub_5E09C((uint64_t)v9, (uint64_t *)&unk_326320);
      }
      else
      {
        v20 = *(void (**)(char *, char *, _QWORD *))(v19 + 32);
        v21 = v30;
        v20(v30, v9, v16);
        v20(v33, v21, v16);
        v22 = (unint64_t)v37;
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
          v22 = sub_57020(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
        v24 = *(_QWORD *)(v22 + 16);
        v23 = *(_QWORD *)(v22 + 24);
        v37 = (char *)v22;
        if (v24 >= v23 >> 1)
          v37 = (char *)sub_57020(v23 > 1, v24 + 1, 1, (unint64_t)v37);
        v25 = v36;
        v26 = v37;
        *((_QWORD *)v37 + 2) = v24 + 1;
        v10 = v16;
        v20(&v26[((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v24], v33, v16);
        a3 = v29;
      }
      ++v11;
      if (v18 == v31)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (a3 < 0)
      v27 = a3;
    else
      v27 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_24:
  swift_bridgeObjectRelease(a3);
}

void *sub_1510C0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *result;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  result = &_swiftEmptyArrayStorage;
  v15 = (unint64_t)&_swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v8 = a3 + 32;
    swift_bridgeObjectRetain(a3);
    do
    {
      v10 = a1(&v14, v8);
      if (v3)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)swift_bridgeObjectRelease(v15);
      }
      v11 = v14;
      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v13 = *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
        v12 = *(_QWORD *)((char *)&dword_18 + (v15 & 0xFFFFFFFFFFFFFF8));
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized Array._endMutation()(v9);
      }
      v8 += 40;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(a3);
    return (void *)v15;
  }
  return result;
}

void *sub_1511D8(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v19;
  id v20;
  unint64_t v21;

  v4 = v3;
  v21 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    for (i = 4; ; ++i)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v20 = v9;
      a1(&v19, &v20);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v21);
      }

      v13 = v19;
      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v15 = *(_QWORD *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFFF8));
        v14 = *(_QWORD *)((char *)&dword_18 + (v21 & 0xFFFFFFFFFFFFFF8));
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v21;
      }
    }
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_151378()
{
  return ContextActionItem.identifier.getter();
}

uint64_t ContextActionItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - v5;
  UUID.init()(v7);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  v8 = sub_648E0(&qword_3260B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  AnyHashable.init<A>(_:)(v3, v0, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t ContextActionItem.subtitle.getter()
{
  return 0;
}

uint64_t ContextActionItem.attributes.getter()
{
  return 0;
}

uint64_t ContextActionItem.asyncSubMenu.getter()
{
  uint64_t v0;

  return sub_158888(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

double sub_151494@<D0>(uint64_t a1@<X8>)
{
  return SeriesRoomListHeaderComponentModel.segue.getter(a1);
}

void ContextActionItem.title.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v2);
  sub_2302BC();
}

uint64_t ContextActionItem.menuItemView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *(_QWORD *)(a1 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(a1);
  v20 = v9;
  v21 = v10;
  v11 = sub_668BC(&v19);
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16);
  v12(v11, v3, a1);
  v12((uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0)), v3, a1);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(&unk_2EED70, v14 + v8, v13 | 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  a3[3] = (uint64_t)&type metadata for ContextActionMenuItemView;
  a3[4] = sub_15800C();
  v16 = swift_allocObject(&unk_2EED98, 120, 7);
  *a3 = v16;
  *(_QWORD *)(v16 + 16) = swift_getKeyPath(&unk_2610A8);
  *(_BYTE *)(v16 + 56) = 0;
  result = sub_5DC98(&v19, v16 + 64);
  *(_QWORD *)(v16 + 104) = sub_157FF0;
  *(_QWORD *)(v16 + 112) = v15;
  return result;
}

uint64_t sub_151618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, _OWORD *), uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[40];
  _OWORD v37[9];
  _OWORD v38[2];

  v35 = a8;
  v33 = a7;
  v32 = a4;
  v34 = a3;
  v12 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = sub_5C154(&qword_329740);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  a6(a5, v37);
  sub_5E1A4(a1, (uint64_t)v36, &qword_326190);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v12);
  type metadata accessor for MainActor(0);
  v19 = v32;
  swift_bridgeObjectRetain(v32);
  v21 = static MainActor.shared.getter(v20);
  v22 = *(unsigned __int8 *)(v13 + 80);
  v23 = (v22 + 264) & ~v22;
  v24 = swift_allocObject(v33, v23 + v14, v22 | 7);
  *(_QWORD *)(v24 + 16) = v21;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  v25 = v38[0];
  *(_OWORD *)(v24 + 160) = v37[8];
  *(_OWORD *)(v24 + 176) = v25;
  *(_OWORD *)(v24 + 185) = *(_OWORD *)((char *)v38 + 9);
  v26 = v37[5];
  *(_OWORD *)(v24 + 96) = v37[4];
  *(_OWORD *)(v24 + 112) = v26;
  v27 = v37[7];
  *(_OWORD *)(v24 + 128) = v37[6];
  *(_OWORD *)(v24 + 144) = v27;
  v28 = v37[1];
  *(_OWORD *)(v24 + 32) = v37[0];
  *(_OWORD *)(v24 + 48) = v28;
  v29 = v37[3];
  *(_OWORD *)(v24 + 64) = v37[2];
  *(_OWORD *)(v24 + 80) = v29;
  *(_QWORD *)(v24 + 208) = v34;
  *(_QWORD *)(v24 + 216) = v19;
  sub_66F14((uint64_t)v36, v24 + 224, &qword_326190);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24 + v23, (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v30 = sub_1D979C((uint64_t)v17, v35, v24);
  return swift_release(v30);
}

uint64_t sub_151834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[40];

  v45 = a7;
  v46 = a3;
  v39 = a5;
  v37 = a4;
  v42 = a1;
  v43 = a2;
  v9 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  v12 = v10;
  __chkstk_darwin(v9);
  v41 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a6 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v15);
  v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_329740);
  __chkstk_darwin(v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v18;
  v19 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v39, a6);
  sub_5E1A4(v42, (uint64_t)v47, &qword_326190);
  v20 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v43, v9);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(a4);
  v22 = static MainActor.shared.getter(v21);
  v23 = *(unsigned __int8 *)(v13 + 80);
  v24 = (v23 + 48) & ~v23;
  v25 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned __int8 *)(v20 + 80);
  v28 = v20;
  v29 = (v27 + v26 + 40) & ~v27;
  v30 = (char *)swift_allocObject(&unk_2EF068, v29 + v11, v23 | v27 | 7);
  *((_QWORD *)v30 + 2) = v22;
  *((_QWORD *)v30 + 3) = &protocol witness table for MainActor;
  v31 = v45;
  *((_QWORD *)v30 + 4) = a6;
  *((_QWORD *)v30 + 5) = v31;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v30[v24], v38, a6);
  v32 = &v30[v25];
  v33 = v37;
  *(_QWORD *)v32 = v46;
  *((_QWORD *)v32 + 1) = v33;
  sub_66F14((uint64_t)v47, (uint64_t)&v30[v26], &qword_326190);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v30[v29], v41, v40);
  v34 = sub_1D979C((uint64_t)v44, (uint64_t)&unk_3262A0, (uint64_t)v30);
  return swift_release(v34);
}

uint64_t sub_151A80(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[7] = a5;
  v6 = type metadata accessor for FigaroClickEvent.ActionContext(0, a1);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[11] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[12] = v9;
  v5[13] = v10;
  return swift_task_switch(sub_151B14, v9, v10);
}

uint64_t sub_151B14()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[9];
  v1 = v0[10];
  v4 = (_QWORD *)v0[7];
  v3 = v0[8];
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for FigaroClickEvent.ActionContext.actionSheet(_:), v3);
  v5 = v4[14];
  v6 = v4[15];
  sub_66898(v4 + 11, v5);
  v0[5] = &type metadata for LikeActionItem;
  v0[6] = &protocol witness table for LikeActionItem;
  v7 = swift_allocObject(&unk_2EEF50, 185, 7);
  v0[2] = v7;
  sub_15889C((uint64_t)v4, v7 + 16);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 32))(v0 + 2, v5, v6);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  sub_152208(v1, v8);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v1, v3);
  v9 = (_QWORD *)swift_task_alloc(dword_326634);
  v0[14] = v9;
  *v9 = v0;
  v9[1] = sub_151C2C;
  return LikeActionItem.handle()();
}

uint64_t sub_151C2C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  return swift_task_switch(sub_159760, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_151C78(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[7] = a5;
  v6 = type metadata accessor for FigaroClickEvent.ActionContext(0, a1);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[11] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[12] = v9;
  v5[13] = v10;
  return swift_task_switch(sub_151D0C, v9, v10);
}

uint64_t sub_151D0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[9];
  v1 = v0[10];
  v4 = (_QWORD *)v0[7];
  v3 = v0[8];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for FigaroClickEvent.ActionContext.actionSheet(_:), v3);
  v5 = v4[14];
  v6 = v4[15];
  sub_66898(v4 + 11, v5);
  v0[5] = &type metadata for RateAndReviewActionItem;
  v0[6] = &protocol witness table for RateAndReviewActionItem;
  v7 = swift_allocObject(&unk_2EEED8, 185, 7);
  v0[2] = v7;
  sub_158764((uint64_t)v4, v7 + 16);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 32))(v0 + 2, v5, v6);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  sub_1527FC(v1, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v9 = (_QWORD *)swift_task_alloc(dword_327614);
  v0[14] = v9;
  *v9 = v0;
  v9[1] = sub_151E24;
  return RateAndReviewActionItem.handle()();
}

uint64_t sub_151E24()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  return swift_task_switch(sub_151E70, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_151E70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_151EA8(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v9[32] = v16;
  v9[33] = v17;
  v9[30] = a8;
  v9[31] = a9;
  v9[28] = a6;
  v9[29] = a7;
  v9[27] = a5;
  v10 = type metadata accessor for FigaroClickEvent.ActionContext(0, a1);
  v9[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[35] = v11;
  v9[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MainActor(0);
  v9[37] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  v9[38] = v13;
  v9[39] = v14;
  return swift_task_switch(sub_151F50, v13, v14);
}

uint64_t sub_151F50()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;

  v1 = v0[36];
  v2 = v0[33];
  v12 = v0[34];
  v13 = v0[35];
  v3 = v0[32];
  v4 = v0[27];
  (*(void (**)(unint64_t, _QWORD))(v13 + 104))(v1, enum case for FigaroClickEvent.ActionContext.actionSheet(_:));
  (*(void (**)(uint64_t, uint64_t))(v2 + 120))(v3, v2);
  v6 = v0[5];
  v5 = v0[6];
  sub_66898(v0 + 2, v6);
  v0[10] = v3;
  v0[11] = v2;
  v7 = sub_668BC(v0 + 7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v7, v4, v3);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 32))(v0 + 7, v6, v5);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 7);
  sub_152DFC(v1, v8, v3, v2);
  (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v1, v12);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  v9 = *(int **)(v2 + 88);
  v14 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  v0[40] = v10;
  *v10 = v0;
  v10[1] = sub_1520A0;
  return ((uint64_t (*)(_QWORD, _QWORD))v14)(v0[32], v0[33]);
}

uint64_t sub_1520A0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 320));
  return swift_task_switch(sub_1520EC, *(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 312));
}

uint64_t sub_1520EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 296));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 80))(v3, v4, v2, v1);
  if (!*(_QWORD *)(v0 + 160))
  {
    v9 = (uint64_t *)&unk_326210;
    v10 = v0 + 136;
LABEL_6:
    sub_5E09C(v10, v9);
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v0 + 240);
  sub_5DC98((__int128 *)(v0 + 136), v0 + 96);
  sub_5E1A4(v5, v0 + 176, &qword_326190);
  v6 = *(_QWORD *)(v0 + 200);
  if (!v6)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
    v9 = &qword_326190;
    v10 = v0 + 176;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 208);
  sub_66898((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
  PerformAction.callAsFunction(_:withMetrics:)(v0 + 96, v7, v6, v8);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 176));
LABEL_7:
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_152208(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  Class isa;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char v73[80];
  __int128 v74[2];
  char v75;
  _QWORD v76[2];
  uint64_t v77;
  uint64_t v78;

  v3 = v2;
  v68 = a2;
  v62 = a1;
  v71 = type metadata accessor for FigaroClickEvent.TargetType(0);
  v69 = *(_QWORD *)(v71 - 8);
  v4 = __chkstk_darwin(v71);
  v70 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for FigaroClickEvent.Location.Type(0, v4);
  v63 = *(_QWORD *)(v64 - 8);
  v6 = __chkstk_darwin(v64);
  v65 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FigaroActionType(0, v6);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for FigaroClickEvent.ActionContext(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v72 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for FigaroClickEvent(0, v15);
  v66 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v2[3];
  v19 = v2[4];
  sub_66898(v2, v20);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v20, v19) & 1) != 0)
  {
    v21 = v2[3];
    v22 = v3[4];
    sub_66898(v3, v3[3]);
    ContextActionDataProtocol.selectionMode.getter(v21, v22, (uint64_t)v74);
    if ((v75 & 1) != 0)
    {
      sub_A4430(v74);
      if (qword_31E580 != -1)
        swift_once(&qword_31E580, sub_126680);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_5240C(v23, (uint64_t)qword_325028);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.fault.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "We can't and don't need to support reporting Figaro for multi-select because it's only available in library.", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

    }
    else
    {
      sub_5DC98(v74, (uint64_t)v76);
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v72, v62, v13);
      v28 = sub_5C154(&qword_323970);
      inited = swift_initStackObject(v28, v73);
      v61 = xmmword_258070;
      *(_OWORD *)(inited + 16) = xmmword_258070;
      *(_QWORD *)(inited + 32) = static Metrics.Keys.isUPP.getter();
      *(_QWORD *)(inited + 40) = v30;
      v31 = v77;
      v32 = v78;
      sub_66898(v76, v77);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 296))(v31, v32);
      *(_QWORD *)(inited + 72) = &type metadata for Bool;
      *(_BYTE *)(inited + 48) = v33 & 1;
      v62 = sub_52E00(inited);
      v34 = *((unsigned __int8 *)v3 + 168);
      if (v34 == 19)
      {
        v35 = 0xE800000000000000;
        v36 = 0x657461676976616ELL;
      }
      else
      {
        LOBYTE(v74[0]) = *((_BYTE *)v3 + 168);
        v36 = ContextActionType.rawValue.getter();
      }
      *v12 = v36;
      v12[1] = v35;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for FigaroActionType.custom(_:), v8);
      v37 = sub_5C154(&qword_3261B0);
      v38 = type metadata accessor for FigaroClickEvent.Location(0);
      v39 = swift_allocObject(v37, ((*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v38 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80) | 7);
      *(_OWORD *)(v39 + 16) = v61;
      v40 = v77;
      v41 = v78;
      sub_66898(v76, v77);
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
      v44 = v43;
      LOBYTE(v74[0]) = v34;
      sub_2302BC();
      v46 = v45;
      v48 = v47;
      v49 = v65;
      (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v65, enum case for FigaroClickEvent.Location.Type.button(_:), v64);
      FigaroClickEvent.Location.init(adamId:name:locationPosition:locationType:)(v42, v44, v46, v48, v68, v49);
      v50 = v77;
      v51 = v78;
      sub_66898(v76, v77);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
      v54 = v53;
      v55 = v70;
      (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v70, enum case for FigaroClickEvent.TargetType.button(_:), v71);
      FigaroClickEvent.init(actionContext:actionDetails:actionType:actionURLString:locations:targetId:targetType:)(v72, v62, v12, 0, 0, v39, v52, v54, v55);
      v56 = sub_648E0(&qword_3261B8, (uint64_t (*)(uint64_t))&type metadata accessor for FigaroClickEvent, (uint64_t)&protocol conformance descriptor for FigaroClickEvent);
      v57 = v67;
      v58 = FigaroEventBuilding.build()(v67, v56);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v18, v57);
      v59 = (void *)objc_opt_self(JSAApplication);
      type metadata accessor for FigaroKey(0);
      sub_648E0(&qword_3261C0, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_257118);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v59, "recordNativeEvent:", isa, swift_bridgeObjectRelease(v58).n128_f64[0]);

      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v76);
    }
  }
}

void sub_1527FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  Class isa;
  char *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char v76[80];
  __int128 v77[2];
  char v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;

  v3 = v2;
  v71 = a2;
  *(_QWORD *)&v64 = a1;
  v74 = type metadata accessor for FigaroClickEvent.TargetType(0);
  v72 = *(_QWORD *)(v74 - 8);
  v4 = __chkstk_darwin(v74);
  v73 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for FigaroClickEvent.Location.Type(0, v4);
  v65 = *(_QWORD *)(v66 - 8);
  v6 = __chkstk_darwin(v66);
  v67 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FigaroActionType(0, v6);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for FigaroClickEvent.ActionContext(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v75 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for FigaroClickEvent(0, v15);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v2 + 5;
  v19 = v2[8];
  v20 = v2[9];
  sub_66898(v2 + 5, v19);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v19, v20) & 1) != 0)
  {
    v21 = v2[8];
    v22 = v3[9];
    sub_66898(v18, v3[8]);
    ContextActionDataProtocol.selectionMode.getter(v21, v22, (uint64_t)v77);
    if ((v78 & 1) != 0)
    {
      sub_A4430(v77);
      if (qword_31E580 != -1)
        swift_once(&qword_31E580, sub_126680);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_5240C(v23, (uint64_t)qword_325028);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.fault.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "We can't and don't need to support reporting Figaro for multi-select because it's only available in library.", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

    }
    else
    {
      sub_5DC98(v77, (uint64_t)v79);
      (*(void (**)(char *, _QWORD, uint64_t))(v14 + 16))(v75, v64, v13);
      v28 = sub_5C154(&qword_323970);
      inited = swift_initStackObject(v28, v76);
      v64 = xmmword_258070;
      *(_OWORD *)(inited + 16) = xmmword_258070;
      *(_QWORD *)(inited + 32) = static Metrics.Keys.isUPP.getter();
      *(_QWORD *)(inited + 40) = v30;
      v31 = v80;
      v32 = v81;
      sub_66898(v79, v80);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 296))(v31, v32);
      *(_QWORD *)(inited + 72) = &type metadata for Bool;
      *(_BYTE *)(inited + 48) = v33 & 1;
      v34 = sub_52E00(inited);
      v35 = *((unsigned __int8 *)v3 + 168);
      if (v35 == 19)
      {
        v36 = 0xE800000000000000;
        v37 = 0x657461676976616ELL;
      }
      else
      {
        LOBYTE(v77[0]) = *((_BYTE *)v3 + 168);
        v37 = ContextActionType.rawValue.getter();
      }
      *v12 = v37;
      v12[1] = v36;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for FigaroActionType.custom(_:), v8);
      v38 = sub_5C154(&qword_3261B0);
      v39 = type metadata accessor for FigaroClickEvent.Location(0);
      v40 = swift_allocObject(v38, ((*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v39 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) | 7);
      *(_OWORD *)(v40 + 16) = v64;
      v41 = v80;
      v42 = v81;
      sub_66898(v79, v80);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
      v45 = v44;
      LOBYTE(v77[0]) = v35;
      sub_2302BC();
      v47 = v46;
      v49 = v48;
      v50 = v67;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v67, enum case for FigaroClickEvent.Location.Type.button(_:), v66);
      FigaroClickEvent.Location.init(adamId:name:locationPosition:locationType:)(v43, v45, v47, v49, v71, v50);
      v51 = v80;
      v52 = v81;
      sub_66898(v79, v80);
      v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v51, v52);
      v55 = v54;
      v56 = v73;
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v73, enum case for FigaroClickEvent.TargetType.button(_:), v74);
      v63 = v56;
      v57 = v68;
      FigaroClickEvent.init(actionContext:actionDetails:actionType:actionURLString:locations:targetId:targetType:)(v75, v34, v12, 0, 0, v40, v53, v55, v63);
      v58 = sub_648E0(&qword_3261B8, (uint64_t (*)(uint64_t))&type metadata accessor for FigaroClickEvent, (uint64_t)&protocol conformance descriptor for FigaroClickEvent);
      v59 = v70;
      v60 = FigaroEventBuilding.build()(v70, v58);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v57, v59);
      v61 = (void *)objc_opt_self(JSAApplication);
      type metadata accessor for FigaroKey(0);
      sub_648E0(&qword_3261C0, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_257118);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v61, "recordNativeEvent:", isa, swift_bridgeObjectRelease(v60).n128_f64[0]);

      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v79);
    }
  }
}

void sub_152DFC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(__int128 *__return_ptr, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  Class isa;
  char *v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char v79[80];
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v74 = a2;
  v65 = a1;
  v77 = type metadata accessor for FigaroClickEvent.TargetType(0);
  v75 = *(_QWORD *)(v77 - 8);
  v6 = __chkstk_darwin(v77);
  v76 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for FigaroClickEvent.Location.Type(0, v6);
  v67 = *(_QWORD *)(v68 - 8);
  v8 = __chkstk_darwin(v68);
  v69 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for FigaroActionType(0, v8);
  v10 = *(_QWORD *)(v66 - 8);
  v11 = __chkstk_darwin(v66);
  v71 = (uint64_t *)((char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for FigaroClickEvent.ActionContext(0, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v78 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for FigaroClickEvent(0, v15);
  v72 = *(_QWORD *)(v73 - 8);
  v17 = __chkstk_darwin(v73);
  v70 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(a4 + 104);
  v19(&v80, a3, a4, v17);
  v21 = v81;
  v20 = v82;
  sub_66898(&v80, v81);
  LOBYTE(v20) = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v21, v20);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v80);
  if ((v20 & 1) != 0)
  {
    ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v19)(v84, a3, a4);
    v22 = v85;
    v23 = v86;
    sub_66898(v84, v85);
    ContextActionDataProtocol.selectionMode.getter(v22, v23, (uint64_t)&v80);
    if ((v83 & 1) != 0)
    {
      sub_A4430(&v80);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v84);
      if (qword_31E580 != -1)
        swift_once(&qword_31E580, sub_126680);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_5240C(v24, (uint64_t)qword_325028);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.fault.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_0, v26, v27, "We can't and don't need to support reporting Figaro for multi-select because it's only available in library.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

    }
    else
    {
      sub_5DC98(&v80, (uint64_t)&v87);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v84);
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v78, v65, v13);
      v29 = sub_5C154(&qword_323970);
      inited = swift_initStackObject(v29, v79);
      v64 = xmmword_258070;
      *(_OWORD *)(inited + 16) = xmmword_258070;
      *(_QWORD *)(inited + 32) = static Metrics.Keys.isUPP.getter();
      *(_QWORD *)(inited + 40) = v31;
      v32 = v88;
      v33 = v89;
      sub_66898(&v87, v88);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 296))(v32, v33);
      *(_QWORD *)(inited + 72) = &type metadata for Bool;
      *(_BYTE *)(inited + 48) = v34 & 1;
      v65 = sub_52E00(inited);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v80, a3, a4);
      v35 = a3;
      if (v80 == 19)
      {
        v36 = 0xE800000000000000;
        v37 = 0x657461676976616ELL;
      }
      else
      {
        LOBYTE(v84[0]) = v80;
        v37 = ContextActionType.rawValue.getter();
      }
      v38 = v71;
      *v71 = v37;
      v38[1] = v36;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v10 + 104))(v38, enum case for FigaroActionType.custom(_:), v66);
      v39 = sub_5C154(&qword_3261B0);
      v40 = *(_QWORD *)(type metadata accessor for FigaroClickEvent.Location(0) - 8);
      v41 = swift_allocObject(v39, ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72), *(unsigned __int8 *)(v40 + 80) | 7);
      *(_OWORD *)(v41 + 16) = v64;
      v42 = v88;
      v43 = v89;
      sub_66898(&v87, v88);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
      v46 = v45;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(v35, a4);
      v49 = v48;
      v50 = v69;
      (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v69, enum case for FigaroClickEvent.Location.Type.button(_:), v68);
      FigaroClickEvent.Location.init(adamId:name:locationPosition:locationType:)(v44, v46, v47, v49, v74, v50);
      v51 = v88;
      v52 = v89;
      sub_66898(&v87, v88);
      v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v51, v52);
      v55 = v54;
      v56 = v76;
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v76, enum case for FigaroClickEvent.TargetType.button(_:), v77);
      v63 = v56;
      v57 = v70;
      FigaroClickEvent.init(actionContext:actionDetails:actionType:actionURLString:locations:targetId:targetType:)(v78, v65, v38, 0, 0, v41, v53, v55, v63);
      v58 = sub_648E0(&qword_3261B8, (uint64_t (*)(uint64_t))&type metadata accessor for FigaroClickEvent, (uint64_t)&protocol conformance descriptor for FigaroClickEvent);
      v59 = v73;
      v60 = FigaroEventBuilding.build()(v73, v58);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v57, v59);
      v61 = (void *)objc_opt_self(JSAApplication);
      type metadata accessor for FigaroKey(0);
      sub_648E0(&qword_3261C0, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_257118);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v61, "recordNativeEvent:", isa, swift_bridgeObjectRelease(v60).n128_f64[0]);

      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v87);
    }
  }
}

id ContextActionItem.image.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  void *v5;
  id v6;
  id v7;
  NSString v8;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v10);
  sub_22F3CC();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  v5 = (void *)objc_opt_self(UIImage);
  v6 = objc_msgSend(v5, "systemImageNamed:", v4);

  if (v6)
  {
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v7 = BSUIBundle();
    v8 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v5, "imageNamed:inBundle:withConfiguration:", v8, v7, 0, swift_bridgeObjectRelease(v3).n128_f64[0]);

  }
  return v6;
}

uint64_t ContextActionItem.uiAction.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(a1);
  v9 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(__n128))(v10 + 48))(v8) & 1) == 0)
    return 0;
  v29 = sub_5C194(0, &qword_3260C8, UIAction_ptr);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v27 = v12;
  v28 = v11;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v26 = v14;
  v15 = ContextActionItem.image.getter(a1, a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v30, a1, a2);
  ContextActionType.rawValue.getter();
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  v19 = swift_bridgeObjectRelease(v17);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 40))(a1, a2, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  v21 = *(unsigned __int8 *)(v6 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(&unk_2EEDC0, v22 + v7, v21 | 7);
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)(v23 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v23 + v22, v9, a1);
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v28, v27, v13, v26, v15, 0, v18, 0, 0, v20, 0, sub_15813C, v23);
}

uint64_t sub_153738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v7 = *(_QWORD *)(a3 - 8);
  v35 = *(_QWORD *)(v7 + 64);
  v36 = v7;
  __chkstk_darwin(a1);
  v34 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_329740);
  v10 = __chkstk_darwin(v9);
  v33 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FigaroClickEvent.ActionContext(0, v10);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v13 + 104))(v16, enum case for FigaroClickEvent.ActionContext.actionSheet(_:), v12, v14);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 120))(v38, a3, a4);
  v18 = v39;
  v17 = v40;
  sub_66898(v38, v39);
  v37[3] = a3;
  v37[4] = a4;
  v19 = (char *)sub_668BC(v37);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v20(v19, a2, a3);
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v17 + 32))(v37, v18, v17);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v37);
  sub_152DFC((unint64_t)v16, v21, a3, a4);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v38);
  v22 = type metadata accessor for TaskPriority(0);
  v23 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v33, 1, 1, v22);
  v24 = v34;
  v20(v34, a2, a3);
  v25 = type metadata accessor for MainActor(0);
  v26 = static MainActor.shared.getter(v25);
  v27 = v36;
  v28 = *(unsigned __int8 *)(v36 + 80);
  v29 = (v28 + 48) & ~v28;
  v30 = (char *)swift_allocObject(&unk_2EF040, v29 + v35, v28 | 7);
  *((_QWORD *)v30 + 2) = v26;
  *((_QWORD *)v30 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v30 + 4) = a3;
  *((_QWORD *)v30 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v30[v29], v24, a3);
  v31 = sub_1D979C(v23, (uint64_t)&unk_326280, (uint64_t)v30);
  return swift_release(v31);
}

uint64_t sub_15399C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);

  v9 = type metadata accessor for MainActor(0);
  v6[2] = v9;
  v6[3] = static MainActor.shared.getter(v9);
  v10 = *(int **)(a6 + 88);
  v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v6[4] = v11;
  *v11 = v6;
  v11[1] = sub_153A2C;
  return v13(a5, a6);
}

uint64_t sub_153A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_7B380, v2, v3);
}

UIMenu ContextActionItem.subMenu.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  void *v19;
  void *v20;
  objc_class *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  __n128 v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::OpaquePointer v30;
  uint64_t v31;
  uint64_t v32;
  UIImage_optional v33;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(uint64_t (**)(__n128))(v10 + 48))(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a1);
  if ((v11 & 1) != 0)
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 56);
    v13 = v12(a1, a2);
    v32 = v13;
    v14 = sub_5C154(&qword_3260D0);
    v15 = sub_67060(&qword_3260D8, &qword_3260D0, (uint64_t)&protocol conformance descriptor for [A]);
    v16 = Collection.isNotEmpty.getter(v14, v15);
    v17 = swift_bridgeObjectRelease(v13);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v9, a1, v17);
    if ((v16 & 1) != 0)
    {
      sub_5C194(0, (unint64_t *)&unk_3260E0, UIMenu_ptr);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
      v20 = v19;
      v21 = (objc_class *)ContextActionItem.image.getter(a1, a2);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v32, a1, a2);
      ContextActionType.rawValue.getter();
      v23 = v22;
      v24 = String._bridgeToObjectiveC()();
      v25 = swift_bridgeObjectRelease(v23);
      v26 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v12)(a1, a2, v25);
      __chkstk_darwin(v26);
      *(&v31 - 4) = a1;
      *(&v31 - 3) = a2;
      v27 = sub_1510C0((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_158158, (uint64_t)(&v31 - 6), v26);
      swift_bridgeObjectRelease(v26);
      v28._countAndFlagsBits = v18;
      v28._object = v20;
      v33.value.super.isa = v21;
      v33.is_nil = v24;
      return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v28, (Swift::String_optional)0, v33, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v27, v30);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  }
  return 0;
}

uint64_t sub_153CD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSString v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v10 = a1[3];
  v11 = a1[4];
  sub_66898(a1, v10);
  result = ContextActionItem.uiAction.getter(v10, v11);
  if (result)
  {
    v13 = (void *)result;
    v52 = a2;
    v14 = a1[3];
    v15 = a1[4];
    sub_66898(a1, v14);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 104))(v46, v14, v15);
    v16 = v47;
    v17 = v48;
    sub_66898(v46, v47);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
    v19 = v18;
    if (*(_QWORD *)(v18 + 16))
    {
      sub_5E0D8(v18 + 32, (uint64_t)&v49);
    }
    else
    {
      v51 = 0;
      v49 = 0u;
      v50 = 0u;
    }
    swift_bridgeObjectRelease(v19);
    v20 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v21 = v51;
      sub_66898(&v49, *((uint64_t *)&v50 + 1));
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
      v23 = v22;
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v49);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v46);
      v24 = objc_msgSend(v13, "title");
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v43 = v26;
      v44 = v25;

      v27 = objc_msgSend(v13, "subtitle");
      v45 = a4;
      if (v27)
      {
        v28 = v27;
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v41 = v30;
        v42 = v29;

      }
      else
      {
        v41 = 0;
        v42 = 0;
      }
      v31 = a3;
      v32 = objc_msgSend(v13, "image");
      v33 = String._bridgeToObjectiveC()();
      v34 = objc_msgSend(v13, "discoverabilityTitle", swift_bridgeObjectRelease(v23).n128_f64[0]);
      if (v34)
      {
        v35 = v34;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v38 = v37;

      }
      else
      {
        v36 = 0;
        v38 = 0;
      }
      sub_5C194(0, &qword_3260C8, UIAction_ptr);
      v39 = (*(uint64_t (**)(uint64_t))(v45 + 40))(v31);
      v40 = swift_allocObject(&unk_2EF018, 24, 7);
      *(_QWORD *)(v40 + 16) = v13;
      result = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v44, v43, v42, v41, v32, 0, v33, v36, v38, v39, 0, sub_15938C, v40);
    }
    else
    {

      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v46);
      sub_5E09C((uint64_t)&v49, (uint64_t *)&unk_326130);
      result = 0;
    }
  }
  *a5 = result;
  return result;
}

double ContextActionItem.swipeActionButton(for:sectionData:pageData:contentData:pageMetrics:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int *v50;
  uint64_t v51;
  uint64_t (**v52)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>);
  double result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;

  v60 = a6;
  v65 = a5;
  v66 = a8;
  v61 = a3;
  v62 = a4;
  v67 = a1;
  v68 = a2;
  v70 = a9;
  v10 = sub_5C154(&qword_31F490);
  __chkstk_darwin(v10);
  v69 = (uint64_t *)((char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_5C154((uint64_t *)&unk_3260F0);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v13;
  __chkstk_darwin(v12);
  v71 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_325570);
  v58 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v58 + 64);
  __chkstk_darwin(v15);
  v56 = (uint64_t)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154((uint64_t *)&unk_326100);
  v57 = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(v57 + 64);
  __chkstk_darwin(v17);
  v55 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_3202B0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = a7;
  v23 = *(_QWORD *)(a7 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  v26 = __chkstk_darwin(v25);
  v27 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v23 + 16))(v27, v59, v26);
  sub_5E1A4(v60, (uint64_t)v22, &qword_3202B0);
  sub_5E1A4(v61, (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_326100);
  sub_5E1A4(v62, (uint64_t)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_325570);
  sub_5E1A4(v65, v71, (uint64_t *)&unk_3260F0);
  v28 = *(unsigned __int8 *)(v23 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = *(unsigned __int8 *)(v20 + 80);
  v31 = (v24 + v29 + v30) & ~v30;
  v32 = (v21 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(unsigned __int8 *)(v57 + 80);
  v34 = (v33 + v32 + 16) & ~v33;
  v35 = *(unsigned __int8 *)(v58 + 80);
  v36 = (v18 + v35 + v34) & ~v35;
  v37 = *(unsigned __int8 *)(v63 + 80);
  v38 = (v16 + v37 + v36) & ~v37;
  v39 = swift_allocObject(&unk_2EEDE8, v38 + v64, v28 | v30 | v33 | v35 | v37 | 7);
  v40 = v66;
  *(_QWORD *)(v39 + 16) = v54;
  *(_QWORD *)(v39 + 24) = v40;
  (*(void (**)(uint64_t, char *))(v23 + 32))(v39 + v29, v27);
  sub_66F14((uint64_t)v22, v39 + v31, &qword_3202B0);
  v41 = (_QWORD *)(v39 + v32);
  v42 = v68;
  *v41 = v67;
  v41[1] = v42;
  sub_66F14(v55, v39 + v34, (uint64_t *)&unk_326100);
  sub_66F14(v56, v39 + v36, &qword_325570);
  sub_66F14(v71, v39 + v38, (uint64_t *)&unk_3260F0);
  KeyPath = swift_getKeyPath(&unk_2610D0);
  v72 = 0;
  v44 = swift_getKeyPath(&unk_261100);
  v45 = (uint64_t)v69;
  *v69 = v44;
  v46 = sub_5C154(&qword_326110);
  swift_storeEnumTagMultiPayload(v45, v46, 0);
  v47 = swift_getKeyPath(&unk_261130);
  v48 = v70;
  *v70 = KeyPath;
  *((_BYTE *)v48 + 40) = v72;
  v49 = v48;
  v50 = (int *)sub_5C154(&qword_326118);
  sub_66F14(v45, (uint64_t)v49 + v50[9], &qword_31F490);
  v51 = (uint64_t)v49 + v50[10];
  *(_QWORD *)v51 = v47;
  *(_QWORD *)(v51 + 8) = 0;
  *(_BYTE *)(v51 + 16) = 0;
  v52 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>))((char *)v49 + v50[11]);
  *v52 = sub_1583B0;
  v52[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>))v39;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v42).n128_u64[0];
  return result;
}

uint64_t sub_15438C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, __n128);
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char v101[8];

  v89 = a8;
  v86 = a7;
  v75 = a6;
  v87 = a3;
  v88 = a4;
  v81 = a2;
  v80 = a1;
  v90 = a9;
  v77 = a12;
  v76 = a11;
  v73 = a10;
  v93 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v99 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v84 = v15;
  v98 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154((uint64_t *)&unk_3260F0);
  v78 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v79 = v17;
  v97 = (uint64_t)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_325570);
  v74 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v70 = v19;
  v95 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5C154((uint64_t *)&unk_326100);
  v72 = *(_QWORD *)(v20 - 8);
  v21 = *(_QWORD *)(v72 + 64);
  __chkstk_darwin(v20);
  v94 = (uint64_t)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_3202B0);
  v71 = *(_QWORD *)(v22 - 8);
  v23 = *(_QWORD *)(v71 + 64);
  __chkstk_darwin(v22);
  v92 = (uint64_t)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a13 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v26);
  v27 = sub_5C154(&qword_3261F0);
  __chkstk_darwin(v27);
  v96 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_5C154(&qword_3261F8);
  v83 = *(_QWORD *)(v85 - 8);
  v29 = __chkstk_darwin(v85);
  v82 = (char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a14 + 40);
  v32 = a5;
  v100 = a14;
  if ((v31(a13, a14, v29) & 2) != 0)
  {
    v35 = v96;
    v36.n128_f64[0] = static ButtonRole.destructive.getter();
    v37 = type metadata accessor for ButtonRole(0, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v35, 0, 1, v37);
  }
  else
  {
    v34 = type metadata accessor for ButtonRole(0, v33);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v96, 1, 1, v34);
  }
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v67 = v24;
  v68 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v32;
  v38(v68, v32, a13);
  sub_5E1A4(v75, v92, &qword_3202B0);
  sub_5E1A4(v73, v94, (uint64_t *)&unk_326100);
  sub_5E1A4(v76, v95, &qword_325570);
  sub_5E1A4(v77, v97, (uint64_t *)&unk_3260F0);
  sub_5E1A4(v80, (uint64_t)v101, &qword_326190);
  v39 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v81, v93);
  v40 = *(unsigned __int8 *)(v24 + 80);
  v41 = (v40 + 32) & ~v40;
  v42 = *(unsigned __int8 *)(v71 + 80);
  v43 = (v25 + v42 + v41) & ~v42;
  v91 = a13;
  v44 = (v23 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = *(unsigned __int8 *)(v72 + 80);
  v46 = (v45 + v44 + 16) & ~v45;
  v47 = *(unsigned __int8 *)(v74 + 80);
  v48 = (v21 + v47 + v46) & ~v47;
  v49 = *(unsigned __int8 *)(v78 + 80);
  v50 = (v70 + v49 + v48) & ~v49;
  v51 = (v79 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(unsigned __int8 *)(v39 + 80);
  v54 = (v53 + v52 + 40) & ~v53;
  v55 = swift_allocObject(&unk_2EEFC8, v54 + v84, v40 | v42 | v45 | v47 | v49 | v53 | 7);
  v56 = v100;
  *(_QWORD *)(v55 + 16) = v91;
  *(_QWORD *)(v55 + 24) = v56;
  (*(void (**)(uint64_t, char *))(v67 + 32))(v55 + v41, v68);
  sub_66F14(v92, v55 + v43, &qword_3202B0);
  v57 = (_QWORD *)(v55 + v44);
  v58 = v89;
  *v57 = v86;
  v57[1] = v58;
  sub_66F14(v94, v55 + v46, (uint64_t *)&unk_326100);
  sub_66F14(v95, v55 + v48, &qword_325570);
  sub_66F14(v97, v55 + v50, (uint64_t *)&unk_3260F0);
  v59 = (_QWORD *)(v55 + v51);
  v60 = v88;
  *v59 = v87;
  v59[1] = v60;
  sub_66F14((uint64_t)v101, v55 + v52, &qword_326190);
  v61 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v99 + 32))(v55 + v54, v98, v93);
  __chkstk_darwin(v61);
  v62 = v100;
  *(&v67 - 4) = v91;
  *(&v67 - 3) = v62;
  *(&v67 - 2) = v69;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v58);
  v63 = sub_5C154(&qword_321050);
  v64 = sub_67060((unint64_t *)&unk_326150, &qword_321050, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v65 = v82;
  Button.init(role:action:label:)(v96, sub_158D74, v55, sub_159768, &v67 - 6, v63, v64);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v83 + 32))(v90, v65, v85);
}

uint64_t sub_1549D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[16];

  v80 = a8;
  v70 = a7;
  v68 = a6;
  v67 = a5;
  v86 = a4;
  v79 = a3;
  v65 = a2;
  v64 = a1;
  v78 = a13;
  v85 = a9;
  v69 = a10;
  v73 = a11;
  v84 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v82 = *(_QWORD *)(v84 - 8);
  v77 = *(_QWORD *)(v82 + 64);
  __chkstk_darwin(v84);
  v83 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154((uint64_t *)&unk_3260F0);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  v75 = *(_QWORD *)(v14 - 8);
  v76 = v15;
  __chkstk_darwin(v14);
  v81 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_325570);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  v71 = *(_QWORD *)(v17 - 8);
  v72 = v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v20;
  v21 = sub_5C154((uint64_t *)&unk_326100);
  v66 = *(_QWORD *)(v21 - 8);
  v22 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v21);
  v62 = (uint64_t)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5C154(&qword_3202B0);
  v59 = *(_QWORD *)(v23 - 8);
  v24 = *(_QWORD *)(v59 + 64);
  __chkstk_darwin(v23);
  v60 = (uint64_t)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a12;
  v25 = *(_QWORD *)(a12 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  __chkstk_darwin(v27);
  v61 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5C154(&qword_329740);
  __chkstk_darwin(v28);
  v30 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = v30;
  v31 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v57 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v64, a12);
  sub_5E1A4(v65, (uint64_t)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_3202B0);
  sub_5E1A4(v67, (uint64_t)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_326100);
  sub_5E1A4(v68, (uint64_t)v20, &qword_325570);
  sub_5E1A4(v70, v81, (uint64_t *)&unk_3260F0);
  sub_5E1A4(v69, (uint64_t)v87, &qword_326190);
  v32 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v83, v73, v84);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v86);
  v73 = static MainActor.shared.getter(v33);
  v34 = *(unsigned __int8 *)(v25 + 80);
  v35 = (v34 + 48) & ~v34;
  v36 = *(unsigned __int8 *)(v59 + 80);
  v37 = (v26 + v36 + v35) & ~v36;
  v38 = (v24 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(unsigned __int8 *)(v66 + 80);
  v40 = (v39 + v38 + 16) & ~v39;
  v41 = *(unsigned __int8 *)(v71 + 80);
  v42 = (v22 + v41 + v40) & ~v41;
  v43 = *(unsigned __int8 *)(v75 + 80);
  v44 = (v72 + v43 + v42) & ~v43;
  v45 = (v76 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v46 = (v45 + 23) & 0xFFFFFFFFFFFFFFF8;
  v47 = *(unsigned __int8 *)(v32 + 80);
  v48 = (v47 + v46 + 40) & ~v47;
  v49 = (char *)swift_allocObject(&unk_2EEFF0, v48 + v77, v34 | v36 | v39 | v41 | v43 | v47 | 7);
  *((_QWORD *)v49 + 2) = v73;
  *((_QWORD *)v49 + 3) = &protocol witness table for MainActor;
  v50 = v78;
  *((_QWORD *)v49 + 4) = v58;
  *((_QWORD *)v49 + 5) = v50;
  (*(void (**)(char *, char *))(v57 + 32))(&v49[v35], v61);
  sub_66F14(v60, (uint64_t)&v49[v37], &qword_3202B0);
  v51 = &v49[v38];
  v52 = v86;
  *(_QWORD *)v51 = v79;
  *((_QWORD *)v51 + 1) = v52;
  sub_66F14(v62, (uint64_t)&v49[v40], (uint64_t *)&unk_326100);
  sub_66F14((uint64_t)v63, (uint64_t)&v49[v42], &qword_325570);
  sub_66F14(v81, (uint64_t)&v49[v44], (uint64_t *)&unk_3260F0);
  v53 = &v49[v45];
  v54 = v85;
  *(_QWORD *)v53 = v80;
  *((_QWORD *)v53 + 1) = v54;
  sub_66F14((uint64_t)v87, (uint64_t)&v49[v46], &qword_326190);
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(&v49[v48], v83, v84);
  v55 = sub_1D979C((uint64_t)v74, (uint64_t)&unk_326208, (uint64_t)v49);
  return swift_release(v55);
}

uint64_t sub_154EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v8 + 304) = v18;
  *(_QWORD *)(v8 + 312) = v19;
  *(_OWORD *)(v8 + 272) = v16;
  *(_OWORD *)(v8 + 288) = v17;
  *(_OWORD *)(v8 + 256) = v15;
  *(_QWORD *)(v8 + 240) = a7;
  *(_QWORD *)(v8 + 248) = a8;
  *(_QWORD *)(v8 + 224) = a5;
  *(_QWORD *)(v8 + 232) = a6;
  *(_QWORD *)(v8 + 216) = a4;
  v9 = ((uint64_t (*)(_QWORD))type metadata accessor for FigaroClickEvent.ActionContext)(0);
  *(_QWORD *)(v8 + 320) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 328) = v10;
  *(_QWORD *)(v8 + 336) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 344) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 352) = v12;
  *(_QWORD *)(v8 + 360) = v13;
  return swift_task_switch(sub_154FA8, v12, v13);
}

uint64_t sub_154FA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  int *v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;

  v14 = v0[42];
  v15 = v0[41];
  v1 = v0[39];
  v2 = v0[38];
  v18 = v0[32];
  v19 = v0[33];
  v16 = v0[40];
  v17 = v0[31];
  v3 = v0[29];
  v13 = v0[30];
  v4 = v0[27];
  sub_1552A4(v0[28], v14);
  (*(void (**)(uint64_t, uint64_t))(v1 + 120))(v2, v1);
  v6 = v0[5];
  v5 = v0[6];
  sub_66898(v0 + 2, v6);
  v0[10] = v2;
  v0[11] = v1;
  v7 = sub_668BC(v0 + 7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v7, v4, v2);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v5 + 64))(v3, v13, v0 + 7, v6, v5);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 7);
  sub_152DFC(v14, v8, v2, v1);
  (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v14, v16);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  sub_155534(v3, v13, v17, v18, v19, v2, v1, v9);
  v10 = *(int **)(v1 + 88);
  v20 = (int *)((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v0[46] = v11;
  *v11 = v0;
  v11[1] = sub_15513C;
  return ((uint64_t (*)(_QWORD, _QWORD))v20)(v0[38], v0[39]);
}

uint64_t sub_15513C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 368));
  return swift_task_switch(sub_155188, *(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 360));
}

uint64_t sub_155188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  swift_release(*(_QWORD *)(v0 + 344));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 80))(v3, v4, v2, v1);
  if (!*(_QWORD *)(v0 + 160))
  {
    v9 = (uint64_t *)&unk_326210;
    v10 = v0 + 136;
LABEL_6:
    sub_5E09C(v10, v9);
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v0 + 288);
  sub_5DC98((__int128 *)(v0 + 136), v0 + 96);
  sub_5E1A4(v5, v0 + 176, &qword_326190);
  v6 = *(_QWORD *)(v0 + 200);
  if (!v6)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
    v9 = &qword_326190;
    v10 = v0 + 176;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 208);
  sub_66898((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
  PerformAction.callAsFunction(_:withMetrics:)(v0 + 96, v7, v6, v8);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 176));
LABEL_7:
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1552A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;

  v4 = sub_5C154((uint64_t *)&unk_326268);
  __chkstk_darwin(v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3202B0);
  __chkstk_darwin(v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PageMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(a1, (uint64_t)v9, &qword_3202B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_5E09C((uint64_t)v9, &qword_3202B0);
    goto LABEL_15;
  }
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  v16 = PageMetrics.pageFields.getter(v15);
  if (!v16)
  {
    v27 = 0u;
    v28 = 0u;
LABEL_13:
    sub_5E09C((uint64_t)&v27, &qword_31F8B0);
    goto LABEL_14;
  }
  v17 = v16;
  if (*(_QWORD *)(v16 + 16) && (v18 = sub_582B4(0x6570795465676170, 0xE800000000000000), (v19 & 1) != 0))
  {
    sub_5E1EC(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v27);
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
  }
  swift_bridgeObjectRelease(v17);
  if (!*((_QWORD *)&v28 + 1))
    goto LABEL_13;
  if ((swift_dynamicCast(v26, &v27, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_14:
    v14.n128_f64[0] = (*(double (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_15;
  }
  FigaroClickEvent.ActionContext.init(rawValue:)(v26[0], v26[1]);
  v20.n128_f64[0] = (*(double (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v21 = type metadata accessor for FigaroClickEvent.ActionContext(0, v20);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v6, 1, v21) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(a2, v6, v21);
  sub_5E09C((uint64_t)v6, (uint64_t *)&unk_326268);
LABEL_15:
  v23 = enum case for FigaroClickEvent.ActionContext.series(_:);
  v24 = type metadata accessor for FigaroClickEvent.ActionContext(0, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a2, v23, v24);
}

void sub_155534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, __n128);
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, __n128);
  uint64_t v56;
  void (*v57)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  char *v62;
  __n128 v63;
  char v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __n128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _QWORD v122[5];
  _QWORD v123[3];
  uint64_t v124;
  uint64_t v125;

  *(_QWORD *)&v114 = a5;
  v107 = a2;
  v106 = a1;
  v105 = type metadata accessor for LinkActionType(0, a8);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for ClickData(0);
  v111 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v115 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(v15);
  v109 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154((uint64_t *)&unk_3260F0);
  __chkstk_darwin(v17);
  v19 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ContentData(0);
  v116 = *(_QWORD *)(v20 - 8);
  v117 = v20;
  __chkstk_darwin(v20);
  v112 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_325570);
  __chkstk_darwin(v22);
  v24 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for PageData(0);
  v119 = *(_QWORD *)(v25 - 8);
  v120 = v25;
  __chkstk_darwin(v25);
  v118 = (char *)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v27);
  v29 = (char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for SectionData(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v121 = (char *)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a7 + 112);
  v108 = v8;
  v35 = v34(a6, a7, v32);
  if (!v35)
    goto LABEL_9;
  v36 = (void *)v35;
  sub_5E1A4(a3, (uint64_t)v29, (uint64_t *)&unk_326100);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) != 1)
  {
    v102 = v36;
    v39 = v121;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v121, v29, v30);
    sub_5E1A4(a4, (uint64_t)v24, &qword_325570);
    v41 = v119;
    v40 = v120;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v24, 1, v120) == 1)
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v39, v30);

      v37 = &qword_325570;
      v38 = (uint64_t)v24;
      goto LABEL_8;
    }
    v100 = v31;
    v101 = v30;
    v42 = v118;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v118, v24, v40);
    sub_5E1A4(v114, (uint64_t)v19, (uint64_t *)&unk_3260F0);
    v44 = v116;
    v43 = v117;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v19, 1, v117) == 1)
    {

      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v121, v101);
      v37 = (uint64_t *)&unk_3260F0;
      v38 = (uint64_t)v19;
      goto LABEL_8;
    }
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v112, v19, v43);
    v50 = v108;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a7 + 120))(v123, a6, a7);
    v51 = v124;
    v52 = v125;
    sub_66898(v123, v124);
    v122[3] = a6;
    v122[4] = a7;
    v53 = sub_668BC(v122);
    v54 = v110;
    v55 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v110 + 16);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v55)(v53, v50, a6);
    v56 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v52 + 64))(v106, v107, v122, v51, v52);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v122);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v123);
    v57 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a7 + 16);
    v57(v123, a6, a7);
    v58 = ContextActionType.rawValue.getter();
    v60 = v59;
    if (v58 == 0x706D615364616572 && v59 == 0xEA0000000000656CLL)
    {
      v61 = swift_bridgeObjectRelease(0xEA0000000000656CLL);
      v62 = v109;
      v55(v109, v50, a6, v61);
    }
    else
    {
      v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, 0x706D615364616572, 0xEA0000000000656CLL, 0);
      v65 = swift_bridgeObjectRelease(v60);
      v62 = v109;
      v55(v109, v50, a6, v65);
      if ((v64 & 1) == 0)
      {
        v57(v123, a6, a7);
        v66 = ContextActionType.rawValue.getter();
        v68 = v67;
        if (v66 != 0x6D61536F69647561 || v67 != 0xEB00000000656C70)
        {
          v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, 0x6D61536F69647561, 0xEB00000000656C70, 0);
          v97 = swift_bridgeObjectRelease(v68);
          v98 = (*(uint64_t (**)(char *, uint64_t, __n128))(v54 + 8))(v62, a6, v97);
          if ((v96 & 1) == 0)
          {
            v69 = PageData.pageType.getter(v98);
            v70 = v99;
            goto LABEL_23;
          }
LABEL_22:
          v69 = 0xD000000000000012;
          v70 = 0x8000000000272DA0;
LABEL_23:
          v71 = v104;
          (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v104, enum case for LinkActionType.swipe(_:), v105);
          ClickData.init(clickID:linkActionType:targetType:index:outBoundURL:)(0, 0, v71, v69, v70, v56, 0, 0);
          v72 = sub_5C154((uint64_t *)&unk_3224F0);
          v73 = type metadata accessor for DataEventTrait(0);
          v74 = *(_QWORD *)(v73 - 8);
          v75 = *(unsigned __int8 *)(v74 + 80);
          v76 = (v75 + 32) & ~v75;
          v77 = v76 + *(_QWORD *)(v74 + 72);
          v110 = v75 | 7;
          v107 = v77;
          v78 = swift_allocObject(v72, v77, v75 | 7);
          v114 = xmmword_258070;
          *(_OWORD *)(v78 + 16) = xmmword_258070;
          v79 = enum case for DataEventTrait.onlyOnce(_:);
          v109 = *(char **)(v74 + 104);
          LODWORD(v106) = enum case for DataEventTrait.onlyOnce(_:);
          ((void (*)(uint64_t, _QWORD, uint64_t))v109)(v78 + v76, enum case for DataEventTrait.onlyOnce(_:), v73);
          sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
          sub_648E0((unint64_t *)&unk_322500, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
          v80 = v102;
          BATracker.push<A>(data:traits:file:line:)(v121, v78, 0xD000000000000081);
          swift_bridgeObjectRelease(v78);
          v108 = v72;
          v81 = v77;
          v82 = v110;
          v83 = swift_allocObject(v72, v81, v110);
          *(_OWORD *)(v83 + 16) = v114;
          v84 = v79;
          v85 = (void (*)(uint64_t, uint64_t, uint64_t))v109;
          ((void (*)(uint64_t, uint64_t, uint64_t))v109)(v83 + v76, v84, v73);
          sub_648E0((unint64_t *)&unk_326230, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
          sub_648E0((unint64_t *)&unk_322510, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
          BATracker.push<A>(data:traits:file:line:)(v118, v83, 0xD000000000000081);
          swift_bridgeObjectRelease(v83);
          v86 = v72;
          v87 = v107;
          v88 = swift_allocObject(v86, v107, v82);
          *(_OWORD *)(v88 + 16) = v114;
          v89 = v106;
          v85(v88 + v76, v106, v73);
          sub_648E0((unint64_t *)&unk_326240, (uint64_t (*)(uint64_t))&type metadata accessor for ClickData, (uint64_t)&protocol conformance descriptor for ClickData);
          sub_648E0((unint64_t *)&unk_322520, (uint64_t (*)(uint64_t))&type metadata accessor for ClickData, (uint64_t)&protocol conformance descriptor for ClickData);
          BATracker.push<A>(data:traits:file:line:)(v115, v88, 0xD000000000000081);
          swift_bridgeObjectRelease(v88);
          v90 = swift_allocObject(v108, v87, v110);
          *(_OWORD *)(v90 + 16) = v114;
          v85(v90 + v76, v89, v73);
          sub_648E0(&qword_326250, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
          sub_648E0(&qword_326258, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
          v91 = v112;
          v92 = v117;
          BATracker.push<A>(data:traits:file:line:)(v112, v90, 0xD000000000000081);
          v93 = swift_bridgeObjectRelease(v90);
          v94 = type metadata accessor for ClickEvent(0, v93);
          v95 = sub_648E0(&qword_326260, (uint64_t (*)(uint64_t))&type metadata accessor for ClickEvent, (uint64_t)&protocol conformance descriptor for ClickEvent);
          BATracker.submit<A>(_:completion:)(v94, 0, 0, v94, v95);

          (*(void (**)(char *, uint64_t))(v111 + 8))(v115, v113);
          (*(void (**)(char *, uint64_t))(v116 + 8))(v91, v92);
          (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
          (*(void (**)(char *, uint64_t))(v100 + 8))(v121, v101);
          return;
        }
        v63 = swift_bridgeObjectRelease(0xEB00000000656C70);
      }
    }
    (*(void (**)(char *, uint64_t, __n128))(v54 + 8))(v62, a6, v63);
    goto LABEL_22;
  }

  v37 = (uint64_t *)&unk_326100;
  v38 = (uint64_t)v29;
LABEL_8:
  sub_5E09C(v38, v37);
LABEL_9:
  if (qword_31E580 != -1)
    swift_once(&qword_31E580, sub_126680);
  v45 = type metadata accessor for Logger(0);
  v46 = sub_5240C(v45, (uint64_t)qword_325028);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.fault.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl(&dword_0, v47, v48, "Tracker, sectionData, pageData or contentData is missing for AppAnalytics swipe action.", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

}

void ContextActionItem.swipeActionBackgroundColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t var1;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&var1);
  __asm { BR              X10 }
}

uint64_t sub_156098()
{
  return ((uint64_t (*)(void))static Color.clear.getter)();
}

uint64_t sub_1560A4()
{
  return ((uint64_t (*)(void))static Color.cyan.getter)();
}

uint64_t sub_1560B0()
{
  return ((uint64_t (*)(void))static Color.indigo.getter)();
}

uint64_t sub_1560BC()
{
  return ((uint64_t (*)(void))static Color.orange.getter)();
}

uint64_t sub_1560C8()
{
  return ((uint64_t (*)(void))static Color.blue.getter)();
}

uint64_t sub_1560D4()
{
  return ((uint64_t (*)(void))static Color.red.getter)();
}

uint64_t sub_1560E0()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray2Color");
  return ((uint64_t (*)(id))Color.init(uiColor:))(v0);
}

uint64_t sub_156188(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void (*v6)(_QWORD, id);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  Class isa;
  _QWORD v26[5];
  uint64_t v27;
  char v28[64];

  if (result)
  {
    v6 = (void (*)(_QWORD, id))result;
    v7 = a5[3];
    v8 = a5[4];
    sub_66898(a5, v7);
    v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
    swift_retain(a2);
    v10 = v9(v7, v8);
    if (v10)
    {
      v11 = (id)v10;
      v12 = swift_allocObject(&unk_2EF108, 32, 7);
      *(_QWORD *)(v12 + 16) = v6;
      *(_QWORD *)(v12 + 24) = a2;
      v26[4] = sub_159754;
      v27 = v12;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 1107296256;
      v26[2] = sub_156574;
      v26[3] = &unk_2EF120;
      v13 = _Block_copy(v26);
      v14 = v27;
      swift_retain(a2);
      swift_release(v14);
      objc_msgSend(v11, "get:", v13);
      _Block_release(v13);
    }
    else
    {
      v15 = sub_5C154(&qword_3206C0);
      inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 16) = xmmword_258070;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v17;
      *(_QWORD *)(inited + 48) = 0xD00000000000001ELL;
      *(_QWORD *)(inited + 56) = 0x8000000000272DC0;
      v18 = sub_52A70(inited);
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSItemProviderErrorDomain);
      v20 = v19;
      sub_215D54(v18);
      v22 = v21;
      swift_bridgeObjectRelease(v18);
      v23 = objc_allocWithZone((Class)NSError);
      v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v22);
      v11 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v24, -1000, isa);

      v6(0, v11);
    }

    return sub_6C2DC((uint64_t)v6, a2);
  }
  return result;
}

void sub_1563BC(UIImage *a1, uint64_t a2, void (*a3)(Class, id))
{
  NSData *v4;
  NSData *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  Class v20;
  id v21;
  uint64_t v22;

  if (a1 && (v4 = UIImagePNGRepresentation(a1)) != 0)
  {
    v5 = v4;
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    isa = Data._bridgeToObjectiveC()().super.isa;
    a3(isa, 0);

    sub_86850(v6, v8);
  }
  else
  {
    v10 = sub_5C154(&qword_3206C0);
    inited = swift_initStackObject(v10, &v22);
    *(_OWORD *)(inited + 16) = xmmword_258070;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v12;
    *(_QWORD *)(inited + 48) = 0xD00000000000002FLL;
    *(_QWORD *)(inited + 56) = 0x8000000000272DE0;
    v13 = sub_52A70(inited);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSItemProviderErrorDomain);
    v15 = v14;
    sub_215D54(v13);
    v17 = v16;
    swift_bridgeObjectRelease(v13);
    v18 = objc_allocWithZone((Class)NSError);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v20 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    v21 = objc_msgSend(v18, "initWithDomain:code:userInfo:", v19, -1000, v20);

    a3(0, v21);
  }
}

void sub_156574(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1565E8(uint64_t a1, void *aBlock, uint64_t ObjCClassMetadata, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(void *, uint64_t, uint64_t, uint64_t);
  void *v8;
  uint64_t v9;

  v7 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  if (v8)
  {
    v9 = swift_allocObject(&unk_2EF0E0, 24, 7);
    *(_QWORD *)(v9 + 16) = v8;
    v8 = sub_159728;
    if (!ObjCClassMetadata)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = 0;
  if (ObjCClassMetadata)
LABEL_3:
    ObjCClassMetadata = swift_getObjCClassMetadata(ObjCClassMetadata);
LABEL_4:
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v6);
  v7(v8, v9, ObjCClassMetadata, a4);
  swift_bridgeObjectRelease(a4);
  sub_6C2DC((uint64_t)v8, v9);
  return swift_release(v6);
}

void sub_1566CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t ContextActionItem.swipeActionShareButton.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  void (*v19)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[6];
  _QWORD v50[2];
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;

  v58 = a3;
  v6 = sub_5C154((uint64_t *)&unk_326120);
  __chkstk_darwin(v6);
  v57 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_321470);
  __chkstk_darwin(v8);
  v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)v50 - v17;
  v19 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))(a2 + 104);
  v56 = v3;
  v19(v62, a1, a2, v16);
  v20 = v63;
  v21 = v64;
  sub_66898(v62, v63);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  v23 = v22;
  if (*(_QWORD *)(v22 + 16))
  {
    sub_5E0D8(v22 + 32, (uint64_t)&v59);
  }
  else
  {
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
  }
  swift_bridgeObjectRelease(v23);
  if (*((_QWORD *)&v60 + 1))
  {
    sub_5DC98(&v59, (uint64_t)v65);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v62);
    v24 = v66;
    v25 = v67;
    sub_66898(v65, v66);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 264))(v24, v25);
    if (v27)
    {
      v28 = v27;
      URL.init(string:)(v26);
      v29 = swift_bridgeObjectRelease(v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1, v11, v29) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v10, v11);
        v39 = _s11BookStoreUI17ContextActionItemPAAE17shareLinkMetadata9assetInfo3urlSo06LPLinkI0CAA0d5AssetK8Protocol_p_10Foundation3URLVtF_0(v65, (uint64_t)v18);
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v18, v11);
        v40 = _s11BookStoreUI17ContextActionItemPAAE7subject3for05SwiftC04TextVSgAA0D17AssetInfoProtocol_p_tF_0(v65);
        v54 = v41;
        v55 = v40;
        v53 = v42;
        v52 = v43;
        v63 = sub_5C194(0, (unint64_t *)&qword_326140, LPLinkMetadata_ptr);
        v62[0] = v39;
        v51 = v39;
        v44 = v57;
        v45 = SharePreview<>.init(metadata:)(v62);
        v50[1] = v50;
        __chkstk_darwin(v45);
        v46 = sub_5C154(&qword_321050);
        v49[4] = sub_67060((unint64_t *)&unk_326150, &qword_321050, (uint64_t)&protocol conformance descriptor for Label<A, B>);
        v49[5] = sub_648E0((unint64_t *)&qword_321BA0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v49[2] = &protocol witness table for Never;
        v49[3] = &protocol witness table for Never;
        v49[0] = v46;
        v49[1] = v11;
        v47 = v58;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, char *, void (*)(), _QWORD *, void *, void *))ShareLink.init<A>(item:subject:message:preview:label:))(v14, v55, v54, v53, v52, 0, 0, 0, 0, v44, sub_15852C, v49, &type metadata for Never, &type metadata for Never);

        (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
        v48 = sub_5C154(&qword_321A70);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 0, 1, v48);
        return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v65);
      }
      sub_5E09C((uint64_t)v10, &qword_321470);
    }
    v30 = v65;
  }
  else
  {
    sub_5E09C((uint64_t)&v59, (uint64_t *)&unk_326130);
    v30 = v62;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v30);
  v31 = v58;
  if (qword_31E580 != -1)
    swift_once(&qword_31E580, sub_126680);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_5240C(v32, (uint64_t)qword_325028);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_0, v34, v35, "Can't create ShareLink without asset info", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

  v37 = sub_5C154(&qword_321A70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v31, 1, 1, v37);
}

void sub_156BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  void (*v7)(char *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];

  v5 = sub_5C154(&qword_321050);
  v6 = __chkstk_darwin(v5);
  v7 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(a3 + 16);
  ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))v7)(v11, a2, a3, v6);
  sub_230620();
  v11[0] = v8;
  v11[1] = v9;
  v7(&v10, a2, a3);
  __asm { BR              X10 }
}

uint64_t sub_156CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v5 = sub_668F8();
  Label<>.init<A>(_:systemImage:)(v4 - 96, 0, 0xE000000000000000, &type metadata for String, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void sub_156D38()
{
  JUMPOUT(0x156CE0);
}

void sub_156D58()
{
  JUMPOUT(0x156CE0);
}

void sub_156D7C()
{
  JUMPOUT(0x156CE0);
}

void sub_156D98()
{
  JUMPOUT(0x156CE0);
}

void sub_156DB8()
{
  JUMPOUT(0x156CE0);
}

uint64_t FigaroProvider.contextMenuActionTypeToIndexDict.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t FigaroProvider.contextMenuActionTypeToIndexDict.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t FigaroProvider.swipeActionTypeToIndexDict.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t FigaroProvider.swipeActionTypeToIndexDict.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

Swift::Void (__swiftcall *FigaroProvider.swipeActionTypeToIndexDict.modify())()
{
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

BookStoreUI::FigaroProvider __swiftcall FigaroProvider.init()()
{
  _QWORD *v0;
  BookStoreUI::FigaroProvider result;

  *v0 = &_swiftEmptyDictionarySingleton;
  v0[1] = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t FigaroProvider.contextMenuActionPosition(for:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v3 = *v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_66898(a1, v4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 16))(v26, v4, v5);
  v6 = ContextActionType.rawValue.getter();
  v8 = v7;
  if (*(_QWORD *)(v3 + 16) && (v9 = sub_582B4(v6, v7), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v9);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    if (qword_31E598 != -1)
      swift_once(&qword_31E598, sub_126740);
    v12 = type metadata accessor for Logger(0);
    sub_5240C(v12, (uint64_t)qword_325070);
    v13 = sub_5E0D8((uint64_t)a1, (uint64_t)v26);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = v27;
      v19 = v28;
      sub_66898(v26, v27);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 16))(&v24, v18, v19);
      v20 = ContextActionType.rawValue.getter();
      v22 = v21;
      v24 = sub_57CD8(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v22);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v26);
      _os_log_impl(&dword_0, v14, v15, "Unable to locate figaro position in the context menu for %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v26);
    }

    return -1;
  }
  return v11;
}

uint64_t FigaroProvider.swipeActionPosition(for:with:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v5 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v8 = sub_582B4(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(a2);
      v11 = a3[3];
      v12 = a3[4];
      sub_66898(a3, v11);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 16))(v34, v11, v12);
      v13 = ContextActionType.rawValue.getter();
      v15 = v14;
      if (*(_QWORD *)(v10 + 16))
      {
        v16 = sub_582B4(v13, v14);
        if ((v17 & 1) != 0)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v16);
          swift_bridgeObjectRelease(v15);
          swift_bridgeObjectRelease(v10);
          return v18;
        }
      }
      swift_bridgeObjectRelease(v15);
      v19 = v10;
    }
    else
    {
      v19 = a2;
    }
    swift_bridgeObjectRelease(v19);
  }
  if (qword_31E598 != -1)
    swift_once(&qword_31E598, sub_126740);
  v20 = type metadata accessor for Logger(0);
  sub_5240C(v20, (uint64_t)qword_325070);
  v21 = sub_5E0D8((uint64_t)a3, (uint64_t)v34);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v33 = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = v35;
    v27 = v36;
    sub_66898(v34, v35);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v27 + 16))(&v32, v26, v27);
    v28 = ContextActionType.rawValue.getter();
    v30 = v29;
    v32 = sub_57CD8(v28, v29, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v30);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v34);
    _os_log_impl(&dword_0, v22, v23, "Unable to locate figaro position in the swipe action menu for %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v34);
  }

  return -1;
}

void sub_157354()
{
  sub_2302BC();
}

uint64_t sub_157384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1573CC(a1, a2, (uint64_t)&unk_2EEF50, (void (*)(uint64_t, _OWORD *))sub_15889C, (uint64_t)&unk_2EEF78, (uint64_t)sub_158920, a3);
}

uint64_t sub_1573A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1573CC(a1, a2, (uint64_t)&unk_2EEED8, (void (*)(uint64_t, _OWORD *))sub_158764, (uint64_t)&unk_2EEF00, (uint64_t)sub_1587A4, a3);
}

uint64_t sub_1573CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, _OWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v11;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t result;
  _OWORD v21[9];
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v11 = v7;
  v24 = a1;
  v25 = a2;
  *(_QWORD *)&v23 = swift_allocObject(a3, 185, 7);
  a4(v11, (_OWORD *)(v23 + 16));
  a4(v11, v21);
  v13 = (_OWORD *)swift_allocObject(a5, 185, 7);
  v14 = v22[0];
  v13[9] = v21[8];
  v13[10] = v14;
  *(_OWORD *)((char *)v13 + 169) = *(_OWORD *)((char *)v22 + 9);
  v15 = v21[5];
  v13[5] = v21[4];
  v13[6] = v15;
  v16 = v21[7];
  v13[7] = v21[6];
  v13[8] = v16;
  v17 = v21[1];
  v13[1] = v21[0];
  v13[2] = v17;
  v18 = v21[3];
  v13[3] = v21[2];
  v13[4] = v18;
  a7[3] = (uint64_t)&type metadata for ContextActionMenuItemView;
  a7[4] = sub_15800C();
  v19 = swift_allocObject(&unk_2EED98, 120, 7);
  *a7 = v19;
  *(_QWORD *)(v19 + 16) = swift_getKeyPath(&unk_2610A8);
  *(_BYTE *)(v19 + 56) = 0;
  result = sub_5DC98(&v23, v19 + 64);
  *(_QWORD *)(v19 + 104) = a6;
  *(_QWORD *)(v19 + 112) = v13;
  return result;
}

void sub_1574EC()
{
  sub_2302BC();
}

uint64_t sub_15751C()
{
  unint64_t v0;

  v0 = sub_1594A0();
  return EnvironmentValues.subscript.getter(&type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v0);
}

uint64_t sub_157558(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _BYTE v4[40];

  sub_5E1A4(a1, (uint64_t)v4, &qword_3202A0);
  sub_5E1A4((uint64_t)v4, (uint64_t)v3, &qword_3202A0);
  v1 = sub_1594A0();
  EnvironmentValues.subscript.setter(v3, &type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v1);
  return sub_5E09C((uint64_t)v4, &qword_3202A0);
}

uint64_t sub_1575C8()
{
  return EnvironmentValues.performAction.getter();
}

uint64_t sub_1575E8()
{
  return EnvironmentValues.metricsFieldsContext.getter();
}

id _s11BookStoreUI17ContextActionItemPAAE17shareLinkMetadata9assetInfo3urlSo06LPLinkI0CAA0d5AssetK8Protocol_p_10Foundation3URLVtF_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  NSURL *v43;
  void *v44;
  void *v45;
  double v46;
  NSString v47;
  id v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_BYTE *, uint64_t);
  NSString v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  double v62;
  NSString v63;
  objc_class *v64;
  id v65;
  double v66;
  NSString v67;
  uint64_t v68;
  void *v69;
  double v70;
  NSString v71;
  id v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSString v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSString v90;
  id v91;
  id v92;
  _BYTE v94[12];
  int v95;
  os_log_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD aBlock[3];
  void *v108;
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  __int128 v111[2];

  v105 = type metadata accessor for UTType(0);
  v102 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = &v94[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v94[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 312))(v9, v10);
  v12 = v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_66898(a1, v13);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  v16 = v15;
  if (qword_31E580 != -1)
    swift_once(&qword_31E580, sub_126680);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_5240C(v17, (uint64_t)qword_325028);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  sub_5E0D8((uint64_t)a1, (uint64_t)aBlock);
  swift_bridgeObjectRetain_n(v16, 2);
  swift_bridgeObjectRetain_n(v12, 2);
  v98 = v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  v22 = v21;
  v23 = os_log_type_enabled(v20, v21);
  v100 = a2;
  v101 = v16;
  if (v23)
  {
    v24 = swift_slowAlloc(42, -1);
    v25 = swift_slowAlloc(128, -1);
    v97 = v25;
    *(_QWORD *)&v111[0] = v25;
    *(_DWORD *)v24 = 136315906;
    v96 = v20;
    v95 = v22;
    v26 = URL.absoluteString.getter(v25);
    v28 = v27;
    v106 = sub_57CD8(v26, v27, (uint64_t *)v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, aBlock, v24 + 4, v24 + 12);
    v29 = swift_bridgeObjectRelease(v28);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v6 + 8))(v8, v5, v29);
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain(v12);
    v30 = Optional<A>.description.getter(v103, v12);
    v32 = v31;
    swift_bridgeObjectRelease(v12);
    v106 = sub_57CD8(v30, v32, (uint64_t *)v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, aBlock, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v24 + 22) = 2080;
    swift_bridgeObjectRetain(v16);
    v33 = Optional<A>.description.getter(v99, v16);
    v35 = v34;
    swift_bridgeObjectRelease(v16);
    v106 = sub_57CD8(v33, v35, (uint64_t *)v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, aBlock, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease_n(v16, 2);
    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v24 + 32) = 2080;
    v36 = v108;
    v37 = v109;
    sub_66898(aBlock, (uint64_t)v108);
    v38 = (*((uint64_t (**)(void *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))v37 + 1))(v36, v37);
    v40 = v39;
    v106 = sub_57CD8(v38, v39, (uint64_t *)v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, aBlock, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease(v40);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(aBlock);
    v20 = v96;
    _os_log_impl(&dword_0, v96, (os_log_type_t)v95, "Instantiating shareLinkMetadata with %s, %s, %s for %s", (uint8_t *)v24, 0x2Au);
    v41 = v97;
    swift_arrayDestroy(v97, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease_n(v16, 2);
    swift_bridgeObjectRelease_n(v12, 2);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(aBlock);
  }

  v42 = objc_msgSend(objc_allocWithZone((Class)LPLinkMetadata), "init");
  URL._bridgeToObjectiveC()(v43);
  v45 = v44;
  objc_msgSend(v42, "setURL:", v44);

  if (v12)
  {
    swift_bridgeObjectRetain(v12);
    v47 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v46 = swift_bridgeObjectRelease(v12).n128_u64[0];
  }
  else
  {
    v47 = 0;
  }
  objc_msgSend(v42, "setTitle:", v47, v46);

  v48 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  v49 = v104;
  v50 = static UTType.png.getter();
  UTType.identifier.getter(v50);
  v52 = v51;
  v53 = *(void (**)(_BYTE *, uint64_t))(v102 + 8);
  v53(v49, v105);
  v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52);
  sub_5E0D8((uint64_t)a1, (uint64_t)v111);
  v55 = swift_allocObject(&unk_2EF090, 56, 7);
  sub_5DC98(v111, v55 + 16);
  v109 = sub_A7060;
  v110 = v55;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1565E8;
  v108 = &unk_2EF0A8;
  v56 = _Block_copy(aBlock);
  swift_release(v110);
  objc_msgSend(v48, "registerItemForTypeIdentifier:loadHandler:", v54, v56);
  _Block_release(v56);

  v57 = objc_allocWithZone((Class)LPImage);
  v103 = (uint64_t)v48;
  v58 = objc_msgSend(v57, "initWithItemProvider:properties:placeholderImage:", v48, 0, 0);
  v59 = a1[3];
  v60 = a1[4];
  sub_66898(a1, v59);
  switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v60 + 16))(v59, v60))
  {
    case 1u:
    case 6u:
      swift_bridgeObjectRelease(v101);
      v61 = objc_msgSend(objc_allocWithZone((Class)LPFileMetadata), "init");
      if (v12)
      {
        v63 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v62 = swift_bridgeObjectRelease(v12).n128_u64[0];
      }
      else
      {
        v63 = 0;
      }
      objc_msgSend(v61, "setName:", v63, v62);

      objc_msgSend(v61, "setThumbnail:", v58);
      v77 = a1[3];
      v78 = a1[4];
      sub_66898(a1, v77);
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v78 + 16))(v77, v78) == 1)
      {
        v79 = v104;
        v80 = static UTType.pdf.getter();
      }
      else
      {
        v81 = a1[3];
        v82 = a1[4];
        sub_66898(a1, v81);
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v82 + 16))(v81, v82) != 6)
          goto LABEL_29;
        v79 = v104;
        v80 = static UTType.text.getter();
      }
      UTType.identifier.getter(v80);
      v84 = v83;
      v53(v79, v105);
      v85 = String._bridgeToObjectiveC()();
      objc_msgSend(v61, "setType:", v85, swift_bridgeObjectRelease(v84).n128_f64[0]);

LABEL_29:
      v86 = URL.isFileURL.getter();
      if ((v86 & 1) != 0)
      {
        URL.absoluteString.getter(v86);
        v88 = v87;
        v89 = objc_allocWithZone((Class)NSURL);
        v90 = String._bridgeToObjectiveC()();
        v91 = objc_msgSend(v89, "initFileURLWithPath:", v90, swift_bridgeObjectRelease(v88).n128_f64[0]);

        aBlock[0] = 0;
        v92 = objc_msgSend(v91, "bu_fileAllocatedSizeWithError:", aBlock);
        if (!aBlock[0])
          objc_msgSend(v61, "setSize:", v92);

      }
      v72 = v61;
      objc_msgSend(v42, "setSpecialization:", v72);

      v69 = (void *)v103;
LABEL_34:

      return v42;
    case 2u:
    case 7u:
      v64 = (objc_class *)LPiTunesMediaBookMetadata;
      goto LABEL_14;
    case 3u:
      v64 = (objc_class *)LPiTunesMediaAudioBookMetadata;
LABEL_14:
      v65 = objc_msgSend(objc_allocWithZone(v64), "init");
      if (v12)
      {
        v67 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v66 = swift_bridgeObjectRelease(v12).n128_u64[0];
      }
      else
      {
        v67 = 0;
      }
      v68 = v101;
      v69 = (void *)v103;
      objc_msgSend(v65, "setName:", v67, v66);

      objc_msgSend(v65, "setArtwork:", v58);
      if (v68)
      {
        v71 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v70 = swift_bridgeObjectRelease(v68).n128_u64[0];
      }
      else
      {
        v71 = 0;
      }
      objc_msgSend(v65, "setAuthor:", v71, v70);

      v72 = v65;
      objc_msgSend(v42, "setSpecialization:", v72);

      goto LABEL_34;
    default:
      swift_bridgeObjectRelease(v101);
      swift_bridgeObjectRelease(v12);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v76 = 0;
        _os_log_impl(&dword_0, v74, v75, "SharePreview metadata contains no specialization data", v76, 2u);
        swift_slowDealloc(v76, -1, -1);
        v72 = (id)v103;
        v69 = v74;
      }
      else
      {
        v72 = v74;
        v69 = (void *)v103;
      }
      goto LABEL_34;
  }
}

uint64_t sub_157FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return sub_151834(a1, a2, a3, a4, v4 + ((v6 + 32) & ~v6), v5, *(_QWORD *)(v4 + 24));
}

unint64_t sub_15800C()
{
  unint64_t result;

  result = qword_3260C0;
  if (!qword_3260C0)
  {
    result = swift_getWitnessTable(&unk_25AA3C, &type metadata for ContextActionMenuItemView);
    atomic_store(result, (unint64_t *)&qword_3260C0);
  }
  return result;
}

uint64_t sub_158050()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 40))
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1);
  }
  else
  {
    swift_release(*v1);
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1580A0()
{
  unint64_t v0;

  v0 = sub_1594A0();
  return EnvironmentValues.subscript.getter(&type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v0);
}

uint64_t sub_1580E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_15813C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_153738(a1, v1 + ((v3 + 32) & ~v3), v2, *(_QWORD *)(v1 + 24));
}

uint64_t sub_158158@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_153CD0(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t sub_158174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v33 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v33 + 32) & ~v33;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_5C154(&qword_3202B0) - 8);
  v32 = *(unsigned __int8 *)(v5 + 80);
  v6 = (v3 + v4 + v32) & ~v32;
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_326100) - 8);
  v31 = *(unsigned __int8 *)(v8 + 80);
  v9 = (v7 + v31 + 16) & ~v31;
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(sub_5C154(&qword_325570) - 8);
  v30 = *(unsigned __int8 *)(v11 + 80);
  v12 = (v9 + v10 + v30) & ~v30;
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_3260F0) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v13 + v15;
  v29 = *(_QWORD *)(v14 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v17 = type metadata accessor for PageMetrics(0);
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v0 + v6, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v0 + v6, v17);
  v19 = v12 + v16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  v20 = v0 + v9;
  v21 = type metadata accessor for SectionData(0);
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  v23 = v19 & ~v15;
  v24 = type metadata accessor for PageData(0);
  v25 = *(_QWORD *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v0 + v12, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v0 + v12, v24);
  v26 = type metadata accessor for ContentData(0);
  v27 = *(_QWORD *)(v26 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v0 + v23, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v23, v26);
  return swift_deallocObject(v0, v23 + v29, v33 | v32 | v31 | v30 | v15 | 7);
}

uint64_t sub_1583B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(sub_5C154(&qword_3202B0) - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = (*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_326100) - 8);
  v16 = (v14 + *(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 64);
  v18 = *(_QWORD *)(sub_5C154(&qword_325570) - 8);
  v19 = (v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = *(_QWORD *)(v18 + 64);
  v21 = *(unsigned __int8 *)(*(_QWORD *)(sub_5C154((uint64_t *)&unk_3260F0) - 8) + 80);
  return sub_15438C(a1, a2, a3, a4, v5 + v10, v5 + v13, *(_QWORD *)(v5 + v14), *(_QWORD *)(v5 + v14 + 8), a5, v5 + v16, v5 + v19, v5 + ((v19 + v20 + v21) & ~v21), v7, v8);
}

uint64_t sub_1584E4()
{
  return EnvironmentValues.performAction.getter();
}

uint64_t sub_158504()
{
  return EnvironmentValues.metricsFieldsContext.getter();
}

void sub_15852C()
{
  uint64_t *v0;

  sub_156BFC(v0[4], v0[2], v0[3]);
}

uint64_t dispatch thunk of ContextActionItem.asyncSubMenu.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *(int **)(a2 + 72);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_9431C;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ContextActionItem.swiftuiPostAction(shelfID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of ContextActionItem.handle()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *(int **)(a2 + 88);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_64780;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ContextActionItem.init(data:context:tracker:figaroProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 128))();
}

uint64_t dispatch thunk of FigaroProviding.contextMenuActionTypeToIndexDict.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ContextActionIconProviding.icon(actionItem:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of FigaroProviding.contextMenuActionPosition(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FigaroProviding.swipeActionTypeToIndexDict.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of FigaroProviding.swipeActionPosition(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t destroy for FigaroProvider(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s11BookStoreUI14FigaroProviderVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for FigaroProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for FigaroProvider(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for FigaroProvider()
{
  return &type metadata for FigaroProvider;
}

uint64_t sub_158764(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LikeActionItem(a2, a1);
  return a2;
}

uint64_t sub_1587A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_151618(a1, a2, a3, a4, v4 + 16, (void (*)(uint64_t, _OWORD *))sub_158764, (uint64_t)&unk_2EEF28, (uint64_t)&unk_3261A0);
}

uint64_t sub_1587D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;

  type metadata accessor for OpaqueMetricsFieldsContext(0);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_32619C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_7BFF8;
  return sub_151C78(v7, a1, v4, v5, v1 + 32);
}

uint64_t sub_158888(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_15889C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LikeActionItem(a2, a1);
  return a2;
}

uint64_t sub_1588DC()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 104));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 185, 7);
}

uint64_t sub_158920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_151618(a1, a2, a3, a4, v4 + 16, (void (*)(uint64_t, _OWORD *))sub_15889C, (uint64_t)&unk_2EEFA0, (uint64_t)&unk_3261D8);
}

uint64_t sub_158954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 32));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 72));

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 120));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 160));
  v5 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
  if (*(_QWORD *)(v0 + 248))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
  v6 = v3 | 7;
  v7 = (v3 + 264) & ~v3;
  v8 = v7 + v4;
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v7, v1, v5);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_158A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;

  type metadata accessor for OpaqueMetricsFieldsContext(0);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_3261D4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_7BFF8;
  return sub_151A80(v7, a1, v4, v5, v1 + 32);
}

uint64_t sub_158AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v42 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v42 + 32) & ~v42;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_5C154(&qword_3202B0) - 8);
  v41 = *(unsigned __int8 *)(v5 + 80);
  v6 = (v3 + v4 + v41) & ~v41;
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_326100) - 8);
  v40 = *(unsigned __int8 *)(v8 + 80);
  v9 = (v7 + v40 + 16) & ~v40;
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(sub_5C154(&qword_325570) - 8);
  v39 = *(unsigned __int8 *)(v11 + 80);
  v12 = (v9 + v10 + v39) & ~v39;
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_3260F0) - 8);
  v38 = *(unsigned __int8 *)(v14 + 80);
  v34 = (v12 + v13 + v38) & ~v38;
  v15 = *(_QWORD *)(v14 + 64) + v34 + 7;
  v16 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v36 = v17;
  v37 = v16;
  v35 = *(_QWORD *)(v17 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v19 = type metadata accessor for PageMetrics(0);
  v20 = *(_QWORD *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v0 + v6, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v0 + v6, v19);
  v21 = v15 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  v22 = type metadata accessor for SectionData(0);
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v0 + v9, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0 + v9, v22);
  v24 = v0 + v12;
  v25 = type metadata accessor for PageData(0);
  v26 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  v27 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = type metadata accessor for ContentData(0);
  v29 = *(_QWORD *)(v28 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v0 + v34, 1, v28))
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v0 + v34, v28);
  v30 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + v21 + 8));
  if (*(_QWORD *)(v0 + v27 + 24))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v27));
  v31 = (v18 + v27 + 40) & ~v18;
  v32 = v31 + v35;
  (*(void (**)(uint64_t, uint64_t, __n128))(v36 + 8))(v0 + v31, v37, v30);
  return swift_deallocObject(v0, v32, v42 | v41 | v40 | v39 | v38 | v18 | 7);
}

uint64_t sub_158D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 16);
  v19 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_5C154(&qword_3202B0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_326100) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(sub_5C154(&qword_325570) - 8);
  v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_3260F0) - 8);
  v15 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = (*(_QWORD *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OpaqueMetricsFieldsContext(0) - 8) + 80);
  return sub_1549D4(v0 + v3, v0 + v6, *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), v0 + v9, v0 + v12, v0 + v15, *(_QWORD *)(v0 + v16), *(_QWORD *)(v0 + v16 + 8), v0 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8), v0 + ((v17 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v17), v1, v19);
}

uint64_t sub_158EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v42 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v42 + 48) & ~v42;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_5C154(&qword_3202B0) - 8);
  v41 = *(unsigned __int8 *)(v5 + 80);
  v6 = (v3 + v4 + v41) & ~v41;
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_326100) - 8);
  v40 = *(unsigned __int8 *)(v8 + 80);
  v9 = (v7 + v40 + 16) & ~v40;
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(sub_5C154(&qword_325570) - 8);
  v39 = *(unsigned __int8 *)(v11 + 80);
  v12 = (v9 + v10 + v39) & ~v39;
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_3260F0) - 8);
  v38 = *(unsigned __int8 *)(v14 + 80);
  v34 = (v12 + v13 + v38) & ~v38;
  v15 = *(_QWORD *)(v14 + 64) + v34 + 7;
  v16 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v36 = v17;
  v37 = v16;
  v35 = *(_QWORD *)(v17 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v19 = type metadata accessor for PageMetrics(0);
  v20 = *(_QWORD *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v0 + v6, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v0 + v6, v19);
  v21 = v15 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  v22 = type metadata accessor for SectionData(0);
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v0 + v9, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0 + v9, v22);
  v24 = v0 + v12;
  v25 = type metadata accessor for PageData(0);
  v26 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  v27 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = type metadata accessor for ContentData(0);
  v29 = *(_QWORD *)(v28 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v0 + v34, 1, v28))
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v0 + v34, v28);
  v30 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + v21 + 8));
  if (*(_QWORD *)(v0 + v27 + 24))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v27));
  v31 = (v18 + v27 + 40) & ~v18;
  v32 = v31 + v35;
  (*(void (**)(uint64_t, uint64_t, __n128))(v36 + 8))(v0 + v31, v37, v30);
  return swift_deallocObject(v0, v32, v42 | v41 | v40 | v39 | v38 | v18 | 7);
}

uint64_t sub_1591A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(v1[4] - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_5C154(&qword_3202B0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(sub_5C154((uint64_t *)&unk_326100) - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_5C154(&qword_325570);
  sub_5C154((uint64_t *)&unk_3260F0);
  type metadata accessor for OpaqueMetricsFieldsContext(0);
  v17 = v1[3];
  v18 = v1[2];
  v16 = (uint64_t)v1 + v4;
  v11 = (char *)v1 + v8;
  v12 = *(_QWORD *)((char *)v1 + v8);
  v13 = *((_QWORD *)v11 + 1);
  v14 = (_QWORD *)swift_task_alloc(dword_326204);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_7BFF8;
  return sub_154EF0(a1, v18, v17, v16, (uint64_t)v1 + v7, v12, v13, (uint64_t)v1 + v10);
}

uint64_t sub_159368()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_15938C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "performWithSender:target:", 0, 0);
}

uint64_t sub_1593A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_159410(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = v1[2];
  v8 = v1[3];
  v9 = (uint64_t)v1 + ((v6 + 48) & ~v6);
  v10 = (_QWORD *)swift_task_alloc(dword_32627C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_7BFF8;
  return sub_15399C(a1, v7, v8, v9, v4, v5);
}

unint64_t sub_1594A0()
{
  unint64_t result;

  result = qword_326290;
  if (!qword_326290)
  {
    result = swift_getWitnessTable(&unk_268020, &type metadata for ContextActionIconProvidingKey);
    atomic_store(result, &qword_326290);
  }
  return result;
}

uint64_t sub_1594E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v15 = *(_QWORD *)(v8 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v10 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  if (*(_QWORD *)(v0 + v6 + 24))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v6));
  v11 = v3 | v9 | 7;
  v12 = (v9 + v6 + 40) & ~v9;
  v13 = v12 + v15;
  (*(void (**)(uint64_t, uint64_t, __n128))(v8 + 8))(v0 + v12, v7, v10);
  return swift_deallocObject(v0, v13, v11);
}

uint64_t sub_1595D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __n128 v18;

  v3 = *(_QWORD *)(v1[4] - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OpaqueMetricsFieldsContext(0) - 8) + 80);
  v8 = (v7 + v6 + 40) & ~v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = (uint64_t)v1 + v4;
  v12 = (char *)v1 + v5;
  v13 = *(_QWORD *)((char *)v1 + v5);
  v14 = *((_QWORD *)v12 + 1);
  v15 = (uint64_t)v1 + v6;
  v16 = (uint64_t)v1 + v8;
  v17 = (_QWORD *)swift_task_alloc(dword_32629C);
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = sub_7BFF8;
  return sub_151EA8(v18, a1, v9, v10, v11, v13, v14, v15, v16);
}

uint64_t sub_1596C8()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1596EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1596FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_159704()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_159728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1566CC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_159730()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_159754(UIImage *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1563BC(a1, a2, *(void (**)(Class, id))(v2 + 16));
}

_QWORD *sub_15977C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 16))(&v6, v3, v4);
  *a2 = v6;
  return result;
}

uint64_t sub_1597D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ContextActionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_15980C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInCard.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_159838(unsigned __int8 *a1)
{
  return EnvironmentValues.isInCard.setter(*a1);
}

uint64_t SwipeActionsViewModifier.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a2 = swift_getKeyPath(&unk_2611D0);
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = swift_getKeyPath(&unk_261200);
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = swift_getKeyPath(&unk_261230);
  *(_BYTE *)(a2 + 40) = 0;
  v4 = type metadata accessor for ProfileRestrictions(0);
  v5 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)(a2 + 48) = EnvironmentObject.init()(v4, v5);
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = swift_getKeyPath(&unk_261260);
  *(_BYTE *)(a2 + 72) = 0;
  v7 = type metadata accessor for SwipeActionsViewModifier(0);
  v8 = (_QWORD *)(a2 + *(int *)(v7 + 36));
  *v8 = swift_getKeyPath(&unk_261290);
  v9 = sub_5C154(&qword_3202D0);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = a2 + *(int *)(v7 + 40);
  v11 = type metadata accessor for ListItemViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a1, v11);
}

uint64_t sub_159970@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInCard.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_15999C(unsigned __int8 *a1)
{
  return EnvironmentValues.isInCard.setter(*a1);
}

uint64_t SwipeActionsViewModifier.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  unint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  _QWORD v17[4];

  v1 = sub_5C154(&qword_326390);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = v0;
  v5 = sub_5C154(&qword_326398);
  v6 = sub_5C154(&qword_3263A0);
  v7 = sub_67060(&qword_3263A8, &qword_326398, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8 = sub_15B97C();
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(1, 0, sub_15B95C, v15, v5, v6, v7, v8);
  v14 = v0;
  v9 = sub_5C154(&qword_3263C8);
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v7;
  v17[3] = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v17, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v11 = sub_15BA20();
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(0, 0, sub_15BA00, v13, v1, v9, OpaqueTypeConformance2, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_159B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;

  v3 = sub_5C154(&qword_3263C0);
  __chkstk_darwin(v3);
  v62 = (uint64_t)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_3265B0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin(v5);
  v57 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_5C154(&qword_3265B8);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v56 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_3265C0);
  __chkstk_darwin(v8);
  v60 = (uint64_t)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v64 = (char *)v54 - v11;
  v12 = type metadata accessor for ListItemViewModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SwipeActionButtonsView(0);
  __chkstk_darwin(v16);
  v18 = (char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)v54 - v20;
  v22 = sub_5C154(&qword_3265C8);
  __chkstk_darwin(v22);
  v24 = (char *)v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_15A2E4() & 1) != 0)
  {
    swift_storeEnumTagMultiPayload(v24, v22, 0);
    v25 = sub_67060(&qword_3263B8, &qword_3263C0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    return _ConditionalContent<>.init(storage:)(v24, &type metadata for EmptyView, v3, &protocol witness table for EmptyView, v25);
  }
  else
  {
    v54[0] = v22;
    v54[1] = a1;
    v55 = v3;
    v27 = type metadata accessor for SwipeActionsViewModifier(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v1 + *(int *)(v27 + 40), v12);
    v28 = 1;
    v66 = 1;
    KeyPath = swift_getKeyPath(&unk_261460);
    sub_15A62C(KeyPath, 0, (uint64_t)v15, &v66, (uint64_t)v21);
    v30 = *(_QWORD *)(v1 + 64);
    v31 = *(_BYTE *)(v1 + 72);
    sub_64DD8(v30, v31);
    v32 = sub_768E8(v30, v31);
    v33 = sub_64FFC(v30, v31);
    v34 = (uint64_t)v64;
    v35 = (uint64_t)v21;
    if ((v32 & 1) == 0)
    {
      __chkstk_darwin(v33);
      v54[-2] = v1;
      v36 = sub_5C154(&qword_321050);
      v37 = type metadata accessor for ContextActionMenuView(0);
      v38 = sub_67060((unint64_t *)&unk_326150, &qword_321050, (uint64_t)&protocol conformance descriptor for Label<A, B>);
      v39 = sub_648E0(&qword_3265D0, type metadata accessor for ContextActionMenuView, (uint64_t)&protocol conformance descriptor for ContextActionMenuView);
      v40 = v57;
      Menu.init(content:label:)(sub_15EF88, &v54[-4], sub_15A8AC, 0, v36, v37, v38, v39);
      v41 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray2Color");
      v42 = Color.init(uiColor:)(v41);
      v43 = swift_getKeyPath(&unk_261430);
      v65 = v42;
      swift_retain(v42);
      v44 = AnyShapeStyle.init<A>(_:)(&v65, &type metadata for Color, &protocol witness table for Color);
      v46 = v58;
      v45 = v59;
      v47 = (uint64_t)v56;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v56, v40, v59);
      swift_release(v42);
      v48 = (uint64_t *)(v47 + *(int *)(v63 + 36));
      *v48 = v43;
      v48[1] = v44;
      v49 = v40;
      v34 = (uint64_t)v64;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
      sub_66F14(v47, v34, &qword_3265B8);
      v28 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v34, v28, 1, v63);
    sub_5E11C(v35, (uint64_t)v18, type metadata accessor for SwipeActionButtonsView);
    v50 = v60;
    sub_5E1A4(v34, v60, &qword_3265C0);
    v51 = v62;
    sub_5E11C((uint64_t)v18, v62, type metadata accessor for SwipeActionButtonsView);
    v52 = sub_5C154(&qword_3265D8);
    sub_5E1A4(v50, v51 + *(int *)(v52 + 48), &qword_3265C0);
    sub_5E09C(v50, &qword_3265C0);
    sub_6685C((uint64_t)v18, type metadata accessor for SwipeActionButtonsView);
    sub_5E1A4(v51, (uint64_t)v24, &qword_3263C0);
    swift_storeEnumTagMultiPayload(v24, v54[0], 1);
    v53 = sub_67060(&qword_3263B8, &qword_3263C0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v24, &type metadata for EmptyView, v55, &protocol witness table for EmptyView, v53);
    sub_5E09C(v51, &qword_3263C0);
    sub_5E09C(v34, &qword_3265C0);
    return sub_6685C(v35, type metadata accessor for SwipeActionButtonsView);
  }
}

uint64_t sub_15A0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  _BYTE v16[15];
  char v17;

  v1 = type metadata accessor for ListItemViewModel(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for SwipeActionButtonsView(0);
  __chkstk_darwin(v5);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_5C154(&qword_3265A8);
  __chkstk_darwin(v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((sub_15A2E4() & 1) != 0)
  {
    swift_storeEnumTagMultiPayload(v10, v8, 0);
    v11 = sub_648E0(&qword_3263D8, type metadata accessor for SwipeActionButtonsView, (uint64_t)&unk_2613A8);
    return _ConditionalContent<>.init(storage:)(v10, &type metadata for EmptyView, v5, &protocol witness table for EmptyView, v11);
  }
  else
  {
    v13 = type metadata accessor for SwipeActionsViewModifier(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + *(int *)(v13 + 40), v1);
    v17 = 0;
    KeyPath = swift_getKeyPath(&unk_261460);
    sub_15A62C(KeyPath, 0, (uint64_t)v4, &v17, (uint64_t)v7);
    sub_5E11C((uint64_t)v7, (uint64_t)v10, type metadata accessor for SwipeActionButtonsView);
    swift_storeEnumTagMultiPayload(v10, v8, 1);
    v15 = sub_648E0(&qword_3263D8, type metadata accessor for SwipeActionButtonsView, (uint64_t)&unk_2613A8);
    _ConditionalContent<>.init(storage:)(v10, &type metadata for EmptyView, v5, &protocol witness table for EmptyView, v15);
    return sub_6685C((uint64_t)v7, type metadata accessor for SwipeActionButtonsView);
  }
}

uint64_t sub_15A2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for SwipeActionsViewModifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)v1;
  v12 = *(_BYTE *)(v1 + 8);
  sub_64DD8(*(_QWORD *)v1, v12);
  v13 = sub_768E8(v11, v12);
  sub_64FFC(v11, v12);
  sub_5E11C(v1, (uint64_t)v10, type metadata accessor for SwipeActionsViewModifier);
  if ((v13 & 1) != 0)
  {
    v14 = *((_QWORD *)v10 + 2);
    v15 = v10[24];
    sub_64DD8(v14, v15);
    v16 = sub_768E8(v14, v15);
    sub_64FFC(v14, v15);
    sub_6685C((uint64_t)v10, type metadata accessor for SwipeActionsViewModifier);
    sub_5E11C(v1, (uint64_t)v7, type metadata accessor for SwipeActionsViewModifier);
    if ((v16 & 1) == 0)
    {
      sub_6685C((uint64_t)v7, type metadata accessor for SwipeActionsViewModifier);
      sub_5E11C(v1, (uint64_t)v4, type metadata accessor for SwipeActionsViewModifier);
      v17 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    sub_6685C((uint64_t)v10, type metadata accessor for SwipeActionsViewModifier);
    sub_5E11C(v1, (uint64_t)v7, type metadata accessor for SwipeActionsViewModifier);
  }
  v18 = sub_15A4E8();
  sub_6685C((uint64_t)v7, type metadata accessor for SwipeActionsViewModifier);
  sub_5E11C(v1, (uint64_t)v4, type metadata accessor for SwipeActionsViewModifier);
  if ((v18 & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    v19 = *((_QWORD *)v4 + 4);
    v20 = v4[40];
    sub_64DD8(v19, v20);
    v17 = sub_768E8(v19, v20);
    sub_64FFC(v19, v20);
  }
LABEL_8:
  sub_6685C((uint64_t)v4, type metadata accessor for SwipeActionsViewModifier);
  return v17 & 1;
}

uint64_t sub_15A4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for SwipeActionsViewModifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v16[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ListItemViewModel.assetInfo.getter(v16);
  v5 = v17;
  v6 = v18;
  sub_66898(v16, v17);
  LOBYTE(v5) = AssetInfo.isExplicit.getter(v5, v6);
  sub_5E11C(v1, (uint64_t)v4, type metadata accessor for SwipeActionsViewModifier);
  if ((v5 & 1) == 0)
  {
    v10 = 0;
    goto LABEL_5;
  }
  v7 = (void *)*((_QWORD *)v4 + 6);
  if (v7)
  {
    v8 = v7;
    v9 = dispatch thunk of ProfileRestrictions.isExplicitContentAllowed.getter();

    v10 = v9 ^ 1;
LABEL_5:
    sub_6685C((uint64_t)v4, type metadata accessor for SwipeActionsViewModifier);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v16);
    return v10 & 1;
  }
  v12 = *((_QWORD *)v4 + 7);
  v13 = type metadata accessor for ProfileRestrictions(0);
  v14 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = EnvironmentObject.error()(0, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_15A62C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v9 = *a4;
  *(_QWORD *)a5 = swift_getKeyPath(&unk_261490);
  *(_BYTE *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = swift_getKeyPath(&unk_2614B8);
  *(_BYTE *)(a5 + 56) = 0;
  v10 = (int *)type metadata accessor for SwipeActionButtonsView(0);
  v11 = (_QWORD *)(a5 + v10[6]);
  *v11 = swift_getKeyPath(&unk_2614E0);
  v12 = sub_5C154(&qword_320268);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = (_QWORD *)(a5 + v10[7]);
  *v13 = swift_getKeyPath(&unk_261510);
  v14 = sub_5C154(&qword_3202B8);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = a5 + v10[8];
  *(_QWORD *)v15 = a1;
  *(_BYTE *)(v15 + 8) = a2 & 1;
  v16 = (_QWORD *)(a5 + v10[9]);
  *v16 = swift_getKeyPath(&unk_261540);
  v17 = sub_5C154(&qword_3202A8);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  v18 = a5 + v10[10];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_261570);
  *(_BYTE *)(v18 + 8) = 0;
  v19 = (_QWORD *)(a5 + v10[11]);
  *v19 = swift_getKeyPath(&unk_261598);
  v20 = sub_5C154(&qword_321CE8);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = a5 + v10[12];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_261260);
  *(_BYTE *)(v21 + 8) = 0;
  v22 = a5 + v10[13];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_2615C8);
  *(_BYTE *)(v22 + 8) = 0;
  v23 = (_QWORD *)(a5 + v10[14]);
  *v23 = swift_getKeyPath(&unk_261290);
  v24 = sub_5C154(&qword_3202D0);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = a5 + v10[15];
  v26 = type metadata accessor for ListItemViewModel(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a3, v26);
  *(_BYTE *)(a5 + v10[16]) = v9;
  return result;
}

uint64_t sub_15A840@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[3];
  __int128 v4[2];

  type metadata accessor for SwipeActionsViewModifier(0);
  ListItemViewModel.assetInfo.getter(v4);
  v3[0] = xmmword_2611C0;
  memset(&v3[1], 0, 32);
  return ContextActionMenuView.init(assetInfo:originatingLocation:)(v4, (uint64_t)v3, a1);
}

uint64_t sub_15A8AC()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD v3[2];

  v3[0] = sub_17EB50();
  v3[1] = v0;
  v1 = sub_668F8();
  return Label<>.init<A>(_:systemImage:)(v3, 0xD000000000000014, 0x8000000000272CB0, &type metadata for String, v1);
}

uint64_t sub_15A918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  unint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  _QWORD v17[4];

  v1 = sub_5C154(&qword_326390);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = v0;
  v5 = sub_5C154(&qword_326398);
  v6 = sub_5C154(&qword_3263A0);
  v7 = sub_67060(&qword_3263A8, &qword_326398, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8 = sub_15B97C();
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(1, 0, sub_15EFF8, v15, v5, v6, v7, v8);
  v14 = v0;
  v9 = sub_5C154(&qword_3263C8);
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v7;
  v17[3] = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v17, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v11 = sub_15BA20();
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(0, 0, sub_15EFFC, v13, v1, v9, OpaqueTypeConformance2, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_15AA90(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  int *v11;
  objc_class *v12;
  char *v13;
  char *v14;
  id v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[15];
  char v58;
  char v59[24];
  char v60[24];
  char v61[24];
  char v62[24];
  char v63[24];
  objc_super v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;

  v2 = v1;
  v4 = type metadata accessor for ContextAssetInfoAnalytics(0);
  __chkstk_darwin(v4);
  v6 = &v57[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_5C154(&qword_31FA60);
  __chkstk_darwin(v7);
  v9 = &v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *a1;
  v11 = (int *)type metadata accessor for SwipeActionButtonsView(0);
  ListItemViewModel.assetInfo.getter(v68);
  sub_5E0D8((uint64_t)v68, (uint64_t)v65);
  v12 = (objc_class *)type metadata accessor for ContextActionDataModel.Asset();
  v13 = (char *)objc_allocWithZone(v12);
  v14 = &v13[OBJC_IVAR___BSUIContextActionDataAssetModel_initType];
  sub_5E0D8((uint64_t)v65, (uint64_t)&v13[OBJC_IVAR___BSUIContextActionDataAssetModel_initType]);
  v14[40] = 3;
  v64.receiver = v13;
  v64.super_class = v12;
  v15 = objc_msgSendSuper2(&v64, "init");
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v65);
  v16 = objc_allocWithZone((Class)type metadata accessor for ContextActionDataModel(0));
  v17 = (char *)ContextActionDataModel.init(asset:sourceView:)((uint64_t)v15, 0);
  v18 = v69;
  v19 = v70;
  sub_66898(v68, v69);
  v20 = ContentInfo.id.getter(v18, *(_QWORD *)(v19 + 8));
  v22 = v21;
  v23 = (uint64_t *)&v17[OBJC_IVAR___BSUIContextActionDataModel_presentationRefID];
  swift_beginAccess(&v17[OBJC_IVAR___BSUIContextActionDataModel_presentationRefID], v63, 1, 0);
  v24 = v23[1];
  *v23 = v20;
  v23[1] = v22;
  swift_bridgeObjectRelease(v24);
  sub_77A64((uint64_t)v9);
  v25 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v9, 1, v25);
  if ((_DWORD)v27 == 1)
  {
    sub_5E09C((uint64_t)v9, &qword_31FA60);
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v28 = UUID.uuidString.getter(v27);
    v29 = v30;
    (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v9, v25);
  }
  v31 = (uint64_t *)&v17[OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance];
  swift_beginAccess(&v17[OBJC_IVAR___BSUIContextActionDataModel_presentationRefInstance], v62, 1, 0);
  v32 = v31[1];
  *v31 = v28;
  v31[1] = v29;
  swift_bridgeObjectRelease(v32);
  v33 = v2 + v11[10];
  v34 = *(_QWORD *)v33;
  LOBYTE(v31) = *(_BYTE *)(v33 + 8);
  sub_64DD8(*(_QWORD *)v33, (char)v31);
  sub_77A98(v34, (char)v31, v65);
  sub_64FFC(v34, (char)v31);
  LOBYTE(v31) = v65[0];
  v35 = &v17[OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro];
  swift_beginAccess(&v17[OBJC_IVAR___BSUIContextActionDataModel_shouldReportFigaro], v61, 1, 0);
  *v35 = (char)v31;
  v36 = v2 + v11[12];
  v37 = *(_QWORD *)v36;
  LOBYTE(v31) = *(_BYTE *)(v36 + 8);
  sub_64DD8(*(_QWORD *)v36, (char)v31);
  v38 = sub_768E8(v37, (char)v31);
  sub_64FFC(v37, (char)v31);
  v39 = &v17[OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation];
  swift_beginAccess(&v17[OBJC_IVAR___BSUIContextActionDataModel_isAnODPRecommendation], v60, 1, 0);
  *v39 = v38 & 1;
  v40 = v2 + v11[13];
  v41 = *(_QWORD *)v40;
  LOBYTE(v31) = *(_BYTE *)(v40 + 8);
  sub_64DD8(*(_QWORD *)v40, (char)v31);
  v42 = sub_768E8(v41, (char)v31);
  sub_64FFC(v41, (char)v31);
  v43 = &v17[OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu];
  swift_beginAccess(&v17[OBJC_IVAR___BSUIContextActionDataModel_supportsSuggestionContextMenu], v59, 1, 0);
  *v43 = v42 & 1;
  sub_77C6C((uint64_t)v6);
  v44 = (uint64_t)&v17[OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes];
  swift_beginAccess(&v17[OBJC_IVAR___BSUIContextActionDataModel_analyticsAttributes], v65, 33, 0);
  sub_AC740((uint64_t)v6, v44);
  swift_endAccess(v65);
  sub_77864((uint64_t)v65);
  v45 = v66;
  v46 = v67;
  sub_66898(v65, v66);
  v47 = *(void **)(v2 + 48);
  v48 = *(_BYTE *)(v2 + 56);
  sub_AAFF4(v47, v48);
  v49 = (id)sub_77890(v47, v48);
  sub_794D8(v47, v48);
  if (!v49)
    v49 = objc_msgSend(objc_allocWithZone((Class)UIViewController), "init");
  v58 = v10;
  v50 = v69;
  v51 = v70;
  sub_66898(v68, v69);
  v52 = ContentInfo.id.getter(v50, *(_QWORD *)(v51 + 8));
  v54 = v53;
  v55 = (*(uint64_t (**)(char *, id, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 16))(v17, v49, &v58, v52, v53, v45, v46);
  swift_bridgeObjectRelease(v54);

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v65);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v68);
  return v55;
}

uint64_t sub_15AF64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t KeyPath;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[2];

  v98 = a2;
  v105 = a3;
  v4 = sub_5C154(&qword_3202B0);
  __chkstk_darwin(v4);
  v99 = (uint64_t)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154((uint64_t *)&unk_3260F0);
  __chkstk_darwin(v6);
  v97 = (char *)v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_325570);
  __chkstk_darwin(v8);
  v95 = (char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for DataStack(0);
  v10 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v12 = (char *)v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v13);
  v101 = (uint64_t)v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_326118);
  __chkstk_darwin(v15);
  v96 = (_QWORD *)((char *)v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = sub_5C154(&qword_326590);
  __chkstk_darwin(v104);
  v94 = (uint64_t)v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v100 = (uint64_t)v87 - v19;
  v103 = sub_5C154(&qword_3265A0);
  __chkstk_darwin(v103);
  v21 = (char *)v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_321A58);
  __chkstk_darwin(v22);
  v24 = (char *)v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5C154(&qword_326570);
  __chkstk_darwin(v102);
  v26 = (char *)v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)v87 - v28;
  v31 = a1[3];
  v30 = a1[4];
  sub_66898(a1, v31);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v30 + 16))(v106, v31, v30);
  v32 = ContextActionType.rawValue.getter();
  v34 = v33;
  if (v32 == 0x6572616873 && v33 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, 0x6572616873, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v34);
    if ((v35 & 1) == 0)
    {
      v50 = a1[4];
      v91 = a1[3];
      v92 = v50;
      v90 = sub_66898(a1, v91);
      v51 = type metadata accessor for SwipeActionButtonsView(0);
      v52 = *(int *)(v51 + 60);
      v53 = v98;
      v87[0] = v51;
      v87[1] = v98 + v52;
      v54 = ListItemViewModel.assetID.getter();
      v88 = v55;
      v89 = v54;
      sub_78BF0((uint64_t)v12);
      v56 = type metadata accessor for SectionData(0);
      v57 = sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
      v58 = sub_648E0((unint64_t *)&unk_322500, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
      DataStack.first<A>(of:)(v56, v56, v57, v58);
      v59 = *(void (**)(char *, uint64_t))(v10 + 8);
      v60 = v93;
      v59(v12, v93);
      sub_78BF0((uint64_t)v12);
      v61 = type metadata accessor for PageData(0);
      v62 = sub_648E0((unint64_t *)&unk_326230, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
      v63 = sub_648E0((unint64_t *)&unk_322510, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
      v64 = (uint64_t)v95;
      DataStack.first<A>(of:)(v61, v61, v62, v63);
      v59(v12, v60);
      v65 = v53 + *(int *)(v87[0] + 32);
      v66 = *(id *)v65;
      LOBYTE(v57) = *(_BYTE *)(v65 + 8);
      sub_AAFF4(*(id *)v65, v57);
      v67 = (void *)sub_77EB0(v66, v57);
      sub_794D8(v66, v57);
      v68 = (uint64_t)v97;
      ListItemViewModel.contentData(with:)(v67);

      v69 = type metadata accessor for ContentData(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
      v70 = v99;
      sub_78E20(v99);
      v71 = v96;
      v72 = v88;
      v73 = v101;
      ContextActionItem.swipeActionButton(for:sectionData:pageData:contentData:pageMetrics:)(v89, v88, v101, v64, v68, v70, v91, v92, v96);
      swift_bridgeObjectRelease(v72);
      sub_5E09C(v70, &qword_3202B0);
      sub_5E09C(v68, (uint64_t *)&unk_3260F0);
      sub_5E09C(v64, &qword_325570);
      sub_5E09C(v73, (uint64_t *)&unk_326100);
      v74 = a1[3];
      v75 = a1[4];
      sub_66898(a1, v74);
      ContextActionItem.swipeActionBackgroundColor.getter(v74, v75);
      v77 = v76;
      KeyPath = swift_getKeyPath(&unk_261430);
      v106[0] = v77;
      swift_retain(v77);
      v79 = AnyShapeStyle.init<A>(_:)(v106, &type metadata for Color, &protocol witness table for Color);
      v80 = v94;
      sub_5E1A4((uint64_t)v71, v94, &qword_326118);
      swift_release(v77);
      v81 = v104;
      v82 = (uint64_t *)(v80 + *(int *)(v104 + 36));
      *v82 = KeyPath;
      v82[1] = v79;
      sub_5E09C((uint64_t)v71, &qword_326118);
      v83 = v100;
      sub_66F14(v80, v100, &qword_326590);
      sub_5E1A4(v83, (uint64_t)v21, &qword_326590);
      swift_storeEnumTagMultiPayload(v21, v103, 1);
      v84 = sub_15EDDC();
      v85 = sub_15EE60();
      _ConditionalContent<>.init(storage:)(v21, v102, v81, v84, v85);
      v48 = v83;
      v49 = &qword_326590;
      return sub_5E09C(v48, v49);
    }
  }
  v36 = a1[3];
  v37 = a1[4];
  sub_66898(a1, v36);
  ContextActionItem.swipeActionShareButton.getter(v36, v37, (uint64_t)v24);
  v38 = a1[3];
  v39 = a1[4];
  sub_66898(a1, v38);
  ContextActionItem.swipeActionBackgroundColor.getter(v38, v39);
  v41 = v40;
  v42 = swift_getKeyPath(&unk_261430);
  v106[0] = v41;
  swift_retain(v41);
  v43 = AnyShapeStyle.init<A>(_:)(v106, &type metadata for Color, &protocol witness table for Color);
  sub_5E1A4((uint64_t)v24, (uint64_t)v26, &qword_321A58);
  swift_release(v41);
  v44 = v102;
  v45 = (uint64_t *)&v26[*(int *)(v102 + 36)];
  *v45 = v42;
  v45[1] = v43;
  sub_5E09C((uint64_t)v24, &qword_321A58);
  sub_66F14((uint64_t)v26, (uint64_t)v29, &qword_326570);
  sub_5E1A4((uint64_t)v29, (uint64_t)v21, &qword_326570);
  swift_storeEnumTagMultiPayload(v21, v103, 0);
  v46 = sub_15EDDC();
  v47 = sub_15EE60();
  _ConditionalContent<>.init(storage:)(v21, v44, v104, v46, v47);
  v48 = (uint64_t)v29;
  v49 = &qword_326570;
  return sub_5E09C(v48, v49);
}

uint64_t sub_15B750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v15 = *(_BYTE *)(v1 + *(int *)(v4 + 64));
  v14 = sub_15AA90(&v15);
  KeyPath = swift_getKeyPath(&unk_2613F8);
  sub_5E11C(v1, (uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SwipeActionButtonsView);
  v6 = *(unsigned __int8 *)(v2 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_2EF168, v7 + v3, v6 | 7);
  sub_15ECE0((uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  v9 = sub_5C154(&qword_3260D0);
  v10 = sub_5C154(&qword_326558);
  v11 = sub_67060(&qword_321E58, &qword_3260D0, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = sub_15ED70();
  return ForEach<>.init(_:id:content:)(&v14, KeyPath, sub_15ED24, v8, v9, v10, v11, &protocol witness table for String, v12);
}

uint64_t sub_15B898@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isPendingData.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_15B8C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isPendingData.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_15B8F0(unsigned __int8 *a1)
{
  return EnvironmentValues.isPendingData.setter(*a1);
}

uint64_t sub_15B914(unsigned __int8 *a1)
{
  return EnvironmentValues.isPendingData.setter(*a1);
}

uint64_t type metadata accessor for SwipeActionsViewModifier(uint64_t a1)
{
  return sub_64960(a1, qword_326438, (uint64_t)&nominal type descriptor for SwipeActionsViewModifier);
}

uint64_t sub_15B95C@<X0>(uint64_t a1@<X8>)
{
  return sub_159B3C(a1);
}

unint64_t sub_15B97C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3263B0;
  if (!qword_3263B0)
  {
    v1 = sub_667D0(&qword_3263A0);
    sub_67060(&qword_3263B8, &qword_3263C0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3263B0);
  }
  return result;
}

uint64_t sub_15BA00()
{
  return sub_15A0E4();
}

unint64_t sub_15BA20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3263D0;
  if (!qword_3263D0)
  {
    v1 = sub_667D0(&qword_3263C8);
    sub_648E0(&qword_3263D8, type metadata accessor for SwipeActionButtonsView, (uint64_t)&unk_2613A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3263D0);
  }
  return result;
}

uint64_t type metadata accessor for SwipeActionButtonsView(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3264E8, (uint64_t)&nominal type descriptor for SwipeActionButtonsView);
}

uint64_t sub_15BAB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SwipeActionsViewModifier.body(content:)>>, 1);
}

unint64_t initializeBufferWithCopyOfBuffer for SwipeActionsViewModifier(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v26 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v26);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_64DD8(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    sub_64DD8(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v10;
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_BYTE *)(a2 + 40);
    sub_64DD8(v11, v12);
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v12;
    v13 = *(void **)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    v15 = *(_QWORD *)(a2 + 64);
    v16 = *(_BYTE *)(a2 + 72);
    v17 = v13;
    sub_64DD8(v15, v16);
    *(_QWORD *)(a1 + 64) = v15;
    *(_BYTE *)(a1 + 72) = v16;
    v18 = *(int *)(a3 + 36);
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)(a2 + v18);
    v21 = sub_5C154(&qword_3202D0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for OdpSuggestionType(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        v24 = type metadata accessor for ContextAssetInfoAnalytics(0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 16))(v19, v20, v22);
        v25 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
    }
    else
    {
      v27 = *v20;
      *v19 = *v20;
      swift_retain(v27);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v25);
    v28 = *(int *)(a3 + 40);
    v29 = a1 + v28;
    v30 = a2 + v28;
    v31 = type metadata accessor for ListItemViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return a1;
}

uint64_t destroy for SwipeActionsViewModifier(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_64FFC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_64FFC(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_64FFC(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));

  sub_64FFC(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 36));
  v5 = sub_5C154(&qword_3202D0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OdpSuggestionType(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = a1 + *(int *)(a2 + 40);
  v9 = type metadata accessor for ListItemViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for SwipeActionsViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_64DD8(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_64DD8(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_64DD8(v10, v11);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  v12 = *(void **)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_BYTE *)(a2 + 72);
  v16 = v12;
  sub_64DD8(v14, v15);
  *(_QWORD *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 72) = v15;
  v17 = *(int *)(a3 + 36);
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = sub_5C154(&qword_3202D0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for OdpSuggestionType(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
    {
      v23 = type metadata accessor for ContextAssetInfoAnalytics(0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v22 + 16))(v18, v19, v21);
      v24 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    }
  }
  else
  {
    v25 = *v19;
    *v18 = *v19;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v24);
  v26 = *(int *)(a3 + 40);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  return a1;
}

uint64_t assignWithCopy for SwipeActionsViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_64DD8(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_64FFC(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  sub_64DD8(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  sub_64FFC(v12, v13);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_BYTE *)(a2 + 40);
  sub_64DD8(v14, v15);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v15;
  sub_64FFC(v16, v17);
  v18 = *(void **)(a1 + 48);
  v19 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v19;
  v20 = v19;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  v22 = *(_BYTE *)(a2 + 72);
  sub_64DD8(v21, v22);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v21;
  *(_BYTE *)(a1 + 72) = v22;
  sub_64FFC(v23, v24);
  if (a1 != a2)
  {
    v25 = *(int *)(a3 + 36);
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    sub_5E09C(a1 + v25, &qword_3202D0);
    v28 = sub_5C154(&qword_3202D0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for OdpSuggestionType(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29))
      {
        v31 = type metadata accessor for ContextAssetInfoAnalytics(0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        v32 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v30 + 16))(v26, v27, v29);
        v32 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
      }
    }
    else
    {
      v33 = *v27;
      *v26 = *v27;
      swift_retain(v33);
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v32);
  }
  v34 = *(int *)(a3 + 40);
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  return a1;
}

uint64_t initializeWithTake for SwipeActionsViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(int *)(a3 + 36);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 48) = v6;
  v10 = sub_5C154(&qword_3202D0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OdpSuggestionType(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      v13 = type metadata accessor for ContextAssetInfoAnalytics(0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for SwipeActionsViewModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_64FFC(v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  sub_64FFC(v11, v12);
  v13 = *((_BYTE *)a2 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v13;
  sub_64FFC(v14, v15);
  v16 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2[6];

  v17 = *((_BYTE *)a2 + 72);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  *(_BYTE *)(a1 + 72) = v17;
  sub_64FFC(v18, v19);
  if ((uint64_t *)a1 != a2)
  {
    v20 = *(int *)(a3 + 36);
    v21 = (void *)(a1 + v20);
    v22 = (char *)a2 + v20;
    sub_5E09C(a1 + v20, &qword_3202D0);
    v23 = sub_5C154(&qword_3202D0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for OdpSuggestionType(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        v26 = type metadata accessor for ContextAssetInfoAnalytics(0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v21, v22, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v27 = *(int *)(a3 + 40);
  v28 = a1 + v27;
  v29 = (uint64_t)a2 + v27;
  v30 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActionsViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15C4C4);
}

uint64_t sub_15C4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_5C154(&qword_321D48);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 36);
    }
    else
    {
      v11 = type metadata accessor for ListItemViewModel(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for SwipeActionsViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15C580);
}

uint64_t sub_15C580(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 48) = a2;
  }
  else
  {
    v8 = sub_5C154(&qword_321D48);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = type metadata accessor for ListItemViewModel(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_15C620(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "\t";
  v6[1] = "\t";
  v6[2] = "\t";
  v6[3] = &unk_261348;
  v6[4] = "\t";
  sub_663E4(319, (unint64_t *)&qword_321DC8, (uint64_t (*)(uint64_t))&type metadata accessor for ContextAssetInfoAnalytics);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ListItemViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_15C6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_667D0(&qword_326390);
  v1 = sub_667D0(&qword_3263C8);
  v5 = sub_667D0(&qword_326398);
  v6 = sub_667D0(&qword_3263A0);
  v7 = sub_67060(&qword_3263A8, &qword_326398, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8 = sub_15B97C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v3 = sub_15BA20();
  v5 = v0;
  v6 = v1;
  v7 = OpaqueTypeConformance2;
  v8 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
}

uint64_t sub_15C7A4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = *((_BYTE *)a2 + 40);
    if ((v7 & 1) != 0)
    {
      v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)v4 = *a2;
      swift_retain(v10);
    }
    *(_BYTE *)(v4 + 40) = v7;
    v11 = (void *)a2[6];
    v12 = *((_BYTE *)a2 + 56);
    sub_AAFF4(v11, v12);
    *(_QWORD *)(v4 + 48) = v11;
    *(_BYTE *)(v4 + 56) = v12;
    v13 = a3[6];
    v14 = (uint64_t *)(v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = sub_5C154(&qword_320268);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for UUID(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      {
        v19 = sub_5C154(&qword_31FA60);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        v20 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 16))(v14, v15, v17);
        v20 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
      }
    }
    else
    {
      v21 = *v15;
      *v14 = *v15;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v20);
    v22 = a3[7];
    v23 = (uint64_t *)(v4 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = v23;
      v28 = v25;
      v29 = 1;
    }
    else
    {
      v30 = *v24;
      *v23 = *v24;
      swift_retain(v30);
      v27 = v23;
      v28 = v25;
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    v31 = a3[8];
    v32 = v4 + v31;
    v33 = (uint64_t)a2 + v31;
    v34 = *(id *)v33;
    v35 = *(_BYTE *)(v33 + 8);
    sub_AAFF4(*(id *)v33, v35);
    *(_QWORD *)v32 = v34;
    *(_BYTE *)(v32 + 8) = v35;
    v36 = a3[9];
    v37 = (uint64_t *)(v4 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = sub_5C154(&qword_3202A8);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for PageMetrics(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40))
      {
        v42 = sub_5C154(&qword_3202B0);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        v43 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v41 + 16))(v37, v38, v40);
        v43 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
      }
    }
    else
    {
      v44 = *v38;
      *v37 = *v38;
      swift_retain(v44);
      v43 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v39, v43);
    v45 = a3[10];
    v46 = v4 + v45;
    v47 = (uint64_t)a2 + v45;
    v48 = *(_QWORD *)v47;
    v49 = *(_BYTE *)(v47 + 8);
    sub_64DD8(*(_QWORD *)v47, v49);
    *(_QWORD *)v46 = v48;
    *(_BYTE *)(v46 + 8) = v49;
    v50 = a3[11];
    v51 = (uint64_t *)(v4 + v50);
    v52 = (uint64_t *)((char *)a2 + v50);
    v53 = sub_5C154(&qword_321CE8);
    if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
    {
      v54 = type metadata accessor for LibraryAssetState(0);
      v55 = *(_QWORD *)(v54 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v55 + 48))(v52, 1, v54))
      {
        v56 = sub_5C154(&qword_321D30);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        v57 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v55 + 16))(v51, v52, v54);
        v57 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v51, 0, 1, v54);
      }
    }
    else
    {
      v58 = *v52;
      *v51 = *v52;
      swift_retain(v58);
      v57 = 0;
    }
    swift_storeEnumTagMultiPayload(v51, v53, v57);
    v59 = a3[12];
    v60 = v4 + v59;
    v61 = (uint64_t)a2 + v59;
    v62 = *(_QWORD *)v61;
    v63 = *(_BYTE *)(v61 + 8);
    sub_64DD8(*(_QWORD *)v61, v63);
    *(_QWORD *)v60 = v62;
    *(_BYTE *)(v60 + 8) = v63;
    v64 = a3[13];
    v65 = v4 + v64;
    v66 = (uint64_t)a2 + v64;
    v67 = *(_QWORD *)v66;
    v68 = *(_BYTE *)(v66 + 8);
    sub_64DD8(*(_QWORD *)v66, v68);
    *(_QWORD *)v65 = v67;
    *(_BYTE *)(v65 + 8) = v68;
    v69 = a3[14];
    v70 = (uint64_t *)(v4 + v69);
    v71 = (uint64_t *)((char *)a2 + v69);
    v72 = sub_5C154(&qword_3202D0);
    if (swift_getEnumCaseMultiPayload(v71, v72) == 1)
    {
      v73 = type metadata accessor for OdpSuggestionType(0);
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v74 + 48))(v71, 1, v73))
      {
        v75 = type metadata accessor for ContextAssetInfoAnalytics(0);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        v76 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v74 + 16))(v70, v71, v73);
        v76 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v70, 0, 1, v73);
      }
    }
    else
    {
      v77 = *v71;
      *v70 = *v71;
      swift_retain(v77);
      v76 = 0;
    }
    swift_storeEnumTagMultiPayload(v70, v72, v76);
    v78 = a3[15];
    v79 = v4 + v78;
    v80 = (uint64_t)a2 + v78;
    v81 = type metadata accessor for ListItemViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v79, v80, v81);
    *(_BYTE *)(v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  }
  return v4;
}

uint64_t sub_15CD08(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  if ((a1[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  else
    swift_release(*a1);
  sub_794D8((id)a1[6], *((_BYTE *)a1 + 56));
  v4 = (_QWORD *)((char *)a1 + a2[6]);
  v5 = sub_5C154(&qword_320268);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (_QWORD *)((char *)a1 + a2[7]);
  v9 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  sub_794D8(*(id *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  v11 = (_QWORD *)((char *)a1 + a2[9]);
  v12 = sub_5C154(&qword_3202A8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for PageMetrics(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
  v15 = (_QWORD *)((char *)a1 + a2[11]);
  v16 = sub_5C154(&qword_321CE8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for LibraryAssetState(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[12]), *((_BYTE *)a1 + a2[12] + 8));
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[13]), *((_BYTE *)a1 + a2[13] + 8));
  v19 = (_QWORD *)((char *)a1 + a2[14]);
  v20 = sub_5C154(&qword_3202D0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for OdpSuggestionType(0);
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
      (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v19, v21);
  }
  else
  {
    swift_release(*v19);
  }
  v23 = (char *)a1 + a2[15];
  v24 = type metadata accessor for ListItemViewModel(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

uint64_t sub_15CFD0(uint64_t a1, uint64_t *a2, int *a3)
{
  char v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v6 = *((_BYTE *)a2 + 40);
  if ((v6 & 1) != 0)
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v8);
  }
  *(_BYTE *)(a1 + 40) = v6;
  v9 = (void *)a2[6];
  v10 = *((_BYTE *)a2 + 56);
  sub_AAFF4(v9, v10);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  v14 = sub_5C154(&qword_320268);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for UUID(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15))
    {
      v17 = sub_5C154(&qword_31FA60);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(v12, v13, v15);
      v18 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
    }
  }
  else
  {
    v19 = *v13;
    *v12 = *v13;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v18);
  v20 = a3[7];
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for DataStack(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
    v25 = v21;
    v26 = v23;
    v27 = 1;
  }
  else
  {
    v28 = *v22;
    *v21 = *v22;
    swift_retain(v28);
    v25 = v21;
    v26 = v23;
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v25, v26, v27);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = (uint64_t)a2 + v29;
  v32 = *(id *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_AAFF4(*(id *)v31, v33);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v33;
  v34 = a3[9];
  v35 = (uint64_t *)(a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = sub_5C154(&qword_3202A8);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for PageMetrics(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
    {
      v40 = sub_5C154(&qword_3202B0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      v41 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(v35, v36, v38);
      v41 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
    }
  }
  else
  {
    v42 = *v36;
    *v35 = *v36;
    swift_retain(v42);
    v41 = 0;
  }
  swift_storeEnumTagMultiPayload(v35, v37, v41);
  v43 = a3[10];
  v44 = a1 + v43;
  v45 = (uint64_t)a2 + v43;
  v46 = *(_QWORD *)v45;
  v47 = *(_BYTE *)(v45 + 8);
  sub_64DD8(*(_QWORD *)v45, v47);
  *(_QWORD *)v44 = v46;
  *(_BYTE *)(v44 + 8) = v47;
  v48 = a3[11];
  v49 = (uint64_t *)(a1 + v48);
  v50 = (uint64_t *)((char *)a2 + v48);
  v51 = sub_5C154(&qword_321CE8);
  if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
  {
    v52 = type metadata accessor for LibraryAssetState(0);
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v53 + 48))(v50, 1, v52))
    {
      v54 = sub_5C154(&qword_321D30);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      v55 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v53 + 16))(v49, v50, v52);
      v55 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v49, 0, 1, v52);
    }
  }
  else
  {
    v56 = *v50;
    *v49 = *v50;
    swift_retain(v56);
    v55 = 0;
  }
  swift_storeEnumTagMultiPayload(v49, v51, v55);
  v57 = a3[12];
  v58 = a1 + v57;
  v59 = (uint64_t)a2 + v57;
  v60 = *(_QWORD *)v59;
  v61 = *(_BYTE *)(v59 + 8);
  sub_64DD8(*(_QWORD *)v59, v61);
  *(_QWORD *)v58 = v60;
  *(_BYTE *)(v58 + 8) = v61;
  v62 = a3[13];
  v63 = a1 + v62;
  v64 = (uint64_t)a2 + v62;
  v65 = *(_QWORD *)v64;
  v66 = *(_BYTE *)(v64 + 8);
  sub_64DD8(*(_QWORD *)v64, v66);
  *(_QWORD *)v63 = v65;
  *(_BYTE *)(v63 + 8) = v66;
  v67 = a3[14];
  v68 = (uint64_t *)(a1 + v67);
  v69 = (uint64_t *)((char *)a2 + v67);
  v70 = sub_5C154(&qword_3202D0);
  if (swift_getEnumCaseMultiPayload(v69, v70) == 1)
  {
    v71 = type metadata accessor for OdpSuggestionType(0);
    v72 = *(_QWORD *)(v71 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v69, 1, v71))
    {
      v73 = type metadata accessor for ContextAssetInfoAnalytics(0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      v74 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v72 + 16))(v68, v69, v71);
      v74 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v68, 0, 1, v71);
    }
  }
  else
  {
    v75 = *v69;
    *v68 = *v69;
    swift_retain(v75);
    v74 = 0;
  }
  swift_storeEnumTagMultiPayload(v68, v70, v74);
  v76 = a3[15];
  v77 = a1 + v76;
  v78 = (uint64_t)a2 + v76;
  v79 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
  *(_BYTE *)(a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  return a1;
}

uint64_t sub_15D508(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  if ((uint64_t *)a1 != a2)
  {
    sub_5E09C(a1, &qword_3202C8);
    if ((a2[5] & 1) != 0)
    {
      v6 = a2[3];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *a2;
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
  }
  v8 = (void *)a2[6];
  v9 = *((_BYTE *)a2 + 56);
  sub_AAFF4(v8, v9);
  v10 = *(void **)(a1 + 48);
  v11 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  sub_794D8(v10, v11);
  if ((uint64_t *)a1 != a2)
  {
    v12 = a3[6];
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_5E09C(a1 + v12, &qword_320268);
    v15 = sub_5C154(&qword_320268);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for UUID(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = sub_5C154(&qword_31FA60);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        v19 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v13, v14, v16);
        v19 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v19);
    v21 = a3[7];
    v22 = (uint64_t *)(a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_5E09C(a1 + v21, &qword_3202B8);
    v24 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = v22;
      v27 = v24;
      v28 = 1;
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v26 = v22;
      v27 = v24;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  v30 = a3[8];
  v31 = a1 + v30;
  v32 = (uint64_t)a2 + v30;
  v33 = *(id *)v32;
  v34 = *(_BYTE *)(v32 + 8);
  sub_AAFF4(*(id *)v32, v34);
  v35 = *(void **)v31;
  v36 = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v34;
  sub_794D8(v35, v36);
  if ((uint64_t *)a1 != a2)
  {
    v37 = a3[9];
    v38 = (uint64_t *)(a1 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    sub_5E09C(a1 + v37, &qword_3202A8);
    v40 = sub_5C154(&qword_3202A8);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for PageMetrics(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(v39, 1, v41))
      {
        v43 = sub_5C154(&qword_3202B0);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        v44 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v42 + 16))(v38, v39, v41);
        v44 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v41);
      }
    }
    else
    {
      v45 = *v39;
      *v38 = *v39;
      swift_retain(v45);
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v40, v44);
  }
  v46 = a3[10];
  v47 = a1 + v46;
  v48 = (uint64_t)a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = *(_BYTE *)(v48 + 8);
  sub_64DD8(*(_QWORD *)v48, v50);
  v51 = *(_QWORD *)v47;
  v52 = *(_BYTE *)(v47 + 8);
  *(_QWORD *)v47 = v49;
  *(_BYTE *)(v47 + 8) = v50;
  sub_64FFC(v51, v52);
  if ((uint64_t *)a1 != a2)
  {
    v53 = a3[11];
    v54 = (uint64_t *)(a1 + v53);
    v55 = (uint64_t *)((char *)a2 + v53);
    sub_5E09C(a1 + v53, &qword_321CE8);
    v56 = sub_5C154(&qword_321CE8);
    if (swift_getEnumCaseMultiPayload(v55, v56) == 1)
    {
      v57 = type metadata accessor for LibraryAssetState(0);
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(v55, 1, v57))
      {
        v59 = sub_5C154(&qword_321D30);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        v60 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v58 + 16))(v54, v55, v57);
        v60 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v54, 0, 1, v57);
      }
    }
    else
    {
      v61 = *v55;
      *v54 = *v55;
      swift_retain(v61);
      v60 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v56, v60);
  }
  v62 = a3[12];
  v63 = a1 + v62;
  v64 = (uint64_t)a2 + v62;
  v65 = *(_QWORD *)v64;
  v66 = *(_BYTE *)(v64 + 8);
  sub_64DD8(*(_QWORD *)v64, v66);
  v67 = *(_QWORD *)v63;
  v68 = *(_BYTE *)(v63 + 8);
  *(_QWORD *)v63 = v65;
  *(_BYTE *)(v63 + 8) = v66;
  sub_64FFC(v67, v68);
  v69 = a3[13];
  v70 = a1 + v69;
  v71 = (uint64_t)a2 + v69;
  v72 = *(_QWORD *)v71;
  v73 = *(_BYTE *)(v71 + 8);
  sub_64DD8(*(_QWORD *)v71, v73);
  v74 = *(_QWORD *)v70;
  v75 = *(_BYTE *)(v70 + 8);
  *(_QWORD *)v70 = v72;
  *(_BYTE *)(v70 + 8) = v73;
  sub_64FFC(v74, v75);
  if ((uint64_t *)a1 != a2)
  {
    v76 = a3[14];
    v77 = (uint64_t *)(a1 + v76);
    v78 = (uint64_t *)((char *)a2 + v76);
    sub_5E09C(a1 + v76, &qword_3202D0);
    v79 = sub_5C154(&qword_3202D0);
    if (swift_getEnumCaseMultiPayload(v78, v79) == 1)
    {
      v80 = type metadata accessor for OdpSuggestionType(0);
      v81 = *(_QWORD *)(v80 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v81 + 48))(v78, 1, v80))
      {
        v82 = type metadata accessor for ContextAssetInfoAnalytics(0);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
        v83 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v81 + 16))(v77, v78, v80);
        v83 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v77, 0, 1, v80);
      }
    }
    else
    {
      v84 = *v78;
      *v77 = *v78;
      swift_retain(v84);
      v83 = 0;
    }
    swift_storeEnumTagMultiPayload(v77, v79, v83);
  }
  v85 = a3[15];
  v86 = a1 + v85;
  v87 = (uint64_t)a2 + v85;
  v88 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 24))(v86, v87, v88);
  *(_BYTE *)(a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  return a1;
}

uint64_t sub_15DB10(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_5C154(&qword_320268);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      v13 = sub_5C154(&qword_31FA60);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v14 = a3[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for DataStack(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = (void *)(a1 + v20);
  v24 = (const void *)(a2 + v20);
  v25 = sub_5C154(&qword_3202A8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for PageMetrics(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
    {
      v28 = sub_5C154(&qword_3202B0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v23, v24, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
    swift_storeEnumTagMultiPayload(v23, v25, 1);
  }
  else
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  v29 = a3[10];
  v30 = a3[11];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = (void *)(a1 + v30);
  v34 = (const void *)(a2 + v30);
  v35 = sub_5C154(&qword_321CE8);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for LibraryAssetState(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
    {
      v38 = sub_5C154(&qword_321D30);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v37 + 32))(v33, v34, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v33, 0, 1, v36);
    }
    swift_storeEnumTagMultiPayload(v33, v35, 1);
  }
  else
  {
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  v39 = a3[12];
  v40 = a3[13];
  v41 = a1 + v39;
  v42 = a2 + v39;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
  v43 = a1 + v40;
  v44 = a2 + v40;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  v45 = a3[14];
  v46 = (void *)(a1 + v45);
  v47 = (const void *)(a2 + v45);
  v48 = sub_5C154(&qword_3202D0);
  if (swift_getEnumCaseMultiPayload(v47, v48) == 1)
  {
    v49 = type metadata accessor for OdpSuggestionType(0);
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48))(v47, 1, v49))
    {
      v51 = type metadata accessor for ContextAssetInfoAnalytics(0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 32))(v46, v47, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v46, 0, 1, v49);
    }
    swift_storeEnumTagMultiPayload(v46, v48, 1);
  }
  else
  {
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  v52 = a3[15];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_15DFC0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (a1 != a2)
  {
    sub_5E09C(a1, &qword_3202C8);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v7 = *(_BYTE *)(a2 + 56);
  v8 = *(void **)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v7;
  sub_794D8(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_5E09C(a1 + v10, &qword_320268);
    v13 = sub_5C154(&qword_320268);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for UUID(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        v16 = sub_5C154(&qword_31FA60);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v11, v12, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v17 = a3[7];
    v18 = (void *)(a1 + v17);
    v19 = (const void *)(a2 + v17);
    sub_5E09C(a1 + v17, &qword_3202B8);
    v20 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for DataStack(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  LOBYTE(v24) = *((_BYTE *)v24 + 8);
  v26 = *(void **)v23;
  v27 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = (_BYTE)v24;
  sub_794D8(v26, v27);
  if (a1 != a2)
  {
    v28 = a3[9];
    v29 = (void *)(a1 + v28);
    v30 = (const void *)(a2 + v28);
    sub_5E09C(a1 + v28, &qword_3202A8);
    v31 = sub_5C154(&qword_3202A8);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for PageMetrics(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32))
      {
        v34 = sub_5C154(&qword_3202B0);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v29, v30, v32);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      }
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
  }
  v35 = a3[10];
  v36 = a1 + v35;
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  LOBYTE(v37) = *((_BYTE *)v37 + 8);
  v39 = *(_QWORD *)v36;
  v40 = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = (_BYTE)v37;
  sub_64FFC(v39, v40);
  if (a1 != a2)
  {
    v41 = a3[11];
    v42 = (void *)(a1 + v41);
    v43 = (const void *)(a2 + v41);
    sub_5E09C(a1 + v41, &qword_321CE8);
    v44 = sub_5C154(&qword_321CE8);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for LibraryAssetState(0);
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v45))
      {
        v47 = sub_5C154(&qword_321D30);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v42, v43, v45);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
      }
      swift_storeEnumTagMultiPayload(v42, v44, 1);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
  }
  v48 = a3[12];
  v49 = a1 + v48;
  v50 = (uint64_t *)(a2 + v48);
  v51 = *v50;
  LOBYTE(v50) = *((_BYTE *)v50 + 8);
  v52 = *(_QWORD *)v49;
  v53 = *(_BYTE *)(v49 + 8);
  *(_QWORD *)v49 = v51;
  *(_BYTE *)(v49 + 8) = (_BYTE)v50;
  sub_64FFC(v52, v53);
  v54 = a3[13];
  v55 = a1 + v54;
  v56 = (uint64_t *)(a2 + v54);
  v57 = *v56;
  LOBYTE(v56) = *((_BYTE *)v56 + 8);
  v58 = *(_QWORD *)v55;
  v59 = *(_BYTE *)(v55 + 8);
  *(_QWORD *)v55 = v57;
  *(_BYTE *)(v55 + 8) = (_BYTE)v56;
  sub_64FFC(v58, v59);
  if (a1 != a2)
  {
    v60 = a3[14];
    v61 = (void *)(a1 + v60);
    v62 = (const void *)(a2 + v60);
    sub_5E09C(a1 + v60, &qword_3202D0);
    v63 = sub_5C154(&qword_3202D0);
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      v64 = type metadata accessor for OdpSuggestionType(0);
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v62, 1, v64))
      {
        v66 = type metadata accessor for ContextAssetInfoAnalytics(0);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v65 + 32))(v61, v62, v64);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v61, 0, 1, v64);
      }
      swift_storeEnumTagMultiPayload(v61, v63, 1);
    }
    else
    {
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
  }
  v67 = a3[15];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_15E540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15E54C);
}

uint64_t sub_15E54C(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_5C154(&qword_321D40);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = sub_5C154(&qword_323C18);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v13 = sub_5C154(&qword_326488);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[9];
        }
        else
        {
          v14 = sub_5C154(&qword_321D38);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[11];
          }
          else
          {
            v15 = sub_5C154(&qword_321D48);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              v10 = v15;
              v11 = a3[14];
            }
            else
            {
              v10 = type metadata accessor for ListItemViewModel(0);
              v9 = *(_QWORD *)(v10 - 8);
              v11 = a3[15];
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_15E688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15E694);
}

uint64_t sub_15E694(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 40) = -(char)a2;
  }
  else
  {
    v8 = sub_5C154(&qword_321D40);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = sub_5C154(&qword_323C18);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v13 = sub_5C154(&qword_326488);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[9];
        }
        else
        {
          v14 = sub_5C154(&qword_321D38);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[11];
          }
          else
          {
            v15 = sub_5C154(&qword_321D48);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v15;
              v11 = a4[14];
            }
            else
            {
              v10 = type metadata accessor for ListItemViewModel(0);
              v9 = *(_QWORD *)(v10 - 8);
              v11 = a4[15];
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_15E7D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[13];

  v14[0] = ")";
  v14[1] = "\t";
  sub_AC5A0(319, (unint64_t *)&qword_321DC0, &qword_31FA60);
  if (v3 <= 0x3F)
  {
    v14[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_663E4(319, &qword_323C98, (uint64_t (*)(uint64_t))&type metadata accessor for DataStack);
    if (v5 <= 0x3F)
    {
      v14[3] = *(_QWORD *)(v4 - 8) + 64;
      v14[4] = "\t";
      sub_AC5A0(319, (unint64_t *)&unk_3264F8, &qword_3202B0);
      if (v7 <= 0x3F)
      {
        v14[5] = *(_QWORD *)(v6 - 8) + 64;
        v14[6] = "\t";
        sub_AC5A0(319, &qword_321DB8, &qword_321D30);
        if (v9 <= 0x3F)
        {
          v14[7] = *(_QWORD *)(v8 - 8) + 64;
          v14[8] = "\t";
          v14[9] = "\t";
          sub_663E4(319, (unint64_t *)&qword_321DC8, (uint64_t (*)(uint64_t))&type metadata accessor for ContextAssetInfoAnalytics);
          if (v11 <= 0x3F)
          {
            v14[10] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for ListItemViewModel(319);
            if (v13 <= 0x3F)
            {
              v14[11] = *(_QWORD *)(v12 - 8) + 64;
              v14[12] = &unk_261390;
              swift_initStructMetadata(a1, 256, 13, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_15E934(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B863C, 1);
}

_QWORD *sub_15E944@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 16))(&v6, v3, v4);
  *a2 = v6;
  return result;
}

uint64_t sub_15E99C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ContextActionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_15E9D4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (int *)type metadata accessor for SwipeActionButtonsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  if ((*(_BYTE *)(v0 + v4 + 40) & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v4));
  else
    swift_release(*(_QWORD *)v6);
  sub_794D8(*(id *)(v6 + 48), *(_BYTE *)(v6 + 56));
  v7 = (_QWORD *)(v6 + v1[6]);
  v8 = sub_5C154(&qword_320268);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (_QWORD *)(v6 + v1[7]);
  v12 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  sub_794D8(*(id *)(v6 + v1[8]), *(_BYTE *)(v6 + v1[8] + 8));
  v14 = (_QWORD *)(v6 + v1[9]);
  v15 = sub_5C154(&qword_3202A8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for PageMetrics(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  sub_64FFC(*(_QWORD *)(v6 + v1[10]), *(_BYTE *)(v6 + v1[10] + 8));
  v18 = (_QWORD *)(v6 + v1[11]);
  v19 = sub_5C154(&qword_321CE8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for LibraryAssetState(0);
    v21 = *(_QWORD *)(v20 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
      (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  sub_64FFC(*(_QWORD *)(v6 + v1[12]), *(_BYTE *)(v6 + v1[12] + 8));
  sub_64FFC(*(_QWORD *)(v6 + v1[13]), *(_BYTE *)(v6 + v1[13] + 8));
  v22 = (_QWORD *)(v6 + v1[14]);
  v23 = sub_5C154(&qword_3202D0);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for OdpSuggestionType(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  v26 = v6 + v1[15];
  v27 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_15ECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SwipeActionButtonsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_15ED24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SwipeActionButtonsView(0) - 8) + 80);
  return sub_15AF64(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_15ED70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326560;
  if (!qword_326560)
  {
    v1 = sub_667D0(&qword_326558);
    sub_15EDDC();
    sub_15EE60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326560);
  }
  return result;
}

unint64_t sub_15EDDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326568;
  if (!qword_326568)
  {
    v1 = sub_667D0(&qword_326570);
    sub_A6308();
    sub_67060(&qword_326578, &qword_326580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326568);
  }
  return result;
}

unint64_t sub_15EE60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326588;
  if (!qword_326588)
  {
    v1 = sub_667D0(&qword_326590);
    sub_67060(&qword_326598, &qword_326118, (uint64_t)&protocol conformance descriptor for PerformActionView<A>);
    sub_67060(&qword_326578, &qword_326580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326588);
  }
  return result;
}

uint64_t sub_15EEFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_15EF24(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_15EF88@<X0>(uint64_t a1@<X8>)
{
  return sub_15A840(a1);
}

unint64_t sub_15EF94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3265E0;
  if (!qword_3265E0)
  {
    v1 = sub_667D0(&qword_3265E8);
    sub_15ED70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_3265E0);
  }
  return result;
}

uint64_t FlowActionCardSetPresentationImplementation.perform(_:asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  v53 = a2;
  v3 = type metadata accessor for ActionOutcome(0);
  v55 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_322410);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_3265F0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FlowAction.NewCardSetDestination(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v54 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v2;
  v18 = FlowAction.presentation.getter(v15);
  v20 = v19;
  v22 = static FlowActionPresentation.cardsPresent.getter();
  v23 = v21;
  if (v18 == v22 && v20 == v21)
  {
    v24 = swift_bridgeObjectRelease_n(v20, 2);
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v21, 0);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v23);
    if ((v25 & 1) == 0)
    {
LABEL_9:
      sub_5C154(&qword_3208F8);
      (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v5, enum case for ActionOutcome.unsupported(_:), v56);
      return Promise.__allocating_init(value:)(v5);
    }
  }
  FlowAction.destination.getter(v57, v24);
  v26 = sub_5C154(&qword_3265F8);
  v27 = swift_dynamicCast(v12, v57, v26, v13, 6);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if ((v27 & 1) == 0)
  {
    v28(v12, 1, 1, v13);
    sub_5E09C((uint64_t)v12, &qword_3265F0);
    goto LABEL_9;
  }
  v28(v12, 0, 1, v13);
  v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v54, v12, v13);
  FlowAction.origin.getter(v29);
  v30 = type metadata accessor for ActionOrigin(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v8, 1, v30) == 1)
  {
    sub_5E09C((uint64_t)v8, &qword_322410);
    v32 = 0;
  }
  else
  {
    v32 = ActionOrigin.appAnalyticsMetricsFeedOptions.getter();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v30);
  }
  v34 = v53;
  v35 = sub_5C154(&qword_31FA90);
  BaseObjectGraph.inject<A>(_:)(v57, v35, v35);
  swift_bridgeObjectRetain(v32);
  swift_retain(v34);
  swift_bridgeObjectRetain(v17);
  v37 = sub_15F790(v36, v32);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease_n(v32, 2);
  v38 = swift_release(v34);
  v39 = v54;
  v40 = FlowAction.NewCardSetDestination.focusedAdamID.getter(v38);
  v42 = v41;
  v43 = sub_15F8B4((uint64_t)v37, v40, v41);
  v45 = v44;
  swift_bridgeObjectRelease(v42);
  if ((v45 & 1) != 0)
    v46 = 0;
  else
    v46 = v43;
  v47 = v58;
  v48 = v59;
  sub_66898(v57, v58);
  v49 = sub_134468((uint64_t)v37);
  swift_bridgeObjectRelease(v37);
  if ((v46 & 0x8000000000000000) == 0)
  {
    v50 = sub_53458((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v48 + 88))(v49, v46, 1, v50, v47, v48);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v49);
    sub_5C154(&qword_3208F8);
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v5, enum case for ActionOutcome.performed(_:), v56);
    v33 = Promise.__allocating_init(value:)(v5);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v39, v13);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v57);
    return v33;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

void sub_15F474(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *ObjectType;
  uint64_t v36;

  v4 = CardInfo.options.getter();
  v36 = v4;
  if (a1)
  {
    v5 = v4;
    v6 = sub_5C154(&qword_3259E8);
    ObjectType = (void *)v6;
    *(_QWORD *)&v34 = a1;
    sub_5D000(&v34, &v31);
    swift_bridgeObjectRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v33 = v5;
    v8 = sub_7EEDC((uint64_t)&v31, v32);
    v9 = __chkstk_darwin(v8);
    v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v12 + 16))(v11, v9);
    sub_17541C((uint64_t)v11, 0xD000000000000013, 0x800000000026F8F0, isUniquelyReferenced_nonNull_native, &v33, v6);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v31);
    v13 = v33;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    sub_1DCA38(0xD000000000000013, 0x800000000026F8F0, &v34);
    sub_5E09C((uint64_t)&v34, &qword_326608);
    v13 = v36;
  }
  v14 = sub_5C154(&qword_326610);
  BaseObjectGraph.inject<A>(_:)(&v33, v14, v14);
  v15 = v33;
  ObjectType = (void *)swift_getObjectType();
  *(_QWORD *)&v34 = v15;
  sub_5D000(&v34, &v31);
  LOBYTE(v15) = swift_isUniquelyReferenced_nonNull_native(v13);
  v30 = v13;
  v16 = v32;
  v17 = sub_7EEDC((uint64_t)&v31, v32);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v21 + 16))(v20, v18);
  sub_17541C((uint64_t)v20, 0xD000000000000013, 0x8000000000272E60, v15, &v30, v16);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v31);
  v22 = v30;
  swift_bridgeObjectRelease(0x8000000000000000);
  ObjectType = &type metadata for Bool;
  LOBYTE(v34) = 1;
  sub_5D000(&v34, &v31);
  LOBYTE(v16) = swift_isUniquelyReferenced_nonNull_native(v22);
  v33 = v22;
  v23 = sub_7EEDC((uint64_t)&v31, v32);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v27 + 16))(v26, v24);
  sub_175284(*v26, 0x647261436E497369, 0xE800000000000000, v16, &v33);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v31);
  v28 = v33;
  swift_bridgeObjectRelease(0x8000000000000000);
  *a2 = v28;
}

_QWORD *sub_15F790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_20CA50(0, v4, 0);
    v5 = _swiftEmptyArrayStorage;
    v9 = *(_QWORD *)(type metadata accessor for CardInfo(0, v8) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      sub_15F474(a2, &v16);
      if (v3)
        break;
      v3 = 0;
      v12 = v16;
      v17 = v5;
      v14 = v5[2];
      v13 = v5[3];
      if (v14 >= v13 >> 1)
      {
        sub_20CA50(v13 > 1, v14 + 1, 1);
        v5 = v17;
      }
      v5[2] = v14 + 1;
      v5[v14 + 4] = v12;
      v10 += v11;
      if (!--v4)
        return v5;
    }
    swift_release(v5);
  }
  return v5;
}

uint64_t sub_15F8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v6 = 0;
  v7 = a1 + 32;
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 8 * v6);
    v9 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      v10 = sub_582B4(25705, 0xE200000000000000);
      if ((v11 & 1) != 0)
      {
        sub_5DC5C(*(_QWORD *)(v8 + 56) + 32 * v10, (uint64_t)v24);
        v12 = sub_5C154(&qword_326600);
        if (swift_dynamicCast(&v22, v24, v12, &type metadata for String, 6))
        {
          v13 = v23;
          if (v22 == a2 && v23 == a3)
          {
LABEL_20:
            swift_bridgeObjectRelease(v8);
            v20 = a3;
            goto LABEL_22;
          }
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, a2, a3, 0);
          swift_bridgeObjectRelease(v13);
          if ((v14 & 1) != 0)
            break;
        }
      }
    }
    if (*(_QWORD *)(v8 + 16)
      && (v15 = sub_582B4(0x644965726F7473, 0xE700000000000000), (v16 & 1) != 0)
      && (sub_5DC5C(*(_QWORD *)(v8 + 56) + 32 * v15, (uint64_t)v24),
          v17 = sub_5C154(&qword_326600),
          (swift_dynamicCast(&v22, v24, v17, &type metadata for String, 6) & 1) != 0))
    {
      v18 = v23;
      if (v22 == a2 && v23 == a3)
        goto LABEL_20;
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, a2, a3, 0);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v18);
      if ((v19 & 1) != 0)
        return v6;
    }
    else
    {
      swift_bridgeObjectRelease(v8);
    }
    if (v3 == ++v6)
      return 0;
  }
  v20 = v8;
LABEL_22:
  swift_bridgeObjectRelease(v20);
  return v6;
}

unint64_t sub_15FAB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324BF8;
  if (!qword_324BF8)
  {
    v1 = type metadata accessor for FlowAction(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction, v1);
    atomic_store(result, (unint64_t *)&qword_324BF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowActionCardSetPresentationImplementation()
{
  return &type metadata for FlowActionCardSetPresentationImplementation;
}

uint64_t sub_15FB0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  ValueMetadata *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  ValueMetadata *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata *v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  ValueMetadata *v42;
  _UNKNOWN **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  ValueMetadata *v53;
  _QWORD *v54;
  uint64_t DynamicType;
  _UNKNOWN **v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  ValueMetadata *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  int64_t v65;
  _QWORD *v66;
  uint64_t v67;
  ValueMetadata *v68;
  _QWORD *v69;
  uint64_t v70;
  _UNKNOWN **v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  os_log_type_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t result;
  char *v92;
  os_log_type_t v93;
  os_log_type_t v94;
  NSObject *log;
  _UNKNOWN **v96;
  _UNKNOWN **v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  ValueMetadata *v102;
  uint64_t v103;
  uint64_t v104;
  ValueMetadata *v105;
  ValueMetadata *v106;
  uint64_t v107;
  char v108[40];
  _QWORD *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  ValueMetadata *v113;
  _UNKNOWN **v114;
  uint64_t v115;
  uint64_t v116;
  ValueMetadata *v117;
  _UNKNOWN **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = (ValueMetadata *)v0[3];
  v5 = *((_BYTE *)v0 + 32);
  v6 = v0[5];
  v7 = v0[6];
  v8 = (ValueMetadata *)v0[7];
  v9 = (_UNKNOWN **)v0[8];
  v11 = v0[9];
  v10 = v0[10];
  v12 = v0[11];
  v98 = *(_QWORD *)(v3 + 16);
  v107 = v12;
  v101 = v6;
  v102 = v8;
  v100 = v7;
  v99 = v5;
  if (v98 >= v6)
  {
    *(_QWORD *)&v111 = *v0;
    *((_QWORD *)&v111 + 1) = v2;
    v112 = v3;
    v113 = v4;
    LOBYTE(v114) = v5;
    v115 = v6;
    v116 = v7;
    v117 = v8;
    v118 = v9;
    v119 = v11;
    v120 = v10;
    v121 = v12;
    v31 = sub_1605E0();
    v32 = v31;
    v110 = (char *)_swiftEmptyArrayStorage;
    v33 = *(_QWORD *)(v31 + 16);
    if (v33)
    {
      v34 = v31 + 32;
      do
      {
        sub_5E0D8(v34, (uint64_t)&v111);
        v35 = v113;
        v36 = v114;
        sub_66898(&v111, (uint64_t)v113);
        v37 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v36[1])(v35, v36);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v111);
        sub_E03B8(v37);
        v34 += 40;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease(v32);
      v23 = v110;
    }
    else
    {
      swift_bridgeObjectRelease(v31);
      v23 = (char *)_swiftEmptyArrayStorage;
    }
    if (qword_31E698 != -1)
      swift_once(&qword_31E698, sub_126F24);
    v45 = type metadata accessor for Logger(0);
    sub_5240C(v45, (uint64_t)qword_325358);
    swift_bridgeObjectRetain_n(v23, 2);
    swift_bridgeObjectRetain_n(v2, 2);
    swift_bridgeObjectRetain_n(v3, 2);
    swift_bridgeObjectRetain_n(v4, 2);
    v46 = swift_retain_n(v107, 2);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v93 = v48;
      log = v47;
      v97 = v9;
      v104 = v2;
      v106 = v4;
      v49 = swift_slowAlloc(32, -1);
      v92 = (char *)swift_slowAlloc(64, -1);
      v110 = v92;
      *(_DWORD *)v49 = 136315650;
      v50 = *((_QWORD *)v23 + 2);
      v51 = _swiftEmptyArrayStorage;
      if (v50)
      {
        v109 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v23);
        sub_20CA08(0, v50, 0);
        v52 = (uint64_t)(v23 + 32);
        do
        {
          sub_5E0D8(v52, (uint64_t)&v111);
          v53 = v113;
          v54 = sub_66898(&v111, (uint64_t)v113);
          DynamicType = swift_getDynamicType(v54, v53, 1);
          v56 = v114;
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v111);
          v51 = v109;
          if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
          {
            sub_20CA08(0, v109[2] + 1, 1);
            v51 = v109;
          }
          v58 = v51[2];
          v57 = v51[3];
          if (v58 >= v57 >> 1)
          {
            sub_20CA08(v57 > 1, v58 + 1, 1);
            v51 = v109;
          }
          v51[2] = v58 + 1;
          v59 = &v51[2 * v58];
          v59[4] = DynamicType;
          v59[5] = v56;
          v52 += 40;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease(v23);
      }
      v75 = sub_5C154(&qword_326618);
      v76 = Array.description.getter(v51, v75);
      v78 = v77;
      swift_bridgeObjectRelease(v51);
      *(_QWORD *)&v111 = sub_57CD8(v76, v78, (uint64_t *)&v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease_n(v23, 2);
      swift_bridgeObjectRelease(v78);
      *(_WORD *)(v49 + 12) = 2048;
      *(_QWORD *)&v111 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v49 + 14, v49 + 22);
      *(_WORD *)(v49 + 22) = 2080;
      LOBYTE(v111) = v99;
      *((_QWORD *)&v111 + 1) = v101;
      v112 = v100;
      v113 = v102;
      v114 = v97;
      v115 = v11;
      v116 = v10;
      v79 = YearInReviewEligibilityCriteria.description.getter();
      v81 = v80;
      *(_QWORD *)&v111 = sub_57CD8(v79, v80, (uint64_t *)&v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v49 + 24, v49 + 32);
      swift_release_n(v107, 2);
      swift_bridgeObjectRelease_n(v106, 2);
      swift_bridgeObjectRelease_n(v3, 2);
      swift_bridgeObjectRelease_n(v104, 2);
      swift_bridgeObjectRelease(v81);
      v82 = v93;
      v83 = "Displaying eligible frames %s with booksFinished: %ld, using eligibilityCriteria: %s";
      goto LABEL_49;
    }

    swift_release_n(v107, 2);
    v60 = v4;
LABEL_46:
    swift_bridgeObjectRelease_n(v60, 2);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease_n(v23, 2);
    return (uint64_t)v23;
  }
  v96 = (_UNKNOWN **)v0[8];
  v113 = &type metadata for NothingToReviewFrameFactory;
  v114 = &off_2F0638;
  v13 = (_QWORD *)swift_allocObject(&unk_2EF2B0, 48, 7);
  *(_QWORD *)&v111 = v13;
  v13[2] = v1;
  v13[3] = v2;
  v13[4] = v3;
  v13[5] = v4;
  v14 = sub_5C154(&qword_31F0F8);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_258070;
  v16 = v15 + 32;
  sub_5DC98(&v111, v15 + 32);
  v17 = sub_5C154(&qword_326620);
  inited = swift_initStackObject(v17, v108);
  v19 = v2;
  v2 = inited;
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = v15;
  v20 = inited + 32;
  v21 = *(_QWORD *)(v15 + 16);
  v103 = v19;
  swift_bridgeObjectRetain_n(v19, 2);
  swift_bridgeObjectRetain_n(v3, 2);
  v105 = v4;
  swift_bridgeObjectRetain_n(v4, 2);
  swift_retain(v12);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v15);
  v22 = sub_57880(0, v21, 1, (char *)_swiftEmptyArrayStorage);
  v23 = v22;
  if (!*(_QWORD *)(v15 + 16))
  {
    v27 = v4;
    if (v21)
    {
      __break(1u);
LABEL_52:
      swift_once(&qword_31E698, sub_126F24);
LABEL_36:
      v61 = type metadata accessor for Logger(0);
      sub_5240C(v61, (uint64_t)qword_325358);
      swift_bridgeObjectRetain_n(v2, 2);
      swift_bridgeObjectRetain_n(v3, 2);
      swift_bridgeObjectRetain_n(v27, 2);
      swift_retain_n(v1, 2);
      swift_bridgeObjectRetain_n(v23, 2);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v94 = v64;
        log = v63;
        v49 = swift_slowAlloc(32, -1);
        v92 = (char *)swift_slowAlloc(64, -1);
        v110 = v92;
        *(_DWORD *)v49 = 136315650;
        v65 = *((_QWORD *)v23 + 2);
        v66 = _swiftEmptyArrayStorage;
        if (v65)
        {
          v109 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v23);
          sub_20CA08(0, v65, 0);
          v67 = (uint64_t)(v23 + 32);
          do
          {
            sub_5E0D8(v67, (uint64_t)&v111);
            v68 = v113;
            v69 = sub_66898(&v111, (uint64_t)v113);
            v70 = swift_getDynamicType(v69, v68, 1);
            v71 = v114;
            _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v111);
            v66 = v109;
            if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
            {
              sub_20CA08(0, v66[2] + 1, 1);
              v66 = v109;
            }
            v73 = v66[2];
            v72 = v66[3];
            if (v73 >= v72 >> 1)
            {
              sub_20CA08(v72 > 1, v73 + 1, 1);
              v66 = v109;
            }
            v66[2] = v73 + 1;
            v74 = &v66[2 * v73];
            v74[4] = v70;
            v74[5] = v71;
            v67 += 40;
            --v65;
          }
          while (v65);
          swift_bridgeObjectRelease(v23);
        }
        v84 = sub_5C154(&qword_326618);
        v85 = Array.description.getter(v66, v84);
        v87 = v86;
        swift_bridgeObjectRelease(v66);
        *(_QWORD *)&v111 = sub_57CD8(v85, v87, (uint64_t *)&v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v49 + 4, v49 + 12);
        swift_bridgeObjectRelease_n(v23, 2);
        swift_bridgeObjectRelease(v87);
        *(_WORD *)(v49 + 12) = 2048;
        *(_QWORD *)&v111 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v49 + 14, v49 + 22);
        *(_WORD *)(v49 + 22) = 2080;
        LOBYTE(v111) = v99;
        *((_QWORD *)&v111 + 1) = v101;
        v112 = v100;
        v113 = v102;
        v114 = v96;
        v115 = v11;
        v116 = v10;
        v88 = YearInReviewEligibilityCriteria.description.getter();
        v90 = v89;
        *(_QWORD *)&v111 = sub_57CD8(v88, v89, (uint64_t *)&v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v49 + 24, v49 + 32);
        swift_release_n(v107, 2);
        swift_bridgeObjectRelease_n(v105, 2);
        swift_bridgeObjectRelease_n(v3, 2);
        swift_bridgeObjectRelease_n(v103, 2);
        swift_bridgeObjectRelease(v90);
        v82 = v94;
        v83 = "Displaying ineligible frames %s with booksFinished: %ld, using eligibilityCriteria: %s";
LABEL_49:
        _os_log_impl(&dword_0, log, v82, v83, (uint8_t *)v49, 0x20u);
        swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v49, -1, -1);

        return (uint64_t)v23;
      }

      swift_release_n(v1, 2);
      v60 = v27;
      goto LABEL_46;
    }
    goto LABEL_17;
  }
  v24 = *((_QWORD *)v22 + 2);
  if ((*((_QWORD *)v22 + 3) >> 1) - v24 < v21)
  {
    __break(1u);
    goto LABEL_54;
  }
  v25 = (unint64_t)&v22[40 * v24 + 32];
  if (v16 < v25 + 40 * v21 && v25 < v16 + 40 * v21)
    goto LABEL_55;
  sub_5C154(&qword_31F100);
  swift_arrayInitWithCopy(v25);
  v27 = v4;
  if (!v21)
  {
LABEL_17:
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v2);
    swift_setDeallocating(v2);
    v38 = *(_QWORD *)(v2 + 16);
    v39 = sub_5C154(&qword_326628);
    swift_arrayDestroy(v20, v38, v39);
    swift_release(v12);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v3);
    v2 = v103;
    swift_bridgeObjectRelease(v103);
    v110 = (char *)_swiftEmptyArrayStorage;
    v40 = *((_QWORD *)v23 + 2);
    if (v40)
    {
      v41 = (uint64_t)(v23 + 32);
      swift_bridgeObjectRetain(v23);
      do
      {
        sub_5E0D8(v41, (uint64_t)&v111);
        v42 = v113;
        v43 = v114;
        sub_66898(&v111, (uint64_t)v113);
        v44 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v43[1])(v42, v43);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v111);
        sub_E03B8(v44);
        v41 += 40;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease_n(v23, 2);
      v23 = v110;
    }
    else
    {
      swift_bridgeObjectRelease(v23);
      v23 = (char *)_swiftEmptyArrayStorage;
    }
    v1 = v107;
    if (qword_31E698 == -1)
      goto LABEL_36;
    goto LABEL_52;
  }
  v28 = *((_QWORD *)v23 + 2);
  v29 = __OFADD__(v28, v21);
  v30 = v28 + v21;
  if (!v29)
  {
    *((_QWORD *)v23 + 2) = v30;
    goto LABEL_17;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1605E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  int64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79[40];
  char v80[80];
  __int128 v81;
  ValueMetadata *v82;
  _UNKNOWN **v83;
  __int128 v84;
  ValueMetadata *v85;
  ValueMetadata *v86;
  _UNKNOWN **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  id v98;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v74 = *((unsigned __int8 *)v0 + 32);
  v75 = v0[5];
  v5 = v0[7];
  v77 = v0[8];
  v78 = v0[6];
  v6 = v0[9];
  v7 = v0[10];
  v73 = v0[11];
  v85 = &type metadata for WelcomeFrameFactory;
  v86 = (ValueMetadata *)&off_2F4420;
  v8 = (_QWORD *)swift_allocObject(&unk_2EF2D8, 48, 7);
  *(_QWORD *)&v84 = v8;
  v8[2] = v1;
  v8[3] = v2;
  v8[4] = v3;
  v8[5] = v4;
  v76 = sub_5C154(&qword_31F0F8);
  v9 = swift_allocObject(v76, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_258070;
  v70 = v9;
  sub_5DC98(&v84, v9 + 32);
  v85 = &type metadata for BooksFinishedFrameFactory;
  v86 = (ValueMetadata *)&off_2ED7B0;
  v10 = (_QWORD *)swift_allocObject(&unk_2EF300, 48, 7);
  *(_QWORD *)&v84 = v10;
  v10[2] = v1;
  v10[3] = v2;
  v10[4] = v3;
  v10[5] = v4;
  v11 = swift_allocObject(v76, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_258070;
  v69 = v11;
  sub_5DC98(&v84, v11 + 32);
  v86 = &type metadata for HighlightsDataProvider;
  v87 = &off_2EB718;
  v12 = (_QWORD *)swift_allocObject(&unk_2EF328, 56, 7);
  v12[2] = v1;
  v12[3] = v2;
  v12[4] = v3;
  v12[5] = v4;
  v72 = v1;
  v12[6] = v1;
  *(_QWORD *)&v84 = 0x4072C00000000000;
  *((_QWORD *)&v84 + 1) = v12;
  v13 = objc_allocWithZone((Class)NSDateComponentsFormatter);
  swift_bridgeObjectRetain_n(v2, 3);
  swift_bridgeObjectRetain_n(v3, 3);
  v14 = objc_msgSend(v13, "init", swift_bridgeObjectRetain_n(v4, 3).n128_f64[0]);
  objc_msgSend(v14, "setUnitsStyle:", 2);
  objc_msgSend(v14, "setAllowedUnits:", 112);
  objc_msgSend(v14, "setFormattingContext:", 5);
  v95 = v14;
  v15 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v15, "setUnitsStyle:", 3);
  objc_msgSend(v15, "setAllowedUnits:", 96);
  objc_msgSend(v15, "setFormattingContext:", 5);
  v96 = v15;
  v16 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v16, "setUnitsStyle:", 3);
  objc_msgSend(v16, "setAllowedUnits:", 64);
  v17 = v74;
  v18 = v75;
  objc_msgSend(v16, "setFormattingContext:", 2);
  v97 = v16;
  v19 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v19, "setNumberStyle:", 1);
  objc_msgSend(v19, "setMaximumFractionDigits:", 0);
  v98 = v19;
  LOBYTE(v88) = v74;
  v89 = v75;
  v90 = v78;
  v91 = v5;
  v92 = v77;
  v93 = v6;
  v94 = v7;
  v82 = &type metadata for HighlightFramesFactory;
  v83 = &off_2F06E8;
  *(_QWORD *)&v81 = swift_allocObject(&unk_2EF350, 152, 7);
  sub_160FA4((uint64_t)&v84, v81 + 16);
  v20 = swift_allocObject(v76, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_258070;
  v68 = v20;
  sub_5DC98(&v81, v20 + 32);
  sub_160FE0((uint64_t)&v84);
  v71 = v5;
  if (v74 == 1)
  {
    v85 = &type metadata for ReadingInsightsDataProvider;
    v86 = (ValueMetadata *)&off_2EFE30;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    v22 = sub_178C68(v21);
    swift_bridgeObjectRelease(v4);
    v67 = v3;
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRetain(v22);
    v24 = sub_1795D4(v23);
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)&v84 = v22;
    *((_QWORD *)&v84 + 1) = v24;
    LOBYTE(v87) = 1;
    v88 = v75;
    v89 = v78;
    v90 = v5;
    v91 = v77;
    v92 = v6;
    v93 = v7;
    v82 = &type metadata for ReadingInsightFramesFactory;
    v83 = &off_2E9700;
    *(_QWORD *)&v81 = swift_allocObject(&unk_2EF3F0, 112, 7);
    sub_90440((uint64_t)&v84, v81 + 16);
    v25 = swift_allocObject(v76, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_258070;
    v26 = v25 + 32;
    sub_5DC98(&v81, v25 + 32);
    sub_904A4(&v84);
    v27 = sub_5C154(&qword_326620);
    inited = swift_initStackObject(v27, v79);
    *(_OWORD *)(inited + 16) = xmmword_258070;
    *(_QWORD *)(inited + 32) = v25;
    v29 = inited + 32;
    v30 = *(_QWORD *)(v25 + 16);
    swift_bridgeObjectRetain(inited);
    swift_bridgeObjectRetain(v25);
    v31 = sub_57880(0, v30, 1, (char *)_swiftEmptyArrayStorage);
    v32 = v31;
    v33 = v2;
    if (*(_QWORD *)(v25 + 16))
    {
      v34 = *((_QWORD *)v31 + 2);
      if ((*((_QWORD *)v31 + 3) >> 1) - v34 < v30)
        goto LABEL_39;
      v35 = (unint64_t)&v31[40 * v34 + 32];
      if (v26 < v35 + 40 * v30 && v35 < v26 + 40 * v30)
        goto LABEL_41;
      sub_5C154(&qword_31F100);
      swift_arrayInitWithCopy(v35);
      v36 = v67;
      if (v30)
      {
        v37 = *((_QWORD *)v32 + 2);
        v38 = __OFADD__(v37, v30);
        v39 = v37 + v30;
        if (v38)
          goto LABEL_40;
        *((_QWORD *)v32 + 2) = v39;
      }
    }
    else
    {
      v36 = v67;
      if (v30)
        goto LABEL_38;
    }
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(inited);
    swift_setDeallocating(inited);
    v41 = *(_QWORD *)(inited + 16);
    v42 = sub_5C154(&qword_326628);
    swift_arrayDestroy(v29, v41, v42);
    v40 = v73;
    v18 = v75;
    v17 = 1;
  }
  else
  {
    v32 = (char *)_swiftEmptyArrayStorage;
    v40 = v73;
    v33 = v2;
    v36 = v3;
  }
  v85 = &type metadata for ReaderTypeDataProvider;
  v86 = (ValueMetadata *)&off_2F4AE8;
  v43 = (_QWORD *)swift_allocObject(&unk_2EF378, 56, 7);
  *(_QWORD *)&v84 = v43;
  swift_bridgeObjectRetain_n(v33, 2);
  swift_bridgeObjectRetain_n(v36, 2);
  swift_bridgeObjectRetain_n(v4, 2);
  v44 = sub_20796C(v36);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v33);
  v43[2] = v72;
  v43[3] = v33;
  v43[4] = v36;
  v43[5] = v4;
  v43[6] = v44;
  v82 = &type metadata for ReaderTypeFramesFactory;
  v83 = &off_2EFFA8;
  *(_QWORD *)&v81 = swift_allocObject(&unk_2EF3A0, 56, 7);
  sub_161074((uint64_t)&v84, v81 + 16);
  v45 = swift_allocObject(v76, 72, 7);
  *(_OWORD *)(v45 + 16) = xmmword_258070;
  sub_5DC98(&v81, v45 + 32);
  sub_1610B0(&v84);
  v85 = &type metadata for SummaryFrameFactory;
  v86 = (ValueMetadata *)&off_2E9EF8;
  v46 = swift_allocObject(&unk_2EF3C8, 112, 7);
  *(_QWORD *)&v84 = v46;
  *(_QWORD *)(v46 + 16) = v72;
  *(_QWORD *)(v46 + 24) = v33;
  *(_QWORD *)(v46 + 32) = v36;
  *(_QWORD *)(v46 + 40) = v4;
  *(_BYTE *)(v46 + 48) = v17;
  *(_QWORD *)(v46 + 56) = v18;
  *(_QWORD *)(v46 + 64) = v78;
  *(_QWORD *)(v46 + 72) = v71;
  *(_QWORD *)(v46 + 80) = v77;
  *(_QWORD *)(v46 + 88) = v6;
  *(_QWORD *)(v46 + 96) = v7;
  *(_QWORD *)(v46 + 104) = v40;
  v47 = swift_allocObject(v76, 72, 7);
  *(_OWORD *)(v47 + 16) = xmmword_258070;
  sub_5DC98(&v84, v47 + 32);
  v48 = sub_5C154(&qword_326620);
  v49 = v40;
  v50 = swift_initStackObject(v48, v80);
  *(_QWORD *)(v50 + 32) = v70;
  *(_OWORD *)(v50 + 16) = xmmword_261680;
  *(_QWORD *)(v50 + 40) = v69;
  *(_QWORD *)(v50 + 48) = v68;
  *(_QWORD *)(v50 + 56) = v32;
  *(_QWORD *)(v50 + 64) = v45;
  *(_QWORD *)(v50 + 72) = v47;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v4);
  swift_retain(v49);
  swift_bridgeObjectRetain(v50);
  v51 = (char *)_swiftEmptyArrayStorage;
  v52 = 32;
  while (1)
  {
    v53 = *(_QWORD *)(v50 + v52);
    v54 = *(_QWORD *)(v53 + 16);
    v55 = *((_QWORD *)v51 + 2);
    v56 = v55 + v54;
    if (__OFADD__(v55, v54))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(v50 + v52));
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v51);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v56 <= *((_QWORD *)v51 + 3) >> 1)
    {
      if (*(_QWORD *)(v53 + 16))
        goto LABEL_24;
    }
    else
    {
      if (v55 <= v56)
        v58 = v55 + v54;
      else
        v58 = v55;
      v51 = sub_57880(isUniquelyReferenced_nonNull_native, v58, 1, v51);
      if (*(_QWORD *)(v53 + 16))
      {
LABEL_24:
        v59 = *((_QWORD *)v51 + 2);
        if ((*((_QWORD *)v51 + 3) >> 1) - v59 < v54)
          goto LABEL_36;
        v60 = (unint64_t)&v51[40 * v59 + 32];
        if (v53 + 32 < v60 + 40 * v54 && v60 < v53 + 32 + 40 * v54)
          goto LABEL_41;
        sub_5C154(&qword_31F100);
        swift_arrayInitWithCopy(v60);
        if (v54)
        {
          v62 = *((_QWORD *)v51 + 2);
          v38 = __OFADD__(v62, v54);
          v63 = v62 + v54;
          if (v38)
            goto LABEL_37;
          *((_QWORD *)v51 + 2) = v63;
        }
        goto LABEL_14;
      }
    }
    if (v54)
      goto LABEL_35;
LABEL_14:
    swift_bridgeObjectRelease(v53);
    v52 += 8;
    if (v52 == 80)
    {
      swift_bridgeObjectRelease(v50);
      swift_setDeallocating(v50);
      v64 = *(_QWORD *)(v50 + 16);
      v65 = sub_5C154(&qword_326628);
      swift_arrayDestroy(v50 + 32, v64, v65);
      return (uint64_t)v51;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_160F00()
{
  return sub_160F20(48);
}

uint64_t sub_160F08()
{
  return sub_160F20(48);
}

uint64_t sub_160F10()
{
  return sub_160F20(48);
}

uint64_t sub_160F18()
{
  return sub_160F20(56);
}

uint64_t sub_160F20(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease(v1[3]);
  swift_bridgeObjectRelease(v1[4]);
  swift_bridgeObjectRelease(v1[5]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_160F60()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_160FA4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HighlightFramesFactory(a2, a1);
  return a2;
}

uint64_t sub_160FE0(uint64_t a1)
{
  destroy for HighlightFramesFactory(a1);
  return a1;
}

uint64_t sub_161014()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_161050()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_161074(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Shelf.FooterComponentModel(a2, a1);
  return a2;
}

_QWORD *sub_1610B0(_QWORD *a1)
{
  destroy for Shelf.HeaderComponentModel(a1);
  return a1;
}

uint64_t sub_1610E4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_161120()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t SharedWithYouActionItem.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E0D8(v1, a1);
}

uint64_t SharedWithYouActionItem.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E0D8(v1 + 40, a1);
}

void *SharedWithYouActionItem.tracker.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 80);
  v2 = v1;
  return v1;
}

uint64_t SharedWithYouActionItem.figaroProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E0D8(v1 + 88, a1);
}

uint64_t RateAndReviewActionItem.storeServices.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E0D8(v1 + 128, a1);
}

void RateAndReviewActionItem.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 168);
}

id LikeActionItem.init(data:context:tracker:figaroProvider:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  id result;
  id v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;
  __int128 v16;
  unint64_t v17;
  _UNKNOWN **v18;
  __int128 v19;
  ValueMetadata *v20;
  _UNKNOWN **v21;
  __int128 v22[2];
  __int128 v23[2];
  __int128 v24[2];

  sub_5E0D8((uint64_t)a1, (uint64_t)v24);
  sub_5E0D8((uint64_t)a2, (uint64_t)v23);
  sub_5E0D8((uint64_t)a4, (uint64_t)v22);
  result = objc_msgSend((id)objc_opt_self(JSAStore), "sharedInstance");
  if (result)
  {
    v11 = result;
    v17 = sub_161350();
    v18 = &protocol witness table for JSAStore;
    *(_QWORD *)&v16 = v11;
    v14 = type metadata accessor for AccountController(0);
    v15 = &protocol witness table for AccountController;
    *(_QWORD *)&v13 = static AccountController.shared.getter();
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a4);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a2);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    v20 = &type metadata for MenuLikeStateController;
    v21 = &protocol witness table for MenuLikeStateController;
    v12 = swift_allocObject(&unk_2EF418, 96, 7);
    *(_QWORD *)&v19 = v12;
    sub_5DC98(&v16, v12 + 16);
    sub_5DC98(&v13, v12 + 56);
    *(_BYTE *)(a5 + 168) = 23;
    sub_5DC98(v24, a5);
    sub_5DC98(v23, a5 + 40);
    *(_QWORD *)(a5 + 80) = a3;
    sub_5DC98(v22, a5 + 88);
    return (id)sub_5DC98(&v19, a5 + 128);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_161350()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31FF20;
  if (!qword_31FF20)
  {
    v1 = objc_opt_self(JSAStore);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_31FF20);
  }
  return result;
}

uint64_t sub_16138C()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t LikeActionItem.isSupported.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v21[2];
  char v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = v0[3];
  v3 = v0[4];
  sub_66898(v0, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3) & 1) != 0)
    goto LABEL_12;
  v4 = v0[3];
  v5 = v1[4];
  sub_66898(v1, v1[3]);
  ContextActionDataProtocol.selectionMode.getter(v4, v5, (uint64_t)v21);
  if (v22 == 1)
  {
    sub_A4430(v21);
LABEL_12:
    v19 = 0;
    return v19 & 1;
  }
  sub_5DC98(v21, (uint64_t)v23);
  v6 = v24;
  v7 = v25;
  sub_66898(v23, v24);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7) == 4)
    goto LABEL_11;
  v8 = v24;
  v9 = v25;
  sub_66898(v23, v24);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9) == 5)
    goto LABEL_11;
  v10 = v24;
  v11 = v25;
  sub_66898(v23, v24);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 288))(v10, v11);
  if (!v13)
    goto LABEL_11;
  v14 = v12;
  v15 = v13;
  swift_bridgeObjectRelease(v13);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v14 & 0xFFFFFFFFFFFFLL;
  if (!v16)
  {
LABEL_11:
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
    goto LABEL_12;
  }
  v17 = v1[3];
  v18 = v1[4];
  sub_66898(v1, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  return v19 & 1;
}

uint64_t LikeActionItem.handle()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[18] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[19] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[20] = v3;
  v1[21] = v4;
  return swift_task_switch(sub_1615B0, v3, v4);
}

uint64_t sub_1615B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  int *v12;

  v1 = *(_QWORD **)(v0 + 144);
  v2 = v1[3];
  v3 = v1[4];
  sub_66898(v1, v2);
  ContextActionDataProtocol.selectionMode.getter(v2, v3, v0 + 16);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 152));
    sub_A4430((_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD **)(v0 + 144);
    sub_5DC98((__int128 *)(v0 + 16), v0 + 64);
    v6 = v5[19];
    v7 = v5[20];
    sub_66898(v5 + 16, v6);
    v8 = v5 + 5;
    v9 = v5[10];
    v10 = *(int **)(v7 + 8);
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 176) = v11;
    *v11 = v0;
    v11[1] = sub_1616CC;
    return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v12)(1, v8, *(_QWORD *)(v0 + 144), v0 + 64, v9, v6, v7);
  }
}

uint64_t sub_1616CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  *(_QWORD *)(*(_QWORD *)v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[20];
    v7 = v4[21];
    v8 = sub_16180C;
  }
  else
  {
    v4[24] = a1;
    v6 = v4[20];
    v7 = v4[21];
    v8 = sub_161740;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_161740()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 152));
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 144);
    v3 = v2 + 5;
    v4 = (void *)objc_opt_self(BSUINoticeViewController);
    v5 = v2[8];
    v6 = v2[9];
    sub_66898(v3, v5);
    v7 = ContextMenuPresentationContextProtocol.newOptionsForShowingHUD.getter(v5, v6);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "presentNoticeForBookLoved:options:", 1, isa, swift_bridgeObjectRelease(v7).n128_f64[0]);

  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16180C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 152));
  if (qword_31E5D8 != -1)
    swift_once(&qword_31E5D8, sub_126940);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_5240C(v2, (uint64_t)qword_325130);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 128, v0 + 104);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    v12 = v11;
    *(_QWORD *)(v0 + 136) = sub_57CD8(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "error while trying to submit like preference with : %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_161A1C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_326634);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_64780;
  return LikeActionItem.handle()();
}

uint64_t destroy for LikeActionItem(uint64_t a1)
{
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 88));
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 128));
}

uint64_t initializeWithCopy for LikeActionItem(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  __int128 v11;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v6;
  v9(a1 + 88, a2 + 88, v8);
  v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 128, a2 + 128);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t assignWithCopy for LikeActionItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  sub_65938((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  sub_65938((_QWORD *)(a1 + 88), (_QWORD *)(a2 + 88));
  sub_65938((_QWORD *)(a1 + 128), (_QWORD *)(a2 + 128));
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

__n128 initializeWithTake for LikeActionItem(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for LikeActionItem(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  __int128 v7;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(void **)(a1 + 80);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 128));
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for LikeActionItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 169))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LikeActionItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 169) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LikeActionItem()
{
  return &type metadata for LikeActionItem;
}

uint64_t sub_161D7C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v0 = sub_5C154(&qword_31F7E8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.TextStyle(0, v1);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for Font.TextStyle.subheadline(_:), v4, v6);
  v9 = enum case for Font.Design.rounded(_:);
  v10 = type metadata accessor for Font.Design(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v3, v9, v10);
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v3, 0, 1, v10);
  v13 = static Font.Weight.bold.getter(v12);
  v14 = static Font.system(_:design:weight:)(v8, v3, *(_QWORD *)&v13, 0);
  sub_5E09C((uint64_t)v3, &qword_31F7E8);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  qword_326640 = v14;
  return result;
}

uint64_t sub_161EC8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v0 = sub_5C154(&qword_31F7E8);
  __chkstk_darwin(v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = static Font.Weight.bold.getter(v3);
  v5 = enum case for Font.Design.rounded(_:);
  v6 = type metadata accessor for Font.Design(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v2, v5, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v2, 0, 1, v6);
  v8 = static Font.system(size:weight:design:)(*(_QWORD *)&v4, 0, v2, 8.0);
  result = sub_5E09C((uint64_t)v2, &qword_31F7E8);
  qword_326648 = v8;
  return result;
}

uint64_t sub_161FAC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2618E0);
  v4 = v0;
  v2 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_162034@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2618E0);
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 16);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_1620C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2618E0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165E68, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_16217C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_261908);
  v4 = v0;
  v2 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_162204@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_261908);
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_162294(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_261908);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165E54, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

double sub_16234C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2618B8);
  v4 = v0;
  v2 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 32);
}

double sub_1623D0@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2618B8);
  v7 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_16245C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2618B8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165E7C, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

double sub_16250C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_261868);
  v4 = v0;
  v2 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 40);
}

double sub_162590@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_261868);
  v7 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 40);
  *a2 = result;
  return result;
}

uint64_t sub_16261C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_261868);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165FA0, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

double sub_1626CC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_261890);
  v4 = v0;
  v2 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 48);
}

double sub_162750@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_261890);
  v7 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 48);
  *a2 = result;
  return result;
}

uint64_t sub_1627DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_261890);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165F90, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_16288C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_261960);
  v4 = v0;
  v2 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 56));
}

uint64_t sub_162914@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_261960);
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 56);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_1629A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_261960);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165F60, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_162A5C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_261A18);
  v4 = v0;
  v2 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_162AE4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_261A18);
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 64);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_162B74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_261A18);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165F7C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_162C2C(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    v2 = a1;
    if ((static FallBackFontSpec.useFallBackFont()(v2) & 1) != 0)
    {
      if (qword_31E6D8 != -1)
        swift_once(&qword_31E6D8, sub_161D7C);
      v3 = qword_326640;
      swift_retain(qword_326640);
    }
    else
    {
      v3 = Font.init(_:)(v2);
    }
    KeyPath = swift_getKeyPath(&unk_261960);
    __chkstk_darwin(KeyPath);
    v12 = v1;
    v13 = v3;
    v14 = v1;
    v9 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_165F60, v11, (char *)&type metadata for () + 8, v9);

    swift_release(KeyPath);
    v7 = v3;
  }
  else
  {
    if (qword_31E6D8 != -1)
      swift_once(&qword_31E6D8, sub_161D7C);
    v4 = qword_326640;
    v5 = swift_getKeyPath(&unk_261960);
    __chkstk_darwin(v5);
    v12 = v1;
    v13 = v4;
    v14 = v1;
    v6 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
    swift_retain(v4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, v5, sub_165F60, v11, (char *)&type metadata for () + 8, v6);
    swift_release(v5);
    v7 = v4;
  }
  return swift_release(v7);
}

uint64_t sub_162E30(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    v2 = a1;
    if ((static FallBackFontSpec.useFallBackFont()(v2) & 1) != 0)
    {
      if (qword_31E6E0 != -1)
        swift_once(&qword_31E6E0, sub_161EC8);
      v3 = qword_326648;
      swift_retain(qword_326648);
    }
    else
    {
      v3 = Font.init(_:)(v2);
    }
    KeyPath = swift_getKeyPath(&unk_261A18);
    __chkstk_darwin(KeyPath);
    v12 = v1;
    v13 = v3;
    v14 = v1;
    v9 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_165F7C, v11, (char *)&type metadata for () + 8, v9);

    swift_release(KeyPath);
    v7 = v3;
  }
  else
  {
    if (qword_31E6E0 != -1)
      swift_once(&qword_31E6E0, sub_161EC8);
    v4 = qword_326648;
    v5 = swift_getKeyPath(&unk_261A18);
    __chkstk_darwin(v5);
    v12 = v1;
    v13 = v4;
    v14 = v1;
    v6 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
    swift_retain(v4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, v5, sub_165F7C, v11, (char *)&type metadata for () + 8, v6);
    swift_release(v5);
    v7 = v4;
  }
  return swift_release(v7);
}

uint64_t sub_163034()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  v1 = (char *)v0
     + OBJC_IVAR____TtC11BookStoreUIP33_8C913943553E805EED1D1E3E7D4A282F26ReadingGoalsGaugeViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

_QWORD *sub_1630A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0[2] = static Color.black.getter();
  v0[3] = static Color.black.getter();
  v0[4] = 0x3FF0000000000000;
  v0[5] = 0;
  v0[6] = 0;
  if (qword_31E6D8 != -1)
    swift_once(&qword_31E6D8, sub_161D7C);
  v1 = qword_326640;
  v0[7] = qword_326640;
  v2 = qword_31E6E0;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_31E6E0, sub_161EC8);
  v3 = qword_326648;
  v0[8] = qword_326648;
  v4 = swift_retain(v3);
  ObservationRegistrar.init()(v4);
  return v0;
}

uint64_t sub_16315C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[4];
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  _QWORD v76[2];

  v63 = a1;
  v1 = type metadata accessor for ReadingGoalGaugeStyle(0);
  __chkstk_darwin(v1);
  v3 = (double *)((char *)v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5C154(&qword_326A00);
  v65 = *(_QWORD *)(v4 - 8);
  v66 = v4;
  __chkstk_darwin(v4);
  v64 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_5C154(&qword_326A08);
  __chkstk_darwin(v73);
  v68 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_326A10);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5C154(&qword_326A18);
  __chkstk_darwin(v67);
  v69 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5C154(&qword_326960);
  Bindable.wrappedValue.getter(&v74);
  v10 = v74;
  KeyPath = swift_getKeyPath(&unk_261868);
  v74 = v10;
  v12 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v74, KeyPath, v12);
  swift_release(KeyPath);
  v13 = *(double *)(v10 + 40);
  swift_release(v10);
  Bindable.wrappedValue.getter(&v74);
  v14 = v74;
  v15 = swift_getKeyPath(&unk_261890);
  v74 = v14;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v74, v15, v12);
  swift_release(v15);
  v16 = *(double *)(v14 + 48);
  swift_release(v14);
  if (v16 >= v13)
    v17 = v13;
  else
    v17 = v16;
  *(double *)v76 = v17;
  Bindable.wrappedValue.getter(&v74);
  v18 = v74;
  v19 = swift_getKeyPath(&unk_261890);
  v74 = v18;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v74, v19, v12);
  swift_release(v19);
  v20 = *(double *)(v18 + 48);
  result = swift_release(v18);
  if (v20 < 0.0)
  {
    __break(1u);
  }
  else
  {
    v61[1] = v61;
    v62 = v1;
    v74 = 0;
    v75 = v20;
    __chkstk_darwin(result);
    __chkstk_darwin(v22);
    v23 = sub_5C154(&qword_326A28);
    v24 = sub_5C154(&qword_326A30);
    v25 = v3;
    v26 = sub_165BEC();
    v60[2] = sub_165CF4();
    v60[3] = sub_8C30C();
    v60[0] = &type metadata for Double;
    v60[1] = v26;
    v27 = v64;
    ((void (*)(_QWORD *, uint64_t *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, void (*)(uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))Gauge.init<A>(value:in:label:currentValueLabel:))(v76, &v74, sub_165BDC, v60, sub_165BE4, v60, v23, v24);
    Bindable.wrappedValue.getter(&v74);
    v28 = v74;
    v29 = swift_getKeyPath(&unk_2618B8);
    v74 = v28;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v74, v29, v12);
    swift_release(v29);
    v30 = *(_QWORD *)(v28 + 32);
    swift_release(v28);
    v32 = v65;
    v31 = v66;
    v33 = (uint64_t)v68;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v68, v27, v66);
    *(_QWORD *)(v33 + *(int *)(v73 + 36)) = v30;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v31);
    Bindable.wrappedValue.getter(&v74);
    v34 = v74;
    v35 = swift_getKeyPath(&unk_2618E0);
    v74 = v34;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v74, v35, v12);
    swift_release(v35);
    v36 = *(_QWORD *)(v34 + 16);
    swift_retain(v36);
    swift_release(v34);
    Bindable.wrappedValue.getter(&v74);
    v37 = v74;
    v38 = swift_getKeyPath(&unk_261908);
    v74 = v37;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v74, v38, v12);
    swift_release(v38);
    v39 = *(_QWORD *)(v37 + 24);
    swift_retain(v39);
    swift_release(v37);
    v76[0] = v36;
    State.init(wrappedValue:)(&v74, v76, &type metadata for Color);
    v40 = v75;
    *(_QWORD *)v25 = v74;
    v25[1] = v40;
    v76[0] = v39;
    State.init(wrappedValue:)(&v74, v76, &type metadata for Color);
    v41 = v75;
    *((_QWORD *)v25 + 2) = v74;
    v25[3] = v41;
    v42 = v62;
    v43 = (_QWORD *)((char *)v25 + *(int *)(v62 + 24));
    *v43 = swift_getKeyPath(&unk_261930);
    v44 = sub_5C154(&qword_320160);
    swift_storeEnumTagMultiPayload(v43, v44, 0);
    v45 = sub_165D94();
    v46 = sub_648E0(&qword_326A98, type metadata accessor for ReadingGoalGaugeStyle, (uint64_t)&unk_261A70);
    v47 = v70;
    View.gaugeStyle<A>(_:)(v25, v73, v42, v45, v46);
    sub_165E18((uint64_t)v25);
    v48 = sub_5E09C(v33, &qword_326A08);
    LOBYTE(v45) = static Edge.Set.all.getter(v48);
    v49 = EdgeInsets.init(_all:)(2.0);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v71;
    v56 = v72;
    v58 = (uint64_t)v69;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v69, v47, v72);
    v59 = v58 + *(int *)(v67 + 36);
    *(_BYTE *)v59 = v45;
    *(double *)(v59 + 8) = v49;
    *(_QWORD *)(v59 + 16) = v51;
    *(_QWORD *)(v59 + 24) = v53;
    *(_QWORD *)(v59 + 32) = v55;
    *(_BYTE *)(v59 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v56);
    return sub_66F14(v58, v63, &qword_326A18);
  }
  return result;
}

uint64_t sub_1637A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  double v10;
  uint64_t result;
  double v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1, v3);
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v6);
  sub_5C154(&qword_326960);
  Bindable.wrappedValue.getter(&v34);
  v7 = v34;
  KeyPath = swift_getKeyPath(&unk_261890);
  v34 = v7;
  v9 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(double *)(v7 + 48);
  result = swift_release(v7);
  v12 = round(v10 / 60.0);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v12 < 9.22337204e18)
  {
    v34 = (uint64_t)v12;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v34, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
    v14 = LocalizedStringKey.init(stringInterpolation:)(v5);
    v15 = Text.init(_:tableName:bundle:comment:)(v14);
    v17 = v16;
    v19 = v18;
    v21 = v20 & 1;
    Bindable.wrappedValue.getter(&v34);
    v22 = v34;
    v23 = swift_getKeyPath(&unk_261A18);
    v34 = v22;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v23, v9);
    swift_release(v23);
    v24 = *(_QWORD *)(v22 + 64);
    swift_retain(v24);
    swift_release(v22);
    v25 = Text.font(_:)(v24, v15, v17, v21, v19);
    v27 = v26;
    v29 = v28;
    v31 = v30;
    swift_release(v24);
    sub_6693C(v15, v17, v21);
    swift_bridgeObjectRelease(v19);
    v32 = swift_getKeyPath(&unk_261988);
    result = swift_getKeyPath(&unk_2619B8);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v27;
    *(_BYTE *)(a1 + 16) = v29 & 1;
    *(_QWORD *)(a1 + 24) = v31;
    *(_QWORD *)(a1 + 32) = v32;
    *(_QWORD *)(a1 + 40) = 1;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = result;
    *(_QWORD *)(a1 + 64) = 0x3FE0000000000000;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_163A80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  double v18;
  double v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;

  v4 = sub_5C154(&qword_326A80);
  __chkstk_darwin(v4);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContentTransition(0);
  v76 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v75 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1, v10);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
  v14 = sub_5C154(&qword_326960);
  v74 = a1;
  Bindable.wrappedValue.getter(&v77);
  v15 = v77;
  KeyPath = swift_getKeyPath(&unk_261868);
  v77 = v15;
  v17 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v77, KeyPath, v17);
  swift_release(KeyPath);
  v18 = *(double *)(v15 + 40);
  swift_release(v15);
  v19 = v18 / 60.0;
  if ((~COERCE__INT64(v18 / 60.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v19 < 9.22337204e18)
  {
    v77 = (uint64_t)v19;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v77, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v20);
    v21 = LocalizedStringKey.init(stringInterpolation:)(v12);
    v22 = Text.init(_:tableName:bundle:comment:)(v21);
    v72 = v4;
    v73 = (uint64_t *)v6;
    v24 = v23;
    v26 = v25;
    v28 = v27 & 1;
    v67 = v14;
    Bindable.wrappedValue.getter(&v77);
    v29 = v77;
    v30 = swift_getKeyPath(&unk_2618E0);
    v71 = v7;
    v31 = v30;
    v77 = v29;
    v66 = v17;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v77, v30, v17);
    swift_release(v31);
    v32 = *(_QWORD *)(v29 + 16);
    swift_retain(v32);
    swift_release(v29);
    v77 = v32;
    v33 = Text.foregroundStyle<A>(_:)(&v77, v22, v24, v28, v26, &type metadata for Color, &protocol witness table for Color);
    v35 = v34;
    v65 = v36;
    v38 = v37 & 1;
    sub_6693C(v22, v24, v28);
    swift_release(v32);
    swift_bridgeObjectRelease(v26);
    Bindable.wrappedValue.getter(&v77);
    v39 = v77;
    v40 = swift_getKeyPath(&unk_261960);
    v77 = v39;
    v41 = v66;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v77, v40, v66);
    swift_release(v40);
    v42 = *(_QWORD *)(v39 + 56);
    swift_retain(v42);
    swift_release(v39);
    v43 = v65;
    v44 = Text.font(_:)(v42, v33, v35, v38, v65);
    v68 = v45;
    v69 = v44;
    LOBYTE(v40) = v46;
    v70 = v47;
    swift_release(v42);
    LOBYTE(v40) = v40 & 1;
    sub_6693C(v33, v35, v38);
    swift_bridgeObjectRelease(v43);
    v48 = swift_getKeyPath(&unk_261988);
    v49 = swift_getKeyPath(&unk_2619B8);
    Bindable.wrappedValue.getter(&v77);
    v50 = v77;
    v51 = swift_getKeyPath(&unk_261868);
    v77 = v50;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v77, v51, v41);
    swift_release(v51);
    v52 = *(double *)(v50 + 40);
    v53 = swift_release(v50);
    v54 = v75;
    static ContentTransition.numericText(value:)(v53, v52);
    v55 = swift_getKeyPath(&unk_2619E8);
    v56 = v73;
    v57 = v76;
    v58 = v71;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))((char *)v73 + *(int *)(v72 + 28), v54, v71);
    *v56 = v55;
    v59 = sub_5C154(&qword_326A30);
    sub_5E1A4((uint64_t)v56, a2 + *(int *)(v59 + 36), &qword_326A80);
    v61 = v68;
    v60 = v69;
    *(_QWORD *)a2 = v69;
    *(_QWORD *)(a2 + 8) = v61;
    *(_BYTE *)(a2 + 16) = v40;
    v62 = v70;
    *(_QWORD *)(a2 + 24) = v70;
    *(_QWORD *)(a2 + 32) = v48;
    *(_QWORD *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = v49;
    *(_QWORD *)(a2 + 64) = 0x3FDEB851EB851EB8;
    v63 = v60;
    sub_7BBCC(v60, v61, v40);
    swift_bridgeObjectRetain(v62);
    swift_retain(v48);
    swift_retain(v49);
    sub_5E09C((uint64_t)v56, &qword_326A80);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v58);
    sub_6693C(v63, v61, v40);
    swift_release(v49);
    swift_release(v48);
    swift_bridgeObjectRelease(v62);
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_164004(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  double v73;
  uint64_t v74;
  char *v75;
  uint64_t (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  _QWORD v174[5];
  _QWORD v175[5];
  _OWORD v176[3];

  v167 = type metadata accessor for SizeConstants.Gutter(0);
  v165 = *(_QWORD *)(v167 - 8);
  v6 = __chkstk_darwin(v167);
  v163 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for SizeConstants.Spacing(0, v6);
  v152 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v150 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for SizeConstants(0);
  v149 = *(_QWORD *)(v156 - 8);
  v9 = __chkstk_darwin(v156);
  v11 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for GaugeStyleConfiguration.Label(0, v9);
  v151 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v172 = (char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_5C154(&qword_326B48);
  __chkstk_darwin(v148);
  v158 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_5C154(&qword_3203C8);
  __chkstk_darwin(v155);
  v162 = (uint64_t)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_3203D0);
  __chkstk_darwin(v15);
  v164 = (uint64_t)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_5C154(&qword_326B50);
  __chkstk_darwin(v161);
  v171 = (uint64_t)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v160 = (uint64_t)&v131 - v19;
  __chkstk_darwin(v20);
  v170 = (uint64_t)&v131 - v21;
  v22 = sub_5C154(&qword_326B58);
  __chkstk_darwin(v22);
  v24 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_5C154(&qword_3203D8);
  __chkstk_darwin(v132);
  v26 = (char *)&v131 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5C154(&qword_3203E0);
  __chkstk_darwin(v27);
  v169 = (uint64_t)&v131 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v131 - v30;
  __chkstk_darwin(v32);
  v173 = (uint64_t)&v131 - v33;
  v34 = a1[3];
  *(_QWORD *)&v176[0] = a1[2];
  *((_QWORD *)&v176[0] + 1) = v34;
  v35 = sub_5C154(&qword_326B60);
  State.wrappedValue.getter(v175, v35);
  v168 = v175[0];
  v36 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v174, 1, 0, _swiftEmptyArrayStorage, 4.0, 10.0, 0.0);
  v147 = v174[0];
  v146 = v174[1];
  v145 = v174[2];
  v166 = v174[3];
  v144 = v174[4];
  v143 = static Alignment.center.getter(v36);
  v142 = v37;
  v141 = static UnitPoint.center.getter();
  v140 = v38;
  v39 = GaugeStyleConfiguration.value.getter();
  v133 = a1;
  v40 = a1[1];
  *(_QWORD *)&v176[0] = *a1;
  *((_QWORD *)&v176[0] + 1) = v40;
  State.wrappedValue.getter(v175, v35);
  v159 = v175[0];
  v41 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v175, 1, 0, _swiftEmptyArrayStorage, 4.0, 10.0, 0.0);
  v42 = v175[0];
  v139 = v175[1];
  v138 = v175[2];
  v157 = v175[3];
  v137 = v175[4];
  v136 = static Alignment.center.getter(v41);
  v135 = v43;
  v44 = static UnitPoint.center.getter();
  v46 = v45;
  v134 = a2;
  v47 = GaugeStyleConfiguration.currentValueLabel.getter();
  v48 = static Edge.Set.trailing.getter(v47);
  v49 = v48;
  v50 = static Edge.Set.leading.getter(v48);
  v51 = Edge.Set.init(rawValue:)(0);
  v52 = Edge.Set.init(rawValue:)(v51);
  if (Edge.Set.init(rawValue:)(v52 & v49) != v49)
    v51 = Edge.Set.init(rawValue:)(v51 | v49);
  v53 = Edge.Set.init(rawValue:)(v51);
  if (Edge.Set.init(rawValue:)(v53 & v50) != v50)
    LOBYTE(v51) = Edge.Set.init(rawValue:)(v51 | v50);
  v54 = EdgeInsets.init(_all:)(2.0);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  sub_5E1A4((uint64_t)v24, (uint64_t)v26, &qword_326B58);
  v61 = &v26[*(int *)(v132 + 36)];
  *v61 = v51;
  *((double *)v61 + 1) = v54;
  *((_QWORD *)v61 + 2) = v56;
  *((_QWORD *)v61 + 3) = v58;
  *((_QWORD *)v61 + 4) = v60;
  v61[40] = 0;
  v62 = sub_5E09C((uint64_t)v24, &qword_326B58);
  v63 = static Alignment.center.getter(v62);
  sub_746C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v31, 0.0, 1, 0.0, 1, v63, v64);
  sub_5E09C((uint64_t)v26, &qword_3203D8);
  v65 = sub_66F14((uint64_t)v31, v173, &qword_3203E0);
  v66 = GaugeStyleConfiguration.label.getter(v65);
  v67 = static Edge.Set.trailing.getter(v66);
  v68 = v67;
  v69 = static Edge.Set.leading.getter(v67);
  v70 = Edge.Set.init(rawValue:)(0);
  v71 = Edge.Set.init(rawValue:)(v70);
  if (Edge.Set.init(rawValue:)(v71 & v68) != v68)
    v70 = Edge.Set.init(rawValue:)(v70 | v68);
  v72 = Edge.Set.init(rawValue:)(v70);
  if (Edge.Set.init(rawValue:)(v72 & v69) != v69)
    LOBYTE(v70) = Edge.Set.init(rawValue:)(v70 | v69);
  v73 = v39 * 0.75;
  type metadata accessor for ReadingGoalGaugeStyle(0);
  v74 = sub_76D64((uint64_t)v11);
  v75 = v150;
  SizeConstants.spacing.getter(v74);
  v76 = *(uint64_t (**)(char *, uint64_t))(v149 + 8);
  v77 = v156;
  v78 = v76(v11, v156);
  v79 = SizeConstants.Spacing.xs.getter(v78);
  (*(void (**)(char *, uint64_t))(v152 + 8))(v75, v154);
  v80 = EdgeInsets.init(_all:)(v79);
  v82 = v81;
  v84 = v83;
  v86 = v85;
  v87 = v151;
  v88 = (uint64_t)v158;
  v89 = v172;
  v90 = v153;
  (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v158, v172, v153);
  v91 = v88 + *(int *)(v148 + 36);
  *(_BYTE *)v91 = v70;
  *(double *)(v91 + 8) = v80;
  *(_QWORD *)(v91 + 16) = v82;
  *(_QWORD *)(v91 + 24) = v84;
  *(_QWORD *)(v91 + 32) = v86;
  *(_BYTE *)(v91 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v90);
  v92 = sub_76D64((uint64_t)v11);
  v93 = v163;
  SizeConstants.gutter.getter(v92);
  v94 = v76(v11, v77);
  v95 = SizeConstants.Gutter.s.getter(v94);
  v96 = (*(uint64_t (**)(char *, uint64_t))(v165 + 8))(v93, v167);
  v97 = static Alignment.center.getter(v96);
  _FrameLayout.init(width:height:alignment:)(v176, 0, 1, *(_QWORD *)&v95, 0, v97, v98);
  v99 = v162;
  sub_5E1A4(v88, v162, &qword_326B48);
  v100 = (_OWORD *)(v99 + *(int *)(v155 + 36));
  v101 = v176[1];
  *v100 = v176[0];
  v100[1] = v101;
  v100[2] = v176[2];
  v102 = sub_5E09C(v88, &qword_326B48);
  v103 = static Alignment.bottom.getter(v102);
  v104 = v164;
  sub_74720(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v164, 0.0, 1, INFINITY, 0, v103, v105);
  v106 = sub_5E09C(v99, &qword_3203C8);
  LOBYTE(v90) = static Edge.Set.bottom.getter(v106);
  v107 = EdgeInsets.init(_all:)(-4.0);
  v109 = v108;
  v111 = v110;
  v113 = v112;
  v114 = v160;
  sub_5E1A4(v104, v160, &qword_3203D0);
  v115 = v114 + *(int *)(v161 + 36);
  *(_BYTE *)v115 = v90;
  *(double *)(v115 + 8) = v107;
  *(_QWORD *)(v115 + 16) = v109;
  *(_QWORD *)(v115 + 24) = v111;
  *(_QWORD *)(v115 + 32) = v113;
  *(_BYTE *)(v115 + 40) = 0;
  sub_5E09C(v104, &qword_3203D0);
  v116 = v114;
  v117 = v170;
  sub_66F14(v116, v170, &qword_326B50);
  v118 = v173;
  v119 = v169;
  sub_5E1A4(v173, v169, &qword_3203E0);
  v120 = v171;
  sub_5E1A4(v117, v171, &qword_326B50);
  *(_OWORD *)a3 = xmmword_2616D0;
  v121 = v146;
  *(_QWORD *)(a3 + 16) = v147;
  *(_QWORD *)(a3 + 24) = v121;
  *(_QWORD *)(a3 + 32) = v145;
  v122 = v166;
  *(_QWORD *)(a3 + 40) = v166;
  *(_QWORD *)(a3 + 48) = v144;
  v123 = v168;
  *(_QWORD *)(a3 + 56) = v168;
  *(_WORD *)(a3 + 64) = 256;
  v124 = v142;
  *(_QWORD *)(a3 + 72) = v143;
  *(_QWORD *)(a3 + 80) = v124;
  *(_QWORD *)(a3 + 88) = 0x4002D97C7F3321D2;
  v125 = v140;
  *(double *)(a3 + 96) = v141;
  *(_QWORD *)(a3 + 104) = v125;
  *(_BYTE *)(a3 + 112) = 1;
  *(_QWORD *)(a3 + 120) = 0;
  *(double *)(a3 + 128) = v73;
  *(_QWORD *)(a3 + 136) = v42;
  v126 = v138;
  *(_QWORD *)(a3 + 144) = v139;
  *(_QWORD *)(a3 + 152) = v126;
  v127 = v157;
  *(_QWORD *)(a3 + 160) = v157;
  *(_QWORD *)(a3 + 168) = v137;
  v128 = v159;
  *(_QWORD *)(a3 + 176) = v159;
  *(_WORD *)(a3 + 184) = 256;
  v129 = v135;
  *(_QWORD *)(a3 + 192) = v136;
  *(_QWORD *)(a3 + 200) = v129;
  *(_QWORD *)(a3 + 208) = 0x4002D97C7F3321D2;
  *(double *)(a3 + 216) = v44;
  *(_QWORD *)(a3 + 224) = v46;
  *(_BYTE *)(a3 + 232) = 1;
  v130 = sub_5C154(&qword_326B68);
  sub_5E1A4(v119, a3 + *(int *)(v130 + 64), &qword_3203E0);
  sub_5E1A4(v120, a3 + *(int *)(v130 + 80), &qword_326B50);
  swift_bridgeObjectRetain_n(v122, 2);
  swift_retain_n(v123, 2);
  swift_bridgeObjectRetain_n(v127, 2);
  swift_retain_n(v128, 2);
  sub_5E09C(v117, &qword_326B50);
  sub_5E09C(v118, &qword_3203E0);
  swift_release(v123);
  swift_bridgeObjectRelease(v122);
  swift_release(v128);
  swift_bridgeObjectRelease(v127);
  sub_5E09C(v120, &qword_326B50);
  sub_5E09C(v119, &qword_3203E0);
  swift_release(v123);
  swift_bridgeObjectRelease(v122);
  swift_release(v128);
  swift_bridgeObjectRelease(v127);
}

void sub_164C18(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  *a2 = static Alignment.center.getter(a1);
  a2[1] = v5;
  v6 = sub_5C154(&qword_326B40);
  sub_164004(v2, a1, (uint64_t)a2 + *(int *)(v6 + 44));
}

id sub_164C68(uint64_t a1)
{
  return *(id *)(a1 + qword_3268C0);
}

void sub_164C78(char *a1, uint64_t a2, void *a3)
{
  void *v4;
  char *v5;
  id v6;

  v4 = *(void **)&a1[qword_3268C0];
  *(_QWORD *)&a1[qword_3268C0] = a3;
  v6 = a3;
  v5 = a1;

  sub_164CD8();
}

void sub_164CD8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(void **)(v0 + qword_3268C0);
  if (v1)
  {
    v2 = v0;
    v3 = qword_3268D0;
    v4 = *(_QWORD *)(v0 + qword_3268D0);
    swift_retain(v4);
    v5 = v1;
    v6 = objc_msgSend(v5, "progressColor");
    if (v6)
    {
      v7 = Color.init(_:)(v6);
      KeyPath = swift_getKeyPath(&unk_2618E0);
      __chkstk_darwin(KeyPath);
      v38 = v4;
      v39 = v7;
      v41 = v4;
      v40 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v41, KeyPath, sub_165E68, v37, (char *)&type metadata for () + 8, v40);
      swift_release(v4);
      swift_release(KeyPath);
      swift_release(v7);
      v9 = *(_QWORD *)(v0 + v3);
      swift_retain(v9);
      v10 = objc_msgSend(v5, "controlColor");
      if (v10)
      {
        v11 = Color.init(_:)(v10);
        v12 = swift_getKeyPath(&unk_261908);
        __chkstk_darwin(v12);
        v38 = v9;
        v39 = v11;
        v41 = v9;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v41, v12, sub_165E54, v37, (char *)&type metadata for () + 8, v40);
        swift_release(v9);
        swift_release(v12);
        swift_release(v11);
        v13 = *(_QWORD *)(v0 + v3);
        swift_retain(v13);
        v14 = objc_msgSend(v5, "actualReadingTimeSeconds");
        if (v14)
        {
          v15 = v14;
          objc_msgSend(v14, "doubleValue");
          v17 = v16;

          v18 = swift_getKeyPath(&unk_261868);
          __chkstk_darwin(v18);
          v38 = v13;
          v39 = v17;
          v41 = v13;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v41, v18, sub_166884, v37, (char *)&type metadata for () + 8, v40);
          swift_release(v13);
          swift_release(v18);
          v19 = *(_QWORD *)(v2 + v3);
          swift_retain(v19);
          v20 = objc_msgSend(v5, "readingGoalSeconds");
          if (v20)
          {
            v21 = v20;
            objc_msgSend(v20, "doubleValue");
            v23 = v22;

            v24 = swift_getKeyPath(&unk_261890);
            __chkstk_darwin(v24);
            v38 = v19;
            v39 = v23;
            v41 = v19;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v41, v24, sub_166898, v37, (char *)&type metadata for () + 8, v40);
            swift_release(v19);
            swift_release(v24);
            v25 = *(_QWORD *)(v2 + v3);
            swift_retain(v25);
            v26 = objc_msgSend(v5, "timeFontSpec");
            v27 = objc_msgSend(v26, "font");

            sub_162C2C(v27);
            swift_release(v25);

            v28 = *(_QWORD *)(v2 + v3);
            swift_retain(v28);
            v29 = objc_msgSend(v5, "streakFontSpec");
            v30 = objc_msgSend(v29, "font");

            sub_162E30(v30);
            swift_release(v28);

            v31 = *(_QWORD *)(v2 + v3);
            swift_retain(v31);
            v32 = objc_msgSend(v5, "opacity");
            if (v32)
            {
              v33 = v32;
              objc_msgSend(v32, "doubleValue");
              v35 = v34;

              v36 = swift_getKeyPath(&unk_2618B8);
              __chkstk_darwin(v36);
              v38 = v31;
              v39 = v35;
              v41 = v31;
              ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v41, v36, sub_1668AC, v37, (char *)&type metadata for () + 8, v40);

              swift_release(v31);
              swift_release(v36);
              return;
            }
LABEL_13:
            __break(1u);
            return;
          }
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

double sub_1651C4(uint64_t a1)
{
  return *(double *)(a1 + qword_3268C8);
}

uint64_t sub_1651D4(char *a1, double a2)
{
  char *v2;
  uint64_t v3;
  _QWORD v5[4];

  *(double *)&a1[qword_3268C8] = a2;
  v2 = a1;
  v3 = static Animation.linear(duration:)(1.0);
  v5[2] = v2;
  withAnimation<A>(_:_:)(v3, sub_165FB0, v5, (char *)&type metadata for () + 8);

  return swift_release(v3);
}

uint64_t sub_16524C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[4];
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + qword_3268D0);
  v2 = *(_QWORD *)(a1 + qword_3268C8);
  KeyPath = swift_getKeyPath(&unk_261868);
  v6[2] = v1;
  v6[3] = v2;
  v7 = v1;
  v4 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  swift_retain(v1);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_166884, v6, (char *)&type metadata for () + 8, v4);
  swift_release(v1);
  return swift_release(KeyPath);
}

void sub_16532C(char *a1, uint64_t a2, void *a3)
{
  id v4;

  *(_QWORD *)&a1[qword_3268C0] = 0;
  *(_QWORD *)&a1[qword_3268C8] = 0;
  v4 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000000026EFD0, "BookStoreUI/ReadingGoalsGaugeHostingController.swift", 52, 2, 147, 0);
  __break(1u);
}

void sub_1653AC()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.ReadingGoalsGaugeHostingController", 46, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_1653D8()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.ReadingGoalsGaugeHostingController", 46, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_165404()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + qword_3268D0));
}

id sub_165430()
{
  return sub_14CB88(0, (uint64_t (*)(void))type metadata accessor for ReadingGoalsGaugeHostingController);
}

uint64_t sub_165440(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + qword_3268D0));
}

id static ReadingGoalsGaugeHostingControllerFactory.create(with:)()
{
  id v0;

  v0 = objc_allocWithZone((Class)type metadata accessor for ReadingGoalsGaugeHostingController(0));
  return sub_165634();
}

uint64_t type metadata accessor for ReadingGoalsGaugeHostingController(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3268E8, (uint64_t)&nominal type descriptor for ReadingGoalsGaugeHostingController);
}

id ReadingGoalsGaugeHostingControllerFactory.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReadingGoalsGaugeHostingControllerFactory();
  return objc_msgSendSuper2(&v2, "init");
}

id ReadingGoalsGaugeHostingControllerFactory.__deallocating_deinit(uint64_t a1)
{
  return sub_14CB88(a1, type metadata accessor for ReadingGoalsGaugeHostingControllerFactory);
}

uint64_t sub_16555C(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ContentTransition(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return EnvironmentValues.contentTransition.setter(v5);
}

uint64_t sub_1655D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_165608(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

id sub_165634()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id result;
  void *v13;
  id v14;
  uint64_t v15;

  v1 = type metadata accessor for ReadingGoalsGaugeView(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[qword_3268C0] = 0;
  *(_QWORD *)&v0[qword_3268C8] = 0;
  v4 = type metadata accessor for ReadingGoalsGaugeViewModel(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = v0;
  v6 = sub_1630A4();
  v7 = qword_3268D0;
  *(_QWORD *)&v5[qword_3268D0] = v6;

  v8 = *(_QWORD *)&v5[v7];
  v9 = sub_648E0(&qword_326A20, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t)&unk_261848);
  v10 = swift_retain(v8);
  Bindable<A>.init(wrappedValue:)(v10, v4, v9);
  v11 = (id)UIHostingController.init(rootView:)(v3);
  result = objc_msgSend(v11, "view");
  if (result)
  {
    v13 = result;
    v14 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v13, "setBackgroundColor:", v14);

    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ReadingGoalsGaugeHostingControllerFactory()
{
  return objc_opt_self(BSUIReadingGoalsGaugeHostingControllerFactory);
}

uint64_t sub_1657C4()
{
  return type metadata accessor for ReadingGoalsGaugeViewModel(0);
}

uint64_t type metadata accessor for ReadingGoalsGaugeViewModel(uint64_t a1)
{
  return sub_64960(a1, qword_326680, (uint64_t)&nominal type descriptor for ReadingGoalsGaugeViewModel);
}

uint64_t sub_1657E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_165874(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + qword_3268D8);
}

uint64_t sub_1658D8()
{
  return type metadata accessor for ReadingGoalsGaugeHostingController(0);
}

uint64_t sub_1658E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_326960);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_165920(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_326960);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_165958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_326960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1659A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_326960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1659E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_326960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_165A30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_326960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_165A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_165A84);
}

uint64_t sub_165A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_326960);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_165AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_165AD0);
}

uint64_t sub_165AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_326960);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ReadingGoalsGaugeView(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3269C0, (uint64_t)&nominal type descriptor for ReadingGoalsGaugeView);
}

void sub_165B28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_8C25C(319, (unint64_t *)&unk_3269D0, type metadata accessor for ReadingGoalsGaugeViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Bindable);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_165BA8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B89B4, 1);
}

uint64_t type metadata accessor for ReadingGoalGaugeStyle(uint64_t a1)
{
  return sub_64960(a1, qword_326AF8, (uint64_t)&nominal type descriptor for ReadingGoalGaugeStyle);
}

uint64_t sub_165BDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1637A4(a1);
}

void sub_165BE4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_163A80(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_165BEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326A38;
  if (!qword_326A38)
  {
    v1 = sub_667D0(&qword_326A28);
    sub_165C70();
    sub_67060(&qword_326A60, &qword_326A68, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326A38);
  }
  return result;
}

unint64_t sub_165C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326A40;
  if (!qword_326A40)
  {
    v1 = sub_667D0(&qword_326A48);
    sub_67060(&qword_326A50, &qword_326A58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326A40);
  }
  return result;
}

unint64_t sub_165CF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326A70;
  if (!qword_326A70)
  {
    v1 = sub_667D0(&qword_326A30);
    sub_165BEC();
    sub_67060(&qword_326A78, &qword_326A80, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326A70);
  }
  return result;
}

unint64_t sub_165D94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326A88;
  if (!qword_326A88)
  {
    v1 = sub_667D0(&qword_326A08);
    sub_67060(&qword_326A90, &qword_326A00, (uint64_t)&protocol conformance descriptor for Gauge<A, B, C, D>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326A88);
  }
  return result;
}

uint64_t sub_165E18(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingGoalGaugeStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_165E54()
{
  return sub_166000();
}

uint64_t sub_165E68()
{
  return sub_165FC8();
}

double sub_165E7C()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 32) = result;
  return result;
}

uint64_t sub_165E94@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_165EC4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_165EF0(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_165F18(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_165F3C()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_165F60()
{
  return sub_166070();
}

uint64_t sub_165F7C()
{
  return sub_166038();
}

double sub_165F90()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 48) = result;
  return result;
}

double sub_165FA0()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 40) = result;
  return result;
}

uint64_t sub_165FB0()
{
  uint64_t v0;

  return sub_16524C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_165FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_166000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_166038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_166070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t *sub_1660A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    v7 = a2[2];
    a1[1] = v6;
    a1[2] = v7;
    v8 = a2[3];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v5);
    swift_retain(v6);
    swift_retain(v7);
    swift_retain(v8);
    v12 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = v10;
      v15 = v12;
      v16 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v14 = v10;
      v15 = v12;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1661AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for SizeConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t *sub_16623C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  v11 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  return a1;
}

uint64_t *sub_16630C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a1[3];
  v13 = a2[3];
  a1[3] = v13;
  swift_retain(v13);
  swift_release(v12);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_5E09C((uint64_t)a1 + v14, &qword_320160);
    v17 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  return a1;
}

_OWORD *sub_166428(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1664D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_release(v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_5E09C((uint64_t)a1 + v10, &qword_320160);
    v13 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1665D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1665DC);
}

uint64_t sub_1665DC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3201B0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_16665C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_166668);
}

char *sub_166668(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_3201B0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1666E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_261A58;
  v4[1] = &unk_261A58;
  sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

unint64_t sub_166770()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_326B38;
  if (!qword_326B38)
  {
    v1 = sub_667D0(&qword_326A18);
    v2[0] = sub_667D0(&qword_326A08);
    v2[1] = type metadata accessor for ReadingGoalGaugeStyle(255);
    v2[2] = sub_165D94();
    v2[3] = sub_648E0(&qword_326A98, type metadata accessor for ReadingGoalGaugeStyle, (uint64_t)&unk_261A70);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.gaugeStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326B38);
  }
  return result;
}

uint64_t sub_166848(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B89DC, 1);
}

uint64_t sub_166858()
{
  return sub_67060(&qword_326B70, &qword_326B78, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

double sub_166884()
{
  return sub_165FA0();
}

double sub_166898()
{
  return sub_165F90();
}

double sub_1668AC()
{
  return sub_165E7C();
}

uint64_t sub_1668C0@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  void (*v91)(_QWORD *, _QWORD, uint64_t);
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t);
  uint64_t v102;
  _QWORD *v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  void (*v121)(_QWORD *, _QWORD, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(_QWORD *, _QWORD, uint64_t);
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, char *, uint64_t);
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t AssociatedTypeWitness;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  __int128 v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t *v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  unsigned __int8 v231;
  __int128 v232;
  __int128 v233;
  void *AssociatedConformanceWitness;
  void *v235;

  v220 = a8;
  v200 = a7;
  v197 = a4;
  v196 = a3;
  LODWORD(v225) = a2;
  v194 = a9;
  v12 = sub_5C154(&qword_322F98);
  __chkstk_darwin(v12);
  v207 = (char *)&v185 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for PageMetrics(0);
  v210 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v213 = (uint64_t)&v185 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for PageData(0);
  v208 = *(_QWORD *)(v209 - 8);
  v15 = __chkstk_darwin(v209);
  v212 = (uint64_t)&v185 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v223 = type metadata accessor for AppAnalyticsAction.Type(0, v15);
  v204 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v193 = (uint64_t *)((char *)&v185 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v206 = (uint64_t *)((char *)&v185 - v19);
  v20 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v20);
  v195 = (char *)&v185 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v221 = (uint64_t)&v185 - v23;
  v228 = type metadata accessor for SeriesData(0);
  v214 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v205 = (uint64_t)&v185 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v229 = (uint64_t)&v185 - v26;
  v203 = (_QWORD *)sub_5C154(&qword_3239B0);
  v202 = (_QWORD *)*(v203 - 1);
  __chkstk_darwin(v203);
  *(_QWORD *)&v201 = (char *)&v185 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = sub_5C154(&qword_3239B8);
  v199 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v217 = (char *)&v185 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_5C154(&qword_3239C0);
  v198 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v216 = (char *)&v185 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v30);
  v215 = (uint64_t)&v185 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v185 - v33;
  __chkstk_darwin(v35);
  v224 = (uint64_t)&v185 - v36;
  v37 = type metadata accessor for LocalizerRequest(0);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v227 = (char *)&v185 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_5C154(&qword_3239D0);
  __chkstk_darwin(v40);
  v42 = (char *)&v185 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Shelf(0);
  v44 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v46 = (char *)&v185 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v222) = *a5;
  LOBYTE(v232) = (_BYTE)v222;
  LOBYTE(v235) = 1;
  v47 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v42, 1, 1, v47);
  v48 = a1;
  v49 = (uint64_t)v226;
  sub_11C0A4(a1, (unsigned __int8 *)&v232, a6, (unsigned __int8 *)&v235, (uint64_t)v42, v225, (uint64_t)v46);
  result = sub_5E09C((uint64_t)v42, &qword_3239D0);
  if (!v49)
  {
    v187 = v44;
    v188 = a6;
    v191 = v34;
    v190 = 0;
    v226 = v46;
    v192 = v38;
    v189 = v37;
    v51 = a1[3];
    v52 = a1[4];
    sub_66898(v48, v48[3]);
    v53 = ContentInfo.title.getter(v51, *(_QWORD *)(v52 + 8));
    v55 = v54;
    static LocalizerRequest.verbatim(_:)(v53);
    swift_bridgeObjectRelease(v55);
    sub_14FAF4(v48, v224);
    v56 = v200;
    v57 = v200[4];
    sub_66898(v200, v200[3]);
    v58 = v48[3];
    v59 = v48[4];
    sub_66898(v48, v58);
    v60 = ContentInfo.id.getter(v58, *(_QWORD *)(v59 + 8));
    v62 = v61;
    v63 = (*(uint64_t (**)(uint64_t))(v57 + 40))(v60);
    swift_bridgeObjectRelease(v62);
    v235 = (void *)v63;
    sub_5E0D8((uint64_t)v48, (uint64_t)&v232);
    v64 = swift_allocObject(&unk_2EF618, 56, 7);
    sub_5DC98(&v232, v64 + 16);
    v65 = sub_5C154(&qword_3239F8);
    v66 = sub_5C154(&qword_3200B8);
    v67 = sub_67060(&qword_323A00, &qword_3239F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_16AB3C, v64, v65, v66, v67);
    swift_release(v64);
    swift_release(v235);
    v68 = v56[4];
    sub_66898(v56, v56[3]);
    v69 = v48[3];
    v70 = v48[4];
    sub_66898(v48, v69);
    v71 = ContentInfo.id.getter(v69, *(_QWORD *)(v70 + 8));
    v73 = v72;
    v74 = (*(uint64_t (**)(uint64_t))(v68 + 48))(v71);
    swift_bridgeObjectRelease(v73);
    v235 = (void *)v74;
    sub_5E0D8((uint64_t)v48, (uint64_t)&v232);
    v75 = swift_allocObject(&unk_2EF640, 56, 7);
    sub_5DC98(&v232, v75 + 16);
    v76 = sub_5C154(&qword_323A08);
    v77 = sub_67060(&qword_323A10, &qword_323A08, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v78 = v217;
    Publisher.map<A>(_:)(sub_16AB3C, v75, v76, v66, v77);
    swift_release(v75);
    swift_release(v235);
    v79 = sub_67060(&qword_323A20, &qword_3239C0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v80 = sub_67060(&qword_323A28, &qword_3239B8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v81 = v201;
    Publisher.merge<A>(with:)(v78, v218, v219, v79, v80);
    v82 = sub_67060(&qword_323A30, &qword_3239B0, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
    v83 = v203;
    v200 = (_QWORD *)Publisher.eraseToAnyPublisher()(v203, v82);
    ((void (*)(uint64_t, _QWORD *))v202[1])(v81, v83);
    v235 = &_swiftEmptyDictionarySingleton;
    v84 = (char *)v48[3];
    v85 = v48[4];
    sub_66898(v48, (uint64_t)v84);
    sub_2344B0(v84, v85, v229);
    static ActionMetrics.notInstrumented.getter(v86);
    v202 = (_QWORD *)sub_5C154(&qword_31EF10);
    v87 = swift_allocObject(v202, 112, 7);
    v201 = xmmword_255F00;
    *(_OWORD *)(v87 + 16) = xmmword_255F00;
    v88 = (char *)v48[3];
    v89 = v48[4];
    sub_66898(v48, (uint64_t)v88);
    v90 = v206;
    sub_2344B0(v88, v89, (uint64_t)v206);
    v91 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v204 + 104);
    v92.n128_f64[0] = ((double (*)(_QWORD *, _QWORD, _QWORD))v91)(v90, enum case for AppAnalyticsAction.Type.reportSeriesDetailsView(_:), v223);
    v93 = type metadata accessor for AppAnalyticsAction(0, v92);
    *(_QWORD *)(v87 + 56) = v93;
    v94 = sub_648E0(&qword_31F5A0, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
    *(_QWORD *)(v87 + 64) = v94;
    sub_668BC((_QWORD *)(v87 + 32));
    AppAnalyticsAction.init(type:)(v90);
    v220 = (_QWORD *)(v87 + 72);
    v95 = (char *)v90 + *(int *)(sub_5C154(&qword_3239E0) + 48);
    v96 = v228;
    v90[3] = v228;
    v204 = sub_648E0(&qword_3239E8, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    v90[4] = v204;
    v225 = sub_648E0(&qword_3239F0, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    v90[5] = v225;
    v97 = sub_668BC(v90);
    v203 = *(_QWORD **)(v214 + 16);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v203)(v97, v229, v96);
    v98 = enum case for ScenePhase.active(_:);
    v99 = type metadata accessor for ScenePhase(0);
    v100 = v95;
    v101 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 104))(v100, v98, v99);
    v102 = v223;
    v91(v90, enum case for AppAnalyticsAction.Type.popData(_:), v223);
    *(_QWORD *)(v87 + 96) = v93;
    *(_QWORD *)(v87 + 104) = v94;
    sub_668BC(v220);
    AppAnalyticsAction.init(type:)(v90);
    v103 = (_QWORD *)type metadata accessor for CompoundAction(0);
    *((_QWORD *)&v233 + 1) = v103;
    AssociatedConformanceWitness = &protocol witness table for CompoundAction;
    sub_668BC(&v232);
    CompoundAction.init(actionMetrics:subactions:)(v221, v87);
    sub_12A778((uint64_t)&v232, 3);
    if ((_DWORD)v222)
    {
      v105 = v102;
      v106 = v228;
      v107 = v204;
      v90[3] = v228;
      v90[4] = v107;
      v90[5] = v225;
      v108 = sub_668BC(v90);
      ((void (*)(_QWORD *, uint64_t, uint64_t))v203)(v108, v229, v106);
      v101(v90, enum case for AppAnalyticsAction.Type.pushData(_:), v105);
      *((_QWORD *)&v233 + 1) = v93;
      AssociatedConformanceWitness = (void *)v94;
      sub_668BC(&v232);
      AppAnalyticsAction.init(type:)(v90);
      sub_12A778((uint64_t)&v232, 2);
      v109 = v213;
      v110 = v212;
      v111 = v211;
      v112 = v210;
      v113 = v209;
      v114 = v208;
      v115 = v107;
      v116 = v197;
      v117 = v196;
      v118 = v187;
      v119 = v48;
      v120 = v115;
    }
    else
    {
      v220 = v103;
      v221 = v94;
      v186 = v93;
      v121 = v91;
      static ActionMetrics.notInstrumented.getter(v104);
      v122 = swift_allocObject(v202, 112, 7);
      *(_OWORD *)(v122 + 16) = v201;
      v202 = (_QWORD *)(v122 + 32);
      v123 = v48[3];
      v124 = v48[4];
      sub_66898(v48, v123);
      *(_QWORD *)&v201 = ContentInfo.id.getter(v123, *(_QWORD *)(v124 + 8));
      v185 = v125;
      v126 = v48[3];
      v127 = v48[4];
      sub_66898(v48, v126);
      SeriesInfo.assetCount.getter(v126, v127);
      LOBYTE(v124) = v128;
      v130 = v48[3];
      v129 = v48[4];
      sub_66898(v48, v130);
      v119 = v48;
      if ((v124 & 1) != 0)
        v131 = SeriesInfo.assetMinimumCount.getter(v130, v129);
      else
        v131 = SeriesInfo.assetCount.getter(v130, v129);
      v133 = v193;
      v134 = v185;
      *v193 = v201;
      v133[1] = v134;
      v133[2] = v131;
      *((_BYTE *)v133 + 24) = v132 & 1;
      v135 = v223;
      v136 = v121;
      v121(v133, enum case for AppAnalyticsAction.Type.reportAllInSeriesView(_:), v223);
      v137 = v186;
      v138 = v221;
      *(_QWORD *)(v122 + 56) = v186;
      *(_QWORD *)(v122 + 64) = v138;
      sub_668BC(v202);
      AppAnalyticsAction.init(type:)(v133);
      v106 = v228;
      v139 = v206;
      v120 = v204;
      v206[3] = v228;
      v139[4] = v120;
      v139[5] = v225;
      v140 = sub_668BC(v139);
      ((void (*)(_QWORD *, uint64_t, uint64_t))v203)(v140, v229, v106);
      v136(v139, enum case for AppAnalyticsAction.Type.pushData(_:), v135);
      v141 = v221;
      *(_QWORD *)(v122 + 96) = v137;
      *(_QWORD *)(v122 + 104) = v141;
      sub_668BC((_QWORD *)(v122 + 72));
      AppAnalyticsAction.init(type:)(v139);
      *((_QWORD *)&v233 + 1) = v220;
      AssociatedConformanceWitness = &protocol witness table for CompoundAction;
      sub_668BC(&v232);
      CompoundAction.init(actionMetrics:subactions:)(v195, v122);
      sub_12A778((uint64_t)&v232, 2);
      v109 = v213;
      v110 = v212;
      v111 = v211;
      v112 = v210;
      v113 = v209;
      v114 = v208;
      v116 = v197;
      v117 = v196;
      v118 = v187;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16))(v110, v117, v113);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v109, v116, v111);
    v142 = sub_5C154(&qword_31EEA8);
    v143 = swift_allocObject(v142, 80, 7);
    v223 = xmmword_258070;
    *(_OWORD *)(v143 + 16) = xmmword_258070;
    v144 = (char *)v119[3];
    v145 = v119[4];
    sub_66898(v119, (uint64_t)v144);
    *(_QWORD *)(v143 + 56) = v106;
    *(_QWORD *)(v143 + 64) = v120;
    v221 = v143;
    *(_QWORD *)(v143 + 72) = v225;
    v146 = sub_668BC((_QWORD *)(v143 + 32));
    sub_2344B0(v144, v145, (uint64_t)v146);
    v231 = 1;
    v147 = sub_5C154(&qword_31EF40);
    v148 = *(unsigned __int8 *)(v118 + 80);
    v149 = (v148 + 32) & ~v148;
    v150 = swift_allocObject(v147, v149 + *(_QWORD *)(v118 + 72), v148 | 7);
    *(_OWORD *)(v150 + 16) = v223;
    v225 = v150;
    v151 = (uint64_t)v226;
    sub_830B0((uint64_t)v226, v150 + v149);
    v152 = *(_QWORD *)(v151 + 8);
    v220 = *(_QWORD **)v151;
    v153 = v192;
    v154 = *(void (**)(char *, char *, uint64_t))(v192 + 16);
    v155 = (uint64_t)v191;
    v156 = v227;
    v157 = v189;
    v154(v191, v227, v189);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v153 + 56))(v155, 0, 1, v157);
    v158 = v224;
    sub_5E1A4(v224, v215, &qword_3217B8);
    *(_QWORD *)&v223 = v235;
    v159 = sub_5C154(&qword_323A18);
    v160 = (uint64_t)v207;
    v161 = (uint64_t)&v207[*(int *)(v159 + 48)];
    v154(v207, v156, v157);
    sub_5E1A4(v158, v161, &qword_3217B8);
    v162 = enum case for ToolbarPrincipalType.series(_:);
    v163 = type metadata accessor for ToolbarPrincipalType(0);
    v164 = *(_QWORD *)(v163 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v164 + 104))(v160, v162, v163);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v164 + 56))(v160, 0, 1, v163);
    LOBYTE(v232) = 1;
    v165 = (char *)v119[3];
    v166 = v119[4];
    sub_66898(v119, (uint64_t)v165);
    swift_bridgeObjectRetain(v152);
    v167 = v205;
    sub_2344B0(v165, v166, v205);
    v230 = (char)v222;
    v168 = v190;
    v169 = sub_1A738C(v119, (void (*)(char *))&v232, v167, (unsigned __int8 *)&v230, v188);
    if (v168)
    {
      swift_bridgeObjectRelease(v221);
      swift_bridgeObjectRelease(v225);
      swift_bridgeObjectRelease(v152);
      swift_bridgeObjectRelease(v223);
      swift_release(v200);
      v170 = *(void (**)(uint64_t, uint64_t))(v214 + 8);
      v171 = v228;
      v170(v167, v228);
      sub_5E09C(v160, &qword_322F98);
      sub_5E09C(v215, &qword_3217B8);
      sub_5E09C((uint64_t)v191, &qword_3217B8);
      (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v213, v211);
      (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v212, v209);
      v170(v229, v171);
      (*(void (**)(char *, uint64_t))(v199 + 8))(v217, v219);
      (*(void (**)(char *, uint64_t))(v198 + 8))(v216, v218);
      sub_5E09C(v158, &qword_3217B8);
      (*(void (**)(char *, uint64_t))(v192 + 8))(v227, v157);
      return sub_6685C((uint64_t)v226, type metadata accessor for Shelf);
    }
    else
    {
      v210 = v169;
      v211 = v152;
      v190 = 0;
      v214 = *(_QWORD *)(v214 + 8);
      ((void (*)(uint64_t, uint64_t))v214)(v167, v228);
      v173 = v119[3];
      v172 = v119[4];
      sub_66898(v119, v173);
      v174 = v172;
      v175 = *(_QWORD *)(v172 + 8);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v175);
      v177 = type metadata accessor for Optional(0, AssociatedTypeWitness);
      v222 = &v185;
      v178 = *(_QWORD *)(v177 - 8);
      __chkstk_darwin(v177);
      v180 = (char *)&v185 - v179;
      ContentInfo.libraryData.getter(v173, v175);
      v181 = *(_QWORD *)(AssociatedTypeWitness - 8);
      v182 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v181 + 48))(v180, 1, AssociatedTypeWitness);
      v183 = v215;
      if (v182 == 1)
      {
        (*(void (**)(char *, uint64_t))(v178 + 8))(v180, v177);
        AssociatedConformanceWitness = 0;
        v232 = 0u;
        v233 = 0u;
      }
      else
      {
        *((_QWORD *)&v233 + 1) = AssociatedTypeWitness;
        AssociatedConformanceWitness = (void *)swift_getAssociatedConformanceWitness(v174, v173, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
        v184 = sub_668BC(&v232);
        (*(void (**)(_QWORD *, char *, uint64_t))(v181 + 32))(v184, v180, AssociatedTypeWitness);
      }
      sub_5E09C((uint64_t)&v232, &qword_320910);
      swift_beginAccess(&byte_3207D8, &v232, 0, 0);
      v230 = byte_3207D8;
      sub_134734(v212, v213, v221, &v231, v225, (uint64_t)v220, v211, (uint64_t)v191, v194, v183, (unsigned __int8 *)&v230, 0, v223, (uint64_t)v207, (uint64_t)_swiftEmptyArrayStorage, v210, (uint64_t)v200, v182 != 1);
      ((void (*)(uint64_t, uint64_t))v214)(v229, v228);
      (*(void (**)(char *, uint64_t))(v199 + 8))(v217, v219);
      (*(void (**)(char *, uint64_t))(v198 + 8))(v216, v218);
      sub_5E09C(v224, &qword_3217B8);
      (*(void (**)(char *, uint64_t))(v192 + 8))(v227, v189);
      return sub_6685C((uint64_t)v226, type metadata accessor for Shelf);
    }
  }
  return result;
}

_QWORD *sub_167C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  _QWORD v16[5];
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v3);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E0D8(a2, (uint64_t)v16);
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v17 = 1;
  static ActionMetrics.notInstrumented.getter((__n128)0);
  v15[3] = &type metadata for SeriesListShelfUpdateIntent;
  v15[4] = sub_E29B4();
  v15[0] = swift_allocObject(&unk_2EF668, 104, 7);
  sub_E2A2C((uint64_t)v16, v15[0] + 16);
  v9 = type metadata accessor for ClickData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
  v10 = type metadata accessor for Page(0);
  v11 = type metadata accessor for Shelf(0);
  v12 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v13 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateAction.init(actionMetrics:instructionIntent:animated:clickData:)(v8, v15, 1, v5, v10, v11, v12, v13);
  return sub_E2A68(v16);
}

uint64_t SeriesSeeAllPageIntentImplementation.performSync(_:objectGraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  _BOOL4 v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  id v85;
  _QWORD *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t AssociatedConformanceWitness;
  _QWORD v93[3];
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v75 = a2;
  v74 = type metadata accessor for Page(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v82 = (uint64_t *)((char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5C154(&qword_3237B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for PageMetrics(0);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for PageData(0);
  v77 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_320A48);
  BaseObjectGraph.inject<A>(_:)(&v99, v11, v11);
  v12 = type metadata accessor for HostProxy(0);
  BaseObjectGraph.inject<A>(_:)(&v96, v12, v12);
  v86 = v96;
  v100 = a1;
  sub_5E0D8(a1, (uint64_t)&v96);
  v13 = type metadata accessor for ProfileRestrictions(0);
  v14 = BaseObjectGraph.inject<A>(_:)(v93, v13, v13);
  v85 = (id)v93[0];
  LOBYTE(a1) = dispatch thunk of ProfileRestrictions.isBookStoreAllowed.getter(v14);
  sub_5E0D8((uint64_t)&v96, (uint64_t)v93);
  v84 = v8;
  v83 = v10;
  if ((a1 & 1) == 0)
  {
    v76 = (uint64_t)v6;
    v15 = v94;
    v16 = v95;
    sub_66898(v93, v94);
    v17 = *(_QWORD *)(v16 + 8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v17);
    v19 = type metadata accessor for Optional(0, AssociatedTypeWitness);
    v20 = *(_QWORD *)(v19 - 8);
    __chkstk_darwin(v19);
    v22 = (char *)&v73 - v21;
    ContentInfo.libraryData.getter(v15, v17);
    v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      AssociatedConformanceWitness = 0;
      v90 = 0u;
      v91 = 0u;
      sub_5E09C((uint64_t)&v90, &qword_320910);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v93);
      v24 = sub_DC8BC();
      v25 = swift_allocError(&type metadata for PageError, v24, 0, 0);
      *v26 = 1;
LABEL_8:
      swift_willThrow(v25);
      swift_release(v86);

      goto LABEL_15;
    }
    *((_QWORD *)&v91 + 1) = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, v15, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
    v27 = sub_668BC(&v90);
    (*(void (**)(_QWORD *, char *, uint64_t))(v23 + 32))(v27, v22, AssociatedTypeWitness);
    sub_5E09C((uint64_t)&v90, &qword_320910);
    v6 = (char *)v76;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v93);
  v28 = objc_msgSend((id)objc_opt_self(BKReachability), "isOffline");
  sub_5E0D8((uint64_t)&v96, (uint64_t)&v90);
  if (v28)
  {
    v76 = (uint64_t)v6;
    v29 = *((_QWORD *)&v91 + 1);
    v30 = AssociatedConformanceWitness;
    sub_66898(&v90, *((uint64_t *)&v91 + 1));
    v31 = *(_QWORD *)(v30 + 8);
    v32 = swift_getAssociatedTypeWitness(255, v31);
    v33 = type metadata accessor for Optional(0, v32);
    v34 = *(_QWORD *)(v33 - 8);
    __chkstk_darwin(v33);
    v36 = (char *)&v73 - v35;
    ContentInfo.libraryData.getter(v29, v31);
    v37 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v36, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v89 = 0;
      v88 = 0u;
      v87 = 0u;
      sub_5E09C((uint64_t)&v87, &qword_320910);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v90);
      v38 = sub_DC8BC();
      v25 = swift_allocError(&type metadata for PageError, v38, 0, 0);
      *v39 = 3;
      goto LABEL_8;
    }
    *((_QWORD *)&v88 + 1) = v32;
    v89 = swift_getAssociatedConformanceWitness(v30, v29, v32, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
    v40 = sub_668BC(&v87);
    (*(void (**)(_QWORD *, char *, uint64_t))(v37 + 32))(v40, v36, v32);
    sub_5E09C((uint64_t)&v87, &qword_320910);
    v6 = (char *)v76;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v90);
  v41 = v97;
  v42 = v98;
  sub_66898(&v96, v97);
  v43 = ContentInfo.id.getter(v41, *(_QWORD *)(v42 + 8));
  PageData.init(pageID:pageType:)(v43, v44, 0xD000000000000010, 0x80000000002731B0, v45);
  v46 = v97;
  v47 = v98;
  sub_66898(&v96, v97);
  v48 = ContentInfo.id.getter(v46, *(_QWORD *)(v47 + 8));
  v50 = v49;
  v76 = type metadata accessor for SeriesSeeAllPageIntent(0);
  v51 = v100 + *(int *)(v76 + 28);
  v52 = type metadata accessor for JSNetworkPerformanceMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v6, 1, 1, v52);
  static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(0x6553736569726553, 0xEC0000006C6C4165, v48, v50, v51, v6, 1, 1);
  swift_bridgeObjectRelease(v50);
  sub_5E09C((uint64_t)v6, &qword_3237B8);
  v54 = v97;
  v53 = v98;
  sub_66898(&v96, v97);
  v55 = *(_QWORD *)(v53 + 8);
  v56 = swift_getAssociatedTypeWitness(255, v55);
  v57 = type metadata accessor for Optional(0, v56);
  v58 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v60 = (char *)&v73 - v59;
  ContentInfo.libraryData.getter(v54, v55);
  v61 = *(_QWORD *)(v56 - 8);
  v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48))(v60, 1, v56);
  if (v62 == 1)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
    v89 = 0;
    v88 = 0u;
    v87 = 0u;
  }
  else
  {
    *((_QWORD *)&v88 + 1) = v56;
    v89 = swift_getAssociatedConformanceWitness(v53, v54, v56, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
    v63 = sub_668BC(&v87);
    (*(void (**)(_QWORD *, char *, uint64_t))(v61 + 32))(v63, v60, v56);
  }
  v64 = v62 != 1;
  sub_5E09C((uint64_t)&v87, &qword_320910);
  LOBYTE(v87) = *(_BYTE *)(v100 + 40);
  v65 = v82;
  v66 = (uint64_t)v83;
  v67 = (uint64_t)v84;
  v68 = v86;
  v69 = v81;
  sub_1668C0(&v96, v64, (uint64_t)v83, (uint64_t)v84, (unsigned __int8 *)&v87, v100 + *(int *)(v76 + 24), &v99, v86, v82);
  if (!v69)
  {
    swift_release(v68);

    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v67, v80);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v66, v79);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v99);
    v70 = (uint64_t)v65;
    v71 = v75;
    sub_A0868(v70, v75);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v71, 0, 1, v74);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v96);
  }
  swift_release(v68);

  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v67, v80);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v66, v79);
LABEL_15:
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v99);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v96);
}

uint64_t sub_168760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SeriesSeeAllPageIntentImplementation.performSync(_:objectGraph:)(a1, a2);
}

uint64_t SeriesSeeAllPageIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3[43] = a2;
  v3[44] = a3;
  v3[42] = a1;
  v4 = type metadata accessor for Page(0);
  v3[45] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[46] = v5;
  v3[47] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PageMetrics(0);
  v3[48] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[49] = v7;
  v3[50] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageData(0);
  v3[51] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[52] = v9;
  v3[53] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeriesPageStoreResourceIntent(0);
  v3[54] = v10;
  v3[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3237B8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[56] = swift_task_alloc(v11);
  v3[57] = swift_task_alloc(v11);
  v12 = type metadata accessor for MonotonicTime(0);
  v3[58] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[59] = v13;
  v3[60] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_3237D8);
  v3[61] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[62] = v15;
  v3[63] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PageRenderEvent(0, v16);
  v3[64] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[65] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[66] = swift_task_alloc(v19);
  v3[67] = swift_task_alloc(v19);
  v20 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3237E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[68] = swift_task_alloc(v20);
  v3[69] = swift_task_alloc(v20);
  v3[70] = swift_task_alloc(v20);
  v21 = sub_5C154(&qword_3237E8);
  v3[71] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PageIntentInstrumentation(0);
  v3[72] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v3[73] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[74] = swift_task_alloc(v24);
  v3[75] = swift_task_alloc(v24);
  v25 = type metadata accessor for ProfileRestrictions(0);
  v26 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[76] = v26;
  *v26 = v3;
  v26[1] = sub_1689E8;
  return BaseObjectGraph.inject<A>(_:)(v3 + 41, v25, v25);
}

uint64_t sub_1689E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  *(_QWORD *)(*(_QWORD *)v1 + 616) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_16A384;
  else
    v3 = sub_168A4C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_168A4C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(void **)(v1 + 328);
  *(_QWORD *)(v1 + 624) = v2;
  if ((dispatch thunk of ProfileRestrictions.isBookStoreAllowed.getter(a1) & 1) == 0)
  {
    v16 = sub_DC8BC();
    v17 = swift_allocError(&type metadata for PageError, v16, 0, 0);
    *v18 = 1;
    swift_willThrow(v17);

    goto LABEL_6;
  }
  sub_5E0D8(*(_QWORD *)(v1 + 344), v1 + 56);
  if (objc_msgSend((id)objc_opt_self(BKReachability), "isOffline"))
  {
    v4 = *(_QWORD *)(v1 + 80);
    v3 = *(_QWORD *)(v1 + 88);
    sub_66898((_QWORD *)(v1 + 56), v4);
    v37 = v3;
    v5 = *(_QWORD *)(v3 + 8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
    v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = v5;
    v11 = (_QWORD *)(v1 + 16);
    ContentInfo.libraryData.getter(v4, v10);
    v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
      swift_task_dealloc(v9);
      *(_QWORD *)(v1 + 48) = 0;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v1 + 32) = 0u;
      sub_5E09C((uint64_t)v11, &qword_320910);
      v13 = sub_DC8BC();
      v14 = swift_allocError(&type metadata for PageError, v13, 0, 0);
      *v15 = 3;
      swift_willThrow(v14);

      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 56));
LABEL_6:
      v19 = *(_QWORD *)(v1 + 592);
      v20 = *(_QWORD *)(v1 + 568);
      v21 = *(_QWORD *)(v1 + 560);
      v22 = *(_QWORD *)(v1 + 552);
      v23 = *(_QWORD *)(v1 + 544);
      v24 = *(_QWORD *)(v1 + 536);
      v25 = *(_QWORD *)(v1 + 528);
      v26 = *(_QWORD *)(v1 + 504);
      v27 = *(_QWORD *)(v1 + 480);
      v32 = *(_QWORD *)(v1 + 456);
      v33 = *(_QWORD *)(v1 + 448);
      v34 = *(_QWORD *)(v1 + 440);
      v35 = *(_QWORD *)(v1 + 424);
      v36 = *(_QWORD *)(v1 + 400);
      v38 = *(_QWORD *)(v1 + 376);
      swift_task_dealloc(*(_QWORD *)(v1 + 600));
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v38);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    *(_QWORD *)(v1 + 40) = AssociatedTypeWitness;
    *(_QWORD *)(v1 + 48) = swift_getAssociatedConformanceWitness(v37, v4, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
    v29 = sub_668BC(v11);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v12 + 32))(v29, v9, AssociatedTypeWitness);
    swift_task_dealloc(v9);
    sub_5E09C((uint64_t)v11, &qword_320910);
  }
  v30 = sub_5C154(&qword_31FE78);
  v31 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 632) = v31;
  *v31 = v1;
  v31[1] = sub_168DB0;
  return BaseObjectGraph.inject<A>(_:)(v1 + 96, v30, v30);
}

uint64_t sub_168DB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 632);
  v3 = *v1;
  *(_QWORD *)(v3 + 640) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_16A4A0, 0, 0);
  v5 = sub_5C154(&qword_320A48);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 648) = v6;
  *v6 = v3;
  v6[1] = sub_168E70;
  return BaseObjectGraph.inject<A>(_:)(v3 + 136, v5, v5);
}

uint64_t sub_168E70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 648);
  v3 = *v1;
  *(_QWORD *)(v3 + 656) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_16A5D0, 0, 0);
  v5 = type metadata accessor for HostProxy(0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 664) = v6;
  *v6 = v3;
  v6[1] = sub_168F2C;
  return BaseObjectGraph.inject<A>(_:)(v3 + 320, v5, v5);
}

uint64_t sub_168F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  *(_QWORD *)(*(_QWORD *)v1 + 672) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_16A70C;
  else
    v3 = sub_168F90;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_168F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned __int8 v169[17];

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 680) = *(_QWORD *)(v0 + 320);
  BaseObjectGraph.optional<A>(_:)(v2, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 576);
  v8 = *(_QWORD *)(v0 + 568);
  if (v4 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for PageIntentInstrumentation.notInstrumented(_:), v7);
    sub_5E09C(v8, &qword_3237E8);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 32))(v5, *(_QWORD *)(v0 + 568), v7);
  }
  v9 = (_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 592);
  v11 = *(_QWORD *)(v0 + 584);
  v12 = *(_QWORD *)(v0 + 576);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v10, *(_QWORD *)(v0 + 600), v12);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v10, v12);
  if (v13 == enum case for PageIntentInstrumentation.primaryData(_:))
  {
    v14 = *(_QWORD *)(v0 + 592);
    v15 = *(_QWORD *)(v0 + 560);
    v16 = *(_QWORD *)(v0 + 520);
    v17 = *(_QWORD *)(v0 + 512);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 584) + 96))(v14, *(_QWORD *)(v0 + 576));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v15, v14, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v17);
  }
  else
  {
    v18 = v13;
    if (v13 == enum case for PageIntentInstrumentation.secondaryData(_:))
    {
      v19 = *(_QWORD *)(v0 + 592);
      v20 = *(_QWORD *)(v0 + 584);
      v21 = *(_QWORD *)(v0 + 576);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 520) + 56))(*(_QWORD *)(v0 + 560), 1, 1, *(_QWORD *)(v0 + 512));
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }
    else
    {
      v22 = enum case for PageIntentInstrumentation.notInstrumented(_:);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 520) + 56))(*(_QWORD *)(v0 + 560), 1, 1, *(_QWORD *)(v0 + 512));
      if (v18 != v22)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 8))(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 576));
    }
  }
  v165 = (_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 552);
  v24 = *(_QWORD *)(v0 + 520);
  v25 = *(_QWORD *)(v0 + 512);
  sub_5E1A4(*(_QWORD *)(v0 + 560), v23, &qword_3237E0);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  *(_QWORD *)(v0 + 688) = v26;
  v27 = v26(v23, 1, v25);
  v28 = *(_QWORD *)(v0 + 552);
  v167 = (_QWORD *)(v0 + 56);
  if (v27 == 1)
  {
    sub_5E09C(v28, &qword_3237E0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 520) + 32))(*(_QWORD *)(v0 + 536), v28, *(_QWORD *)(v0 + 512));
    if (qword_31E750 != -1)
      swift_once(&qword_31E750, sub_1F0950);
    v29 = *(_QWORD *)(v0 + 496);
    v30 = *(_QWORD *)(v0 + 504);
    v31 = *(_QWORD *)(v0 + 488);
    v32 = sub_5240C(v31, (uint64_t)qword_3460A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v30, v32, v31);
    v34 = *(_QWORD *)(v0 + 80);
    v33 = *(_QWORD *)(v0 + 88);
    sub_66898((_QWORD *)(v0 + 56), v34);
    v35 = (void *)ContentInfo.storeData.getter(v34, *(_QWORD *)(v33 + 8));
    if (v35)
    {

      v36 = 0;
    }
    else
    {
      v36 = 1;
    }
    v37 = *(_QWORD *)(v0 + 536);
    v155 = *(_QWORD *)(v0 + 520);
    v38 = *(_QWORD *)(v0 + 504);
    v159 = *(_QWORD *)(v0 + 512);
    v40 = *(_QWORD *)(v0 + 488);
    v39 = *(_QWORD *)(v0 + 496);
    v41 = *(_QWORD *)(v0 + 472);
    v42 = *(_QWORD *)(v0 + 480);
    v43 = *(_QWORD *)(v0 + 464);
    *(_BYTE *)(v0 + 736) = v36;
    v44 = PageRenderEvent.id.getter(v35);
    v46 = v45;
    static MonotonicTime.now.getter(v44);
    v47 = sub_E0540();
    PageRenderField<>.callAsFunction(_:for:at:)(v0 + 736, v44, v46, v42, v40, v47);
    v48 = swift_bridgeObjectRelease(v46);
    (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v42, v43, v48);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v37, v159);
    v9 = (_QWORD *)(v0 + 56);
  }
  v49 = *(_QWORD *)(v0 + 456);
  v50 = type metadata accessor for JSNetworkPerformanceMetrics(0);
  *(_QWORD *)(v0 + 696) = v50;
  v51 = *(_QWORD *)(v50 - 8);
  *(_QWORD *)(v0 + 704) = v51;
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
  *(_QWORD *)(v0 + 712) = v52;
  v52(v49, 1, 1, v50);
  v54 = *(_QWORD *)(v0 + 80);
  v53 = *(_QWORD *)(v0 + 88);
  sub_66898(v9, v54);
  v55 = (void *)ContentInfo.storeData.getter(v54, *(_QWORD *)(v53 + 8));
  if (v55)
  {
    v163 = (_QWORD *)(v0 + 136);

    v160 = *(_QWORD *)(v0 + 672);
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
    v57 = *(_QWORD *)(v0 + 544);
    v58 = *(_QWORD *)(v0 + 512);
    sub_5E1A4(*(_QWORD *)(v0 + 560), v57, &qword_3237E0);
    if (v56(v57, 1, v58) == 1)
    {
      sub_5E09C(*(_QWORD *)(v0 + 544), &qword_3237E0);
    }
    else
    {
      v80 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 32))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 512));
      static MonotonicTime.now.getter(v80);
      if (qword_31E740 != -1)
        swift_once(&qword_31E740, sub_1F08BC);
      v81 = sub_5C154(&qword_323800);
      v82 = sub_5240C(v81, (uint64_t)qword_346078);
      v83 = PageRenderEvent.id.getter(v82);
      v85 = v84;
      PageRenderField<>.startTime(for:at:)(v83);
      swift_bridgeObjectRelease(v85);
      if (qword_31E748 != -1)
        swift_once(&qword_31E748, sub_1F08D4);
      v86 = *(_QWORD *)(v0 + 528);
      v87 = *(_QWORD *)(v0 + 520);
      v88 = *(_QWORD *)(v0 + 512);
      v90 = *(_QWORD *)(v0 + 472);
      v89 = *(_QWORD *)(v0 + 480);
      v91 = *(_QWORD *)(v0 + 464);
      v92 = sub_5240C(v81, (uint64_t)qword_346090);
      v93 = PageRenderEvent.id.getter(v92);
      v95 = v94;
      PageRenderField<>.startTime(for:at:)(v93);
      v96 = swift_bridgeObjectRelease(v95);
      (*(void (**)(uint64_t, uint64_t, __n128))(v90 + 8))(v89, v91, v96);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
    }
    v156 = *(_QWORD **)(v0 + 680);
    v97 = *(_QWORD *)(v0 + 456);
    v98 = *(_QWORD *)(v0 + 424);
    v99 = *(_QWORD *)(v0 + 400);
    v100 = *(uint64_t **)(v0 + 376);
    v101 = *(_QWORD *)(v0 + 344);
    v103 = *(_QWORD *)(v0 + 80);
    v102 = *(_QWORD *)(v0 + 88);
    sub_66898(v167, v103);
    v104 = ContentInfo.id.getter(v103, *(_QWORD *)(v102 + 8));
    PageData.init(pageID:pageType:)(v104, v105, 0xD000000000000010, 0x80000000002731B0, v106);
    v108 = *(_QWORD *)(v0 + 80);
    v107 = *(_QWORD *)(v0 + 88);
    sub_66898(v167, v108);
    v109 = ContentInfo.id.getter(v108, *(_QWORD *)(v107 + 8));
    v111 = v110;
    v112 = type metadata accessor for SeriesSeeAllPageIntent(0);
    static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(0x6553736569726553, 0xEC0000006C6C4165, v109, v111, v101 + *(int *)(v112 + 28), v97, 1, 1);
    swift_bridgeObjectRelease(v111);
    v169[0] = *(_BYTE *)(v101 + 40);
    v113 = v100;
    v114 = v160;
    sub_1668C0(v167, 1, v98, v99, v169, v101 + *(int *)(v112 + 24), v163, v156, v113);
    v157 = *(_QWORD *)(v0 + 680);
    v161 = *(void **)(v0 + 624);
    v115 = *(_QWORD *)(v0 + 600);
    if (v114)
    {
      v116 = *(_QWORD *)(v0 + 584);
      v117 = *(_QWORD *)(v0 + 576);
      v118 = *(_QWORD *)(v0 + 560);
      v119 = *(_QWORD *)(v0 + 456);
      v120 = *(_QWORD *)(v0 + 416);
      v121 = *(_QWORD *)(v0 + 424);
      v122 = *(_QWORD *)(v0 + 408);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v121, v122);
      sub_DFA2C(v118);
      swift_release(v157);

      sub_5E09C(v119, &qword_3237B8);
      sub_5E09C(v118, &qword_3237E0);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v163);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v165);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v167);
      v123 = *(_QWORD *)(v0 + 592);
      v124 = *(_QWORD *)(v0 + 568);
      v125 = *(_QWORD *)(v0 + 560);
      v126 = *(_QWORD *)(v0 + 552);
      v127 = *(_QWORD *)(v0 + 544);
      v128 = *(_QWORD *)(v0 + 536);
      v129 = *(_QWORD *)(v0 + 528);
      v130 = *(_QWORD *)(v0 + 504);
      v131 = *(_QWORD *)(v0 + 480);
      v152 = *(_QWORD *)(v0 + 456);
      v158 = *(_QWORD *)(v0 + 448);
      v162 = *(_QWORD *)(v0 + 440);
      v164 = *(_QWORD *)(v0 + 424);
      v166 = *(_QWORD *)(v0 + 400);
      v168 = *(_QWORD *)(v0 + 376);
      swift_task_dealloc(*(_QWORD *)(v0 + 600));
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      swift_task_dealloc(v130);
      swift_task_dealloc(v131);
      swift_task_dealloc(v152);
      swift_task_dealloc(v158);
      swift_task_dealloc(v162);
      swift_task_dealloc(v164);
      swift_task_dealloc(v166);
      swift_task_dealloc(v168);
    }
    else
    {
      v142 = *(_QWORD *)(v0 + 576);
      v143 = *(_QWORD *)(v0 + 592);
      v139 = *(_QWORD *)(v0 + 560);
      v144 = *(_QWORD *)(v0 + 568);
      v145 = *(_QWORD *)(v0 + 552);
      v146 = *(_QWORD *)(v0 + 544);
      v147 = *(_QWORD *)(v0 + 536);
      v148 = *(_QWORD *)(v0 + 528);
      v149 = *(_QWORD *)(v0 + 504);
      v140 = *(_QWORD *)(v0 + 456);
      v141 = *(_QWORD *)(v0 + 584);
      v153 = *(_QWORD *)(v0 + 448);
      v154 = *(_QWORD *)(v0 + 440);
      v132 = *(_QWORD *)(v0 + 416);
      v133 = *(_QWORD *)(v0 + 424);
      v134 = *(_QWORD *)(v0 + 408);
      v150 = *(_QWORD *)(v0 + 480);
      v151 = *(_QWORD *)(v0 + 400);
      v136 = *(_QWORD *)(v0 + 368);
      v135 = *(_QWORD *)(v0 + 376);
      v138 = *(_QWORD *)(v0 + 360);
      v137 = *(_QWORD *)(v0 + 336);
      (*(void (**)(void))(*(_QWORD *)(v0 + 392) + 8))();
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v133, v134);
      sub_A0868(v135, v137);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v136 + 56))(v137, 0, 1, v138);
      sub_DFA2C(v139);
      swift_release(v157);

      sub_5E09C(v140, &qword_3237B8);
      sub_5E09C(v139, &qword_3237E0);
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v115, v142);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v163);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v165);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v167);
      swift_task_dealloc(v115);
      swift_task_dealloc(v143);
      swift_task_dealloc(v144);
      swift_task_dealloc(v139);
      swift_task_dealloc(v145);
      swift_task_dealloc(v146);
      swift_task_dealloc(v147);
      swift_task_dealloc(v148);
      swift_task_dealloc(v149);
      swift_task_dealloc(v150);
      swift_task_dealloc(v140);
      swift_task_dealloc(v153);
      swift_task_dealloc(v154);
      swift_task_dealloc(v133);
      swift_task_dealloc(v151);
      swift_task_dealloc(v135);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v60 = *(_QWORD *)(v0 + 432);
    v59 = *(uint64_t **)(v0 + 440);
    v61 = *(_QWORD *)(v0 + 344);
    v63 = *(_QWORD *)(v0 + 80);
    v62 = *(_QWORD *)(v0 + 88);
    sub_66898(v9, v63);
    v64 = ContentInfo.id.getter(v63, *(_QWORD *)(v62 + 8));
    v66 = v65;
    v67 = v9;
    v68 = *(_QWORD *)(v0 + 80);
    v69 = *(_QWORD *)(v0 + 88);
    sub_66898(v67, v68);
    dispatch thunk of SeriesInfo.seriesType.getter(v68, v69, v70);
    v71 = (char *)v59 + *(int *)(v60 + 28);
    v72 = v61 + *(int *)(type metadata accessor for SeriesSeeAllPageIntent(0) + 24);
    v73 = type metadata accessor for SeriesListSortOrder(0);
    v74 = *(_QWORD *)(v73 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v71, v72, v73);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
    *v59 = v64;
    v59[1] = v66;
    *(uint64_t *)((char *)v59 + *(int *)(v60 + 24)) = 0;
    v75 = *(_QWORD *)(v0 + 120);
    v76 = *(_QWORD *)(v0 + 128);
    sub_66898(v165, v75);
    v77 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
    *(_QWORD *)(v0 + 720) = v77;
    v78 = sub_648E0(&qword_3253F0, type metadata accessor for SeriesPageStoreResourceIntent, (uint64_t)&unk_266228);
    *v77 = v0;
    v77[1] = sub_169AB4;
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 296, *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 432), v78, v75, v76);
  }
}

uint64_t sub_169AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 720);
  *(_QWORD *)(*(_QWORD *)v1 + 728) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_16A854;
  else
    v3 = sub_169B18;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_169B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  __int128 *v94;
  _QWORD *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unsigned __int8 v109[17];

  v92 = *(void **)(v0 + 296);
  v94 = (__int128 *)(v0 + 216);
  v98 = *(_QWORD *)(v0 + 304);
  v102 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v107 = (_QWORD *)(v0 + 56);
  sub_66898((_QWORD *)(v0 + 56), v1);
  v3 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3);
  v5 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  ContentInfo.libraryData.getter(v1, v3);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v5);
    swift_task_dealloc(v7);
    *(_QWORD *)(v0 + 208) = 0;
    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
  }
  else
  {
    *(_QWORD *)(v0 + 200) = AssociatedTypeWitness;
    *(_QWORD *)(v0 + 208) = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
    v9 = sub_668BC((_QWORD *)(v0 + 176));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 32))(v9, v7, AssociatedTypeWitness);
    swift_task_dealloc(v7);
  }
  v10 = v92;
  static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:)(v0 + 176, v92);

  sub_5E09C(v0 + 176, &qword_320910);
  v105 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 240))
  {
    sub_5DC98(v94, v0 + 256);
    sub_65938(v107, (_QWORD *)(v0 + 256));
    if (*(_QWORD *)(v102 + 16))
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 704) + 16))(*(_QWORD *)(v0 + 448), v102+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 704) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 704) + 80)), *(_QWORD *)(v0 + 696));
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    v13 = *(_QWORD *)(v0 + 448);
    v12 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 440);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 712))(v13, v11, 1, *(_QWORD *)(v0 + 696));

    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRelease(v102);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 256));
    sub_6685C(v14, type metadata accessor for SeriesPageStoreResourceIntent);
    sub_5E09C(v12, &qword_3237B8);
    sub_16AA68(v13, v12);
  }
  else
  {
    sub_6685C(*(_QWORD *)(v0 + 440), type metadata accessor for SeriesPageStoreResourceIntent);

    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRelease(v102);
    sub_5E09C((uint64_t)v94, &qword_320918);
  }
  v99 = *(_QWORD *)(v0 + 728);
  v103 = (_QWORD *)(v0 + 96);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
  v16 = *(_QWORD *)(v0 + 544);
  v17 = *(_QWORD *)(v0 + 512);
  sub_5E1A4(*(_QWORD *)(v0 + 560), v16, &qword_3237E0);
  if (v15(v16, 1, v17) == 1)
  {
    sub_5E09C(*(_QWORD *)(v0 + 544), &qword_3237E0);
  }
  else
  {
    v18 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 32))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 512));
    static MonotonicTime.now.getter(v18);
    if (qword_31E740 != -1)
      swift_once(&qword_31E740, sub_1F08BC);
    v19 = sub_5C154(&qword_323800);
    v20 = sub_5240C(v19, (uint64_t)qword_346078);
    v21 = PageRenderEvent.id.getter(v20);
    v23 = v22;
    PageRenderField<>.startTime(for:at:)(v21);
    swift_bridgeObjectRelease(v23);
    if (qword_31E748 != -1)
      swift_once(&qword_31E748, sub_1F08D4);
    v24 = *(_QWORD *)(v0 + 528);
    v25 = *(_QWORD *)(v0 + 520);
    v26 = *(_QWORD *)(v0 + 512);
    v28 = *(_QWORD *)(v0 + 472);
    v27 = *(_QWORD *)(v0 + 480);
    v29 = *(_QWORD *)(v0 + 464);
    v30 = sub_5240C(v19, (uint64_t)qword_346090);
    v31 = PageRenderEvent.id.getter(v30);
    v33 = v32;
    PageRenderField<>.startTime(for:at:)(v31);
    v34 = swift_bridgeObjectRelease(v33);
    (*(void (**)(uint64_t, uint64_t, __n128))(v28 + 8))(v27, v29, v34);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  v95 = *(_QWORD **)(v0 + 680);
  v35 = *(_QWORD *)(v0 + 456);
  v36 = *(_QWORD *)(v0 + 424);
  v37 = *(_QWORD *)(v0 + 400);
  v38 = *(uint64_t **)(v0 + 376);
  v39 = *(_QWORD *)(v0 + 344);
  v41 = *(_QWORD *)(v0 + 80);
  v40 = *(_QWORD *)(v0 + 88);
  sub_66898(v107, v41);
  v42 = ContentInfo.id.getter(v41, *(_QWORD *)(v40 + 8));
  PageData.init(pageID:pageType:)(v42, v43, 0xD000000000000010, 0x80000000002731B0, v44);
  v46 = *(_QWORD *)(v0 + 80);
  v45 = *(_QWORD *)(v0 + 88);
  sub_66898(v107, v46);
  v47 = ContentInfo.id.getter(v46, *(_QWORD *)(v45 + 8));
  v49 = v48;
  v50 = type metadata accessor for SeriesSeeAllPageIntent(0);
  static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(0x6553736569726553, 0xEC0000006C6C4165, v47, v49, v39 + *(int *)(v50 + 28), v35, 1, 1);
  swift_bridgeObjectRelease(v49);
  v109[0] = *(_BYTE *)(v39 + 40);
  v51 = v99;
  sub_1668C0(v107, 1, v36, v37, v109, v39 + *(int *)(v50 + 24), v105, v95, v38);
  v52 = *(_QWORD *)(v0 + 680);
  v96 = *(void **)(v0 + 624);
  v100 = *(_QWORD *)(v0 + 600);
  if (v51)
  {
    v53 = *(_QWORD *)(v0 + 584);
    v54 = *(_QWORD *)(v0 + 576);
    v55 = *(_QWORD *)(v0 + 560);
    v56 = *(_QWORD *)(v0 + 456);
    v57 = *(_QWORD *)(v0 + 416);
    v58 = *(_QWORD *)(v0 + 424);
    v59 = *(_QWORD *)(v0 + 408);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v59);
    sub_DFA2C(v55);
    swift_release(v52);

    sub_5E09C(v56, &qword_3237B8);
    sub_5E09C(v55, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v100, v54);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v105);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v103);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v107);
    v60 = *(_QWORD *)(v0 + 592);
    v61 = *(_QWORD *)(v0 + 568);
    v62 = *(_QWORD *)(v0 + 560);
    v63 = *(_QWORD *)(v0 + 552);
    v64 = *(_QWORD *)(v0 + 544);
    v65 = *(_QWORD *)(v0 + 536);
    v66 = *(_QWORD *)(v0 + 528);
    v67 = *(_QWORD *)(v0 + 504);
    v68 = *(_QWORD *)(v0 + 480);
    v90 = *(_QWORD *)(v0 + 456);
    v97 = *(_QWORD *)(v0 + 448);
    v101 = *(_QWORD *)(v0 + 440);
    v104 = *(_QWORD *)(v0 + 424);
    v106 = *(_QWORD *)(v0 + 400);
    v108 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 600));
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v90);
    swift_task_dealloc(v97);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
  }
  else
  {
    v80 = *(_QWORD *)(v0 + 576);
    v81 = *(_QWORD *)(v0 + 592);
    v77 = *(_QWORD *)(v0 + 560);
    v82 = *(_QWORD *)(v0 + 568);
    v83 = *(_QWORD *)(v0 + 552);
    v84 = *(_QWORD *)(v0 + 544);
    v85 = *(_QWORD *)(v0 + 536);
    v86 = *(_QWORD *)(v0 + 528);
    v87 = *(_QWORD *)(v0 + 504);
    v78 = *(_QWORD *)(v0 + 456);
    v79 = *(_QWORD *)(v0 + 584);
    v91 = *(_QWORD *)(v0 + 448);
    v93 = *(_QWORD *)(v0 + 440);
    v69 = *(_QWORD *)(v0 + 416);
    v70 = *(_QWORD *)(v0 + 424);
    v71 = *(_QWORD *)(v0 + 408);
    v88 = *(_QWORD *)(v0 + 480);
    v89 = *(_QWORD *)(v0 + 400);
    v72 = *(_QWORD *)(v0 + 368);
    v73 = *(_QWORD *)(v0 + 376);
    v76 = *(_QWORD *)(v0 + 360);
    v74 = *(_QWORD *)(v0 + 336);
    (*(void (**)(void))(*(_QWORD *)(v0 + 392) + 8))();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
    sub_A0868(v73, v74);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v74, 0, 1, v76);
    sub_DFA2C(v77);
    swift_release(v52);

    sub_5E09C(v78, &qword_3237B8);
    sub_5E09C(v77, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v100, v80);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v105);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v103);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v107);
    swift_task_dealloc(v100);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v77);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v78);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v70);
    swift_task_dealloc(v89);
    swift_task_dealloc(v73);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16A384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 504);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 424);
  v15 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16A4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 504);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 424);
  v15 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16A5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 504);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 424);
  v15 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16A70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 136));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 504);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 424);
  v15 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16A854()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 600);
  v3 = *(_QWORD *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 456);
  v7 = *(_QWORD *)(v0 + 440);
  swift_release(*(_QWORD *)(v0 + 680));

  sub_6685C(v7, type metadata accessor for SeriesPageStoreResourceIntent);
  sub_5E09C(v6, &qword_3237B8);
  sub_5E09C(v5, &qword_3237E0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 136));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 568);
  v10 = *(_QWORD *)(v0 + 560);
  v11 = *(_QWORD *)(v0 + 552);
  v12 = *(_QWORD *)(v0 + 544);
  v13 = *(_QWORD *)(v0 + 536);
  v14 = *(_QWORD *)(v0 + 528);
  v15 = *(_QWORD *)(v0 + 504);
  v16 = *(_QWORD *)(v0 + 480);
  v18 = *(_QWORD *)(v0 + 456);
  v19 = *(_QWORD *)(v0 + 448);
  v20 = *(_QWORD *)(v0 + 440);
  v21 = *(_QWORD *)(v0 + 424);
  v22 = *(_QWORD *)(v0 + 400);
  v23 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16AA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_326B84);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_64780;
  return SeriesSeeAllPageIntentImplementation.perform(_:objectGraph:)(a1, a2, a3);
}

uint64_t sub_16AA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3237B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_16AAB0()
{
  return sub_648E0((unint64_t *)&unk_326B88, type metadata accessor for SeriesSeeAllPageIntent, (uint64_t)&protocol conformance descriptor for SeriesSeeAllPageIntent);
}

uint64_t sub_16AADC()
{
  return sub_648E0((unint64_t *)&qword_31FFA8, type metadata accessor for SeriesSeeAllPageIntent, (uint64_t)&protocol conformance descriptor for SeriesSeeAllPageIntent);
}

ValueMetadata *type metadata accessor for SeriesSeeAllPageIntentImplementation()
{
  return &type metadata for SeriesSeeAllPageIntentImplementation;
}

uint64_t sub_16AB18()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

_QWORD *sub_16AB3C(uint64_t a1)
{
  uint64_t v1;

  return sub_167C98(a1, v1 + 16);
}

uint64_t sub_16AB44()
{
  _QWORD *v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  if (v0[11])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_16AB7C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  int v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  int *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _BYTE v57[40];
  _OWORD v58[2];
  uint64_t v59;

  v52 = a2;
  v48 = a1;
  v56 = a3;
  v50 = type metadata accessor for ContentUnavailableComponentModel(0);
  __chkstk_darwin(v50);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v5);
  v55 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizerLookupStrategy(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for LocalizerDefaultValue(0, v9);
  v12 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SeriesType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for LocalizerRequest(0);
  v54 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v53 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v46 - v22;
  LODWORD(v52) = *v52;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v18, v48, v15, v21);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v24 == enum case for SeriesType.audiobook(_:))
  {
    LocalizerDefaultValue.init(stringLiteral:)("You’ve finished all available audiobooks in this series! Go to the series menu to change the view to All in Series, or Purchases.", 131, 0, v25);
    v26 = enum case for LocalizerLookupStrategy.default(_:);
    v27 = v7;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for LocalizerLookupStrategy.default(_:), v7);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000034, 0x8000000000273230, 0, v14, v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v28 = v49;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v49);
    v30 = v23;
  }
  else
  {
    v48 = v12;
    if (v24 == enum case for SeriesType.book(_:))
    {
      LocalizerDefaultValue.init(stringLiteral:)("You’ve finished all available books in this series! Go to the series menu to change the view to All in Series, or Purchases.", 126, 0, v25);
      v26 = enum case for LocalizerLookupStrategy.default(_:);
      v27 = v7;
      (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for LocalizerLookupStrategy.default(_:), v7);
      v30 = v23;
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000002FLL, 0x8000000000273300, 0, v14, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v12 = v48;
      v28 = v49;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v49);
    }
    else
    {
      static LocalizerRequest.verbatim(_:)(0xD000000000000013);
      v31 = v18;
      v30 = v23;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v31, v15);
      v26 = enum case for LocalizerLookupStrategy.default(_:);
      v27 = v7;
      v12 = v48;
      v28 = v49;
    }
  }
  v47 = v30;
  v32 = (char)v52;
  v33 = 0x4040000000000000;
  if ((_DWORD)v52)
    v33 = 0;
  v49 = v33;
  LocalizerDefaultValue.init(stringLiteral:)("All Caught Up", 13, 2, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v11, v26, v27);
  v34 = v53;
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000002FLL, 0x80000000002731D0, 0, v14, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v27);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v28);
  v36 = v54;
  v35 = (uint64_t)v55;
  v37 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v38 = v51;
  v37(v55, v30, v51);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v35, 0, 1, v38);
  v39 = (int *)v50;
  v59 = 0;
  memset(v58, 0, sizeof(v58));
  sub_5E1A4((uint64_t)v58, (uint64_t)v57, (uint64_t *)&unk_326210);
  _CodeAnyActionModel_OrNil.init(wrappedValue:)(v57);
  sub_5E09C((uint64_t)v58, (uint64_t *)&unk_326210);
  v40 = &v4[v39[11]];
  v41 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  *(_OWORD *)v4 = xmmword_261B60;
  v37(&v4[v39[5]], v34, v38);
  sub_5E1A4(v35, (uint64_t)&v4[v39[6]], &qword_3217B8);
  v42 = &v4[v39[7]];
  v43 = v49;
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = v43;
  v42[16] = v32;
  *(_QWORD *)&v58[0] = 0xD000000000000014;
  *((_QWORD *)&v58[0] + 1) = 0x8000000000273210;
  AnyHashable.init<A>(_:)(v58, &type metadata for String, &protocol witness table for String);
  sub_5E09C(v35, &qword_3217B8);
  v44 = *(void (**)(char *, uint64_t))(v36 + 8);
  v44(v34, v38);
  v4[v39[8]] = 0;
  sub_16B120((uint64_t)v4, v56);
  return ((uint64_t (*)(char *, uint64_t))v44)(v47, v38);
}

uint64_t sub_16B120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentUnavailableComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double PaginationController.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = swift_allocObject(v0, 72, 7);
  *(_WORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 18) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  return result;
}

uint64_t sub_16B19C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_16B1CC(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_16B208(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_16B244@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 17, v4, 0, 0);
  *a1 = *(_BYTE *)(v1 + 17);
  return result;
}

double PaginationController.init()()
{
  uint64_t v0;
  double result;

  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  return result;
}

uint64_t sub_16B2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109[3];
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v105 = a1;
  v100 = a2;
  v2 = sub_5C154(&qword_329740);
  __chkstk_darwin(v2);
  v101 = (uint64_t)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_5C154(&qword_31FE40);
  v102 = *(_QWORD *)(v99 - 8);
  v4 = *(_QWORD *)(v102 + 64);
  __chkstk_darwin(v99);
  __chkstk_darwin(v5);
  v7 = (char *)&v88 - v6;
  v8 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v8);
  v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_3200B8);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  __chkstk_darwin(v17);
  v19 = (char *)&v88 - v18;
  v20 = type metadata accessor for Logger(0);
  __chkstk_darwin(v20);
  __chkstk_darwin(v21);
  v25 = *(unsigned __int8 *)(v106 + 18);
  v103 = v26;
  v104 = v22;
  if (v25 != 1)
  {
    v40 = v23;
    static Logger.pageUpdate.getter(v22);
    v41 = sub_5E0D8(v105, (uint64_t)&v110);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v109[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = *((_QWORD *)&v111 + 1);
      v47 = v112;
      sub_66898(&v110, *((uint64_t *)&v111 + 1));
      v48 = dispatch thunk of IntentModel.kind.getter(v46, v47);
      v50 = v49;
      v108 = sub_57CD8(v48, v49, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v50);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v110);
      _os_log_impl(&dword_0, v42, v43, "The initial page intent result hasn't come back yet. Staging this intent to be re-dispatched later: %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v110);
    }

    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v40, v104);
    sub_5E0D8(v105, (uint64_t)&v110);
    v51 = v106;
    v52 = v106 + 24;
    swift_beginAccess(v106 + 24, v109, 33, 0);
    v53 = *(_QWORD *)(v51 + 48);
    v54 = *((_QWORD *)&v111 + 1);
    if (v53)
    {
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)v52);
      if (v54)
      {
LABEL_10:
        sub_5DC98(&v110, v52);
        return swift_endAccess(v109);
      }
    }
    else if (*((_QWORD *)&v111 + 1))
    {
      goto LABEL_10;
    }
    v55 = v111;
    *(_OWORD *)v52 = v110;
    *(_OWORD *)(v52 + 16) = v55;
    *(_QWORD *)(v52 + 32) = v112;
    return swift_endAccess(v109);
  }
  v91 = (char *)&v88 - v24;
  v88 = v13;
  v89 = v10;
  v92 = v16;
  v97 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = v19;
  v93 = v4;
  v94 = v15;
  v96 = v14;
  v90 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = v7;
  v27 = v106;
  result = swift_beginAccess(v106 + 17, v109, 1, 0);
  if (!*(_BYTE *)(v27 + 17))
  {
    v29 = v91;
    static Logger.pageUpdate.getter(result);
    v30 = sub_5E0D8(v105, (uint64_t)&v110);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v108 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = *((_QWORD *)&v111 + 1);
      v36 = v112;
      sub_66898(&v110, *((uint64_t *)&v111 + 1));
      v37 = dispatch thunk of IntentModel.kind.getter(v35, v36);
      v39 = v38;
      v107 = sub_57CD8(v37, v38, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v39);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v110);
      _os_log_impl(&dword_0, v31, v32, "Loading next page with intent: %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v110);
    }

    v56.n128_f64[0] = (*(double (**)(char *, uint64_t))(v103 + 8))(v29, v104);
    v57 = v105;
    v58 = v106;
    v59 = v95;
    v60 = v90;
    v61 = v89;
    v62 = v88;
    *(_BYTE *)(v106 + 17) = 1;
    static ActionMetrics.notInstrumented.getter(v56);
    sub_5E0D8(v57, (uint64_t)&v110);
    v63 = type metadata accessor for ClickData(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v61, 1, 1, v63);
    v64 = type metadata accessor for Page(0);
    v65 = type metadata accessor for Shelf(0);
    v66 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
    v67 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
    v68 = v98;
    PageUpdateAction.init(actionMetrics:instructionIntent:animated:clickData:)(v62, &v110, 1, v61, v64, v65, v66, v67);
    v69 = v99;
    v70 = v100;
    BaseObjectGraph.inject<A>(_:)(v59, v99, v99);
    v71 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v101, 1, 1, v71);
    v72 = v102;
    (*(void (**)(char *, _QWORD *, uint64_t))(v102 + 16))(v60, v59, v69);
    v73 = v94;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v97, v68, v96);
    sub_5E0D8(v105, (uint64_t)&v110);
    type metadata accessor for MainActor(0);
    swift_retain(v70);
    v74 = swift_retain(v58);
    v105 = static MainActor.shared.getter(v74);
    v75 = *(unsigned __int8 *)(v72 + 80);
    v76 = v72;
    v77 = (v75 + 32) & ~v75;
    v78 = *(unsigned __int8 *)(v73 + 80);
    v79 = (v93 + v78 + v77) & ~v78;
    v80 = (v92 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
    v81 = (v80 + 15) & 0xFFFFFFFFFFFFFFF8;
    v82 = (v81 + 47) & 0xFFFFFFFFFFFFFFF8;
    v83 = swift_allocObject(&unk_2EF6E0, v82 + 8, v75 | v78 | 7);
    *(_QWORD *)(v83 + 16) = v105;
    *(_QWORD *)(v83 + 24) = &protocol witness table for MainActor;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v83 + v77, v60, v69);
    v84 = v96;
    (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v83 + v79, v97, v96);
    *(_QWORD *)(v83 + v80) = v100;
    sub_5DC98(&v110, v83 + v81);
    v85 = v106;
    *(_QWORD *)(v83 + v82) = v106;
    v86 = sub_16CC20(v101, (uint64_t)&unk_326BA0, v83);
    v87 = *(_QWORD *)(v85 + 64);
    *(_QWORD *)(v85 + 64) = v86;
    swift_release(v87);
    (*(void (**)(_QWORD *, uint64_t))(v102 + 8))(v95, v69);
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v98, v84);
  }
  return result;
}

uint64_t sub_16BAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8[33] = a7;
  v8[34] = a8;
  v8[31] = a5;
  v8[32] = a6;
  v8[30] = a4;
  v9 = type metadata accessor for ContinuousClock(0);
  v8[35] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[36] = v10;
  v8[37] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContinuousClock.Instant(0);
  v8[38] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[39] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[40] = swift_task_alloc(v13);
  v8[41] = swift_task_alloc(v13);
  v14 = type metadata accessor for Logger(0);
  v8[42] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[43] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[44] = swift_task_alloc(v16);
  v8[45] = swift_task_alloc(v16);
  v8[46] = swift_task_alloc(v16);
  v8[47] = swift_task_alloc(v16);
  v17 = sub_5C154(&qword_320658);
  v8[48] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v8[49] = v18;
  v8[50] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ActionOutcome(0);
  v8[51] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v8[52] = v20;
  v8[53] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for MainActor(0);
  v8[54] = static MainActor.shared.getter(v21);
  v22 = dispatch thunk of Actor.unownedExecutor.getter(v21, &protocol witness table for MainActor);
  v8[55] = v22;
  v8[56] = v23;
  return swift_task_switch(sub_16BC28, v22, v23);
}

uint64_t sub_16BC28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = v0[49];
  v1 = v0[50];
  v3 = v0[48];
  v4 = v0[31];
  v5 = sub_5C154(&qword_3200B8);
  v0[5] = v5;
  v0[6] = sub_B02A0();
  v6 = sub_668BC(v0 + 2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v3);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
  v0[57] = v7;
  v8 = sub_5C154(&qword_31FE40);
  *v7 = v0;
  v7[1] = sub_16BD0C;
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v0[53], v0 + 2, v0[50], v0[32], v8);
}

uint64_t sub_16BD0C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[49] + 8))(v2[50], v2[48]);
    v4 = v2[55];
    v5 = v2[56];
    v6 = sub_16C3A0;
  }
  else
  {
    v8 = v2[52];
    v7 = v2[53];
    v9 = v2[51];
    (*(void (**)(_QWORD, _QWORD))(v2[49] + 8))(v2[50], v2[48]);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v2 + 2);
    v4 = v2[55];
    v5 = v2[56];
    v6 = sub_16BDC0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_16BDC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 264);
  static Logger.pageUpdate.getter(a1);
  v3 = sub_5E0D8(v2, v1 + 96);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v37 = *(_QWORD *)(v1 + 344);
    v38 = *(_QWORD *)(v1 + 336);
    v39 = *(_QWORD *)(v1 + 376);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v40 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = *(_QWORD *)(v1 + 120);
    v8 = *(_QWORD *)(v1 + 128);
    sub_66898((_QWORD *)(v1 + 96), v9);
    v10 = dispatch thunk of IntentModel.kind.getter(v9, v8);
    v12 = v11;
    *(_QWORD *)(v1 + 232) = sub_57CD8(v10, v11, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 232, v1 + 240, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v12);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 96));
    _os_log_impl(&dword_0, v4, v5, "Finished loading next page with intent: %s)", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8);
    v14 = v13(v39, v38);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 376);
    v16 = *(_QWORD *)(v1 + 336);
    v17 = *(_QWORD *)(v1 + 344);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 96));

    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    v14 = v13(v15, v16);
  }
  v18 = *(_QWORD *)(v1 + 464);
  *(_QWORD *)(v1 + 472) = v13;
  static Task<>.checkCancellation()(v14);
  if (v18)
  {
    swift_release(*(_QWORD *)(v1 + 432));
    v19 = *(_QWORD *)(v1 + 400);
    v21 = *(_QWORD *)(v1 + 368);
    v20 = *(_QWORD *)(v1 + 376);
    v23 = *(_QWORD *)(v1 + 352);
    v22 = *(_QWORD *)(v1 + 360);
    v25 = *(_QWORD *)(v1 + 320);
    v24 = *(_QWORD *)(v1 + 328);
    v26 = *(_QWORD *)(v1 + 296);
    swift_task_dealloc(*(_QWORD *)(v1 + 424));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v28 = *(_QWORD *)(v1 + 320);
    v29 = *(_QWORD *)(v1 + 304);
    v30 = *(_QWORD *)(v1 + 312);
    v31 = *(_QWORD *)(v1 + 272);
    v32 = swift_beginAccess(v31 + 17, v1 + 136, 1, 0);
    *(_BYTE *)(v31 + 17) = 2;
    static ContinuousClock.Instant.now.getter(v32);
    ContinuousClock.Instant.advanced(by:)(1000000000000000000, 0);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
    *(_QWORD *)(v1 + 480) = v33;
    v34 = v33(v28, v29);
    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 184) = 0;
    *(_BYTE *)(v1 + 200) = 1;
    static Clock<>.continuous.getter(v34);
    v35 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(_QWORD *)(v1 + 488) = v35;
    v36 = sub_648E0(&qword_326D00, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
    *v35 = v1;
    v35[1] = sub_16C0F8;
    return static Task<>.sleep<A>(until:tolerance:clock:)(*(_QWORD *)(v1 + 328), v1 + 184, *(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 280), v36);
  }
}

uint64_t sub_16C0F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[60];
  if (v0)
  {
    v5 = v2[41];
    v6 = v2[38];
    (*(void (**)(_QWORD, _QWORD))(v2[36] + 8))(v2[37], v2[35]);
    v4(v5, v6);
    v7 = v2[55];
    v8 = v2[56];
    v9 = sub_16C7A0;
  }
  else
  {
    v10 = v2[41];
    v11 = v2[38];
    (*(void (**)(_QWORD, _QWORD))(v2[36] + 8))(v2[37], v2[35]);
    v4(v10, v11);
    v7 = v2[55];
    v8 = v2[56];
    v9 = sub_16C1AC;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_16C1AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = swift_release(v0[54]);
  v2 = v0[62];
  v3 = static Task<>.checkCancellation()(v1);
  if (v2)
  {
    v4 = v0[50];
    v6 = v0[46];
    v5 = v0[47];
    v8 = v0[44];
    v7 = v0[45];
    v10 = v0[40];
    v9 = v0[41];
    v11 = v0[37];
    swift_task_dealloc(v0[53]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    v12 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v13 = static Logger.pageUpdate.getter(v3);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "PaginationController reset to idle", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = (void (*)(uint64_t, uint64_t))v0[59];
    v18 = v0[53];
    v19 = v0[50];
    v21 = v0[46];
    v20 = v0[47];
    v26 = v0[45];
    v27 = v0[44];
    v22 = v0[42];
    v28 = v0[41];
    v29 = v0[40];
    v30 = v0[37];
    v23 = v0[34];

    v17(v21, v22);
    *(_BYTE *)(v23 + 17) = 0;
    v24 = *(_QWORD *)(v23 + 64);
    *(_QWORD *)(v23 + 64) = 0;
    swift_release(v24);
    swift_beginAccess(v23 + 16, v0 + 20, 1, 0);
    *(_BYTE *)(v23 + 16) = 0;
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    v12 = (uint64_t (*)(void))v0[1];
  }
  return v12();
}

uint64_t sub_16C3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  static Logger.pageUpdate.getter(v3);
  sub_5E0D8(v2, v0 + 56);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 464);
    v34 = *(_QWORD *)(v0 + 344);
    v35 = *(_QWORD *)(v0 + 336);
    v36 = *(_QWORD *)(v0 + 360);
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v37 = v33;
    *(_DWORD *)v8 = 136315394;
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 88);
    sub_66898((_QWORD *)(v0 + 56), v10);
    v12 = dispatch thunk of IntentModel.kind.getter(v10, v11);
    v14 = v13;
    *(_QWORD *)(v0 + 208) = sub_57CD8(v12, v13, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v14);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v7);
    v15 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 216) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v8 + 14, v8 + 22);
    *v9 = v15;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v5, v6, "Failed to load next page with intent: %s, error: %@", (uint8_t *)v8, 0x16u);
    v16 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v9, 1, v16);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8);
    v18 = v17(v36, v35);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 464);
    v20 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 336);
    v22 = *(_QWORD *)(v0 + 344);
    swift_errorRelease(v19);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
    swift_errorRelease(v19);
    swift_errorRelease(v19);

    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
    v18 = v17(v20, v21);
  }
  *(_QWORD *)(v0 + 472) = v17;
  static Task<>.checkCancellation()(v18);
  v23 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 304);
  v25 = *(_QWORD *)(v0 + 312);
  v26 = *(_QWORD *)(v0 + 272);
  v27 = swift_beginAccess(v26 + 17, v0 + 136, 1, 0);
  *(_BYTE *)(v26 + 17) = 2;
  static ContinuousClock.Instant.now.getter(v27);
  ContinuousClock.Instant.advanced(by:)(1000000000000000000, 0);
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8);
  *(_QWORD *)(v0 + 480) = v28;
  v29 = v28(v23, v24);
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_BYTE *)(v0 + 200) = 1;
  static Clock<>.continuous.getter(v29);
  v30 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
  *(_QWORD *)(v0 + 488) = v30;
  v31 = sub_648E0(&qword_326D00, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  *v30 = v0;
  v30[1] = sub_16C0F8;
  return static Task<>.sleep<A>(until:tolerance:clock:)(*(_QWORD *)(v0 + 328), v0 + 184, *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280), v31);
}

uint64_t sub_16C7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 496);
  v2 = swift_release(*(_QWORD *)(v0 + 432));
  static Logger.pageUpdate.getter(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 496);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 224) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl(&dword_0, v4, v5, "Failed to wait for 1s of settle-down time: %@", v7, 0xCu);
    v10 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 496);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v12 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 472))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
  v13 = static Task<>.checkCancellation()(v12);
  v14 = static Logger.pageUpdate.getter(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "PaginationController reset to idle", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
  v19 = *(_QWORD *)(v0 + 424);
  v20 = *(_QWORD *)(v0 + 400);
  v22 = *(_QWORD *)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 376);
  v27 = *(_QWORD *)(v0 + 360);
  v28 = *(_QWORD *)(v0 + 352);
  v23 = *(_QWORD *)(v0 + 336);
  v29 = *(_QWORD *)(v0 + 328);
  v30 = *(_QWORD *)(v0 + 320);
  v31 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 272);

  v18(v22, v23);
  *(_BYTE *)(v24 + 17) = 0;
  v25 = *(_QWORD *)(v24 + 64);
  *(_QWORD *)(v24 + 64) = 0;
  swift_release(v25);
  swift_beginAccess(v24 + 16, v0 + 160, 1, 0);
  *(_BYTE *)(v24 + 16) = 0;
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_16CAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_16D6CC(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = sub_5C154(&qword_31FE28);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, v16, a2, a3);
}

uint64_t sub_16CC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_16D6CC(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

void sub_16CD4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  __int128 *v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[5];
  _BYTE v36[24];
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 18) & 1) != 0)
    return;
  *(_BYTE *)(v1 + 18) = 1;
  v8 = (__int128 *)(v1 + 24);
  swift_beginAccess(v2 + 24, v36, 0, 0);
  if (*(_QWORD *)(v2 + 48))
  {
    sub_5E0D8(v2 + 24, (uint64_t)&v37);
  }
  else
  {
    v9 = *(_OWORD *)(v2 + 40);
    v37 = *v8;
    v38 = v9;
    v39 = *(_QWORD *)(v2 + 56);
  }
  swift_beginAccess(v2 + 24, v35, 33, 0);
  if (*(_QWORD *)(v2 + 48))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 56) = 0;
  *v8 = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  swift_endAccess(v35);
  if (*((_QWORD *)&v38 + 1))
  {
    sub_5E0D8((uint64_t)&v37, (uint64_t)&v32);
    if (*((_QWORD *)&v33 + 1))
    {
      v10 = sub_5DC98(&v32, (uint64_t)v35);
      static Logger.pageUpdate.getter(v10);
      v11 = sub_5E0D8((uint64_t)v35, (uint64_t)&v32);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v29 = v12;
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v31 = v28;
        v27 = v14;
        *(_DWORD *)v14 = 136315138;
        v15 = v14 + 12;
        v26 = v14 + 4;
        v16 = a1;
        v17 = *((_QWORD *)&v33 + 1);
        v18 = v34;
        sub_66898(&v32, *((uint64_t *)&v33 + 1));
        v19 = v17;
        a1 = v16;
        v20 = dispatch thunk of IntentModel.kind.getter(v19, v18);
        v22 = v21;
        v30 = sub_57CD8(v20, v21, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v26, v15);
        swift_bridgeObjectRelease(v22);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32);
        v12 = v29;
        v23 = v27;
        _os_log_impl(&dword_0, v29, v13, "Enabling pagination by re-dispatching the staged intent: %s", v27, 0xCu);
        v24 = v28;
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_16B2A4((uint64_t)v35, a1);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
      if (*((_QWORD *)&v38 + 1))
      {
        v25 = &v37;
        goto LABEL_18;
      }
      return;
    }
  }
  else
  {
    v32 = v37;
    v33 = (unint64_t)v38;
    v34 = v39;
  }
  if (*((_QWORD *)&v38 + 1))
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v37);
    if (*((_QWORD *)&v33 + 1))
    {
      v25 = &v32;
LABEL_18:
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
    }
  }
}

uint64_t sub_16D064(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[24];
  _BYTE v17[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = static Logger.pageUpdate.getter(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "Resetting paginationController to initial state and canceling any pagination task.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v13 = *(_QWORD *)(v2 + 64);
  if (v13)
  {
    swift_retain(*(_QWORD *)(v2 + 64));
    sub_5C154((uint64_t *)&unk_321CD0);
    Task.cancel()();
    swift_release(v13);
    v14 = *(_QWORD *)(v2 + 64);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(v2 + 64) = 0;
  swift_release(v14);
  swift_beginAccess(v2 + 17, v17, 1, 0);
  *(_BYTE *)(v2 + 17) = 0;
  result = swift_beginAccess(v2 + 16, v16, 1, 0);
  *(_BYTE *)(v2 + 16) = 0;
  if ((a1 & 1) != 0)
    *(_BYTE *)(v2 + 18) = 0;
  return result;
}

_QWORD *PaginationController.deinit()
{
  _QWORD *v0;

  if (v0[6])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 3);
  swift_release(v0[8]);
  return v0;
}

uint64_t PaginationController.__deallocating_deinit()
{
  _QWORD *v0;

  if (v0[6])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 3);
  swift_release(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_16D250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v1 = sub_5C154(&qword_31FE40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_5C154(&qword_3200B8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 47) & 0xFFFFFFFFFFFFFFF8;
  v15 = v10;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v11));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v12));
  swift_release(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v13 + 8, v15);
}

uint64_t sub_16D350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(sub_5C154(&qword_31FE40) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_5C154(&qword_3200B8) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = v1 + v5;
  v14 = *(_QWORD *)(v1 + v9);
  v15 = v1 + v8;
  v16 = v1 + v10;
  v17 = *(_QWORD *)(v1 + ((v10 + 47) & 0xFFFFFFFFFFFFF8));
  v18 = (_QWORD *)swift_task_alloc(dword_326B9C);
  *(_QWORD *)(v2 + 16) = v18;
  *v18 = v2;
  v18[1] = sub_64780;
  return sub_16BAB0(a1, v11, v12, v13, v15, v14, v16, v17);
}

unint64_t sub_16D450()
{
  unint64_t result;

  result = qword_326BA8;
  if (!qword_326BA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationController.State, &type metadata for PaginationController.State);
    atomic_store(result, (unint64_t *)&qword_326BA8);
  }
  return result;
}

uint64_t sub_16D494@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 16, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_16D4D8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess(*a2 + 16, v5, 1, 0);
  *(_BYTE *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_16D518@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 17, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 17);
  return result;
}

uint64_t sub_16D55C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess(*a2 + 17, v5, 1, 0);
  *(_BYTE *)(v3 + 17) = v2;
  return result;
}

uint64_t type metadata accessor for PaginationController()
{
  return objc_opt_self(_TtC11BookStoreUI20PaginationController);
}

uint64_t method lookup function for PaginationController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PaginationController);
}

uint64_t dispatch thunk of PaginationController.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PaginationController.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of PaginationController.loadNextPageIfNeeded(with:asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of PaginationController.enablePagination(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PaginationController.reset(shouldResetAllowPagination:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t storeEnumTagSinglePayload for PaginationController.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_16D64C + 4 * byte_261B75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_16D680 + 4 * byte_261B70[v4]))();
}

uint64_t sub_16D680(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_16D688(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16D690);
  return result;
}

uint64_t sub_16D69C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x16D6A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_16D6A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16D6B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PaginationController.State()
{
  return &type metadata for PaginationController.State;
}

uint64_t sub_16D6CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_329740);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PageAlert.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = type metadata accessor for BooksAlertAction(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v4(a1, 1, 1, v2);
  sub_5E09C(a1, &qword_322FA0);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(a1, 1, 1, v2);
}

BOOL sub_16D784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  v1 = sub_5C154(&qword_322FA0);
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(v0, (uint64_t)v3, &qword_322FA0);
  v4 = type metadata accessor for BooksAlertAction(0);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  sub_5E09C((uint64_t)v3, &qword_322FA0);
  return v5;
}

uint64_t PageAlertViewModifier.init(alert:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = (int *)type metadata accessor for PageAlertViewModifier(0);
  v5 = a2 + v4[5];
  *(_QWORD *)v5 = swift_getKeyPath(&unk_261C60);
  *(_BYTE *)(v5 + 8) = 0;
  v6 = a2 + v4[6];
  *(_QWORD *)v6 = swift_getKeyPath(&unk_261C90);
  *(_BYTE *)(v6 + 40) = 0;
  v7 = (_QWORD *)(a2 + v4[7]);
  *v7 = swift_getKeyPath(&unk_261CC0);
  v8 = sub_5C154(&qword_326110);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  return sub_66F14(a1, a2, &qword_3230B8);
}

uint64_t type metadata accessor for PageAlertViewModifier(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_326E38, (uint64_t)&nominal type descriptor for PageAlertViewModifier);
}

uint64_t PageAlertViewModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[4];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  unint64_t v101;

  v3 = v2;
  v88 = a1;
  v96 = a2;
  v4 = type metadata accessor for PageAlertViewModifier(0);
  v93 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v94 = v5;
  v95 = (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_322FA0);
  v90 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v92 = (uint64_t)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v89 = (uint64_t)&v75 - v9;
  v91 = v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v75 - v12;
  v14 = sub_5C154(&qword_3230B8);
  __chkstk_darwin(v14);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BooksAlertAction(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PageAlert(0);
  __chkstk_darwin(v21);
  v81 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v75 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v75 - v27;
  v29 = sub_5C154(&qword_326D08);
  v86 = *(_QWORD *)(v29 - 8);
  v87 = v29;
  __chkstk_darwin(v29);
  v85 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_5C154(&qword_326D10);
  v31 = __chkstk_darwin(v83);
  v84 = (char *)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.wrappedValue.getter(v14, v31);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v34 = v33(v28, 1, v17);
  v82 = v17;
  v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
  if (v34)
  {
    sub_6685C((uint64_t)v28, type metadata accessor for PageAlert);
LABEL_4:
    swift_bridgeObjectRelease(0);
    v36 = 0;
    v38 = 0xE000000000000000;
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v28, v17);
  v35 = sub_6685C((uint64_t)v28, type metadata accessor for PageAlert);
  v36 = BooksAlertAction.title.getter(v35);
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!v38)
    goto LABEL_4;
LABEL_5:
  v100 = v36;
  v101 = v38;
  Binding.projectedValue.getter(v14);
  KeyPath = swift_getKeyPath(&unk_261CF0);
  Binding.subscript.getter(KeyPath, v14);
  swift_release(KeyPath);
  sub_5E09C((uint64_t)v16, &qword_3230B8);
  v40 = v98;
  v77 = v97;
  v78 = v99;
  Binding.wrappedValue.getter(v14, v41);
  v42 = sub_66F14((uint64_t)v25, (uint64_t)v13, &qword_322FA0);
  v75 = (uint64_t)&v75;
  __chkstk_darwin(v42);
  v79 = v25;
  v43 = v3;
  v44 = sub_5C154(&qword_326D18);
  v76 = v14;
  v45 = v44;
  v46 = sub_5C154(&qword_326D20);
  v47 = sub_5C154(&qword_321D18);
  v48 = sub_67060(&qword_326D28, &qword_326D18, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v49 = sub_668F8();
  v74[2] = sub_16F418();
  v74[3] = sub_16F494();
  v74[0] = v48;
  v74[1] = v49;
  v50 = v82;
  v73 = v47;
  v72 = v46;
  v51 = v85;
  v52 = v77;
  ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD *, uint64_t (*)@<X0>(uint64_t *@<X8>), _QWORD, uint64_t, void *, uint64_t, uint64_t, uint64_t))View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:))(&v100, v77, v40, v78, v13, sub_16F410, v74, sub_16EB84, 0, v45, &type metadata for String, v72, v73, v82);
  swift_release(v40);
  swift_release(v52);
  sub_5E09C((uint64_t)v13, &qword_322FA0);
  v53 = swift_bridgeObjectRelease(v101);
  v54 = (uint64_t)v81;
  v55 = v76;
  Binding.wrappedValue.getter(v76, v53);
  v56 = v89;
  sub_5E1A4(v54, v89, &qword_322FA0);
  LOBYTE(v50) = v80(v56, 1, v50) != 1;
  sub_5E09C(v56, &qword_322FA0);
  sub_6685C(v54, type metadata accessor for PageAlert);
  v57 = (uint64_t)v79;
  Binding.wrappedValue.getter(v55, v58);
  sub_66F14(v57, (uint64_t)v13, &qword_322FA0);
  v59 = v95;
  sub_16F4F0(v43, v95);
  v60 = (uint64_t)v13;
  v61 = v92;
  sub_66F14(v60, v92, &qword_322FA0);
  v62 = *(unsigned __int8 *)(v93 + 80);
  v63 = (v62 + 16) & ~v62;
  v64 = *(unsigned __int8 *)(v90 + 80);
  v65 = (v94 + v64 + v63) & ~v64;
  v66 = swift_allocObject(&unk_2EF7F0, v65 + v91, v62 | v64 | 7);
  sub_16F6E8(v59, v66 + v63);
  sub_66F14(v61, v66 + v65, &qword_322FA0);
  v68 = v86;
  v67 = v87;
  v69 = (uint64_t)v84;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v84, v51, v87);
  v70 = v69 + *(int *)(v83 + 36);
  *(_BYTE *)v70 = v50;
  *(_QWORD *)(v70 + 8) = sub_16F72C;
  *(_QWORD *)(v70 + 16) = v66;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v51, v67);
  return sub_66F14(v69, v96, &qword_326D10);
}

uint64_t sub_16DF3C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = sub_5C154(&qword_322FA0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(a1, (uint64_t)v6, &qword_322FA0);
  v7 = type metadata accessor for BooksAlertAction(0);
  LOBYTE(a1) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1;
  result = sub_5E09C((uint64_t)v6, &qword_322FA0);
  *a2 = a1;
  return result;
}

_BYTE *sub_16DFEC(_BYTE *result, uint64_t a2)
{
  uint64_t v3;

  if ((*result & 1) == 0)
  {
    sub_5E09C(a2, &qword_322FA0);
    v3 = type metadata accessor for BooksAlertAction(0);
    return (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
  }
  return result;
}

uint64_t sub_16E04C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a2;
  v30 = a3;
  v26 = type metadata accessor for BooksAlertAction(0);
  v4 = *(_QWORD *)(v26 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v26);
  v6 = type metadata accessor for PageAlertViewModifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_5C154(&qword_326EB0);
  v10 = __chkstk_darwin(v29);
  v28 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = BooksAlertAction.buttons.getter(v10);
  v12 = sub_5C154(&qword_326EB8);
  v13 = sub_67060(&qword_326EC0, &qword_326EB8, (uint64_t)&protocol conformance descriptor for [A]);
  IndexedRandomAccessCollection.init(_:)(&v31, v12, v13);
  KeyPath = swift_getKeyPath(&unk_261DC8);
  sub_16F4F0(v27, (uint64_t)v9);
  v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v26);
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = *(unsigned __int8 *)(v4 + 80);
  v19 = (v8 + v18 + v17) & ~v18;
  v20 = swift_allocObject(&unk_2EF818, v19 + v5, v16 | v18 | 7);
  sub_16F6E8((uint64_t)v9, v20 + v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v20 + v19, (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  v21 = swift_allocObject(&unk_2EF840, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_170DF4;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = sub_5C154(&qword_326D40);
  v23 = sub_67060(&qword_326EC8, &qword_326EB0, (uint64_t)&protocol conformance descriptor for IndexedRandomAccessCollection<A>);
  v24 = sub_67060(&qword_326D38, &qword_326D40, (uint64_t)&protocol conformance descriptor for Button<A>);
  return ForEach<>.init(_:id:content:)(v28, KeyPath, sub_170E98, v21, v29, v22, v23, &protocol witness table for Int, v24);
}

uint64_t sub_16E2BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  _QWORD v71[3];

  v54 = a2;
  v55 = a3;
  v57 = type metadata accessor for BooksAlertAction.Button(0);
  v67 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v56 = v6;
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BooksAlertAction(0);
  v66 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v64 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = v9;
  v10 = type metadata accessor for PageAlertViewModifier(0);
  v58 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v60 = v12;
  v62 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ButtonRole(0, v11);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_3261F0);
  __chkstk_darwin(v17);
  v69 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_5C154(&qword_326D40);
  v61 = *(_QWORD *)(v63 - 8);
  v19 = __chkstk_darwin(v63);
  v59 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71[0] = BooksAlertAction.Button.title.getter(v19);
  v71[1] = v21;
  v22 = a1;
  v23 = BooksAlertAction.Button.role.getter();
  v68 = a4;
  v70 = v7;
  if (v24)
  {
    v25 = v23;
    v26 = v24;
    v27 = v8;
    v29 = static BooksAlertAction.ButtonRole.cancel.getter();
    v30 = v28;
    if (v25 == v29 && v26 == v28)
    {
      swift_bridgeObjectRelease(v26);
      v31 = swift_bridgeObjectRelease(v30);
    }
    else
    {
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v29, v28, 0);
      swift_bridgeObjectRelease(v26);
      v31 = swift_bridgeObjectRelease(v30);
      if ((v39 & 1) == 0)
      {
        static ButtonRole.destructive.getter(v31);
        goto LABEL_9;
      }
    }
    static ButtonRole.cancel.getter(v31);
LABEL_9:
    v34 = v57;
    v36 = v55;
    v38 = v69;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v69, v16, v13);
    v32 = 0;
    v33 = v56;
    v35 = v22;
    v37 = v54;
    goto LABEL_10;
  }
  v27 = v8;
  v32 = 1;
  v33 = v56;
  v34 = v57;
  v35 = v22;
  v37 = v54;
  v36 = v55;
  v38 = v69;
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v38, v32, 1, v13);
  v40 = v62;
  sub_16F4F0(v37, v62);
  v41 = v66;
  v42 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v64, v36, v27);
  v43 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v70, v35, v34);
  v44 = *(unsigned __int8 *)(v58 + 80);
  v45 = (v44 + 16) & ~v44;
  v46 = *(unsigned __int8 *)(v41 + 80);
  v47 = (v60 + v46 + v45) & ~v46;
  v48 = *(unsigned __int8 *)(v43 + 80);
  v49 = (v65 + v48 + v47) & ~v48;
  v50 = swift_allocObject(&unk_2EF868, v49 + v33, v44 | v46 | v48 | 7);
  sub_16F6E8(v40, v50 + v45);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v50 + v47, v42, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v50 + v49, v70, v34);
  v51 = sub_668F8();
  v52 = v59;
  Button<>.init<A>(_:role:action:)(v71, v69, sub_1710C8, v50, &type metadata for String, v51);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 32))(v68, v52, v63);
}

uint64_t sub_16E690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[6];

  v51 = a3;
  v4 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DialogActionData(0);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DialogData(0);
  v45 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for PageAlertViewModifier(0);
  v11 = a1 + *(int *)(v49 + 20);
  v12 = *(id *)v11;
  v13 = *(_BYTE *)(v11 + 8);
  sub_AAFF4(*(id *)v11, v13);
  v14 = (void *)sub_77EB0(v12, v13);
  sub_794D8(v12, v13);
  v50 = a1;
  v48 = v6;
  if (v14)
  {
    BooksAlertAction.dialogData.getter();
    v15 = sub_5C154((uint64_t *)&unk_3224F0);
    v16 = type metadata accessor for DataEventTrait(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned __int8 *)(v17 + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject(v15, v19 + *(_QWORD *)(v17 + 72), v18 | 7);
    *(_OWORD *)(v20 + 16) = xmmword_258070;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v20 + v19, enum case for DataEventTrait.onlyOnce(_:), v16);
    sub_648E0(&qword_324D68, (uint64_t (*)(uint64_t))&type metadata accessor for DialogData, (uint64_t)&protocol conformance descriptor for DialogData);
    sub_648E0(&qword_326EA8, (uint64_t (*)(uint64_t))&type metadata accessor for DialogData, (uint64_t)&protocol conformance descriptor for DialogData);
    BATracker.push<A>(data:traits:file:line:)(v10, v20, 0xD000000000000073);

    v21 = swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v10, v8, v21);
    v12 = *(id *)v11;
    v13 = *(_BYTE *)(v11 + 8);
  }
  sub_AAFF4(v12, v13);
  v22 = (void *)sub_77EB0(v12, v13);
  sub_794D8(v12, v13);
  if (v22)
  {
    v23 = v46;
    BooksAlertAction.Button.dialogActionData.getter();
    v24 = sub_5C154((uint64_t *)&unk_3224F0);
    v25 = type metadata accessor for DataEventTrait(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned __int8 *)(v26 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = swift_allocObject(v24, v28 + *(_QWORD *)(v26 + 72), v27 | 7);
    *(_OWORD *)(v29 + 16) = xmmword_258070;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v29 + v28, enum case for DataEventTrait.onlyOnce(_:), v25);
    sub_648E0(&qword_324D60, (uint64_t (*)(uint64_t))&type metadata accessor for DialogActionData, (uint64_t)&protocol conformance descriptor for DialogActionData);
    sub_648E0(&qword_326ED8, (uint64_t (*)(uint64_t))&type metadata accessor for DialogActionData, (uint64_t)&protocol conformance descriptor for DialogActionData);
    v30 = v48;
    BATracker.push<A>(data:traits:file:line:)(v23, v29, 0xD000000000000073);

    v31 = swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v23, v30, v31);
    v12 = *(id *)v11;
    v13 = *(_BYTE *)(v11 + 8);
  }
  sub_AAFF4(v12, v13);
  v32 = (void *)sub_77EB0(v12, v13);
  sub_794D8(v12, v13);
  if (v32)
  {
    v34 = type metadata accessor for DialogActionEvent(0, v33);
    v35 = sub_648E0(&qword_324D70, (uint64_t (*)(uint64_t))&type metadata accessor for DialogActionEvent, (uint64_t)&protocol conformance descriptor for DialogActionEvent);
    BATracker.submit<A>(_:completion:)(v34, 0, 0, v34, v35);

  }
  BooksAlertAction.Button.action.getter(&v52);
  if (v53)
  {
    sub_5DC98(&v52, (uint64_t)v55);
    sub_76AD4((uint64_t)&v52);
    v36 = v53;
    if (v53)
    {
      v37 = v54;
      sub_66898(&v52, v53);
      v38 = v42;
      sub_76B00(v42);
      PerformAction.callAsFunction(_:withMetrics:)(v55, v38, v36, v37);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v55);
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v52);
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v55);
    v40 = &qword_326190;
  }
  else
  {
    v40 = (uint64_t *)&unk_326210;
  }
  return sub_5E09C((uint64_t)&v52, v40);
}

uint64_t sub_16EB84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = BooksAlertAction.message.getter();
  if (v3)
  {
    v9[0] = v2;
    v9[1] = v3;
    v4 = sub_668F8();
    result = Text.init<A>(_:)(v9, &type metadata for String, v4);
    v8 = v7 & 1;
  }
  else
  {
    result = 0;
    v8 = 0;
    v6 = 0;
  }
  *a1 = result;
  a1[1] = v3;
  a1[2] = v8;
  a1[3] = v6;
  return result;
}

void sub_16EBEC(void (**a1)(uint64_t, uint64_t, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void (**v5)(uint64_t, uint64_t, __n128);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  id v32;
  char v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(uint64_t, uint64_t, __n128);
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (**v74)(uint64_t, uint64_t, __n128);

  v72 = a3;
  v73 = a2;
  v74 = a1;
  v3 = sub_5C154(&qword_322410);
  __chkstk_darwin(v3);
  v71 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for LinkData(0);
  v5 = *(void (***)(uint64_t, uint64_t, __n128))(v70 - 8);
  __chkstk_darwin(v70);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DialogData(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_322FA0);
  __chkstk_darwin(v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BooksAlertAction(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)v74 == 1)
  {
    v22 = v73 + *(int *)(type metadata accessor for PageAlertViewModifier(0) + 20);
    v23 = *(id *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    sub_AAFF4(*(id *)v22, v24);
    v25 = (void *)sub_77EB0(v23, v24);
    sub_794D8(v23, v24);
    if (v25)
    {
      v26 = type metadata accessor for DialogExposureEvent(0);
      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 1, 1, v27);
      v28 = sub_648E0(&qword_326EA0, (uint64_t (*)(uint64_t))&type metadata accessor for DialogExposureEvent, (uint64_t)&protocol conformance descriptor for DialogExposureEvent);
      BATracker.time<A>(_:startTime:)(v26, v21, v26, v28);

      sub_5E09C((uint64_t)v21, &qword_31F128);
    }
  }
  else
  {
    v29 = v73;
    v65 = v11;
    v66 = v9;
    v67 = v8;
    v68 = v7;
    v74 = v5;
    v69 = v18;
    sub_5E1A4(v72, (uint64_t)v14, &qword_322FA0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      sub_5E09C((uint64_t)v14, &qword_322FA0);
    }
    else
    {
      v72 = v16;
      v30 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      v64 = v15;
      v30(v69, v14, v15);
      v31 = v29 + *(int *)(type metadata accessor for PageAlertViewModifier(0) + 20);
      v32 = *(id *)v31;
      v33 = *(_BYTE *)(v31 + 8);
      sub_AAFF4(*(id *)v31, v33);
      v34 = (void *)sub_77EB0(v32, v33);
      sub_794D8(v32, v33);
      if (v34)
      {
        v35 = v65;
        BooksAlertAction.dialogData.getter();
        v36 = sub_5C154((uint64_t *)&unk_3224F0);
        v37 = type metadata accessor for DataEventTrait(0);
        v38 = *(_QWORD *)(v37 - 8);
        v39 = *(unsigned __int8 *)(v38 + 80);
        v40 = (v39 + 32) & ~v39;
        v41 = swift_allocObject(v36, v40 + *(_QWORD *)(v38 + 72), v39 | 7);
        *(_OWORD *)(v41 + 16) = xmmword_258070;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v38 + 104))(v41 + v40, enum case for DataEventTrait.onlyOnce(_:), v37);
        sub_648E0(&qword_324D68, (uint64_t (*)(uint64_t))&type metadata accessor for DialogData, (uint64_t)&protocol conformance descriptor for DialogData);
        sub_648E0(&qword_326EA8, (uint64_t (*)(uint64_t))&type metadata accessor for DialogData, (uint64_t)&protocol conformance descriptor for DialogData);
        v42 = v67;
        BATracker.push<A>(data:traits:file:line:)(v35, v41, 0xD000000000000073);

        v43 = swift_bridgeObjectRelease(v41);
        (*(void (**)(char *, uint64_t, __n128))(v66 + 8))(v35, v42, v43);
        v32 = *(id *)v31;
        v44 = v31;
        v33 = *(_BYTE *)(v31 + 8);
      }
      else
      {
        v44 = v31;
      }
      v46 = v70;
      v45 = (uint64_t)v71;
      v47 = v74;
      v48 = (uint64_t)v68;
      sub_AAFF4(v32, v33);
      v49 = (void *)sub_77EB0(v32, v33);
      sub_794D8(v32, v33);
      v50 = v69;
      if (v49)
      {
        BooksAlertAction.actionOrigin.getter();
        v51 = type metadata accessor for ActionOrigin(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v45, 0, 1, v51);
        LinkData.init(actionOrigin:)(v45, v48);
        v52 = sub_5C154((uint64_t *)&unk_3224F0);
        v53 = type metadata accessor for DataEventTrait(0);
        v54 = *(_QWORD *)(v53 - 8);
        v55 = *(unsigned __int8 *)(v54 + 80);
        v56 = (v55 + 32) & ~v55;
        v57 = swift_allocObject(v52, v56 + *(_QWORD *)(v54 + 72), v55 | 7);
        *(_OWORD *)(v57 + 16) = xmmword_258070;
        v58 = v57 + v56;
        v50 = v69;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v54 + 104))(v58, enum case for DataEventTrait.onlyOnce(_:), v53);
        sub_648E0(&qword_3237A8, (uint64_t (*)(uint64_t))&type metadata accessor for LinkData, (uint64_t)&protocol conformance descriptor for LinkData);
        sub_648E0(&qword_3237B0, (uint64_t (*)(uint64_t))&type metadata accessor for LinkData, (uint64_t)&protocol conformance descriptor for LinkData);
        BATracker.push<A>(data:traits:file:line:)(v48, v57, 0xD000000000000073);

        v59 = swift_bridgeObjectRelease(v57);
        v47[1](v48, v46, v59);
        v32 = *(id *)v44;
        v33 = *(_BYTE *)(v44 + 8);
      }
      sub_AAFF4(v32, v33);
      v60 = (void *)sub_77EB0(v32, v33);
      sub_794D8(v32, v33);
      if (v60)
      {
        v61 = type metadata accessor for DialogExposureEvent(0);
        v62 = sub_648E0(&qword_326EA0, (uint64_t (*)(uint64_t))&type metadata accessor for DialogExposureEvent, (uint64_t)&protocol conformance descriptor for DialogExposureEvent);
        BATracker.submit<A>(_:completion:)(v61, 0, 0, v61, v62);

      }
      (*(void (**)(char *, uint64_t))(v72 + 8))(v50, v64);
    }
  }
}

uint64_t View.alert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v6 = sub_5C154(&qword_3230B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for PageAlertViewModifier(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - v13;
  sub_5E1A4(a1, (uint64_t)v8, &qword_3230B8);
  v15 = &v11[v9[5]];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_261C60);
  v15[8] = 0;
  v16 = &v11[v9[6]];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_261C90);
  v16[40] = 0;
  v17 = &v11[v9[7]];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_261CC0);
  v18 = sub_5C154(&qword_326110);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  sub_66F14((uint64_t)v8, (uint64_t)v11, &qword_3230B8);
  sub_16F6E8((uint64_t)v11, (uint64_t)v14);
  View.modifier<A>(_:)(v14, a2, v9, a3);
  return sub_6685C((uint64_t)v14, type metadata accessor for PageAlertViewModifier);
}

uint64_t type metadata accessor for PageAlert(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_326DA0, (uint64_t)&nominal type descriptor for PageAlert);
}

uint64_t sub_16F410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_16E04C(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_16F418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326D30;
  if (!qword_326D30)
  {
    v1 = sub_667D0(&qword_326D20);
    sub_67060(&qword_326D38, &qword_326D40, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_326D30);
  }
  return result;
}

unint64_t sub_16F494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_321D10;
  if (!qword_321D10)
  {
    v1 = sub_667D0(&qword_321D18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_321D10);
  }
  return result;
}

uint64_t sub_16F4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageAlertViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_16F534()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = (int *)type metadata accessor for PageAlertViewModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(sub_5C154(&qword_322FA0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v10 = v0 + v4 + *(int *)(sub_5C154(&qword_3230B8) + 32);
  v11 = type metadata accessor for BooksAlertAction(0);
  v19 = *(_QWORD *)(v11 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (!v12(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v10, v11);
  sub_794D8(*(id *)(v9 + v1[5]), *(_BYTE *)(v9 + v1[5] + 8));
  v13 = (_QWORD *)(v9 + v1[6]);
  if ((v13[5] & 1) != 0)
  {
    if (v13[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v13);
  }
  else
  {
    swift_release(*v13);
  }
  v14 = (v5 + v7) & ~v7;
  v15 = (_QWORD *)(v9 + v1[7]);
  v16 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  if (!v12(v0 + v14, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v0 + v14, v11);
  return swift_deallocObject(v0, v14 + v8, v3 | v7 | 7);
}

uint64_t sub_16F6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageAlertViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_16F72C(void (**a1)(uint64_t, uint64_t, __n128))
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for PageAlertViewModifier(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_5C154(&qword_322FA0) - 8) + 80);
  sub_16EBEC(a1, v1 + v4, v1 + ((v5 + v6) & ~v6));
}

uint64_t sub_16F798(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of PageAlertViewModifier.body(content:)>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for PageAlert(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(sub_5C154(&qword_322FA0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v6 = type metadata accessor for BooksAlertAction(0);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t destroy for PageAlert(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for BooksAlertAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for PageAlert(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for BooksAlertAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_5C154(&qword_322FA0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for PageAlert(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for BooksAlertAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = sub_5C154(&qword_322FA0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for PageAlert(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for BooksAlertAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_5C154(&qword_322FA0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for PageAlert(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for BooksAlertAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = sub_5C154(&qword_322FA0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageAlert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16FC18);
}

uint64_t sub_16FC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_322FA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PageAlert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16FC64);
}

uint64_t sub_16FC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_322FA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_16FCA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_8C25C(319, (unint64_t *)&unk_326DB0, (uint64_t (*)(uint64_t))&type metadata accessor for BooksAlertAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for PageAlertViewModifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  id v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    a1[1] = v8;
    swift_retain(v5);
    swift_retain(v8);
    v9 = *(int *)(sub_5C154(&qword_3230B8) + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for BooksAlertAction(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_5C154(&qword_322FA0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(id *)v17;
    v19 = v17[8];
    sub_AAFF4(*(id *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = a3[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    if ((*((_BYTE *)a2 + v20 + 40) & 1) != 0)
    {
      v23 = *((_QWORD *)v22 + 3);
      if (v23)
      {
        v24 = *((_QWORD *)v22 + 4);
        *((_QWORD *)v21 + 3) = v23;
        *((_QWORD *)v21 + 4) = v24;
        (**(void (***)(char *))(v23 - 8))(v21);
      }
      else
      {
        v26 = *((_OWORD *)v22 + 1);
        *(_OWORD *)v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v26;
        *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
      }
      v21[40] = 1;
    }
    else
    {
      v25 = *(_QWORD *)v22;
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[40] = 0;
      swift_retain(v25);
    }
    v27 = a3[7];
    v28 = (_QWORD *)((char *)a1 + v27);
    v29 = (_QWORD *)((char *)a2 + v27);
    v30 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = v28;
      v33 = v30;
      v34 = 1;
    }
    else
    {
      v35 = *v29;
      *v28 = *v29;
      swift_retain(v35);
      v32 = v28;
      v33 = v30;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
  }
  return a1;
}

uint64_t destroy for PageAlertViewModifier(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_5C154(&qword_3230B8) + 32);
  v5 = type metadata accessor for BooksAlertAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  sub_794D8(*(id *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v7 = (_QWORD *)((char *)a1 + a2[6]);
  if ((v7[5] & 1) != 0)
  {
    if (v7[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v7);
  }
  else
  {
    swift_release(*v7);
  }
  v8 = (_QWORD *)((char *)a1 + a2[7]);
  v9 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v8, v9) != 1)
    return swift_release(*v8);
  v10 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
}

_QWORD *initializeWithCopy for PageAlertViewModifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain(v6);
  swift_retain(v7);
  v8 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for BooksAlertAction(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_5C154(&qword_322FA0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(id *)v16;
  v18 = v16[8];
  sub_AAFF4(*(id *)v16, v18);
  *(_QWORD *)v15 = v17;
  v15[8] = v18;
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  if ((*((_BYTE *)a2 + v19 + 40) & 1) != 0)
  {
    v22 = *((_QWORD *)v21 + 3);
    if (v22)
    {
      v23 = *((_QWORD *)v21 + 4);
      *((_QWORD *)v20 + 3) = v22;
      *((_QWORD *)v20 + 4) = v23;
      (**(void (***)(char *))(v22 - 8))(v20);
    }
    else
    {
      v25 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v25;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    }
    v20[40] = 1;
  }
  else
  {
    v24 = *(_QWORD *)v21;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[40] = 0;
    swift_retain(v24);
  }
  v26 = a3[7];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    v32 = *v28;
    *v27 = *v28;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  return a1;
}

uint64_t *assignWithCopy for PageAlertViewModifier(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  id v22;
  char v23;
  void *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BooksAlertAction(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_5C154(&qword_322FA0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[5];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(id *)v21;
  v23 = v21[8];
  sub_AAFF4(*(id *)v21, v23);
  v24 = *(void **)v20;
  v25 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = v23;
  sub_794D8(v24, v25);
  if (a1 != a2)
  {
    v26 = a3[6];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    sub_5E09C((uint64_t)a1 + v26, &qword_31F488);
    if ((v28[40] & 1) != 0)
    {
      v29 = *((_QWORD *)v28 + 3);
      if (v29)
      {
        *((_QWORD *)v27 + 3) = v29;
        *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
        (**(void (***)(char *, char *))(v29 - 8))(v27, v28);
      }
      else
      {
        v31 = *(_OWORD *)v28;
        v32 = *((_OWORD *)v28 + 1);
        *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
        *(_OWORD *)v27 = v31;
        *((_OWORD *)v27 + 1) = v32;
      }
      v27[40] = 1;
    }
    else
    {
      v30 = *(_QWORD *)v28;
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[40] = 0;
      swift_retain(v30);
    }
    v33 = a3[7];
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    sub_5E09C((uint64_t)a1 + v33, &qword_326110);
    v36 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v39 = *v35;
      *v34 = *v35;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
  }
  return a1;
}

_QWORD *initializeWithTake for PageAlertViewModifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for BooksAlertAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_5C154(&qword_322FA0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[5];
  v14 = a3[6];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = (_OWORD *)((char *)a1 + v14);
  v18 = (_OWORD *)((char *)a2 + v14);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v18 + 25);
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  return a1;
}

uint64_t *assignWithTake for PageAlertViewModifier(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for BooksAlertAction(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_5C154(&qword_322FA0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[5];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(void **)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  sub_794D8(v21, v22);
  if (a1 != a2)
  {
    v23 = a3[6];
    v24 = (_OWORD *)((char *)a2 + v23);
    v25 = (_OWORD *)((char *)a1 + v23);
    sub_5E09C((uint64_t)a1 + v23, &qword_31F488);
    v26 = v24[1];
    *v25 = *v24;
    v25[1] = v26;
    *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)((char *)v24 + 25);
    v27 = a3[7];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    sub_5E09C((uint64_t)a1 + v27, &qword_326110);
    v30 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
      swift_storeEnumTagMultiPayload(v28, v30, 1);
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PageAlertViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17087C);
}

uint64_t sub_17087C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = sub_5C154(&qword_3230B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = sub_5C154(&qword_31F490);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PageAlertViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_170934);
}

uint64_t sub_170934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5C154(&qword_3230B8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
      return result;
    }
    v10 = sub_5C154(&qword_31F490);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1709E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_8C25C(319, (unint64_t *)&unk_326E48, type metadata accessor for PageAlert, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = &unk_261DB0;
    sub_8C25C(319, (unint64_t *)&qword_31F508, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetricsFieldsContext, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

unint64_t sub_170AAC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[9];

  result = qword_326E80;
  if (!qword_326E80)
  {
    v1 = sub_667D0(&qword_326D10);
    v2[0] = sub_667D0(&qword_326D18);
    v2[1] = &type metadata for String;
    v2[2] = sub_667D0(&qword_326D20);
    v2[3] = sub_667D0(&qword_321D18);
    v2[4] = type metadata accessor for BooksAlertAction(255);
    v2[5] = sub_67060(&qword_326D28, &qword_326D18, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v2[6] = sub_668F8();
    v2[7] = sub_16F418();
    v2[8] = sub_16F494();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:)>>, 1);
    sub_67060(&qword_326E88, &qword_326E90, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326E80);
  }
  return result;
}

uint64_t sub_170BE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for PageAlertViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_648E0(&qword_326E98, type metadata accessor for PageAlertViewModifier, (uint64_t)&protocol conformance descriptor for PageAlertViewModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

uint64_t sub_170C64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = (int *)type metadata accessor for PageAlertViewModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v18 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for BooksAlertAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v10 = v0 + v4 + *(int *)(sub_5C154(&qword_3230B8) + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  sub_794D8(*(id *)(v9 + v1[5]), *(_BYTE *)(v9 + v1[5] + 8));
  v11 = (_QWORD *)(v9 + v1[6]);
  if ((v11[5] & 1) != 0)
  {
    if (v11[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v11);
  }
  else
  {
    swift_release(*v11);
  }
  v12 = (_QWORD *)(v9 + v1[7]);
  v13 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (v4 + v18 + v7) & ~v7;
  v16 = v15 + v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v15, v5);
  return swift_deallocObject(v0, v16, v3 | v7 | 7);
}

uint64_t sub_170DF4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for PageAlertViewModifier(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BooksAlertAction(0) - 8) + 80);
  return sub_16E2BC(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

uint64_t sub_170E74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_170E98(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = sub_5C154(&qword_326ED0);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_170EF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for PageAlertViewModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v21 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for BooksAlertAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v20 = *(_QWORD *)(v5 + 64);
  v22 = type metadata accessor for BooksAlertAction.Button(0);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v19 = *(_QWORD *)(v7 + 64);
  v9 = (_QWORD *)(v0 + ((v3 + 16) & ~v3));
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = (char *)v9 + *(int *)(sub_5C154(&qword_3230B8) + 32);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  sub_794D8(*(id *)((char *)v9 + v1[5]), *((_BYTE *)v9 + v1[5] + 8));
  v11 = (_QWORD *)((char *)v9 + v1[6]);
  if ((v11[5] & 1) != 0)
  {
    if (v11[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v11);
  }
  else
  {
    swift_release(*v11);
  }
  v12 = (_QWORD *)((char *)v9 + v1[7]);
  v13 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = v3 | v6 | v8 | 7;
  v16 = (((v3 + 16) & ~v3) + v21 + v6) & ~v6;
  v17 = (v16 + v20 + v8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v16, v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v17, v22);
  return swift_deallocObject(v0, v17 + v19, v15);
}

uint64_t sub_1710C8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for PageAlertViewModifier(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for BooksAlertAction(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BooksAlertAction.Button(0) - 8) + 80);
  return sub_16E690(v0 + v2, v0 + v5, v0 + ((v5 + v6 + v7) & ~v7));
}

uint64_t static FlowActionDestination<>.page(intent:hidesDefaultBackButton:navigationBarTitle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[40];

  sub_5E0D8(a1, (uint64_t)v10);
  v7 = type metadata accessor for Page(0);
  v8 = sub_1711D0();
  swift_bridgeObjectRetain(a4);
  return FlowAction.PageDestination.init(intent:hidesDefaultBackButton:navigationBarTitle:)(v10, a2, a3, a4, v7, v8);
}

unint64_t sub_1711D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_320120;
  if (!qword_320120)
  {
    v1 = type metadata accessor for Page(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Page, v1);
    atomic_store(result, (unint64_t *)&qword_320120);
  }
  return result;
}

uint64_t FlowActionImplementation.perform(_:asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v4 = sub_5C154(&qword_329740);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v10);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_2EF8E8, v14 + 8, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v15 + v13, v11, v7);
  *(_QWORD *)(v15 + v14) = a2;
  sub_5C154(&qword_3208F8);
  v16 = swift_retain(a2);
  v17 = Promise.__allocating_init()(v16);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  v19 = (_QWORD *)swift_allocObject(&unk_2EF910, 56, 7);
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = &unk_326EE8;
  v19[5] = v15;
  v19[6] = v17;
  swift_retain(v17);
  v20 = sub_174AF8((uint64_t)v6, (uint64_t)&unk_320900, (uint64_t)v19);
  swift_release(v20);
  return v17;
}

uint64_t sub_1713B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;

  v7 = type metadata accessor for MainActor(0);
  v3[2] = v7;
  v3[3] = static MainActor.shared.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_326F1C);
  v3[4] = v8;
  *v8 = v3;
  v8[1] = sub_B3ACC;
  return sub_1714CC(a1, a2, a3);
}

uint64_t sub_17143C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for FlowAction(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_326EE4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_7BFF8;
  return sub_1713B8(a1, v6, v7);
}

uint64_t sub_1714CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3[61] = a2;
  v3[62] = a3;
  v3[60] = a1;
  v4 = type metadata accessor for FlowAction.FeedDestination(0);
  v3[63] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[64] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[65] = swift_task_alloc(v6);
  v3[66] = swift_task_alloc(v6);
  v7 = type metadata accessor for BooksUIKitFeatureFlag(0);
  v3[67] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[68] = v8;
  v3[69] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CardInfo(0, v9);
  v3[70] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[71] = v11;
  v3[72] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_326F20);
  v3[73] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FlowAction.NewSingleCardDestination(0);
  v3[74] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[75] = v14;
  v3[76] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FlowAction(0);
  v3[77] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[78] = v16;
  v3[79] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_322410);
  v3[80] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for MainActor(0);
  v3[81] = static MainActor.shared.getter(v18);
  v19 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
  v3[82] = v19;
  v3[83] = v20;
  return swift_task_switch(sub_171660, v19, v20);
}

uint64_t sub_171660(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v2 = v1[80];
  FlowAction.origin.getter(a1);
  v3 = type metadata accessor for ActionOrigin(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  v6 = v1[80];
  if (v5 == 1)
  {
    sub_5E09C(v1[80], &qword_322410);
    v7 = 0;
  }
  else
  {
    v7 = ActionOrigin.appAnalyticsMetricsFeedOptions.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v3);
  }
  v1[84] = v7;
  v8 = sub_5C154(&qword_31FA90);
  v9 = (uint64_t **)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[85] = (uint64_t)v9;
  *v9 = v1;
  v9[1] = (uint64_t *)sub_17174C;
  return BaseObjectGraph.inject<A>(_:)(v1 + 8, v8, v8);
}

uint64_t sub_17174C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 680);
  *(_QWORD *)(*(_QWORD *)v1 + 688) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[84]);
    v4 = v2[83];
    v5 = v2[82];
    v6 = sub_172C94;
  }
  else
  {
    v4 = v2[83];
    v5 = v2[82];
    v6 = sub_1717C0;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1717C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __n128 v27;
  char v28;
  objc_class *v29;
  _BYTE *v30;
  id v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  sub_66898((_QWORD *)(v0 + 64), v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  if ((v7 & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    v10 = FlowAction.presentation.getter(v8);
    v12 = v11;
    v13 = static FlowActionPresentation.cardsPresent.getter();
    if (v10 == v13 && v12 == v14)
    {
      v9 = 1;
      v16 = v12;
    }
    else
    {
      v16 = v14;
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
    }
    swift_bridgeObjectRelease(v16);
    v8 = swift_bridgeObjectRelease(v12);
  }
  (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 624) + 8))(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 616), v8);
  v17 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  sub_66898((_QWORD *)(v0 + 64), v17);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18) & 1) != 0)
    goto LABEL_16;
  v20 = FlowAction.presentation.getter(v19);
  v22 = v21;
  v23 = static FlowActionPresentation.cardsPresent.getter();
  v25 = v24;
  if (v23 == v20 && v24 == v22)
    goto LABEL_13;
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v20, v22, 0);
  v27 = swift_bridgeObjectRelease(v25);
  if ((v26 & 1) != 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v22);
    goto LABEL_16;
  }
  v34 = static FlowActionPresentation.roundedCornerFormSheetPresent.getter(v27);
  v36 = v35;
  if (v34 != v20 || v35 != v22)
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v20, v22, 0);
    v38 = swift_bridgeObjectRelease(v36);
    if ((v37 & 1) != 0)
      goto LABEL_15;
    v39 = static FlowActionPresentation.sheetPopover.getter(v38);
    v41 = v40;
    if (v39 != v20 || v40 != v22)
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v20, v22, 0);
      v43 = swift_bridgeObjectRelease(v41);
      if ((v42 & 1) != 0)
        goto LABEL_15;
      v44 = static FlowActionPresentation.sheetPresent.getter(v43);
      v46 = v45;
      if (v44 != v20 || v45 != v22)
      {
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v20, v22, 0);
        swift_bridgeObjectRelease(v46);
        if ((v47 & 1) != 0)
          goto LABEL_15;
        v49 = static FlowActionPresentation.stackPush.getter(v48);
        v51 = v50;
        if (v49 == v20 && v50 == v22)
          goto LABEL_29;
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, v20, v22, 0);
        v53 = swift_bridgeObjectRelease(v51);
        if ((v52 & 1) != 0)
          goto LABEL_31;
        v56 = static FlowActionPresentation.stackZoomPush.getter(v53);
        v58 = v57;
        if (v56 == v20 && v57 == v22)
        {
LABEL_29:
          swift_bridgeObjectRelease(v22);
LABEL_31:
          swift_bridgeObjectRelease(v22);
LABEL_32:
          v54 = *(_QWORD *)(v0 + 88);
          v55 = *(_QWORD *)(v0 + 96);
          sub_66898((_QWORD *)(v0 + 64), v54);
          v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
          goto LABEL_17;
        }
        v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, v20, v22, 0);
        v60 = swift_bridgeObjectRelease(v58);
        if ((v59 & 1) != 0)
          goto LABEL_31;
        v61 = static FlowActionPresentation.tabReplaceAll.getter(v60);
        v63 = v62;
        if (v61 != v20 || v62 != v22)
        {
          v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, v20, v22, 0);
          v65 = swift_bridgeObjectRelease(v63);
          if ((v64 & 1) != 0)
            goto LABEL_40;
          v66 = static FlowActionPresentation.tabSelect.getter(v65);
          v68 = v67;
          if (v66 == v20 && v67 == v22)
            goto LABEL_38;
          v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, v20, v22, 0);
          v70 = swift_bridgeObjectRelease(v68);
          if ((v69 & 1) != 0)
          {
LABEL_40:
            swift_bridgeObjectRelease(v22);
            v28 = 0;
            goto LABEL_17;
          }
          v71 = static FlowActionPresentation.tabSelectReplaceAll.getter(v70);
          v73 = v72;
          if (v71 != v20 || v72 != v22)
          {
            v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v20, v22, 0);
            swift_bridgeObjectRelease(v73);
            swift_bridgeObjectRelease(v22);
            v28 = 0;
            if ((v74 & 1) != 0)
              goto LABEL_17;
            goto LABEL_32;
          }
        }
LABEL_38:
        swift_bridgeObjectRelease_n(v22, 2);
        v28 = 0;
        goto LABEL_17;
      }
    }
  }
LABEL_13:
  swift_bridgeObjectRelease_n(v22, 2);
LABEL_16:
  v28 = 1;
LABEL_17:
  v29 = (objc_class *)type metadata accessor for NavigationContext();
  v30 = objc_allocWithZone(v29);
  v30[OBJC_IVAR___BSUINavigationContext_isInCard] = v9 & 1;
  v30[OBJC_IVAR___BSUINavigationContext_isInModal] = v28 & 1;
  *(_QWORD *)(v0 + 448) = v30;
  *(_QWORD *)(v0 + 456) = v29;
  v31 = objc_msgSendSuper2((objc_super *)(v0 + 448), "init");
  *(_QWORD *)(v0 + 696) = v31;
  v32 = (_QWORD *)swift_task_alloc(dword_326F2C);
  *(_QWORD *)(v0 + 704) = v32;
  *v32 = v0;
  v32[1] = sub_171C34;
  return sub_172EC8(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), (uint64_t)v31, *(_QWORD *)(v0 + 672));
}

uint64_t sub_171C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 704);
  v5 = *(void **)(*(_QWORD *)v2 + 696);
  v3[89] = a1;
  v3[90] = v1;
  swift_task_dealloc(v4);

  if (v1)
  {
    swift_bridgeObjectRelease(v3[84]);
    v6 = v3[83];
    v7 = v3[82];
    v8 = sub_172D3C;
  }
  else
  {
    v6 = v3[83];
    v7 = v3[82];
    v8 = sub_171CC4;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_171CC4(__n128 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __n128 v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(void);
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __n128 v81;
  uint64_t v82;
  __n128 v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  NSString v102;
  id v103;
  id v104;
  void *v105;
  uint64_t v106;
  _QWORD *v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __n128 v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  NSDictionary v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  id v146;
  Class isa;
  double v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  void (*v155)(void);
  id v156;
  uint64_t v157;

  v2 = FlowAction.presentation.getter(a1);
  v4 = v3;
  v5 = static FlowActionPresentation.cardsPresent.getter();
  if (v5 == v2 && v6 == v4)
  {
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v8 = v6;
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v4, 0);
    swift_bridgeObjectRelease(v8);
    if ((v9 & 1) == 0)
    {
      v10 = v1[84];
      swift_release(v1[81]);
      v11 = swift_bridgeObjectRelease(v10);
      v12 = static FlowActionPresentation.roundedCornerFormSheetPresent.getter(v11);
      v14 = v13;
      if (v12 == v2 && v13 == v4)
      {
        swift_bridgeObjectRelease(v4);
        goto LABEL_18;
      }
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v2, v4, 0);
      swift_bridgeObjectRelease(v14);
      if ((v50 & 1) != 0)
      {
LABEL_18:
        v52 = v1[89];
        swift_bridgeObjectRelease(v4);
        if (v52)
        {
          v53 = (void *)v1[89];
          v54 = objc_allocWithZone((Class)BSUINavigationController);
          v55 = v53;
          v56 = objc_msgSend(v54, "initWithRootViewController:", v55);
          objc_msgSend(v56, "setModalPresentationStyle:", 2);
          v57 = objc_msgSend(v56, "sheetPresentationController");
          if (v57)
          {
            v58 = v57;
            UISheetPresentationController.preferredCornerRadius.setter(0x4040000000000000, 0);

          }
          v59 = v1[60];
          v60 = v1[11];
          v61 = v1[12];
          sub_66898(v1 + 8, v60);
          (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v61 + 72))(v56, 1, v60, v61);

          v62 = enum case for ActionOutcome.performed(_:);
          v63 = type metadata accessor for ActionOutcome(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v59, v62, v63);
          goto LABEL_48;
        }
        goto LABEL_46;
      }
      v64 = static FlowActionPresentation.stackPush.getter(v51);
      v66 = v65;
      if (v64 == v2 && v65 == v4)
      {
        swift_bridgeObjectRelease(v4);
        goto LABEL_26;
      }
      v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, v2, v4, 0);
      v68 = swift_bridgeObjectRelease(v66);
      if ((v67 & 1) != 0)
      {
LABEL_26:
        v69 = v1[89];
        swift_bridgeObjectRelease(v4);
        if (v69)
        {
          v70 = (void *)v1[89];
          v71 = v1[60];
          v72 = v1[12];
          sub_66898(v1 + 8, v1[11]);
          v73 = *(void (**)(void))(v72 + 40);
          v74 = v70;
          v73();

          v75 = enum case for ActionOutcome.performed(_:);
          v76 = type metadata accessor for ActionOutcome(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 104))(v71, v75, v76);
          goto LABEL_48;
        }
LABEL_46:
        v119 = v1[60];
LABEL_47:
        v120 = enum case for ActionOutcome.unsupported(_:);
        v121 = type metadata accessor for ActionOutcome(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 104))(v119, v120, v121);
        goto LABEL_48;
      }
      v77 = static FlowActionPresentation.stackZoomPush.getter(v68);
      v79 = v78;
      if (v77 == v2 && v78 == v4)
      {
        swift_bridgeObjectRelease(v4);
        goto LABEL_32;
      }
      v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v78, v2, v4, 0);
      v81 = swift_bridgeObjectRelease(v79);
      if ((v80 & 1) != 0)
      {
LABEL_32:
        v82 = v1[89];
        v83 = swift_bridgeObjectRelease(v4);
        if (!v82)
          goto LABEL_46;
        v84 = (void *)v1[89];
        v85 = v1[69];
        v86 = v1[68];
        v87 = v1[67];
        (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v86 + 104))(v85, enum case for BooksUIKitFeatureFlag.fluidTransitions(_:), v87, v83);
        v88 = v84;
        v89 = isFeatureEnabled(_:)(v85);
        v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
        if ((v89 & 1) != 0)
        {
          v91 = FlowAction.sourceViewIdentifier.getter(v90);
          if (v92)
          {
            v93 = v91;
            v94 = v92;
            v95 = v1[11];
            v96 = v1[12];
            sub_66898(v1 + 8, v95);
            v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 32))(v95, v96);
            if (v97)
            {
              v98 = (void *)v97;
              v99 = objc_opt_self(TUIFeedViewController);
              v100 = swift_dynamicCastObjCClass(v98, v99);
              if (!v100)
              {
                swift_bridgeObjectRelease(v94);

                goto LABEL_57;
              }
              v101 = (void *)v100;
              v102 = String._bridgeToObjectiveC()();
              v103 = objc_msgSend(v102, "tui_identiferFromString");

              v104 = objc_msgSend(v101, "descendentViewWithIdentifier:", v103);
              swift_unknownObjectRelease(v103);

              if (v104)
              {
                v105 = (void *)objc_opt_self(_UIViewControllerTransition);
                v106 = swift_allocObject(&unk_2EF9D0, 24, 7);
                swift_unknownObjectWeakInit(v106 + 16);
                v107 = (_QWORD *)swift_allocObject(&unk_2EF9F8, 40, 7);
                v107[2] = v106;
                v107[3] = v93;
                v107[4] = v94;
                v1[6] = sub_175164;
                v1[7] = v107;
                v1[2] = _NSConcreteStackBlock;
                v1[3] = 1107296256;
                v1[4] = sub_174784;
                v1[5] = &unk_2EFA10;
                v108 = _Block_copy(v1 + 2);
                swift_release(v1[7]);
                v109 = objc_msgSend(v105, "zoomWithSourceViewProvider:", v108);
                _Block_release(v108);
                objc_msgSend(v88, "_setPreferredTransition:", v109);

                goto LABEL_57;
              }

            }
            swift_bridgeObjectRelease(v94);
          }
        }
LABEL_57:
        v137 = v1[60];
        v138 = v1[11];
        v139 = v1[12];
        sub_66898(v1 + 8, v138);
        (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v139 + 40))(v88, 1, v138, v139);

        v140 = enum case for ActionOutcome.performed(_:);
        v141 = type metadata accessor for ActionOutcome(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 104))(v137, v140, v141);
        goto LABEL_48;
      }
      v110 = static FlowActionPresentation.sheetPresent.getter(v81);
      v112 = v111;
      if (v110 == v2 && v111 == v4)
      {
        swift_bridgeObjectRelease(v4);
      }
      else
      {
        v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v111, v2, v4, 0);
        v114 = swift_bridgeObjectRelease(v112);
        if ((v113 & 1) == 0)
        {
          v130 = (void *)v1[89];
          v119 = v1[60];
          static FlowActionPresentation.tabSelect.getter(v114);
          v132 = v131;
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v132);

          goto LABEL_47;
        }
      }
      v115 = v1[89];
      swift_bridgeObjectRelease(v4);
      if (!v115)
        goto LABEL_46;
      v116 = (id)v1[89];
      FlowAction.destination.getter(v1 + 18, v116);
      v117 = sub_5C154(&qword_3265F8);
      if (swift_dynamicCast(v1 + 23, v1 + 18, v117, &type metadata for FlowAction.YearInReviewDestination, 0))
      {
        v118 = objc_msgSend(objc_allocWithZone((Class)BSUINavigationController), "initWithRootViewController:", v116);
        objc_msgSend(v118, "setModalPresentationStyle:", 2);
        objc_msgSend(v118, "setPreferredContentSize:", 560.0, 1024.0);

        sub_1750E0(v1 + 23);
      }
      else if (swift_dynamicCast(v1[66], v1 + 18, v117, v1[63], 0))
      {
        v133 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1[64] + 32))(v1[65], v1[66], v1[63]);
        v134 = FlowAction.FeedDestination.options.getter(v133);
        v135 = sub_1747D4(v134);
        swift_bridgeObjectRelease(v134);
        if (v135)
        {
          type metadata accessor for BSUINavigationControllerOptionsKey(0);
          sub_648E0(&qword_31F168, (uint64_t (*)(uint64_t))type metadata accessor for BSUINavigationControllerOptionsKey, (uint64_t)&unk_2578B4);
          v136.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v135);
        }
        else
        {
          v136.super.isa = 0;
        }
        v142 = objc_msgSend(objc_allocWithZone((Class)BSUINavigationController), "initWithOptions:", v136.super.isa);

        v143 = sub_5C154(&qword_322430);
        v144 = swift_allocObject(v143, 40, 7);
        *(_OWORD *)(v144 + 16) = xmmword_25BE20;
        *(_QWORD *)(v144 + 32) = v116;
        v157 = v144;
        specialized Array._endMutation()(v144);
        sub_1750A4();
        v145 = v142;
        v146 = v116;
        v118 = v145;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v118, "setViewControllers:animated:", isa, 0, swift_bridgeObjectRelease(v157).n128_f64[0]);

        v148 = COERCE_DOUBLE(FlowAction.FeedDestination.preferredContentSize.getter());
        v150 = v1[65];
        v151 = v1[63];
        v152 = v1[64];
        if ((v153 & 1) != 0)
        {
          (*(void (**)(_QWORD, _QWORD))(v152 + 8))(v1[65], v1[63]);

        }
        else
        {
          objc_msgSend(v118, "setPreferredContentSize:", v148, v149);

          (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v150, v151);
        }
      }
      else
      {
        v118 = objc_msgSend(objc_allocWithZone((Class)BSUINavigationController), "initWithRootViewController:", v116);
      }
      v43 = v1[60];
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1 + 18);
      v154 = v1[12];
      sub_66898(v1 + 8, v1[11]);
      v155 = *(void (**)(void))(v154 + 72);
      v156 = v118;
      v155();

      v44 = (unsigned int *)&enum case for ActionOutcome.performed(_:);
LABEL_14:
      v45 = *v44;
      v46 = type metadata accessor for ActionOutcome(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v43, v45, v46);
LABEL_48:
      v122 = v1[80];
      v123 = v1[79];
      v124 = v1[76];
      v125 = v1[73];
      v126 = v1[72];
      v127 = v1[69];
      v128 = v1[66];
      v129 = v1[65];
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1 + 8);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      return ((uint64_t (*)(void))v1[1])();
    }
  }
  v15 = v1[75];
  v16 = v1[74];
  v17 = v1[73];
  swift_bridgeObjectRelease(v4);
  FlowAction.destination.getter(v1 + 13, v18);
  v19 = sub_5C154(&qword_3265F8);
  v20 = swift_dynamicCast(v17, v1 + 13, v19, v16, 6);
  v21 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v15 + 56);
  v22 = v1[74];
  v23 = v1[73];
  if (!v20)
  {
    v40 = (void *)v1[89];
    v41 = v1[84];
    v42 = v1[81];
    v43 = v1[60];
    v21(v1[73], 1, 1, v1[74]);
    swift_release(v42);
    swift_bridgeObjectRelease(v41);

    sub_5E09C(v23, &qword_326F20);
    v44 = (unsigned int *)&enum case for ActionOutcome.unsupported(_:);
    goto LABEL_14;
  }
  v24 = v1[84];
  v25 = v1[76];
  v26 = v1[75];
  v27 = v1[72];
  v28 = v1[71];
  v29 = v1[70];
  v21(v1[73], 0, 1, v1[74]);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v23, v22);
  v31 = FlowAction.NewSingleCardDestination.cardInfo.getter(v30);
  v32 = CardInfo.options.getter(v31);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  v1[58] = v32;
  if (v24)
  {
    v33 = v1[84];
    v34 = sub_5C154(&qword_3259E8);
    v1[31] = v34;
    v1[28] = v33;
    sub_5D000((_OWORD *)v1 + 14, (_OWORD *)v1 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
    v157 = v32;
    v36 = v1[35];
    v37 = sub_7EEDC((uint64_t)(v1 + 32), v36);
    v38 = *(_QWORD *)(v36 - 8);
    v39 = swift_task_alloc((*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v37, v36);
    sub_17541C(v39, 0xD000000000000013, 0x800000000026F8F0, isUniquelyReferenced_nonNull_native, &v157, v34);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1 + 32);
    swift_task_dealloc(v39);
    v1[58] = v157;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    sub_1DCA38(0xD000000000000013, 0x800000000026F8F0, (_OWORD *)v1 + 20);
    sub_5E09C((uint64_t)(v1 + 40), &qword_326608);
  }
  v47 = sub_5C154(&qword_326610);
  v48 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[91] = v48;
  *v48 = v1;
  v48[1] = sub_1728EC;
  return BaseObjectGraph.inject<A>(_:)(v1 + 59, v47, v47);
}

uint64_t sub_1728EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 728);
  *(_QWORD *)(*(_QWORD *)v1 + 736) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[58]);
    v4 = v2[83];
    v5 = v2[82];
    v6 = sub_172DF0;
  }
  else
  {
    v4 = v2[83];
    v5 = v2[82];
    v6 = sub_172960;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_172960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v30 = *(_QWORD *)(v0 + 600);
  v31 = *(void **)(v0 + 712);
  v32 = *(_QWORD *)(v0 + 592);
  v33 = *(_QWORD *)(v0 + 608);
  v34 = *(_QWORD *)(v0 + 480);
  swift_release(*(_QWORD *)(v0 + 648));
  v1 = *(_QWORD *)(v0 + 472);
  *(_QWORD *)(v0 + 376) = swift_getObjectType();
  *(_QWORD *)(v0 + 352) = v1;
  sub_5D000((_OWORD *)(v0 + 352), (_OWORD *)(v0 + 416));
  v2 = *(_QWORD *)(v0 + 464);
  LOBYTE(v1) = swift_isUniquelyReferenced_nonNull_native(v2);
  v35 = v2;
  v3 = *(_QWORD *)(v0 + 440);
  v4 = sub_7EEDC(v0 + 416, v3);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v3);
  sub_17541C(v6, 0xD000000000000013, 0x8000000000272E60, v1, &v35, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 416));
  swift_task_dealloc(v6);
  v7 = v35;
  swift_bridgeObjectRelease(0x8000000000000000);
  *(_QWORD *)(v0 + 312) = &type metadata for Bool;
  *(_BYTE *)(v0 + 288) = 1;
  sub_5D000((_OWORD *)(v0 + 288), (_OWORD *)(v0 + 384));
  LOBYTE(v6) = swift_isUniquelyReferenced_nonNull_native(v7);
  v35 = v7;
  v8 = *(_QWORD *)(v0 + 408);
  v9 = sub_7EEDC(v0 + 384, v8);
  v10 = *(_QWORD *)(v8 - 8);
  v11 = (char *)swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v11, v9, v8);
  sub_175284(*v11, 0x647261436E497369, 0xE800000000000000, v6, &v35);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 384));
  swift_task_dealloc(v11);
  v12 = v35;
  *(_QWORD *)(v0 + 464) = v35;
  swift_bridgeObjectRelease(0x8000000000000000);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);
  sub_66898((_QWORD *)(v0 + 64), v13);
  v15 = sub_5C154(&qword_326F30);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_258070;
  v17 = sub_2160BC(v12);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v16 + 32) = v17;
  v18 = sub_53458((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88))(v16, 0, 1, v18, v13, v14);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v16);

  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v32);
  v19 = enum case for ActionOutcome.performed(_:);
  v20 = type metadata accessor for ActionOutcome(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v34, v19, v20);
  v21 = *(_QWORD *)(v0 + 640);
  v22 = *(_QWORD *)(v0 + 632);
  v23 = *(_QWORD *)(v0 + 608);
  v24 = *(_QWORD *)(v0 + 584);
  v25 = *(_QWORD *)(v0 + 576);
  v26 = *(_QWORD *)(v0 + 552);
  v27 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 520);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 64));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_172C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 648));
  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 520);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_172D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 648));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 520);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_172DF0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  swift_release(*(_QWORD *)(v0 + 648));

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 64));
  v5 = *(_QWORD *)(v0 + 632);
  v6 = *(_QWORD *)(v0 + 608);
  v7 = *(_QWORD *)(v0 + 584);
  v8 = *(_QWORD *)(v0 + 576);
  v9 = *(_QWORD *)(v0 + 552);
  v10 = *(_QWORD *)(v0 + 528);
  v11 = *(_QWORD *)(v0 + 520);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_172EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4[63] = a3;
  v4[64] = a4;
  v4[61] = a1;
  v4[62] = a2;
  v5 = type metadata accessor for FlowAction.FeedDestination(0);
  v4[65] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[66] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[67] = swift_task_alloc(v7);
  v4[68] = swift_task_alloc(v7);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322410) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[69] = swift_task_alloc(v8);
  v4[70] = swift_task_alloc(v8);
  v4[71] = swift_task_alloc(v8);
  v9 = type metadata accessor for FlowAction(0);
  v4[72] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[73] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[74] = swift_task_alloc(v11);
  v4[75] = swift_task_alloc(v11);
  v12 = sub_5C154(&qword_3200D0);
  v4[76] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[77] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[78] = swift_task_alloc(v14);
  v4[79] = swift_task_alloc(v14);
  v15 = type metadata accessor for BATracker(0);
  v16 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v4[80] = v16;
  *v16 = v4;
  v16[1] = sub_173030;
  return BaseObjectGraph.inject<A>(_:)(v4 + 56, v15, v15);
}

uint64_t sub_173030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 640);
  *(_QWORD *)(*(_QWORD *)v1 + 648) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_174170;
  else
    v3 = sub_173094;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_173094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(v1 + 632);
  v3 = *(_QWORD *)(v1 + 608);
  v4 = *(void **)(v1 + 448);
  *(_QWORD *)(v1 + 656) = v4;
  FlowAction.destination.getter((_QWORD *)(v1 + 56), a1);
  v5 = sub_5C154(&qword_3265F8);
  if (swift_dynamicCast(v2, v1 + 56, v5, v3, 0))
  {
    v6 = v1 + 849;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 616) + 32))(*(_QWORD *)(v1 + 624), *(_QWORD *)(v1 + 632), *(_QWORD *)(v1 + 608));
    v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *(_QWORD *)(v1 + 664) = v7;
    v8 = sub_173484;
LABEL_3:
    *v7 = v1;
    v7[1] = v8;
    return BaseObjectGraph.inject<A>(_:)(v6, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  }
  if (swift_dynamicCast(*(_QWORD *)(v1 + 544), v1 + 56, v5, *(_QWORD *)(v1 + 520), 0))
  {
    v10 = *(_QWORD *)(v1 + 512);
    v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 528) + 32))(*(_QWORD *)(v1 + 536), *(_QWORD *)(v1 + 544), *(_QWORD *)(v1 + 520));
    v12 = FlowAction.FeedDestination.options.getter(v11);
    *(_QWORD *)(v1 + 456) = v12;
    if (v10)
    {
      v13 = v12;
      v14 = *(_QWORD *)(v1 + 512);
      v15 = sub_5C154(&qword_3259E8);
      *(_QWORD *)(v1 + 336) = v15;
      *(_QWORD *)(v1 + 312) = v14;
      sub_5D000((_OWORD *)(v1 + 312), (_OWORD *)(v1 + 248));
      swift_bridgeObjectRetain(v14);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      v34 = v13;
      v17 = *(_QWORD *)(v1 + 272);
      v18 = sub_7EEDC(v1 + 248, v17);
      v19 = *(_QWORD *)(v17 - 8);
      v20 = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v20, v18, v17);
      sub_17541C(v20, 0xD000000000000013, 0x800000000026F8F0, isUniquelyReferenced_nonNull_native, &v34, v15);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 248));
      swift_task_dealloc(v20);
      *(_QWORD *)(v1 + 456) = v34;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      sub_1DCA38(0xD000000000000013, 0x800000000026F8F0, (_OWORD *)(v1 + 344));
      sub_5E09C(v1 + 344, &qword_326608);
    }
    v23 = sub_5C154(&qword_326610);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *(_QWORD *)(v1 + 736) = v24;
    *v24 = v1;
    v24[1] = sub_1738CC;
    return BaseObjectGraph.inject<A>(_:)(v1 + 440, v23, v23);
  }
  else
  {
    if (swift_dynamicCast(v1 + 96, v1 + 56, v5, &type metadata for FlowAction.YearInReviewDestination, 0))
    {
      v21 = *(_OWORD *)(v1 + 112);
      *(_OWORD *)(v1 + 136) = *(_OWORD *)(v1 + 96);
      *(_OWORD *)(v1 + 152) = v21;
      *(_QWORD *)(v1 + 168) = *(_QWORD *)(v1 + 128);
      sub_5E0D8(v1 + 136, v1 + 176);
      v22 = sub_5C154(&qword_326F48);
      if (swift_dynamicCast(v1 + 464, v1 + 176, v22, &type metadata for YearInReviewPageIntent, 6))
      {
        v6 = v1 + 848;
        *(_QWORD *)(v1 + 776) = *(_QWORD *)(v1 + 464);
        v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
        *(_QWORD *)(v1 + 784) = v7;
        v8 = sub_173CF0;
        goto LABEL_3;
      }

      sub_1750E0((_QWORD *)(v1 + 136));
    }
    else
    {

    }
    v25 = *(_QWORD *)(v1 + 632);
    v26 = *(_QWORD *)(v1 + 624);
    v27 = *(_QWORD *)(v1 + 600);
    v28 = *(_QWORD *)(v1 + 592);
    v29 = *(_QWORD *)(v1 + 568);
    v30 = *(_QWORD *)(v1 + 560);
    v31 = *(_QWORD *)(v1 + 552);
    v32 = *(_QWORD *)(v1 + 544);
    v33 = *(_QWORD *)(v1 + 536);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 56));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_173484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  *(_QWORD *)(*(_QWORD *)v1 + 672) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_174224;
  else
    v3 = sub_1734E8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1734E8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v1 = *(_BYTE *)(v0 + 849);
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 16))(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 576));
  if ((v1 & 1) != 0)
    v3 = 1;
  else
    v3 = FlowAction.shouldInheritFigaroRestriction.getter(v2) ^ 1;
  *(_BYTE *)(v0 + 850) = v3 & 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 8))(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 576));
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v0 + 680) = v4;
  *v4 = v0;
  v4[1] = sub_1735A8;
  return BaseObjectGraph.inject<A>(_:)(v0 + 480, &type metadata for PageControllerFactory, &type metadata for PageControllerFactory);
}

uint64_t sub_1735A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 680);
  *(_QWORD *)(*(_QWORD *)v1 + 688) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_174308;
  else
    v3 = sub_17360C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_17360C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v0 + 480);
  *(_QWORD *)(v0 + 696) = v2;
  FlowAction.PageDestination.intent.getter(v1);
  v3 = sub_66898((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  *(_QWORD *)(v0 + 472) = v2;
  FlowAction.origin.getter(v3);
  v4 = FlowAction.PageDestination.hidesDefaultBackButton.getter(v1);
  v5 = FlowAction.PageDestination.navigationBarTitle.getter(v1);
  v7 = v6;
  *(_QWORD *)(v0 + 704) = v6;
  v8 = (_QWORD *)swift_task_alloc(dword_31FC2C);
  *(_QWORD *)(v0 + 712) = v8;
  *v8 = v0;
  v8[1] = sub_173714;
  return PageControllerFactory.create<A>(intent:parentTracker:origin:navigationContext:shouldReportFigaro:hidesDefaultBackButton:navigationBarTitle:)((uint64_t)v3, *(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 504), *(_BYTE *)(v0 + 850), v4 & 1, v5, v7);
}

uint64_t sub_173714(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;

  v4 = *v2;
  v5 = (*v2)[89];
  (*v2)[90] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[88];
    sub_5E09C(v4[71], &qword_322410);
    swift_bridgeObjectRelease(v6);
    v7 = sub_1743EC;
  }
  else
  {
    v8 = v4[88];
    v9 = v4[71];
    v4[91] = a1;
    sub_5E09C(v9, &qword_322410);
    swift_bridgeObjectRelease(v8);
    v7 = sub_1737C0;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1737C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v15 = *(_QWORD *)(v0 + 728);
  v1 = *(void **)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);
  swift_release(*(_QWORD *)(v0 + 696));

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 632);
  v6 = *(_QWORD *)(v0 + 624);
  v7 = *(_QWORD *)(v0 + 600);
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 568);
  v10 = *(_QWORD *)(v0 + 560);
  v11 = *(_QWORD *)(v0 + 552);
  v12 = *(_QWORD *)(v0 + 544);
  v14 = *(_QWORD *)(v0 + 536);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
}

uint64_t sub_1738CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 736);
  *(_QWORD *)(*v1 + 744) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 456));
    v4 = sub_1744E8;
  }
  else
  {
    v4 = sub_173938;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_173938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 440);
  *(_QWORD *)(v0 + 240) = swift_getObjectType();
  *(_QWORD *)(v0 + 216) = v2;
  sub_5D000((_OWORD *)(v0 + 216), (_OWORD *)(v0 + 408));
  v3 = *(_QWORD *)(v0 + 456);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v21 = v3;
  v5 = *(_QWORD *)(v0 + 432);
  v6 = sub_7EEDC(v0 + 408, v5);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v6, v5);
  sub_17541C(v8, 0xD000000000000013, 0x8000000000272E60, isUniquelyReferenced_nonNull_native, &v21, v5);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 408));
  swift_task_dealloc(v8);
  v9 = v21;
  swift_bridgeObjectRelease(0x8000000000000000);
  v10 = *(_BYTE *)(v1 + OBJC_IVAR___BSUINavigationContext_isInCard);
  *(_QWORD *)(v0 + 400) = &type metadata for Bool;
  *(_BYTE *)(v0 + 376) = v10;
  sub_5D000((_OWORD *)(v0 + 376), (_OWORD *)(v0 + 280));
  v11 = swift_isUniquelyReferenced_nonNull_native(v9);
  v21 = v9;
  v12 = *(_QWORD *)(v0 + 304);
  v13 = sub_7EEDC(v0 + 280, v12);
  v14 = *(_QWORD *)(v12 - 8);
  v15 = (char *)swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v15, v13, v12);
  sub_175284(*v15, 0x647261436E497369, 0xE800000000000000, v11, &v21);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 280));
  swift_task_dealloc(v15);
  v16 = v21;
  *(_QWORD *)(v0 + 456) = v21;
  swift_bridgeObjectRelease(0x8000000000000000);
  *(_QWORD *)(v0 + 752) = sub_2160BC(v16);
  swift_bridgeObjectRelease(v16);
  v17 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 760) = static MainActor.shared.getter(v17);
  v18 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
  return swift_task_switch(sub_173B58, v18, v19);
}

uint64_t sub_173B58()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  Class isa;

  v1 = v0[94];
  swift_release(v0[95]);
  v2 = objc_allocWithZone((Class)BSUIFeedViewController);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[96] = objc_msgSend(v2, "initWithOptions:", isa, swift_bridgeObjectRelease(v1).n128_f64[0]);

  return swift_task_switch(sub_173BFC, 0, 0);
}

uint64_t sub_173BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 520);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 632);
  v5 = *(_QWORD *)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 600);
  v7 = *(_QWORD *)(v0 + 592);
  v8 = *(_QWORD *)(v0 + 568);
  v9 = *(_QWORD *)(v0 + 560);
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v13 = *(_QWORD *)(v0 + 536);
  v14 = *(_QWORD *)(v0 + 768);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_173CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 784);
  *(_QWORD *)(*(_QWORD *)v1 + 792) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1745CC;
  else
    v3 = sub_173D54;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_173D54()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_BYTE *)(v0 + 848);
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 16))(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 576));
  if ((v1 & 1) != 0)
    v3 = 1;
  else
    v3 = FlowAction.shouldInheritFigaroRestriction.getter(v2) ^ 1;
  *(_BYTE *)(v0 + 851) = v3 & 1;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 8))(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 576));
  FlowAction.origin.getter(v4);
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 800) = v5;
  *(_QWORD *)(v0 + 808) = static MainActor.shared.getter(v5);
  v6 = (_QWORD *)swift_task_alloc(dword_31FE04);
  *(_QWORD *)(v0 + 816) = v6;
  *v6 = v0;
  v6[1] = sub_173E1C;
  return BaseObjectGraph.withSyncDependenciesForSwiftUI.getter();
}

uint64_t sub_173E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 816);
  *(_QWORD *)(*v2 + 824) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 800);
  if (v1)
  {
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v8;
    v10 = sub_17404C;
  }
  else
  {
    *(_QWORD *)(v4 + 832) = a1;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v11;
    v10 = sub_173EC4;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_173EC4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 832);
  v2 = *(_BYTE *)(v0 + 851);
  v3 = *(void **)(v0 + 776);
  v4 = *(void **)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 552);
  swift_release(*(_QWORD *)(v0 + 808));
  sub_6C1C4(v5, v6);
  *(_QWORD *)(v0 + 840) = sub_11454C(v1, v3, v4, v6, v2);
  sub_5E09C(v5, &qword_322410);
  return swift_task_switch(sub_173F64, 0, 0);
}

uint64_t sub_173F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v11 = *(_QWORD *)(v0 + 840);

  sub_1750E0((_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 560);
  v7 = *(_QWORD *)(v0 + 552);
  v8 = *(_QWORD *)(v0 + 544);
  v10 = *(_QWORD *)(v0 + 536);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_17404C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 560);
  swift_release(*(_QWORD *)(v0 + 808));
  sub_5E09C(v1, &qword_322410);
  return swift_task_switch(sub_17409C, 0, 0);
}

uint64_t sub_17409C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1750E0((_QWORD *)(v0 + 136));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 600);
  v3 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(_QWORD *)(v0 + 544);
  v8 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_174170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 600);
  v3 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(_QWORD *)(v0 + 544);
  v8 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_174224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 592);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  v10 = *(_QWORD *)(v0 + 544);
  v11 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_174308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 592);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  v10 = *(_QWORD *)(v0 + 544);
  v11 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1743EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release(v1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v5 = *(_QWORD *)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 600);
  v7 = *(_QWORD *)(v0 + 592);
  v8 = *(_QWORD *)(v0 + 568);
  v9 = *(_QWORD *)(v0 + 560);
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1744E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 520);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 592);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  v10 = *(_QWORD *)(v0 + 544);
  v11 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1745CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1750E0((_QWORD *)(v0 + 136));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 600);
  v3 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(_QWORD *)(v0 + 544);
  v8 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1746A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  NSString v5;
  id v6;
  id v7;
  id v8;
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (!Strong)
    return 0;
  v4 = (void *)Strong;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v5, "tui_identiferFromString");

  v7 = objc_msgSend(v4, "descendentViewWithIdentifier:", v6);
  swift_unknownObjectRelease(v6);
  if (v7)
  {
    v8 = objc_msgSend(v7, "window");

    if (!v8)
    {

      return 0;
    }
  }
  return v7;
}

id sub_174784(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

void *sub_1747D4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5C154(&qword_326F38);
    v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v4 = *(_BYTE *)(a1 + 32);
  v5 = 1 << v4;
  v6 = -1;
  if (1 << v4 < 64)
    v6 = ~(-1 << (1 << v4));
  v7 = v6 & *(_QWORD *)(a1 + 64);
  if (v7)
  {
    v8 = __clz(__rbit64(v7));
LABEL_8:
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v12 = *v10;
    v11 = v10[1];
    sub_5DC5C(v9 + 32 * v8, (uint64_t)&v22);
    v21[0] = v12;
    v21[1] = v11;
    swift_bridgeObjectRetain(v11);
    sub_5E09C((uint64_t)v21, &qword_326F40);
    swift_release(v3);
    return 0;
  }
  v14 = v4 & 0x3F;
  if (v14 <= 6)
    return v3;
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = 64;
LABEL_13:
    v8 = __clz(__rbit64(v15)) + v16;
    goto LABEL_8;
  }
  if (v14 < 8)
    return v3;
  v15 = *(_QWORD *)(a1 + 80);
  if (v15)
  {
    v16 = 128;
    goto LABEL_13;
  }
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
  {
    v16 = 192;
    goto LABEL_13;
  }
  if (v14 < 9)
    return v3;
  v15 = *(_QWORD *)(a1 + 96);
  if (v15)
  {
    v16 = 256;
    goto LABEL_13;
  }
  v15 = *(_QWORD *)(a1 + 104);
  if (v15)
  {
    v16 = 320;
    goto LABEL_13;
  }
  v17 = (unint64_t)(v5 + 63) >> 6;
  if (v17 <= 6)
    v17 = 6;
  v18 = v17 - 6;
  v19 = (unint64_t *)(a1 + 112);
  v16 = 320;
  while (v18)
  {
    v20 = *v19++;
    v15 = v20;
    --v18;
    v16 += 64;
    if (v20)
      goto LABEL_13;
  }
  return v3;
}

uint64_t sub_174958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v4 = sub_5C154(&qword_329740);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v10);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_2EF958, v14 + 8, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v15 + v13, v11, v7);
  *(_QWORD *)(v15 + v14) = a2;
  sub_5C154(&qword_3208F8);
  v16 = swift_retain(a2);
  v17 = Promise.__allocating_init()(v16);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  v19 = (_QWORD *)swift_allocObject(&unk_2EF980, 56, 7);
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = &unk_326EF8;
  v19[5] = v15;
  v19[6] = v17;
  swift_retain(v17);
  v20 = sub_174AF8((uint64_t)v6, (uint64_t)&unk_326F00, (uint64_t)v19);
  swift_release(v20);
  return v17;
}

uint64_t sub_174AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_5E09C(a1, &qword_329740);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_2EF9A8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_326F10, v16);
}

uint64_t sub_174C44(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_174CA8;
  return v6(a1);
}

uint64_t sub_174CA8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_174CF4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v6[2] = a6;
  v8 = type metadata accessor for ActionOutcome(0);
  v6[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[4] = v9;
  v10 = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[5] = v10;
  v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v11 = (_QWORD *)swift_task_alloc(a4[1]);
  v6[6] = v11;
  *v11 = v6;
  v11[1] = sub_174D8C;
  return v13(v10);
}

uint64_t sub_174D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_174E48;
  else
    v3 = sub_174DF0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_174DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  Promise.resolve(_:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_174E48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  Promise.reject(_:)(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_174E94()
{
  return sub_648E0((unint64_t *)&qword_324BF8, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
}

ValueMetadata *type metadata accessor for FlowActionImplementation()
{
  return &type metadata for FlowActionImplementation;
}

uint64_t sub_174ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for FlowAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_174F48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for FlowAction(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_326EE4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_64780;
  return sub_1713B8(a1, v6, v7);
}

uint64_t sub_174FDC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_175010()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_175034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_326F0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_7BFF8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_326F08 + dword_326F08))(a1, v4);
}

unint64_t sub_1750A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324D00;
  if (!qword_324D00)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_324D00);
  }
  return result;
}

_QWORD *sub_1750E0(_QWORD *a1)
{
  destroy for Shelf.HeaderComponentModel(a1);
  return a1;
}

uint64_t sub_175114()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_175138()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

id sub_175164(uint64_t a1)
{
  uint64_t v1;

  return sub_1746A0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_175170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_175180(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_175188(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v6[2] = a6;
  v8 = type metadata accessor for LintedMetricsEvent(0);
  v6[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[4] = v9;
  v10 = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[5] = v10;
  v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v11 = (_QWORD *)swift_task_alloc(a4[1]);
  v6[6] = v11;
  *v11 = v6;
  v11[1] = sub_175220;
  return v13(v10);
}

uint64_t sub_175220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_175708;
  else
    v3 = sub_17570C;
  return swift_task_switch(v3, 0, 0);
}

void sub_175284(char a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  void *v27;

  LOBYTE(v26) = a1;
  v27 = &type metadata for Bool;
  v9 = (_QWORD *)*a5;
  v11 = sub_582B4(a2, a3);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  v15 = v10;
  v16 = v9[3];
  if (v16 >= v14 && (a4 & 1) != 0)
  {
LABEL_7:
    v17 = (_QWORD *)*a5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = (_QWORD *)(v17[7] + 32 * v11);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
      sub_5D000(&v26, v18);
      return;
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_5B6EC();
    goto LABEL_7;
  }
  sub_13C714(v14, a4 & 1);
  v19 = sub_582B4(a2, a3);
  if ((v15 & 1) != (v20 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v11 = v19;
  v17 = (_QWORD *)*a5;
  if ((v15 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v21 = sub_7EEDC((uint64_t)&v26, (uint64_t)&type metadata for Bool);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v25 + 16))(v24, v22);
  sub_1755D4(v11, a2, a3, *v24, v17);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v26);
  swift_bridgeObjectRetain(a3);
}

void sub_17541C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v31 = a6;
  v12 = sub_668BC(&v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v12, a1, a6);
  v13 = (_QWORD *)*a5;
  v15 = sub_582B4(a2, a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = (_QWORD *)*a5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (_QWORD *)(v21[7] + 32 * v15);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v22);
      sub_5D000(&v30, v22);
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_5B6EC();
    goto LABEL_7;
  }
  sub_13C714(v18, a4 & 1);
  v23 = sub_582B4(a2, a3);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = (_QWORD *)*a5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v25 = sub_7EEDC((uint64_t)&v30, v31);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v29 + 16))(v28, v26);
  sub_175654(v15, a2, a3, (uint64_t)v28, v21, a6);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v30);
  swift_bridgeObjectRetain(a3);
}

_OWORD *sub_1755D4(unint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  void *v12;

  LOBYTE(v11) = a4;
  v12 = &type metadata for Bool;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_5D000(&v11, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_175654(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v19 = a6;
  v12 = sub_668BC(&v18);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v12, a4, a6);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v13 = (_QWORD *)(a5[6] + 16 * a1);
  *v13 = a2;
  v13[1] = a3;
  result = sub_5D000(&v18, (_OWORD *)(a5[7] + 32 * a1));
  v15 = a5[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a5[2] = v17;
  return result;
}

ValueMetadata *type metadata accessor for SeeAllFooterComponent()
{
  return &type metadata for SeeAllFooterComponent;
}

uint64_t sub_175720(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_175760();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

unint64_t sub_175760()
{
  unint64_t result;

  result = qword_32A040;
  if (!qword_32A040)
  {
    result = swift_getWitnessTable(&unk_261EB8, &type metadata for SeeAllFooterComponent);
    atomic_store(result, (unint64_t *)&qword_32A040);
  }
  return result;
}

uint64_t sub_1757A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v33;
  _QWORD v34[2];
  _BYTE v35[40];
  __int128 v36;
  uint64_t v37;
  _QWORD v38[6];

  v34[1] = a2;
  v3 = sub_5C154(&qword_326F60);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SeeAllViewModel(0, v4);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SeeAllView(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_326F68);
  __chkstk_darwin(v15);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)v34 - v19;
  sub_5E1A4(a1 + 40, (uint64_t)v35, &qword_320B70);
  sub_66F14((uint64_t)v35, (uint64_t)&v36, (uint64_t *)&unk_326210);
  if (v37)
  {
    sub_5DC98(&v36, (uint64_t)v38);
    sub_5E0D8((uint64_t)v38, (uint64_t)&v36);
    SeeAllViewModel.init(action:)(&v36);
    v21 = SeeAllView.init(model:)(v10);
    v22 = static Edge.Set.vertical.getter(v21);
    v23 = EdgeInsets.init(_all:)(28.0);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v14, v11);
    v30 = &v17[*(int *)(v15 + 36)];
    *v30 = v22;
    *((double *)v30 + 1) = v23;
    *((_QWORD *)v30 + 2) = v25;
    *((_QWORD *)v30 + 3) = v27;
    *((_QWORD *)v30 + 4) = v29;
    v30[40] = 0;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_66F14((uint64_t)v17, (uint64_t)v20, &qword_326F68);
    sub_5E1A4((uint64_t)v20, (uint64_t)v6, &qword_326F68);
    swift_storeEnumTagMultiPayload(v6, v3, 0);
    v31 = sub_175B30();
    _ConditionalContent<>.init(storage:)(v6, v15, &type metadata for EmptyView, v31, &protocol witness table for EmptyView);
    sub_5E09C((uint64_t)v20, &qword_326F68);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v38);
  }
  else
  {
    sub_5E09C((uint64_t)&v36, (uint64_t *)&unk_326210);
    swift_storeEnumTagMultiPayload(v6, v3, 1);
    v33 = sub_175B30();
    return _ConditionalContent<>.init(storage:)(v6, v15, &type metadata for EmptyView, v33, &protocol witness table for EmptyView);
  }
}

uint64_t sub_175A7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_175760();
  return _ComponentBody.init(_:)(v2, a1, v2);
}

unint64_t sub_175AB0()
{
  unint64_t result;

  result = qword_326F58;
  if (!qword_326F58)
  {
    result = swift_getWitnessTable(&unk_261E68, &type metadata for SeeAllFooterComponent);
    atomic_store(result, (unint64_t *)&qword_326F58);
  }
  return result;
}

uint64_t sub_175AF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B8C0C, 1);
}

uint64_t sub_175B04()
{
  return sub_648E0(&qword_320080, type metadata accessor for SeeAllFooterComponentModel, (uint64_t)&unk_25EEC0);
}

unint64_t sub_175B30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326F70;
  if (!qword_326F70)
  {
    v1 = sub_667D0(&qword_326F68);
    sub_648E0(&qword_326F78, (uint64_t (*)(uint64_t))&type metadata accessor for SeeAllView, (uint64_t)&protocol conformance descriptor for SeeAllView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326F70);
  }
  return result;
}

unint64_t sub_175BB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_326F80;
  if (!qword_326F80)
  {
    v1 = sub_667D0(&qword_326F88);
    sub_175B30();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_326F80);
  }
  return result;
}

Swift::Void __swiftcall BATracker.privateContentData(_:completion:)(JSValue _, JSValue completion)
{
  id v3;
  void *v4;
  uint64_t v5;
  objc_class *v6;
  objc_class *v7;
  uint64_t v8;
  JSValue *v9;
  objc_class *v10;

  v3 = -[objc_class toString](_.super.isa, "toString");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = swift_allocObject(&unk_2EFB18, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16);
  v9 = (JSValue *)swift_allocObject(&unk_2EFB40, 48, 7);
  v9[2].super.isa = (Class)v8;
  v9[3].super.isa = completion.super.isa;
  v9[4].super.isa = (Class)v5;
  v9[5].super.isa = v7;
  swift_retain(v8);
  v10 = completion.super.isa;
  BATracker.performAfterPrivateDataFetched(completionHandler:)(sub_175F34, v9);
  swift_release(v8);
  swift_release(v9);
}

uint64_t sub_175CF4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_175D18(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v13;
  Swift::String_optional v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::Int v20;
  _BYTE v21[24];
  Swift::OpaquePointer_optional v22;

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    if ((objc_msgSend(a2, "isUndefined") & 1) == 0 && (objc_msgSend(a2, "isNull") & 1) == 0)
    {
      if (a4)
      {
        v10._countAndFlagsBits = a3;
        v10._object = a4;
        v11 = BATracker.contentPrivateID(for:)(v10);
        if (v11.value._object)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
          sub_5A288(v11.value._countAndFlagsBits, (uint64_t)v11.value._object, 0xD000000000000010, 0x8000000000273550, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        v13._countAndFlagsBits = a3;
        v13._object = a4;
        v14 = BATracker.contentUserID(for:)(v13);
        if (v14.value._object)
        {
          v15 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
          sub_5A288(v14.value._countAndFlagsBits, (uint64_t)v14.value._object, 0x55746E65746E6F63, 0xED00004449726573, v15);
          swift_bridgeObjectRelease(0x8000000000000000);
        }
      }
      v16 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
      v17 = sub_5C154(&qword_31EFF0);
      v18 = swift_allocObject(v17, 64, 7);
      *(_OWORD *)(v18 + 16) = xmmword_258070;
      *(_QWORD *)(v18 + 56) = sub_5C154(&qword_3206C8);
      *(_QWORD *)(v18 + 32) = &_swiftEmptyDictionarySingleton;
      v22.is_nil = 111;
      v19._countAndFlagsBits = 0x80000000002734E0;
      v22.value._rawValue = (void *)v18;
      v19._object = &stru_20 + 2;
      JSABridge.enqueueValueCall(_:arguments:f:l:)((JSValue)a2, v22, v19, v20);

      swift_bridgeObjectRelease(v18);
    }

  }
}

void sub_175F34()
{
  uint64_t v0;

  sub_175D18(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

void sub_175F40(id a1, SEL a2, id a3, id a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  BATracker.privateContentData(_:completion:)((JSValue)v6, (JSValue)v7);

}

JSValue __swiftcall BATracker.privateContentData(_:)(JSValue a1)
{
  objc_class *v1;
  id v3;
  JSValue *v4;
  void *v5;
  JSValue *v6;
  objc_class *v7;
  objc_class *v8;
  id v9;
  JSValue result;
  _QWORD v11[5];
  JSValue *v12;

  v3 = -[objc_class context](a1.super.isa, "context");
  v4 = (JSValue *)swift_allocObject(&unk_2EFB68, 32, 7);
  v4[2].super.isa = v1;
  v4[3].super.isa = a1.super.isa;
  v11[4] = sub_176214;
  v12 = v4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_156574;
  v11[3] = &unk_2EFB80;
  v5 = _Block_copy(v11);
  v6 = v12;
  v7 = v1;
  v8 = a1.super.isa;
  swift_release(v6);
  v9 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithNewPromiseInContext:fromExecutor:", v3, v5);

  _Block_release(v5);
  if (v9)
    return (JSValue)v9;
  __break(1u);
  return result;
}

void sub_1760A8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;

  if (a1)
  {
    v14 = a1;
    if (objc_msgSend(v14, "isObject"))
    {
      v6 = objc_msgSend(a4, "toString");
      if (v6)
      {
        v7 = v6;
        v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        v10 = v9;

      }
      else
      {
        v8 = 0;
        v10 = 0;
      }
      v11 = swift_allocObject(&unk_2EFB18, 24, 7);
      swift_unknownObjectWeakInit(v11 + 16, a3);
      v12 = (_QWORD *)swift_allocObject(&unk_2EFBB8, 48, 7);
      v12[2] = v11;
      v12[3] = v14;
      v12[4] = v8;
      v12[5] = v10;
      v13 = v14;
      swift_retain(v11);
      BATracker.performAfterPrivateDataFetched(completionHandler:)(sub_1762B8, v12);

      swift_release(v11);
      swift_release(v12);
    }
    else
    {

    }
  }
}

uint64_t sub_1761E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_176214(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1760A8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_17621C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_17622C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_176234(id a1, SEL a2, id a3)
{
  id v4;
  id v5;
  Class isa;

  v4 = a3;
  v5 = a1;
  isa = BATracker.privateContentData(_:)((JSValue)v4).super.isa;

  return isa;
}

uint64_t sub_176284()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t MenuLikeStateController.init(authStatusProvider:authServiceProvider:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_5DC98(a1, a3);
  return sub_5DC98(a2, a3 + 40);
}

uint64_t sub_1762EC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5DD20(v0, qword_326F90);
  sub_5240C(v0, (uint64_t)qword_326F90);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000000026DEA0, 0xD000000000000017, 0x8000000000261FB0);
}

id sub_176368()
{
  id *v0;

  return objc_msgSend(*v0, "isAuthenticated");
}

uint64_t sub_176388(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(async function pointer to AccountController.signIn(enableAccountCreation:)[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1763DC;
  return AccountController.signIn(enableAccountCreation:)(a1);
}

uint64_t sub_1763DC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *v4;
  swift_task_dealloc(v8);
  if (v3)
  {
    v12 = 0;
  }
  else
  {
    v12 = a1 & 1;
    v10 = a2;
    v11 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v12, v10, v11);
}

uint64_t MenuLikeStateController.authAndsubmitLikeState(liked:context:data:assetInfo:tracker:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;

  v10 = swift_task_alloc(dword_326FB4);
  *(_QWORD *)(v6 + 16) = v10;
  *(_QWORD *)v10 = v6;
  *(_QWORD *)(v10 + 8) = sub_973E4;
  *(_QWORD *)(v10 + 72) = a5;
  *(_QWORD *)(v10 + 80) = v5;
  *(_QWORD *)(v10 + 64) = a4;
  *(_BYTE *)(v10 + 129) = 2;
  *(_BYTE *)(v10 + 128) = a1;
  return swift_task_switch(sub_1764F4, 0, 0);
}

uint64_t sub_1764D0(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 72) = a6;
  *(_QWORD *)(v7 + 80) = v6;
  *(_QWORD *)(v7 + 64) = a5;
  *(_BYTE *)(v7 + 129) = a2;
  *(_BYTE *)(v7 + 128) = a1;
  return swift_task_switch(sub_1764F4, 0, 0);
}

uint64_t sub_1764F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  int *v16;

  v1 = *(_QWORD **)(v0 + 80);
  v2 = v1[3];
  v3 = v1[4];
  sub_66898(v1, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3) & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v6 = *(_WORD *)(v0 + 128);
    v7 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 104) = v7;
    *(_QWORD *)(v7 + 16) = v5;
    *(_WORD *)(v7 + 24) = v6;
    *(_QWORD *)(v7 + 32) = v4;
    v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 112) = v8;
    type metadata accessor for ContentTasteType(0);
    *v8 = v0;
    v8[1] = sub_17688C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD00000000000004CLL, 0x8000000000273750, sub_178380, v7, v9);
  }
  else
  {
    v11 = *(_QWORD **)(v0 + 80);
    v12 = v11[8];
    v13 = v11[9];
    sub_66898(v11 + 5, v12);
    v14 = *(int **)(v13 + 8);
    v16 = (int *)((char *)v14 + *v14);
    v15 = (_QWORD *)swift_task_alloc(v14[1]);
    *(_QWORD *)(v0 + 88) = v15;
    *v15 = v0;
    v15[1] = sub_176648;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v16)(0, v12, v13);
  }
}

uint64_t sub_176648(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 88);
  *(_QWORD *)(*v4 + 96) = v3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9 = sub_176908;
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    *(_BYTE *)(v7 + 130) = a1 & 1;
    v9 = sub_1766CC;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1766CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  if (*(_BYTE *)(v0 + 130) == 1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    v1 = *(_QWORD *)(v0 + 72);
    v3 = *(_WORD *)(v0 + 128);
    v4 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 104) = v4;
    *(_QWORD *)(v4 + 16) = v2;
    *(_WORD *)(v4 + 24) = v3;
    *(_QWORD *)(v4 + 32) = v1;
    v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 112) = v5;
    type metadata accessor for ContentTasteType(0);
    *v5 = v0;
    v5[1] = sub_17688C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD00000000000004CLL, 0x8000000000273750, sub_178380, v4, v6);
  }
  else
  {
    if (qword_31E6E8 != -1)
      swift_once(&qword_31E6E8, sub_1762EC);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_5240C(v8, (uint64_t)qword_326F90);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "Unable to submit dislike state because account sign in failed", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = sub_17833C();
    v14 = swift_allocError(&type metadata for MenuLikeStateController.MenuLikeStateErrorType, v13, 0, 0);
    *v15 = 0;
    swift_willThrow(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_17688C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_176AF0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    v4 = sub_1768F8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1768F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56));
}

uint64_t sub_176908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_31E6E8 != -1)
    swift_once(&qword_31E6E8, sub_1762EC);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_5240C(v2, (uint64_t)qword_326F90);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v12 = v11;
    *(_QWORD *)(v0 + 48) = sub_57CD8(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "error trying to authenticate with error : %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
  }

  swift_willThrow(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_176AF0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MenuLikeStateController.authAndSubmitExplicitDecline(context:data:assetInfo:tracker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v8 = swift_task_alloc(dword_326FB4);
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)v8 = v5;
  *(_QWORD *)(v8 + 8) = sub_64780;
  *(_QWORD *)(v8 + 72) = a4;
  *(_QWORD *)(v8 + 80) = v4;
  *(_QWORD *)(v8 + 64) = a3;
  *(_WORD *)(v8 + 128) = 258;
  return swift_task_switch(sub_1764F4, 0, 0);
}

uint64_t sub_176B9C(uint64_t a1, uint64_t a2, char a3, int a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[4];
  int v25;
  __int128 v26[2];

  v25 = a4;
  v9 = sub_5C154(&qword_326FF8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_5C154(&qword_329740);
  __chkstk_darwin(v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  sub_5E0D8(a2, (uint64_t)v26);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(a5);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 74) & ~v18;
  v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_2EFC98, v20 + 8, v18 | 7);
  *(_QWORD *)(v21 + 16) = v17;
  *(_QWORD *)(v21 + 24) = &protocol witness table for MainActor;
  sub_5DC98(v26, v21 + 32);
  *(_BYTE *)(v21 + 72) = a3;
  *(_BYTE *)(v21 + 73) = v25;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(v21 + v19, v12, v9);
  *(_QWORD *)(v21 + v20) = a5;
  v22 = sub_1D979C((uint64_t)v15, (uint64_t)&unk_327008, v21);
  return swift_release(v22);
}

uint64_t sub_176D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 280) = a7;
  *(_QWORD *)(v8 + 288) = a8;
  *(_BYTE *)(v8 + 258) = a6;
  *(_BYTE *)(v8 + 257) = a5;
  *(_QWORD *)(v8 + 272) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 296) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 304) = v10;
  *(_QWORD *)(v8 + 312) = v11;
  return swift_task_switch(sub_176DBC, v10, v11);
}

uint64_t sub_176DBC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  NSString v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_QWORD *)v0[34];
  v2 = v1[3];
  v3 = v1[4];
  sub_66898(v1, v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 288))(v2, v3);
  v0[40] = result;
  v0[41] = v5;
  if (v5)
  {
    v6 = v0 + 10;
    v7 = (void *)objc_opt_self(BSUIContentTasteController);
    v0[42] = v7;
    v8 = objc_msgSend(v7, "sharedController");
    v0[43] = v8;
    v9 = String._bridgeToObjectiveC()();
    v0[44] = v9;
    v0[15] = v0 + 31;
    v0[10] = v0;
    v0[11] = sub_176ED8;
    v10 = swift_continuation_init(v0 + 10, 0);
    v0[26] = _NSConcreteStackBlock;
    v11 = v0 + 26;
    v11[1] = 0x40000000;
    v11[2] = sub_177710;
    v11[3] = &unk_2EFCB0;
    v11[4] = v10;
    objc_msgSend(v8, "fetchTasteTypeForStoreID:completion:", v9, v11);
    return swift_continuation_await(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_176ED8()
{
  uint64_t v0;

  return swift_task_switch(sub_176F1C, *(_QWORD *)(*(_QWORD *)v0 + 304), *(_QWORD *)(*(_QWORD *)v0 + 312));
}

uint64_t sub_176F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  int v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  id v20;
  NSString v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  __n128 v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = v0 + 264;
  v3 = *(void **)(v0 + 344);
  v4 = *(void **)(v0 + 352);
  v5 = *(unsigned __int8 *)(v0 + 257);
  *(_QWORD *)(v0 + 360) = v1;

  *(_QWORD *)(v0 + 248) = v1;
  if (v5 != 2)
  {
    if (v1 == 2)
    {
      v11 = *(_BYTE *)(v0 + 257) & 1;
    }
    else if (v1 == 1)
    {
      v11 = (2 * (*(_BYTE *)(v0 + 257) & 1)) ^ 2;
    }
    else
    {
      if (v1)
      {
        v23 = *(_QWORD *)(v0 + 328);
        swift_release(*(_QWORD *)(v0 + 296));
        swift_bridgeObjectRelease(v23);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      if ((*(_BYTE *)(v0 + 257) & 1) != 0)
        v11 = 1;
      else
        v11 = 2;
    }
    *(_QWORD *)(v0 + 248) = v11;
    *(_QWORD *)(v0 + 368) = v11;
    v20 = objc_msgSend(*(id *)(v0 + 336), "sharedController");
    *(_QWORD *)(v0 + 376) = v20;
    v21 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 384) = v21;
    *(_QWORD *)(v0 + 56) = v2;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1772A0;
    *(_QWORD *)(v0 + 240) = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 208) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 216) = 0x40000000;
    *(_QWORD *)(v0 + 224) = sub_94150;
    *(_QWORD *)(v0 + 232) = &unk_2EFD08;
    objc_msgSend(v20, "setTasteType:forStoreID:completion:", v11, v21, v0 + 208);
    v15 = v0 + 16;
    return swift_continuation_await(v15);
  }
  *(_BYTE *)(v0 + 259) = 1;
  *(_QWORD *)(v0 + 392) = v1;
  v6 = *(unsigned __int8 *)(v0 + 258);
  if (v6 != 2)
  {
    v12 = v6 & 1;
    v13 = objc_msgSend(*(id *)(v0 + 336), "sharedController");
    *(_QWORD *)(v0 + 400) = v13;
    v14 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 408) = v14;
    *(_QWORD *)(v0 + 184) = v2;
    *(_QWORD *)(v0 + 144) = v0;
    *(_QWORD *)(v0 + 152) = sub_17754C;
    *(_QWORD *)(v0 + 240) = swift_continuation_init(v0 + 144, 0);
    *(_QWORD *)(v0 + 208) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 216) = 0x40000000;
    *(_QWORD *)(v0 + 224) = sub_94150;
    *(_QWORD *)(v0 + 232) = &unk_2EFCF0;
    objc_msgSend(v13, "setExplicitlyDeclined:forStoreID:completion:", v12, v14, v0 + 208);
    v15 = v0 + 144;
    return swift_continuation_await(v15);
  }
  swift_release(*(_QWORD *)(v0 + 296));
  if (*(_BYTE *)(v0 + 259) == 1)
  {
    v7 = *(void **)(v0 + 288);
    if (v7)
    {
      v8 = *(_QWORD *)(v0 + 392);
      v9 = *(_QWORD *)(v0 + 328);
      if (*(_QWORD *)(v0 + 360) != v8)
      {
        v24 = *(_QWORD *)(v0 + 320);
        sub_5E0D8(*(_QWORD *)(v0 + 272), v0 + 208);
        v25 = (_QWORD *)swift_allocObject(&unk_2EFCD8, 88, 7);
        v25[2] = v24;
        v25[3] = v9;
        sub_5DC98((__int128 *)(v0 + 208), (uint64_t)(v25 + 4));
        v25[9] = v7;
        v25[10] = v8;
        v26 = v7;
        BATracker.transaction(_:)(sub_17852C, v25, v27);
        swift_release(v25);
        goto LABEL_23;
      }
      v10 = *(_QWORD *)(v0 + 328);
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 328);
    }
    swift_bridgeObjectRelease(v10);
LABEL_23:
    swift_beginAccess(v0 + 248, v0 + 208, 0, 0);
    *(_QWORD *)(v0 + 264) = *(_QWORD *)(v0 + 248);
    v28 = sub_5C154(&qword_326FF8);
    CheckedContinuation.resume(returning:)(v0 + 264, v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 328));
  v16 = sub_17833C();
  v17 = swift_allocError(&type metadata for MenuLikeStateController.MenuLikeStateErrorType, v16, 0, 0);
  *v18 = 1;
  *(_QWORD *)(v0 + 208) = v17;
  v19 = sub_5C154(&qword_326FF8);
  CheckedContinuation.resume(throwing:)(v0 + 208, v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1772A0()
{
  uint64_t v0;

  return swift_task_switch(sub_1772E4, *(_QWORD *)(*(_QWORD *)v0 + 304), *(_QWORD *)(*(_QWORD *)v0 + 312));
}

uint64_t sub_1772E4()
{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  __n128 v20;
  uint64_t v21;

  v1 = *(void **)(v0 + 384);
  v2 = *(_BYTE *)(v0 + 264);

  v3 = *(_QWORD *)(v0 + 368);
  *(_BYTE *)(v0 + 259) = v2;
  *(_QWORD *)(v0 + 392) = v3;
  v4 = *(unsigned __int8 *)(v0 + 258);
  if (v4 != 2)
  {
    v9 = v4 & 1;
    v10 = objc_msgSend(*(id *)(v0 + 336), "sharedController");
    *(_QWORD *)(v0 + 400) = v10;
    v11 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 408) = v11;
    *(_QWORD *)(v0 + 184) = v0 + 264;
    *(_QWORD *)(v0 + 144) = v0;
    *(_QWORD *)(v0 + 152) = sub_17754C;
    *(_QWORD *)(v0 + 240) = swift_continuation_init(v0 + 144, 0);
    *(_QWORD *)(v0 + 208) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 216) = 0x40000000;
    *(_QWORD *)(v0 + 224) = sub_94150;
    *(_QWORD *)(v0 + 232) = &unk_2EFCF0;
    objc_msgSend(v10, "setExplicitlyDeclined:forStoreID:completion:", v9, v11, v0 + 208);
    return swift_continuation_await(v0 + 144);
  }
  swift_release(*(_QWORD *)(v0 + 296));
  if (*(_BYTE *)(v0 + 259) == 1)
  {
    v5 = *(void **)(v0 + 288);
    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 392);
      v7 = *(_QWORD *)(v0 + 328);
      if (*(_QWORD *)(v0 + 360) != v6)
      {
        v17 = *(_QWORD *)(v0 + 320);
        sub_5E0D8(*(_QWORD *)(v0 + 272), v0 + 208);
        v18 = (_QWORD *)swift_allocObject(&unk_2EFCD8, 88, 7);
        v18[2] = v17;
        v18[3] = v7;
        sub_5DC98((__int128 *)(v0 + 208), (uint64_t)(v18 + 4));
        v18[9] = v5;
        v18[10] = v6;
        v19 = v5;
        BATracker.transaction(_:)(sub_17852C, v18, v20);
        swift_release(v18);
        goto LABEL_11;
      }
      v8 = *(_QWORD *)(v0 + 328);
    }
    else
    {
      v8 = *(_QWORD *)(v0 + 328);
    }
    swift_bridgeObjectRelease(v8);
LABEL_11:
    swift_beginAccess(v0 + 248, v0 + 208, 0, 0);
    *(_QWORD *)(v0 + 264) = *(_QWORD *)(v0 + 248);
    v21 = sub_5C154(&qword_326FF8);
    CheckedContinuation.resume(returning:)(v0 + 264, v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 328));
  v13 = sub_17833C();
  v14 = swift_allocError(&type metadata for MenuLikeStateController.MenuLikeStateErrorType, v13, 0, 0);
  *v15 = 1;
  *(_QWORD *)(v0 + 208) = v14;
  v16 = sub_5C154(&qword_326FF8);
  CheckedContinuation.resume(throwing:)(v0 + 208, v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17754C()
{
  uint64_t v0;

  return swift_task_switch(sub_177590, *(_QWORD *)(*(_QWORD *)v0 + 304), *(_QWORD *)(*(_QWORD *)v0 + 312));
}

uint64_t sub_177590()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  __n128 v14;
  uint64_t v15;

  v2 = *(void **)(v0 + 400);
  v1 = *(void **)(v0 + 408);
  swift_release(*(_QWORD *)(v0 + 296));

  if (*(_BYTE *)(v0 + 259) == 1)
  {
    v3 = *(void **)(v0 + 288);
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 392);
      v5 = *(_QWORD *)(v0 + 328);
      if (*(_QWORD *)(v0 + 360) != v4)
      {
        v11 = *(_QWORD *)(v0 + 320);
        sub_5E0D8(*(_QWORD *)(v0 + 272), v0 + 208);
        v12 = (_QWORD *)swift_allocObject(&unk_2EFCD8, 88, 7);
        v12[2] = v11;
        v12[3] = v5;
        sub_5DC98((__int128 *)(v0 + 208), (uint64_t)(v12 + 4));
        v12[9] = v3;
        v12[10] = v4;
        v13 = v3;
        BATracker.transaction(_:)(sub_17852C, v12, v14);
        swift_release(v12);
        goto LABEL_9;
      }
      v6 = *(_QWORD *)(v0 + 328);
    }
    else
    {
      v6 = *(_QWORD *)(v0 + 328);
    }
    swift_bridgeObjectRelease(v6);
LABEL_9:
    swift_beginAccess(v0 + 248, v0 + 208, 0, 0);
    *(_QWORD *)(v0 + 264) = *(_QWORD *)(v0 + 248);
    v15 = sub_5C154(&qword_326FF8);
    CheckedContinuation.resume(returning:)(v0 + 264, v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 328));
  v7 = sub_17833C();
  v8 = swift_allocError(&type metadata for MenuLikeStateController.MenuLikeStateErrorType, v7, 0, 0);
  *v9 = 1;
  *(_QWORD *)(v0 + 208) = v8;
  v10 = sub_5C154(&qword_326FF8);
  CheckedContinuation.resume(throwing:)(v0 + 208, v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_177710(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
  *(_QWORD *)v4 = a2;
  *(_BYTE *)(v4 + 8) = a3;
  return swift_continuation_resume(v3);
}

uint64_t sub_177728(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(_BYTE *, uint64_t, uint64_t);
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  void *v42;
  Swift::String_optional v43;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v46;
  Swift::String_optional v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  unint64_t *v90;
  void *v91;
  uint64_t v92;
  __int16 v94;
  uint64_t v95;
  _BYTE v96[4];
  int v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  _OWORD v115[3];

  v111 = a6;
  v112 = a1;
  v107 = a5;
  v100 = a3;
  v114 = a2;
  v7 = sub_5C154(&qword_327010);
  __chkstk_darwin(v7);
  v104 = &v96[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_5C154(&qword_327018);
  __chkstk_darwin(v9);
  v103 = &v96[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_5C154(&qword_327020);
  __chkstk_darwin(v11);
  v113 = &v96[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_5C154(&qword_327028);
  __chkstk_darwin(v13);
  v15 = &v96[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_5C154(&qword_327030);
  v17 = __chkstk_darwin(v16);
  v19 = &v96[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for ContentType(0, v17);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = &v96[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = type metadata accessor for ContentData(0);
  v109 = *(_QWORD *)(v24 - 8);
  v110 = v24;
  v25 = __chkstk_darwin(v24);
  v108 = &v96[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = type metadata accessor for BooksFeatureFlag(0, v25);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v31 = &v96[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v28 + 104))(v31, enum case for BooksFeatureFlag.unifiedProductPage(_:), v27, v29);
  v32 = sub_648E0(&qword_320358, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
  v33 = sub_17853C();
  v97 = RawRepresentable<>.isEnabled.getter(v27, v32, v33);
  (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v31, v27);
  v34 = a4[3];
  v35 = a4[4];
  sub_66898(a4, v34);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  v37 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 104);
  if (v36 == 3)
    v38 = (unsigned int *)&enum case for ContentType.audiobook(_:);
  else
    v38 = (unsigned int *)&enum case for ContentType.book(_:);
  v39 = *v38;
  v105 = v23;
  v37(v23, v39, v20);
  v40 = v114;
  v41._countAndFlagsBits = v114;
  v42 = v100;
  v41._object = v100;
  v43 = BATracker.contentPrivateID(for:)(v41);
  if (v43.value._object)
    countAndFlagsBits = v43.value._countAndFlagsBits;
  else
    countAndFlagsBits = 0;
  if (v43.value._object)
    object = v43.value._object;
  else
    object = (void *)0xE000000000000000;
  v101 = object;
  v102 = countAndFlagsBits;
  v46._countAndFlagsBits = v40;
  v46._object = v42;
  v47 = BATracker.contentUserID(for:)(v46);
  if (v47.value._object)
    v48 = v47.value._countAndFlagsBits;
  else
    v48 = 0;
  v99 = v48;
  if (v47.value._object)
    v49 = v47.value._object;
  else
    v49 = (void *)0xE000000000000000;
  v98 = v49;
  v50 = enum case for ContentAcquisitionType.storeBought(_:);
  v51 = type metadata accessor for ContentAcquisitionType(0);
  v52 = *(_QWORD *)(v51 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 104))(v19, v50, v51);
  v53 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v52 + 56);
  v106 = v19;
  v53(v19, 0, 1, v51);
  v54 = type metadata accessor for ContentSubType(0);
  v55 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56);
  v107 = v15;
  v55(v15, 1, 1, v54);
  v56 = a4[3];
  v57 = a4[4];
  sub_66898(a4, v56);
  v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 304))(v56, v57);
  v60 = Optional<A>.int32Value.getter(v58, v59 & 1);
  type metadata accessor for EventReporter(0);
  v61 = (void *)static EventReporter.shared.getter();
  v62 = v42;
  dispatch thunk of EventReporter.seriesType(for:)(v40, v42);

  v63 = enum case for ProductionType.unknown(_:);
  v64 = type metadata accessor for ProductionType(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = v103;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 104))(v103, v63, v64);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v64);
  v67 = type metadata accessor for MangaFlag(0);
  v68 = v104;
  (*(void (**)(void))(*(_QWORD *)(v67 - 8) + 56))();
  if ((v97 & 1) != 0)
  {
    v69 = a4[3];
    v70 = a4[4];
    sub_66898(a4, v69);
    v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 296))(v69, v70) & 1;
    v72 = a4[3];
    v73 = a4[4];
    sub_66898(a4, v72);
    v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 56))(v72, v73);
    v76 = v75;
  }
  else
  {
    v74 = 0;
    v76 = 0;
    v71 = 2;
  }
  v77 = swift_bridgeObjectRetain(v62);
  LOBYTE(v115[0]) = 1;
  v95 = v76;
  HIBYTE(v94) = 2;
  LOBYTE(v94) = v71;
  v78 = v108;
  ContentData.init(contentID:contentType:contentPrivateID:contentUserID:contentAcquisitionType:contentSubType:contentLength:supplementalContentCount:seriesType:productionType:mangaFlag:isUnified:isAccoladedContent:contentKind:)(v114, v62, v105, v102, v101, v99, v98, v106, v77, v107, 0x100000000, v60 | ((HIDWORD(v60) & 1) << 32), v113, v66, v68, v94, v74, v95);
  v79 = sub_5C154((uint64_t *)&unk_3224F0);
  v80 = type metadata accessor for DataEventTrait(0);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(unsigned __int8 *)(v81 + 80);
  v83 = (v82 + 32) & ~v82;
  v84 = swift_allocObject(v79, v83 + *(_QWORD *)(v81 + 72), v82 | 7);
  *(_OWORD *)(v84 + 16) = xmmword_258070;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v84 + v83, enum case for DataEventTrait.onlyOnce(_:), v80);
  v85 = sub_648E0(&qword_326250, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  v86 = v110;
  AccessTracker.push<A>(data:traits:file:line:)(v78, v84, 0xD000000000000080, 0x80000000002737B0, 165, v110, v85);
  v87 = swift_bridgeObjectRelease(v84);
  if (v111 == 1)
  {
    v88 = type metadata accessor for LoveEvent(0, v87);
    v89 = (uint64_t (*)(uint64_t))&type metadata accessor for LoveEvent;
    v90 = (unint64_t *)&unk_327040;
    v91 = &protocol conformance descriptor for LoveEvent;
  }
  else
  {
    v88 = type metadata accessor for DislikeEvent(0, v87);
    v89 = (uint64_t (*)(uint64_t))&type metadata accessor for DislikeEvent;
    v90 = (unint64_t *)&unk_327038;
    v91 = &protocol conformance descriptor for DislikeEvent;
  }
  v92 = sub_648E0(v90, v89, (uint64_t)v91);
  memset(v115, 0, 32);
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v88, 0, v115, 0, 0, v88, v92);
  sub_6EF98((uint64_t)v115);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v109 + 8))(v78, v86);
}

uint64_t sub_177DFC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;

  v10 = swift_task_alloc(dword_326FB4);
  *(_QWORD *)(v6 + 16) = v10;
  *(_QWORD *)v10 = v6;
  *(_QWORD *)(v10 + 8) = sub_17869C;
  *(_QWORD *)(v10 + 72) = a5;
  *(_QWORD *)(v10 + 80) = v5;
  *(_QWORD *)(v10 + 64) = a4;
  *(_BYTE *)(v10 + 129) = 2;
  *(_BYTE *)(v10 + 128) = a1;
  return swift_task_switch(sub_1764F4, 0, 0);
}

uint64_t sub_177E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v8 = swift_task_alloc(dword_326FB4);
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)v8 = v5;
  *(_QWORD *)(v8 + 8) = sub_7BFF8;
  *(_QWORD *)(v8 + 72) = a4;
  *(_QWORD *)(v8 + 80) = v4;
  *(_QWORD *)(v8 + 64) = a3;
  *(_WORD *)(v8 + 128) = 258;
  return swift_task_switch(sub_1764F4, 0, 0);
}

uint64_t dispatch thunk of LikeStateController.authAndsubmitLikeState(liked:context:data:assetInfo:tracker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v15;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = *(int **)(a7 + 8);
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  *(_QWORD *)(v7 + 16) = v16;
  *v16 = v7;
  v16[1] = sub_177F9C;
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_177F9C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of LikeStateController.authAndSubmitExplicitDecline(context:data:assetInfo:tracker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(int **)(a6 + 16);
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc(v13[1]);
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = sub_64780;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of AuthenticationServiceProvider.signIn(enableAccountCreation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_178100;
  return v10(a1, a2, a3);
}

uint64_t sub_178100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v8;

  v8 = *v3;
  swift_task_dealloc(*(_QWORD *)(*v3 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3);
}

uint64_t destroy for MenuLikeStateController(_QWORD *a1)
{
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 5);
}

uint64_t initializeWithCopy for MenuLikeStateController(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

_QWORD *assignWithCopy for MenuLikeStateController(_QWORD *a1, _QWORD *a2)
{
  sub_65938(a1, a2);
  sub_65938(a1 + 5, a2 + 5);
  return a1;
}

__n128 initializeWithTake for MenuLikeStateController(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for MenuLikeStateController(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuLikeStateController(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuLikeStateController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MenuLikeStateController()
{
  return &type metadata for MenuLikeStateController;
}

unint64_t sub_17833C()
{
  unint64_t result;

  result = qword_326FF0;
  if (!qword_326FF0)
  {
    result = swift_getWitnessTable(&unk_262070, &type metadata for MenuLikeStateController.MenuLikeStateErrorType);
    atomic_store(result, (unint64_t *)&qword_326FF0);
  }
  return result;
}

uint64_t sub_178380(uint64_t a1)
{
  uint64_t v1;

  return sub_176B9C(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(unsigned __int8 *)(v1 + 25), *(void **)(v1 + 32));
}

uint64_t sub_178394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_5C154(&qword_326FF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 74) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_178430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_5C154(&qword_326FF8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 74) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + 32;
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = *(_BYTE *)(v1 + 73);
  v12 = *(_BYTE *)(v1 + 72);
  v13 = (_QWORD *)swift_task_alloc(dword_327004);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_64780;
  return sub_176D44(a1, v6, v7, v8, v12, v11, v9, v10);
}

uint64_t sub_1784F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_17852C(uint64_t a1)
{
  uint64_t v1;

  return sub_177728(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (_QWORD *)(v1 + 32), *(_BYTE **)(v1 + 72), *(_QWORD *)(v1 + 80));
}

unint64_t sub_17853C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_320360;
  if (!qword_320360)
  {
    v1 = sub_667D0(&qword_320368);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticFeatureFlagsKey<A>, v1);
    atomic_store(result, (unint64_t *)&qword_320360);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MenuLikeStateController.MenuLikeStateErrorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1785D4 + 4 * byte_261F25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_178608 + 4 * byte_261F20[v4]))();
}

uint64_t sub_178608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_178610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x178618);
  return result;
}

uint64_t sub_178624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17862CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_178630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_178638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MenuLikeStateController.MenuLikeStateErrorType()
{
  return &type metadata for MenuLikeStateController.MenuLikeStateErrorType;
}

unint64_t sub_178658()
{
  unint64_t result;

  result = qword_327048;
  if (!qword_327048)
  {
    result = swift_getWitnessTable(&unk_262048, &type metadata for MenuLikeStateController.MenuLikeStateErrorType);
    atomic_store(result, (unint64_t *)&qword_327048);
  }
  return result;
}

void *sub_1786A4()
{
  NSString *v0;
  NSString *v1;
  void *v2;
  void *v3;

  v0 = UIFontDescriptorSystemDesignSerif;
  v1 = UIFontTextStyleTitle2;
  v2 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(0);

  v3 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(v2);
  return v3;
}

void *_s11BookStoreUI21ToolKitTextAttributesV13toolbarHeader4withSDySo21NSAttributedStringKeyaypGSo17UITraitCollectionC_tFZ_0(void *a1)
{
  void *v2;
  NSString *v3;
  id v4;
  UIContentSizeCategory v5;
  NSString *v6;
  void *v7;

  v2 = (void *)UIFontTextStyleTitle0;
  v3 = UIFontDescriptorSystemDesignSerif;
  v4 = v2;
  if (objc_msgSend(a1, "horizontalSizeClass") == (char *)&dword_0 + 1)
  {
    v5 = UIContentSizeCategoryAccessibilityMedium;
    v6 = UIContentSizeCategoryAccessibilityMedium;
  }
  else
  {
    v5 = 0;
  }
  v7 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(0);

  return v7;
}

ValueMetadata *type metadata accessor for ToolKitTextAttributes()
{
  return &type metadata for ToolKitTextAttributes;
}

void sub_17887C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t i;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = sub_5C154(&qword_327220);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v30 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - v9;
  v11 = *(_QWORD *)(a1 + 64);
  v28 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v29 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v15 = 0;
  v16 = _swiftEmptyArrayStorage;
  v27 = a1;
  if (v14)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v15 >= v29)
    goto LABEL_33;
  v20 = *(_QWORD *)(v28 + 8 * v15);
  if (v20)
    goto LABEL_19;
  v21 = v15 + 1;
  if (v15 + 1 >= v29)
  {
LABEL_33:
    swift_release(a1);
    return;
  }
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (!v20)
  {
    v21 = v15 + 2;
    if (v15 + 2 >= v29)
      goto LABEL_33;
    v20 = *(_QWORD *)(v28 + 8 * v21);
    if (!v20)
    {
      v21 = v15 + 3;
      if (v15 + 3 >= v29)
        goto LABEL_33;
      v20 = *(_QWORD *)(v28 + 8 * v21);
      if (!v20)
      {
        v21 = v15 + 4;
        if (v15 + 4 < v29)
        {
          v20 = *(_QWORD *)(v28 + 8 * v21);
          if (v20)
            goto LABEL_18;
          while (1)
          {
            v15 = v21 + 1;
            if (__OFADD__(v21, 1))
              break;
            if (v15 >= v29)
              goto LABEL_33;
            v20 = *(_QWORD *)(v28 + 8 * v15);
            ++v21;
            if (v20)
              goto LABEL_19;
          }
LABEL_35:
          __break(1u);
          return;
        }
        goto LABEL_33;
      }
    }
  }
LABEL_18:
  v15 = v21;
LABEL_19:
  v14 = (v20 - 1) & v20;
  for (i = __clz(__rbit64(v20)) + (v15 << 6); ; i = v17 | (v15 << 6))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v32 = v22;
    swift_bridgeObjectRetain(v22);
    sub_179DC8(&v32, v5);
    if (v1)
      break;
    v23 = swift_bridgeObjectRelease(v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v6 + 48))(v5, 1, v31, v23) == 1)
    {
      sub_5E09C((uint64_t)v5, &qword_327220);
      if (!v14)
        goto LABEL_7;
    }
    else
    {
      sub_5E160((uint64_t)v5, (uint64_t)v10, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      sub_5E160((uint64_t)v10, v30, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (_QWORD *)sub_5786C(0, v16[2] + 1, 1, (unint64_t)v16);
      v25 = v16[2];
      v24 = v16[3];
      if (v25 >= v24 >> 1)
        v16 = (_QWORD *)sub_5786C(v24 > 1, v25 + 1, 1, (unint64_t)v16);
      v16[2] = v25 + 1;
      sub_5E160(v30, (uint64_t)v16+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v25, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      a1 = v27;
      if (!v14)
        goto LABEL_7;
    }
LABEL_6:
    v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
  }
  swift_bridgeObjectRelease(v16);
  swift_release(a1);
  swift_bridgeObjectRelease(v22);
}

void sub_178BE8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10F070(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_17C6AC(v5);
  *a1 = v3;
}

_QWORD *sub_178C68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = sub_5C154(&qword_327248);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v23 = (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(type metadata accessor for ReadingHistory.DayEntry(0, v9) - 8);
  v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v21 = a1;
  v16 = swift_bridgeObjectRetain(a1);
  v17 = _swiftEmptyArrayStorage;
  v22 = v5;
  do
  {
    sub_178E9C(v14, v4, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_5E09C((uint64_t)v4, &qword_327248);
    }
    else
    {
      sub_5E160((uint64_t)v4, (uint64_t)v11, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      sub_5E160((uint64_t)v11, v23, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v17 = (_QWORD *)sub_57858(0, v17[2] + 1, 1, (unint64_t)v17);
      v19 = v17[2];
      v18 = v17[3];
      if (v19 >= v18 >> 1)
        v17 = (_QWORD *)sub_57858(v18 > 1, v19 + 1, 1, (unint64_t)v17);
      v17[2] = v19 + 1;
      sub_5E160(v23, (uint64_t)v17+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v19, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      v5 = v22;
    }
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease(v21);
  return v17;
}

uint64_t sub_178E9C@<X0>(uint64_t a1@<X0>, char *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int *v47;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = type metadata accessor for ReadingHistory.Day(0, a3);
  v51 = *(char **)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingHistory.DayEntry(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  v54 = v10;
  __chkstk_darwin(v9);
  v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = ReadingHistory.DayEntry.date.getter(v17);
  v22 = v21;
  sub_17929C(v20, v21, v14);
  v23 = swift_bridgeObjectRelease(v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48))(v14, 1, v15, v23) == 1)
  {
    v51 = a2;
    sub_5E09C((uint64_t)v14, &qword_31F128);
    if (qword_31E630 != -1)
      swift_once(&qword_31E630, sub_126BE4);
    v24 = type metadata accessor for Logger(0);
    sub_5240C(v24, (uint64_t)qword_325220);
    v26 = v53;
    v25 = v54;
    v27 = v52;
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, a1, v53);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v57 = v32;
      v33.n128_u64[0] = 136315138;
      *(_DWORD *)v31 = 136315138;
      v34 = ReadingHistory.DayEntry.date.getter(v33);
      v36 = v35;
      v55 = sub_57CD8(v34, v35, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v31 + 4, v31 + 12);
      v37 = swift_bridgeObjectRelease(v36);
      (*(void (**)(char *, uint64_t, __n128))(v54 + 8))(v27, v26, v37);
      _os_log_impl(&dword_0, v29, v30, "Error creating dayEntry. Unable to make date from string '%s'", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v26);
    }

    v49 = v51;
    v50 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
  }
  else
  {
    v38 = *(uint64_t (**)(char *, char *, uint64_t))(v16 + 32);
    v39 = v38(v19, v14, v15);
    v40 = ReadingHistory.DayEntry.day.getter(v39);
    v54 = ReadingHistory.Day.readingTime.getter(v40);
    v41 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v51 + 1);
    v42 = v41(v8, v5);
    v43 = ReadingHistory.DayEntry.day.getter(v42);
    v53 = ReadingHistory.Day.goal.getter(v43);
    v44 = v41(v8, v5);
    v45 = ReadingHistory.DayEntry.day.getter(v44);
    v46 = ReadingHistory.Day.isStreakDay.getter(v45);
    v41(v8, v5);
    v38(a2, v19, v15);
    v47 = (int *)type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
    *(_QWORD *)&a2[v47[5]] = v54;
    *(_QWORD *)&a2[v47[6]] = v53;
    a2[v47[7]] = v46 & 1;
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v47 - 1) + 56))(a2, 0, 1, v47);
  }
}

uint64_t sub_17929C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  NSString v14;
  id v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_31E6F0 != -1)
    swift_once(&qword_31E6F0, sub_17C63C);
  v13 = (void *)qword_327050;
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "dateFromString:", v14);

  if (v15)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v16(v12, v9, v6);
    v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v17(v12, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
    {
      v16(a3, v12, v6);
      v18 = a3;
      v19 = 0;
      return v17(v18, v19, 1, v6);
    }
  }
  else
  {
    v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v17(v12, 1, 1, v6);
  }
  sub_5E09C((uint64_t)v12, &qword_31F128);
  if (qword_31E630 != -1)
    swift_once(&qword_31E630, sub_126BE4);
  v20 = type metadata accessor for Logger(0);
  sub_5240C(v20, (uint64_t)qword_325220);
  swift_bridgeObjectRetain_n(a2, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v28 = a3;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v30 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a2);
    v29 = sub_57CD8(a1, a2, &v30);
    a3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl(&dword_0, v22, v23, "Error creating date from string: %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v18 = a3;
  v19 = 1;
  return v17(v18, v19, 1, v6);
}

uint64_t sub_1795D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;

  v2 = sub_5C154(&qword_31F128);
  v48 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - v10;
  v12 = &_swiftEmptyDictionarySingleton;
  v49 = &_swiftEmptyDictionarySingleton;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v40 = v2;
    v41 = a1;
    v14 = *(unsigned __int8 *)(v9 + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = a1 + v15;
    v17 = *(_QWORD *)(v9 + 72);
    v43 = v14 | 7;
    v44 = v17 + v15;
    swift_bridgeObjectRetain(a1);
    v42 = xmmword_258070;
    v46 = v15;
    v47 = v7;
    v45 = v17;
    while (1)
    {
      sub_5E11C(v16, (uint64_t)v11, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      sub_179944((uint64_t)v4);
      v20 = sub_58508((uint64_t)v4);
      v21 = v12[2];
      v22 = (v19 & 1) == 0;
      v23 = v21 + v22;
      if (__OFADD__(v21, v22))
        break;
      v24 = v19;
      if (v12[3] < v23)
      {
        sub_13C4B4(v23, 1);
        v12 = v49;
        v25 = sub_58508((uint64_t)v4);
        if ((v24 & 1) != (v26 & 1))
          goto LABEL_20;
        v20 = v25;
      }
      if ((v24 & 1) != 0)
      {
        sub_5E09C((uint64_t)v4, &qword_31F128);
        v12 = v49;
        v27 = v49[7];
        sub_5E160((uint64_t)v11, (uint64_t)v7, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
        v28 = *(_QWORD *)(v27 + 8 * v20);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
        *(_QWORD *)(v27 + 8 * v20) = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v28 = sub_57858(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
          *(_QWORD *)(v27 + 8 * v20) = v28;
        }
        v31 = *(_QWORD *)(v28 + 16);
        v30 = *(_QWORD *)(v28 + 24);
        if (v31 >= v30 >> 1)
        {
          v28 = sub_57858(v30 > 1, v31 + 1, 1, v28);
          *(_QWORD *)(v27 + 8 * v20) = v28;
        }
        *(_QWORD *)(v28 + 16) = v31 + 1;
        v17 = v45;
        v15 = v46;
        v18 = v28 + v46 + v31 * v45;
        v7 = v47;
        sub_5E160((uint64_t)v47, v18, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      }
      else
      {
        v32 = sub_5C154(&qword_31F118);
        v33 = swift_allocObject(v32, v44, v43);
        *(_OWORD *)(v33 + 16) = v42;
        sub_5E160((uint64_t)v11, v33 + v15, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
        v12[(v20 >> 6) + 8] |= 1 << v20;
        sub_66F14((uint64_t)v4, v12[6] + *(_QWORD *)(v48 + 72) * v20, &qword_31F128);
        *(_QWORD *)(v12[7] + 8 * v20) = v33;
        v34 = v12[2];
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        if (v35)
          goto LABEL_19;
        v12[2] = v36;
      }
      v16 += v17;
      if (!--v13)
      {
        swift_bridgeObjectRelease(v41);
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v40);
    __break(1u);
    result = swift_release(v49);
    __break(1u);
  }
  else
  {
LABEL_17:
    sub_17887C((uint64_t)v12);
    v38 = v37;
    swift_release(v12);
    v49 = v38;
    swift_bridgeObjectRetain(v38);
    sub_178BE8(&v49);
    swift_bridgeObjectRelease(v38);
    return (uint64_t)v49;
  }
  return result;
}

uint64_t sub_179944@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double (*v26)(uint64_t, _QWORD, uint64_t);
  __n128 v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __n128 v32;
  uint64_t (*v33)(char *, uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v60 = a1;
  v1 = type metadata accessor for Date(0);
  v56 = *(_QWORD *)(v1 - 8);
  v57 = v1;
  __chkstk_darwin(v1);
  v54 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5C154(&qword_31F128);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateComponents(0, v9);
  v13 = *(_QWORD *)(v12 - 8);
  v58 = v12;
  v59 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.gregorian.getter(v16);
  v17 = sub_5C154(&qword_327228);
  v19 = type metadata accessor for Calendar.Component(0, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 72);
  v22 = *(unsigned __int8 *)(v20 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v17, v23 + 2 * v21, v22 | 7);
  *(_OWORD *)(v24 + 16) = xmmword_255F00;
  v25 = v24 + v23;
  v26 = *(double (**)(uint64_t, _QWORD, uint64_t))(v20 + 104);
  v26(v25, enum case for Calendar.Component.year(_:), v19);
  v27.n128_f64[0] = v26(v25 + v21, enum case for Calendar.Component.month(_:), v19);
  v28 = sub_17E280(v24, v27);
  swift_setDeallocating(v24);
  v29 = v25;
  v30 = v15;
  v31 = v55;
  swift_arrayDestroy(v29, 2, v19);
  swift_deallocClassInstance(v24, 32, 7);
  Calendar.dateComponents(_:from:)(v28, v31);
  v32 = swift_bridgeObjectRelease(v28);
  v33 = *(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8);
  v34 = v56;
  v35 = v57;
  v36 = v33(v11, v7, v32);
  static Calendar.gregorian.getter(v36);
  Calendar.date(from:)(v30);
  ((void (*)(char *, uint64_t))v33)(v11, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v6, 1, v35) == 1)
  {
    sub_5E09C((uint64_t)v6, &qword_31F128);
    if (qword_31E630 != -1)
      swift_once(&qword_31E630, sub_126BE4);
    v37 = type metadata accessor for Logger(0);
    sub_5240C(v37, (uint64_t)qword_325220);
    v38 = v54;
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 16))(v54, v31, v35);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v62 = v43;
      *(_DWORD *)v42 = 136315138;
      v55 = v30;
      v44 = sub_648E0(&qword_327218, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v35, v44);
      v47 = v46;
      v61 = sub_57CD8(v45, v46, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v42 + 4, v42 + 12);
      v48 = swift_bridgeObjectRelease(v47);
      (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v38, v35, v48);
      _os_log_impl(&dword_0, v40, v41, "Error getting first day of month for date: %s", v42, 0xCu);
      v49 = 1;
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v59 + 8))(v55, v58);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v35);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v30, v58);
      v49 = 1;
    }
    v51 = v60;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v30, v58);
    v50 = v60;
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v60, v6, v35);
    v49 = 0;
    v51 = v50;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v51, v49, 1, v35);
}

uint64_t sub_179DC8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, __n128);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v54 = a2;
  v5 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v51 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - v12;
  v14 = type metadata accessor for DateInterval(0);
  v18 = __chkstk_darwin(v14);
  v19 = *a1;
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v46 = v17;
    v47 = v15;
    v53 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = *(unsigned __int8 *)(v6 + 80);
    v22 = v9;
    v48 = v9;
    v23 = v19;
    v19 += (v21 + 32) & ~v21;
    v24 = *(_QWORD *)(v6 + 72);
    v49 = v19 + v24 * (v20 - 1);
    v50 = v2;
    v25 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v52 + 16);
    v26 = v13;
    v25(v13, v19, v22, v18);
    v27 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v25)(v51, v49, v48);
    DateInterval.init(start:end:)(v26, v27);
    v3 = v23;
    swift_bridgeObjectRetain(v23);
    v28 = 0;
    while (1)
    {
      sub_5E11C(v19, (uint64_t)v8, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      v29 = *(_QWORD *)&v8[*(int *)(v5 + 20)];
      v30 = __OFADD__(v28, v29);
      v28 += v29;
      if (v30)
        break;
      sub_6685C((uint64_t)v8, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      v19 += v24;
      if (!--v20)
      {
        swift_bridgeObjectRelease(v23);
        v31 = v54;
        *(_QWORD *)v54 = v28;
        v32 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
        (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v31[*(int *)(v32 + 20)], v53, v47);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 0, 1, v32);
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  if (qword_31E630 != -1)
LABEL_12:
    swift_once(&qword_31E630, sub_126BE4);
  v34 = type metadata accessor for Logger(0);
  sub_5240C(v34, (uint64_t)qword_325220);
  swift_bridgeObjectRetain_n(v19, 2);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v50 = v3;
    v40 = v39;
    v57 = v39;
    *(_DWORD *)v38 = 136315138;
    swift_bridgeObjectRetain(v19);
    v42 = Array.description.getter(v41, v5);
    v44 = v43;
    swift_bridgeObjectRelease(v19);
    v55 = sub_57CD8(v42, v44, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease(v44);
    _os_log_impl(&dword_0, v36, v37, "Error getting first or last entry from entries: %s", v38, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
  }
  v45 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v54, 1, 1, v45);
}

uint64_t sub_17A1B0()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  _StringGuts.grow(_:)(53);
  v1._countAndFlagsBits = 0x203A65746164;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2 = type metadata accessor for Date(0);
  v3 = sub_648E0(&qword_327218, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._object = (void *)0x8000000000273860;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v7 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  v10._countAndFlagsBits = 0x3A6C616F67202D20;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0x6165727453736920;
  v13._object = (void *)0xEE00203A7961446BLL;
  String.append(_:)(v13);
  if (*(_BYTE *)(v0 + *(int *)(v7 + 28)))
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v7 + 28)))
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease(v15);
  return 0;
}

uint64_t sub_17A394()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t);
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v40 = type metadata accessor for Date(0);
  v0 = *(_QWORD *)(v40 - 8);
  v1 = __chkstk_darwin(v40);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.Component(0, v1);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Calendar(0, v6);
  v9 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(v44);
  v43 = 0x203A72616579;
  v44 = 0xE600000000000000;
  static Calendar.gregorian.getter(v12);
  v39 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v39(v8, enum case for Calendar.Component.year(_:), v4);
  v13 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
  DateInterval.start.getter(v13);
  v14 = Calendar.component(_:from:)(v8, v3);
  v37 = *(void (**)(char *, uint64_t))(v0 + 8);
  v15 = v40;
  v37(v3, v40);
  v36 = *(void (**)(char *, uint64_t))(v5 + 8);
  v36(v8, v4);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17 = v38;
  v16(v11, v38);
  v42 = v14;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 0x203A68746E6F6D20;
  v20._object = (void *)0xE800000000000000;
  String.append(_:)(v20);
  static Calendar.gregorian.getter(v21);
  v22 = ((uint64_t (*)(char *, _QWORD, uint64_t))v39)(v8, enum case for Calendar.Component.month(_:), v4);
  DateInterval.start.getter(v22);
  v23 = Calendar.component(_:from:)(v8, v3);
  v37(v3, v15);
  v36(v8, v4);
  v16(v11, v17);
  v42 = v23;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._object = (void *)0x8000000000273840;
  v26._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v26);
  v42 = *v41;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._countAndFlagsBits = 0x203A65676E617220;
  v29._object = (void *)0xE800000000000000;
  String.append(_:)(v29);
  v30 = type metadata accessor for DateInterval(0);
  v31 = sub_648E0(&qword_327210, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
  v33 = v32._object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v33);
  return v43;
}

uint64_t ReadingInsightsDataProvider.MonthAverage.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ReadingInsightsDataProvider.MonthAverage.description.getter()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *object;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;

  v0 = type metadata accessor for Date.FormatStyle.Symbol.Day(0);
  v49 = *(_QWORD *)(v0 - 8);
  v50 = v0;
  v1 = __chkstk_darwin(v0);
  v48 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date.FormatStyle.Symbol.Month(0, v1);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin(v3);
  v45 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date.FormatStyle.Symbol.Year(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date.FormatStyle(0, v6);
  v42 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v42 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v42 - v19;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = 0;
  v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v25 = swift_bridgeObjectRelease(v54);
  v53 = 0x203A65746164;
  v54 = 0xE600000000000000;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v24, v51, v21, v25);
  v27 = static FormatStyle<>.dateTime.getter(v26);
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v27);
  Date.FormatStyle.year(_:)(v8);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v44);
  v28 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  v29 = v28(v11, v9);
  v30 = v45;
  static Date.FormatStyle.Symbol.Month.abbreviated.getter(v29);
  Date.FormatStyle.month(_:)(v30);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v30, v47);
  v31 = v28(v14, v9);
  v32 = v48;
  static Date.FormatStyle.Symbol.Day.defaultDigits.getter(v31);
  Date.FormatStyle.day(_:)(v32);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  v28(v17, v9);
  v33 = sub_648E0(&qword_321168, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
  Date.formatted<A>(_:)(&v52, v20, v9, v33);
  v28(v20, v9);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  object = v52._object;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(object);
  v35._countAndFlagsBits = 0x203A65756C617620;
  v35._object = (void *)0xE800000000000000;
  String.append(_:)(v35);
  v36 = sub_5C154(&qword_3210B0);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_258070;
  v38 = *(_QWORD *)(v51 + *(int *)(type metadata accessor for ReadingInsightsDataProvider.MonthAverage(0) + 20));
  *(_QWORD *)(v37 + 56) = &type metadata for Double;
  *(_QWORD *)(v37 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v37 + 32) = v38;
  v39._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v37);
  v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  return v53;
}

uint64_t type metadata accessor for ReadingInsightsDataProvider.MonthAverage(uint64_t a1)
{
  return sub_64960(a1, qword_3270B0, (uint64_t)&nominal type descriptor for ReadingInsightsDataProvider.MonthAverage);
}

BOOL static ReadingInsightsDataProvider.MonthAverage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static Date.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for ReadingInsightsDataProvider.MonthAverage(0);
  return *(double *)(a1 + *(int *)(v4 + 20)) == *(double *)(a2 + *(int *)(v4 + 20));
}

uint64_t sub_17AB3C()
{
  return sub_648E0(&qword_31F130, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
}

BOOL sub_17AB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.== infix(_:_:)() & 1) != 0
      && *(double *)(a1 + *(int *)(a3 + 20)) == *(double *)(a2 + *(int *)(a3 + 20));
}

ValueMetadata *type metadata accessor for ReadingInsightsDataProvider()
{
  return &type metadata for ReadingInsightsDataProvider;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingInsightsDataProvider.MonthAverage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for ReadingInsightsDataProvider.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for ReadingInsightsDataProvider.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for ReadingInsightsDataProvider.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ReadingInsightsDataProvider.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingInsightsDataProvider.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17ADD4);
}

uint64_t sub_17ADD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReadingInsightsDataProvider.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17AE1C);
}

uint64_t sub_17AE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_17AE5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_17AED0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for DateInterval(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_17AF58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_17AF90(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_17AFEC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *sub_17B048(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_17B0A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_17B100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17B10C);
}

uint64_t sub_17B10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_17B14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17B158);
}

uint64_t sub_17B158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for ReadingInsightsDataProvider.MonthEntry(uint64_t a1)
{
  return sub_64960(a1, qword_327140, (uint64_t)&nominal type descriptor for ReadingInsightsDataProvider.MonthEntry);
}

uint64_t sub_17B1B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_17B228(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t _s11BookStoreUI27ReadingInsightsDataProviderV12MonthAverageVwxx_0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_17B2F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_17B368(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_17B3DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_17B44C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_17B4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17B4C8);
}

uint64_t sub_17B4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_17B554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17B560);
}

uint64_t sub_17B560(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for ReadingInsightsDataProvider.DayEntry(uint64_t a1)
{
  return sub_64960(a1, qword_3271D0, (uint64_t)&nominal type descriptor for ReadingInsightsDataProvider.DayEntry);
}

uint64_t sub_17B5EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_2621D0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_17B66C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  double v78;
  void (*v79)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  char *v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v102;
  uint64_t v103;

  v2 = v1;
  v82 = a1;
  v3 = type metadata accessor for DateInterval(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v83 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v89 = (char *)&v81 - v7;
  v8 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v8);
  v102 = (uint64_t)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v96 = *(_QWORD *)(v10 - 8);
  v97 = v10;
  __chkstk_darwin(v10);
  v95 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v94 = (char *)&v81 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v81 - v15;
  v17 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
  v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 - 8);
  __chkstk_darwin(v17);
  v93 = (uint64_t)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v81 - v20;
  v22 = sub_5C154(&qword_320EF8);
  __chkstk_darwin(v22);
  v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v92 = (uint64_t)&v81 - v26;
  __chkstk_darwin(v27);
  v91 = (uint64_t)&v81 - v28;
  __chkstk_darwin(v29);
  v90 = (char *)&v81 - v30;
  __chkstk_darwin(v31);
  v33 = (char *)&v81 - v32;
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v81 - v36;
  v38 = *v2;
  v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
  v39((char *)&v81 - v36, 1, 1, v3, v35);
  v98 = v33;
  v103 = v3;
  v101 = v39;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v39)(v33, 1, 1, v3);
  v40 = v82;
  v41 = v38;
  v42 = *(_QWORD *)(v38 + 16);
  if (v42)
  {
    v43 = v41 + ((*((unsigned __int8 *)v99 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v99 + 80));
    v44 = *((_QWORD *)v99 + 9);
    v81 = v41;
    swift_bridgeObjectRetain(v41);
    v87 = v17;
    v88 = v4;
    v85 = v24;
    v84 = v16;
    v100 = v37;
    v86 = v44;
    while (1)
    {
      sub_5E11C(v43, (uint64_t)v21, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      if (v21[*(int *)(v17 + 28)] == 1)
      {
        v45 = *(_QWORD **)(v4 + 48);
        v46 = 1;
        v99 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v45;
        if (!((unsigned int (*)(char *, uint64_t, uint64_t))v45)(v37, 1, v103))
        {
          DateInterval.start.getter();
          v46 = 0;
        }
        v47 = v97;
        v48 = v102;
        v49 = v46;
        v50 = v96;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v102, v49, 1, v97);
        v51 = v93;
        sub_5E11C((uint64_t)v21, v93, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v47) == 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v16, v51, v47);
          sub_5E09C(v102, &qword_31F128);
        }
        else
        {
          sub_6685C(v51, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
          (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v16, v102, v47);
        }
        v52 = v50;
        v53 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
        v54 = v94;
        v53(v94, v16, v47);
        v55 = v16;
        v56 = v95;
        v53(v95, v21, v47);
        v57 = (uint64_t)v21;
        v58 = (uint64_t)v90;
        DateInterval.init(start:end:)(v54, v56);
        v59 = v103;
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v101)(v58, 0, 1, v103);
        v60 = (uint64_t)v100;
        sub_17E4E8(v58, (uint64_t)v100);
        v61 = v91;
        sub_17E530(v60, v91);
        v62 = v92;
        sub_17E530((uint64_t)v98, v92);
        v63 = v59;
        v64 = v99;
        if (v99(v62, 1, v63) == 1)
        {
          sub_5E09C(v62, &qword_320EF8);
          sub_5E09C(v61, &qword_320EF8);
          (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v47);
          sub_6685C(v57, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
          v16 = v55;
          v17 = v87;
          v4 = v88;
          v37 = v100;
          v21 = (char *)v57;
          v44 = v86;
        }
        else
        {
          v21 = (char *)v57;
          v66 = v88;
          v67 = v64;
          v68 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 32);
          v69 = v62;
          v70 = v103;
          v68(v89, v69, v103);
          v71 = (uint64_t)v85;
          sub_17E530(v61, (uint64_t)v85);
          if (v67(v71, 1, v70) == 1)
          {
            (*(void (**)(char *, uint64_t))(v66 + 8))(v89, v103);
            sub_5E09C(v71, &qword_320EF8);
            sub_5E09C(v61, &qword_320EF8);
            v16 = v84;
            (*(void (**)(char *, uint64_t))(v96 + 8))(v84, v97);
            sub_6685C((uint64_t)v21, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
            v4 = v66;
            v44 = v86;
            v17 = v87;
            v37 = v100;
            goto LABEL_4;
          }
          v72 = v103;
          v73 = v89;
          v74 = v83;
          v75 = ((uint64_t (*)(char *, char *, uint64_t))v68)(v83, v85, v103);
          v76 = DateInterval.duration.getter(v75);
          v78 = DateInterval.duration.getter(v77);
          v79 = *(void (**)(char *, uint64_t))(v66 + 8);
          v79(v74, v72);
          v79(v73, v72);
          sub_5E09C(v61, &qword_320EF8);
          v16 = v84;
          (*(void (**)(char *, uint64_t))(v96 + 8))(v84, v97);
          sub_6685C((uint64_t)v21, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
          v4 = v66;
          v44 = v86;
          v17 = v87;
          v37 = v100;
          if (v78 > v76)
            goto LABEL_4;
        }
        v65 = (uint64_t)v98;
        sub_5E09C((uint64_t)v98, &qword_320EF8);
        sub_17E530((uint64_t)v37, v65);
      }
      else
      {
        sub_6685C((uint64_t)v21, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
        sub_5E09C((uint64_t)v37, &qword_320EF8);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v101)(v37, 1, 1, v103);
      }
LABEL_4:
      v43 += v44;
      if (!--v42)
      {
        swift_bridgeObjectRelease(v81);
        v40 = v82;
        break;
      }
    }
  }
  sub_66F14((uint64_t)v98, v40, &qword_320EF8);
  return sub_5E09C((uint64_t)v37, &qword_320EF8);
}

uint64_t sub_17BD88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;

  v1 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
  v21 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - v5;
  v7 = *v0;
  v8 = (unint64_t *)&_swiftEmptyArrayStorage;
  v22 = (unint64_t *)&_swiftEmptyArrayStorage;
  v9 = *(_QWORD *)(v7 + 16);
  result = swift_bridgeObjectRetain(v7);
  if (v9)
  {
    v11 = 0;
    v19 = v9;
    v20 = v1;
    while (v11 < *(_QWORD *)(v7 + 16))
    {
      v12 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v13 = *(_QWORD *)(v21 + 72);
      sub_5E11C(v7 + v12 + v13 * v11, (uint64_t)v6, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      if (v6[*(int *)(v1 + 28)] == 1)
      {
        v14 = (uint64_t)v3;
        sub_5E160((uint64_t)v6, (uint64_t)v3, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          sub_20C4F0(0, v8[2] + 1, 1);
        v8 = v22;
        v16 = v22[2];
        v15 = v22[3];
        if (v16 >= v15 >> 1)
        {
          sub_20C4F0(v15 > 1, v16 + 1, 1);
          v8 = v22;
        }
        v8[2] = v16 + 1;
        v17 = (uint64_t)v8 + v12 + v16 * v13;
        v3 = (char *)v14;
        result = sub_5E160(v14, v17, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
        v9 = v19;
        v1 = v20;
      }
      else
      {
        result = sub_6685C((uint64_t)v6, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      }
      if (v9 == ++v11)
      {
        v8 = v22;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(v7);
    v18 = v8[2];
    swift_release(v8);
    return v18;
  }
  return result;
}

void sub_17BF68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = type metadata accessor for ReadingInsightsDataProvider.DayEntry(0);
  __chkstk_darwin(v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v8 = *(_QWORD *)(v2 + 72);
    swift_bridgeObjectRetain(v5);
    v9 = 0;
    while (1)
    {
      sub_5E11C(v7, (uint64_t)v4, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      v10 = *(_QWORD *)&v4[*(int *)(v1 + 20)];
      v11 = __OFADD__(v9, v10);
      v9 += v10;
      if (v11)
        break;
      sub_6685C((uint64_t)v4, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
      v7 += v8;
      if (!--v6)
      {
        swift_bridgeObjectRelease(v5);
        return;
      }
    }
    __break(1u);
  }
}

_QWORD *sub_17C068(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  char *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v2 = type metadata accessor for Calendar(0, a1);
  v71 = *(_QWORD *)(v2 - 8);
  v72 = v2;
  v3 = __chkstk_darwin(v2);
  v69 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Component(0, v3);
  v73 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v70 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_327250);
  __chkstk_darwin(v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReadingInsightsDataProvider.MonthAverage(0);
  v75 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v62 = (uint64_t)&v58 - v13;
  v74 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
  __chkstk_darwin(v74);
  v61 = (uint64_t)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v58 - v17);
  v19 = *(_QWORD *)(v1 + 8);
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
    return &_swiftEmptyArrayStorage;
  v67 = v5;
  v21 = v19 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v64 = enum case for Calendar.Component.day(_:);
  v63 = *(_QWORD *)(v16 + 72);
  v58 = v19;
  v22 = swift_bridgeObjectRetain_n(v19, 2);
  v23 = &_swiftEmptyArrayStorage;
  v24 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry;
  v22.n128_u64[0] = 136315138;
  v60 = v22;
  v59 = (char *)&type metadata for Any + 8;
  v65 = v10;
  v66 = v9;
  do
  {
    v77 = v21;
    v78 = v20;
    v76 = v23;
    v25 = v24;
    sub_5E11C(v21, (uint64_t)v18, v24);
    v26 = *v18;
    v27 = v73;
    v28 = (uint64_t)v18;
    v29 = v70;
    v30 = v67;
    v31 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v73 + 104))(v70, v64, v67);
    v32 = v69;
    static Calendar.gregorian.getter(v31);
    v33 = DateInterval.distance(_:calendar:)(v29, v32);
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v32, v72);
    v36 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v30);
    if ((v35 & 1) != 0)
    {
      if (qword_31E630 != -1)
        swift_once(&qword_31E630, sub_126BE4);
      v41 = type metadata accessor for Logger(0);
      sub_5240C(v41, (uint64_t)qword_325220);
      v18 = (uint64_t *)v28;
      v42 = v61;
      v24 = v25;
      v43 = sub_5E11C(v28, v61, v25);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v79 = v47;
        *(_DWORD *)v46 = v60.n128_u32[0];
        v48 = type metadata accessor for DateInterval(0);
        v49 = sub_648E0(&qword_327210, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
        v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
        v52 = v51;
        *(_QWORD *)(v46 + 4) = sub_57CD8(v50, v51, &v79);
        swift_bridgeObjectRelease(v52);
        sub_6685C(v42, v25);
        _os_log_impl(&dword_0, v44, v45, "Error getting days distance for range: %s", (uint8_t *)v46, 0xCu);
        v39 = 1;
        swift_arrayDestroy(v47, 1, v59);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);

      }
      else
      {
        sub_6685C(v42, v25);

        v39 = 1;
      }
      v40 = v65;
      v38 = (uint64_t)v66;
      v23 = v76;
    }
    else
    {
      v37 = (double)v26 / (double)v33;
      v38 = (uint64_t)v66;
      DateInterval.start.getter(v36);
      v39 = 0;
      v40 = v65;
      *(double *)(v38 + *(int *)(v65 + 20)) = v37;
      v18 = (uint64_t *)v28;
      v23 = v76;
      v24 = v25;
    }
    v53 = v75;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v38, v39, 1, v40);
    sub_6685C((uint64_t)v18, v24);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v38, 1, v40) == 1)
    {
      sub_5E09C(v38, &qword_327250);
    }
    else
    {
      v54 = v62;
      sub_5E160(v38, v62, type metadata accessor for ReadingInsightsDataProvider.MonthAverage);
      sub_5E160(v54, v68, type metadata accessor for ReadingInsightsDataProvider.MonthAverage);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
        v23 = (_QWORD *)sub_56FF8(0, v23[2] + 1, 1, (unint64_t)v23);
      v56 = v23[2];
      v55 = v23[3];
      if (v56 >= v55 >> 1)
        v23 = (_QWORD *)sub_56FF8(v55 > 1, v56 + 1, 1, (unint64_t)v23);
      v23[2] = v56 + 1;
      sub_5E160(v68, (uint64_t)v23+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v56, type metadata accessor for ReadingInsightsDataProvider.MonthAverage);
    }
    v21 = v77 + v63;
    v20 = v78 - 1;
  }
  while (v78 != 1);
  swift_bridgeObjectRelease_n(v58, 2);
  return v23;
}

void sub_17C63C()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setDateFormat:", v1);

  qword_327050 = (uint64_t)v0;
}

void sub_17C6AC(_QWORD *a1)
{
  __n128 v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  Swift::Int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  Swift::Int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  Swift::Int v156;
  uint64_t v157;
  Swift::Int v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  Swift::Int v178;
  uint64_t v179;
  Swift::Int v180;
  uint64_t v181;
  uint64_t v182;
  Swift::Int v183;
  uint64_t (*v184)(char *, uint64_t);
  void (*v185)(char *, uint64_t);
  void (*v186)(char *, uint64_t);
  uint64_t (*v187)(char *, _QWORD);
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v175 = type metadata accessor for Date(0);
  v168 = *(_QWORD *)(v175 - 8);
  v2 = __chkstk_darwin(v175);
  v174 = (char *)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = type metadata accessor for Calendar.Component(0, v2);
  v167 = *(_QWORD *)(v177 - 8);
  v4 = __chkstk_darwin(v177);
  v173 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for Calendar(0, v4);
  v166 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v172 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
  v7 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v160 = (uint64_t)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v179 = (uint64_t)&v154 - v10;
  __chkstk_darwin(v11);
  v190 = (uint64_t)&v154 - v12;
  __chkstk_darwin(v13);
  v189 = (uint64_t)&v154 - v14;
  v15 = a1[1];
  v16 = _minimumMergeRunLength(_:)(v15);
  if (v16 >= v15)
  {
    if (v15 < 0)
      goto LABEL_141;
    if (v15)
      sub_17D5C8(0, v15, 1, a1);
    return;
  }
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = v15 + 1;
  if (v15 < -1)
    goto LABEL_149;
  v156 = v16;
  v163 = v7;
  if (v15 < 2)
  {
    v162 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v155 = _swiftEmptyArrayStorage;
    if (v15 != 1)
    {
      v23 = _swiftEmptyArrayStorage[2];
      v22 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      if (v23 >= 2)
      {
        v145 = *a1;
        do
        {
          v146 = v23 - 2;
          if (v23 < 2)
            goto LABEL_136;
          if (!v145)
            goto LABEL_148;
          v137 = v22;
          v147 = *(_QWORD *)&v22[16 * v146 + 32];
          v148 = *(_QWORD *)&v22[16 * v23 + 24];
          v149 = v164;
          sub_17DA28(v145 + *(_QWORD *)(v163 + 72) * v147, v145 + *(_QWORD *)(v163 + 72) * *(_QWORD *)&v22[16 * v23 + 16], v145 + *(_QWORD *)(v163 + 72) * v148, v162);
          if (v149)
            goto LABEL_117;
          if (v148 < v147)
            goto LABEL_137;
          v164 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native(v137) & 1) == 0)
            v137 = sub_10F048((uint64_t)v137);
          if (v146 >= *((_QWORD *)v137 + 2))
            goto LABEL_138;
          v150 = &v137[16 * v146 + 32];
          *(_QWORD *)v150 = v147;
          *((_QWORD *)v150 + 1) = v148;
          v151 = *((_QWORD *)v137 + 2);
          if (v23 > v151)
            goto LABEL_139;
          memmove(&v137[16 * v23 + 16], &v137[16 * v23 + 32], 16 * (v151 - v23));
          v22 = v137;
          *((_QWORD *)v137 + 2) = v151 - 1;
          v23 = v151 - 1;
        }
        while (v151 > 2);
      }
      swift_bridgeObjectRelease(v22);
      v153 = v155;
      v155[2] = 0;
      swift_bridgeObjectRelease(v153);
      return;
    }
  }
  else
  {
    v18 = v17 >> 1;
    v19 = static Array._allocateBufferUninitialized(minimumCapacity:)(v17 >> 1, v191);
    *(_QWORD *)(v19 + 16) = v18;
    v20 = (*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
    v155 = (_QWORD *)v19;
    v162 = v19 + v20;
  }
  v21 = 0;
  v188 = enum case for Calendar.Component.month(_:);
  v22 = (char *)_swiftEmptyArrayStorage;
  v165 = a1;
  while (1)
  {
    v24 = v21;
    v25 = v21 + 1;
    v159 = v22;
    v161 = v21;
    if (v21 + 1 >= v15)
    {
      v59 = v164;
    }
    else
    {
      v157 = *a1;
      v26 = v157;
      v27 = *(_QWORD *)(v163 + 72);
      v181 = v27;
      v183 = v21 + 1;
      sub_5E11C(v157 + v27 * v25, v189, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      v28 = sub_5E11C(v26 + v27 * v24, v190, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      v29 = v172;
      static Calendar.gregorian.getter(v28);
      v30 = v167;
      v187 = *(uint64_t (**)(char *, _QWORD))(v167 + 104);
      v31 = v173;
      v32 = v177;
      v33 = v187(v173, v188);
      v34 = v174;
      DateInterval.start.getter(v33);
      v171 = Calendar.component(_:from:)(v31, v34);
      v35 = *(void (**)(char *, uint64_t))(v168 + 8);
      v180 = v15;
      v36 = v175;
      v35(v34, v175);
      v37 = *(void (**)(char *, uint64_t))(v30 + 8);
      v38 = v32;
      v37(v31, v32);
      v39 = *(uint64_t (**)(char *, uint64_t))(v166 + 8);
      v40 = v39(v29, v176);
      static Calendar.gregorian.getter(v40);
      v41 = ((uint64_t (*)(char *, _QWORD, uint64_t))v187)(v31, v188, v38);
      v42 = v190;
      DateInterval.start.getter(v41);
      v170 = Calendar.component(_:from:)(v31, v34);
      v43 = v34;
      v24 = v161;
      v44 = v36;
      v15 = v180;
      v186 = v35;
      v35(v43, v44);
      v185 = v37;
      v37(v31, v177);
      v184 = v39;
      v39(v29, v176);
      v45 = v157;
      sub_6685C(v42, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      sub_6685C(v189, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      v46 = v181;
      v25 = v24 + 2;
      if (v24 + 2 >= v15)
      {
        v59 = v164;
        a1 = v165;
      }
      else
      {
        v169 = v181 * v183;
        v158 = v181 * v25;
        while (1)
        {
          v178 = v25;
          LODWORD(v183) = v171 < v170;
          sub_5E11C(v45 + v158, v189, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          v47 = sub_5E11C(v45 + v169, v190, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          v48 = v172;
          static Calendar.gregorian.getter(v47);
          v49 = v173;
          v50 = v177;
          v51 = ((uint64_t (*)(char *, _QWORD, uint64_t))v187)(v173, v188, v177);
          v52 = v174;
          DateInterval.start.getter(v51);
          v182 = Calendar.component(_:from:)(v49, v52);
          v53 = v175;
          v186(v52, v175);
          v185(v49, v50);
          v54 = v176;
          v55 = v184(v48, v176);
          static Calendar.gregorian.getter(v55);
          v56 = ((uint64_t (*)(char *, _QWORD, uint64_t))v187)(v49, v188, v50);
          v57 = v190;
          DateInterval.start.getter(v56);
          v58 = Calendar.component(_:from:)(v49, v52);
          v186(v52, v53);
          v185(v49, v50);
          v184(v48, v54);
          LODWORD(v58) = v182 >= v58;
          sub_6685C(v57, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          sub_6685C(v189, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          if ((_DWORD)v183 == (_DWORD)v58)
            break;
          v25 = v178 + 1;
          v15 = v180;
          v46 = v181;
          v45 += v181;
          if (v180 == v178 + 1)
          {
            v25 = v180;
            v59 = v164;
            a1 = v165;
            v24 = v161;
            goto LABEL_24;
          }
        }
        v59 = v164;
        a1 = v165;
        v25 = v178;
        v24 = v161;
        v15 = v180;
        v46 = v181;
      }
LABEL_24:
      v22 = v159;
      if (v171 < v170)
      {
        if (v25 < v24)
          goto LABEL_142;
        if (v24 < v25)
        {
          v60 = 0;
          v61 = v46 * (v25 - 1);
          v62 = v25 * v46;
          v63 = v24;
          v64 = v24 * v46;
          do
          {
            if (v63 != v25 + v60 - 1)
            {
              v164 = v59;
              v65 = v157;
              if (!v157)
                goto LABEL_147;
              v66 = v157 + v64;
              sub_5E160(v157 + v64, v160, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
              if (v64 < v61 || v66 >= v65 + v62)
              {
                swift_arrayInitWithTakeFrontToBack(v65 + v64, v65 + v61);
              }
              else if (v64 != v61)
              {
                swift_arrayInitWithTakeBackToFront(v65 + v64, v65 + v61);
              }
              sub_5E160(v160, v65 + v61, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
              v22 = v159;
              v59 = v164;
              v24 = v161;
              v46 = v181;
            }
            ++v63;
            --v60;
            v61 -= v46;
            v62 -= v46;
            v64 += v46;
          }
          while (v63 < v25 + v60);
          v15 = v180;
          a1 = v165;
        }
      }
    }
    if (v25 < v15)
    {
      if (__OFSUB__(v25, v24))
        goto LABEL_140;
      if (v25 - v24 < v156)
        break;
    }
LABEL_56:
    if (v25 < v24)
      goto LABEL_135;
    v164 = v59;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    v178 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v22 = v159;
    else
      v22 = sub_10ED88(0, *((_QWORD *)v159 + 2) + 1, 1, v159);
    v92 = *((_QWORD *)v22 + 2);
    v91 = *((_QWORD *)v22 + 3);
    v23 = v92 + 1;
    if (v92 >= v91 >> 1)
      v22 = sub_10ED88((char *)(v91 > 1), v92 + 1, 1, v22);
    *((_QWORD *)v22 + 2) = v23;
    v93 = v22 + 32;
    v94 = &v22[16 * v92 + 32];
    v95 = v178;
    *(_QWORD *)v94 = v24;
    *((_QWORD *)v94 + 1) = v95;
    if (v92)
    {
      while (1)
      {
        v96 = v23 - 1;
        if (v23 >= 4)
        {
          v101 = &v93[16 * v23];
          v102 = *((_QWORD *)v101 - 8);
          v103 = *((_QWORD *)v101 - 7);
          v107 = __OFSUB__(v103, v102);
          v104 = v103 - v102;
          if (v107)
            goto LABEL_124;
          v106 = *((_QWORD *)v101 - 6);
          v105 = *((_QWORD *)v101 - 5);
          v107 = __OFSUB__(v105, v106);
          v99 = v105 - v106;
          v100 = v107;
          if (v107)
            goto LABEL_125;
          v108 = v23 - 2;
          v109 = &v93[16 * v23 - 32];
          v111 = *(_QWORD *)v109;
          v110 = *((_QWORD *)v109 + 1);
          v107 = __OFSUB__(v110, v111);
          v112 = v110 - v111;
          if (v107)
            goto LABEL_127;
          v107 = __OFADD__(v99, v112);
          v113 = v99 + v112;
          if (v107)
            goto LABEL_130;
          if (v113 >= v104)
          {
            v131 = &v93[16 * v96];
            v133 = *(_QWORD *)v131;
            v132 = *((_QWORD *)v131 + 1);
            v107 = __OFSUB__(v132, v133);
            v134 = v132 - v133;
            if (v107)
              goto LABEL_134;
            v124 = v99 < v134;
            goto LABEL_93;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v125 = *((_QWORD *)v22 + 4);
            v126 = *((_QWORD *)v22 + 5);
            v107 = __OFSUB__(v126, v125);
            v118 = v126 - v125;
            v119 = v107;
            goto LABEL_87;
          }
          v98 = *((_QWORD *)v22 + 4);
          v97 = *((_QWORD *)v22 + 5);
          v107 = __OFSUB__(v97, v98);
          v99 = v97 - v98;
          v100 = v107;
        }
        if ((v100 & 1) != 0)
          goto LABEL_126;
        v108 = v23 - 2;
        v114 = &v93[16 * v23 - 32];
        v116 = *(_QWORD *)v114;
        v115 = *((_QWORD *)v114 + 1);
        v117 = __OFSUB__(v115, v116);
        v118 = v115 - v116;
        v119 = v117;
        if (v117)
          goto LABEL_129;
        v120 = &v93[16 * v96];
        v122 = *(_QWORD *)v120;
        v121 = *((_QWORD *)v120 + 1);
        v107 = __OFSUB__(v121, v122);
        v123 = v121 - v122;
        if (v107)
          goto LABEL_132;
        if (__OFADD__(v118, v123))
          goto LABEL_133;
        if (v118 + v123 >= v99)
        {
          v124 = v99 < v123;
LABEL_93:
          if (v124)
            v96 = v108;
          goto LABEL_95;
        }
LABEL_87:
        if ((v119 & 1) != 0)
          goto LABEL_128;
        v127 = &v93[16 * v96];
        v129 = *(_QWORD *)v127;
        v128 = *((_QWORD *)v127 + 1);
        v107 = __OFSUB__(v128, v129);
        v130 = v128 - v129;
        if (v107)
          goto LABEL_131;
        if (v130 < v118)
          goto LABEL_14;
LABEL_95:
        v135 = v96 - 1;
        if (v96 - 1 >= v23)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        v136 = *a1;
        if (!*a1)
          goto LABEL_146;
        v137 = v22;
        v138 = a1;
        v139 = &v93[16 * v135];
        v140 = *(_QWORD *)v139;
        v141 = &v93[16 * v96];
        v142 = *((_QWORD *)v141 + 1);
        v143 = v164;
        sub_17DA28(v136 + *(_QWORD *)(v163 + 72) * *(_QWORD *)v139, v136 + *(_QWORD *)(v163 + 72) * *(_QWORD *)v141, v136 + *(_QWORD *)(v163 + 72) * v142, v162);
        if (v143)
        {
LABEL_117:
          swift_bridgeObjectRelease(v137);
          v152 = v155;
          v155[2] = 0;
          swift_bridgeObjectRelease(v152);
          return;
        }
        if (v142 < v140)
          goto LABEL_121;
        if (v96 > *((_QWORD *)v137 + 2))
          goto LABEL_122;
        *(_QWORD *)v139 = v140;
        *(_QWORD *)&v93[16 * v135 + 8] = v142;
        v144 = *((_QWORD *)v137 + 2);
        if (v96 >= v144)
          goto LABEL_123;
        v164 = 0;
        v23 = v144 - 1;
        memmove(&v93[16 * v96], v141 + 16, 16 * (v144 - 1 - v96));
        v22 = v137;
        *((_QWORD *)v137 + 2) = v144 - 1;
        a1 = v138;
        if (v144 <= 2)
          goto LABEL_14;
      }
    }
    v23 = 1;
LABEL_14:
    v15 = a1[1];
    v21 = v178;
    if (v178 >= v15)
      goto LABEL_105;
  }
  if (__OFADD__(v24, v156))
    goto LABEL_143;
  if (v24 + v156 >= v15)
    v67 = v15;
  else
    v67 = v24 + v156;
  if (v67 >= v24)
  {
    if (v25 != v67)
    {
      v164 = v59;
      v68 = *(_QWORD *)(v163 + 72);
      v69 = v68 * (v25 - 1);
      v169 = v68;
      v70 = v25 * v68;
      v158 = v67;
      do
      {
        v72 = 0;
        v178 = v25;
        v170 = v70;
        v171 = v69;
        while (1)
        {
          v73 = *a1;
          v181 = v70 + v72;
          v182 = v24;
          sub_5E11C(v70 + v72 + v73, v189, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          v180 = v69 + v72;
          v74 = sub_5E11C(v69 + v72 + v73, v190, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          v75 = v172;
          static Calendar.gregorian.getter(v74);
          v76 = v167;
          v186 = *(void (**)(char *, uint64_t))(v167 + 104);
          v77 = v173;
          v78 = v177;
          v79 = ((uint64_t (*)(char *, _QWORD, uint64_t))v186)(v173, v188, v177);
          v80 = v174;
          DateInterval.start.getter(v79);
          v187 = (uint64_t (*)(char *, _QWORD))Calendar.component(_:from:)(v77, v80);
          v185 = *(void (**)(char *, uint64_t))(v168 + 8);
          v81 = v175;
          v185(v80, v175);
          v184 = *(uint64_t (**)(char *, uint64_t))(v76 + 8);
          v184(v77, v78);
          v183 = *(_QWORD *)(v166 + 8);
          v82 = v176;
          v83 = ((uint64_t (*)(char *, uint64_t))v183)(v75, v176);
          static Calendar.gregorian.getter(v83);
          v84 = ((uint64_t (*)(char *, _QWORD, uint64_t))v186)(v77, v188, v78);
          v85 = v190;
          DateInterval.start.getter(v84);
          v86 = Calendar.component(_:from:)(v77, v80);
          v185(v80, v81);
          v184(v77, v78);
          ((void (*)(char *, uint64_t))v183)(v75, v82);
          sub_6685C(v85, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          sub_6685C(v189, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          if ((uint64_t)v187 >= v86)
            break;
          a1 = v165;
          v87 = *v165;
          if (!*v165)
            goto LABEL_145;
          v70 = v170;
          v69 = v171;
          v88 = v87 + v170 + v72;
          v89 = v87 + v171 + v72;
          sub_5E160(v88, v179, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          swift_arrayInitWithTakeFrontToBack(v88, v89);
          sub_5E160(v179, v89, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          v72 -= v169;
          v24 = v182 + 1;
          v71 = v178;
          if (v178 == v182 + 1)
            goto LABEL_49;
        }
        a1 = v165;
        v71 = v178;
        v70 = v170;
        v69 = v171;
LABEL_49:
        v25 = v71 + 1;
        v69 += v169;
        v70 += v169;
        v24 = v161;
      }
      while (v25 != v158);
      v25 = v158;
      v59 = v164;
      v22 = v159;
    }
    goto LABEL_56;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_17D5C8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t);
  void (*v65)(char *, uint64_t);
  void (*v66)(char *, uint64_t);
  uint64_t (*v67)(char *, _QWORD, uint64_t);
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v45 = a1;
  v7 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  v8 = __chkstk_darwin(v7);
  v53 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar.Component(0, v8);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  v11 = __chkstk_darwin(v10);
  v50 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Calendar(0, v11);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v47 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
  __chkstk_darwin(v72);
  v60 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v71 = (uint64_t)&v43 - v16;
  __chkstk_darwin(v17);
  v70 = (uint64_t)&v43 - v19;
  v59 = a3;
  v44 = a2;
  if (a3 != a2)
  {
    v20 = *(_QWORD *)(v18 + 72);
    v69 = enum case for Calendar.Component.month(_:);
    v21 = v20 * (v59 - 1);
    v56 = v20;
    v22 = v20 * v59;
    v46 = a4;
    v23 = v50;
    v24 = v52;
LABEL_5:
    v25 = 0;
    v63 = v45;
    v57 = v22;
    v58 = v21;
    while (1)
    {
      v26 = *a4;
      v62 = v22 + v25;
      sub_5E11C(v22 + v25 + v26, v70, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      v61 = v21 + v25;
      v27 = sub_5E11C(v21 + v25 + v26, v71, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      v28 = v47;
      static Calendar.gregorian.getter(v27);
      v29 = v51;
      v67 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v51 + 104);
      v30 = v67(v23, v69, v24);
      v31 = v53;
      DateInterval.start.getter(v30);
      v68 = Calendar.component(_:from:)(v23, v31);
      v32 = v55;
      v66 = *(void (**)(char *, uint64_t))(v54 + 8);
      v66(v31, v55);
      v65 = *(void (**)(char *, uint64_t))(v29 + 8);
      v65(v23, v24);
      v64 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
      v33 = v49;
      v34 = v64(v28, v49);
      static Calendar.gregorian.getter(v34);
      v35 = v67(v23, v69, v24);
      v36 = v71;
      DateInterval.start.getter(v35);
      v37 = Calendar.component(_:from:)(v23, v31);
      v38 = v31;
      v22 = v57;
      v66(v38, v32);
      a4 = v46;
      v65(v23, v24);
      v39 = v33;
      v21 = v58;
      v64(v28, v39);
      sub_6685C(v36, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      sub_6685C(v70, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      if (v68 >= v37)
      {
LABEL_4:
        v21 += v56;
        v22 += v56;
        if (++v59 == v44)
          return;
        goto LABEL_5;
      }
      v40 = *a4;
      if (!*a4)
        break;
      v41 = v40 + v22 + v25;
      v42 = v40 + v21 + v25;
      sub_5E160(v41, v60, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      swift_arrayInitWithTakeFrontToBack(v41, v42);
      sub_5E160(v60, v42, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
      v25 -= v56;
      if (v59 == ++v63)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_17DA28(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t);
  void (*v76)(char *, uint64_t);
  uint64_t (*v77)(char *, _QWORD, uint64_t);
  unint64_t v78;
  unsigned int v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;

  v8 = type metadata accessor for Date(0);
  v87 = *(_QWORD *)(v8 - 8);
  v88 = v8;
  v9 = __chkstk_darwin(v8);
  v86 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Calendar.Component(0, v9);
  v85 = *(_QWORD *)(v83 - 8);
  v11 = __chkstk_darwin(v83);
  v84 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Calendar(0, v11);
  v81 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  __chkstk_darwin(v13);
  v80 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for ReadingInsightsDataProvider.MonthEntry(0);
  __chkstk_darwin(v90);
  v93 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v92 = (uint64_t)&v69 - v17;
  v19 = *(_QWORD *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_61;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1)
    goto LABEL_62;
  v21 = (uint64_t)(a2 - a1) / v19;
  v96 = a1;
  v95 = a4;
  v22 = v20 / v19;
  if (v21 >= v20 / v19)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v19;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v46 = a4 + v24;
      v94 = a4 + v24;
      v96 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v48 = -v19;
        v79 = enum case for Calendar.Component.month(_:);
        v72 = a4;
        v71 = a1;
        v70 = v48;
        v49 = v84;
        v50 = v86;
        v51 = v88;
        do
        {
          v91 = a2;
          v89 = a3;
          v78 = a3 + v48;
          sub_5E11C(v46 + v48, v92, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          v73 = a2 + v48;
          v52 = sub_5E11C(a2 + v48, v93, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          v53 = v80;
          static Calendar.gregorian.getter(v52);
          v54 = v85;
          v76 = *(void (**)(char *, uint64_t))(v85 + 104);
          v55 = v83;
          v56 = ((uint64_t (*)(char *, _QWORD, uint64_t))v76)(v49, v79, v83);
          DateInterval.start.getter(v56);
          v77 = (uint64_t (*)(char *, _QWORD, uint64_t))Calendar.component(_:from:)(v49, v50);
          v75 = *(void (**)(char *, uint64_t))(v87 + 8);
          v75(v50, v51);
          v74 = *(void (**)(char *, uint64_t))(v54 + 8);
          v74(v49, v55);
          v57 = v82;
          v58 = *(uint64_t (**)(char *, uint64_t))(v81 + 8);
          v59 = v58(v53, v82);
          static Calendar.gregorian.getter(v59);
          v60 = ((uint64_t (*)(char *, _QWORD, uint64_t))v76)(v49, v79, v55);
          v61 = v93;
          DateInterval.start.getter(v60);
          v62 = Calendar.component(_:from:)(v49, v50);
          v75(v50, v51);
          v74(v49, v55);
          v58(v53, v57);
          sub_6685C(v61, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          sub_6685C(v92, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
          if ((uint64_t)v77 >= v62)
          {
            v65 = v91;
            v66 = v94;
            v67 = v94 + v70;
            v94 += v70;
            v48 = v70;
            a3 = v78;
            if (v89 < v66 || v78 >= v66)
            {
              swift_arrayInitWithTakeFrontToBack(v78, v67);
              v63 = v72;
              v64 = v71;
            }
            else
            {
              v63 = v72;
              v64 = v71;
              if (v89 != v66)
                swift_arrayInitWithTakeBackToFront(v78, v67);
            }
          }
          else
          {
            v48 = v70;
            a3 = v78;
            if (v89 < v91 || v78 >= v91)
            {
              v65 = v73;
              swift_arrayInitWithTakeFrontToBack(v78, v73);
              v63 = v72;
              v64 = v71;
            }
            else
            {
              v63 = v72;
              v64 = v71;
              v65 = v73;
              if (v89 != v91)
                swift_arrayInitWithTakeBackToFront(v78, v73);
            }
            v96 += v48;
          }
          v46 = v94;
          if (v94 <= v63)
            break;
          a2 = v65;
        }
        while (v65 > v64);
      }
      goto LABEL_59;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v19;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v74 = (void (*)(char *, uint64_t))(a4 + v23);
    v94 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v79 = enum case for Calendar.Component.month(_:);
      v89 = a3;
      v73 = v19;
      v26 = v80;
      v27 = v84;
      v28 = v86;
      do
      {
        v91 = a2;
        sub_5E11C(a2, v92, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
        v29 = sub_5E11C(a4, v93, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
        static Calendar.gregorian.getter(v29);
        v30 = v85;
        v77 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v85 + 104);
        v31 = v83;
        v32 = v77(v27, v79, v83);
        DateInterval.start.getter(v32);
        v78 = Calendar.component(_:from:)(v27, v28);
        v33 = v88;
        v76 = *(void (**)(char *, uint64_t))(v87 + 8);
        v76(v28, v88);
        v75 = *(void (**)(char *, uint64_t))(v30 + 8);
        v75(v27, v31);
        v34 = v82;
        v35 = *(uint64_t (**)(char *, uint64_t))(v81 + 8);
        v36 = v35(v26, v82);
        static Calendar.gregorian.getter(v36);
        v37 = v77(v27, v79, v31);
        v38 = v93;
        DateInterval.start.getter(v37);
        v39 = Calendar.component(_:from:)(v27, v28);
        v76(v28, v33);
        v75(v27, v31);
        v35(v26, v34);
        sub_6685C(v38, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
        sub_6685C(v92, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
        v40 = v96;
        if ((uint64_t)v78 >= v39)
        {
          v44 = v91;
          v41 = v73;
          v45 = v95 + v73;
          if (v96 < v95 || v96 >= v45)
          {
            swift_arrayInitWithTakeFrontToBack(v96, v95);
            v43 = v89;
          }
          else
          {
            v43 = v89;
            if (v96 != v95)
              swift_arrayInitWithTakeBackToFront(v96, v95);
          }
          v95 = v45;
          v42 = v44;
        }
        else
        {
          v41 = v73;
          v42 = v91 + v73;
          if (v96 < v91 || v96 >= v42)
          {
            swift_arrayInitWithTakeFrontToBack(v96, v91);
            v43 = v89;
          }
          else
          {
            v43 = v89;
            if (v96 == v91)
              v40 = v91;
            else
              swift_arrayInitWithTakeBackToFront(v96, v91);
          }
        }
        v96 = v40 + v41;
        a4 = v95;
        if (v95 >= (unint64_t)v74)
          break;
        a2 = v42;
      }
      while (v42 < v43);
    }
LABEL_59:
    sub_10EE8C(&v96, &v95, (uint64_t *)&v94);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void *sub_17E280(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  void *result;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;

  v3 = type metadata accessor for Calendar.Component(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    sub_5C154(&qword_327230);
    v11 = static _SetStorage.allocate(capacity:)(v10);
    v12 = 0;
    v13 = *(unsigned __int8 *)(v4 + 80);
    v32 = v10;
    v33 = a1 + ((v13 + 32) & ~v13);
    v14 = *(_QWORD *)(v4 + 72);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v36 = v11 + 56;
    while (1)
    {
      v34 = v12;
      v35(v9, v33 + v14 * v12, v3);
      v15 = *(_QWORD *)(v11 + 40);
      v16 = sub_648E0(&qword_327238, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v3, v16);
      v18 = ~(-1 << *(_BYTE *)(v11 + 32));
      v19 = v17 & v18;
      v20 = (v17 & (unint64_t)v18) >> 6;
      v21 = *(_QWORD *)(v36 + 8 * v20);
      v22 = 1 << (v17 & v18);
      if ((v22 & v21) != 0)
      {
        do
        {
          v35(v6, *(_QWORD *)(v11 + 48) + v19 * v14, v3);
          v23 = sub_648E0(&qword_327240, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v24 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v9, v3, v23);
          v25 = v4;
          v26 = *(void (**)(char *, uint64_t))(v4 + 8);
          v26(v6, v3);
          if ((v24 & 1) != 0)
          {
            v26(v9, v3);
            v4 = v25;
            v10 = v32;
            goto LABEL_4;
          }
          v19 = (v19 + 1) & v18;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)(v36 + 8 * (v19 >> 6));
          v22 = 1 << v19;
          v4 = v25;
        }
        while ((v21 & (1 << v19)) != 0);
        v10 = v32;
      }
      *(_QWORD *)(v36 + 8 * v20) = v22 | v21;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v11 + 48) + v19 * v14, v9, v3);
      v28 = *(_QWORD *)(v11 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
        break;
      *(_QWORD *)(v11 + 16) = v30;
LABEL_4:
      v12 = v34 + 1;
      if (v34 + 1 == v10)
        return (void *)v11;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_17E4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320EF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_17E530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320EF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double JSShelfPaginationIntentProvider.paginationIntent(for:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  double result;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v5 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PaginationInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for Shelf(0);
  sub_17E7A4((uint64_t)a1 + *(int *)(v15 + 68), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_17E7EC((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8) == enum case for PaginationInfo.nextHref(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
      v16 = v11[1];
      v29 = *v11;
      v18 = *a1;
      v17 = a1[1];
      v19 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(int *)(v15 + 64)) + 16);
      v20 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
      v21 = swift_bridgeObjectRetain(v17);
      v20(v14, v8, v21);
      v22 = type metadata accessor for JSShelfPaginationIntent(0);
      *(_QWORD *)(a2 + 24) = v22;
      *(_QWORD *)(a2 + 32) = sub_17E82C();
      v23 = sub_668BC((_QWORD *)a2);
      v24 = (char *)v23 + *(int *)(v22 + 28);
      v25 = type metadata accessor for JSONObject(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v2, v25);
      *v23 = v18;
      v23[1] = v17;
      v23[2] = v29;
      v23[3] = v16;
      v23[4] = v19;
      return result;
    }
    v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v14, v8);
    v27((char *)v11, v8);
  }
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_17E7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_323C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_17E7EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_323C08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_17E82C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31FF90;
  if (!qword_31FF90)
  {
    v1 = type metadata accessor for JSShelfPaginationIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for JSShelfPaginationIntent, v1);
    atomic_store(result, (unint64_t *)&qword_31FF90);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for JSShelfPaginationIntentProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for JSShelfPaginationIntentProvider(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for JSShelfPaginationIntentProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for JSShelfPaginationIntentProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for JSShelfPaginationIntentProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for JSShelfPaginationIntentProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSShelfPaginationIntentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17EA04);
}

uint64_t sub_17EA04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for JSShelfPaginationIntentProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17EA4C);
}

uint64_t sub_17EA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for JSShelfPaginationIntentProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3272B0;
  if (!qword_3272B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSShelfPaginationIntentProvider);
  return result;
}

uint64_t sub_17EAC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for JSONObject(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for BundleFinder()
{
  return objc_opt_self(_TtC11BookStoreUIP33_E92A426F0D2E048A12876B41BD1BD6C412BundleFinder);
}

uint64_t sub_17EB50()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  NSString v3;
  NSString v4;
  NSString v5;
  id v6;
  uint64_t v7;

  v0 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, v4, v5);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  return v7;
}

uint64_t sub_17EC4C()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  NSString v3;
  NSString v4;
  NSString v5;
  id v6;
  uint64_t v7;

  v0 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, v4, v5);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  return v7;
}

uint64_t initializeWithCopy for Shelf.FooterComponentModel(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for Shelf.HeaderComponentModel(_QWORD *a1, _QWORD *a2)
{
  sub_65938(a1, a2);
  return a1;
}

uint64_t assignWithTake for Shelf.FooterComponentModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReaderTypeFramesFactory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReaderTypeFramesFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReaderTypeFramesFactory()
{
  return &type metadata for ReaderTypeFramesFactory;
}

uint64_t sub_17EE84(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      v12 = *v11;
      v13 = v11[1];
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(v13);
      if (v9)
      {
LABEL_6:
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        if (v19 >= v10)
          goto LABEL_27;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        ++v7;
        if (!v20)
        {
          v7 = v19 + 1;
          if (v19 + 1 >= v10)
            goto LABEL_27;
          v20 = *(_QWORD *)(v2 + 8 * v7);
          if (!v20)
          {
            v7 = v19 + 2;
            if (v19 + 2 >= v10)
              goto LABEL_27;
            v20 = *(_QWORD *)(v2 + 8 * v7);
            if (!v20)
            {
              v7 = v19 + 3;
              if (v19 + 3 >= v10)
                goto LABEL_27;
              v20 = *(_QWORD *)(v2 + 8 * v7);
              if (!v20)
              {
                v21 = v19 + 4;
                if (v21 >= v10)
                {
LABEL_27:
                  swift_release(a1);
                  return v12;
                }
                v20 = *(_QWORD *)(v2 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    v7 = v21 + 1;
                    if (__OFADD__(v21, 1))
                      break;
                    if (v7 >= v10)
                      goto LABEL_27;
                    v20 = *(_QWORD *)(v2 + 8 * v7);
                    ++v21;
                    if (v20)
                      goto LABEL_24;
                  }
                  __break(1u);
LABEL_44:
                  v25 = 0;
                  v26 = 6;
                  if (v10 > 6)
                    v26 = v10;
                  v27 = v26 - 6;
                  while (v27 != v25)
                  {
                    v24 = *(_QWORD *)(a1 + 112 + 8 * v25++);
                    if (v24)
                    {
                      v7 = v25 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                v7 = v21;
              }
            }
          }
        }
LABEL_24:
        v15 = v20 - 1;
        v9 = (v20 - 1) & v20;
        v17 = __clz(__rbit64(v20)) + (v7 << 6);
LABEL_7:
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v17);
        if (v14 < v18)
        {
          v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v17);
          v12 = *v22;
          v23 = v22[1];
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRelease(v13);
          v13 = v23;
          v14 = v18;
          if (v9)
            goto LABEL_6;
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v15 >= 9)
      {
        v24 = *(_QWORD *)(a1 + 96);
        if (v24)
        {
          v7 = 4;
        }
        else
        {
          v24 = *(_QWORD *)(a1 + 104);
          if (!v24)
            goto LABEL_44;
          v7 = 5;
        }
LABEL_31:
        v9 = (v24 - 1) & v24;
        v8 = __clz(__rbit64(v24)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    v15 = v3 & 0x3F;
    if (v15 > 6)
    {
      v10 = (unint64_t)(v4 + 63) >> 6;
      v24 = *(_QWORD *)(a1 + 72);
      if (v24)
      {
        v7 = 1;
        goto LABEL_31;
      }
      if (v15 >= 8)
      {
        v24 = *(_QWORD *)(a1 + 80);
        if (v24)
        {
          v7 = 2;
        }
        else
        {
          v24 = *(_QWORD *)(a1 + 88);
          if (!v24)
            goto LABEL_38;
          v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

void sub_17F120(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10F084(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_180034(v4);
  *a1 = v2;
}

uint64_t sub_17F188(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_180C84();
  return ReflectedStringConvertible.description.getter(a1, v2);
}

uint64_t sub_17F1B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  double *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  double *v54;
  double v55;
  char v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  int v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t result;
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char v102[8];
  uint64_t v103;
  uint64_t v104;
  _OWORD v105[2];
  uint64_t v106;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v94 = *(_QWORD *)(v2 - 8);
  v95 = v2;
  __chkstk_darwin(v2);
  v91 = (char *)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for TransitionFrameViewModel.Section(0);
  v90 = *(_QWORD *)(v93 - 8);
  v4 = __chkstk_darwin(v93);
  v92 = (_QWORD *)((char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for TransitionFrameViewModel(0, v4);
  v7 = __chkstk_darwin(v6);
  v96 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReaderTypeFrameViewModel(0, v7);
  v99 = *(_QWORD *)(v9 - 8);
  v100 = v9;
  __chkstk_darwin(v9);
  v98 = (char *)v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v97 = (char *)v88 - v12;
  v13 = sub_5C154(&qword_327380);
  v14 = swift_allocObject(v13, 128, 7);
  *(_OWORD *)(v14 + 16) = xmmword_261680;
  sub_66898(v0, v0[3]);
  sub_206D60();
  *(_QWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 40) = 2;
  sub_66898(v1, v1[3]);
  sub_207084();
  *(_QWORD *)(v14 + 48) = v16;
  *(_BYTE *)(v14 + 56) = 4;
  v17 = sub_66898(v1, v1[3]);
  v18 = v17[2];
  v19 = v17[4];
  swift_bridgeObjectRetain(v19);
  v20 = 0;
  v22 = sub_17FD98(v21);
  swift_bridgeObjectRelease(v19);
  sub_17EE84((uint64_t)v22);
  v24 = v23;
  v26 = v25;
  swift_release(v22);
  v27 = 0.0;
  v28 = 0.0;
  if (v24)
  {
    swift_bridgeObjectRelease(v24);
    v28 = 0.0;
    if (v26 >= 2)
      v28 = (double)v26 / (double)*(uint64_t *)(v18 + 16);
  }
  *(double *)(v14 + 64) = v28;
  *(_BYTE *)(v14 + 72) = 3;
  sub_66898(v1, v1[3]);
  sub_2071F4();
  *(_QWORD *)(v14 + 80) = v29;
  *(_BYTE *)(v14 + 88) = 0;
  v30 = sub_66898(v1, v1[3]);
  v31 = v30[4];
  v32 = *((_OWORD *)v30 + 1);
  v105[0] = *(_OWORD *)v30;
  v105[1] = v32;
  v106 = v31;
  v33 = v32;
  sub_180BE8(v105);
  swift_bridgeObjectRetain(v33);
  v35 = sub_180A58(v34, (uint64_t *)v105);
  sub_180C38(v105);
  swift_bridgeObjectRelease(v33);
  v36 = v35[2];
  swift_bridgeObjectRelease(v35);
  if ((unint64_t)v36 >= 2)
    v27 = (double)v36 / (double)*(uint64_t *)(v33 + 16);
  *(double *)(v14 + 96) = v27;
  *(_BYTE *)(v14 + 104) = 1;
  *(_QWORD *)(v14 + 112) = 0x3FD0000000000000;
  *(_BYTE *)(v14 + 120) = 5;
  if (qword_31E610 != -1)
    swift_once(&qword_31E610, sub_126AE4);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_5240C(v37, (uint64_t)qword_3251C0);
  swift_bridgeObjectRetain_n(v14, 2);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = swift_slowAlloc(12, -1);
    v89 = 0;
    v43 = (uint8_t *)v42;
    v44 = swift_slowAlloc(32, -1);
    v101 = (_QWORD *)v44;
    *(_DWORD *)v43 = 136315138;
    swift_bridgeObjectRetain(v14);
    v46 = Array.description.getter(v45, &type metadata for ReaderTypeFramesFactory.ReaderTypeScore);
    v88[1] = v38;
    v48 = v47;
    swift_bridgeObjectRelease(v14);
    v103 = sub_57CD8(v46, v48, (uint64_t *)&v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease(v48);
    _os_log_impl(&dword_0, v40, v41, "scoreList: %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    v20 = v89;
    swift_slowDealloc(v43, -1, -1);

    v49 = *(_QWORD *)(v14 + 16);
    if (v49)
      goto LABEL_10;
LABEL_19:
    v51 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }

  swift_bridgeObjectRelease_n(v14, 2);
  v49 = *(_QWORD *)(v14 + 16);
  if (!v49)
    goto LABEL_19;
LABEL_10:
  v50 = (double *)(v14 + 40);
  v51 = _swiftEmptyArrayStorage;
  do
  {
    v55 = *(v50 - 1);
    if (v55 > 0.0)
    {
      v56 = *(_BYTE *)v50;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
      v101 = v51;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_20CAA8(0, v51[2] + 1, 1);
        v51 = v101;
      }
      v53 = v51[2];
      v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        sub_20CAA8(v52 > 1, v53 + 1, 1);
        v51 = v101;
      }
      v51[2] = v53 + 1;
      v54 = (double *)&v51[2 * v53];
      v54[4] = v55;
      *((_BYTE *)v54 + 40) = v56;
    }
    v50 += 2;
    --v49;
  }
  while (v49);
LABEL_20:
  swift_bridgeObjectRelease(v14);
  v101 = v51;
  swift_retain(v51);
  sub_17F120((uint64_t *)&v101);
  if (v20)
  {
    result = swift_release(v101);
    __break(1u);
  }
  else
  {
    swift_release(v51);
    if (v101[2])
    {
      v58 = v101[4];
      v59 = *((unsigned __int8 *)v101 + 40);
    }
    else
    {
      v59 = 6;
      v58 = 0;
    }
    v60 = swift_release(v101);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = swift_slowAlloc(32, -1);
      v103 = v64;
      *(_DWORD *)v63 = 136315138;
      if (v59 == 6)
      {
        v65 = 0;
        v66 = 0;
      }
      else
      {
        v101 = (_QWORD *)v58;
        v102[0] = v59;
        v67 = sub_180C84();
        v65 = ReflectedStringConvertible.description.getter(&type metadata for ReaderTypeFramesFactory.ReaderTypeScore, v67);
        v66 = v68;
      }
      v69 = Optional<A>.description.getter(v65, v66);
      v71 = v70;
      swift_bridgeObjectRelease(v66);
      v101 = (_QWORD *)sub_57CD8(v69, v71, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease(v71);
      _os_log_impl(&dword_0, v61, v62, "selected score: %s", v63, 0xCu);
      swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }

    v72 = v97;
    sub_17F9FC(v59);
    v73 = sub_5C154(&qword_31F108);
    v74 = swift_allocObject(v73, 112, 7);
    *(_OWORD *)(v74 + 16) = xmmword_255F00;
    v75 = sub_66898(v1, v1[3]);
    v76 = *v75;
    v77 = (uint64_t)v91;
    static Locale.autoupdatingCurrent.getter(v75);
    v78 = sub_185B7C(v76, v77);
    v80 = v79;
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v77, v95);
    v82 = v92;
    v81 = v93;
    *v92 = v78;
    v82[1] = v80;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v90 + 104))(v82, enum case for TransitionFrameViewModel.Section.readerType(_:), v81);
    v83 = v96;
    TransitionFrameViewModel.init(section:)(v82);
    *(_QWORD *)(v74 + 56) = type metadata accessor for TransitionFrame(0);
    *(_QWORD *)(v74 + 64) = sub_648E0(&qword_320ED0, (uint64_t (*)(uint64_t))&type metadata accessor for TransitionFrame, (uint64_t)&protocol conformance descriptor for TransitionFrame);
    sub_668BC((_QWORD *)(v74 + 32));
    TransitionFrame.init(model:)(v83);
    v85 = v98;
    v84 = v99;
    v86 = v100;
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v98, v72, v100);
    *(_QWORD *)(v74 + 96) = type metadata accessor for ReaderTypeFrame(0);
    *(_QWORD *)(v74 + 104) = sub_648E0(&qword_327388, (uint64_t (*)(uint64_t))&type metadata accessor for ReaderTypeFrame, (uint64_t)&protocol conformance descriptor for ReaderTypeFrame);
    sub_668BC((_QWORD *)(v74 + 72));
    ReaderTypeFrame.init(model:)(v85);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v72, v86);
    return v74;
  }
  return result;
}

void sub_17F9FC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  v2 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v2);
  v3 = sub_5C154(&qword_320EF0);
  v4 = __chkstk_darwin(v3);
  v5 = type metadata accessor for YIRSourceData(0, v4);
  v6 = __chkstk_darwin(v5);
  v7 = type metadata accessor for ReaderTypeFrameViewModel.Type(0, v6);
  __chkstk_darwin(v7);
  __asm { BR              X10 }
}

uint64_t sub_17FB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  (*(void (**)(uint64_t, _QWORD))(v0 + 104))(v4, enum case for ReaderTypeFrameViewModel.Type.theFreeSpirit(_:));
  v5 = ((uint64_t (*)(_QWORD))type metadata accessor for FrameName)(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  v6 = enum case for ReaderType.genericReader(_:);
  v7 = ((uint64_t (*)(_QWORD))type metadata accessor for ReaderType)(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(v1, v6, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v1, 0, 1, v7);
  v14 = 1;
  v13 = 1;
  v12 = 1;
  v11 = 1;
  v10 = 1;
  ((void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char))YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:))(v2, v1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, v10, 0, v11, 0,
    v12,
    0,
    v13,
    0,
    v14);
  return ((uint64_t (*)(uint64_t, uint64_t))ReaderTypeFrameViewModel.init(type:exposureData:))(v4, v3);
}

unint64_t *sub_17FD98(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  uint64_t v11;

  v2 = (unint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_17FEE8((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_17FEE8((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

unint64_t *sub_17FEE8(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_5989C(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_5989C(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_5989C(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(uint64_t *)(*(_QWORD *)(a3 + 56) + 8 * v12) >= 2)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_5989C(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_5989C(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_5989C(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_180034(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  double *v20;
  double v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  char v32;
  Swift::Int v33;
  double *v34;
  double *v35;
  Swift::Int v36;
  double *v37;
  double v38;
  unsigned int v39;
  double v40;
  _BOOL4 v41;
  _BOOL4 v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  unsigned __int8 *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_18070C(0, v3, 1, a1);
      return;
    }
    goto LABEL_142;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_150:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v6 = v4;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_108;
    }
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for ReaderTypeFramesFactory.ReaderTypeScore);
    *(_QWORD *)(v8 + 16) = v7;
    v103 = (_QWORD *)v8;
    __dst = (unsigned __int8 *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 24;
  v12 = (char *)_swiftEmptyArrayStorage;
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = v11 + 16 * v10;
      v16 = *(double *)v15;
      v17 = v11 + 16 * v14;
      v18 = *(double *)v17 < *(double *)v15;
      v19 = *(unsigned __int8 *)(v15 + 8) < *(unsigned __int8 *)(v17 + 8);
      if (v16 != *(double *)v17)
        v19 = v18;
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v20 = (double *)(v102 + 16 * v14);
        while (1)
        {
          v21 = v20[1];
          v22 = *(v20 - 1);
          v23 = *((unsigned __int8 *)v20 + 16) < *(unsigned __int8 *)v20;
          if (v21 != v22)
            v23 = v22 < v21;
          if (v19 != v23)
            break;
          ++v10;
          v20 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v19)
      {
        if (v10 < v14)
          goto LABEL_143;
        if (v14 < v10)
        {
          v24 = 16 * v10 - 16;
          v25 = 16 * v14;
          v26 = v10;
          v27 = v14;
          do
          {
            if (v27 != --v26)
            {
              if (!v11)
                goto LABEL_148;
              v29 = (_OWORD *)(v11 + v25);
              v30 = (_OWORD *)(v11 + v24);
              v31 = *(_QWORD *)(v11 + v25);
              v32 = *(_BYTE *)(v11 + v25 + 8);
              if (v25 != v24 || v29 >= v30 + 1)
                *v29 = *v30;
              v28 = v11 + v24;
              *(_QWORD *)v28 = v31;
              *(_BYTE *)(v28 + 8) = v32;
            }
            ++v27;
            v24 -= 16;
            v25 += 16;
          }
          while (v27 < v26);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_141;
      if (v10 - v14 < v6)
      {
        v33 = v14 + v6;
        if (__OFADD__(v14, v6))
          goto LABEL_144;
        if (v33 >= v3)
          v33 = v3;
        if (v33 < v14)
          goto LABEL_145;
        if (v10 != v33)
        {
          v34 = (double *)(v11 + 16 * v10);
          do
          {
            v35 = v34;
            v36 = v14;
            v37 = v34;
            do
            {
              v38 = *v35;
              v39 = *((unsigned __int8 *)v35 + 8);
              v40 = *(v37 - 2);
              v37 -= 2;
              v41 = v40 < *v35;
              v42 = v39 < *((unsigned __int8 *)v35 - 8);
              if (*v35 != v40)
                v42 = v41;
              if (!v42)
                break;
              if (!v11)
                goto LABEL_146;
              *(_OWORD *)v35 = *(_OWORD *)v37;
              *(v35 - 2) = v38;
              *((_BYTE *)v35 - 8) = v39;
              ++v36;
              v35 = v37;
            }
            while (v10 != v36);
            ++v10;
            v34 += 2;
          }
          while (v10 != v33);
          v10 = v33;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10ED88(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v44 = *((_QWORD *)v12 + 2);
    v43 = *((_QWORD *)v12 + 3);
    v13 = v44 + 1;
    v11 = v106;
    if (v44 >= v43 >> 1)
    {
      v92 = sub_10ED88((char *)(v43 > 1), v44 + 1, 1, v12);
      v11 = v106;
      v12 = v92;
    }
    *((_QWORD *)v12 + 2) = v13;
    v45 = v12 + 32;
    v46 = &v12[16 * v44 + 32];
    *(_QWORD *)v46 = v14;
    *((_QWORD *)v46 + 1) = v10;
    if (v44)
      break;
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
LABEL_108:
      v94 = v12;
      v103 = v9;
      if (v13 < 2)
        goto LABEL_105;
      v95 = *v101;
      while (1)
      {
        v96 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v95)
          goto LABEL_149;
        v93 = v94;
        v97 = *(_QWORD *)&v94[16 * v96 + 32];
        v98 = *(_QWORD *)&v94[16 * v13 + 24];
        sub_18079C((double *)(v95 + 16 * v97), (unsigned __int8 *)(v95 + 16 * *(_QWORD *)&v94[16 * v13 + 16]), v95 + 16 * v98, __dst);
        if (v1)
          goto LABEL_104;
        if (v98 < v97)
          goto LABEL_138;
        if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
          v93 = sub_10F048((uint64_t)v93);
        if (v96 >= *((_QWORD *)v93 + 2))
          goto LABEL_139;
        v99 = &v93[16 * v96 + 32];
        *(_QWORD *)v99 = v97;
        *((_QWORD *)v99 + 1) = v98;
        v100 = *((_QWORD *)v93 + 2);
        if (v13 > v100)
          goto LABEL_140;
        memmove(&v93[16 * v13 + 16], &v93[16 * v13 + 32], 16 * (v100 - v13));
        v94 = v93;
        *((_QWORD *)v93 + 2) = v100 - 1;
        v13 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_105;
      }
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
  }
  while (1)
  {
    v47 = v13 - 1;
    if (v13 >= 4)
    {
      v52 = &v45[16 * v13];
      v53 = *((_QWORD *)v52 - 8);
      v54 = *((_QWORD *)v52 - 7);
      v58 = __OFSUB__(v54, v53);
      v55 = v54 - v53;
      if (v58)
        goto LABEL_125;
      v57 = *((_QWORD *)v52 - 6);
      v56 = *((_QWORD *)v52 - 5);
      v58 = __OFSUB__(v56, v57);
      v50 = v56 - v57;
      v51 = v58;
      if (v58)
        goto LABEL_126;
      v59 = v13 - 2;
      v60 = &v45[16 * v13 - 32];
      v62 = *(_QWORD *)v60;
      v61 = *((_QWORD *)v60 + 1);
      v58 = __OFSUB__(v61, v62);
      v63 = v61 - v62;
      if (v58)
        goto LABEL_128;
      v58 = __OFADD__(v50, v63);
      v64 = v50 + v63;
      if (v58)
        goto LABEL_131;
      if (v64 >= v55)
      {
        v82 = &v45[16 * v47];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v58 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v58)
          goto LABEL_135;
        v75 = v50 < v85;
        goto LABEL_93;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v76 = *((_QWORD *)v12 + 4);
        v77 = *((_QWORD *)v12 + 5);
        v58 = __OFSUB__(v77, v76);
        v69 = v77 - v76;
        v70 = v58;
        goto LABEL_87;
      }
      v49 = *((_QWORD *)v12 + 4);
      v48 = *((_QWORD *)v12 + 5);
      v58 = __OFSUB__(v48, v49);
      v50 = v48 - v49;
      v51 = v58;
    }
    if ((v51 & 1) != 0)
      goto LABEL_127;
    v59 = v13 - 2;
    v65 = &v45[16 * v13 - 32];
    v67 = *(_QWORD *)v65;
    v66 = *((_QWORD *)v65 + 1);
    v68 = __OFSUB__(v66, v67);
    v69 = v66 - v67;
    v70 = v68;
    if (v68)
      goto LABEL_130;
    v71 = &v45[16 * v47];
    v73 = *(_QWORD *)v71;
    v72 = *((_QWORD *)v71 + 1);
    v58 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v58)
      goto LABEL_133;
    if (__OFADD__(v69, v74))
      goto LABEL_134;
    if (v69 + v74 >= v50)
    {
      v75 = v50 < v74;
LABEL_93:
      if (v75)
        v47 = v59;
      goto LABEL_95;
    }
LABEL_87:
    if ((v70 & 1) != 0)
      goto LABEL_129;
    v78 = &v45[16 * v47];
    v80 = *(_QWORD *)v78;
    v79 = *((_QWORD *)v78 + 1);
    v58 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v58)
      goto LABEL_132;
    if (v81 < v69)
      goto LABEL_15;
LABEL_95:
    v86 = v47 - 1;
    if (v47 - 1 >= v13)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    if (!v11)
      goto LABEL_147;
    v87 = &v45[16 * v86];
    v88 = *(_QWORD *)v87;
    v89 = &v45[16 * v47];
    v90 = *((_QWORD *)v89 + 1);
    sub_18079C((double *)(v11 + 16 * *(_QWORD *)v87), (unsigned __int8 *)(v11 + 16 * *(_QWORD *)v89), v11 + 16 * v90, __dst);
    if (v1)
      break;
    if (v90 < v88)
      goto LABEL_122;
    if (v47 > *((_QWORD *)v12 + 2))
      goto LABEL_123;
    *(_QWORD *)v87 = v88;
    *(_QWORD *)&v45[16 * v86 + 8] = v90;
    v91 = *((_QWORD *)v12 + 2);
    if (v47 >= v91)
      goto LABEL_124;
    v13 = v91 - 1;
    memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
    *((_QWORD *)v12 + 2) = v91 - 1;
    v11 = v106;
    if (v91 <= 2)
      goto LABEL_15;
  }
  v93 = v12;
LABEL_104:
  v94 = v93;
LABEL_105:
  swift_bridgeObjectRelease(v94);
  v103[2] = 0;
  swift_bridgeObjectRelease(v103);
}

uint64_t sub_18070C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  unsigned int v10;
  double v11;
  _BOOL4 v12;
  _BOOL4 v13;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 16 * a3;
LABEL_5:
    v6 = (double *)v5;
    v7 = result;
    v8 = (double *)v5;
    while (1)
    {
      v9 = *v6;
      v10 = *((unsigned __int8 *)v6 + 8);
      v11 = *(v8 - 2);
      v8 -= 2;
      v12 = v11 < *v6;
      v13 = v10 < *((unsigned __int8 *)v6 - 8);
      if (*v6 != v11)
        v13 = v12;
      if (!v13)
      {
LABEL_4:
        ++a3;
        v5 += 16;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      *(_OWORD *)v6 = *(_OWORD *)v8;
      *(v6 - 2) = v9;
      *((_BYTE *)v6 - 8) = v10;
      ++v7;
      v6 = v8;
      if (a3 == v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_18079C(double *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  double *v4;
  unsigned __int8 *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  double *v15;
  _BOOL4 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  double *v19;
  unsigned __int8 *v20;
  double *v21;
  double v22;
  unsigned __int8 *v23;
  double v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t result;
  double *v28;
  void *v29;
  unsigned __int8 *v30;

  v4 = (double *)__dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - (unsigned __int8 *)__src;
  v9 = a2 - (unsigned __int8 *)__src + 15;
  if (a2 - (unsigned __int8 *)__src >= 0)
    v9 = a2 - (unsigned __int8 *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v29 = __dst;
  v30 = (unsigned __int8 *)__src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v18 = 2 * v13;
      if (__dst != a2 || &a2[v18 * 8] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[v18];
      v28 = &v4[v18];
      v30 = v6;
      if (v7 < (double *)v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v20 = (unsigned __int8 *)(a3 - 16);
        v21 = (double *)v6;
        while (1)
        {
          v22 = *(v19 - 2);
          v23 = v20 + 16;
          v24 = *(v21 - 2);
          v21 -= 2;
          v25 = v24 < v22;
          v26 = *((unsigned __int8 *)v19 - 8) < *((unsigned __int8 *)v21 + 8);
          if (v22 != v24)
            v26 = v25;
          if (v26)
          {
            if (v23 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v30 = (unsigned __int8 *)v21;
            if (v21 <= v7)
              goto LABEL_46;
          }
          else
          {
            v28 = v19 - 2;
            if (v23 < (unsigned __int8 *)v19 || v20 >= (unsigned __int8 *)v19 || v23 != (unsigned __int8 *)v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = (double *)v6;
            v19 -= 2;
            if (v6 <= (unsigned __int8 *)v7)
              goto LABEL_46;
          }
          v20 -= 16;
          v6 = (unsigned __int8 *)v21;
          if (v19 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 2 * v10;
    if (__dst != (unsigned __int8 *)__src || &__src[v14] <= (double *)__dst)
      memmove(__dst, __src, v14 * 8);
    v15 = &v4[v14];
    v28 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      do
      {
        v16 = v6[8] < *((unsigned __int8 *)v4 + 8);
        if (*(double *)v6 != *v4)
          v16 = *v4 < *(double *)v6;
        if (v16)
        {
          v17 = v6 + 16;
          if (v7 < (double *)v6 || v7 >= (double *)v17 || v7 != (double *)v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v29 = v4;
          v17 = v6;
        }
        v7 += 2;
        if (v4 >= v15)
          break;
        v6 = v17;
      }
      while ((unint64_t)v17 < a3);
      v30 = (unsigned __int8 *)v7;
    }
LABEL_46:
    sub_10EFA4((void **)&v30, (const void **)&v29, &v28);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_180A58(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  result = _swiftEmptyArrayStorage;
  v21 = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = a1 + 32;
    v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_5E0D8(v6, (uint64_t)&v18);
      v8 = v19;
      v9 = v20;
      sub_66898(&v18, v19);
      LOBYTE(v8) = sub_207378(*a2, v8, v9, v10);
      sub_5E0D8((uint64_t)&v18, (uint64_t)&v15);
      if ((v8 & 1) != 0)
      {
        v11 = v16;
        v12 = v17;
        sub_66898(&v15, v16);
        LOBYTE(v11) = sub_20762C(v11, v12);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v15);
        if ((v11 & 1) != 0)
        {
          sub_5DC98(&v18, (uint64_t)&v15);
          if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
            sub_20C858(0, v7[2] + 1, 1);
          v7 = v21;
          v14 = v21[2];
          v13 = v21[3];
          if (v14 >= v13 >> 1)
          {
            sub_20C858(v13 > 1, v14 + 1, 1);
            v7 = v21;
          }
          v7[2] = v14 + 1;
          sub_5DC98(&v15, (uint64_t)&v7[5 * v14 + 4]);
          goto LABEL_5;
        }
      }
      else
      {
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v15);
      }
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v18);
LABEL_5:
      v6 += 40;
      if (!--v4)
        return v21;
    }
  }
  return result;
}

_QWORD *sub_180BE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_180C38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_180C84()
{
  unint64_t result;

  result = qword_327390;
  if (!qword_327390)
  {
    result = swift_getWitnessTable(&unk_262310, &type metadata for ReaderTypeFramesFactory.ReaderTypeScore);
    atomic_store(result, (unint64_t *)&qword_327390);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationBarStyle(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReaderTypeFramesFactory.ReaderTypeScore(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 6;
  v5 = v3 - 6;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ReaderTypeFramesFactory.ReaderTypeScore(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReaderTypeFramesFactory.ReaderTypeScore()
{
  return &type metadata for ReaderTypeFramesFactory.ReaderTypeScore;
}

unint64_t sub_180D78()
{
  unint64_t result;

  result = qword_327398;
  if (!qword_327398)
  {
    result = swift_getWitnessTable(&unk_2622E8, &type metadata for ReaderTypeFramesFactory.ReaderTypeScore);
    atomic_store(result, (unint64_t *)&qword_327398);
  }
  return result;
}

uint64_t Page.LifecycleInfo.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t Page.LifecycleInfo.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

unint64_t sub_180E00()
{
  unint64_t result;

  result = qword_3273A0;
  if (!qword_3273A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page.LifecycleEventKind, &type metadata for Page.LifecycleEventKind);
    atomic_store(result, (unint64_t *)&qword_3273A0);
  }
  return result;
}

uint64_t _s18LifecycleEventKindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_180E90 + 4 * byte_262345[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_180EC4 + 4 * byte_262340[v4]))();
}

uint64_t sub_180EC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_180ECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x180ED4);
  return result;
}

uint64_t sub_180EE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x180EE8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_180EEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_180EF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Page.LifecycleEventKind()
{
  return &type metadata for Page.LifecycleEventKind;
}

uint64_t type metadata accessor for Page.LifecycleInfo()
{
  return objc_opt_self(_TtCV11BookStoreUI4Page13LifecycleInfo);
}

uint64_t method lookup function for Page.LifecycleInfo(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Page.LifecycleInfo);
}

uint64_t ReviewBrickComponentModel.id.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_180F44(a1, v1);
}

uint64_t sub_180F44(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 40))(a2, a1);
  return a2;
}

uint64_t ReviewBrickComponentModel.restrictLineHeight.getter()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for ReviewBrickComponentModel(0);
  v0 = sub_5C154(&qword_327470);
  _DecodeDefault_Wrapper.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t type metadata accessor for ReviewBrickComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_327528;
  if (!qword_327528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReviewBrickComponentModel);
  return result;
}

_QWORD *sub_181004@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  type metadata accessor for ReviewBrickComponentModel(0);
  v2 = sub_5C154(&qword_327470);
  result = _DecodeDefault_Wrapper.wrappedValue.getter(&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_181060(char *a1)
{
  uint64_t v1;
  char v3;

  v3 = *a1;
  type metadata accessor for ReviewBrickComponentModel(0);
  v1 = sub_5C154(&qword_327470);
  return _DecodeDefault_Wrapper.wrappedValue.setter(&v3, v1);
}

uint64_t ReviewBrickComponentModel.restrictLineHeight.setter(char a1)
{
  uint64_t v1;
  char v3;

  v3 = a1;
  type metadata accessor for ReviewBrickComponentModel(0);
  v1 = sub_5C154(&qword_327470);
  return _DecodeDefault_Wrapper.wrappedValue.setter(&v3, v1);
}

void (*ReviewBrickComponentModel.restrictLineHeight.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ReviewBrickComponentModel(0);
  v3 = sub_5C154(&qword_327470);
  v2[4] = _DecodeDefault_Wrapper.wrappedValue.modify(v2, v3);
  return sub_181168;
}

void sub_181168(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t ReviewBrickComponentModel.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReviewBrickComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 32), a1, &qword_31F480);
}

uint64_t ReviewBrickComponentModel.impressionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReviewBrickComponentModel(0);
  return sub_8B3E0(a1, v1 + *(int *)(v3 + 32), &qword_31F480);
}

Swift::Void (__swiftcall *ReviewBrickComponentModel.impressionMetrics.modify())()
{
  type metadata accessor for ReviewBrickComponentModel(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t ReviewBrickComponentModel.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 36));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ReviewBrickComponentModel.subtitle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 40));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ReviewBrickComponentModel.body.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 44));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ReviewBrickComponentModel.footer.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 48));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

double ReviewBrickComponentModel.rating.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 52));
}

uint64_t ReviewBrickComponentModel.upVoteAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReviewBrickComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 56), a1, &qword_327478);
}

uint64_t ReviewBrickComponentModel.downVoteAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReviewBrickComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 60), a1, &qword_327478);
}

uint64_t ReviewBrickComponentModel.reportConcernAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReviewBrickComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 64), a1, &qword_327478);
}

uint64_t ReviewBrickComponentModel.thanksForVotingImageName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 68));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ReviewBrickComponentModel.thanksForVotingTitle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 72));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_181474(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18149C + 4 * byte_262410[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_18149C()
{
  return 0x6575676573;
}

uint64_t sub_1814B0()
{
  return 0x7465737361;
}

unint64_t sub_1814C4()
{
  return 0xD000000000000012;
}

uint64_t sub_1815F0()
{
  unsigned __int8 *v0;

  return sub_181474(*v0);
}

uint64_t sub_1815F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18449C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18161C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_182224();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_181644(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_182224();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ReviewBrickComponentModel.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  __n128 v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  id *v103;

  v85 = a2;
  v3 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v3);
  v86 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_327470);
  v94 = *(_QWORD *)(v5 - 8);
  v95 = v5;
  __chkstk_darwin(v5);
  v87 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_5C154(&qword_327480);
  v7 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReviewBrickComponentModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = v12 + 40;
  v99 = 0;
  v97 = 0u;
  v98 = 0u;
  v102 = 0;
  v100 = 0u;
  v101 = 0u;
  sub_8B354((uint64_t)&v97, (uint64_t)&v100);
  v13 = v101;
  *(_OWORD *)(v12 + 40) = v100;
  *(_OWORD *)(v12 + 56) = v13;
  *((_QWORD *)v12 + 9) = v102;
  sub_5E09C((uint64_t)&v97, (uint64_t *)&unk_326210);
  v14 = type metadata accessor for MAsset(0);
  *((_QWORD *)v12 + 10) = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v14);
  v15 = &v12[*(int *)(v10 + 28)];
  v16 = type metadata accessor for DecodeDefault.Providers.False(0);
  dispatch thunk of static DecodeDefault.DefaultValueProviding.defaultValue.getter(&v97, v16, &protocol witness table for DecodeDefault.Providers.False);
  v93 = v15;
  _DecodeDefault_Wrapper.init(wrappedValue:)(&v97, v16, &protocol witness table for DecodeDefault.Providers.False);
  v91 = (int *)v10;
  v17 = *(int *)(v10 + 32);
  v18 = a1;
  v19 = (uint64_t)&v12[v17];
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v92 = v19;
  v21(v19, 1, 1, v20);
  v23 = a1[3];
  v22 = a1[4];
  sub_66898(v18, v23);
  v24 = sub_182224();
  v89 = v9;
  v25 = v90;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReviewBrickComponentModel.CodingKeys, &type metadata for ReviewBrickComponentModel.CodingKeys, v24, v23, v22);
  v103 = (id *)v12;
  if (v25)
  {
    v90 = v25;
    LODWORD(v89) = 0;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v26 = v87;
    v84 = v7;
    v27 = sub_5C154(&qword_320B78);
    LOBYTE(v100) = 0;
    v28 = sub_67060((unint64_t *)&qword_320B90, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    v29 = v88;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v97, v27, &v100, v88, v27, v28);
    v39 = v98;
    *(_OWORD *)v12 = v97;
    *((_OWORD *)v12 + 1) = v39;
    *((_QWORD *)v12 + 4) = v99;
    v40 = sub_5C154(&qword_320B70);
    LOBYTE(v100) = 1;
    v41 = sub_67060(&qword_320B98, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v97, v40, &v100, v29, v40, v41);
    sub_8B3E0((uint64_t)&v97, (uint64_t)v96, &qword_320B70);
    v42 = sub_5C154(&qword_327490);
    LOBYTE(v100) = 2;
    v43 = sub_67060(&qword_327498, &qword_327490, (uint64_t)&protocol conformance descriptor for _MResourceDecoder_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v97, v42, &v100, v29, v42, v43);
    v44 = (void *)v97;

    v103[10] = v44;
    v45 = (uint64_t)v103;
    LOBYTE(v97) = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v97, v29, v16, &protocol witness table for DecodeDefault.Providers.False);
    (*(void (**)(char *, char *, uint64_t))(v94 + 40))(v93, v26, v95);
    LOBYTE(v97) = 4;
    v46 = sub_648E0(&qword_320BA0, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    v47 = (uint64_t)v86;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v20, &v97, v29, v20, v46);
    sub_8B3E0(v47, v92, &qword_31F480);
    LOBYTE(v97) = 5;
    v48 = KeyedDecodingContainer.decode(_:forKey:)(&v97, v29);
    v49 = v18;
    v50 = v91;
    v51 = (uint64_t *)(v45 + v91[9]);
    *v51 = v48;
    v51[1] = v52;
    LOBYTE(v97) = 6;
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v97, v29);
    v54 = (uint64_t *)(v45 + v50[10]);
    *v54 = v53;
    v54[1] = v55;
    LOBYTE(v97) = 7;
    v56 = KeyedDecodingContainer.decode(_:forKey:)(&v97, v29);
    v57 = (uint64_t *)(v45 + v50[11]);
    *v57 = v56;
    v57[1] = v58;
    LOBYTE(v97) = 8;
    v59 = KeyedDecodingContainer.decode(_:forKey:)(&v97, v29);
    v60 = (uint64_t *)(v45 + v91[12]);
    *v60 = v59;
    v60[1] = v61;
    LOBYTE(v97) = 9;
    v62 = KeyedDecodingContainer.decode(_:forKey:)(&v97, v29);
    v90 = 0;
    *(double *)((char *)v103 + v91[13]) = v62;
    LOBYTE(v100) = 10;
    v63 = sub_182268();
    v64 = v90;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for VoteReviewAction, &v100, v88, &type metadata for VoteReviewAction, v63);
    v90 = v64;
    if (v64)
    {
      (*(void (**)(char *, uint64_t, __n128))(v84 + 8))(v89, v88, v65);
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
    }
    else
    {
      sub_66F14((uint64_t)&v97, (uint64_t)v103 + v91[14], &qword_327478);
      LOBYTE(v100) = 11;
      v70 = v90;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for VoteReviewAction, &v100, v88, &type metadata for VoteReviewAction, v63);
      v90 = v70;
      if (v70)
      {
        (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v88);
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v66 = 1;
      }
      else
      {
        sub_66F14((uint64_t)&v97, (uint64_t)v103 + v91[15], &qword_327478);
        LOBYTE(v100) = 12;
        v71 = v90;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for VoteReviewAction, &v100, v88, &type metadata for VoteReviewAction, v63);
        v90 = v71;
        if (v71)
        {
          (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v88);
          v68 = 0;
          v69 = 0;
          v66 = 1;
          v67 = 1;
        }
        else
        {
          sub_66F14((uint64_t)&v97, (uint64_t)v103 + v91[16], &qword_327478);
          LOBYTE(v97) = 13;
          v72 = v90;
          v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v97, v88);
          v90 = v72;
          if (v72)
          {
            (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v88);
            v69 = 0;
            v66 = 1;
            v67 = 1;
            v68 = 1;
          }
          else
          {
            v75 = (uint64_t *)((char *)v103 + v91[17]);
            *v75 = v73;
            v75[1] = v74;
            LOBYTE(v97) = 14;
            v76 = v90;
            v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v97, v88);
            v90 = v76;
            if (!v76)
            {
              v79 = v77;
              v80 = v78;
              (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v88);
              v81 = (uint64_t)v103;
              v82 = (uint64_t *)((char *)v103 + v91[18]);
              *v82 = v79;
              v82[1] = v80;
              sub_1822AC(v81, v85);
              _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v49);
              sub_1822F0(v81);
              return;
            }
            (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v88);
            v66 = 1;
            v67 = 1;
            v68 = 1;
            v69 = 1;
          }
        }
      }
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v49);
    v35 = 1;
    v36 = 1;
    LODWORD(v89) = 1;
    v31 = v66;
    v34 = v69;
    v33 = v68;
    v32 = v67;
    sub_5E09C((uint64_t)v103, &qword_320B78);
    v30 = 1;
  }
  sub_5E09C((uint64_t)v96, &qword_320B70);
  v37 = (uint64_t)v103;

  (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
  sub_5E09C(v92, &qword_31F480);
  v38 = v91;
  if (v35)
    swift_bridgeObjectRelease(*(_QWORD *)(v37 + v91[9] + 8));
  if (v36)
    swift_bridgeObjectRelease(*(_QWORD *)(v37 + v38[10] + 8));
  if ((_DWORD)v89)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v37 + v38[11] + 8));
    if (!v30)
    {
LABEL_10:
      if (!v31)
        goto LABEL_11;
      goto LABEL_17;
    }
  }
  else if (!v30)
  {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v37 + v38[12] + 8));
  if (!v31)
  {
LABEL_11:
    if (!v32)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  sub_5E09C(v37 + v38[14], &qword_327478);
  if (!v32)
  {
LABEL_12:
    if (!v33)
      goto LABEL_13;
LABEL_19:
    sub_5E09C(v37 + v38[16], &qword_327478);
    if (!v34)
      return;
    goto LABEL_20;
  }
LABEL_18:
  sub_5E09C(v37 + v38[15], &qword_327478);
  if (v33)
    goto LABEL_19;
LABEL_13:
  if (!v34)
    return;
LABEL_20:
  swift_bridgeObjectRelease(*(_QWORD *)(v37 + v38[17] + 8));
}

unint64_t sub_182224()
{
  unint64_t result;

  result = qword_327488;
  if (!qword_327488)
  {
    result = swift_getWitnessTable(&unk_2627DC, &type metadata for ReviewBrickComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_327488);
  }
  return result;
}

unint64_t sub_182268()
{
  unint64_t result;

  result = qword_3274A0;
  if (!qword_3274A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VoteReviewAction, &type metadata for VoteReviewAction);
    atomic_store(result, (unint64_t *)&qword_3274A0);
  }
  return result;
}

uint64_t sub_1822AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReviewBrickComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1822F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReviewBrickComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_18232C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReviewBrickComponentModel.init(from:)(a1, a2);
}

uint64_t sub_182340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 32), a2, &qword_31F480);
}

uint64_t VoteReviewAction.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v4[2];

  sub_5E1A4(v1 + 32, (uint64_t)v4, &qword_3274A8);
  return sub_5DC98(v4, a1);
}

uint64_t VoteReviewAction.action.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + 32);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v3);
  return sub_5DC98(a1, (uint64_t)v3);
}

Swift::Void (__swiftcall *VoteReviewAction.action.modify())()
{
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_1823EC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C746974;
  if (*v0 != 1)
    v1 = 0x6E6F69746361;
  if (*v0)
    return v1;
  else
    return 0x6D614E6567616D69;
}

uint64_t sub_182444@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_184A5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_182468(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1826DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_182490(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1826DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void VoteReviewAction.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _QWORD v18[4];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v5 = sub_5C154(&qword_3274B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v11 = sub_1826DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for VoteReviewAction.CodingKeys, &type metadata for VoteReviewAction.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  }
  else
  {
    LOBYTE(v16[0]) = 0;
    v18[0] = KeyedDecodingContainer.decode(_:forKey:)(v16, v5);
    v18[1] = v12;
    LOBYTE(v16[0]) = 1;
    v18[2] = KeyedDecodingContainer.decode(_:forKey:)(v16, v5);
    v18[3] = v13;
    v14 = sub_5C154(&qword_3274A8);
    v22 = 2;
    v15 = sub_67060((unint64_t *)&qword_3274C0, &qword_3274A8, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v14, &v22, v5, v14, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v16[0];
    v20 = v16[1];
    v21 = v17;
    sub_182720((uint64_t)v18, a2);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    sub_182754(v18);
  }
}

unint64_t sub_1826DC()
{
  unint64_t result;

  result = qword_3274B8;
  if (!qword_3274B8)
  {
    result = swift_getWitnessTable(&unk_26278C, &type metadata for VoteReviewAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3274B8);
  }
  return result;
}

uint64_t sub_182720(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RecommendationSeedItem(a2, a1);
  return a2;
}

_QWORD *sub_182754(_QWORD *a1)
{
  destroy for RecommendationSeedItem(a1);
  return a1;
}

uint64_t sub_182780()
{
  return sub_648E0(&qword_3274C8, type metadata accessor for ReviewBrickComponentModel, (uint64_t)&protocol conformance descriptor for ReviewBrickComponentModel);
}

void sub_1827AC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  VoteReviewAction.init(from:)(a1, a2);
}

uint64_t sub_1827C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_5E1A4(a1, a2, &qword_320B78);
}

uint64_t sub_1827E0(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  sub_5DCB0(a1, (uint64_t)v4);
  return sub_180F44((uint64_t)v4, a2);
}

uint64_t sub_182818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[40];

  sub_5E1A4(a1 + 40, (uint64_t)v4, &qword_320B70);
  return sub_66F14((uint64_t)v4, a2, (uint64_t *)&unk_326210);
}

uint64_t sub_182864(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  sub_5E1A4(a1, (uint64_t)v4, (uint64_t *)&unk_326210);
  return sub_8B3E0((uint64_t)v4, a2 + 40, (uint64_t *)&unk_326210);
}

uint64_t sub_1828B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4[2];

  sub_5E1A4(a1 + 32, (uint64_t)v4, &qword_3274A8);
  return sub_5DC98(v4, a2);
}

uint64_t sub_1828F8(uint64_t a1, _QWORD *a2)
{
  __int128 v4[2];

  sub_5E0D8(a1, (uint64_t)v4);
  a2 += 4;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a2);
  return sub_5DC98(v4, (uint64_t)a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ReviewBrickComponentModel(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = (_OWORD *)(v4 + 40);
    v9 = a2 + 5;
    v10 = a2[8];
    if (v10)
    {
      v11 = a2[9];
      *(_QWORD *)(v4 + 64) = v10;
      *(_QWORD *)(v4 + 72) = v11;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *v8 = *v9;
      *(_OWORD *)(v4 + 56) = v13;
      *(_QWORD *)(v4 + 72) = a2[9];
    }
    v14 = (void *)a2[10];
    *(_QWORD *)(v4 + 80) = v14;
    v15 = a3[7];
    v16 = v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = v14;
    v19 = sub_5C154(&qword_327470);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    v20 = a3[8];
    v21 = (void *)(v4 + v20);
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for ImpressionMetrics(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_5C154(&qword_31F480);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = a3[9];
    v27 = a3[10];
    v28 = (_QWORD *)(v4 + v26);
    v29 = (uint64_t *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (_QWORD *)(v4 + v27);
    v32 = (uint64_t *)((char *)a2 + v27);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = a3[11];
    v35 = a3[12];
    v36 = (_QWORD *)(v4 + v34);
    v37 = (uint64_t *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (_QWORD *)(v4 + v35);
    v40 = (uint64_t *)((char *)a2 + v35);
    v41 = *v40;
    v42 = v40[1];
    v43 = a3[13];
    v44 = a3[14];
    v45 = *(uint64_t *)((char *)a2 + v43);
    *v39 = v41;
    v39[1] = v42;
    *(_QWORD *)(v4 + v43) = v45;
    v46 = v4 + v44;
    v47 = (uint64_t)a2 + v44;
    v48 = *(uint64_t *)((char *)a2 + v44 + 8);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v42);
    if (v48)
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *(_QWORD *)(v46 + 8) = v48;
      v49 = *(_QWORD *)(v47 + 24);
      *(_QWORD *)(v46 + 16) = *(_QWORD *)(v47 + 16);
      *(_QWORD *)(v46 + 24) = v49;
      v50 = v46 + 32;
      v51 = v47 + 32;
      v52 = *(_OWORD *)(v47 + 56);
      *(_OWORD *)(v46 + 56) = v52;
      v53 = v52;
      v54 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v52 - 8);
      swift_bridgeObjectRetain(v48);
      v55 = swift_bridgeObjectRetain(v49);
      v54(v50, v51, v53, v55);
    }
    else
    {
      v56 = *(_OWORD *)(v47 + 48);
      *(_OWORD *)(v46 + 32) = *(_OWORD *)(v47 + 32);
      *(_OWORD *)(v46 + 48) = v56;
      *(_QWORD *)(v46 + 64) = *(_QWORD *)(v47 + 64);
      v57 = *(_OWORD *)(v47 + 16);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *(_OWORD *)(v46 + 16) = v57;
    }
    v58 = a3[15];
    v59 = v4 + v58;
    v60 = (uint64_t)a2 + v58;
    v61 = *(_QWORD *)(v60 + 8);
    if (v61)
    {
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *(_QWORD *)(v59 + 8) = v61;
      v62 = *(_QWORD *)(v60 + 24);
      *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
      *(_QWORD *)(v59 + 24) = v62;
      v63 = v59 + 32;
      v64 = v60 + 32;
      v65 = *(_OWORD *)(v60 + 56);
      *(_OWORD *)(v59 + 56) = v65;
      v66 = v65;
      v67 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v65 - 8);
      swift_bridgeObjectRetain(v61);
      v68 = swift_bridgeObjectRetain(v62);
      v67(v63, v64, v66, v68);
    }
    else
    {
      v69 = *(_OWORD *)(v60 + 48);
      *(_OWORD *)(v59 + 32) = *(_OWORD *)(v60 + 32);
      *(_OWORD *)(v59 + 48) = v69;
      *(_QWORD *)(v59 + 64) = *(_QWORD *)(v60 + 64);
      v70 = *(_OWORD *)(v60 + 16);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 16) = v70;
    }
    v71 = a3[16];
    v72 = v4 + v71;
    v73 = (uint64_t)a2 + v71;
    v74 = *(_QWORD *)(v73 + 8);
    if (v74)
    {
      *(_QWORD *)v72 = *(_QWORD *)v73;
      *(_QWORD *)(v72 + 8) = v74;
      v75 = *(_QWORD *)(v73 + 24);
      *(_QWORD *)(v72 + 16) = *(_QWORD *)(v73 + 16);
      *(_QWORD *)(v72 + 24) = v75;
      v76 = v72 + 32;
      v77 = v73 + 32;
      v78 = *(_OWORD *)(v73 + 56);
      *(_OWORD *)(v72 + 56) = v78;
      v79 = v78;
      v80 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v78 - 8);
      swift_bridgeObjectRetain(v74);
      v81 = swift_bridgeObjectRetain(v75);
      v80(v76, v77, v79, v81);
    }
    else
    {
      v82 = *(_OWORD *)(v73 + 48);
      *(_OWORD *)(v72 + 32) = *(_OWORD *)(v73 + 32);
      *(_OWORD *)(v72 + 48) = v82;
      *(_QWORD *)(v72 + 64) = *(_QWORD *)(v73 + 64);
      v83 = *(_OWORD *)(v73 + 16);
      *(_OWORD *)v72 = *(_OWORD *)v73;
      *(_OWORD *)(v72 + 16) = v83;
    }
    v84 = a3[17];
    v85 = a3[18];
    v86 = (_QWORD *)(v4 + v84);
    v87 = (uint64_t *)((char *)a2 + v84);
    v88 = v87[1];
    *v86 = *v87;
    v86[1] = v88;
    v89 = (_QWORD *)(v4 + v85);
    v90 = (uint64_t *)((char *)a2 + v85);
    v91 = v90[1];
    *v89 = *v90;
    v89[1] = v91;
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v91);
  }
  return v4;
}

double destroy for ReviewBrickComponentModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double result;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  if (*(_QWORD *)(a1 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));

  v4 = a1 + a2[7];
  v5 = sub_5C154(&qword_327470);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for ImpressionMetrics(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  v9 = (_QWORD *)(a1 + a2[14]);
  v10 = v9[1];
  if (v10)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v9 + 4);
  }
  v11 = (_QWORD *)(a1 + a2[15]);
  v12 = v11[1];
  if (v12)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v11 + 4);
  }
  v13 = (_QWORD *)(a1 + a2[16]);
  v14 = v13[1];
  if (v14)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v13[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v13 + 4);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18] + 8)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ReviewBrickComponentModel(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = v12;
  v17 = sub_5C154(&qword_327470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
  v18 = a3[8];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_5C154(&qword_31F480);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[9];
  v25 = a3[10];
  v26 = (_QWORD *)(a1 + v24);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (_QWORD *)(a1 + v25);
  v30 = (_QWORD *)(a2 + v25);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = a3[11];
  v33 = a3[12];
  v34 = (_QWORD *)(a1 + v32);
  v35 = (_QWORD *)(a2 + v32);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = (_QWORD *)(a1 + v33);
  v38 = (uint64_t *)(a2 + v33);
  v39 = *v38;
  v40 = v38[1];
  v41 = a3[13];
  v42 = a3[14];
  v43 = *(_QWORD *)(a2 + v41);
  *v37 = v39;
  v37[1] = v40;
  *(_QWORD *)(a1 + v41) = v43;
  v44 = a1 + v42;
  v45 = a2 + v42;
  v46 = *(_QWORD *)(a2 + v42 + 8);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v40);
  if (v46)
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = v46;
    v47 = *(_QWORD *)(v45 + 24);
    *(_QWORD *)(v44 + 16) = *(_QWORD *)(v45 + 16);
    *(_QWORD *)(v44 + 24) = v47;
    v48 = v44 + 32;
    v49 = v45 + 32;
    v50 = *(_OWORD *)(v45 + 56);
    *(_OWORD *)(v44 + 56) = v50;
    v51 = v50;
    v52 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v50 - 8);
    swift_bridgeObjectRetain(v46);
    v53 = swift_bridgeObjectRetain(v47);
    v52(v48, v49, v51, v53);
  }
  else
  {
    v54 = *(_OWORD *)(v45 + 48);
    *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
    *(_OWORD *)(v44 + 48) = v54;
    *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
    v55 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *(_OWORD *)(v44 + 16) = v55;
  }
  v56 = a3[15];
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = *(_QWORD *)(v58 + 8);
  if (v59)
  {
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *(_QWORD *)(v57 + 8) = v59;
    v60 = *(_QWORD *)(v58 + 24);
    *(_QWORD *)(v57 + 16) = *(_QWORD *)(v58 + 16);
    *(_QWORD *)(v57 + 24) = v60;
    v61 = v57 + 32;
    v62 = v58 + 32;
    v63 = *(_OWORD *)(v58 + 56);
    *(_OWORD *)(v57 + 56) = v63;
    v64 = v63;
    v65 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v63 - 8);
    swift_bridgeObjectRetain(v59);
    v66 = swift_bridgeObjectRetain(v60);
    v65(v61, v62, v64, v66);
  }
  else
  {
    v67 = *(_OWORD *)(v58 + 48);
    *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
    *(_OWORD *)(v57 + 48) = v67;
    *(_QWORD *)(v57 + 64) = *(_QWORD *)(v58 + 64);
    v68 = *(_OWORD *)(v58 + 16);
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *(_OWORD *)(v57 + 16) = v68;
  }
  v69 = a3[16];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = *(_QWORD *)(v71 + 8);
  if (v72)
  {
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *(_QWORD *)(v70 + 8) = v72;
    v73 = *(_QWORD *)(v71 + 24);
    *(_QWORD *)(v70 + 16) = *(_QWORD *)(v71 + 16);
    *(_QWORD *)(v70 + 24) = v73;
    v74 = v70 + 32;
    v75 = v71 + 32;
    v76 = *(_OWORD *)(v71 + 56);
    *(_OWORD *)(v70 + 56) = v76;
    v77 = v76;
    v78 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v76 - 8);
    swift_bridgeObjectRetain(v72);
    v79 = swift_bridgeObjectRetain(v73);
    v78(v74, v75, v77, v79);
  }
  else
  {
    v80 = *(_OWORD *)(v71 + 48);
    *(_OWORD *)(v70 + 32) = *(_OWORD *)(v71 + 32);
    *(_OWORD *)(v70 + 48) = v80;
    *(_QWORD *)(v70 + 64) = *(_QWORD *)(v71 + 64);
    v81 = *(_OWORD *)(v71 + 16);
    *(_OWORD *)v70 = *(_OWORD *)v71;
    *(_OWORD *)(v70 + 16) = v81;
  }
  v82 = a3[17];
  v83 = a3[18];
  v84 = (_QWORD *)(a1 + v82);
  v85 = (_QWORD *)(a2 + v82);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = (_QWORD *)(a1 + v83);
  v88 = (_QWORD *)(a2 + v83);
  v89 = v88[1];
  *v87 = *v88;
  v87[1] = v89;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v89);
  return a1;
}

uint64_t assignWithCopy for ReviewBrickComponentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      sub_65938((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
    goto LABEL_8;
  }
  v7 = *(_OWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v8;
LABEL_8:
  v9 = *(void **)(a1 + 80);
  v10 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  v11 = v10;

  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_5C154(&qword_327470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_13:
    v24 = sub_5C154(&qword_31F480);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_14:
  v25 = a3[9];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[10];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  *v31 = *v32;
  v33 = v32[1];
  v34 = v31[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = a3[11];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v39 = v36[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v40 = a3[12];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v45 = a3[14];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = *(_QWORD *)(a1 + v45 + 8);
  v49 = *(_QWORD *)(a2 + v45 + 8);
  if (v48)
  {
    if (v49)
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v50 = *(_QWORD *)(v47 + 8);
      *(_QWORD *)(v46 + 8) = v50;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v48);
      *(_QWORD *)(v46 + 16) = *(_QWORD *)(v47 + 16);
      v51 = *(_QWORD *)(v47 + 24);
      v52 = *(_QWORD *)(v46 + 24);
      *(_QWORD *)(v46 + 24) = v51;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease(v52);
      sub_65938((_QWORD *)(v46 + 32), (_QWORD *)(v47 + 32));
    }
    else
    {
      sub_182754((_QWORD *)v46);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      v60 = *(_OWORD *)(v47 + 32);
      v59 = *(_OWORD *)(v47 + 48);
      v61 = *(_OWORD *)(v47 + 16);
      *(_QWORD *)(v46 + 64) = *(_QWORD *)(v47 + 64);
      *(_OWORD *)(v46 + 32) = v60;
      *(_OWORD *)(v46 + 48) = v59;
      *(_OWORD *)(v46 + 16) = v61;
    }
  }
  else if (v49)
  {
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v53 = *(_QWORD *)(v47 + 8);
    *(_QWORD *)(v46 + 8) = v53;
    *(_QWORD *)(v46 + 16) = *(_QWORD *)(v47 + 16);
    v54 = *(_QWORD *)(v47 + 24);
    *(_QWORD *)(v46 + 24) = v54;
    v55 = v46 + 32;
    v56 = *(_QWORD *)(v47 + 56);
    *(_QWORD *)(v46 + 56) = v56;
    *(_QWORD *)(v46 + 64) = *(_QWORD *)(v47 + 64);
    v57 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v56 - 8);
    swift_bridgeObjectRetain(v53);
    v58 = swift_bridgeObjectRetain(v54);
    v57(v55, v47 + 32, v56, v58);
  }
  else
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
    v62 = *(_OWORD *)(v47 + 16);
    v63 = *(_OWORD *)(v47 + 32);
    v64 = *(_OWORD *)(v47 + 48);
    *(_QWORD *)(v46 + 64) = *(_QWORD *)(v47 + 64);
    *(_OWORD *)(v46 + 32) = v63;
    *(_OWORD *)(v46 + 48) = v64;
    *(_OWORD *)(v46 + 16) = v62;
  }
  v65 = a3[15];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = *(_QWORD *)(a1 + v65 + 8);
  v69 = *(_QWORD *)(a2 + v65 + 8);
  if (v68)
  {
    if (v69)
    {
      *(_QWORD *)v66 = *(_QWORD *)v67;
      v70 = *(_QWORD *)(v67 + 8);
      *(_QWORD *)(v66 + 8) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease(v68);
      *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
      v71 = *(_QWORD *)(v67 + 24);
      v72 = *(_QWORD *)(v66 + 24);
      *(_QWORD *)(v66 + 24) = v71;
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRelease(v72);
      sub_65938((_QWORD *)(v66 + 32), (_QWORD *)(v67 + 32));
    }
    else
    {
      sub_182754((_QWORD *)v66);
      *(_OWORD *)v66 = *(_OWORD *)v67;
      v80 = *(_OWORD *)(v67 + 32);
      v79 = *(_OWORD *)(v67 + 48);
      v81 = *(_OWORD *)(v67 + 16);
      *(_QWORD *)(v66 + 64) = *(_QWORD *)(v67 + 64);
      *(_OWORD *)(v66 + 32) = v80;
      *(_OWORD *)(v66 + 48) = v79;
      *(_OWORD *)(v66 + 16) = v81;
    }
  }
  else if (v69)
  {
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v73 = *(_QWORD *)(v67 + 8);
    *(_QWORD *)(v66 + 8) = v73;
    *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
    v74 = *(_QWORD *)(v67 + 24);
    *(_QWORD *)(v66 + 24) = v74;
    v75 = v66 + 32;
    v76 = *(_QWORD *)(v67 + 56);
    *(_QWORD *)(v66 + 56) = v76;
    *(_QWORD *)(v66 + 64) = *(_QWORD *)(v67 + 64);
    v77 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v76 - 8);
    swift_bridgeObjectRetain(v73);
    v78 = swift_bridgeObjectRetain(v74);
    v77(v75, v67 + 32, v76, v78);
  }
  else
  {
    *(_OWORD *)v66 = *(_OWORD *)v67;
    v82 = *(_OWORD *)(v67 + 16);
    v83 = *(_OWORD *)(v67 + 32);
    v84 = *(_OWORD *)(v67 + 48);
    *(_QWORD *)(v66 + 64) = *(_QWORD *)(v67 + 64);
    *(_OWORD *)(v66 + 32) = v83;
    *(_OWORD *)(v66 + 48) = v84;
    *(_OWORD *)(v66 + 16) = v82;
  }
  v85 = a3[16];
  v86 = a1 + v85;
  v87 = a2 + v85;
  v88 = *(_QWORD *)(a1 + v85 + 8);
  v89 = *(_QWORD *)(a2 + v85 + 8);
  if (v88)
  {
    if (v89)
    {
      *(_QWORD *)v86 = *(_QWORD *)v87;
      v90 = *(_QWORD *)(v87 + 8);
      *(_QWORD *)(v86 + 8) = v90;
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease(v88);
      *(_QWORD *)(v86 + 16) = *(_QWORD *)(v87 + 16);
      v91 = *(_QWORD *)(v87 + 24);
      v92 = *(_QWORD *)(v86 + 24);
      *(_QWORD *)(v86 + 24) = v91;
      swift_bridgeObjectRetain(v91);
      swift_bridgeObjectRelease(v92);
      sub_65938((_QWORD *)(v86 + 32), (_QWORD *)(v87 + 32));
    }
    else
    {
      sub_182754((_QWORD *)v86);
      *(_OWORD *)v86 = *(_OWORD *)v87;
      v100 = *(_OWORD *)(v87 + 32);
      v99 = *(_OWORD *)(v87 + 48);
      v101 = *(_OWORD *)(v87 + 16);
      *(_QWORD *)(v86 + 64) = *(_QWORD *)(v87 + 64);
      *(_OWORD *)(v86 + 32) = v100;
      *(_OWORD *)(v86 + 48) = v99;
      *(_OWORD *)(v86 + 16) = v101;
    }
  }
  else if (v89)
  {
    *(_QWORD *)v86 = *(_QWORD *)v87;
    v93 = *(_QWORD *)(v87 + 8);
    *(_QWORD *)(v86 + 8) = v93;
    *(_QWORD *)(v86 + 16) = *(_QWORD *)(v87 + 16);
    v94 = *(_QWORD *)(v87 + 24);
    *(_QWORD *)(v86 + 24) = v94;
    v95 = v86 + 32;
    v96 = *(_QWORD *)(v87 + 56);
    *(_QWORD *)(v86 + 56) = v96;
    *(_QWORD *)(v86 + 64) = *(_QWORD *)(v87 + 64);
    v97 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v96 - 8);
    swift_bridgeObjectRetain(v93);
    v98 = swift_bridgeObjectRetain(v94);
    v97(v95, v87 + 32, v96, v98);
  }
  else
  {
    *(_OWORD *)v86 = *(_OWORD *)v87;
    v102 = *(_OWORD *)(v87 + 16);
    v103 = *(_OWORD *)(v87 + 32);
    v104 = *(_OWORD *)(v87 + 48);
    *(_QWORD *)(v86 + 64) = *(_QWORD *)(v87 + 64);
    *(_OWORD *)(v86 + 32) = v103;
    *(_OWORD *)(v86 + 48) = v104;
    *(_OWORD *)(v86 + 16) = v102;
  }
  v105 = a3[17];
  v106 = (_QWORD *)(a1 + v105);
  v107 = (_QWORD *)(a2 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = a3[18];
  v111 = (_QWORD *)(a1 + v110);
  v112 = (_QWORD *)(a2 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  return a1;
}

uint64_t initializeWithTake for ReviewBrickComponentModel(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 56) = v7;
  v12 = sub_5C154(&qword_327470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[8];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_5C154(&qword_31F480);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v20 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v21 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)(v22 + 64) = *(_QWORD *)(v23 + 64);
  v24 = *(_OWORD *)(v23 + 48);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
  *(_OWORD *)(v22 + 48) = v24;
  v25 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v25;
  v26 = a3[15];
  v27 = a3[16];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_QWORD *)(v28 + 64) = *(_QWORD *)(v29 + 64);
  v30 = *(_OWORD *)(v29 + 48);
  *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
  *(_OWORD *)(v28 + 48) = v30;
  v31 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
  v32 = a1 + v27;
  v33 = a2 + v27;
  *(_QWORD *)(v32 + 64) = *(_QWORD *)(v33 + 64);
  v34 = *(_OWORD *)(v33 + 48);
  *(_OWORD *)(v32 + 32) = *(_OWORD *)(v33 + 32);
  *(_OWORD *)(v32 + 48) = v34;
  v35 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v35;
  v36 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  return a1;
}

uint64_t assignWithTake for ReviewBrickComponentModel(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_5C154(&qword_327470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[8];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_8:
    v21 = sub_5C154(&qword_31F480);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_9:
  v22 = a3[9];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[10];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  v33 = v29[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  v34 = a3[11];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  v39 = v35[1];
  *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  v40 = a3[12];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  v46 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = *(_QWORD *)(a1 + v46 + 8);
  if (v49)
  {
    v50 = *(_QWORD *)(v48 + 8);
    if (v50)
    {
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *(_QWORD *)(v47 + 8) = v50;
      swift_bridgeObjectRelease(v49);
      v51 = *(_QWORD *)(v48 + 24);
      v52 = *(_QWORD *)(v47 + 24);
      *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
      *(_QWORD *)(v47 + 24) = v51;
      swift_bridgeObjectRelease(v52);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v47 + 32));
      v53 = *(_OWORD *)(v48 + 48);
      *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
      *(_OWORD *)(v47 + 48) = v53;
      *(_QWORD *)(v47 + 64) = *(_QWORD *)(v48 + 64);
      goto LABEL_14;
    }
    sub_182754((_QWORD *)(a1 + v46));
  }
  v54 = *(_OWORD *)(v48 + 48);
  *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
  *(_OWORD *)(v47 + 48) = v54;
  *(_QWORD *)(v47 + 64) = *(_QWORD *)(v48 + 64);
  v55 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v55;
LABEL_14:
  v56 = a3[15];
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = *(_QWORD *)(a1 + v56 + 8);
  if (v59)
  {
    v60 = *(_QWORD *)(v58 + 8);
    if (v60)
    {
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *(_QWORD *)(v57 + 8) = v60;
      swift_bridgeObjectRelease(v59);
      v61 = *(_QWORD *)(v58 + 24);
      v62 = *(_QWORD *)(v57 + 24);
      *(_QWORD *)(v57 + 16) = *(_QWORD *)(v58 + 16);
      *(_QWORD *)(v57 + 24) = v61;
      swift_bridgeObjectRelease(v62);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v57 + 32));
      v63 = *(_OWORD *)(v58 + 48);
      *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
      *(_OWORD *)(v57 + 48) = v63;
      *(_QWORD *)(v57 + 64) = *(_QWORD *)(v58 + 64);
      goto LABEL_19;
    }
    sub_182754((_QWORD *)v57);
  }
  v64 = *(_OWORD *)(v58 + 48);
  *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
  *(_OWORD *)(v57 + 48) = v64;
  *(_QWORD *)(v57 + 64) = *(_QWORD *)(v58 + 64);
  v65 = *(_OWORD *)(v58 + 16);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *(_OWORD *)(v57 + 16) = v65;
LABEL_19:
  v66 = a3[16];
  v67 = a1 + v66;
  v68 = a2 + v66;
  v69 = *(_QWORD *)(a1 + v66 + 8);
  if (!v69)
  {
LABEL_23:
    v74 = *(_OWORD *)(v68 + 48);
    *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
    *(_OWORD *)(v67 + 48) = v74;
    *(_QWORD *)(v67 + 64) = *(_QWORD *)(v68 + 64);
    v75 = *(_OWORD *)(v68 + 16);
    *(_OWORD *)v67 = *(_OWORD *)v68;
    *(_OWORD *)(v67 + 16) = v75;
    goto LABEL_24;
  }
  v70 = *(_QWORD *)(v68 + 8);
  if (!v70)
  {
    sub_182754((_QWORD *)v67);
    goto LABEL_23;
  }
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *(_QWORD *)(v67 + 8) = v70;
  swift_bridgeObjectRelease(v69);
  v71 = *(_QWORD *)(v68 + 24);
  v72 = *(_QWORD *)(v67 + 24);
  *(_QWORD *)(v67 + 16) = *(_QWORD *)(v68 + 16);
  *(_QWORD *)(v67 + 24) = v71;
  swift_bridgeObjectRelease(v72);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v67 + 32));
  v73 = *(_OWORD *)(v68 + 48);
  *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
  *(_OWORD *)(v67 + 48) = v73;
  *(_QWORD *)(v67 + 64) = *(_QWORD *)(v68 + 64);
LABEL_24:
  v76 = a3[17];
  v77 = (_QWORD *)(a1 + v76);
  v78 = (uint64_t *)(a2 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = a3[18];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReviewBrickComponentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_183D34);
}

uint64_t sub_183D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_327470);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_5C154(&qword_31F480);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ReviewBrickComponentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_183DE8);
}

uint64_t sub_183DE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = sub_5C154(&qword_327470);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_5C154(&qword_31F480);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_183E8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[15];

  v6[0] = "(";
  v6[1] = &unk_262588;
  v6[2] = &unk_2625A0;
  sub_183F68(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_AE8F0(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_2625B8;
      v6[6] = &unk_2625D0;
      v6[7] = &unk_2625B8;
      v6[8] = &unk_2625B8;
      v6[9] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[10] = &unk_2625E8;
      v6[11] = &unk_2625E8;
      v6[12] = &unk_2625E8;
      v6[13] = &unk_2625D0;
      v6[14] = &unk_2625D0;
      swift_initStructMetadata(a1, 256, 15, v6, a1 + 16);
    }
  }
}

void sub_183F68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_327538)
  {
    v2 = type metadata accessor for DecodeDefault.Providers.False(255);
    v3 = type metadata accessor for _DecodeDefault_Wrapper(a1, v2, &protocol witness table for DecodeDefault.Providers.False);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_327538);
  }
}

ValueMetadata *type metadata accessor for VoteReviewAction()
{
  return &type metadata for VoteReviewAction;
}

uint64_t storeEnumTagSinglePayload for VoteReviewAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_184020 + 4 * byte_262424[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_184054 + 4 * byte_26241F[v4]))();
}

uint64_t sub_184054(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18405C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x184064);
  return result;
}

uint64_t sub_184070(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x184078);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18407C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_184084(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VoteReviewAction.CodingKeys()
{
  return &type metadata for VoteReviewAction.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReviewBrickComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1840EC + 4 * byte_26242E[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_184120 + 4 * byte_262429[v4]))();
}

uint64_t sub_184120(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_184128(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x184130);
  return result;
}

uint64_t sub_18413C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x184144);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_184148(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_184150(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReviewBrickComponentModel.CodingKeys()
{
  return &type metadata for ReviewBrickComponentModel.CodingKeys;
}

unint64_t sub_184170()
{
  unint64_t result;

  result = qword_3275A0;
  if (!qword_3275A0)
  {
    result = swift_getWitnessTable(&unk_2626AC, &type metadata for ReviewBrickComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3275A0);
  }
  return result;
}

unint64_t sub_1841B8()
{
  unint64_t result;

  result = qword_3275A8;
  if (!qword_3275A8)
  {
    result = swift_getWitnessTable(&unk_262764, &type metadata for VoteReviewAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3275A8);
  }
  return result;
}

unint64_t sub_184200()
{
  unint64_t result;

  result = qword_3275B0;
  if (!qword_3275B0)
  {
    result = swift_getWitnessTable(&unk_2626D4, &type metadata for VoteReviewAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3275B0);
  }
  return result;
}

unint64_t sub_184248()
{
  unint64_t result;

  result = qword_3275B8;
  if (!qword_3275B8)
  {
    result = swift_getWitnessTable(&unk_2626FC, &type metadata for VoteReviewAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3275B8);
  }
  return result;
}

unint64_t sub_184290()
{
  unint64_t result;

  result = qword_3275C0;
  if (!qword_3275C0)
  {
    result = swift_getWitnessTable(&unk_26261C, &type metadata for ReviewBrickComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3275C0);
  }
  return result;
}

unint64_t sub_1842D8()
{
  unint64_t result;

  result = qword_3275C8;
  if (!qword_3275C8)
  {
    result = swift_getWitnessTable(&unk_262644, &type metadata for ReviewBrickComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3275C8);
  }
  return result;
}

uint64_t sub_18431C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  double *v8;
  void *v9;
  id v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for CoverViewModel.Style(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (double *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 80);
  if (v9)
  {
    v10 = v9;
    static ContentInfoUtilities.assetInfo(storeAsset:)(&v20, v10, v11);

    if (v21)
    {
      sub_5DC98(&v20, (uint64_t)v22);
      sub_5DC98(v22, (uint64_t)v23);
      v12 = v24;
      v13 = v25;
      sub_66898(v23, v24);
      v14 = AssetInfo.coverAspectRatio.getter(v12, v13) * 96.0;
      sub_5E0D8((uint64_t)v23, (uint64_t)v8);
      v8[5] = v14;
      v8[6] = 96.0;
      (*(void (**)(double *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for CoverViewModel.Style.image(_:), v4);
      CoverViewModel.init(style:)(v8);
      v16 = type metadata accessor for CoverViewModel(0, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
    }
    sub_5E09C((uint64_t)&v20, &qword_320940);
  }
  v18 = type metadata accessor for CoverViewModel(0, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
}

uint64_t sub_18449C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7465737361 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7465737361, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000000273920)
  {
    v9 = 0x8000000000273920;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000273920, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x800000000026D790;
    if (a2 == 0x800000000026D790)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    v13 = 0xE400000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x7265746F6F66 && a2 == 0xE600000000000000)
  {
    v14 = 0xE600000000000000;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265746F6F66, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x676E69746172 && a2 == 0xE600000000000000)
  {
    v15 = 0xE600000000000000;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E69746172, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x634165746F567075 && a2 == 0xEC0000006E6F6974)
  {
    v16 = 0xEC0000006E6F6974;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x634165746F567075, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x65746F566E776F64 && a2 == 0xEE006E6F69746341)
  {
    v17 = 0xEE006E6F69746341;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746F566E776F64, 0xEE006E6F69746341, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000000273940)
  {
    v18 = 0x8000000000273940;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000273940, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000000273960)
  {
    v19 = 0x8000000000273960;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000000273960, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000000273980)
  {
    swift_bridgeObjectRelease(0x8000000000273980);
    return 14;
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000273980, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v20 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_184A5C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6D614E6567616D69 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6567616D69, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

ValueMetadata *type metadata accessor for DividerComponent()
{
  return &type metadata for DividerComponent;
}

uint64_t sub_184BC0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_184C00();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

unint64_t sub_184C00()
{
  unint64_t result;

  result = qword_32A0B0;
  if (!qword_32A0B0)
  {
    result = swift_getWitnessTable(&unk_262894, &type metadata for DividerComponent);
    atomic_store(result, (unint64_t *)&qword_32A0B0);
  }
  return result;
}

uint64_t sub_184C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;

  v46 = a2;
  v4 = type metadata accessor for Divider(0, a3);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_3275D8);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_5C154(&qword_3275E0);
  __chkstk_darwin(v45);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_3275E8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = Divider.init()(v14);
  v18 = static Edge.Set.top.getter(v17);
  v19 = type metadata accessor for DividerComponentModel(0);
  v20 = a1 + *(int *)(v19 + 28);
  v21 = *(double *)v20;
  if (*(_BYTE *)(v20 + 8))
    v21 = 0.0;
  v22 = EdgeInsets.init(_all:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
  v29 = &v10[*(int *)(v8 + 36)];
  *v29 = v18;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v31 = static Edge.Set.bottom.getter(v30);
  v32 = a1 + *(int *)(v19 + 32);
  v33 = *(double *)v32;
  if (*(_BYTE *)(v32 + 8))
    v33 = 0.0;
  v34 = EdgeInsets.init(_all:)(v33);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_184F70((uint64_t)v10, (uint64_t)v12);
  v41 = v45;
  v42 = &v12[*(int *)(v45 + 36)];
  *v42 = v31;
  *((double *)v42 + 1) = v34;
  *((_QWORD *)v42 + 2) = v36;
  *((_QWORD *)v42 + 3) = v38;
  *((_QWORD *)v42 + 4) = v40;
  v42[40] = 0;
  sub_5E09C((uint64_t)v10, &qword_3275D8);
  v43 = sub_184FB8();
  View.accessibilityHidden(_:)(1, v41, v43);
  sub_5E09C((uint64_t)v12, &qword_3275E0);
  return sub_1850A8((uint64_t)v16, v46);
}

uint64_t sub_184EBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_184C00();
  return _ComponentBody.init(_:)(v2, a1, v2);
}

unint64_t sub_184EF0()
{
  unint64_t result;

  result = qword_3275D0;
  if (!qword_3275D0)
  {
    result = swift_getWitnessTable(&unk_262844, &type metadata for DividerComponent);
    atomic_store(result, (unint64_t *)&qword_3275D0);
  }
  return result;
}

uint64_t sub_184F34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B8FB0, 1);
}

uint64_t sub_184F44()
{
  return sub_648E0(&qword_320040, type metadata accessor for DividerComponentModel, (uint64_t)&unk_260020);
}

uint64_t sub_184F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3275D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_184FB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3275F0;
  if (!qword_3275F0)
  {
    v1 = sub_667D0(&qword_3275E0);
    sub_185024();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3275F0);
  }
  return result;
}

unint64_t sub_185024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3275F8;
  if (!qword_3275F8)
  {
    v1 = sub_667D0(&qword_3275D8);
    sub_648E0(&qword_323338, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3275F8);
  }
  return result;
}

uint64_t sub_1850A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3275E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1850F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327600;
  if (!qword_327600)
  {
    v1 = sub_667D0(&qword_3275E8);
    sub_184FB8();
    sub_648E0(&qword_31F710, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327600);
  }
  return result;
}

uint64_t RateAndReviewActionItem.init(data:context:tracker:figaroProvider:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)(a5 + 152) = &type metadata for MenuStoreService;
  *(_QWORD *)(a5 + 160) = &protocol witness table for MenuStoreService;
  *(_BYTE *)(a5 + 168) = 22;
  sub_5DC98(a1, a5 + 40);
  sub_5DC98(a2, a5);
  *(_QWORD *)(a5 + 80) = a3;
  return sub_5DC98(a4, a5 + 88);
}

uint64_t RateAndReviewActionItem.isSupported.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  __int128 v26[2];
  char v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = v0 + 5;
  v3 = v0[8];
  v4 = v0[9];
  sub_66898(v0 + 5, v3);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4) & 1) != 0)
    goto LABEL_12;
  v5 = v0[8];
  v6 = v1[9];
  sub_66898(v2, v1[8]);
  ContextActionDataProtocol.selectionMode.getter(v5, v6, (uint64_t)v26);
  if (v27 == 1)
  {
    sub_A4430(v26);
LABEL_12:
    v24 = 0;
    return v24 & 1;
  }
  sub_5DC98(v26, (uint64_t)v28);
  v7 = v29;
  v8 = v30;
  sub_66898(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v8 + 288))(v7, v8);
  v10 = v9;
  swift_bridgeObjectRelease(v9);
  if (!v10)
    goto LABEL_11;
  v11 = v29;
  v12 = v30;
  sub_66898(v28, v29);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12) == 4)
    goto LABEL_11;
  v13 = v29;
  v14 = v30;
  sub_66898(v28, v29);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14) == 5)
    goto LABEL_11;
  v15 = v29;
  v16 = v30;
  sub_66898(v28, v29);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 160))(v15, v16) & 1) == 0
    || (v17 = v1[8],
        v18 = v1[9],
        sub_66898(v2, v17),
        ((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18) & 1) == 0)
    || (v19 = v1[8],
        v20 = v1[9],
        sub_66898(v2, v19),
        ((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20) & 1) == 0))
  {
LABEL_11:
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v28);
    goto LABEL_12;
  }
  v22 = v1[8];
  v21 = v1[9];
  sub_66898(v2, v22);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v22, v21);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v28);
  v24 = v23 ^ 1;
  return v24 & 1;
}

uint64_t RateAndReviewActionItem.handle()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[12] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[13] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[14] = v3;
  v1[15] = v4;
  return swift_task_switch(sub_18544C, v3, v4);
}

uint64_t sub_18544C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 96);
  v2 = v1 + 5;
  v3 = v1[8];
  v4 = v1[9];
  sub_66898(v1 + 5, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v6 = v5;
  if (!*(_QWORD *)(v5 + 16))
  {
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_7;
  }
  sub_5E0D8(v5 + 32, v0 + 16);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(v0 + 40);
  if (!v7)
  {
LABEL_7:
    swift_release(*(_QWORD *)(v0 + 104));
    sub_185814(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = *(_QWORD *)(v0 + 48);
  sub_66898((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 288))(v7, v8);
  v11 = v10;
  *(_QWORD *)(v0 + 128) = v9;
  *(_QWORD *)(v0 + 136) = v10;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  if (!v11)
  {
    swift_release(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = v1[8];
  v13 = v1[9];
  sub_66898(v2, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v15 = v14;
  if (*(_QWORD *)(v14 + 16))
  {
    sub_5E0D8(v14 + 32, v0 + 56);
  }
  else
  {
    *(_QWORD *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease(v15);
  v17 = *(_QWORD *)(v0 + 80);
  if (v17)
  {
    v18 = *(_QWORD *)(v0 + 88);
    sub_66898((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v19 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
    if (v19 == 3)
    {
      v20 = *(_QWORD **)(v0 + 96);
      v21 = v20[19];
      v22 = v20[20];
      sub_66898(v20 + 16, v21);
      v23 = *(int **)(v22 + 8);
      v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v23 + *v23);
      v24 = (_QWORD *)swift_task_alloc(v23[1]);
      *(_QWORD *)(v0 + 144) = v24;
      *v24 = v0;
      v24[1] = sub_1856B0;
      return v26(v9, v11, v21, v22);
    }
  }
  else
  {
    sub_185814(v0 + 56);
  }
  v25 = (_QWORD *)swift_task_alloc(dword_327624);
  *(_QWORD *)(v0 + 160) = v25;
  *v25 = v0;
  v25[1] = sub_1857BC;
  return sub_185854(v9, v11, 1);
}

uint64_t sub_1856B0(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 136);
  v7 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 144));
  v5 = (_QWORD *)swift_task_alloc(dword_327624);
  *(_QWORD *)(v3 + 152) = v5;
  *v5 = v7;
  v5[1] = sub_185734;
  return sub_185854(*(_QWORD *)(v3 + 128), v4, (a1 & 1) == 0);
}

uint64_t sub_185734()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_18578C, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_18578C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1857BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_185B68, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_185814(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154((uint64_t *)&unk_326130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_185854(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = v3;
  *(_BYTE *)(v4 + 136) = a3;
  *(_QWORD *)(v4 + 64) = a1;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 88) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  *(_QWORD *)(v4 + 96) = v6;
  *(_QWORD *)(v4 + 104) = v7;
  return swift_task_switch(sub_1858C8, v6, v7);
}

uint64_t sub_1858C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int *v18;
  _QWORD *v19;
  int *v20;

  if (*(_BYTE *)(v0 + 136) == 1)
  {
    v1 = *(_QWORD **)(v0 + 80);
    v2 = v1[3];
    v3 = v1[4];
    sub_66898(v1, v2);
    v4 = ContextMenuPresentationContextProtocol.transactionProvider.getter(v2, v3);
    if (v4)
    {
      v5 = v4;
      *(_QWORD *)(v0 + 56) = &OBJC_PROTOCOL___BSUITransactionProviding;
      v6 = (void *)swift_dynamicCastObjCProtocolConditional(v4, 1, v0 + 56);
      if (!v6)
        swift_unknownObjectRelease(v5);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v0 + 112) = v6;
    sub_5E0D8(*(_QWORD *)(v0 + 80) + 128, v0 + 16);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 48);
    sub_66898((_QWORD *)(v0 + 16), v15);
    if (v6)
      v17 = objc_msgSend(v6, "newShowURLTransaction");
    else
      v17 = 0;
    *(_QWORD *)(v0 + 120) = v17;
    v18 = *(int **)(v16 + 24);
    v20 = (int *)((char *)v18 + *v18);
    v19 = (_QWORD *)swift_task_alloc(v18[1]);
    *(_QWORD *)(v0 + 128) = v19;
    *v19 = v0;
    v19[1] = sub_185A74;
    return ((uint64_t (*)(_QWORD, _QWORD, id, uint64_t, uint64_t))v20)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v17, v15, v16);
  }
  else
  {
    v7 = *(_QWORD **)(v0 + 80);
    swift_release(*(_QWORD *)(v0 + 88));
    v8 = sub_17EB50();
    v10 = v9;
    v11 = v7[3];
    v12 = v7[4];
    sub_66898(v7, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 40))(v8, v10, v11, v12);
    v13 = swift_bridgeObjectRelease(v10);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v13);
  }
}

uint64_t sub_185A74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_185AC8, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_185AC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_unknownObjectRelease(v1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_185B14()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_327614);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_64780;
  return RateAndReviewActionItem.handle()();
}

ValueMetadata *type metadata accessor for RateAndReviewActionItem()
{
  return &type metadata for RateAndReviewActionItem;
}

ValueMetadata *type metadata accessor for NothingToReviewFrameFactory()
{
  return &type metadata for NothingToReviewFrameFactory;
}

uint64_t sub_185B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a2;
  v3 = type metadata accessor for Date.FormatStyle.Symbol.Year(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date.FormatStyle(0, v4);
  v39 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - v11;
  v14 = __chkstk_darwin(v13);
  v42 = (char *)&v38 - v15;
  v16 = type metadata accessor for Calendar(0, v14);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.gregorian.getter(v26);
  v38 = a1;
  Date.init(year:month:day:hour:minute:calendar:)(a1, 12, 31, 0, 0, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_12EE3C((uint64_t)v21);
    if (qword_31E6A0 != -1)
      swift_once(&qword_31E6A0, sub_126F64);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_5240C(v27, (uint64_t)qword_325370);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v31 = 134217984;
      v44 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v31 + 4, v31 + 12);
      _os_log_impl(&dword_0, v29, v30, "Failed to create date for last day of '%ld'.", v31, 0xCu);
      swift_slowDealloc(v31, -1, -1);
    }

    return 0;
  }
  else
  {
    v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
    v34 = static FormatStyle<>.dateTime.getter(v33);
    static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v34);
    Date.FormatStyle.year(_:)(v6);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
    v35 = *(void (**)(char *, uint64_t))(v39 + 8);
    v35(v9, v7);
    v36 = v42;
    Date.FormatStyle.locale(_:)(v43);
    v35(v12, v7);
    v37 = sub_648E0(&qword_321168, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
    Date.formatted<A>(_:)(&v44, v36, v7, v37);
    v35(v36, v7);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    return v44;
  }
}

uint64_t sub_185F10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;

  v1 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v1);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_320EF0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for YIRSourceData(0, v5);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NothingToReviewFrameViewModel(0, v13);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v0;
  v20 = sub_5C154(&qword_31F108);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_258070;
  v36 = (_QWORD *)(v21 + 32);
  static Locale.autoupdatingCurrent.getter(v21);
  v22 = sub_185B7C(v19, (uint64_t)v15);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v25 = enum case for FrameName.ineligibleUser(_:);
  v26 = type metadata accessor for FrameName(0);
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 104))(v7, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v7, 0, 1, v26);
  v28 = type metadata accessor for ReaderType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v3, 1, 1, v28);
  v34 = 1;
  v33 = 1;
  v32 = 1;
  v31 = 1;
  v30 = 1;
  YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v7, v3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, v30, 0, v31, 0,
    v32,
    0,
    v33,
    0,
    v34);
  NothingToReviewFrameViewModel.init(localizedYear:exposureData:)(v22, v24, v10);
  *(_QWORD *)(v21 + 56) = type metadata accessor for NothingToReviewFrame(0);
  *(_QWORD *)(v21 + 64) = sub_648E0(&qword_327690, (uint64_t (*)(uint64_t))&type metadata accessor for NothingToReviewFrame, (uint64_t)&protocol conformance descriptor for NothingToReviewFrame);
  sub_668BC(v36);
  NothingToReviewFrame.init(model:)(v18);
  return v21;
}

void destroy for HighlightFramesFactory(uint64_t a1)
{
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 8));

}

uint64_t initializeWithCopy for HighlightFramesFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v6 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  v7 = *(void **)(a2 + 112);
  v8 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = v8;
  v9 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v9;
  v10 = v6;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  return a1;
}

uint64_t assignWithCopy for HighlightFramesFactory(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_65938((_QWORD *)(a1 + 8), (_QWORD *)(a2 + 8));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v4 = *(void **)(a2 + 104);
  v5 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 112);
  v8 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 120);
  v11 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 128);
  v14 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v13;
  v15 = v13;

  return a1;
}

__n128 initializeWithTake for HighlightFramesFactory(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for HighlightFramesFactory(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v4 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  v5 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  v6 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  v7 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightFramesFactory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightFramesFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightFramesFactory()
{
  return &type metadata for HighlightFramesFactory;
}

_QWORD *sub_18650C()
{
  __n128 v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _QWORD v76[5];
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;

  v65 = type metadata accessor for TransitionFrameViewModel.Section(0);
  v64 = *(_QWORD *)(v65 - 8);
  v0 = __chkstk_darwin(v65);
  v63 = (char *)&v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for TransitionFrameViewModel(0, v0);
  v3 = __chkstk_darwin(v2);
  v66 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HighlightFrame(0, v3);
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  v6 = __chkstk_darwin(v5);
  v74 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HighlightFrameViewModel(0, v6);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v71 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v70 = (char *)&v62 - v12;
  __chkstk_darwin(v13);
  v75 = (char *)&v62 - v14;
  __chkstk_darwin(v15);
  v69 = (char *)&v62 - v16;
  v17 = &qword_327698;
  v18 = sub_5C154(&qword_327698);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v62 - v23;
  v25 = sub_5C154(&qword_3276A0);
  v26 = *(_QWORD *)(v19 + 72);
  v27 = *(unsigned __int8 *)(v19 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = 6;
  v30 = swift_allocObject(v25, v28 + 6 * v26, v27 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_261680;
  v67 = v30;
  v31 = v30 + v28;
  sub_186B40(v30 + v28);
  sub_1871FC(v31 + v26);
  sub_18796C(v31 + 2 * v26);
  sub_1880BC(v31 + 3 * v26);
  sub_188770(v31 + 4 * v26, v32);
  sub_188F00(v31 + 5 * v26);
  v33 = (char *)_swiftEmptyArrayStorage;
  v68 = v24;
  do
  {
    sub_5E1A4(v31, (uint64_t)v24, v17);
    sub_1899AC((uint64_t)v24, (uint64_t)v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v21, 1, v8) == 1)
    {
      sub_5E09C((uint64_t)v21, v17);
    }
    else
    {
      v34 = v26;
      v35 = v17;
      v36 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v37 = v69;
      v36(v69, v21, v8);
      v36(v75, v37, v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
        v33 = (char *)sub_57894(0, *((_QWORD *)v33 + 2) + 1, 1, (unint64_t)v33);
      v39 = *((_QWORD *)v33 + 2);
      v38 = *((_QWORD *)v33 + 3);
      v40 = (uint64_t)v33;
      if (v39 >= v38 >> 1)
        v40 = sub_57894(v38 > 1, v39 + 1, 1, (unint64_t)v33);
      *(_QWORD *)(v40 + 16) = v39 + 1;
      v33 = (char *)v40;
      v36((char *)(v40+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v39), v75, v8);
      v17 = v35;
      v26 = v34;
      v24 = v68;
    }
    v31 += v26;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease(v67);
  v41 = *((_QWORD *)v33 + 2);
  if (v41)
  {
    v76[0] = _swiftEmptyArrayStorage;
    sub_20CA7C(0, v41, 0);
    v42 = *(unsigned __int8 *)(v9 + 80);
    v69 = v33;
    v43 = &v33[(v42 + 32) & ~v42];
    v75 = *(char **)(v9 + 72);
    v44 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    do
    {
      v45 = v70;
      v44(v70, v43, v8);
      v46 = v71;
      v44(v71, v45, v8);
      HighlightFrame.init(model:)(v46);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v45, v8);
      v47 = v76[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v76[0]) & 1) == 0)
      {
        sub_20CA7C(0, *(_QWORD *)(v47 + 16) + 1, 1);
        v47 = v76[0];
      }
      v48 = v9;
      v50 = *(_QWORD *)(v47 + 16);
      v49 = *(_QWORD *)(v47 + 24);
      if (v50 >= v49 >> 1)
        sub_20CA7C(v49 > 1, v50 + 1, 1);
      v51 = v73;
      v78 = v73;
      v79 = sub_648E0(&qword_3276A8, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightFrame, (uint64_t)&protocol conformance descriptor for HighlightFrame);
      v52 = sub_668BC(&v77);
      v53 = v72;
      v54 = v74;
      (*(void (**)(_QWORD *, char *, uint64_t))(v72 + 16))(v52, v74, v51);
      v55 = v76[0];
      *(_QWORD *)(v76[0] + 16) = v50 + 1;
      sub_5DC98(&v77, v55 + 40 * v50 + 32);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v51);
      v43 = &v75[(_QWORD)v43];
      --v41;
      v9 = v48;
    }
    while (v41);
    v56 = (_QWORD *)v76[0];
    swift_bridgeObjectRelease(v69);
  }
  else
  {
    swift_bridgeObjectRelease(v33);
    v56 = _swiftEmptyArrayStorage;
  }
  v80 = v56;
  *(_QWORD *)&v77 = v56;
  v57 = sub_5C154(&qword_320EC0);
  v58 = sub_67060((unint64_t *)&qword_320EC8, &qword_320EC0, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v57, v58) & 1) != 0)
  {
    v59 = v63;
    (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, enum case for TransitionFrameViewModel.Section.highlights(_:), v65);
    v60 = v66;
    TransitionFrameViewModel.init(section:)(v59);
    v78 = type metadata accessor for TransitionFrame(0);
    v79 = sub_648E0(&qword_320ED0, (uint64_t (*)(uint64_t))&type metadata accessor for TransitionFrame, (uint64_t)&protocol conformance descriptor for TransitionFrame);
    sub_668BC(&v77);
    TransitionFrame.init(model:)(v60);
    sub_5DC98(&v77, (uint64_t)v76);
    sub_13D518(0, 0, (uint64_t)v76);
    return v80;
  }
  return v56;
}

uint64_t sub_186B40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  BOOL v40;
  double v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  _QWORD v105[5];

  v2 = v1;
  v4 = type metadata accessor for HighlightCoverStyle(0);
  v96 = *(_QWORD *)(v4 - 8);
  v97 = v4;
  __chkstk_darwin(v4);
  v98 = (_QWORD **)((char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = type metadata accessor for Locale(0);
  v88 = *(_QWORD *)(v90 - 8);
  v6 = __chkstk_darwin(v90);
  v86 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for HighlightFrameViewModel.Kind(0, v6);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v95 = (double *)((char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v9);
  v85 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_320EF0);
  v12 = __chkstk_darwin(v11);
  v84 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for YIRSourceData(0, v12);
  v93 = *(_QWORD *)(v14 - 8);
  v94 = v14;
  __chkstk_darwin(v14);
  v92 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v91 = (char *)&v83 - v18;
  v19 = type metadata accessor for ReadingHistory.Day(0, v17);
  v102 = *(_QWORD *)(v19 - 8);
  v103 = v19;
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ReadingHistory.DayEntry(0, v20);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v1 + 32);
  v83 = (_QWORD *)(v1 + 8);
  v28 = sub_66898((_QWORD *)(v1 + 8), v27)[3];
  v30 = *(_QWORD *)(v28 + 16);
  if (v30)
  {
    v100 = v1;
    v101 = a1;
    v31 = v28 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    v32 = *(_QWORD *)(v24 + 72);
    v33 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16);
    v99 = v28;
    v34 = swift_bridgeObjectRetain(v28);
    v35 = 0;
    while (1)
    {
      v36 = v33(v26, v31, v23, v34);
      v37 = ReadingHistory.DayEntry.day.getter(v36);
      v38 = ReadingHistory.Day.readingTime.getter(v37);
      result = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v22, v103);
      v40 = __OFADD__(v35, v38);
      v35 += v38;
      if (v40)
        break;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      v31 += v32;
      if (!--v30)
      {
        v29 = swift_bridgeObjectRelease(v99);
        v41 = (double)v35;
        v2 = v100;
        a1 = v101;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    v41 = 0.0;
LABEL_7:
    v29.n128_u64[0] = *(_QWORD *)(v2 + 96);
    if (v29.n128_f64[0] <= v41 && (*(_BYTE *)(v2 + 48) & 1) != 0)
    {
      v42 = objc_msgSend(*(id *)(v2 + 104), "stringFromTimeInterval:", v41);
      if (v42)
      {
        v43 = v42;
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v46 = v45;

        v47 = objc_msgSend(*(id *)(v2 + 120), "stringFromTimeInterval:", v41);
        if (v47)
        {
          v48 = v47;
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          v51 = v50;

          v52 = enum case for FrameName.totalReadTime(_:);
          v53 = type metadata accessor for FrameName(0);
          v103 = v44;
          v54 = v53;
          v55 = *(_QWORD *)(v53 - 8);
          v56 = v84;
          (*(void (**)(char *, uint64_t, uint64_t))(v55 + 104))(v84, v52, v53);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v54);
          v57 = type metadata accessor for ReaderType(0);
          v58 = v85;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v85, 1, 1, v57);
          v59 = v91;
          YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v56, v58, *(_QWORD *)&v41, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
            1,
            0,
            1,
            0,
            1);
          v105[2] = v49;
          v105[3] = v51;
          v105[0] = 32;
          v105[1] = 0xE100000000000000;
          v104[0] = 10;
          v104[1] = 0xE100000000000000;
          v60 = sub_668F8();
          v61 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v105, v104, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v60, v60, v60);
          v63 = v62;
          swift_bridgeObjectRelease(v51);
          v64 = sub_66898(v83, *(_QWORD *)(v2 + 32));
          v65 = v64[4];
          v66 = (uint64_t)v86;
          static Locale.autoupdatingCurrent.getter(v64);
          v67 = sub_185B7C(v65, v66);
          v69 = v68;
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v66, v90);
          v70 = v95;
          *v95 = v41;
          *((_QWORD *)v70 + 1) = v103;
          *((_QWORD *)v70 + 2) = v46;
          *((_QWORD *)v70 + 3) = v61;
          *((_QWORD *)v70 + 4) = v63;
          *((_QWORD *)v70 + 5) = v67;
          *((_QWORD *)v70 + 6) = v69;
          (*(void (**)(double *, _QWORD, uint64_t))(v87 + 104))(v70, enum case for HighlightFrameViewModel.Kind.totalReadingTime(_:), v89);
          v71 = sub_5C154(&qword_3276D0);
          v72 = v98;
          v73 = (char *)v98 + *(int *)(v71 + 64);
          *v98 = 0xD000000000000018;
          v72[1] = 0x8000000000273AB0;
          v72[2] = static Color.cyan.getter();
          v74 = enum case for ColorScheme.light(_:);
          v75 = type metadata accessor for ColorScheme(0);
          v76 = *(_QWORD *)(v75 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v76 + 104))(v73, v74, v75);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v96 + 104))(v72, enum case for HighlightCoverStyle.imageOnly(_:), v97);
          v78 = v92;
          v77 = v93;
          v79 = v94;
          (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v92, v59, v94);
          HighlightFrameViewModel.init(kind:style:exposureData:)(v70, v72, v78);
          (*(void (**)(char *, uint64_t))(v77 + 8))(v59, v79);
          v81 = type metadata accessor for HighlightFrameViewModel(0, v80);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(a1, 0, 1, v81);
        }
        v29 = swift_bridgeObjectRelease(v46);
      }
    }
    v82 = type metadata accessor for HighlightFrameViewModel(0, v29);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(a1, 1, 1, v82);
  }
  return result;
}

uint64_t sub_1871FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  double v46;
  uint64_t v47;
  double v48;
  _QWORD *v49;
  char v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;

  v110 = a1;
  v2 = type metadata accessor for HighlightCoverStyle(0);
  v106 = *(_QWORD *)(v2 - 8);
  v107 = v2;
  v3 = __chkstk_darwin(v2);
  v108 = (uint64_t *)((char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = type metadata accessor for HighlightFrameViewModel.Kind(0, v3);
  v99 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v105 = (uint64_t *)((char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v6);
  v96 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_320EF0);
  v9 = __chkstk_darwin(v8);
  v95 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for YIRSourceData(0, v9);
  v103 = *(_QWORD *)(v11 - 8);
  v104 = v11;
  __chkstk_darwin(v11);
  v102 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v100 = (char *)&v88 - v15;
  v16 = type metadata accessor for CoverViewModel.Style(0, v14);
  v92 = *(_QWORD *)(v16 - 8);
  v93 = v16;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CoverViewModel(0, v17);
  v97 = *(_QWORD *)(v20 - 8);
  v98 = v20;
  __chkstk_darwin(v20);
  v109 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_322970);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for AudiobookInfo(0, v23);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_3276C0);
  __chkstk_darwin(v30);
  v32 = (char *)&v88 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for LongestAudiobookHighlight(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (double *)((char *)&v88 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = (double *)v1;
  sub_66898((_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
  sub_BAA7C((uint64_t)v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
  {
    sub_5E09C((uint64_t)v32, &qword_3276C0);
LABEL_11:
    v56 = v110;
    v57 = type metadata accessor for HighlightFrameViewModel(0, v37);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
  }
  sub_5E160((uint64_t)v32, (uint64_t)v36, type metadata accessor for LongestAudiobookHighlight);
  sub_5E1A4((uint64_t)v36 + *(int *)(v33 + 20), (uint64_t)v25, &qword_322970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_6685C((uint64_t)v36, type metadata accessor for LongestAudiobookHighlight);
    sub_5E09C((uint64_t)v25, &qword_322970);
    goto LABEL_11;
  }
  v38 = v27;
  v39 = v29;
  v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))(v29, v25, v26);
  v41 = AudiobookInfo.duration.getter(v40);
  if ((v42 & 1) != 0 || (v43 = sub_1893C0(v41), !v44))
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    sub_6685C((uint64_t)v36, type metadata accessor for LongestAudiobookHighlight);
    goto LABEL_11;
  }
  v88 = v43;
  v89 = v44;
  v45 = v94;
  v46 = *v94;
  v47 = sub_648E0(&qword_322978, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
  v48 = v46 * AssetInfo.coverAspectRatio.getter(v26, v47);
  *((_QWORD *)v19 + 3) = v26;
  *((_QWORD *)v19 + 4) = v47;
  v49 = sub_668BC(v19);
  (*(void (**)(_QWORD *, char *, uint64_t))(v38 + 16))(v49, v29, v26);
  *((double *)v19 + 5) = v48;
  *((double *)v19 + 6) = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v19, enum case for CoverViewModel.Style.image(_:), v93);
  CoverViewModel.init(style:)(v19);
  v50 = *((_BYTE *)v36 + 8);
  v91 = v26;
  v90 = v38;
  if ((v50 & 1) != 0
    || (v51 = objc_msgSend(*((id *)v45 + 14), "stringFromTimeInterval:", *v36)) == 0)
  {
    v53 = 0;
    v55 = 0;
  }
  else
  {
    v52 = v51;
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v55 = v54;

  }
  v59 = enum case for FrameName.totalListeningTime(_:);
  v60 = type metadata accessor for FrameName(0);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 104))(v95, v59, v60);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v60);
  v63 = type metadata accessor for ReaderType(0);
  v64 = v96;
  v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v96, 1, 1, v63);
  v66 = AudiobookInfo.duration.getter(v65);
  v68 = v100;
  YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v62, v64, 0, 1, 0, 1, v66, v67 & 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1);
  v69 = v105;
  v70 = v89;
  *v105 = v88;
  v69[1] = v70;
  v69[2] = v53;
  v69[3] = v55;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v99 + 104))(v69, enum case for HighlightFrameViewModel.Kind.longestAudiobook(_:), v101);
  v71 = sub_5C154(&qword_31F0F0);
  v72 = v97;
  v73 = *(unsigned __int8 *)(v97 + 80);
  v74 = (v73 + 32) & ~v73;
  v75 = swift_allocObject(v71, v74 + *(_QWORD *)(v97 + 72), v73 | 7);
  *(_OWORD *)(v75 + 16) = xmmword_258070;
  v76 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 16);
  v101 = (uint64_t)v39;
  v77 = v98;
  v76(v75 + v74, v109, v98);
  v78 = v107;
  v79 = v108;
  *v108 = v75;
  v79[1] = 0xD00000000000001FLL;
  v79[2] = 0x8000000000273A90;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v106 + 104))(v79, enum case for HighlightCoverStyle.coverStack(_:), v78);
  v81 = v102;
  v80 = v103;
  v82 = v68;
  v83 = v68;
  v84 = v104;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v102, v83, v104);
  v85 = v110;
  HighlightFrameViewModel.init(kind:style:exposureData:)(v69, v79, v81);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v84);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v109, v77);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v101, v91);
  sub_6685C((uint64_t)v36, type metadata accessor for LongestAudiobookHighlight);
  v87 = type metadata accessor for HighlightFrameViewModel(0, v86);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v85, 0, 1, v87);
}

uint64_t sub_18796C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  double *v99;
  double *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v103 = a1;
  v2 = type metadata accessor for HighlightCoverStyle(0);
  v94 = *(_QWORD *)(v2 - 8);
  v95 = v2;
  v3 = __chkstk_darwin(v2);
  v96 = (uint64_t *)((char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = type metadata accessor for HighlightFrameViewModel.Kind(0, v3);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v93 = (uint64_t *)((char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v6);
  v84 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_320EF0);
  v9 = __chkstk_darwin(v8);
  v83 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for YIRSourceData(0, v9);
  v91 = *(_QWORD *)(v11 - 8);
  v92 = v11;
  __chkstk_darwin(v11);
  v90 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v88 = (char *)&v83 - v15;
  v99 = (double *)type metadata accessor for CoverViewModel.Style(0, v14);
  v97 = *((_QWORD *)v99 - 1);
  v16 = __chkstk_darwin(v99);
  v98 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for CoverViewModel(0, v16);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v101 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_322950);
  __chkstk_darwin(v19);
  v21 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for BookInfo(0);
  v104 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v102 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for LongestBookHighlight(0);
  __chkstk_darwin(v24);
  v26 = (double *)((char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v100 = (double *)v1;
  v27 = sub_66898((_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
  v29 = v27[1];
  v30 = v27[2];
  v31 = v27[3];
  v32 = v27[4];
  v105 = *v27;
  v28 = v105;
  v106 = v29;
  v107 = v30;
  v108 = v31;
  v109 = v32;
  v33 = sub_BC520();
  v105 = v28;
  v106 = v29;
  v34 = (double *)v22;
  v107 = v30;
  v108 = v31;
  v35 = *(double *)&v33;
  v109 = v32;
  v37 = v36;
  v38 = (uint64_t)v26 + *(int *)(v24 + 20);
  sub_BC958(v38);
  *v26 = v35;
  *((_BYTE *)v26 + 8) = v37 & 1;
  v39 = v38;
  v40 = v104;
  sub_5E1A4(v39, (uint64_t)v21, &qword_322950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v21, 1, v22) == 1)
  {
    sub_6685C((uint64_t)v26, type metadata accessor for LongestBookHighlight);
    sub_5E09C((uint64_t)v21, &qword_322950);
LABEL_6:
    v46 = type metadata accessor for HighlightFrameViewModel(0, v41);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v103, 1, 1, v46);
  }
  v42 = v102;
  v43 = (*(uint64_t (**)(char *, char *, double *))(v40 + 32))(v102, v21, v34);
  v44 = BookInfo.pageCount.getter(v43);
  if ((v45 & 1) != 0 || (v37 & 1) != 0)
  {
    (*(void (**)(char *, double *))(v40 + 8))(v42, v34);
    sub_6685C((uint64_t)v26, type metadata accessor for LongestBookHighlight);
    goto LABEL_6;
  }
  v48 = v44;
  v49 = *v100;
  v50 = sub_648E0(&qword_322958, (uint64_t (*)(uint64_t))&type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
  v51 = v49 * AssetInfo.coverAspectRatio.getter(v34, v50);
  v52 = v98;
  *((_QWORD *)v98 + 3) = v34;
  *((_QWORD *)v52 + 4) = v50;
  v53 = sub_668BC(v52);
  (*(void (**)(_QWORD *, char *, double *))(v40 + 16))(v53, v42, v34);
  *((double *)v52 + 5) = v51;
  *((double *)v52 + 6) = v49;
  (*(void (**)(char *, _QWORD, double *))(v97 + 104))(v52, enum case for CoverViewModel.Style.image(_:), v99);
  v54 = v101;
  result = CoverViewModel.init(style:)(v52);
  if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v35 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v99 = v26;
  v100 = v34;
  if (v35 < 9.22337204e18)
  {
    v55 = (uint64_t)v35;
    v56 = enum case for FrameName.longestBookReadPageCount(_:);
    v57 = type metadata accessor for FrameName(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 104))(v83, v56, v57);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    v60 = type metadata accessor for ReaderType(0);
    v61 = v84;
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v84, 1, 1, v60);
    v63 = BookInfo.pageCount.getter(v62);
    v65 = v88;
    YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v59, v61, 0, 1, v63, v64 & 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
      1,
      0,
      1,
      0,
      1);
    v66 = v93;
    *v93 = v48;
    v66[1] = v55;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v87 + 104))(v66, enum case for HighlightFrameViewModel.Kind.longestBook(_:), v89);
    v67 = sub_5C154(&qword_31F0F0);
    v68 = v85;
    v69 = *(unsigned __int8 *)(v85 + 80);
    v70 = (v69 + 32) & ~v69;
    v71 = swift_allocObject(v67, v70 + *(_QWORD *)(v85 + 72), v69 | 7);
    *(_OWORD *)(v71 + 16) = xmmword_258070;
    v72 = v54;
    v73 = v86;
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v71 + v70, v72, v86);
    v74 = v95;
    v75 = v96;
    *v96 = v71;
    v75[1] = 0xD00000000000001ALL;
    v75[2] = 0x8000000000273A70;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v94 + 104))(v75, enum case for HighlightCoverStyle.coverStack(_:), v74);
    v77 = v91;
    v76 = v92;
    v78 = v42;
    v79 = v90;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v90, v65, v92);
    v80 = v103;
    HighlightFrameViewModel.init(kind:style:exposureData:)(v66, v75, v79);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v65, v76);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v101, v73);
    (*(void (**)(char *, double *))(v104 + 8))(v78, v100);
    sub_6685C((uint64_t)v99, type metadata accessor for LongestBookHighlight);
    v82 = type metadata accessor for HighlightFrameViewModel(0, v81);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v80, 0, 1, v82);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1880BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  _QWORD *v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;

  v3 = type metadata accessor for HighlightCoverStyle(0);
  v86 = *(_QWORD *)(v3 - 8);
  v87 = v3;
  v4 = __chkstk_darwin(v3);
  v88 = (_QWORD **)((char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for HighlightFrameViewModel.Kind(0, v4);
  v83 = *(_QWORD *)(v6 - 8);
  v84 = v6;
  __chkstk_darwin(v6);
  v85 = (uint64_t *)((char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v8);
  v78 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_320EF0);
  v11 = __chkstk_darwin(v10);
  v77 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for YIRSourceData(0, v11);
  v81 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  __chkstk_darwin(v13);
  v80 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v79 = (char *)&v72 - v17;
  v18 = type metadata accessor for Date.FormatStyle.TimeStyle(0, v16);
  v75 = *(_QWORD *)(v18 - 8);
  v76 = v18;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Date.FormatStyle.DateStyle(0, v19);
  v22 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_3276B8);
  __chkstk_darwin(v25);
  v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for FinishedSeriesHighlight(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (_QWORD **)((char *)&v72 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_66898((_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
  sub_B9D14((uint64_t)v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    sub_5E09C((uint64_t)v27, &qword_3276B8);
    v33 = type metadata accessor for HighlightFrameViewModel(0, v32);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a1, 1, 1, v33);
  }
  else
  {
    v73 = a1;
    sub_5E160((uint64_t)v27, (uint64_t)v31, type metadata accessor for FinishedSeriesHighlight);
    v34 = v31[3];
    v35 = v31[4];
    sub_66898(v31, v34);
    v37 = SeriesInfo.assets.getter(v34, v35);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v35);
    v39 = sub_5C154(&qword_31EF60);
    v40 = (_QWORD *)_arrayForceCast<A, B>(_:)(v37, AssociatedTypeWitness, v39);
    v41 = swift_bridgeObjectRelease(v37);
    v72 = sub_189664(v40, v41);
    v42 = swift_bridgeObjectRelease(v40);
    v43 = static Date.FormatStyle.DateStyle.long.getter(v42);
    static Date.FormatStyle.TimeStyle.omitted.getter(v43);
    v44 = Date.formatted(date:time:)(v24, v21);
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v21, v76);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v74);
    v47 = enum case for FrameName.finishedSeries(_:);
    v48 = type metadata accessor for FrameName(0);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 104))(v77, v47, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v48);
    v51 = type metadata accessor for ReaderType(0);
    v52 = v78;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v78, 1, 1, v51);
    v53 = v31[3];
    v54 = v31[4];
    sub_66898(v31, v53);
    v55 = ContentInfo.id.getter(v53, *(_QWORD *)(v54 + 8));
    v56 = v79;
    YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v50, v52, 0, 1, 0, 1, 0, 1, v55, v57, 0, 0, 0, 0, 0, 1, 0, 1, 0,
      1,
      0,
      1,
      0,
      1);
    v58 = v31[3];
    v59 = v31[4];
    sub_66898(v31, v58);
    v60 = ContentInfo.title.getter(v58, *(_QWORD *)(v59 + 8));
    v61 = v84;
    v62 = v85;
    *v85 = v60;
    v62[1] = v63;
    v62[2] = v44;
    v62[3] = v46;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v83 + 104))(v62, enum case for HighlightFrameViewModel.Kind.finishedSeries(_:), v61);
    v64 = v87;
    v65 = v88;
    *v88 = v72;
    v65[1] = 0xD000000000000014;
    v65[2] = 0x8000000000273A50;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v86 + 104))(v65, enum case for HighlightCoverStyle.coverStack(_:), v64);
    v67 = v80;
    v66 = v81;
    v68 = v82;
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v56, v82);
    v69 = v73;
    HighlightFrameViewModel.init(kind:style:exposureData:)(v62, v65, v67);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v56, v68);
    sub_6685C((uint64_t)v31, type metadata accessor for FinishedSeriesHighlight);
    v71 = type metadata accessor for HighlightFrameViewModel(0, v70);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v69, 0, 1, v71);
  }
}

uint64_t sub_188770@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  int64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[5];
  _QWORD *v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;

  v3 = v2;
  v5 = type metadata accessor for CoverViewModel.Style(0, a2);
  v91 = *(_QWORD *)(v5 - 8);
  v92 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (double *)((char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = type metadata accessor for CoverViewModel(0, v6);
  v9 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for HighlightCoverStyle(0);
  v86 = *(_QWORD *)(v12 - 8);
  v87 = v12;
  v13 = __chkstk_darwin(v12);
  v88 = (uint64_t *)((char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for HighlightFrameViewModel.Kind(0, v13);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v85 = (uint64_t *)((char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v16);
  v78 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_320EF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for YIRSourceData(0, v19);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v80 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v79 = (char *)&v73 - v24;
  v25 = sub_5C154(&qword_322910);
  __chkstk_darwin(v25);
  v27 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for GenreHighlight(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v89 = (uint64_t)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_66898((_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 32));
  v31 = sub_BD294();
  if (!v31)
    goto LABEL_11;
  v33 = v31;
  if (*(_QWORD *)(v31 + 16))
  {
    sub_1899F4(v31 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)), (uint64_t)v27);
    v34 = 0;
  }
  else
  {
    v34 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v34, 1, v28);
  v35 = swift_bridgeObjectRelease(v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v29 + 48))(v27, 1, v28, v35) == 1)
  {
    sub_5E09C((uint64_t)v27, &qword_322910);
LABEL_11:
    v40 = type metadata accessor for HighlightFrameViewModel(0, v32);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a1, 1, 1, v40);
  }
  v77 = v21;
  v36 = v89;
  sub_5E160((uint64_t)v27, v89, type metadata accessor for GenreHighlight);
  v37 = *(_QWORD *)v36;
  v38 = *(_QWORD *)(*(_QWORD *)v36 + 16);
  if (!v38)
  {
    sub_6685C(v36, type metadata accessor for GenreHighlight);
    goto LABEL_11;
  }
  sub_5E0D8(v37 + 32, (uint64_t)v95);
  if (v38 < *(_QWORD *)(v3 + 64))
  {
    sub_6685C(v36, type metadata accessor for GenreHighlight);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v95);
    goto LABEL_11;
  }
  v76 = GenreInfo.name.getter(v39);
  v75 = v42;
  v43 = *(double *)v3;
  v44 = v96;
  v45 = v97;
  sub_66898(v95, v96);
  swift_bridgeObjectRetain(v37);
  v46 = AssetInfo.coverAspectRatio.getter(v44, v45);
  if (*(_QWORD *)(v37 + 16) >= 5uLL)
    v47 = 5;
  else
    v47 = *(_QWORD *)(v37 + 16);
  if (v47)
  {
    v74 = a1;
    v48 = v43 * v46;
    v94 = _swiftEmptyArrayStorage;
    sub_20C498(0, v47, 0);
    v49 = 0;
    v50 = enum case for CoverViewModel.Style.image(_:);
    do
    {
      sub_5E0D8(v37 + v49 + 32, (uint64_t)v93);
      sub_5E0D8((uint64_t)v93, (uint64_t)v8);
      v8[5] = v48;
      v8[6] = v43;
      (*(void (**)(double *, uint64_t, uint64_t))(v91 + 104))(v8, v50, v92);
      CoverViewModel.init(style:)(v8);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v93);
      v51 = v94;
      if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
      {
        sub_20C498(0, v51[2] + 1, 1);
        v51 = v94;
      }
      v53 = v51[2];
      v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        sub_20C498(v52 > 1, v53 + 1, 1);
        v51 = v94;
      }
      v51[2] = v53 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v51+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v53, v11, v90);
      v94 = v51;
      v49 += 40;
    }
    while (40 * v47 != v49);
    swift_bridgeObjectRelease(v37);
    a1 = v74;
  }
  else
  {
    swift_bridgeObjectRelease(v37);
    v51 = _swiftEmptyArrayStorage;
  }
  v54 = enum case for FrameName.mostReadGenre(_:);
  v55 = type metadata accessor for FrameName(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v77, v54, v55);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v55);
  v58 = type metadata accessor for ReaderType(0);
  v59 = v78;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v78, 1, 1, v58);
  v60 = v75;
  swift_bridgeObjectRetain(v75);
  v61 = v76;
  v62 = v79;
  YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v57, v59, 0, 1, 0, 1, 0, 1, 0, 0, v76, v60, 0, 0, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1);
  v63 = v89;
  v64 = *(_QWORD *)(*(_QWORD *)v89 + 16);
  v65 = v85;
  *v85 = v61;
  v65[1] = v60;
  v65[2] = v64;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v83 + 104))(v65, enum case for HighlightFrameViewModel.Kind.topGenre(_:), v84);
  v66 = v87;
  v67 = v88;
  *v88 = v51;
  v67[1] = 0xD000000000000013;
  v67[2] = 0x8000000000273A30;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v86 + 104))(v67, enum case for HighlightCoverStyle.coverStack(_:), v66);
  v68 = v81;
  v69 = v80;
  v70 = v82;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v62, v82);
  HighlightFrameViewModel.init(kind:style:exposureData:)(v65, v67, v69);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v62, v70);
  sub_6685C(v63, type metadata accessor for GenreHighlight);
  v72 = type metadata accessor for HighlightFrameViewModel(0, v71);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(a1, 0, 1, v72);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v95);
}

uint64_t sub_188F00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __n128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a1;
  v2 = type metadata accessor for HighlightCoverStyle(0);
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = __chkstk_darwin(v2);
  v65 = (uint64_t *)((char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for HighlightFrameViewModel.Kind(0, v3);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_320EF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for YIRSourceData(0, v12);
  v59 = *(_QWORD *)(v15 - 8);
  v60 = v15;
  __chkstk_darwin(v15);
  v58 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v56 - v18;
  v20 = sub_5C154(&qword_322900);
  __chkstk_darwin(v20);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for TopAuthorHighlightData(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_66898((_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
  sub_BDE74((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_5E09C((uint64_t)v22, &qword_322900);
  }
  else
  {
    sub_5E160((uint64_t)v22, (uint64_t)v26, type metadata accessor for TopAuthorHighlightData);
    v28 = *(_QWORD *)&v26[*(int *)(v23 + 20)];
    v67 = v28;
    v29 = sub_5C154(&qword_325E10);
    v30 = sub_67060((unint64_t *)&qword_3276B0, &qword_325E10, (uint64_t)&protocol conformance descriptor for [A]);
    if ((Collection.isNotEmpty.getter(v29, v30) & 1) != 0)
    {
      v31 = AssetArtistInfo.name.getter();
      v56 = v32;
      v57 = v31;
      swift_bridgeObjectRetain(v28);
      v34 = (_QWORD *)sub_234CB8(v33);
      v36 = sub_189664(v34, v35);
      v37 = enum case for FrameName.mostReadAuthor(_:);
      v38 = type metadata accessor for FrameName(0);
      v39 = *(_QWORD *)(v38 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 104))(v14, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v14, 0, 1, v38);
      v40 = type metadata accessor for ReaderType(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v10, 1, 1, v40);
      swift_bridgeObjectRetain(v56);
      v42 = v41;
      v43 = v57;
      YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v14, v10, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, v57, v41, 0, 1, 0, 1, 0,
        1,
        0,
        1,
        0,
        1);
      v44 = v34[2];
      v45 = swift_bridgeObjectRelease(v34);
      *v7 = v43;
      v7[1] = v42;
      v7[2] = v44;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, __n128))(v61 + 104))(v7, enum case for HighlightFrameViewModel.Kind.topAuthor(_:), v62, v45);
      v46 = v64;
      v47 = v65;
      *v65 = v36;
      v47[1] = 0xD000000000000014;
      v47[2] = 0x8000000000273A10;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v63 + 104))(v47, enum case for HighlightCoverStyle.coverStack(_:), v46);
      v49 = v58;
      v48 = v59;
      v50 = v60;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v58, v19, v60);
      v51 = v66;
      HighlightFrameViewModel.init(kind:style:exposureData:)(v7, v47, v49);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v50);
      sub_6685C((uint64_t)v26, type metadata accessor for TopAuthorHighlightData);
      v53 = type metadata accessor for HighlightFrameViewModel(0, v52);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v51, 0, 1, v53);
    }
    sub_6685C((uint64_t)v26, type metadata accessor for TopAuthorHighlightData);
  }
  v55 = type metadata accessor for HighlightFrameViewModel(0, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v66, 1, 1, v55);
}

uint64_t sub_1893C0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v2, "setUnitsStyle:", 2);
  objc_msgSend(v2, "setFormattingContext:", 2);
  v3 = a1 % 3600;
  objc_msgSend(v2, "setAllowedUnits:", 32);
  v4 = objc_msgSend(v2, "stringFromTimeInterval:", (double)a1);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0xE000000000000000;
  }
  objc_msgSend(v2, "setAllowedUnits:", 64);
  v9 = objc_msgSend(v2, "stringFromTimeInterval:", (double)v3);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    if (a1 >= 3600)
      goto LABEL_6;
  }
  else
  {
    v11 = 0;
    v13 = 0xE000000000000000;
    if (a1 >= 3600)
    {
LABEL_6:
      v14 = sub_572E4(0, 1, 1, _swiftEmptyArrayStorage);
      v16 = v14[2];
      v15 = v14[3];
      if (v16 >= v15 >> 1)
        v14 = sub_572E4((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
      v14[2] = v16 + 1;
      v17 = &v14[2 * v16];
      v17[4] = v6;
      v17[5] = v8;
      if (v3 < 60)
        goto LABEL_9;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease(v8);
  v14 = _swiftEmptyArrayStorage;
  if (v3 < 60)
  {
LABEL_9:
    swift_bridgeObjectRelease(v13);
    goto LABEL_17;
  }
LABEL_12:
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
    v14 = sub_572E4(0, v14[2] + 1, 1, v14);
  v19 = v14[2];
  v18 = v14[3];
  if (v19 >= v18 >> 1)
    v14 = sub_572E4((_QWORD *)(v18 > 1), v19 + 1, 1, v14);
  v14[2] = v19 + 1;
  v20 = &v14[2 * v19];
  v20[4] = v11;
  v20[5] = v13;
LABEL_17:
  v21 = sub_5C154(&qword_31F730);
  v22 = sub_67060(&qword_3276C8, &qword_31F730, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v21, v22);
  swift_bridgeObjectRelease(v14);

  return v23;
}

_QWORD *sub_189664(_QWORD *a1, __n128 a2)
{
  double *v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for CoverViewModel.Style(0, a2);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for CoverViewModel(0, v5);
  v8 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v39 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - v11;
  v13 = a1[2];
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = (uint64_t)(a1 + 4);
  v15 = *v2;
  v16 = a1[7];
  v17 = a1[8];
  sub_66898(a1 + 4, v16);
  v18 = v15 * AssetInfo.coverAspectRatio.getter(v16, v17);
  v40 = enum case for CoverViewModel.Style.image(_:);
  v38 = a1;
  swift_bridgeObjectRetain(a1);
  v19 = _swiftEmptyArrayStorage;
  v20 = _swiftEmptyArrayStorage;
  do
  {
    sub_5E0D8(v14, (uint64_t)v44);
    v24 = v45;
    v23 = v46;
    sub_66898(v44, v45);
    v25 = dispatch thunk of AssetInfo.assetType.getter(v24, v23);
    if ((static AssetType.== infix(_:_:)(v25, 0) & 1) != 0)
    {
      sub_5E0D8((uint64_t)v44, (uint64_t)v7);
      *((double *)v7 + 5) = v18;
      *((double *)v7 + 6) = v15;
      (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v7, v40, v43);
      CoverViewModel.init(style:)(v7);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        v20 = (_QWORD *)sub_57020(0, v20[2] + 1, 1, (unint64_t)v20);
      v27 = v20[2];
      v26 = v20[3];
      v28 = v27 + 1;
      if (v27 >= v26 >> 1)
      {
        v21 = sub_57020(v26 > 1, v27 + 1, 1, (unint64_t)v20);
        v22 = v12;
        v20 = (_QWORD *)v21;
      }
      else
      {
        v21 = (uint64_t)v20;
        v22 = v12;
      }
LABEL_5:
      *(_QWORD *)(v21 + 16) = v28;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v21+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v27, v22, v41);
      goto LABEL_6;
    }
    v29 = v45;
    v30 = v46;
    sub_66898(v44, v45);
    v31 = dispatch thunk of AssetInfo.assetType.getter(v29, v30);
    if ((static AssetType.== infix(_:_:)(v31, 1) & 1) != 0)
    {
      sub_5E0D8((uint64_t)v44, (uint64_t)v7);
      *((double *)v7 + 5) = v18;
      *((double *)v7 + 6) = v15;
      (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v7, v40, v43);
      CoverViewModel.init(style:)(v7);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v19 = (_QWORD *)sub_57020(0, v19[2] + 1, 1, (unint64_t)v19);
      v27 = v19[2];
      v32 = v19[3];
      v28 = v27 + 1;
      if (v27 >= v32 >> 1)
      {
        v21 = sub_57020(v32 > 1, v27 + 1, 1, (unint64_t)v19);
        v22 = v39;
        v19 = (_QWORD *)v21;
      }
      else
      {
        v21 = (uint64_t)v19;
        v22 = v39;
      }
      goto LABEL_5;
    }
LABEL_6:
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v44);
    v14 += 40;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease(v38);
  v33 = v20[2];
  v34 = v19[2];
  if (v34 >= v33)
    v35 = v20;
  else
    v35 = v19;
  if (v34 < v33)
    v19 = v20;
  swift_bridgeObjectRelease(v35);
  return v19;
}

uint64_t sub_1899AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_327698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1899F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenreHighlight(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_189A38()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_189A58(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return EnvironmentValues.colorScheme.setter(v5);
}

uint64_t SeriesRoomHeaderComponent.content(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[3];

  v3 = v2;
  v67 = a1;
  v82 = a2;
  v5 = type metadata accessor for ColorScheme(0);
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  __chkstk_darwin(v5);
  v78 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for SeriesRoomHeaderComponent(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64);
  v70 = *(_QWORD *)(v81 - 8);
  v71 = v7;
  __chkstk_darwin(v81);
  v69 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_3276D8);
  __chkstk_darwin(v9);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_5C154(&qword_3276E0);
  __chkstk_darwin(v65);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_5C154(&qword_3276E8);
  __chkstk_darwin(v66);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_3276F0);
  v74 = *(_QWORD *)(v16 - 8);
  v75 = v16;
  __chkstk_darwin(v16);
  v68 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_5C154(&qword_3276F8);
  __chkstk_darwin(v72);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_5C154(&qword_327700);
  __chkstk_darwin(v73);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_5C154(&qword_327708);
  __chkstk_darwin(v77);
  v76 = (uint64_t)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (char *)a1;
  v24 = (uint64_t)v3;
  sub_18A0A8(v23, v3, (uint64_t)v11);
  KeyPath = swift_getKeyPath(&unk_2629B0);
  v26 = swift_getKeyPath(&unk_2629D8);
  v27 = swift_getKeyPath(&unk_262A08);
  sub_5E1A4((uint64_t)v11, (uint64_t)v13, &qword_3276D8);
  v28 = &v13[*(int *)(v65 + 36)];
  *(_QWORD *)v28 = KeyPath;
  v28[8] = 0;
  *((_QWORD *)v28 + 2) = v26;
  v28[24] = 0;
  *((_QWORD *)v28 + 4) = v27;
  *((_WORD *)v28 + 20) = 256;
  v29 = sub_5E09C((uint64_t)v11, &qword_3276D8);
  v30 = static SeriesRoomHeaderView.fakeScrollContentsName.getter(v29);
  v32 = v31;
  sub_5E1A4((uint64_t)v13, (uint64_t)v15, &qword_3276E0);
  v33 = v66;
  v34 = (uint64_t *)&v15[*(int *)(v66 + 36)];
  *v34 = v30;
  v34[1] = v32;
  sub_5E09C((uint64_t)v13, &qword_3276E0);
  v35 = v24;
  v36 = v69;
  sub_5E11C(v24, v69, type metadata accessor for SeriesRoomHeaderComponent);
  v37 = *(unsigned __int8 *)(v70 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = swift_allocObject(&unk_2F0710, v38 + v71, v37 | 7);
  sub_5E160(v36, v39 + v38, type metadata accessor for SeriesRoomHeaderComponent);
  v40 = sub_5C154(&qword_327710);
  v41 = sub_18B168();
  v42 = type metadata accessor for EmptyVisualEffect(255);
  v43 = sub_648E0(&qword_327758, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  v83[0] = v42;
  v83[1] = v43;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v83, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  v45 = v68;
  View.visualEffect<A>(_:)(sub_18B15C, v39, v33, v40, v41, OpaqueTypeConformance2);
  swift_release(v39);
  v46 = sub_5E09C((uint64_t)v15, &qword_3276E8);
  v47 = static Alignment.center.getter(v46);
  v49 = v48;
  v50 = (uint64_t)&v19[*(int *)(v72 + 36)];
  sub_18A6B0(v35, v67, v50);
  v51 = (uint64_t *)(v50 + *(int *)(sub_5C154(&qword_327760) + 36));
  *v51 = v47;
  v51[1] = v49;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v19, v45, v75);
  v52 = swift_getKeyPath(&unk_262A38);
  v54 = v78;
  v53 = v79;
  v55 = v80;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for ColorScheme.dark(_:), v80);
  v56 = (uint64_t *)&v21[*(int *)(v73 + 36)];
  v57 = sub_5C154(&qword_321028);
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))((char *)v56 + *(int *)(v57 + 28), v54, v55);
  *v56 = v52;
  sub_5E1A4((uint64_t)v19, (uint64_t)v21, &qword_3276F8);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  sub_5E09C((uint64_t)v19, &qword_3276F8);
  v58 = swift_getKeyPath(&unk_262A68);
  v59 = v76;
  sub_5E1A4((uint64_t)v21, v76, &qword_327700);
  v60 = v59 + *(int *)(v77 + 36);
  *(_QWORD *)v60 = v58;
  *(_BYTE *)(v60 + 8) = 1;
  sub_5E09C((uint64_t)v21, &qword_327700);
  sub_5C154(&qword_327768);
  v61 = v82;
  v62 = sub_5C154(&qword_323248);
  Binding.projectedValue.getter(v62);
  return sub_66F14(v59, v61, &qword_327708);
}

uint64_t type metadata accessor for SeriesRoomHeaderComponent(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3277D8, (uint64_t)&nominal type descriptor for SeriesRoomHeaderComponent);
}

uint64_t sub_18A0A8@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  _QWORD v69[6];

  v66 = a2;
  v67 = a3;
  v4 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v4);
  v64 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v61 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  __chkstk_darwin(v6);
  v60 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_327928);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  __chkstk_darwin(v8);
  v68 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_327930);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v16;
  v17 = sub_5C154(&qword_327938);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v55 - v23;
  v65 = type metadata accessor for SeriesRoomHeaderView(0, v22);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v57 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (int *)type metadata accessor for SeriesRoomHeaderComponentModel(0);
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v27(v24, &a1[v26[7]], v17);
  v27(v20, &a1[v26[8]], v17);
  sub_5E1A4((uint64_t)&a1[v26[9]], (uint64_t)v69, &qword_327940);
  sub_5E1A4((uint64_t)&a1[v26[10]], (uint64_t)v16, &qword_31F480);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &a1[v26[12]], v10);
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v68, &a1[v26[11]], v59);
  v28 = *((_QWORD *)a1 + 2);
  v29 = v60;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v60, &a1[v26[6]], v62);
  v31 = *(_QWORD *)a1;
  v30 = *((_QWORD *)a1 + 1);
  type metadata accessor for SeriesRoomHeaderComponent(0);
  v32 = v66;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  v33 = v64;
  sub_79074(v64);
  v54 = v31;
  v34 = v57;
  v35 = SeriesRoomHeaderView.init(title:author:authorAction:authorImpressionMetrics:narrator:footer:coverViewModels:quickActionButtonViewModel:seriesID:systemColorScheme:contextActionMenuView:)(v24, v20, v69, v56, v13, v68, v28, v29, v54, v30, v33, sub_18A50C, 0);
  LOBYTE(v13) = static Edge.Set.top.getter(v35);
  v36 = *v32;
  LOBYTE(v30) = *((_BYTE *)v32 + 8);
  v37 = swift_retain(*v32);
  v38 = sub_78264(v37, v30);
  swift_release(v36);
  KeyPath = swift_getKeyPath(&unk_262C28);
  v69[0] = v38;
  v40 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v69, KeyPath, v40);
  swift_release(KeyPath);
  swift_beginAccess(v38 + 32, v69, 0, 0);
  v41 = *(double *)(v38 + 32);
  swift_release(v38);
  v42 = EdgeInsets.init(_all:)(v41);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v49 = v63;
  v50 = v67;
  v51 = v65;
  (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v67, v34, v65);
  v52 = v50 + *(int *)(sub_5C154(&qword_327738) + 36);
  *(_BYTE *)v52 = (_BYTE)v13;
  *(double *)(v52 + 8) = v42;
  *(_QWORD *)(v52 + 16) = v44;
  *(_QWORD *)(v52 + 24) = v46;
  *(_QWORD *)(v52 + 32) = v48;
  *(_BYTE *)(v52 + 40) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v34, v51);
}

uint64_t sub_18A50C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _OWORD v5[3];
  __int128 v6[2];

  sub_5E0D8(a1, (uint64_t)v6);
  v5[0] = xmmword_2611C0;
  memset(&v5[1], 0, 32);
  a2[3] = type metadata accessor for ContextActionMenuView(0);
  a2[4] = sub_648E0(&qword_3265D0, type metadata accessor for ContextActionMenuView, (uint64_t)&protocol conformance descriptor for ContextActionMenuView);
  v3 = sub_668BC(a2);
  return ContextActionMenuView.init(assetInfo:originatingLocation:)(v6, (uint64_t)v5, (uint64_t)v3);
}

uint64_t sub_18A590()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double MinY;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  CGRect v18;

  v0 = type metadata accessor for CoordinateSpace(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpace.shelfContainerScrollView.getter(v2);
  v5 = GeometryProxy.frame(in:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v18.origin.x = v5;
  v18.origin.y = v7;
  v18.size.width = v9;
  v18.size.height = v11;
  MinY = CGRectGetMinY(v18);
  if (MinY > 0.0)
    v13 = MinY * -0.5;
  else
    v13 = -0.0;
  v14 = type metadata accessor for EmptyVisualEffect(0);
  v15 = sub_648E0(&qword_327758, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  return VisualEffect.offset(x:y:)(v14, v15, 0.0, v13);
}

uint64_t sub_18A6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  char v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  int v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;

  v78 = a2;
  v87 = a3;
  v4 = type metadata accessor for SeriesRoomHeaderComponent(0);
  v79 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v79 + 64);
  __chkstk_darwin(v4);
  v6 = sub_5C154((uint64_t *)&unk_326320);
  __chkstk_darwin(v6);
  v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_3278F8);
  v80 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_327900);
  v85 = *(_QWORD *)(v12 - 8);
  v86 = v12;
  __chkstk_darwin(v12);
  v84 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_5C154(&qword_327908);
  __chkstk_darwin(v83);
  v82 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_327910);
  v16 = swift_allocObject(v15, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_255F00;
  v17 = ((uint64_t (*)(void))static Color.black.getter)();
  v18 = Color.opacity(_:)(0.0);
  v19 = swift_release(v17);
  *(_QWORD *)(v16 + 32) = v18;
  v20 = static Color.black.getter(v19);
  v21 = Color.opacity(_:)(0.1);
  v22 = swift_release(v20);
  *(_QWORD *)(v16 + 40) = v21;
  v88 = (void *)v16;
  specialized Array._endMutation()(v22);
  v23 = Gradient.init(colors:)(v88);
  v81 = v4;
  v24 = *(int *)(v4 + 24);
  v25 = a1;
  v26 = a1 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_64DD8(*(_QWORD *)v26, v28);
  LOBYTE(a1) = sub_768E8(v27, v28);
  v29 = sub_64FFC(v27, v28);
  if ((a1 & 1) != 0)
    static UnitPoint.top.getter(v29);
  else
    v30 = static UnitPoint.topLeading.getter(v29);
  v32 = v30;
  v33 = v31;
  sub_64DD8(v27, v28);
  v34 = sub_768E8(v27, v28);
  v35 = sub_64FFC(v27, v28);
  if ((v34 & 1) != 0)
    static UnitPoint.bottom.getter(v35);
  else
    v36 = static UnitPoint.bottomTrailing.getter(v35);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v88, v23, v32, v33, v36, v37);
  v38 = *(_QWORD *)(v78 + 16);
  v39 = *(_QWORD *)(v38 + 16);
  v41 = type metadata accessor for CoverViewModel(0, v40);
  v42 = *(_QWORD *)(v41 - 8);
  if (v39)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v8, v38 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80)), v41);
    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v8, v43, 1, v41);
  v44 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v45 = Color.init(uiColor:)(v44);
  v46 = sub_18CC90();
  View.mediaBackdrop(for:placeholderColor:useSnapshot:)(v8, v45, 1, &type metadata for LinearGradient, v46);
  swift_release(v45);
  sub_5E09C((uint64_t)v8, (uint64_t *)&unk_326320);
  swift_bridgeObjectRelease(v88);
  sub_5E11C(v25, (uint64_t)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SeriesRoomHeaderComponent);
  v47 = *(unsigned __int8 *)(v79 + 80);
  v48 = (v47 + 16) & ~v47;
  v49 = swift_allocObject(&unk_2F0760, v48 + v5, v47 | 7);
  sub_5E160((uint64_t)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v49 + v48, type metadata accessor for SeriesRoomHeaderComponent);
  v50 = sub_5C154(&qword_327920);
  v88 = &type metadata for LinearGradient;
  v89 = v46;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.mediaBackdrop(for:placeholderColor:useSnapshot:)>>, 1);
  v52 = type metadata accessor for EmptyVisualEffect(255);
  v53 = sub_648E0(&qword_327758, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  v88 = (void *)v52;
  v89 = v53;
  v54 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of VisualEffect.scaleEffect(x:y:anchor:)>>, 1);
  v55 = v84;
  View.visualEffect<A>(_:)(sub_18CE20, v49, v9, v50, OpaqueTypeConformance2, v54);
  swift_release(v49);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v9);
  v56 = v25 + *(int *)(v81 + 28);
  v57 = *(_QWORD *)v56;
  v58 = *(unsigned __int8 *)(v56 + 8);
  v59 = *(unsigned __int8 *)(v56 + 9);
  v60 = *(_QWORD *)(v56 + 16);
  sub_EBB1C(*(_QWORD *)v56, v58, *(_BYTE *)(v56 + 9));
  v61 = sub_78C48(v57, v58 | (v59 << 8));
  LOBYTE(v46) = v62;
  v63 = sub_79528(v57, v58, v59);
  if ((v46 & 1) != 0)
  {
    if (qword_31E5E8 != -1)
      swift_once(&qword_31E5E8, sub_1269C0);
    v64 = type metadata accessor for Logger(0);
    v65 = sub_5240C(v64, (uint64_t)qword_325160);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.fault.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      swift_slowDealloc(v68, -1, -1);
    }

    v63 = Namespace.wrappedValue.getter(v60);
    v61 = v63;
  }
  v69 = static MatchedGeometryProperties.frame.getter(v63);
  v70 = static UnitPoint.center.getter();
  v72 = v71;
  v74 = v85;
  v73 = v86;
  v75 = (uint64_t)v82;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v82, v55, v86);
  v76 = v75 + *(int *)(v83 + 36);
  *(_QWORD *)v76 = 0xD000000000000024;
  *(_QWORD *)(v76 + 8) = 0x8000000000273AD0;
  *(_QWORD *)(v76 + 16) = v61;
  *(_DWORD *)(v76 + 24) = v69;
  *(double *)(v76 + 32) = v70;
  *(_QWORD *)(v76 + 40) = v72;
  *(_BYTE *)(v76 + 48) = 1;
  (*(void (**)(char *, uint64_t))(v74 + 8))(v55, v73);
  return sub_66F14(v75, v87, &qword_327908);
}

uint64_t sub_18ACE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double MinY;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  CGRect v24;

  v0 = type metadata accessor for CoordinateSpace(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = GeometryProxy.size.getter(v4);
  v7 = v6;
  static CoordinateSpace.fakeScrollContents.getter(v5);
  v8 = GeometryProxy.frame(in:)(v3);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v24.origin.x = v8;
  v24.origin.y = v10;
  v24.size.width = v12;
  v24.size.height = v14;
  MinY = CGRectGetMinY(v24);
  v16 = 1.0;
  if (v7 != 0.0)
  {
    if (MinY <= 0.0)
      MinY = 0.0;
    v16 = (v7 + MinY) / v7;
  }
  v17 = static UnitPoint.bottom.getter();
  v19 = v18;
  v20 = type metadata accessor for EmptyVisualEffect(0);
  v21 = sub_648E0(&qword_327758, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  return VisualEffect.scaleEffect(x:y:anchor:)(v20, v21, v16, v16, v17, v19);
}

uint64_t sub_18AE2C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInVibrantContext.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18AE58(unsigned __int8 *a1)
{
  return EnvironmentValues.isInVibrantContext.setter(*a1);
}

uint64_t sub_18AE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(v5, (uint64_t)v4, type metadata accessor for SeriesRoomHeaderComponent);
  v6 = sub_648E0((unint64_t *)&unk_32A090, type metadata accessor for SeriesRoomHeaderComponent, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponent);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_18AF1C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = GeometryProxy.size.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18AF44(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = sub_5C154(&qword_323250);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - v6;
  NavigationBarTransitionInfo.init(startOffset:endOffset:)(*a1 + -32.0, *a1);
  v8 = type metadata accessor for NavigationBarTransitionInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  sub_5E1A4((uint64_t)v7, (uint64_t)v4, &qword_323250);
  v9 = sub_5C154(&qword_323248);
  Binding.wrappedValue.setter(v4, v9);
  return sub_5E09C((uint64_t)v7, &qword_323250);
}

uint64_t sub_18B040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(a1);
  sub_5E11C(v3, (uint64_t)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for UberNavigationBarTransitionInfoUpdateViewModifier);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_2F0738, v9 + v7, v8 | 7);
  sub_5E160((uint64_t)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for UberNavigationBarTransitionInfoUpdateViewModifier);
  v11 = sub_5C154(&qword_3278E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a3, a1, v11);
  result = sub_5C154(&qword_3278F0);
  v13 = (_QWORD *)(a3 + *(int *)(result + 36));
  *v13 = sub_18AF1C;
  v13[1] = 0;
  v13[2] = sub_18CC54;
  v13[3] = v10;
  return result;
}

uint64_t sub_18B15C(uint64_t a1, uint64_t a2)
{
  return sub_18CE2C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A590);
}

unint64_t sub_18B168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327718;
  if (!qword_327718)
  {
    v1 = sub_667D0(&qword_3276E8);
    sub_18B1EC();
    sub_67060(&qword_327748, &qword_327750, (uint64_t)&protocol conformance descriptor for _CoordinateSpaceModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327718);
  }
  return result;
}

unint64_t sub_18B1EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327720;
  if (!qword_327720)
  {
    v1 = sub_667D0(&qword_3276E0);
    sub_18B258();
    sub_E5E48();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327720);
  }
  return result;
}

unint64_t sub_18B258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327728;
  if (!qword_327728)
  {
    v1 = sub_667D0(&qword_3276D8);
    sub_18B2BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_327728);
  }
  return result;
}

unint64_t sub_18B2BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327730;
  if (!qword_327730)
  {
    v1 = sub_667D0(&qword_327738);
    sub_648E0(&qword_327740, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesRoomHeaderView, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327730);
  }
  return result;
}

uint64_t sub_18B340()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_18B364@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInVibrantContext.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18B390(unsigned __int8 *a1)
{
  return EnvironmentValues.isInVibrantContext.setter(*a1);
}

uint64_t sub_18B3B4()
{
  return sub_648E0(&qword_327770, type metadata accessor for SeriesRoomHeaderComponent, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponent);
}

uint64_t sub_18B3E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SeriesRoomHeaderComponent.content(for:)>>, 1);
}

uint64_t sub_18B3F0()
{
  return sub_648E0((unint64_t *)&qword_320090, type metadata accessor for SeriesRoomHeaderComponentModel, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponentModel);
}

uint64_t sub_18B41C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0((unint64_t *)&unk_32A090, type metadata accessor for SeriesRoomHeaderComponent, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponent);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesRoomHeaderComponent(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v7);
    v12 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    sub_64DD8(*(_QWORD *)v19, v21);
    *(_QWORD *)v18 = v20;
    *(_BYTE *)(v18 + 8) = v21;
    v22 = a3[7];
    v23 = a1 + v22;
    v24 = (uint64_t)a2 + v22;
    v25 = *(uint64_t *)((char *)a2 + v22);
    v26 = *((_BYTE *)a2 + v22 + 9);
    LOBYTE(v18) = *((_BYTE *)a2 + v22 + 8);
    sub_EBB1C(v25, v18, v26);
    *(_QWORD *)v23 = v25;
    *(_BYTE *)(v23 + 8) = v18;
    *(_BYTE *)(v23 + 9) = v26;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    v27 = a3[8];
    v28 = (_QWORD *)(a1 + v27);
    v29 = (uint64_t)a2 + v27;
    v30 = *(uint64_t *)((char *)a2 + v27);
    v31 = *(uint64_t *)((char *)a2 + v27 + 8);
    *v28 = v30;
    v28[1] = v31;
    swift_retain(v30);
    swift_retain(v31);
    v32 = *(int *)(sub_5C154(&qword_323248) + 32);
    v33 = (char *)v28 + v32;
    v34 = (const void *)(v29 + v32);
    v35 = type metadata accessor for NavigationBarTransitionInfo(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = sub_5C154(&qword_323250);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t destroy for SeriesRoomHeaderComponent(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  sub_79528(*(_QWORD *)((char *)a1 + a2[7]), *((unsigned __int8 *)a1 + a2[7] + 8), *((_BYTE *)a1 + a2[7] + 9));
  v7 = (_QWORD *)((char *)a1 + a2[8]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = (char *)v7 + *(int *)(sub_5C154(&qword_323248) + 32);
  v9 = type metadata accessor for NavigationBarTransitionInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  return result;
}

uint64_t initializeWithCopy for SeriesRoomHeaderComponent(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v6);
  v11 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = *(_BYTE *)(v17 + 8);
  sub_64DD8(*(_QWORD *)v17, v19);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v19;
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = (uint64_t)a2 + v20;
  v23 = *(uint64_t *)((char *)a2 + v20);
  v24 = *((_BYTE *)a2 + v20 + 9);
  LOBYTE(v16) = *((_BYTE *)a2 + v20 + 8);
  sub_EBB1C(v23, v16, v24);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v16;
  *(_BYTE *)(v21 + 9) = v24;
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t)a2 + v25;
  v28 = *(uint64_t *)((char *)a2 + v25);
  v29 = *(uint64_t *)((char *)a2 + v25 + 8);
  *v26 = v28;
  v26[1] = v29;
  swift_retain(v28);
  swift_retain(v29);
  v30 = *(int *)(sub_5C154(&qword_323248) + 32);
  v31 = (char *)v26 + v30;
  v32 = (const void *)(v27 + v30);
  v33 = type metadata accessor for NavigationBarTransitionInfo(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_5C154(&qword_323250);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t *assignWithCopy for SeriesRoomHeaderComponent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_5E09C((uint64_t)a1 + v9, &qword_3202E8);
    v12 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  v16 = a3[6];
  v17 = (uint64_t)a1 + v16;
  v18 = (uint64_t)a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_64DD8(*(_QWORD *)v18, v20);
  v21 = *(_QWORD *)v17;
  v22 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  sub_64FFC(v21, v22);
  v23 = a3[7];
  v24 = (uint64_t)a1 + v23;
  v25 = (uint64_t)a2 + v23;
  v26 = *(uint64_t *)((char *)a2 + v23);
  v27 = *((_BYTE *)a2 + v23 + 9);
  LOBYTE(v17) = *((_BYTE *)a2 + v23 + 8);
  sub_EBB1C(v26, v17, v27);
  v28 = *(_QWORD *)v24;
  v29 = *(_BYTE *)(v24 + 9);
  *(_QWORD *)v24 = v26;
  v30 = *(unsigned __int8 *)(v24 + 8);
  *(_BYTE *)(v24 + 8) = v17;
  *(_BYTE *)(v24 + 9) = v27;
  sub_79528(v28, v30, v29);
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  v31 = a3[8];
  v32 = (uint64_t)a1 + v31;
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *(uint64_t *)((char *)a1 + v31);
  v35 = *v33;
  *(uint64_t *)((char *)a1 + v31) = *v33;
  swift_retain(v35);
  swift_release(v34);
  v36 = v33[1];
  v37 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v32 + 8) = v36;
  swift_retain(v36);
  swift_release(v37);
  v38 = *(int *)(sub_5C154(&qword_323248) + 32);
  v39 = (void *)(v32 + v38);
  v40 = (char *)v33 + v38;
  v41 = type metadata accessor for NavigationBarTransitionInfo(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(void *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v42 + 8))(v39, v41);
    goto LABEL_11;
  }
  if (v45)
  {
LABEL_11:
    v46 = sub_5C154(&qword_323250);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  return a1;
}

uint64_t initializeWithTake for SeriesRoomHeaderComponent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a1 + v12;
  v16 = a2 + v12;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17 + 8);
  *v18 = *(_QWORD *)(a2 + v17);
  v18[1] = v20;
  v21 = *(int *)(sub_5C154(&qword_323248) + 32);
  v22 = (char *)v18 + v21;
  v23 = (const void *)(v19 + v21);
  v24 = type metadata accessor for NavigationBarTransitionInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_5C154(&qword_323250);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t *assignWithTake for SeriesRoomHeaderComponent(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  uint64_t v39;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_5E09C((uint64_t)a1 + v8, &qword_3202E8);
    v11 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = (uint64_t)a1 + v13;
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 8);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = (_BYTE)v15;
  sub_64FFC(v17, v18);
  v19 = a3[7];
  v20 = (uint64_t)a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = *((_BYTE *)a2 + v19 + 8);
  v23 = *((_BYTE *)a2 + v19 + 9);
  v24 = *(uint64_t *)((char *)a1 + v19);
  v25 = *((_BYTE *)a1 + v19 + 9);
  *(_QWORD *)v20 = *(uint64_t *)((char *)a2 + v19);
  v26 = *((unsigned __int8 *)a1 + v19 + 8);
  *(_BYTE *)(v20 + 8) = v22;
  *(_BYTE *)(v20 + 9) = v23;
  sub_79528(v24, v26, v25);
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  v27 = a3[8];
  v28 = (uint64_t)a1 + v27;
  v29 = (uint64_t)a2 + v27;
  v30 = *(uint64_t *)((char *)a1 + v27);
  *(uint64_t *)((char *)a1 + v27) = *(uint64_t *)((char *)a2 + v27);
  swift_release(v30);
  v31 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  swift_release(v31);
  v32 = *(int *)(sub_5C154(&qword_323248) + 32);
  v33 = (void *)(v28 + v32);
  v34 = (void *)(v29 + v32);
  v35 = type metadata accessor for NavigationBarTransitionInfo(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  LODWORD(v21) = v37(v33, 1, v35);
  v38 = v37(v34, 1, v35);
  if (!(_DWORD)v21)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v36 + 40))(v33, v34, v35);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_10;
  }
  if (v38)
  {
LABEL_10:
    v39 = sub_5C154(&qword_323250);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v36 + 32))(v33, v34, v35);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesRoomHeaderComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18BFE0);
}

uint64_t sub_18BFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_5C154(&qword_327778);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_323248);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesRoomHeaderComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18C08C);
}

uint64_t sub_18C08C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_5C154(&qword_327778);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_323248);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_18C12C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "\t";
  sub_18C1C8(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = "\t";
    v6[3] = &unk_262B88;
    sub_D372C(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_18C1C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3277E8)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3277E8);
  }
}

unint64_t sub_18C220()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327828;
  if (!qword_327828)
  {
    v1 = sub_667D0(&qword_327768);
    sub_18C2A4();
    sub_648E0(&qword_327850, type metadata accessor for UberNavigationBarTransitionInfoUpdateViewModifier, (uint64_t)&unk_262BD4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327828);
  }
  return result;
}

unint64_t sub_18C2A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327830;
  if (!qword_327830)
  {
    v1 = sub_667D0(&qword_327708);
    sub_18C328();
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327830);
  }
  return result;
}

unint64_t sub_18C328()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327838;
  if (!qword_327838)
  {
    v1 = sub_667D0(&qword_327700);
    sub_18C3AC();
    sub_67060(&qword_321020, &qword_321028, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327838);
  }
  return result;
}

unint64_t sub_18C3AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = qword_327840;
  if (!qword_327840)
  {
    v1 = sub_667D0(&qword_3276F8);
    v2 = sub_667D0(&qword_3276E8);
    v3 = sub_667D0(&qword_327710);
    v4 = sub_18B168();
    v6 = type metadata accessor for EmptyVisualEffect(255);
    v7 = sub_648E0(&qword_327758, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.visualEffect<A>(_:)>>, 1);
    sub_67060(&qword_327848, &qword_327760, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327840);
  }
  return result;
}

uint64_t type metadata accessor for UberNavigationBarTransitionInfoUpdateViewModifier(uint64_t a1)
{
  return sub_64960(a1, qword_3278B0, (uint64_t)&nominal type descriptor for UberNavigationBarTransitionInfoUpdateViewModifier);
}

uint64_t *sub_18C4D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;

  v4 = sub_5C154(&qword_323248);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v6);
  }
  else
  {
    v7 = a2[1];
    a1[1] = v7;
    v8 = *(int *)(v4 + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for NavigationBarTransitionInfo(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain(v6);
    swift_retain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = sub_5C154(&qword_323250);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_18C5E8(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_release(*a1);
  swift_release(a1[1]);
  v2 = (char *)a1 + *(int *)(sub_5C154(&qword_323248) + 32);
  v3 = type metadata accessor for NavigationBarTransitionInfo(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

uint64_t *sub_18C674(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain(v4);
  swift_retain(v5);
  v6 = *(int *)(sub_5C154(&qword_323248) + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NavigationBarTransitionInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_5C154(&qword_323250);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t *sub_18C74C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(sub_5C154(&qword_323248) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for NavigationBarTransitionInfo(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_5C154(&qword_323250);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

_QWORD *sub_18C88C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(sub_5C154(&qword_323248) + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for NavigationBarTransitionInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_5C154(&qword_323250);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t *sub_18C958(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  v6 = *(int *)(sub_5C154(&qword_323248) + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NavigationBarTransitionInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_5C154(&qword_323250);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_18CA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18CA94);
}

uint64_t sub_18CA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_323248);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_18CAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18CAE0);
}

uint64_t sub_18CAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_323248);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_18CB24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_D372C(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_18CB8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B90AC, 1);
}

uint64_t sub_18CB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for UberNavigationBarTransitionInfoUpdateViewModifier(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v0 + v3));
  swift_release(*(_QWORD *)(v0 + v3 + 8));
  v5 = v0 + v3 + *(int *)(sub_5C154(&qword_323248) + 32);
  v6 = type metadata accessor for NavigationBarTransitionInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_18CC54(double *a1)
{
  type metadata accessor for UberNavigationBarTransitionInfoUpdateViewModifier(0);
  return sub_18AF44(a1);
}

unint64_t sub_18CC90()
{
  unint64_t result;

  result = qword_327918;
  if (!qword_327918)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_327918);
  }
  return result;
}

uint64_t sub_18CCD8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for SeriesRoomHeaderComponent(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_64FFC(*(_QWORD *)(v6 + v1[6]), *(_BYTE *)(v6 + v1[6] + 8));
  sub_79528(*(_QWORD *)(v6 + v1[7]), *(unsigned __int8 *)(v6 + v1[7] + 8), *(_BYTE *)(v6 + v1[7] + 9));
  v10 = (_QWORD *)(v6 + v1[8]);
  swift_release(*v10);
  swift_release(v10[1]);
  v11 = (char *)v10 + *(int *)(sub_5C154(&qword_323248) + 32);
  v12 = type metadata accessor for NavigationBarTransitionInfo(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_18CE20(uint64_t a1, uint64_t a2)
{
  return sub_18CE2C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18ACE0);
}

uint64_t sub_18CE2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesRoomHeaderComponent(0) - 8) + 80);
  return a3(a1, a2, v3 + ((v6 + 16) & ~v6));
}

unint64_t sub_18CE9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327948;
  if (!qword_327948)
  {
    v1 = sub_667D0(&qword_3278F0);
    sub_67060(&qword_327950, &qword_3278E8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_67060(&qword_327958, &qword_327960, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327948);
  }
  return result;
}

uint64_t *sub_18CF38(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    a1[1] = v8;
    swift_retain(v5);
    swift_retain(v8);
    v9 = *(int *)(sub_5C154(&qword_327968) + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[5];
    v14 = a3[6];
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    v17 = *(_QWORD *)v16;
    v18 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v18;
    v15[16] = v16[16];
    v19 = (char *)a1 + v14;
    v20 = (char *)a2 + v14;
    v21 = *(_QWORD *)v20;
    v22 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v22;
    v19[16] = v20[16];
    v23 = a3[7];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    swift_retain(v17);
    swift_retain(v18);
    swift_retain(v21);
    swift_retain(v22);
    v26 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      v31 = *v25;
      *v24 = *v25;
      swift_retain(v31);
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
  }
  return a1;
}

uint64_t sub_18D0B4(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_5C154(&qword_327968) + 32);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = (_QWORD *)((char *)a1 + a2[7]);
  v9 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v8, v9) != 1)
    return swift_release(*v8);
  v10 = type metadata accessor for SizeConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
}

uint64_t *sub_18D1A0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain(v6);
  swift_retain(v7);
  v8 = *(int *)(sub_5C154(&qword_327968) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *(_QWORD *)v15;
  v17 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v17;
  v14[16] = v15[16];
  v18 = (char *)a1 + v13;
  v19 = (char *)a2 + v13;
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v21;
  v18[16] = v19[16];
  v22 = a3[7];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v20);
  swift_retain(v21);
  v25 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  return a1;
}

uint64_t *sub_18D2E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(sub_5C154(&qword_327968) + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(uint64_t *)((char *)a1 + v14);
  v18 = *(uint64_t *)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *((_QWORD *)v16 + 1);
  v20 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v19;
  swift_retain(v19);
  swift_release(v20);
  v15[16] = v16[16];
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t *)((char *)a1 + v21);
  v25 = *(uint64_t *)((char *)a2 + v21);
  *(uint64_t *)((char *)a1 + v21) = v25;
  swift_retain(v25);
  swift_release(v24);
  v26 = *((_QWORD *)v23 + 1);
  v27 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = v26;
  swift_retain(v26);
  swift_release(v27);
  v22[16] = v23[16];
  if (a1 != a2)
  {
    v28 = a3[7];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    sub_5E09C((uint64_t)a1 + v28, &qword_320160);
    v31 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
  }
  return a1;
}

_QWORD *sub_18D49C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_5C154(&qword_327968) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[5];
  v12 = a3[6];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  v15 = *(_OWORD *)v14;
  v13[16] = v14[16];
  *(_OWORD *)v13 = v15;
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_18D5C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(sub_5C154(&qword_327968) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  swift_release(v15);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_release(v16);
  v13[16] = v14[16];
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(uint64_t *)((char *)a1 + v17);
  *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
  swift_release(v20);
  v21 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  swift_release(v21);
  v18[16] = v19[16];
  if (a1 != a2)
  {
    v22 = a3[7];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    sub_5E09C((uint64_t)a1 + v22, &qword_320160);
    v25 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
      swift_storeEnumTagMultiPayload(v23, v25, 1);
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_18D748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18D754);
}

uint64_t sub_18D754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_5C154(&qword_327968);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5C154(&qword_3201B0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_18D808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18D814);
}

uint64_t sub_18D814(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5C154(&qword_327968);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_5C154(&qword_3201B0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for FinishedDatePickerView(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3279C8, (uint64_t)&nominal type descriptor for FinishedDatePickerView);
}

void sub_18D8D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_8C25C(319, (unint64_t *)&unk_3279D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_262C78;
    v6[2] = &unk_262C78;
    sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for FinishedDateType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18D9E4 + 4 * byte_262C55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18DA18 + 4 * byte_262C50[v4]))();
}

uint64_t sub_18DA18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18DA20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18DA28);
  return result;
}

uint64_t sub_18DA34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18DA3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18DA40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18DA48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FinishedDateType()
{
  return &type metadata for FinishedDateType;
}

unint64_t sub_18DA68()
{
  unint64_t result;

  result = qword_327A10;
  if (!qword_327A10)
  {
    result = swift_getWitnessTable(&unk_262D14, &type metadata for FinishedDateType);
    atomic_store(result, (unint64_t *)&qword_327A10);
  }
  return result;
}

void sub_18DAAC(_QWORD *a1@<X8>)
{
  *a1 = &off_2E7048;
}

void Shelf.Presentation.orientation.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_18DAC8()
{
  return sub_67060(&qword_327A18, &qword_327A20, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_18DAF8()
{
  unint64_t result;

  result = qword_327A28;
  if (!qword_327A28)
  {
    result = swift_getWitnessTable(&unk_262DA4, &type metadata for FinishedDateType);
    atomic_store(result, (unint64_t *)&qword_327A28);
  }
  return result;
}

uint64_t sub_18DB3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B916C, 1);
}

uint64_t sub_18DB4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  double v35;
  uint64_t KeyPath;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  char v59;
  char v60;

  v2 = v1;
  v57 = a1;
  v3 = sub_5C154(&qword_320388);
  v55 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  __chkstk_darwin(v3);
  v54 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_320390);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SizeConstants(0);
  v51 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_320488);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_320490);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_327A30);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v21 = sub_5C154(&qword_327A38);
  v22 = sub_18DF44(v2, (uint64_t)&v13[*(int *)(v21 + 44)]);
  v23 = static Alignment.center.getter(v22);
  sub_74778(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v23, v24);
  v25 = sub_5E09C((uint64_t)v13, &qword_320488);
  v26 = static Edge.Set.bottom.getter(v25);
  v27 = Edge.Set.init(rawValue:)(0);
  v28 = v27;
  v29 = Edge.Set.init(rawValue:)(v27);
  if (Edge.Set.init(rawValue:)(v29 & v26) != v26)
    LOBYTE(v28) = Edge.Set.init(rawValue:)(v28 | v26);
  v30 = v2 + *(int *)(type metadata accessor for FinishedDatePickerView(0) + 24);
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v30 + 8);
  LOBYTE(v30) = *(_BYTE *)(v30 + 16);
  v58[0] = v31;
  v58[1] = v32;
  v59 = v30;
  v33 = sub_5C154(&qword_3249B8);
  Binding.wrappedValue.getter(v33, v34);
  v35 = 0.0;
  if ((v60 & 1) != 0)
  {
    sub_76D64((uint64_t)v10);
    ScalableSizeConstants.scaled.getter(v8, &protocol witness table for SizeConstants);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v8);
    KeyPath = swift_getKeyPath(&unk_262DD0);
    v37 = v53;
    v38 = v54;
    SizeConstants.Scaled.subscript.getter(KeyPath, v53, &protocol witness table for SizeConstants.Spacing);
    swift_release(KeyPath);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v37);
    v39 = swift_getKeyPath(&unk_262E00);
    v40 = sub_79620();
    v41 = v56;
    SizeConstants.Scaled.subscript.getter(v58, v39, v56, v40);
    swift_release(v39);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v41);
    v35 = *(double *)v58;
  }
  v42 = EdgeInsets.init(_all:)(v35);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_5E1A4((uint64_t)v16, (uint64_t)v20, &qword_320490);
  v49 = &v20[*(int *)(v17 + 36)];
  *v49 = v28;
  *((double *)v49 + 1) = v42;
  *((_QWORD *)v49 + 2) = v44;
  *((_QWORD *)v49 + 3) = v46;
  *((_QWORD *)v49 + 4) = v48;
  v49[40] = 0;
  sub_5E09C((uint64_t)v16, &qword_320490);
  return sub_66F14((uint64_t)v20, v57, &qword_327A30);
}

uint64_t sub_18DF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v4 = (int *)type metadata accessor for FinishedDateWheel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v47 = (uint64_t)&v46 - v8;
  v9 = sub_5C154(&qword_327968);
  Binding.projectedValue.getter(v9);
  v10 = type metadata accessor for FinishedDatePickerView(0);
  v11 = (uint64_t *)(a1 + *(int *)(v10 + 20));
  v12 = v11[1];
  v13 = *((_BYTE *)v11 + 16);
  v48 = *v11;
  v49 = v12;
  v50 = v13;
  v46 = sub_5C154(&qword_327A40);
  Binding.projectedValue.getter(v46);
  v15 = v51;
  v14 = v52;
  v16 = v53;
  v17 = (uint64_t *)(a1 + *(int *)(v10 + 24));
  v18 = *v17;
  v19 = v17[1];
  LOBYTE(v17) = *((_BYTE *)v17 + 16);
  v48 = v18;
  v49 = v19;
  v50 = (char)v17;
  v20 = sub_5C154(&qword_3249B8);
  Binding.projectedValue.getter(v20);
  v21 = v51;
  v22 = v52;
  v23 = v53;
  v24 = &v6[v4[5]];
  *(_QWORD *)v24 = v15;
  *((_QWORD *)v24 + 1) = v14;
  v24[16] = v16;
  v25 = &v6[v4[6]];
  *(_QWORD *)v25 = v21;
  *((_QWORD *)v25 + 1) = v22;
  v25[16] = v23;
  v26 = &v6[v4[7]];
  LOBYTE(v48) = 1;
  State.init(wrappedValue:)(&v51, &v48, &type metadata for Bool);
  v27 = v52;
  *v26 = v51;
  *((_QWORD *)v26 + 1) = v27;
  v28 = &v6[v4[8]];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_262E30);
  v29 = sub_5C154(&qword_320290);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = &v6[v4[9]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_262E60);
  v31 = sub_5C154(&qword_3204B0);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = &v6[v4[10]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_262E90);
  v33 = sub_5C154(&qword_3204A0);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  v34 = &v6[v4[11]];
  *(_QWORD *)v34 = swift_getKeyPath(&unk_262EC0);
  v35 = sub_5C154(&qword_3204A8);
  swift_storeEnumTagMultiPayload(v34, v35, 0);
  v36 = v47;
  sub_19166C((uint64_t)v6, v47);
  v37 = v11[1];
  v38 = *((_BYTE *)v11 + 16);
  v48 = *v11;
  v49 = v37;
  v50 = v38;
  Binding.projectedValue.getter(v46);
  v39 = v51;
  v40 = v52;
  v41 = v53;
  sub_1916B0(v36, (uint64_t)v6);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v42 = (int *)sub_5C154(&qword_327A48);
  sub_1916B0((uint64_t)v6, a2 + v42[12]);
  v43 = a2 + v42[16];
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  v44 = a2 + v42[20];
  *(_QWORD *)v44 = v39;
  *(_QWORD *)(v44 + 8) = v40;
  *(_BYTE *)(v44 + 16) = v41;
  swift_retain(v39);
  swift_retain(v40);
  sub_1916F4(v36);
  swift_release(v40);
  swift_release(v39);
  return sub_1916F4((uint64_t)v6);
}

uint64_t sub_18E25C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v2 = type metadata accessor for TimeZone(0, a2);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - v7;
  v9 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - v13;
  type metadata accessor for FinishedDateWheel(0);
  sub_790A4((uint64_t)v8);
  sub_18E478(1900, (uint64_t)v8, (uint64_t)v11);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v11, 1, v15);
  if ((_DWORD)v18 == 1)
  {
    sub_5E09C((uint64_t)v11, &qword_31F128);
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_4:
    static Date.distantPast.getter(v19);
    return sub_5E09C((uint64_t)v14, &qword_31F128);
  }
  v20 = static TimeZone.current.getter(v18);
  static TimeZone.current.getter(v20);
  sub_21D778((uint64_t)v8, (uint64_t)v5, (uint64_t)v14);
  v21 = *(void (**)(char *, uint64_t))(v3 + 8);
  v21(v5, v2);
  v21(v8, v2);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  v19 = v17(v14, 1, v15);
  if ((_DWORD)v19 == 1)
    goto LABEL_4;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v24, v14, v15);
}

uint64_t sub_18E478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a1;
  v48 = a3;
  v4 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v4);
  v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_320330);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_327C58);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DateComponents(0, v10);
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Calendar(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.gregorian.getter(v21);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v12, v20, v17);
  v22.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
  v23 = type metadata accessor for TimeZone(0, v22);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v8, a2, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v8, 0, 1, v23);
  v42 = 1;
  v41 = 1;
  v40 = 1;
  v39 = 1;
  v38 = 1;
  v37 = 1;
  v36 = 1;
  v35 = 1;
  v34 = 1;
  v33 = 1;
  v32 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v12, v8, 0, 1, v47, 0, 0, 1, 0, v32, 0, v33, 0, v34, 0, v35, 0, v36, 0,
    v37,
    0,
    v38,
    0,
    v39,
    0,
    v40,
    0,
    v41,
    0,
    v42);
  v25 = (uint64_t)v46;
  Calendar.date(from:)(v16);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a2, v23);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v45);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_5E09C(v25, &qword_31F128);
    v28 = 1;
    v29 = v48;
  }
  else
  {
    v30 = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v48, v25, v26);
    v28 = 0;
    v29 = v30;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v29, v28, 1, v26);
}

uint64_t sub_18E794@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v3 = type metadata accessor for TimeZone(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - v8;
  v11 = static TimeZone.current.getter(v10);
  static TimeZone.current.getter(v11);
  sub_21D778((uint64_t)v9, (uint64_t)v6, a1);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

id sub_18E854(__n128 a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  Class isa;
  Class v14;
  Class v15;
  NSString v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for TimeZone(0, a1);
  v20 = *(_QWORD *)(v1 - 8);
  v21 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Calendar(0, v2);
  v5 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  type metadata accessor for FinishedDateWheel(0);
  sub_790CC((uint64_t)v11);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  objc_msgSend(v12, "setLocale:", isa);

  sub_790F0((uint64_t)v7);
  v14 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  objc_msgSend(v12, "setCalendar:", v14);

  sub_790A4((uint64_t)v4);
  v15 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v21);
  objc_msgSend(v12, "setTimeZone:", v15);

  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setLocalizedDateFormatFromTemplate:", v16);

  objc_msgSend(v12, "setFormattingContext:", 2);
  return v12;
}

_QWORD *sub_18EA78(__n128 a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(unint64_t, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  void (*v74)(uint64_t, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unsigned int v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;

  v91 = type metadata accessor for Calendar.Component(0, a1);
  v87 = *(_QWORD *)(v91 - 8);
  v2 = __chkstk_darwin(v91);
  v85 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0, v2);
  v89 = *(_QWORD *)(v4 - 8);
  v90 = v4;
  __chkstk_darwin(v4);
  v73 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_31F128);
  v7 = __chkstk_darwin(v6);
  v88 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v72 - v14;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v84 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v86 = (char *)&v72 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v72 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v72 - v25;
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v72 - v29;
  v83 = v1;
  v31 = sub_18E25C((uint64_t)v26, v28);
  v32 = static TimeZone.current.getter(v31);
  static TimeZone.current.getter(v32);
  sub_21D778((uint64_t)v15, (uint64_t)v12, (uint64_t)v30);
  v33 = v30;
  v34 = *(void (**)(char *, uint64_t))(v10 + 8);
  v34(v12, v9);
  v34(v15, v9);
  v35 = *(void (**)(char *, uint64_t))(v17 + 8);
  v94 = v16;
  v92 = v35;
  v36 = ((uint64_t (*)(char *, uint64_t))v35)(v26, v16);
  static Date.now.getter(v36);
  v93 = v23;
  if ((static Date.< infix(_:_:)(v33, v23) & 1) != 0)
  {
    v74 = (void (*)(uint64_t, uint64_t))v34;
    v75 = v26;
    v76 = v15;
    v77 = v12;
    v37 = 0;
    v81 = v83 + *(int *)(type metadata accessor for FinishedDateWheel(0) + 40);
    v83 = v17;
    v80 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v79 = enum case for Calendar.Component.year(_:);
    v38 = _swiftEmptyArrayStorage;
    v39 = (uint64_t)v73;
    v78 = v9;
    v82 = v33;
    v40 = v94;
    while (1)
    {
      v41 = v86;
      v80(v86, v33, v40);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        v38 = (_QWORD *)sub_578A8(0, v38[2] + 1, 1, (unint64_t)v38);
      v43 = v38[2];
      v42 = v38[3];
      if (v43 >= v42 >> 1)
        v38 = (_QWORD *)sub_578A8(v42 > 1, v43 + 1, 1, (unint64_t)v38);
      v38[2] = v43 + 1;
      v44 = v83;
      v45 = (unint64_t)v38
          + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))
          + *(_QWORD *)(v83 + 72) * v43;
      v46 = *(void (**)(unint64_t, char *, uint64_t))(v83 + 32);
      v46(v45, v41, v40);
      sub_790F0(v39);
      v47 = v85;
      v48 = v39;
      v49 = v87;
      v50 = v91;
      (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v85, v79, v91);
      v51 = (uint64_t)v88;
      v52 = v82;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v47, 1, v82, 0);
      v53 = v50;
      v54 = v94;
      v55 = v49;
      v39 = v48;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v53);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v48, v90);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v51, 1, v54) == 1)
        break;
      v56 = v84;
      v57 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v84, v51, v54);
      v58 = (uint64_t)v76;
      v59 = static TimeZone.current.getter(v57);
      v60 = (uint64_t)v77;
      static TimeZone.current.getter(v59);
      v61 = (uint64_t)v75;
      sub_21D778(v58, v60, (uint64_t)v75);
      v62 = v60;
      v63 = v78;
      v64 = v74;
      v74(v62, v78);
      v65 = v58;
      v40 = v94;
      v64(v65, v63);
      v66 = v56;
      v67 = v92;
      v92(v66, v40);
      v67(v52, v40);
      v46((unint64_t)v52, (char *)v61, v40);
      v33 = v52;
      if ((static Date.< infix(_:_:)(v52, v93) & 1) != 0 && v37++ < 0x3E7)
        continue;
      goto LABEL_13;
    }
    v70 = v92;
    v92(v93, v54);
    v70(v52, v54);
    sub_5E09C(v51, &qword_31F128);
  }
  else
  {
    v38 = _swiftEmptyArrayStorage;
    v40 = v94;
LABEL_13:
    v69 = v92;
    v92(v93, v40);
    v69(v33, v40);
  }
  return v38;
}

uint64_t sub_18EFA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  char v88;

  v82 = a1;
  v83 = sub_5C154(&qword_327BE8);
  __chkstk_darwin(v83);
  v3 = (uint64_t *)((char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = sub_5C154(&qword_327BF0);
  v4 = __chkstk_darwin(v80);
  v81 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for WheelPickerStyle(0, v4);
  v75 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v73 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_327968);
  __chkstk_darwin(v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v66 - v11;
  v13 = sub_5C154(&qword_327BF8);
  v68 = *(_QWORD *)(v13 - 8);
  v69 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_5C154(&qword_327C00);
  __chkstk_darwin(v76);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_5C154(&qword_327C08);
  v71 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_5C154(&qword_327C10);
  v74 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v70 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v72 = (char *)&v66 - v22;
  v23 = v1 + *(int *)(type metadata accessor for FinishedDateWheel(0) + 20);
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  LOBYTE(v23) = *(_BYTE *)(v23 + 16);
  v84 = v24;
  v85 = v25;
  LOBYTE(v86) = v23;
  v26 = sub_5C154(&qword_327A40);
  v28 = Binding.wrappedValue.getter(v26, v27);
  if ((v88 & 1) != 0)
  {
    *v3 = static Alignment.center.getter(v28);
    v3[1] = v30;
    v31 = sub_5C154(&qword_327C18);
    sub_18F9C4(v1, (uint64_t)v3 + *(int *)(v31 + 44));
    v32 = v81;
    sub_5E1A4((uint64_t)v3, v81, &qword_327BE8);
    swift_storeEnumTagMultiPayload(v32, v80, 1);
    v33 = sub_192E90();
    v84 = v76;
    v85 = v78;
    v86 = v33;
    v87 = &protocol witness table for WheelPickerStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
    v84 = v77;
    v85 = OpaqueTypeConformance2;
    v35 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
    v36 = sub_67060(&qword_327C30, &qword_327BE8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v32, v79, v83, v35, v36);
    return sub_5E09C((uint64_t)v3, &qword_327BE8);
  }
  else
  {
    v67 = sub_18E854(v29);
    v84 = 0;
    v85 = 0xE000000000000000;
    Binding.projectedValue.getter(v7);
    KeyPath = swift_getKeyPath(&unk_262FE0);
    Binding.subscript.getter(KeyPath, v7);
    swift_release(KeyPath);
    v39 = sub_5E09C((uint64_t)v12, &qword_327968);
    v66 = (uint64_t)&v66;
    __chkstk_darwin(v39);
    v40 = type metadata accessor for Date(0);
    v41 = sub_5C154(&qword_327C38);
    v42 = sub_648E0(&qword_31F130, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v43 = sub_192F3C(&qword_327C40, &qword_327C38);
    v44 = sub_668F8();
    v45 = Picker<>.init<A>(_:selection:content:)(&v84, v9, sub_192F34, &v66 - 4, v40, v41, &type metadata for String, v42, v43, v44);
    v46 = static Font.title2.getter(v45);
    v47 = swift_getKeyPath(&unk_263008);
    v49 = v68;
    v48 = v69;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v17, v15, v69);
    v50 = v76;
    v51 = (uint64_t *)&v17[*(int *)(v76 + 36)];
    *v51 = v47;
    v51[1] = v46;
    v52 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v15, v48);
    v53 = v73;
    WheelPickerStyle.init()(v52);
    v54 = sub_192E90();
    v55 = v78;
    View.pickerStyle<A>(_:)(v53, v50, v78, v54, &protocol witness table for WheelPickerStyle);
    (*(void (**)(char *, unint64_t))(v75 + 8))(v53, v55);
    sub_5E09C((uint64_t)v17, &qword_327C00);
    v84 = v50;
    v85 = v55;
    v86 = v54;
    v87 = &protocol witness table for WheelPickerStyle;
    v56 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
    v57 = v70;
    v58 = v77;
    View.labelsHidden()(v77, v56);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v58);
    v59 = v74;
    v60 = v72;
    v61 = v57;
    v62 = v79;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v72, v61, v79);
    v63 = v81;
    (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v81, v60, v62);
    swift_storeEnumTagMultiPayload(v63, v80, 0);
    v84 = v58;
    v85 = v56;
    v64 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
    v65 = sub_67060(&qword_327C30, &qword_327BE8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v63, v62, v83, v64, v65);

    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v60, v62);
  }
}

uint64_t sub_18F624@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v3 = type metadata accessor for TimeZone(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - v8;
  v11 = static TimeZone.current.getter(v10);
  static TimeZone.current.getter(v11);
  sub_21D778((uint64_t)v9, (uint64_t)v6, a1);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

uint64_t sub_18F6E8(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v5 = type metadata accessor for TimeZone(0, a3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a1, v12, v14);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
  v18 = v17(a2, v12);
  v19 = static TimeZone.current.getter(v18);
  static TimeZone.current.getter(v19);
  sub_21D778((uint64_t)v11, (uint64_t)v8, a2);
  v17((uint64_t)v16, v12);
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v20)(v11, v5);
}

uint64_t sub_18F828(__n128 a1, uint64_t a2, void *a3)
{
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;

  v11 = sub_18EA78(a1);
  KeyPath = swift_getKeyPath(&unk_263040);
  v5 = swift_allocObject(&unk_2F0978, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  v6 = a3;
  v7 = sub_5C154(&qword_327C48);
  v8 = sub_67060(&qword_327C50, &qword_327C48, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = sub_648E0(&qword_31F130, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return ForEach<>.init(_:id:content:)(&v11, KeyPath, sub_192FC0, v5, v7, &type metadata for Text, v8, v9, &protocol witness table for Text);
}

uint64_t sub_18F924@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD v14[2];

  isa = Date._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(a1, "stringFromDate:", isa);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v14[0] = v6;
  v14[1] = v8;
  v9 = sub_668F8();
  result = Text.init<A>(_:)(v14, &type metadata for String, v9);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v12 & 1;
  *(_QWORD *)(a2 + 24) = v13;
  return result;
}

uint64_t sub_18F9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t OpaqueTypeConformance2;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  __n128 v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  void (*v120)(char *, uint64_t);
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;

  v135 = a2;
  v129 = type metadata accessor for WheelDatePickerStyle(0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v125 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_5C154(&qword_327C60);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_327C68);
  v157 = *(_QWORD *)(v5 - 8);
  v158 = v5;
  __chkstk_darwin(v5);
  v126 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_327C70);
  __chkstk_darwin(v7);
  v134 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v150 = (char *)&v118 - v11;
  v148 = type metadata accessor for CompactDatePickerStyle(0, v10);
  v147 = *(_QWORD *)(v148 - 8);
  v12 = __chkstk_darwin(v148);
  v146 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DatePickerComponents(0, v12);
  __chkstk_darwin(v14);
  v156 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_327C78);
  __chkstk_darwin(v16);
  v18 = (char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v118 - v20;
  v22 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v118 - v26;
  v151 = sub_5C154(&qword_327C80);
  __chkstk_darwin(v151);
  v29 = (char *)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v152 = (uint64_t)&v118 - v31;
  v32 = sub_5C154(&qword_327968);
  __chkstk_darwin(v32);
  v34 = (char *)&v118 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_5C154(&qword_327C88);
  v138 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v153 = (char *)&v118 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_5C154(&qword_327C90);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v137 = (char *)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_5C154(&qword_327C98);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v143 = (char *)&v118 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_5C154(&qword_327CA0);
  __chkstk_darwin(v142);
  v133 = (uint64_t)&v118 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v141 = (char *)&v118 - v40;
  __chkstk_darwin(v41);
  v155 = (uint64_t)&v118 - v42;
  v163 = 0;
  v164 = 0xE000000000000000;
  v161 = v34;
  v132 = v32;
  Binding.projectedValue.getter(v32);
  v149 = a1;
  v44 = sub_18E25C((uint64_t)v27, v43);
  static Date.now.getter(v44);
  v45 = sub_648E0(&qword_327CA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v159 = v27;
  v160 = v24;
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v27, v24, v22);
  if ((result & 1) != 0)
  {
    v124 = v45;
    v47 = &v21[*(int *)(v16 + 48)];
    v48 = v136;
    v49 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
    v49(v21, v159, v22);
    v49(v47, v160, v22);
    v50 = &v18[*(int *)(v16 + 48)];
    v51 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v51(v18, v21, v22);
    v119 = v51;
    v51(v50, v47, v22);
    v49(v29, v18, v22);
    v52 = *(void (**)(char *, uint64_t))(v48 + 8);
    v52(v50, v22);
    v136 = v16;
    v53 = &v18[*(int *)(v16 + 48)];
    v123 = v21;
    v49(v18, v21, v22);
    v49(v53, v47, v22);
    v49(&v29[*(int *)(v151 + 36)], v53, v22);
    v121 = v18;
    v120 = v52;
    v52(v18, v22);
    v122 = v29;
    v54 = v152;
    v55 = sub_66F14((uint64_t)v29, v152, &qword_327C80);
    v56 = v156;
    static DatePickerComponents.date.getter(v55);
    v57 = sub_668F8();
    v58 = v153;
    v118 = v57;
    v59 = DatePicker<>.init<A>(_:selection:in:displayedComponents:)(&v163, v161, v54, v56, &type metadata for String);
    v60 = v146;
    CompactDatePickerStyle.init()(v59);
    v61 = sub_67060(&qword_327CB0, &qword_327C88, (uint64_t)&protocol conformance descriptor for DatePicker<A>);
    v62 = sub_648E0(&qword_327CB8, (uint64_t (*)(uint64_t))&type metadata accessor for CompactDatePickerStyle, (uint64_t)&protocol conformance descriptor for CompactDatePickerStyle);
    v63 = v137;
    v64 = v154;
    v65 = v148;
    View.datePickerStyle<A>(_:)(v60, v154, v148, v61, v62);
    (*(void (**)(char *, unint64_t))(v147 + 8))(v60, v65);
    v147 = *(_QWORD *)(v138 + 8);
    ((void (*)(char *, uint64_t))v147)(v58, v64);
    v163 = v64;
    v164 = v65;
    v148 = v61;
    v165 = v61;
    v166 = v62;
    v66 = 1;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v163, &opaque type descriptor for <<opaque return type of View.datePickerStyle<A>(_:)>>, 1);
    v68 = v143;
    v69 = v140;
    View.labelsHidden()(v140, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v63, v69);
    v70 = v149 + *(int *)(type metadata accessor for FinishedDateWheel(0) + 24);
    v71 = *(_QWORD *)(v70 + 8);
    v72 = *(_BYTE *)(v70 + 16);
    v163 = *(_QWORD *)v70;
    v164 = v71;
    LOBYTE(v165) = v72;
    v73 = sub_5C154(&qword_3249B8);
    Binding.wrappedValue.getter(v73, v74);
    if (v162)
      v75 = 1.0;
    else
      v75 = 0.0;
    v76 = v144;
    v77 = (uint64_t)v141;
    v78 = v145;
    (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v68, v145);
    *(double *)(v77 + *(int *)(v142 + 36)) = v75;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v68, v78);
    v79 = v155;
    sub_66F14(v77, v155, &qword_327CA0);
    v80 = *(_QWORD *)(v70 + 8);
    v81 = *(_BYTE *)(v70 + 16);
    v163 = *(_QWORD *)v70;
    v164 = v80;
    LOBYTE(v165) = v81;
    Binding.wrappedValue.getter(v73, v82);
    v83 = (uint64_t)v150;
    v84 = v157;
    v85 = v158;
    if ((v162 & 1) != 0)
      goto LABEL_8;
    v163 = 0;
    v164 = 0xE000000000000000;
    Binding.projectedValue.getter(v132);
    v86 = (uint64_t)v159;
    v88 = sub_18E25C((uint64_t)v159, v87);
    v89 = v160;
    static Date.now.getter(v88);
    result = dispatch thunk of static Comparable.<= infix(_:_:)(v86, v89, v22);
    if ((result & 1) != 0)
    {
      v90 = v136;
      v91 = v123;
      v92 = &v123[*(int *)(v136 + 48)];
      v49(v123, v159, v22);
      v49(v92, v160, v22);
      v93 = v121;
      v94 = &v121[*(int *)(v90 + 48)];
      v95 = v119;
      v119(v121, v91, v22);
      v95(v94, v92, v22);
      v96 = (uint64_t)v122;
      v49(v122, v93, v22);
      v97 = v120;
      v120(v94, v22);
      v98 = &v93[*(int *)(v90 + 48)];
      v49(v93, v91, v22);
      v49(v98, v92, v22);
      v49((char *)(v96 + *(int *)(v151 + 36)), v98, v22);
      v97(v93, v22);
      v85 = v158;
      v99 = v152;
      v100 = sub_66F14(v96, v152, &qword_327C80);
      v101 = v156;
      static DatePickerComponents.date.getter(v100);
      v102 = v153;
      v103 = DatePicker<>.init<A>(_:selection:in:displayedComponents:)(&v163, v161, v99, v101, &type metadata for String);
      v104 = v125;
      WheelDatePickerStyle.init()(v103);
      v105 = sub_648E0(&qword_327CC0, (uint64_t (*)(uint64_t))&type metadata accessor for WheelDatePickerStyle, (uint64_t)&protocol conformance descriptor for WheelDatePickerStyle);
      v106 = v128;
      v107 = v154;
      v108 = v129;
      v109 = v148;
      View.datePickerStyle<A>(_:)(v104, v154, v129, v148, v105);
      (*(void (**)(char *, unint64_t))(v127 + 8))(v104, v108);
      ((void (*)(char *, uint64_t))v147)(v102, v107);
      v163 = v107;
      v164 = v108;
      v165 = v109;
      v166 = v105;
      v110 = swift_getOpaqueTypeConformance2(&v163, &opaque type descriptor for <<opaque return type of View.datePickerStyle<A>(_:)>>, 1);
      v111 = v126;
      v112 = v131;
      View.labelsHidden()(v131, v110);
      v113 = v112;
      v79 = v155;
      (*(void (**)(char *, uint64_t))(v130 + 8))(v106, v113);
      v84 = v157;
      (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v83, v111, v85);
      v66 = 0;
LABEL_8:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v83, v66, 1, v85);
      v114 = v133;
      sub_5E1A4(v79, v133, &qword_327CA0);
      v115 = v134;
      sub_5E1A4(v83, v134, &qword_327C70);
      v116 = v135;
      sub_5E1A4(v114, v135, &qword_327CA0);
      v117 = sub_5C154(&qword_327CC8);
      sub_5E1A4(v115, v116 + *(int *)(v117 + 48), &qword_327C70);
      sub_5E09C(v83, &qword_327C70);
      sub_5E09C(v79, &qword_327CA0);
      sub_5E09C(v115, &qword_327C70);
      return sub_5E09C(v114, &qword_327CA0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1905C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = a5(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, __n128))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return a6(v11);
}

uint64_t sub_190648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(char *, _QWORD, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char v101[16];
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;

  v100 = a4;
  v6 = a3 & 1;
  v7 = sub_5C154(&qword_323A68);
  __chkstk_darwin(v7);
  v99 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v98 = (char *)&v73 - v10;
  v11 = type metadata accessor for LocalizerRequest(0);
  v96 = *(_QWORD *)(v11 - 8);
  v97 = v11;
  __chkstk_darwin(v11);
  v93 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SymbolImage.Kind(0);
  v91 = *(_QWORD *)(v13 - 8);
  v92 = v13;
  __chkstk_darwin(v13);
  v90 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for AccessibilityChildBehavior(0);
  v86 = *(_QWORD *)(v87 - 8);
  v15 = __chkstk_darwin(v87);
  v82 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PlainButtonStyle(0, v15);
  v79 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5C154(&qword_327B40);
  v77 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_5C154(&qword_327B48);
  v81 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_5C154(&qword_327B50);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v76 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_5C154(&qword_327B58);
  v89 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v80 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5C154(&qword_327B60);
  v28 = *(_QWORD *)(v27 - 8);
  v94 = v27;
  v95 = v28;
  __chkstk_darwin(v27);
  v84 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = a1;
  v103 = a2;
  v104 = v6;
  v75 = sub_5C154(&qword_327B68);
  v74 = sub_5C154(&qword_327B70);
  v31 = type metadata accessor for CircularIconView(255, v30);
  v32 = sub_648E0(&qword_327B78, (uint64_t (*)(uint64_t))&type metadata accessor for CircularIconView, (uint64_t)&protocol conformance descriptor for CircularIconView);
  v105 = v31;
  v106 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.circularIcon(size:)>>, 1);
  v34 = sub_667D0(&qword_327B80);
  v35 = type metadata accessor for InlinePickerStyle(255);
  v36 = sub_667D0(&qword_327B88);
  v37 = sub_67060(&qword_327B90, &qword_327B88, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
  v105 = v36;
  v106 = v37;
  v38 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
  v105 = v34;
  v106 = v35;
  v107 = v38;
  v108 = &protocol witness table for InlinePickerStyle;
  v39 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v40 = Menu.init(content:label:)(sub_192E40, v101, sub_191164, 0, v75, v74, OpaqueTypeConformance2, v39);
  PlainButtonStyle.init()(v40);
  v41 = sub_67060(&qword_327B98, &qword_327B40, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v42 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  View.buttonStyle<A>(_:)(v19, v20, v17, v41, v42);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v19, v17);
  v43 = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v22, v20);
  v44 = v82;
  static AccessibilityChildBehavior.combine.getter(v43);
  v105 = v20;
  v106 = v17;
  v107 = v41;
  v108 = (void *)v42;
  v45 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v46 = v76;
  v47 = v78;
  View.accessibilityElement(children:)(v44, v78, v45);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v44, v87);
  v48 = v47;
  (*(void (**)(char *, uint64_t))(v81 + 8))(v24, v47);
  v50 = v90;
  v49 = v91;
  v51 = v92;
  v52 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v91 + 104))(v90, enum case for SymbolImage.Kind.ellipsis(_:), v92);
  v53 = v93;
  SymbolImage.Kind.accessibilityLocalizable.getter(v52);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  v105 = v48;
  v106 = v45;
  v54 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v55 = v80;
  v56 = v83;
  View.accessibilityLabel(_:)(v53, v83, v54);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v53, v97);
  v57 = v56;
  (*(void (**)(char *, uint64_t))(v85 + 8))(v46, v56);
  v58 = sub_5C154(&qword_327BA8);
  v105 = v57;
  v106 = v54;
  v59 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.accessibilityLabel(_:)>>, 1);
  v60 = sub_67060(&qword_327BB0, &qword_327BA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v61 = v84;
  v62 = v88;
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1912E4, 0, v88, v58, v59, v60);
  v63 = v62;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v55, v62);
  v64 = type metadata accessor for DynamicTypeSize(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56);
  v67 = (uint64_t)v98;
  v66(v98, 1, 1, v64);
  v68 = *(void (**)(char *, _QWORD, uint64_t))(v65 + 104);
  v69 = (uint64_t)v99;
  v68(v99, enum case for DynamicTypeSize.accessibility1(_:), v64);
  v66((char *)v69, 0, 1, v64);
  v105 = v63;
  v106 = v58;
  v107 = v59;
  v108 = (void *)v60;
  v70 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  v71 = v94;
  View.restrictedDynamicTypeSize(min:max:)(v67, v69, v94, v70);
  sub_5E09C(v69, &qword_323A68);
  sub_5E09C(v67, &qword_323A68);
  return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v61, v71);
}

uint64_t sub_190DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD v43[2];

  v39 = a4;
  v6 = a3 & 1;
  v7 = type metadata accessor for InlinePickerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  v38 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_327B88);
  v35 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_327B80);
  v36 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v33 = v18;
  v34 = v17;
  v20 = v19;
  v22 = v21;
  v40 = a1;
  v41 = a2;
  v42 = v6;
  v23 = sub_5C154(&qword_327A40);
  Binding.projectedValue.getter(v23);
  v24 = sub_5C154(&qword_327BC8);
  v25 = sub_18DA68();
  v26 = sub_192F3C(&qword_327BD0, &qword_327BC8);
  Picker<>.init(_:selection:content:)(v34, v33, v20 & 1, v22, v43, sub_191048, 0, &type metadata for FinishedDateType, v24, v25, v26);
  v27 = sub_67060(&qword_327B90, &qword_327B88, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
  View.labelsHidden()(v11, v27);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v13, v11);
  InlinePickerStyle.init()(v28);
  v43[0] = v11;
  v43[1] = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v43, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
  v30 = v37;
  View.pickerStyle<A>(_:)(v10, v14, v37, OpaqueTypeConformance2, &protocol witness table for InlinePickerStyle);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v16, v14);
}

uint64_t sub_191048()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _UNKNOWN **v4;

  v4 = &off_2E7070;
  v0 = sub_5C154(&qword_327A20);
  v1 = sub_67060(&qword_327BD8, &qword_327A20, (uint64_t)&protocol conformance descriptor for [A]);
  v2 = sub_192E4C();
  return ((uint64_t (*)(_UNKNOWN ***, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD, uint64_t, ValueMetadata *, void *, uint64_t, void *, unint64_t))ForEach<>.init(_:content:))(&v4, sub_1910F0, 0, v0, &type metadata for FinishedDateType, &type metadata for Text, v1, &protocol witness table for Text, v2);
}

uint64_t sub_1910F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_17EB50();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_191164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v0 = type metadata accessor for CircularIconView.Size(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SymbolImage.Kind(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CircularIconView(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for SymbolImage.Kind.ellipsis(_:), v4, v11);
  CircularIconView.init(kind:)(v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for CircularIconView.Size.medium(_:), v0);
  v14 = sub_648E0(&qword_327B78, (uint64_t (*)(uint64_t))&type metadata accessor for CircularIconView, (uint64_t)&protocol conformance descriptor for CircularIconView);
  View.circularIcon(size:)(v3, v9, v14);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1912E4@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;

  v42 = a1;
  v1 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for LocalizedText(0);
  v41 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v40 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v38 = (char *)&v37 - v6;
  v7 = type metadata accessor for SymbolImage.Kind(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_327BB8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v37 - v17;
  v19 = enum case for SymbolImage.Kind.ellipsis(_:);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v21 = ((uint64_t (*)(char *, _QWORD, uint64_t, __n128))v20)(v10, enum case for SymbolImage.Kind.ellipsis(_:), v7, v16);
  SymbolImage.Kind.image.getter(v21);
  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v10, v7);
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v37 = v12;
  v23(v18, v14, v11);
  v24 = v20(v10, v19, v7);
  SymbolImage.Kind.accessibilityLocalizable.getter(v24);
  v22(v10, v7);
  v25 = v38;
  LocalizedText.init(_:)(v3);
  v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v26(v14, v18, v11);
  v27 = v40;
  v28 = v41;
  v29 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v30 = v25;
  v31 = v39;
  v29(v40, v25, v39);
  v32 = v42;
  v26(v42, v14, v11);
  v33 = sub_5C154(&qword_327BC0);
  v29(&v32[*(int *)(v33 + 48)], v27, v31);
  v34 = *(void (**)(char *, uint64_t))(v28 + 8);
  v34(v30, v31);
  v35 = *(void (**)(char *, uint64_t))(v37 + 8);
  v35(v18, v11);
  v34(v27, v31);
  return ((uint64_t (*)(char *, uint64_t))v35)(v14, v11);
}

uint64_t sub_191574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_190648(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t type metadata accessor for FinishedDateWheel(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_327AC0, (uint64_t)&nominal type descriptor for FinishedDateWheel);
}

uint64_t sub_1915A0()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_1915C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1905C8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_1915E4()
{
  return EnvironmentValues.calendar.getter();
}

uint64_t sub_191604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1905C8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Calendar, (uint64_t (*)(char *))&EnvironmentValues.calendar.setter);
}

uint64_t sub_191628()
{
  return EnvironmentValues.timeZone.getter();
}

uint64_t sub_191648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1905C8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for TimeZone, (uint64_t (*)(char *))&EnvironmentValues.timeZone.setter);
}

uint64_t sub_19166C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinishedDateWheel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1916B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinishedDateWheel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1916F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FinishedDateWheel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for FinishedDateTypeMenu(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t _s11BookStoreUI20FinishedDateTypeMenuVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for FinishedDateTypeMenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t assignWithTake for FinishedDateTypeMenu(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for FinishedDateTypeMenu()
{
  return &type metadata for FinishedDateTypeMenu;
}

uint64_t *sub_191850(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    a1[1] = v8;
    swift_retain(v5);
    swift_retain(v8);
    v9 = *(int *)(sub_5C154(&qword_327968) + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[5];
    v14 = a3[6];
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    v17 = *(_QWORD *)v16;
    v18 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v18;
    v15[16] = v16[16];
    v19 = (char *)a1 + v14;
    v20 = (char *)a2 + v14;
    v21 = *(_QWORD *)v20;
    v22 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v22;
    v19[16] = v20[16];
    v23 = a3[7];
    v24 = a3[8];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    *v25 = *v26;
    v27 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v25 + 1) = v27;
    v28 = (uint64_t *)((char *)a1 + v24);
    v29 = (uint64_t *)((char *)a2 + v24);
    swift_retain(v17);
    swift_retain(v18);
    swift_retain(v21);
    swift_retain(v22);
    swift_retain(v27);
    v30 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v32 = type metadata accessor for FontConstants(0, v31);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v28, v29, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v29;
      *v28 = *v29;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v33);
    v35 = a3[9];
    v36 = (uint64_t *)((char *)a1 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    v38 = sub_5C154(&qword_3204B0);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v36, v37, v39);
      v40 = 1;
    }
    else
    {
      v41 = *v37;
      *v36 = *v37;
      swift_retain(v41);
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v36, v38, v40);
    v42 = a3[10];
    v43 = (uint64_t *)((char *)a1 + v42);
    v44 = (uint64_t *)((char *)a2 + v42);
    v45 = sub_5C154(&qword_3204A0);
    if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
    {
      v47 = type metadata accessor for Calendar(0, v46);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v43, v44, v47);
      v48 = 1;
    }
    else
    {
      v49 = *v44;
      *v43 = *v44;
      swift_retain(v49);
      v48 = 0;
    }
    swift_storeEnumTagMultiPayload(v43, v45, v48);
    v50 = a3[11];
    v51 = (uint64_t *)((char *)a1 + v50);
    v52 = (uint64_t *)((char *)a2 + v50);
    v53 = sub_5C154(&qword_3204A8);
    if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
    {
      v55 = type metadata accessor for TimeZone(0, v54);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v51, v52, v55);
      v56 = v51;
      v57 = v53;
      v58 = 1;
    }
    else
    {
      v59 = *v52;
      *v51 = *v52;
      swift_retain(v59);
      v56 = v51;
      v57 = v53;
      v58 = 0;
    }
    swift_storeEnumTagMultiPayload(v56, v57, v58);
  }
  return a1;
}

uint64_t sub_191B58(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_5C154(&qword_327968) + 32);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(*v7);
  swift_release(v7[1]);
  swift_release(*(_QWORD *)((char *)a1 + a2[7] + 8));
  v8 = (_QWORD *)((char *)a1 + a2[8]);
  v9 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v11 = type metadata accessor for FontConstants(0, v10);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  }
  else
  {
    swift_release(*v8);
  }
  v12 = (_QWORD *)((char *)a1 + a2[9]);
  v13 = sub_5C154(&qword_3204B0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (_QWORD *)((char *)a1 + a2[10]);
  v16 = sub_5C154(&qword_3204A0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v18 = type metadata accessor for Calendar(0, v17);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v15, v18);
  }
  else
  {
    swift_release(*v15);
  }
  v19 = (_QWORD *)((char *)a1 + a2[11]);
  v20 = sub_5C154(&qword_3204A8);
  if (swift_getEnumCaseMultiPayload(v19, v20) != 1)
    return swift_release(*v19);
  v22 = type metadata accessor for TimeZone(0, v21);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v19, v22);
}

uint64_t *sub_191D44(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain(v6);
  swift_retain(v7);
  v8 = *(int *)(sub_5C154(&qword_327968) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *(_QWORD *)v15;
  v17 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v17;
  v14[16] = v15[16];
  v18 = (char *)a1 + v13;
  v19 = (char *)a2 + v13;
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v21;
  v18[16] = v19[16];
  v22 = a3[7];
  v23 = a3[8];
  v24 = (char *)a1 + v22;
  v25 = (char *)a2 + v22;
  *v24 = *v25;
  v26 = *((_QWORD *)v25 + 1);
  *((_QWORD *)v24 + 1) = v26;
  v27 = (uint64_t *)((char *)a1 + v23);
  v28 = (uint64_t *)((char *)a2 + v23);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v26);
  v29 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v31 = type metadata accessor for FontConstants(0, v30);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v27, v28, v31);
    v32 = 1;
  }
  else
  {
    v33 = *v28;
    *v27 = *v28;
    swift_retain(v33);
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v32);
  v34 = a3[9];
  v35 = (uint64_t *)((char *)a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = sub_5C154(&qword_3204B0);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v35, v36, v38);
    v39 = 1;
  }
  else
  {
    v40 = *v36;
    *v35 = *v36;
    swift_retain(v40);
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v35, v37, v39);
  v41 = a3[10];
  v42 = (uint64_t *)((char *)a1 + v41);
  v43 = (uint64_t *)((char *)a2 + v41);
  v44 = sub_5C154(&qword_3204A0);
  if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
  {
    v46 = type metadata accessor for Calendar(0, v45);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v42, v43, v46);
    v47 = 1;
  }
  else
  {
    v48 = *v43;
    *v42 = *v43;
    swift_retain(v48);
    v47 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v44, v47);
  v49 = a3[11];
  v50 = (uint64_t *)((char *)a1 + v49);
  v51 = (uint64_t *)((char *)a2 + v49);
  v52 = sub_5C154(&qword_3204A8);
  if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
  {
    v54 = type metadata accessor for TimeZone(0, v53);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v50, v51, v54);
    v55 = 1;
  }
  else
  {
    v56 = *v51;
    *v50 = *v51;
    swift_retain(v56);
    v55 = 0;
  }
  swift_storeEnumTagMultiPayload(v50, v52, v55);
  return a1;
}

uint64_t *sub_192018(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(sub_5C154(&qword_327968) + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(uint64_t *)((char *)a1 + v14);
  v18 = *(uint64_t *)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *((_QWORD *)v16 + 1);
  v20 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v19;
  swift_retain(v19);
  swift_release(v20);
  v15[16] = v16[16];
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t *)((char *)a1 + v21);
  v25 = *(uint64_t *)((char *)a2 + v21);
  *(uint64_t *)((char *)a1 + v21) = v25;
  swift_retain(v25);
  swift_release(v24);
  v26 = *((_QWORD *)v23 + 1);
  v27 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = v26;
  swift_retain(v26);
  swift_release(v27);
  v22[16] = v23[16];
  v28 = a3[7];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  *v29 = *v30;
  v31 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v29 + 1) = v32;
  swift_retain(v32);
  swift_release(v31);
  if (a1 != a2)
  {
    v33 = a3[8];
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    sub_5E09C((uint64_t)a1 + v33, &qword_320290);
    v36 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v38 = type metadata accessor for FontConstants(0, v37);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v34, v35, v38);
      v39 = 1;
    }
    else
    {
      v40 = *v35;
      *v34 = *v35;
      swift_retain(v40);
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v39);
    v41 = a3[9];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    sub_5E09C((uint64_t)a1 + v41, &qword_3204B0);
    v44 = sub_5C154(&qword_3204B0);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
      v46 = 1;
    }
    else
    {
      v47 = *v43;
      *v42 = *v43;
      swift_retain(v47);
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v44, v46);
    v48 = a3[10];
    v49 = (uint64_t *)((char *)a1 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    sub_5E09C((uint64_t)a1 + v48, &qword_3204A0);
    v51 = sub_5C154(&qword_3204A0);
    if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
    {
      v53 = type metadata accessor for Calendar(0, v52);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v49, v50, v53);
      v54 = 1;
    }
    else
    {
      v55 = *v50;
      *v49 = *v50;
      swift_retain(v55);
      v54 = 0;
    }
    swift_storeEnumTagMultiPayload(v49, v51, v54);
    v56 = a3[11];
    v57 = (uint64_t *)((char *)a1 + v56);
    v58 = (uint64_t *)((char *)a2 + v56);
    sub_5E09C((uint64_t)a1 + v56, &qword_3204A8);
    v59 = sub_5C154(&qword_3204A8);
    if (swift_getEnumCaseMultiPayload(v58, v59) == 1)
    {
      v61 = type metadata accessor for TimeZone(0, v60);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v57, v58, v61);
      v62 = 1;
    }
    else
    {
      v63 = *v58;
      *v57 = *v58;
      swift_retain(v63);
      v62 = 0;
    }
    swift_storeEnumTagMultiPayload(v57, v59, v62);
  }
  return a1;
}

_QWORD *sub_192384(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_5C154(&qword_327968) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[5];
  v12 = a3[6];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  v15 = *(_OWORD *)v14;
  v13[16] = v14[16];
  *(_OWORD *)v13 = v15;
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  v18 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v23 = type metadata accessor for FontConstants(0, v22);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v19, v20, v23);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  v24 = a3[9];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = sub_5C154(&qword_3204B0);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for Locale(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v29 = a3[10];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = sub_5C154(&qword_3204A0);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    v34 = type metadata accessor for Calendar(0, v33);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v30, v31, v34);
    swift_storeEnumTagMultiPayload(v30, v32, 1);
  }
  else
  {
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  v35 = a3[11];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = sub_5C154(&qword_3204A8);
  if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
  {
    v40 = type metadata accessor for TimeZone(0, v39);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v36, v37, v40);
    swift_storeEnumTagMultiPayload(v36, v38, 1);
  }
  else
  {
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_192618(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(sub_5C154(&qword_327968) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  swift_release(v15);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_release(v16);
  v13[16] = v14[16];
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(uint64_t *)((char *)a1 + v17);
  *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
  swift_release(v20);
  v21 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  swift_release(v21);
  v18[16] = v19[16];
  v22 = a3[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  *v23 = *v24;
  v25 = *((_QWORD *)v23 + 1);
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  swift_release(v25);
  if (a1 != a2)
  {
    v26 = a3[8];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    sub_5E09C((uint64_t)a1 + v26, &qword_320290);
    v29 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v31 = type metadata accessor for FontConstants(0, v30);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v27, v28, v31);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    v32 = a3[9];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    sub_5E09C((uint64_t)a1 + v32, &qword_3204B0);
    v35 = sub_5C154(&qword_3204B0);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for Locale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload(v33, v35, 1);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    v37 = a3[10];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    sub_5E09C((uint64_t)a1 + v37, &qword_3204A0);
    v40 = sub_5C154(&qword_3204A0);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v42 = type metadata accessor for Calendar(0, v41);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v38, v39, v42);
      swift_storeEnumTagMultiPayload(v38, v40, 1);
    }
    else
    {
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    v43 = a3[11];
    v44 = (char *)a1 + v43;
    v45 = (char *)a2 + v43;
    sub_5E09C((uint64_t)a1 + v43, &qword_3204A8);
    v46 = sub_5C154(&qword_3204A8);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v48 = type metadata accessor for TimeZone(0, v47);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v44, v45, v48);
      swift_storeEnumTagMultiPayload(v44, v46, 1);
    }
    else
    {
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_19295C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_192968);
}

uint64_t sub_192968(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_5C154(&qword_327968);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_5C154(&qword_320BC8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[8];
    }
    else
    {
      v16 = sub_5C154(&qword_327A50);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[9];
      }
      else
      {
        v17 = sub_5C154(&qword_327A58);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
        {
          v8 = v17;
          v15 = a3[10];
        }
        else
        {
          v8 = sub_5C154(&qword_327A60);
          v14 = *(_QWORD *)(v8 - 8);
          v15 = a3[11];
        }
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_192A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_192AA0);
}

uint64_t sub_192AA0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_5C154(&qword_327968);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return result;
    }
    v13 = sub_5C154(&qword_320BC8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[8];
    }
    else
    {
      v16 = sub_5C154(&qword_327A50);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[9];
      }
      else
      {
        v17 = sub_5C154(&qword_327A58);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[10];
        }
        else
        {
          v10 = sub_5C154(&qword_327A60);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[11];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_192BC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[8];

  sub_8C25C(319, (unint64_t *)&unk_3279D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = &unk_262C78;
    v12[2] = &unk_262C78;
    v12[3] = &unk_262F28;
    sub_8C25C(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v12[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_8C25C(319, &qword_327AD0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v12[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_8C25C(319, &qword_327AD8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v12[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_8C25C(319, (unint64_t *)&unk_327AE0, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
          if (v11 <= 0x3F)
          {
            v12[7] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 8, v12, a1 + 16);
          }
        }
      }
    }
  }
}

unint64_t sub_192D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327B28;
  if (!qword_327B28)
  {
    v1 = sub_667D0(&qword_327A30);
    sub_192D9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327B28);
  }
  return result;
}

unint64_t sub_192D9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327B30;
  if (!qword_327B30)
  {
    v1 = sub_667D0(&qword_320490);
    sub_67060(&qword_327B38, &qword_320488, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327B30);
  }
  return result;
}

uint64_t sub_192E20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B91BC, 1);
}

uint64_t sub_192E30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9194, 1);
}

uint64_t sub_192E40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_190DD8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

unint64_t sub_192E4C()
{
  unint64_t result;

  result = qword_327BE0;
  if (!qword_327BE0)
  {
    result = swift_getWitnessTable(&unk_262CA4, &type metadata for FinishedDateType);
    atomic_store(result, (unint64_t *)&qword_327BE0);
  }
  return result;
}

unint64_t sub_192E90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327C20;
  if (!qword_327C20)
  {
    v1 = sub_667D0(&qword_327C00);
    sub_67060(&qword_327C28, &qword_327BF8, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    sub_67060(&qword_31F7D0, &qword_31F7D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327C20);
  }
  return result;
}

uint64_t sub_192F34(__n128 a1)
{
  uint64_t v1;

  return sub_18F828(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_192F3C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_667D0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_192F9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_192FC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_18F924(*(void **)(v1 + 16), a1);
}

uint64_t sub_192FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_667D0(&qword_327B60);
  v1 = sub_667D0(&qword_327B58);
  v2 = sub_667D0(&qword_327BA8);
  v3 = sub_667D0(&qword_327B50);
  v4 = sub_667D0(&qword_327B48);
  v12 = sub_667D0(&qword_327B40);
  v13 = type metadata accessor for PlainButtonStyle(255, v5);
  v14 = sub_67060(&qword_327B98, &qword_327B40, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v15 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v12 = v4;
  v13 = OpaqueTypeConformance2;
  v7 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v12 = v3;
  v13 = v7;
  v8 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.accessibilityLabel(_:)>>, 1);
  v9 = sub_67060(&qword_327BB0, &qword_327BA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v12 = v1;
  v13 = v2;
  v14 = v8;
  v15 = v9;
  v10 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  v12 = v0;
  v13 = v10;
  return swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.restrictedDynamicTypeSize(min:max:)>>, 1);
}

unint64_t sub_193158()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;

  result = qword_327CD0;
  if (!qword_327CD0)
  {
    v1 = sub_667D0(&qword_327CD8);
    v2 = sub_667D0(&qword_327C08);
    v5 = sub_667D0(&qword_327C00);
    v6 = type metadata accessor for WheelPickerStyle(255, v3);
    v7 = sub_192E90();
    v8 = &protocol witness table for WheelPickerStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
    v5 = v2;
    v6 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
    sub_67060(&qword_327C30, &qword_327BE8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_327CD0);
  }
  return result;
}

_QWORD *sub_19324C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
    v9 = (char *)v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v12 = type metadata accessor for ThumbOpinionButtonState(0, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = *(int *)(sub_5C154(&qword_327CE0) + 28);
    v14 = *(_QWORD *)(v10 + v13);
    *(_QWORD *)&v9[v13] = v14;
    v15 = a3[6];
    *((_BYTE *)v4 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v16 = (char *)v4 + v15;
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = *v17;
    v19 = v17[1];
    *(_QWORD *)v16 = *v17;
    *((_QWORD *)v16 + 1) = v19;
    v16[16] = *((_BYTE *)v17 + 16);
    v20 = a3[7];
    v21 = (_QWORD *)((char *)v4 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    swift_retain(v14);
    swift_retain(v18);
    swift_retain(v19);
    v23 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = v21;
      v26 = v23;
      v27 = 1;
    }
    else
    {
      v29 = *v22;
      *v21 = *v22;
      swift_retain(v29);
      v25 = v21;
      v26 = v23;
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v26, v27);
  }
  return v4;
}

uint64_t type metadata accessor for MarkAsFinishedViewModel(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_327DD8, (uint64_t)&nominal type descriptor for MarkAsFinishedViewModel);
}

uint64_t sub_1933E4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (char *)a1 + *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
  v6 = type metadata accessor for ThumbOpinionButtonState(0, v5);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  v7 = sub_5C154(&qword_327CE0);
  swift_release(*(_QWORD *)&v4[*(int *)(v7 + 28)]);
  v8 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v10 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v9, v10) != 1)
    return swift_release(*v9);
  v11 = type metadata accessor for SizeConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
}

uint64_t sub_1934C0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v11 = type metadata accessor for ThumbOpinionButtonState(0, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
  v12 = *(int *)(sub_5C154(&qword_327CE0) + 28);
  v13 = *(_QWORD *)(v9 + v12);
  *(_QWORD *)(v8 + v12) = v13;
  v14 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v15 = a1 + v14;
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  *(_QWORD *)v15 = *v16;
  *(_QWORD *)(v15 + 8) = v18;
  *(_BYTE *)(v15 + 16) = *((_BYTE *)v16 + 16);
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  swift_retain(v13);
  swift_retain(v17);
  swift_retain(v18);
  v22 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
    v24 = 1;
  }
  else
  {
    v25 = *v21;
    *v20 = *v21;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v20, v22, v24);
  return a1;
}

_QWORD *sub_193608(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_65938(a1, a2);
  v6 = *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v10 = type metadata accessor for ThumbOpinionButtonState(0, v9);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v7, v8, v10);
  v11 = *(int *)(sub_5C154(&qword_327CE0) + 28);
  v12 = *(_QWORD *)&v7[v11];
  v13 = *(_QWORD *)&v8[v11];
  *(_QWORD *)&v7[v11] = v13;
  swift_retain(v13);
  swift_release(v12);
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)((char *)a1 + v14);
  v18 = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *((_QWORD *)v16 + 1);
  v20 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v19;
  swift_retain(v19);
  swift_release(v20);
  v15[16] = v16[16];
  if (a1 != a2)
  {
    v21 = a3[7];
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    sub_5E09C((uint64_t)a1 + v21, &qword_320160);
    v24 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  return a1;
}

uint64_t sub_19377C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v11 = type metadata accessor for ThumbOpinionButtonState(0, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
  v12 = sub_5C154(&qword_327CE0);
  *(_QWORD *)(v8 + *(int *)(v12 + 28)) = *(_QWORD *)(v9 + *(int *)(v12 + 28));
  v13 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v16 = a3[7];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for SizeConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1938AC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v11 = type metadata accessor for ThumbOpinionButtonState(0, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v8, v9, v11);
  v12 = *(int *)(sub_5C154(&qword_327CE0) + 28);
  v13 = *(_QWORD *)(v8 + v12);
  *(_QWORD *)(v8 + v12) = *(_QWORD *)(v9 + v12);
  swift_release(v13);
  v14 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_release(v18);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  if (a1 != a2)
  {
    v19 = a3[7];
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_5E09C(a1 + v19, &qword_320160);
    v22 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for SizeConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_193A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_193A24);
}

uint64_t sub_193A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for MarkAsFinishedViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5C154(&qword_3201B0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_193AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_193AE0);
}

uint64_t sub_193AE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for MarkAsFinishedViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_5C154(&qword_3201B0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for MarkAsFinishedView(uint64_t a1)
{
  return sub_64960(a1, qword_327D40, (uint64_t)&nominal type descriptor for MarkAsFinishedView);
}

void sub_193BA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for MarkAsFinishedViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_263078;
    v6[2] = &unk_263090;
    sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

_QWORD *sub_193C50(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    v8.n128_f64[0] = (**(double (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for ThumbOpinionButtonState(0, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = *(int *)(sub_5C154(&qword_327CE0) + 28);
    v14 = *(_QWORD *)(v11 + v13);
    *(_QWORD *)&v10[v13] = v14;
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_193D10(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for ThumbOpinionButtonState(0, v5);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  v7 = *(_QWORD *)&v4[*(int *)(sub_5C154(&qword_327CE0) + 28)];
  return swift_release(v7);
}

uint64_t sub_193D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  v7.n128_f64[0] = (**(double (***)(void))(v6 - 8))();
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ThumbOpinionButtonState(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(sub_5C154(&qword_327CE0) + 28);
  v13 = *(_QWORD *)(v10 + v12);
  *(_QWORD *)(v9 + v12) = v13;
  swift_retain(v13);
  return a1;
}

_QWORD *sub_193DFC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_65938(a1, a2);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v10 = type metadata accessor for ThumbOpinionButtonState(0, v9);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v7, v8, v10);
  v11 = *(int *)(sub_5C154(&qword_327CE0) + 28);
  v12 = *(_QWORD *)&v7[v11];
  v13 = *(_QWORD *)&v8[v11];
  *(_QWORD *)&v7[v11] = v13;
  swift_retain(v13);
  swift_release(v12);
  return a1;
}

uint64_t sub_193E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for ThumbOpinionButtonState(0, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = sub_5C154(&qword_327CE0);
  *(_QWORD *)(v7 + *(int *)(v10 + 28)) = *(_QWORD *)(v8 + *(int *)(v10 + 28));
  return a1;
}

uint64_t sub_193F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ThumbOpinionButtonState(0, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(sub_5C154(&qword_327CE0) + 28);
  v13 = *(_QWORD *)(v9 + v12);
  *(_QWORD *)(v9 + v12) = *(_QWORD *)(v10 + v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_193F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_193F9C);
}

uint64_t sub_193F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_327CE0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_19401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_194028);
}

uint64_t sub_194028(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_327CE0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1940A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  sub_8C25C(319, (unint64_t *)&unk_327DE8, (uint64_t (*)(uint64_t))&type metadata accessor for ThumbOpinionButtonState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_19412C()
{
  return SizeConstants.spacing.getter();
}

void sub_19414C(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.xxxl.getter();
}

void sub_194174(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.xxl.getter();
}

uint64_t sub_19419C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B923C, 1);
}

uint64_t sub_1941AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t ThisHeaderView;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  double *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v95[4];
  int v96;
  _QWORD *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  __int128 v123[7];

  v121 = a2;
  v4 = type metadata accessor for ButtonViewModel(0, a3);
  v5 = __chkstk_darwin(v4);
  v111 = &v95[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v118 = type metadata accessor for ButtonView(0, v5);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v115 = &v95[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v112 = sub_5C154(&qword_327E20);
  __chkstk_darwin(v112);
  v120 = &v95[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v113 = &v95[-v10];
  __chkstk_darwin(v11);
  v119 = &v95[-v12];
  v13 = sub_5C154(&qword_327E28);
  __chkstk_darwin(v13);
  v109 = (uint64_t *)&v95[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v108 = sub_5C154(&qword_327E30);
  __chkstk_darwin(v108);
  v116 = &v95[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v114 = &v95[-v17];
  v107 = sub_5C154(&qword_320388);
  v104 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = &v95[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v106 = sub_5C154(&qword_320390);
  v102 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v20 = &v95[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v103 = type metadata accessor for SizeConstants(0);
  v100 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v22 = &v95[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ThisHeaderView = type metadata accessor for IveReadThisHeaderView(0);
  __chkstk_darwin(ThisHeaderView);
  v25 = (uint64_t *)&v95[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v28 = &v95[-v27];
  v101 = sub_5C154(&qword_327E38);
  __chkstk_darwin(v101);
  v110 = &v95[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v30);
  v32 = &v95[-v31];
  __chkstk_darwin(v33);
  v122 = &v95[-v34];
  v35 = a1[3];
  v36 = a1[4];
  sub_66898(a1, v35);
  v37 = dispatch thunk of AssetInfo.assetType.getter(v35, v36);
  static AssetType.== infix(_:_:)(v37, 0);
  v38 = sub_17EB50();
  v40 = v39;
  sub_5E0D8((uint64_t)a1, (uint64_t)v123);
  v41 = (uint64_t *)((char *)v25 + *(int *)(ThisHeaderView + 24));
  *v41 = swift_getKeyPath(&unk_263168);
  v42 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v41, v42, 0);
  *v25 = v38;
  v25[1] = v40;
  sub_5DC98(v123, (uint64_t)(v25 + 2));
  v43 = (uint64_t)v28;
  v44 = sub_5E160((uint64_t)v25, (uint64_t)v28, type metadata accessor for IveReadThisHeaderView);
  v96 = static Edge.Set.bottom.getter(v44);
  v99 = (char *)a1 + *(int *)(type metadata accessor for MarkAsFinishedView(0) + 28);
  sub_76D64((uint64_t)v22);
  v45 = v103;
  ScalableSizeConstants.scaled.getter(v103, &protocol witness table for SizeConstants);
  v97 = a1;
  v100 = *(_QWORD *)(v100 + 8);
  ((void (*)(_BYTE *, uint64_t))v100)(v22, v45);
  KeyPath = swift_getKeyPath(&unk_263198);
  v47 = v105;
  v48 = v106;
  SizeConstants.Scaled.subscript.getter(KeyPath, v106, &protocol witness table for SizeConstants.Spacing);
  swift_release(KeyPath);
  v102 = *(_QWORD *)(v102 + 8);
  ((void (*)(_BYTE *, uint64_t))v102)(v20, v48);
  v49 = swift_getKeyPath(&unk_2631C8);
  v98 = sub_79620();
  v50 = v107;
  SizeConstants.Scaled.subscript.getter(v123, v49, v107, v98);
  swift_release(v49);
  v104 = *(_QWORD *)(v104 + 8);
  ((void (*)(_BYTE *, uint64_t))v104)(v47, v50);
  v51 = EdgeInsets.init(_all:)(*(double *)v123);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  sub_5E11C(v43, (uint64_t)v32, type metadata accessor for IveReadThisHeaderView);
  v58 = (double *)&v32[*(int *)(v101 + 36)];
  *(_BYTE *)v58 = v96;
  v58[1] = v51;
  *((_QWORD *)v58 + 2) = v53;
  *((_QWORD *)v58 + 3) = v55;
  *((_QWORD *)v58 + 4) = v57;
  *((_BYTE *)v58 + 40) = 0;
  sub_1956E0(v43);
  sub_66F14((uint64_t)v32, (uint64_t)v122, &qword_327E38);
  v60 = static VerticalAlignment.center.getter(v59);
  v61 = (uint64_t)v109;
  *v109 = v60;
  *(_QWORD *)(v61 + 8) = 0;
  *(_BYTE *)(v61 + 16) = 0;
  v62 = sub_5C154(&qword_327E40);
  v63 = sub_194B74((uint64_t)v97, (char *)(v61 + *(int *)(v62 + 44)));
  LOBYTE(v43) = static Edge.Set.bottom.getter(v63);
  sub_76D64((uint64_t)v22);
  ScalableSizeConstants.scaled.getter(v45, &protocol witness table for SizeConstants);
  ((void (*)(_BYTE *, uint64_t))v100)(v22, v45);
  v64 = swift_getKeyPath(&unk_263198);
  SizeConstants.Scaled.subscript.getter(v64, v48, &protocol witness table for SizeConstants.Spacing);
  swift_release(v64);
  ((void (*)(_BYTE *, uint64_t))v102)(v20, v48);
  v65 = swift_getKeyPath(&unk_2631F8);
  SizeConstants.Scaled.subscript.getter(v123, v65, v50, v98);
  swift_release(v65);
  ((void (*)(_BYTE *, uint64_t))v104)(v47, v50);
  v66 = EdgeInsets.init(_all:)(*(double *)v123);
  v68 = v67;
  v70 = v69;
  v72 = v71;
  v73 = v116;
  sub_5E1A4(v61, (uint64_t)v116, &qword_327E28);
  v74 = (double *)&v73[*(int *)(v108 + 36)];
  *(_BYTE *)v74 = v43;
  v74[1] = v66;
  *((_QWORD *)v74 + 2) = v68;
  *((_QWORD *)v74 + 3) = v70;
  *((_QWORD *)v74 + 4) = v72;
  *((_BYTE *)v74 + 40) = 0;
  sub_5E09C(v61, &qword_327E28);
  v75 = v114;
  sub_66F14((uint64_t)v73, (uint64_t)v114, &qword_327E30);
  v76 = v111;
  sub_195188((uint64_t)v111);
  v77 = v115;
  v78 = ButtonView.init(model:)(v76);
  v79 = static Alignment.center.getter(v78);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v123, 0, 1, 0, 1, 0, 1, 0x4048000000000000, 0, 0, 1, 0, 1, v79, v80);
  v81 = v117;
  v82 = (uint64_t)v113;
  v83 = v118;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 16))(v113, v77, v118);
  v84 = (_OWORD *)(v82 + *(int *)(v112 + 36));
  v85 = v123[5];
  v84[4] = v123[4];
  v84[5] = v85;
  v84[6] = v123[6];
  v86 = v123[1];
  *v84 = v123[0];
  v84[1] = v86;
  v87 = v123[3];
  v84[2] = v123[2];
  v84[3] = v87;
  (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v77, v83);
  v88 = v119;
  sub_66F14(v82, (uint64_t)v119, &qword_327E20);
  v89 = v122;
  v90 = v110;
  sub_5E1A4((uint64_t)v122, (uint64_t)v110, &qword_327E38);
  sub_5E1A4((uint64_t)v75, (uint64_t)v73, &qword_327E30);
  v91 = v120;
  sub_5E1A4((uint64_t)v88, (uint64_t)v120, &qword_327E20);
  v92 = v121;
  sub_5E1A4((uint64_t)v90, v121, &qword_327E38);
  v93 = sub_5C154(&qword_327E48);
  sub_5E1A4((uint64_t)v73, v92 + *(int *)(v93 + 48), &qword_327E30);
  sub_5E1A4((uint64_t)v91, v92 + *(int *)(v93 + 64), &qword_327E20);
  sub_5E09C((uint64_t)v88, &qword_327E20);
  sub_5E09C((uint64_t)v75, &qword_327E30);
  sub_5E09C((uint64_t)v89, &qword_327E38);
  sub_5E09C((uint64_t)v91, &qword_327E20);
  sub_5E09C((uint64_t)v73, &qword_327E30);
  return sub_5E09C((uint64_t)v90, &qword_327E38);
}

uint64_t sub_194B74@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  __n128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD v91[3];
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  _QWORD *v96;

  v89 = a2;
  v90 = type metadata accessor for MarkAsFinishedView(0);
  v3 = *(_QWORD *)(v90 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v90);
  v5 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_327E50);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for ThumbOpinionButtonViewModel(0, v9);
  __chkstk_darwin(v12);
  v85 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v74 - v16;
  v18 = type metadata accessor for ThumbOpinionButton(0, v15);
  v86 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v88 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v87 = (char *)&v74 - v21;
  __chkstk_darwin(v22);
  v82 = (char *)&v74 - v23;
  __chkstk_darwin(v24);
  v84 = (char *)&v74 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v74 - v27;
  __chkstk_darwin(v29);
  v83 = (char *)&v74 - v30;
  v31 = a1 + *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
  v79 = sub_5C154(&qword_327CE0);
  v80 = v31;
  State.projectedValue.getter(v11, v79);
  sub_5E0D8(a1, (uint64_t)v94);
  v81 = v17;
  v32.n128_f64[0] = ThumbOpinionButtonViewModel.init(state:assetInfo:isLikedButton:)(v11, v94, 1);
  v78 = *(int *)(v90 + 20);
  LODWORD(v17) = *(unsigned __int8 *)(a1 + v78);
  v90 = (uint64_t)v7;
  v33 = static ActionMetrics.notInstrumented.getter(v32);
  v77 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v4;
  v75 = v3;
  if ((_DWORD)v17 == 1)
  {
    sub_5E11C(a1, (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MarkAsFinishedView);
    v34 = *(unsigned __int8 *)(v3 + 80);
    v35 = (v34 + 16) & ~v34;
    v36 = swift_allocObject(&unk_2F0AD8, v35 + v4, v34 | 7);
    sub_5E160((uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v36 + v35, type metadata accessor for MarkAsFinishedView);
    v95 = type metadata accessor for ClosureAction(0, v37);
    v96 = &protocol witness table for ClosureAction;
    sub_668BC(v94);
    ClosureAction.init(actionMetrics:body:)(v90, sub_195748, v36);
  }
  else
  {
    v38 = static Models.FlowBackAction.Dismissal.sheetDismiss.getter(v33);
    v40 = v39;
    v95 = type metadata accessor for Models.FlowBackAction(0);
    v96 = &protocol witness table for Models.FlowBackAction;
    sub_668BC(v94);
    Models.FlowBackAction.init(actionMetrics:dismissal:)(v90, v38, v40);
  }
  v42 = v95;
  v41 = v96;
  v43 = sub_66898(v94, v95);
  v92 = v42;
  v93 = v41[1];
  v44 = sub_668BC(v91);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v44, v43, v42);
  ThumbOpinionButton.init(viewModel:nextAction:)(v81, v91);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v94);
  v45 = v86;
  v46 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
  v47 = v83;
  v46(v83, v28, v18);
  State.projectedValue.getter(v11, v79);
  sub_5E0D8(a1, (uint64_t)v94);
  v48 = v85;
  v49.n128_f64[0] = ThumbOpinionButtonViewModel.init(state:assetInfo:isLikedButton:)(v11, v94, 0);
  v50 = *(unsigned __int8 *)(a1 + v78);
  v51 = static ActionMetrics.notInstrumented.getter(v49);
  if (v50 == 1)
  {
    v52 = a1;
    v53 = v77;
    sub_5E11C(v52, v77, type metadata accessor for MarkAsFinishedView);
    v54 = *(unsigned __int8 *)(v75 + 80);
    v55 = (v54 + 16) & ~v54;
    v56 = swift_allocObject(&unk_2F0AB0, v55 + v76, v54 | 7);
    sub_5E160(v53, v56 + v55, type metadata accessor for MarkAsFinishedView);
    v95 = type metadata accessor for ClosureAction(0, v57);
    v96 = &protocol witness table for ClosureAction;
    sub_668BC(v94);
    ClosureAction.init(actionMetrics:body:)(v90, sub_195748, v56);
  }
  else
  {
    v58 = static Models.FlowBackAction.Dismissal.sheetDismiss.getter(v51);
    v60 = v59;
    v95 = type metadata accessor for Models.FlowBackAction(0);
    v96 = &protocol witness table for Models.FlowBackAction;
    sub_668BC(v94);
    Models.FlowBackAction.init(actionMetrics:dismissal:)(v90, v58, v60);
  }
  v61 = v95;
  v62 = v96;
  v63 = sub_66898(v94, v95);
  v92 = v61;
  v93 = v62[1];
  v64 = sub_668BC(v91);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v64, v63, v61);
  v65 = v82;
  ThumbOpinionButton.init(viewModel:nextAction:)(v48, v91);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v94);
  v66 = v84;
  v46(v84, v65, v18);
  v67 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v68 = v87;
  v67(v87, v47, v18);
  v69 = v88;
  v67(v88, v66, v18);
  v70 = v89;
  v67(v89, v68, v18);
  v71 = sub_5C154(&qword_327E58);
  v67(&v70[*(int *)(v71 + 48)], v69, v18);
  v72 = *(void (**)(char *, uint64_t))(v45 + 8);
  v72(v66, v18);
  v72(v47, v18);
  v72(v69, v18);
  return ((uint64_t (*)(char *, uint64_t))v72)(v68, v18);
}

uint64_t sub_195188@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  _QWORD *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;

  v74 = a1;
  v2 = type metadata accessor for MarkAsFinishedView(0);
  v56 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v57 = v3;
  v59 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v69 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ButtonViewModel.ActionKind(0);
  v71 = *(_QWORD *)(v6 - 8);
  v72 = v6;
  v7 = __chkstk_darwin(v6);
  v73 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ButtonViewModel.Content(0, v7);
  v67 = *(_QWORD *)(v9 - 8);
  v68 = v9;
  v10 = __chkstk_darwin(v9);
  v65 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for ButtonViewModel.Style(0, v10);
  v64 = *(_QWORD *)(v66 - 8);
  v12 = __chkstk_darwin(v66);
  v62 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for ButtonViewModel.Kind(0, v12);
  v61 = *(_QWORD *)(v63 - 8);
  v14 = __chkstk_darwin(v63);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ButtonViewModel.Shape(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ButtonViewModel.Size(0, v19);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(int *)(v2 + 20);
  v58 = v1;
  v60 = *(unsigned __int8 *)(v1 + v26);
  if (v60)
    v27 = (unsigned int *)&enum case for ButtonViewModel.Style.secondary(_:);
  else
    v27 = (unsigned int *)&enum case for ButtonViewModel.Style.primary(_:);
  v28 = sub_17EB50();
  v30 = v29;
  *v25 = 1;
  v31 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v23 + 104);
  v32 = v16;
  v70 = v25;
  v33 = v22;
  v34 = v21;
  v31(v25, enum case for ButtonViewModel.Size.large(_:), v33);
  v35 = v17;
  v36 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for ButtonViewModel.Shape.roundedRectangle(_:), v35);
  v37 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v16, enum case for ButtonViewModel.Kind.solid(_:), v63);
  v38 = *v27;
  v39 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 104))(v36, v38, v66);
  static LocalizerRequest.verbatim(_:)(v28);
  v40 = swift_bridgeObjectRelease(v30);
  v41.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v67 + 104))(v37, enum case for ButtonViewModel.Content.title(_:), v68, v40);
  v42 = static ActionMetrics.notInstrumented.getter(v41);
  if (v60)
  {
    v43 = v59;
    sub_5E11C(v58, v59, type metadata accessor for MarkAsFinishedView);
    v44 = *(unsigned __int8 *)(v56 + 80);
    v45 = (v44 + 16) & ~v44;
    v46 = swift_allocObject(&unk_2F0A88, v45 + v57, v44 | 7);
    sub_5E160(v43, v46 + v45, type metadata accessor for MarkAsFinishedView);
    v48 = type metadata accessor for ClosureAction(0, v47);
    v49 = v73;
    *((_QWORD *)v73 + 3) = v48;
    v49[4] = &protocol witness table for ClosureAction;
    sub_668BC(v49);
    v50.n128_f64[0] = ClosureAction.init(actionMetrics:body:)(v39, sub_195748, v46);
  }
  else
  {
    v51 = static Models.FlowBackAction.Dismissal.sheetDismiss.getter(v42);
    v53 = v52;
    v54 = type metadata accessor for Models.FlowBackAction(0);
    v49 = v73;
    *((_QWORD *)v73 + 3) = v54;
    v49[4] = &protocol witness table for Models.FlowBackAction;
    sub_668BC(v49);
    Models.FlowBackAction.init(actionMetrics:dismissal:)(v39, v51, v53);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v71 + 104))(v49, enum case for ButtonViewModel.ActionKind.actionModel(_:), v72, v50);
  return ButtonViewModel.init(size:shape:kind:style:content:isEnabled:action:)(v70, v34, v32, v36, v37, 1, v49);
}

uint64_t sub_1955DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MarkAsFinishedView(0) + 24));
  v2 = *v1;
  v3 = v1[1];
  LOBYTE(v1) = *((_BYTE *)v1 + 16);
  v7 = v2;
  v8 = v3;
  v9 = (char)v1;
  v6 = 1;
  v4 = sub_5C154(&qword_3208D8);
  return Binding.wrappedValue.setter(&v6, v4);
}

uint64_t sub_19564C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  _QWORD *v2;
  uint64_t v4;
  __n128 v5;

  *(_QWORD *)a1 = static HorizontalAlignment.center.getter(a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v4 = sub_5C154(&qword_327E18);
  return sub_1941AC(v2, a1 + *(int *)(v4 + 44), v5);
}

uint64_t sub_195698()
{
  return SizeConstants.spacing.getter();
}

void sub_1956B8(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.xxxl.getter();
}

uint64_t sub_1956E0(uint64_t a1)
{
  uint64_t ThisHeaderView;

  ThisHeaderView = type metadata accessor for IveReadThisHeaderView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(ThisHeaderView - 8) + 8))(a1, ThisHeaderView);
  return a1;
}

void sub_19571C(double *a1@<X8>)
{
  *a1 = SizeConstants.Spacing.xxl.getter();
}

uint64_t sub_195748()
{
  return sub_195874();
}

uint64_t sub_195760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for MarkAsFinishedView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v4));
  v6 = v0 + v4 + *(int *)(type metadata accessor for MarkAsFinishedViewModel(0) + 20);
  v8 = type metadata accessor for ThumbOpinionButtonState(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  v9 = sub_5C154(&qword_327CE0);
  swift_release(*(_QWORD *)(v6 + *(int *)(v9 + 28)));
  v10 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  swift_release(*v10);
  swift_release(v10[1]);
  v11 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v12 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_195874()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MarkAsFinishedView(0) - 8) + 80);
  return sub_1955DC(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_1958BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_327E60;
  if (!qword_327E60)
  {
    v1 = sub_667D0(&qword_327E68);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_327E60);
  }
  return result;
}

uint64_t sub_19590C(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

void sub_195950()
{
  sub_195A44();
}

uint64_t sub_19597C(uint64_t a1)
{
  void *v1;
  id v3;

  v3 = v1;
  return a1;
}

void sub_195994()
{
  sub_195A9C();
}

void sub_1959B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_195AC8();
}

void sub_1959EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  sub_195AF4();
}

void sub_195A28(uint64_t a1)
{

}

uint64_t type metadata accessor for AutoSizingScrollingSheetHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AutoSizingScrollingSheetHostingController);
}

void sub_195A44()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000000026EFD0, "BookStoreUI/AutoSizingScrollingSheetHostingController.swift", 59, 2, 73, 0);
  __break(1u);
}

void sub_195A9C()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.AutoSizingScrollingSheetHostingController", 53, "init(navigationBarClass:toolbarClass:)", 38, 0);
  __break(1u);
}

void sub_195AC8()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.AutoSizingScrollingSheetHostingController", 53, "init(rootViewController:)", 25, 0);
  __break(1u);
}

void sub_195AF4()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.AutoSizingScrollingSheetHostingController", 53, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

void sub_195B20(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  if (!*v1)
  {
    swift_bridgeObjectRetain(a1);
    return;
  }
  if (*v1 == 1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = a1 + 32;
      v26 = a1;
      swift_bridgeObjectRetain(a1);
      v27 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        sub_5E0D8(v3, (uint64_t)v35);
        v4 = v36;
        v5 = v37;
        sub_66898(v35, v36);
        v6 = *(_QWORD *)(v5 + 8);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6);
        v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
        v28 = &v25;
        v9 = *(_QWORD *)(v8 - 8);
        __chkstk_darwin(v8);
        v11 = (char *)&v25 - v10;
        ContentInfo.libraryData.getter(v4, v6);
        v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
          break;
        v33 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
        v34 = AssociatedConformanceWitness;
        sub_668BC(&v32);
        (*(void (**)(void))(v12 + 32))();
        LOBYTE(AssociatedConformanceWitness) = dispatch thunk of LibraryAssetInfo.isPurchased.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32);
        if ((AssociatedConformanceWitness & 1) == 0)
          goto LABEL_11;
        sub_5E0D8((uint64_t)v35, (uint64_t)&v29);
LABEL_12:
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
        if (*((_QWORD *)&v30 + 1))
        {
          sub_5DC98(&v29, (uint64_t)&v32);
          sub_5DC98(&v32, (uint64_t)&v29);
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
            v27 = sub_57168(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
          v15 = *((_QWORD *)v27 + 2);
          v14 = *((_QWORD *)v27 + 3);
          if (v15 >= v14 >> 1)
            v27 = sub_57168((char *)(v14 > 1), v15 + 1, 1, v27);
          v16 = v27;
          *((_QWORD *)v27 + 2) = v15 + 1;
          sub_5DC98(&v29, (uint64_t)&v16[40 * v15 + 32]);
        }
        else
        {
          sub_5E09C((uint64_t)&v29, &qword_320940);
        }
        v3 += 40;
        if (!--v2)
        {
          swift_bridgeObjectRelease(v26);
          return;
        }
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_11:
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
      goto LABEL_12;
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      v18 = a1 + 32;
      swift_bridgeObjectRetain(a1);
      v20 = (char *)_swiftEmptyArrayStorage;
      do
      {
        sub_5E0D8(v18, (uint64_t)v35);
        v21 = v36;
        v22 = v37;
        sub_66898(v35, v36);
        if ((AssetInfo.isFinished.getter(v21, v22) & 1) != 0)
        {
          v31 = 0;
          v29 = 0u;
          v30 = 0u;
        }
        else
        {
          sub_5E0D8((uint64_t)v35, (uint64_t)&v29);
        }
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
        if (*((_QWORD *)&v30 + 1))
        {
          sub_5DC98(&v29, (uint64_t)&v32);
          sub_5DC98(&v32, (uint64_t)&v29);
          if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
            v20 = sub_57168(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v24 = *((_QWORD *)v20 + 2);
          v23 = *((_QWORD *)v20 + 3);
          if (v24 >= v23 >> 1)
            v20 = sub_57168((char *)(v23 > 1), v24 + 1, 1, v20);
          *((_QWORD *)v20 + 2) = v24 + 1;
          sub_5DC98(&v29, (uint64_t)&v20[40 * v24 + 32]);
        }
        else
        {
          sub_5E09C((uint64_t)&v29, &qword_320940);
        }
        v18 += 40;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease(a1);
    }
  }
}

uint64_t FigaroPageConfiguration.shouldReportFigaro.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_195F1C(uint64_t a1)
{
  _BYTE *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
    return 0;
  v2 = *v1;
  if (*v1)
  {
    v28 = a1;
    v3 = a1 + 32;
    if (v2 == 1)
    {
      swift_bridgeObjectRetain(a1);
      v4 = 1;
      while (1)
      {
        sub_5E0D8(v3, (uint64_t)v35);
        v6 = v36;
        v5 = v37;
        sub_66898(v35, v36);
        v29 = v5;
        v7 = *(_QWORD *)(v5 + 8);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
        v9 = type metadata accessor for Optional(0, AssociatedTypeWitness);
        v30 = &v28;
        v10 = *(_QWORD *)(v9 - 8);
        __chkstk_darwin(v9);
        v12 = (char *)&v28 - v11;
        ContentInfo.libraryData.getter(v6, v7);
        v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          a1 = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
        }
        else
        {
          *((_QWORD *)&v33 + 1) = AssociatedTypeWitness;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v6, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
          v34 = AssociatedConformanceWitness;
          v15 = sub_668BC(&v32);
          (*(void (**)(_QWORD *))(v13 + 32))(v15);
          LOBYTE(AssociatedConformanceWitness) = dispatch thunk of LibraryAssetInfo.isPurchased.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32);
          a1 = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
          if ((AssociatedConformanceWitness & 1) != 0)
            goto LABEL_18;
        }
        if (v31 == v4)
          break;
        v3 += 40;
        if (__OFADD__(v4++, 1))
        {
          __break(1u);
          goto LABEL_12;
        }
      }
LABEL_15:
      swift_bridgeObjectRelease(v28);
      return 0;
    }
LABEL_12:
    swift_bridgeObjectRetain(a1);
    while (1)
    {
      sub_5E0D8(v3, (uint64_t)v35);
      v17 = v36;
      v18 = v37;
      sub_66898(v35, v36);
      v19 = *(_QWORD *)(v18 + 8);
      v20 = swift_getAssociatedTypeWitness(255, v19);
      v21 = type metadata accessor for Optional(0, v20);
      v22 = *(_QWORD *)(v21 - 8);
      __chkstk_darwin(v21);
      v24 = (char *)&v28 - v23;
      ContentInfo.libraryData.getter(v17, v19);
      v25 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v20) != 1)
        break;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      sub_5E09C((uint64_t)&v32, &qword_320938);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
      v3 += 40;
      if (!--v31)
        goto LABEL_15;
    }
    *((_QWORD *)&v33 + 1) = v20;
    v34 = swift_getAssociatedConformanceWitness(v18, v17, v20, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
    v27 = sub_668BC(&v32);
    (*(void (**)(_QWORD *, char *, uint64_t))(v25 + 32))(v27, v24, v20);
    sub_5E09C((uint64_t)&v32, &qword_320938);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
LABEL_18:
    swift_bridgeObjectRelease(v28);
  }
  return 1;
}

BookStoreUI::SeriesListFilterOption_optional __swiftcall SeriesListFilterOption.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (BookStoreUI::SeriesListFilterOption_optional)rawValue;
}

unint64_t sub_196290()
{
  unint64_t result;

  result = qword_327EF8;
  if (!qword_327EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesListFilterOption, &type metadata for SeriesListFilterOption);
    atomic_store(result, (unint64_t *)&qword_327EF8);
  }
  return result;
}

BookStoreUI::SeriesListFilterOption_optional sub_1962D4(Swift::Int *a1)
{
  return SeriesListFilterOption.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for SeriesListFilterOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_196328 + 4 * byte_263295[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19635C + 4 * byte_263290[v4]))();
}

uint64_t sub_19635C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_196364(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19636CLL);
  return result;
}

uint64_t sub_196378(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x196380);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_196384(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19638C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesListFilterOption()
{
  return &type metadata for SeriesListFilterOption;
}

uint64_t sub_1963A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v11 = v10;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v14 = v12;
  if (v9 == v13 && v11 == v12)
  {
    v15 = 1;
    v14 = v11;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v13, v12, 0);
  }
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v14);

  return v15 & 1;
}

uint64_t sub_196478(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x746E65746E69;
  else
    v3 = 0x65526E4972616579;
  if (v2)
    v4 = 0xEC00000077656976;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x746E65746E69;
  else
    v5 = 0x65526E4972616579;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xEC00000077656976;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_196520(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19658C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1965E4 + 4 * byte_263374[a2]))(1684957547);
}

uint64_t sub_1965E4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1684957547 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1684957547, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

uint64_t sub_196684(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C61636974726576;
  else
    v3 = 0x746E6F7A69726F68;
  if (v2)
    v4 = 0xEA00000000006C61;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6C61636974726576;
  else
    v5 = 0x746E6F7A69726F68;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA00000000006C61;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_19672C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1953720684;
  else
    v3 = 0x676150666C656873;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1953720684;
  else
    v5 = 0x676150666C656873;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE900000000000065;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1967CC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x656372756F736572;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6D65744964656573;
    else
      v4 = 0x6575676573;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0xE500000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6D65744964656573;
      else
        v2 = 0x6575676573;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE500000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x656372756F736572;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x656372756F736572)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1968DC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7261646E6F636573;
  else
    v3 = 0x7972616D697270;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000079;
  if ((a2 & 1) != 0)
    v5 = 0x7261646E6F636573;
  else
    v5 = 0x7972616D697270;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000079;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_196984(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000010;
  v3 = 0x800000000026D820;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000016;
    else
      v5 = 0xD000000000000014;
    if (v4 == 1)
      v6 = 0x800000000026D840;
    else
      v6 = 0x800000000026D860;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000010;
  v6 = 0x800000000026D820;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000016;
    else
      v2 = 0xD000000000000014;
    if (v7 == 1)
      v3 = 0x800000000026D840;
    else
      v3 = 0x800000000026D860;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_196A80(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x656372756F736572;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E6F73616572;
    else
      v4 = 0xD000000000000014;
    if (v3 == 1)
      v5 = 0xE600000000000000;
    else
      v5 = 0x800000000026D7E0;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6E6F73616572;
      else
        v2 = 0xD000000000000014;
      if (v6 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0x800000000026D7E0;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x656372756F736572;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x656372756F736572)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_196B90(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000011;
  v3 = 0x800000000026D790;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000011;
    else
      v5 = 0x6575676573;
    if (v4 == 1)
      v6 = 0x800000000026D7B0;
    else
      v6 = 0xE500000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0xD000000000000011;
    v6 = 0x800000000026D790;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v3 = 0x800000000026D7B0;
  }
  else
  {
    v2 = 0x6575676573;
    v3 = 0xE500000000000000;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

void sub_196C84(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_196CC4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_196D34 + 4 * byte_26337C[a2]))(0x656C6269736976);
}

uint64_t sub_196D34(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C6269736976 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656C6269736976, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

uint64_t sub_196DE8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x63496D6574737973;
  else
    v3 = 1954047348;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xEA00000000006E6FLL;
  if ((a2 & 1) != 0)
    v5 = 0x63496D6574737973;
  else
    v5 = 1954047348;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006E6FLL;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_196E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v0 = ContextActionType.rawValue.getter();
  v2 = v1;
  v3 = ContextActionType.rawValue.getter();
  if (v0 == v3 && v2 == v4)
  {
    v7 = 1;
    v6 = v2;
  }
  else
  {
    v6 = v4;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_196F1C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1954047348;
  else
    v3 = 0x6974615272617473;
  if (v2)
    v4 = 0xEA0000000000676ELL;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1954047348;
  else
    v5 = 0x6974615272617473;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xEA0000000000676ELL;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_196FBC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x776F68537674;
  else
    v3 = 0x6569766F6DLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x776F68537674;
  else
    v5 = 0x6569766F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

BOOL Shelf.insetsPageMargin.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    sub_830B0(v0, (uint64_t)v3);
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E6F7A69726F68, 0xEA00000000006C61, 0x6C61636974726576, 0xE800000000000000, 0);
    swift_bridgeObjectRelease(0xEA00000000006C61);
    sub_830B0(v0, (uint64_t)v3);
    if ((v4 & 1) == 0)
    {
      sub_6685C((uint64_t)v3, type metadata accessor for Shelf);
      return 1;
    }
  }
  v5 = *((_QWORD *)v3 + 3);
  sub_6685C((uint64_t)v3, type metadata accessor for Shelf);
  if (swift_conformsToProtocol2(v5, &protocol descriptor for PageMarginExempt))
    v6 = v5;
  else
    v6 = 0;
  return v6 == 0;
}

char *Shelf.cardSetData.getter()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v1 = sub_5C154(&qword_324C00);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CardInfo(0, v2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v24 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for Shelf(0);
  v12 = sub_198E30(*(_QWORD *)(v0 + *(int *)(v11 + 64)));
  if (!v12)
    return 0;
  v13 = v12[2];
  if (v13)
  {
    v23 = v12;
    v14 = (uint64_t)(v12 + 4);
    v15 = (char *)_swiftEmptyArrayStorage;
    do
    {
      sub_5E0D8(v14, (uint64_t)v25);
      v17 = v26;
      v16 = v27;
      sub_66898(v25, v26);
      dispatch thunk of CardSetPresentable.cardInfo.getter(v17, v16);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        sub_5E09C((uint64_t)v4, &qword_324C00);
      }
      else
      {
        v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v18(v10, v4, v5);
        v18(v24, v10, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          v15 = (char *)sub_57514(0, *((_QWORD *)v15 + 2) + 1, 1, (unint64_t)v15);
        v20 = *((_QWORD *)v15 + 2);
        v19 = *((_QWORD *)v15 + 3);
        if (v20 >= v19 >> 1)
          v15 = (char *)sub_57514(v19 > 1, v20 + 1, 1, (unint64_t)v15);
        *((_QWORD *)v15 + 2) = v20 + 1;
        v18(&v15[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v20], v24, v5);
      }
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    return (char *)_swiftEmptyArrayStorage;
  }
  return v15;
}

BookStoreUI::Shelf::Presentation __swiftcall Shelf.Presentation.init(orientation:)(BookStoreUI::Shelf::Presentation orientation)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)orientation.orientation;
  return orientation;
}

uint64_t Shelf.init(id:shelfGridID:presentation:itemKind:items:impressionable:impressionMetrics:location:sectionData:backgroundViewModel:headerComponentModel:footerComponentModel:emptyComponentModel:spacing:paginationInfo:paginationIntentProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v47;
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = a2;
  v47 = *a4;
  v23 = (int *)type metadata accessor for Shelf(0);
  v24 = a9 + v23[8];
  v25 = type metadata accessor for ImpressionMetrics(0);
  v26.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v27 = a9 + v23[9];
  v28 = type metadata accessor for Metrics.Location(0, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = a9 + v23[15];
  v30 = type metadata accessor for ContentUnavailableComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = a9 + v23[17];
  v32 = type metadata accessor for PaginationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  sub_197CFC(a7, a5);
  if (v19)
  {
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(a7);
    sub_5E09C(a19, &qword_324BD8);
    sub_5E09C(a18, &qword_323C08);
    sub_5E09C(a17, &qword_323BF8);
    sub_5E09C(a16, &qword_323C00);
    sub_11F4C8((_QWORD *)a15);
    sub_11F4C8((_QWORD *)a14);
    v33 = type metadata accessor for ShelfBackgroundViewModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a13, v33);
    sub_5E09C(a12, (uint64_t *)&unk_326100);
    sub_5E09C(a11, &qword_323B40);
    sub_5E09C(a10, &qword_31F480);
    sub_5E09C(a3, &qword_323D48);
    sub_5E09C(v24, &qword_31F480);
    sub_5E09C(v27, &qword_323B40);
    sub_5E09C(v29, &qword_323C00);
    return sub_5E09C(v31, &qword_323C08);
  }
  else
  {
    v45 = v31;
    v35 = v58;
    *(_QWORD *)a9 = a1;
    *(_QWORD *)(a9 + 8) = v35;
    sub_5E1A4(a3, (uint64_t)&v52, &qword_323D48);
    if (*((_QWORD *)&v53 + 1))
    {
      sub_5E09C(a3, &qword_323D48);
      v55 = v52;
      v56 = v53;
      v57 = v54;
    }
    else
    {
      v51[0] = a1;
      v36 = v58;
      v51[1] = v58;
      swift_bridgeObjectRetain_n(v58, 2);
      AnyHashable.init<A>(_:)(v51, &type metadata for String, &protocol witness table for String);
      sub_5E09C(a3, &qword_323D48);
      swift_bridgeObjectRelease(v36);
      sub_5E09C((uint64_t)&v52, &qword_323D48);
    }
    v37 = a9 + v23[10];
    v38 = v56;
    *(_OWORD *)v37 = v55;
    *(_OWORD *)(v37 + 16) = v38;
    *(_QWORD *)(v37 + 32) = v57;
    *(_BYTE *)(a9 + 16) = v47;
    *(_QWORD *)(a9 + 24) = a5;
    *(_QWORD *)(a9 + 32) = a6;
    *(_QWORD *)(a9 + v23[16]) = a7;
    *(_BYTE *)(a9 + 40) = a8 & 1;
    sub_8B3E0(a10, v24, &qword_31F480);
    sub_8B3E0(a11, v27, &qword_323B40);
    sub_66F14(a12, a9 + v23[19], (uint64_t *)&unk_326100);
    v39 = a9 + v23[12];
    v40 = type metadata accessor for ShelfBackgroundViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v39, a13, v40);
    v41 = a9 + v23[13];
    v42 = *(_OWORD *)(a14 + 16);
    *(_OWORD *)v41 = *(_OWORD *)a14;
    *(_OWORD *)(v41 + 16) = v42;
    *(_QWORD *)(v41 + 32) = *(_QWORD *)(a14 + 32);
    v43 = a9 + v23[14];
    v44 = *(_OWORD *)(a15 + 16);
    *(_OWORD *)v43 = *(_OWORD *)a15;
    *(_OWORD *)(v43 + 16) = v44;
    *(_QWORD *)(v43 + 32) = *(_QWORD *)(a15 + 32);
    sub_8B3E0(a16, v29, &qword_323C00);
    sub_66F14(a17, a9 + v23[11], &qword_323BF8);
    sub_8B3E0(a18, v45, &qword_323C08);
    return sub_66F14(a19, a9 + v23[18], &qword_324BD8);
  }
}

double Shelf.paginationIntent.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for Shelf(0);
  sub_5E1A4(v1 + *(int *)(v3 + 72), (uint64_t)v7, &qword_324BD8);
  v4 = v8;
  if (v8)
  {
    v5 = v9;
    sub_66898(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v1, v4, v5);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v7);
  }
  else
  {
    sub_5E09C((uint64_t)v7, &qword_324BD8);
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t Shelf.withMetricsIndex(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a2;
  v55 = a1;
  v2 = type metadata accessor for ImpressionMetrics(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v49 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v5);
  v48 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v48 - v12;
  v14 = type metadata accessor for ImpressionMetrics.ID(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v18);
  v50 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v48 - v21;
  v54 = v7;
  v23 = *(int *)(v7 + 32);
  v24 = v52;
  sub_5E1A4(v52 + v23, (uint64_t)&v48 - v21, &qword_31F480);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v26 = v25(v22, 1, v2);
  v51 = v3;
  if (v26 == 1)
  {
    sub_5E09C((uint64_t)v22, &qword_31F480);
    sub_830B0(v24, (uint64_t)v13);
    v27 = v55;
LABEL_6:
    sub_6685C((uint64_t)v13, type metadata accessor for Shelf);
    goto LABEL_7;
  }
  ImpressionMetrics.id.getter();
  v28 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v22, v2);
  v29 = ImpressionMetrics.ID.index.getter(v28);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_830B0(v24, (uint64_t)v13);
  v27 = v55;
  if (v29 != v55)
    goto LABEL_6;
  v30 = v48;
  sub_5E1A4((uint64_t)&v13[*(int *)(v54 + 36)], v48, &qword_323B40);
  v32 = type metadata accessor for Metrics.Location(0, v31);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32) == 1)
  {
    sub_6685C((uint64_t)v13, type metadata accessor for Shelf);
    sub_5E09C(v30, &qword_323B40);
    v27 = v55;
  }
  else
  {
    v45 = Metrics.Location.locationPosition.getter();
    v47 = v46;
    sub_6685C((uint64_t)v13, type metadata accessor for Shelf);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v30, v32);
    v27 = v55;
    if ((v47 & 1) == 0 && v45 == v55)
      return sub_830B0(v24, v53);
  }
LABEL_7:
  sub_830B0(v24, (uint64_t)v9);
  v34 = v54;
  v35 = (uint64_t)&v9[*(int *)(v54 + 32)];
  v36 = 1;
  v37 = v25((char *)v35, 1, v2);
  v39 = (uint64_t)v50;
  v38 = v51;
  if (!v37)
  {
    v40 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v49, v35, v2);
    ImpressionMetrics.withImpressionIndex(_:)(v27);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v2);
    v36 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v39, v36, 1, v2);
  sub_8B3E0(v39, v35, &qword_31F480);
  v41 = &v9[*(int *)(v34 + 36)];
  v43 = type metadata accessor for Metrics.Location(0, v42);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v41, 1, v43))
    Metrics.Location.locationPosition.setter(v27, 0);
  return sub_12A55C((uint64_t)v9, v53);
}

uint64_t sub_197CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v4 = sub_5C154(&qword_31EF38);
  v5 = _arrayConditionalCast<A, B>(_:)(a1, v4, a2);
  result = swift_bridgeObjectRelease(v5);
  if (!v5)
  {
    v7 = sub_19F008();
    v8 = swift_allocError(&type metadata for Shelf.ValidationError, v7, 0, 0);
    return swift_willThrow(v8);
  }
  return result;
}

uint64_t sub_197D7C()
{
  _QWORD *v0;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for DefaultHeaderComponentModel(0);
  v4 = sub_648E0(&qword_325DD8, type metadata accessor for DefaultHeaderComponentModel, (uint64_t)&unk_260B10);
  v0 = sub_668BC(&v2);
  sub_1463EC((uint64_t)v0);
  return sub_5DC98(&v2, (uint64_t)&unk_327F00);
}

uint64_t static Shelf.HeaderComponentModel.default.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1980F8(&qword_31E6F8, (uint64_t)&unk_327F00, (uint64_t)sub_197D7C, a1);
}

uint64_t sub_197DFC(uint64_t a1)
{
  return sub_197F78(a1, 0x8000000000273CB0, (uint64_t)&unk_327F28);
}

uint64_t static Shelf.HeaderComponentModel.none.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1980F8(&qword_31E700, (uint64_t)&unk_327F28, (uint64_t)sub_197DFC, a1);
}

uint64_t sub_197E34()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_197E4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B488();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_197E74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B488();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.HeaderComponentModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_198358(a1, &qword_327FA0, (uint64_t (*)(void))sub_19B488, (uint64_t)&type metadata for Shelf.HeaderComponentModel.CodingKeys, a2);
}

uint64_t sub_197EC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Shelf.HeaderComponentModel.init(from:)(a1, a2);
}

uint64_t sub_197EDC()
{
  _QWORD *v0;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for DefaultFooterComponentModel(0);
  v4 = sub_648E0(&qword_323230, type metadata accessor for DefaultFooterComponentModel, (uint64_t)&unk_25D008);
  v0 = sub_668BC(&v2);
  sub_D1C0C((uint64_t)v0);
  return sub_5DC98(&v2, (uint64_t)&unk_327F50);
}

uint64_t static Shelf.FooterComponentModel.default.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1980F8(&qword_31E708, (uint64_t)&unk_327F50, (uint64_t)sub_197EDC, a1);
}

uint64_t sub_197F5C(uint64_t a1)
{
  return sub_197F78(a1, 0x8000000000273C90, (uint64_t)&unk_327F78);
}

uint64_t sub_197F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v5 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v16[0] = 0xD00000000000001CLL;
  *((_QWORD *)&v16[0] + 1) = a2;
  v8 = type metadata accessor for EmptyComponentModel(0);
  v19 = v8;
  v20 = sub_648E0(&qword_320048, type metadata accessor for EmptyComponentModel, (uint64_t)&unk_25B850);
  v9 = sub_668BC(&v18);
  AnyHashable.init<A>(_:)(v16, &type metadata for String, &protocol witness table for String);
  v10 = type metadata accessor for ImpressionMetrics(0);
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  sub_8B354((uint64_t)v16, (uint64_t)&v13);
  v11 = v14;
  *(_OWORD *)(v9 + 5) = v13;
  *(_OWORD *)(v9 + 7) = v11;
  v9[9] = v15;
  sub_5E09C((uint64_t)v16, (uint64_t *)&unk_326210);
  sub_66F14((uint64_t)v7, (uint64_t)v9 + *(int *)(v8 + 24), &qword_31F480);
  return sub_5DC98(&v18, a3);
}

uint64_t static Shelf.FooterComponentModel.none.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1980F8(&qword_31E710, (uint64_t)&unk_327F78, (uint64_t)sub_197F5C, a1);
}

uint64_t sub_1980F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return sub_19B4CC(a2, a4);
}

uint64_t sub_19813C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease(0xE500000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1981C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B50C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1981F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B50C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.FooterComponentModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_5C154(&qword_327FB8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_66898(a1, v8);
  v10 = sub_19B50C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Shelf.FooterComponentModel.CodingKeys, &type metadata for Shelf.FooterComponentModel.CodingKeys, v10, v8, v9);
  v11 = sub_5C154(&qword_323F40);
  v12 = sub_67060(&qword_327FC8, &qword_323F40, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Shelf.FooterComponentModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_198358(a1, &qword_327FD0, (uint64_t (*)(void))sub_19B50C, (uint64_t)&type metadata for Shelf.FooterComponentModel.CodingKeys, a2);
}

uint64_t sub_198358@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v21 = a5;
  v9 = sub_5C154(a2);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_66898(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (!v5)
  {
    v15 = v21;
    v16 = sub_5C154(&qword_323F40);
    v17 = sub_67060(&qword_327FB0, &qword_323F40, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v16, v18, v9, v16, v17);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    v19 = v22[1];
    *(_OWORD *)v15 = v22[0];
    *(_OWORD *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 32) = v23;
  }
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
}

uint64_t sub_1984B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Shelf.FooterComponentModel.init(from:)(a1, a2);
}

BookStoreUI::Shelf::Presentation::Orientation_optional __swiftcall Shelf.Presentation.Orientation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BookStoreUI::Shelf::Presentation::Orientation_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6A38, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t Shelf.Presentation.Orientation.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61636974726576;
  else
    return 0x746E6F7A69726F68;
}

uint64_t sub_198568(char *a1, char *a2)
{
  return sub_196684(*a1, *a2);
}

Swift::Int sub_198574()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6C61636974726576;
  else
    v2 = 0x746E6F7A69726F68;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA00000000006C61;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1985F8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6C61636974726576;
  else
    v2 = 0x746E6F7A69726F68;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA00000000006C61;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_198658(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6C61636974726576;
  else
    v3 = 0x746E6F7A69726F68;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA00000000006C61;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookStoreUI::Shelf::Presentation::Orientation_optional sub_1986D8(Swift::String *a1)
{
  return Shelf.Presentation.Orientation.init(rawValue:)(*a1);
}

void sub_1986E4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746E6F7A69726F68;
  if (*v1)
    v2 = 0x6C61636974726576;
  v3 = 0xEA00000000006C61;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t type metadata accessor for Shelf(uint64_t a1)
{
  uint64_t result;

  result = qword_3281C0;
  if (!qword_3281C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Shelf);
  return result;
}

uint64_t sub_198764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_19EFC4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1987C0()
{
  return 0x7461746E6569726FLL;
}

uint64_t sub_1987E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7461746E6569726FLL && a2 == 0xEB000000006E6F69)
  {
    result = swift_bridgeObjectRelease(0xEB000000006E6F69);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEB000000006E6F69, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_19888C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B550();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1988B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B550();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.Presentation.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_5C154(&qword_327FD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v11 = sub_19B550();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Shelf.Presentation.CodingKeys, &type metadata for Shelf.Presentation.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_19B594();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Shelf.Presentation.Orientation, v13, v5, &type metadata for Shelf.Presentation.Orientation, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
}

uint64_t sub_1989F8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Shelf.Presentation.init(from:)(a1, a2);
}

void Shelf.presentation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t Shelf.itemKind.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Shelf.impressionable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Shelf.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 32), a1, &qword_31F480);
}

uint64_t Shelf.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 36), a1, &qword_323B40);
}

uint64_t Shelf.shelfGridID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Shelf(0) + 40);
  return sub_5DCB0(v3, a1);
}

uint64_t Shelf.spacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 44), a1, &qword_323BF8);
}

uint64_t Shelf.backgroundViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Shelf(0) + 48);
  v4 = type metadata accessor for ShelfBackgroundViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Shelf.headerComponentModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_19B4CC(v1 + *(int *)(v3 + 52), a1);
}

uint64_t Shelf.headerComponentModel.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Shelf(0) + 52);
  return sub_19B5D8(a1, v3);
}

Swift::Void (__swiftcall *Shelf.headerComponentModel.modify())()
{
  type metadata accessor for Shelf(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t Shelf.footerComponentModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_19B4CC(v1 + *(int *)(v3 + 56), a1);
}

uint64_t Shelf.footerComponentModel.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Shelf(0) + 56);
  return sub_19B5D8(a1, v3);
}

Swift::Void (__swiftcall *Shelf.footerComponentModel.modify())()
{
  type metadata accessor for Shelf(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t Shelf.emptyComponentModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 60), a1, &qword_323C00);
}

uint64_t Shelf.emptyComponentModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_8B3E0(a1, v1 + *(int *)(v3 + 60), &qword_323C00);
}

Swift::Void (__swiftcall *Shelf.emptyComponentModel.modify())()
{
  type metadata accessor for Shelf(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

double Shelf.items.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for Shelf(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 64))).n128_u64[0];
  return result;
}

void Shelf.items.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for Shelf(0) + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
}

Swift::Void (__swiftcall *Shelf.items.modify())()
{
  type metadata accessor for Shelf(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t Shelf.paginationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 68), a1, &qword_323C08);
}

uint64_t Shelf.paginationInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_8B3E0(a1, v1 + *(int *)(v3 + 68), &qword_323C08);
}

Swift::Void (__swiftcall *Shelf.paginationInfo.modify())()
{
  type metadata accessor for Shelf(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

_QWORD *sub_198E30(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10[2];
  uint64_t v11;
  __int128 v12[2];
  __int128 v13[2];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  sub_20C978(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 40)
    {
      sub_5E0D8(i, (uint64_t)v12);
      v5 = sub_5C154(&qword_31EF38);
      v6 = sub_5C154(&qword_3282C0);
      if (!swift_dynamicCast(v10, v12, v5, v6, 6))
        break;
      sub_5DC98(v10, (uint64_t)v13);
      sub_5DC98(v13, (uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_20C978(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_20C978(v7 > 1, v8 + 1, 1);
        v3 = v14;
      }
      v3[2] = v8 + 1;
      sub_5DC98(v12, (uint64_t)&v3[5 * v8 + 4]);
      if (!--v2)
        return v3;
    }
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    swift_release(v3);
    sub_5E09C((uint64_t)v10, &qword_3282C8);
    return 0;
  }
  return v3;
}

uint64_t Shelf.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Shelf(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 76), a1, (uint64_t *)&unk_326100);
}

uint64_t Shelf.init<A>(id:shelfGridID:presentation:items:impressionable:impressionMetrics:location:sectionData:backgroundViewModel:headerComponentModel:footerComponentModel:spacing:paginationInfo:paginationIntentProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[40];
  _BYTE v72[32];
  char v73[8];
  char v74[8];
  int v75;
  char v76;

  v70 = a8;
  v67 = a7;
  v75 = a6;
  v59 = a5;
  v62 = a2;
  v61 = a1;
  v60 = a9;
  v56 = a15;
  v64 = a14;
  v65 = a13;
  v66 = a12;
  v68 = a11;
  v69 = a10;
  v57 = a18;
  v55 = a16;
  v20 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v20);
  v54 = (uint64_t)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_323BF8);
  __chkstk_darwin(v22);
  v53 = (uint64_t)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5C154(&qword_323C00);
  __chkstk_darwin(v24);
  v52 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ShelfBackgroundViewModel(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v29;
  v30 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v30);
  v32 = (char *)&v49 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v32;
  v33 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v33);
  v35 = (char *)&v49 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v36);
  v38 = (char *)&v49 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a4) = *a4;
  v63 = a3;
  sub_5E1A4(a3, (uint64_t)v74, &qword_323D48);
  v76 = (char)a4;
  v39 = sub_5C154(&qword_31EF38);
  v40 = v59;
  v51 = _arrayForceCast<A, B>(_:)(v59, a17, v39);
  swift_bridgeObjectRelease(v40);
  sub_5E1A4(v67, (uint64_t)v38, &qword_31F480);
  sub_5E1A4(v70, (uint64_t)v35, &qword_323B40);
  sub_5E1A4(v69, (uint64_t)v32, (uint64_t *)&unk_326100);
  v58 = v27;
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v59 = v26;
  v41(v29, v68, v26);
  sub_19B4CC((uint64_t)v66, (uint64_t)v73);
  sub_19B4CC((uint64_t)v65, (uint64_t)v72);
  v42 = type metadata accessor for ContentUnavailableComponentModel(0);
  v43 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v52, 1, 1, v42);
  v44 = v53;
  sub_5E1A4(v64, v53, &qword_323BF8);
  v45 = v56;
  v46 = v54;
  sub_5E1A4(v56, v54, &qword_323C08);
  v47 = v55;
  sub_5E1A4(v55, (uint64_t)v71, &qword_324BD8);
  Shelf.init(id:shelfGridID:presentation:itemKind:items:impressionable:impressionMetrics:location:sectionData:backgroundViewModel:headerComponentModel:footerComponentModel:emptyComponentModel:spacing:paginationInfo:paginationIntentProvider:)(v61, v62, (uint64_t)v74, &v76, a17, v57, v51, v75, v60, (uint64_t)v38, (uint64_t)v35, (uint64_t)v50, (uint64_t)v49, (uint64_t)v73, (uint64_t)v72, v43, v44, v46, (uint64_t)v71);
  sub_5E09C(v47, &qword_324BD8);
  sub_5E09C(v45, &qword_323C08);
  sub_5E09C(v64, &qword_323BF8);
  sub_11F4C8(v65);
  sub_11F4C8(v66);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v68, v59);
  sub_5E09C(v69, (uint64_t *)&unk_326100);
  sub_5E09C(v70, &qword_323B40);
  sub_5E09C(v67, &qword_31F480);
  return sub_5E09C(v63, &qword_323D48);
}

uint64_t sub_199530(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_199568 + 4 * byte_263380[a1]))(0x756F72676B636162, 0xEA0000000000646ELL);
}

unint64_t sub_199568()
{
  return 0xD000000000000013;
}

uint64_t sub_19967C()
{
  return 0x61746E6573657270;
}

uint64_t sub_19969C()
{
  return 0x446E6F6974636573;
}

uint64_t sub_1996BC()
{
  return 0x697247666C656873;
}

uint64_t sub_1996DC()
{
  return 0x676E6963617073;
}

uint64_t sub_1996F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19972C + 4 * byte_263390[a1]))(0x756F72676B636162, 0xEA0000000000646ELL);
}

unint64_t sub_19972C()
{
  return 0xD000000000000013;
}

uint64_t sub_199840()
{
  return 0x61746E6573657270;
}

uint64_t sub_199860()
{
  return 0x446E6F6974636573;
}

uint64_t sub_199880()
{
  return 0x697247666C656873;
}

uint64_t sub_1998A0()
{
  return 0x676E6963617073;
}

uint64_t sub_1998B8(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 64)));
}

uint64_t sub_1998C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_199530(*a1);
  v5 = v4;
  v6 = sub_199530(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_19994C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_199530(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_1999AC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_199530(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_1999EC(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_199530(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_199A48@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_19EF7C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_199A74@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_199530(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_199A9C()
{
  unsigned __int8 *v0;

  return sub_1996F4(*v0);
}

unint64_t sub_199AA4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_19EF7C(a1);
  *a2 = result;
  return result;
}

void sub_199AC8(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_199AD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B614();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_199AFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B614();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  char *v68;
  int *v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  Swift::String v94;
  Swift::String v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v183)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  char *v208;
  uint64_t v209;
  char v210[8];
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  int v218;
  char v219;

  v180 = a2;
  v3 = sub_5C154(&qword_327FF0);
  __chkstk_darwin(v3);
  v178 = (uint64_t)&v169 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v5);
  v179 = (uint64_t)&v169 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_327FF8);
  __chkstk_darwin(v7);
  v175 = (uint64_t)&v169 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_328000);
  __chkstk_darwin(v9);
  v176 = (uint64_t)&v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for ShelfBackgroundViewModel(0);
  v201 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v177 = (char *)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_328008);
  __chkstk_darwin(v12);
  v181 = (uint64_t)&v169 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_323C00);
  __chkstk_darwin(v14);
  v174 = (uint64_t)&v169 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_328010);
  __chkstk_darwin(v16);
  v186 = (uint64_t)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v18);
  v185 = (uint64_t)&v169 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5C154(&qword_328018);
  __chkstk_darwin(v20);
  v188 = (uint64_t)&v169 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v22);
  v187 = (uint64_t)&v169 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5C154(&qword_323BF8);
  __chkstk_darwin(v24);
  v189 = (uint64_t)&v169 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v26);
  v192 = (char *)&v169 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for JSONObject(0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v190 = (char *)&v169 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_5C154(&qword_324A48);
  __chkstk_darwin(v29);
  v191 = (uint64_t)&v169 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v195 = (uint64_t)&v169 - v32;
  *(_QWORD *)&v197 = sub_5C154(&qword_328020);
  __chkstk_darwin(v197);
  v196 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v169 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v199 = sub_5C154(&qword_328028);
  v198 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v35 = (char *)&v169 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (int *)type metadata accessor for Shelf(0);
  __chkstk_darwin(v36);
  v38 = (char *)&v169 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = (uint64_t)&v38[*(int *)(v39 + 32)];
  v41 = type metadata accessor for ImpressionMetrics(0);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v205 = v40;
  v184 = v41;
  v183 = v42;
  v43.n128_f64[0] = ((double (*)(uint64_t, uint64_t, uint64_t))v42)(v40, 1, 1);
  v44 = (uint64_t)&v38[v36[9]];
  v45 = type metadata accessor for Metrics.Location(0, v43);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v204 = v44;
  v182 = v46;
  v46(v44, 1, 1, v45);
  v47 = (uint64_t)&v38[v36[15]];
  v48 = type metadata accessor for ContentUnavailableComponentModel(0);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
  v203 = v47;
  v49(v47, 1, 1, v48);
  v207 = v36;
  v208 = v38;
  v50 = (uint64_t)&v38[v36[17]];
  v51 = type metadata accessor for PaginationInfo(0);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56);
  v206 = v50;
  v52(v50, 1, 1, v51);
  v53 = a1;
  v54 = a1[3];
  v55 = v53[4];
  v56 = v53;
  sub_66898(v53, v54);
  v57 = sub_19B614();
  v200 = v35;
  v58 = v209;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Shelf.CodingKeys, &type metadata for Shelf.CodingKeys, v57, v54, v55);
  if (v58)
  {
    v209 = v58;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v56);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v69 = v207;
    v68 = v208;
    goto LABEL_4;
  }
  v59 = v197;
  v172 = v51;
  v171 = v45;
  v169 = v49;
  v170 = v48;
  v173 = v56;
  LOBYTE(v215) = 4;
  v60 = v199;
  v71 = KeyedDecodingContainer.decode(_:forKey:)(&v215, v199);
  v73 = v72;
  v68 = v208;
  *(_QWORD *)v208 = v71;
  *((_QWORD *)v68 + 1) = v72;
  LOBYTE(v215) = 14;
  swift_bridgeObjectRetain(v72);
  v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v215, v60);
  v69 = v207;
  v218 = 1;
  v76 = v75;
  if (v75)
  {
    v77 = v74;
    swift_bridgeObjectRelease(v73);
    v71 = v77;
    v73 = v76;
  }
  *(_QWORD *)&v215 = v71;
  *((_QWORD *)&v215 + 1) = v73;
  AnyHashable.init<A>(_:)(&v215, &type metadata for String, &protocol witness table for String);
  LOBYTE(v212) = 12;
  v78 = sub_19B658();
  v79 = v199;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v215, &type metadata for Shelf.Presentation, &v212, v199, &type metadata for Shelf.Presentation, v78);
  v68[16] = v215;
  LOBYTE(v215) = 7;
  v80 = KeyedDecodingContainer.decode(_:forKey:)(&v215, v79);
  v209 = 0;
  v82 = v80;
  v83 = v81;
  v84 = v173[3];
  v85 = v173[4];
  sub_66898(v173, v84);
  Decoder.componentKindTable.getter(v84, v85);
  v86 = dispatch thunk of static ComponentKindTable.table.getter();
  if (!*(_QWORD *)(v86 + 16))
    goto LABEL_30;
  swift_bridgeObjectRetain(v83);
  v87 = sub_582B4(v82, (uint64_t)v83);
  if ((v88 & 1) == 0)
  {
    swift_bridgeObjectRelease(v83);
LABEL_30:
    swift_bridgeObjectRelease(v86);
    LOBYTE(v212) = 7;
    *(_QWORD *)&v215 = 0;
    *((_QWORD *)&v215 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(*((_QWORD *)&v215 + 1));
    *(_QWORD *)&v215 = 0x6E696B206D657449;
    *((_QWORD *)&v215 + 1) = 0xEA00000000002064;
    v94._countAndFlagsBits = v82;
    v94._object = v83;
    String.append(_:)(v94);
    swift_bridgeObjectRelease(v83);
    v95._object = (void *)0x8000000000273C70;
    v95._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v95);
    v96 = v215;
    v97 = type metadata accessor for DecodingError(0);
    v98 = swift_allocError(v97, &protocol witness table for DecodingError, 0, 0);
    v99 = sub_67060(&qword_328040, &qword_328028, (uint64_t)&protocol conformance descriptor for KeyedDecodingContainer<A>);
    v100 = v200;
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)(&v212, v200, v96, *((_QWORD *)&v96 + 1), v79, v99);
    swift_bridgeObjectRelease(*((_QWORD *)&v96 + 1));
    v209 = v98;
    swift_willThrow(v101);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v100, v79);
    goto LABEL_23;
  }
  v197 = *(_OWORD *)(*(_QWORD *)(v86 + 56) + 16 * v87);
  swift_bridgeObjectRelease_n(v83, 2);
  swift_bridgeObjectRelease(v86);
  *(_OWORD *)(v68 + 24) = v197;
  LOBYTE(v215) = 8;
  v89 = sub_19B69C();
  v90 = v196;
  v91 = v200;
  v92 = v209;
  v93 = KeyedDecodingContainer.decode<A>(_:forKey:)(v196, v59, &v215, v79, v59, v89);
  if (!v92)
  {
    v102 = _CodeAnyComponentModel_Many.wrappedValue.getter(v93);
    v103 = type metadata accessor for _CodeAnyComponentModel_Many(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v103 - 8) + 8))(v90, v103);
    sub_197CFC(v102, v197);
    v209 = 0;
    v104 = v198;
    *(_QWORD *)&v68[v69[16]] = v102;
    LOBYTE(v215) = 11;
    v105 = sub_648E0(&qword_328058, (uint64_t (*)(uint64_t))&type metadata accessor for JSONObject, (uint64_t)&protocol conformance descriptor for JSONObject);
    v106 = v195;
    v107 = v194;
    v108 = v199;
    v109 = v200;
    v110 = v209;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v194, &v215, v199, v194, v105);
    v209 = v110;
    if (v110)
    {
      (*(void (**)(char *, uint64_t))(v104 + 8))(v109, v108);
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v67 = 0;
      v66 = 1;
      goto LABEL_24;
    }
    v111 = v191;
    sub_5E1A4(v106, v191, &qword_324A48);
    v112 = v193;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v111, 1, v107) == 1)
    {
      sub_5E09C(v111, &qword_324A48);
    }
    else
    {
      v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 32);
      v114 = v190;
      v115 = v113(v190, v111, v107);
      if ((JSONObject.isNull.getter(v115) & 1) == 0)
      {
        v117 = &v68[v69[18]];
        *((_QWORD *)v117 + 3) = type metadata accessor for JSShelfPaginationIntentProvider(0);
        *((_QWORD *)v117 + 4) = &protocol witness table for JSShelfPaginationIntentProvider;
        v118 = (char *)sub_668BC(v117);
        v113(v118, (uint64_t)v114, v107);
LABEL_39:
        v119 = (uint64_t)v192;
        v120 = v172;
        LOBYTE(v215) = 10;
        v121 = sub_648E0(&qword_328060, (uint64_t (*)(uint64_t))&type metadata accessor for PaginationInfo, (uint64_t)&protocol conformance descriptor for PaginationInfo);
        v122 = v120;
        v123 = v120;
        v124 = v200;
        v125 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v122, &v215, v108, v123, v121);
        v209 = v125;
        if (v125)
        {
          sub_5E09C(v195, &qword_324A48);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v124, v108);
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v66 = 1;
          v67 = 1;
          goto LABEL_24;
        }
        sub_8B3E0(v119, v206, &qword_323C08);
        LOBYTE(v215) = 15;
        v126 = v209;
        v127 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v215, v108));
        v209 = v126;
        if (v126)
        {
          sub_5E09C(v195, &qword_324A48);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v65 = 0;
LABEL_57:
          v66 = 1;
          v67 = 1;
          v69 = v207;
          v68 = v208;
          goto LABEL_24;
        }
        if ((v128 & 1) != 0)
        {
          v131 = type metadata accessor for ShelfGridSpacing(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v189, 1, 1, v131);
        }
        else
        {
          v129 = v189;
          ShelfGridSpacing.init(floatLiteral:)(*(_QWORD *)&v127, v127);
          v130 = type metadata accessor for ShelfGridSpacing(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v129, 0, 1, v130);
        }
        sub_66F14(v189, (uint64_t)&v208[v207[11]], &qword_323BF8);
        LOBYTE(v215) = 5;
        v132 = v209;
        v133 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v215, v199);
        v209 = v132;
        if (v132)
          goto LABEL_56;
        v208[40] = (v133 == 2) | v133 & 1;
        v134 = sub_5C154(&qword_321EA8);
        LOBYTE(v215) = 6;
        v135 = sub_C39DC((unint64_t *)&qword_322038, &qword_321EA8, (void (*)(void))sub_19B718, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
        v136 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v134, &v215, v199, v134, v135);
        v209 = v136;
        if (v136)
          goto LABEL_56;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 48))(v188, 1, v134) == 1)
        {
          sub_5E09C(v188, &qword_328018);
          v183(v187, 1, 1, v184);
        }
        else
        {
          v137 = v188;
          sub_5E1A4(v188, v187, &qword_31F480);
          sub_5E09C(v137, &qword_321EA8);
        }
        sub_8B3E0(v187, v205, &qword_31F480);
        v138 = sub_5C154(&qword_328068);
        LOBYTE(v215) = 9;
        v139 = sub_C39DC(&qword_328070, &qword_328068, (void (*)(void))sub_19B794, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
        v140 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v138, &v215, v199, v138, v139);
        v209 = v140;
        if (v140)
          goto LABEL_56;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 48))(v186, 1, v138) == 1)
        {
          sub_5E09C(v186, &qword_328010);
          v182(v185, 1, 1, v171);
        }
        else
        {
          v141 = v186;
          sub_5E1A4(v186, v185, &qword_323B40);
          sub_5E09C(v141, &qword_328068);
        }
        sub_8B3E0(v185, v204, &qword_323B40);
        v142 = sub_5C154(&qword_328088);
        v219 = 3;
        v143 = sub_C39DC(&qword_328090, &qword_328088, (void (*)(void))sub_19B810, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
        v144 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v142, &v219, v199, v142, v143);
        v209 = v144;
        if (v144)
        {
LABEL_56:
          sub_5E09C(v195, &qword_324A48);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v62 = 1;
          goto LABEL_57;
        }
        if (v211 == 1)
        {
          sub_5E09C((uint64_t)v210, &qword_3280B0);
          v212 = 0u;
          v213 = 0u;
          v214 = 0;
        }
        else
        {
          sub_5E1A4((uint64_t)v210, (uint64_t)&v212, &qword_3280A0);
          sub_5E09C((uint64_t)v210, &qword_328088);
          if (*((_QWORD *)&v213 + 1))
          {
            v215 = v212;
            v216 = v213;
            v217 = v214;
            goto LABEL_65;
          }
        }
        if (qword_31E6F8 != -1)
          swift_once(&qword_31E6F8, sub_197D7C);
        sub_19B4CC((uint64_t)&unk_327F00, (uint64_t)&v215);
        sub_5E09C((uint64_t)&v212, &qword_3280A0);
LABEL_65:
        v145 = &v208[v207[13]];
        v146 = v216;
        *(_OWORD *)v145 = v215;
        *((_OWORD *)v145 + 1) = v146;
        *((_QWORD *)v145 + 4) = v217;
        v147 = sub_5C154(&qword_3280B8);
        v219 = 2;
        v148 = sub_C39DC(&qword_3280C0, &qword_3280B8, (void (*)(void))sub_19B878, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
        v149 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v147, &v219, v199, v147, v148);
        v209 = v149;
        if (v149)
        {
          sub_5E09C(v195, &qword_324A48);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
          v63 = 0;
          v65 = 0;
          v62 = 1;
          v64 = 1;
          goto LABEL_57;
        }
        if (v211 == 1)
        {
          sub_5E09C((uint64_t)v210, &qword_3280E0);
          v212 = 0u;
          v213 = 0u;
          v214 = 0;
        }
        else
        {
          sub_5E1A4((uint64_t)v210, (uint64_t)&v212, &qword_3280D0);
          sub_5E09C((uint64_t)v210, &qword_3280B8);
          if (*((_QWORD *)&v213 + 1))
          {
            v215 = v212;
            v216 = v213;
            v217 = v214;
            goto LABEL_74;
          }
        }
        if (qword_31E708 != -1)
          swift_once(&qword_31E708, sub_197EDC);
        sub_19B4CC((uint64_t)&unk_327F50, (uint64_t)&v215);
        sub_5E09C((uint64_t)&v212, &qword_3280D0);
LABEL_74:
        v150 = &v208[v207[14]];
        v151 = v216;
        *(_OWORD *)v150 = v215;
        *((_OWORD *)v150 + 1) = v151;
        *((_QWORD *)v150 + 4) = v217;
        v152 = sub_5C154(&qword_3280E8);
        LOBYTE(v215) = 1;
        v153 = sub_C39DC(&qword_3280F0, &qword_3280E8, (void (*)(void))sub_19B8E0, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
        v154 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v152, &v215, v199, v152, v153);
        v209 = v154;
        if (v154)
          goto LABEL_79;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 48))(v181, 1, v152) == 1)
        {
          sub_5E09C(v181, &qword_328008);
          v169(v174, 1, 1, v170);
        }
        else
        {
          v155 = v181;
          sub_5E1A4(v181, v174, &qword_323C00);
          sub_5E09C(v155, &qword_3280E8);
        }
        sub_8B3E0(v174, v203, &qword_323C00);
        v156 = sub_5C154(&qword_328108);
        LOBYTE(v215) = 0;
        v157 = sub_C39DC(&qword_328110, &qword_328108, (void (*)(void))sub_19B95C, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
        v158 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v156, &v215, v199, v156, v157);
        v209 = v158;
        if (v158)
        {
LABEL_79:
          sub_5E09C(v195, &qword_324A48);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
          v63 = 0;
          v62 = 1;
LABEL_80:
          v64 = 1;
          v65 = 1;
          goto LABEL_57;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 48))(v175, 1, v156) == 1)
        {
          sub_5E09C(v175, &qword_327FF8);
          v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v201 + 56))(v176, 1, 1, v202);
        }
        else
        {
          v160 = v175;
          v161 = v176;
          sub_5E1A4(v175, v176, &qword_328000);
          sub_5E09C(v160, &qword_328108);
          v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v161, 1, v202);
          if ((_DWORD)v159 != 1)
          {
            v162 = *(void (**)(char *, uint64_t, uint64_t))(v201 + 32);
            v162(v177, v176, v202);
            v162(&v208[v207[12]], (uint64_t)v177, v202);
            goto LABEL_86;
          }
        }
        static ShelfBackgroundViewModel.default.getter(v159);
        sub_5E09C(v176, &qword_328000);
        (*(void (**)(char *, char *, uint64_t))(v201 + 32))(&v208[v207[12]], v177, v202);
LABEL_86:
        v163 = sub_5C154(&qword_328128);
        LOBYTE(v215) = 13;
        v164 = sub_C39DC(&qword_328130, &qword_328128, (void (*)(void))sub_19B9D8, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
        v165 = v209;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v163, &v215, v199, v163, v164);
        v209 = v165;
        if (!v165)
        {
          sub_5E09C(v195, &qword_324A48);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 48))(v178, 1, v163) == 1)
          {
            sub_5E09C(v178, &qword_327FF0);
            v166 = type metadata accessor for SectionData(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 56))(v179, 1, 1, v166);
          }
          else
          {
            v167 = v178;
            sub_5E1A4(v178, v179, (uint64_t *)&unk_326100);
            sub_5E09C(v167, &qword_328128);
          }
          v168 = (uint64_t)v208;
          sub_66F14(v179, (uint64_t)&v208[v207[19]], (uint64_t *)&unk_326100);
          sub_830B0(v168, v180);
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v173);
          return sub_6685C(v168, type metadata accessor for Shelf);
        }
        sub_5E09C(v195, &qword_324A48);
        (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
        v62 = 1;
        v63 = 1;
        goto LABEL_80;
      }
      (*(void (**)(char *, uint64_t))(v193 + 8))(v114, v107);
    }
    v116 = &v68[v69[18]];
    *((_QWORD *)v116 + 4) = 0;
    *(_OWORD *)v116 = 0u;
    *((_OWORD *)v116 + 1) = 0u;
    goto LABEL_39;
  }
  v209 = v92;
  (*(void (**)(char *, uint64_t))(v198 + 8))(v91, v79);
LABEL_23:
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
LABEL_24:
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v173);
  swift_bridgeObjectRelease(*((_QWORD *)v68 + 1));
  v61 = v218;
LABEL_4:
  sub_5E09C(v205, &qword_31F480);
  sub_5E09C(v204, &qword_323B40);
  if (v61)
  {
    sub_5DCEC((uint64_t)&v68[v69[10]]);
    if (!v62)
    {
LABEL_6:
      if (!v63)
        goto LABEL_7;
      goto LABEL_17;
    }
  }
  else if (!v62)
  {
    goto LABEL_6;
  }
  sub_5E09C((uint64_t)&v68[v69[11]], &qword_323BF8);
  if (!v63)
  {
LABEL_7:
    if (!v64)
      goto LABEL_8;
LABEL_18:
    sub_11F4C8(&v68[v69[13]]);
    if (!v65)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  (*(void (**)(char *, uint64_t))(v201 + 8))(&v68[v69[12]], v202);
  if (v64)
    goto LABEL_18;
LABEL_8:
  if (v65)
LABEL_9:
    sub_11F4C8(&v68[v69[14]]);
LABEL_10:
  sub_5E09C(v203, &qword_323C00);
  if (v66)
    swift_bridgeObjectRelease(*(_QWORD *)&v68[v69[16]]);
  result = sub_5E09C(v206, &qword_323C08);
  if (v67)
    return sub_5E09C((uint64_t)&v68[v69[18]], &qword_324BD8);
  return result;
}

uint64_t sub_19B474@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Shelf.init(from:)(a1, a2);
}

unint64_t sub_19B488()
{
  unint64_t result;

  result = qword_327FA8;
  if (!qword_327FA8)
  {
    result = swift_getWitnessTable(&unk_263C20, &type metadata for Shelf.HeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_327FA8);
  }
  return result;
}

uint64_t sub_19B4CC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_19B50C()
{
  unint64_t result;

  result = qword_327FC0;
  if (!qword_327FC0)
  {
    result = swift_getWitnessTable(&unk_263BD0, &type metadata for Shelf.FooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_327FC0);
  }
  return result;
}

unint64_t sub_19B550()
{
  unint64_t result;

  result = qword_327FE0;
  if (!qword_327FE0)
  {
    result = swift_getWitnessTable(&unk_263B80, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_327FE0);
  }
  return result;
}

unint64_t sub_19B594()
{
  unint64_t result;

  result = qword_327FE8;
  if (!qword_327FE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Presentation.Orientation, &type metadata for Shelf.Presentation.Orientation);
    atomic_store(result, (unint64_t *)&qword_327FE8);
  }
  return result;
}

uint64_t sub_19B5D8(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a2);
  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return a2;
}

unint64_t sub_19B614()
{
  unint64_t result;

  result = qword_328030;
  if (!qword_328030)
  {
    result = swift_getWitnessTable(&unk_263B30, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328030);
  }
  return result;
}

unint64_t sub_19B658()
{
  unint64_t result;

  result = qword_328038;
  if (!qword_328038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Presentation, &type metadata for Shelf.Presentation);
    atomic_store(result, (unint64_t *)&qword_328038);
  }
  return result;
}

unint64_t sub_19B69C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328048;
  if (!qword_328048)
  {
    v1 = sub_667D0(&qword_328020);
    sub_648E0(&qword_328050, (uint64_t (*)(uint64_t))&type metadata accessor for _CodeAnyComponentModel_Many, (uint64_t)&protocol conformance descriptor for _CodeAnyComponentModel_Many);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_328048);
  }
  return result;
}

unint64_t sub_19B718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322040;
  if (!qword_322040)
  {
    v1 = sub_667D0(&qword_31F480);
    sub_648E0(&qword_320BA0, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_322040);
  }
  return result;
}

unint64_t sub_19B794()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328078;
  if (!qword_328078)
  {
    v1 = sub_667D0(&qword_323B40);
    sub_648E0(&qword_328080, (uint64_t (*)(uint64_t))&type metadata accessor for Metrics.Location, (uint64_t)&protocol conformance descriptor for Metrics.Location);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_328078);
  }
  return result;
}

uint64_t sub_19B810()
{
  return sub_C39DC(&qword_328098, &qword_3280A0, (void (*)(void))sub_19B834, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_19B834()
{
  unint64_t result;

  result = qword_3280A8;
  if (!qword_3280A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.HeaderComponentModel, &type metadata for Shelf.HeaderComponentModel);
    atomic_store(result, (unint64_t *)&qword_3280A8);
  }
  return result;
}

uint64_t sub_19B878()
{
  return sub_C39DC(&qword_3280C8, &qword_3280D0, (void (*)(void))sub_19B89C, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_19B89C()
{
  unint64_t result;

  result = qword_3280D8;
  if (!qword_3280D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.FooterComponentModel, &type metadata for Shelf.FooterComponentModel);
    atomic_store(result, (unint64_t *)&qword_3280D8);
  }
  return result;
}

unint64_t sub_19B8E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3280F8;
  if (!qword_3280F8)
  {
    v1 = sub_667D0(&qword_323C00);
    sub_648E0(&qword_328100, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_3280F8);
  }
  return result;
}

unint64_t sub_19B95C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328118;
  if (!qword_328118)
  {
    v1 = sub_667D0(&qword_328000);
    sub_648E0(&qword_328120, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfBackgroundViewModel, (uint64_t)&protocol conformance descriptor for ShelfBackgroundViewModel);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_328118);
  }
  return result;
}

unint64_t sub_19B9D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328138;
  if (!qword_328138)
  {
    v1 = sub_667D0((uint64_t *)&unk_326100);
    sub_648E0(&qword_328140, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_328138);
  }
  return result;
}

unint64_t sub_19BA58()
{
  unint64_t result;

  result = qword_328148;
  if (!qword_328148)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Presentation.Orientation, &type metadata for Shelf.Presentation.Orientation);
    atomic_store(result, (unint64_t *)&qword_328148);
  }
  return result;
}

unint64_t sub_19BAA0()
{
  unint64_t result;

  result = qword_328150;
  if (!qword_328150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.ValidationError, &type metadata for Shelf.ValidationError);
    atomic_store(result, (unint64_t *)&qword_328150);
  }
  return result;
}

uint64_t sub_19BAE4()
{
  return sub_648E0(&qword_328158, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
}

uint64_t sub_19BB10()
{
  return sub_648E0(&qword_328160, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
}

_QWORD *initializeBufferWithCopyOfBuffer for Shelf(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  __n128 v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t, __n128);
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  unsigned int (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v8 = a3[8];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v11 = type metadata accessor for ImpressionMetrics(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_5C154(&qword_31F480);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      v16.n128_f64[0] = (*(double (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v18 = a3[9];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Metrics.Location(0, v16);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_5C154(&qword_323B40);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = a3[10];
    v25 = *(_OWORD *)((char *)a2 + v24 + 24);
    *(_OWORD *)((char *)v4 + v24 + 24) = v25;
    (**(void (***)(void))(v25 - 8))();
    v26 = a3[11];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for ShelfGridSpacing(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_5C154(&qword_323BF8);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = a3[12];
    v33 = (char *)v4 + v32;
    v34 = (uint64_t)a2 + v32;
    v35 = type metadata accessor for ShelfBackgroundViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[13];
    v37 = *(_OWORD *)((char *)a2 + v36 + 24);
    *(_OWORD *)((char *)v4 + v36 + 24) = v37;
    (**(void (***)(void))(v37 - 8))();
    v38 = a3[14];
    v39 = *(_OWORD *)((char *)a2 + v38 + 24);
    *(_OWORD *)((char *)v4 + v38 + 24) = v39;
    (**(void (***)(void))(v39 - 8))();
    v40 = a3[15];
    v41 = (_QWORD *)((char *)v4 + v40);
    v42 = (uint64_t *)((char *)a2 + v40);
    v43 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
    v44 = *((_QWORD *)v43 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
    {
      v45 = sub_5C154(&qword_323C00);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v96 = v44;
      v97 = (unsigned int (*)(char *, uint64_t, uint64_t))v13;
      v98 = v12;
      v99 = v11;
      v46 = v42[1];
      *v41 = *v42;
      v41[1] = v46;
      v47 = v43[5];
      v93 = (char *)v42 + v47;
      v94 = (char *)v41 + v47;
      v48 = type metadata accessor for LocalizerRequest(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v51 = swift_bridgeObjectRetain(v46);
      v52 = v94;
      v95 = v50;
      ((void (*)(char *, char *, uint64_t, __n128))v50)(v52, v93, v48, v51);
      v53 = v43[6];
      v54 = (char *)v41 + v53;
      v55 = (char *)v42 + v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))((char *)v42 + v53, 1, v48))
      {
        v56 = sub_5C154(&qword_3217B8);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        v95(v54, v55, v48);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v54, 0, 1, v48);
      }
      v57 = v43[7];
      v58 = (char *)v41 + v57;
      v59 = (char *)v42 + v57;
      *(_OWORD *)v58 = *(_OWORD *)v59;
      v58[16] = v59[16];
      *((_BYTE *)v41 + v43[8]) = *((_BYTE *)v42 + v43[8]);
      v60 = v43[9];
      v61 = (char *)v41 + v60;
      v62 = (char *)v42 + v60;
      v63 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
      v64 = v43[10];
      v65 = *(_OWORD *)((char *)v42 + v64 + 24);
      *(_OWORD *)((char *)v41 + v64 + 24) = v65;
      (**(void (***)(void))(v65 - 8))();
      v66 = v43[11];
      v67 = (char *)v41 + v66;
      v68 = (char *)v42 + v66;
      if (v97(v68, 1, v99))
      {
        v69 = sub_5C154(&qword_31F480);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v67, v68, v99);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v67, 0, 1, v99);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v96 + 56))(v41, 0, 1, v43);
    }
    v70 = a3[16];
    v71 = a3[17];
    v72 = *(uint64_t *)((char *)a2 + v70);
    *(_QWORD *)((char *)v4 + v70) = v72;
    v73 = (char *)v4 + v71;
    v74 = (char *)a2 + v71;
    v75 = type metadata accessor for PaginationInfo(0);
    v76 = *(_QWORD *)(v75 - 8);
    v77 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v76 + 48);
    v78 = swift_bridgeObjectRetain(v72);
    if (v77(v74, 1, v75, v78))
    {
      v79 = sub_5C154(&qword_323C08);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
    }
    v80 = a3[18];
    v81 = (char *)v4 + v80;
    v82 = (uint64_t)a2 + v80;
    v83 = *(uint64_t *)((char *)a2 + v80 + 24);
    if (v83)
    {
      v84 = *(_QWORD *)(v82 + 32);
      *((_QWORD *)v81 + 3) = v83;
      *((_QWORD *)v81 + 4) = v84;
      (**(void (***)(void))(v83 - 8))();
    }
    else
    {
      v85 = *(_OWORD *)(v82 + 16);
      *(_OWORD *)v81 = *(_OWORD *)v82;
      *((_OWORD *)v81 + 1) = v85;
      *((_QWORD *)v81 + 4) = *(_QWORD *)(v82 + 32);
    }
    v86 = a3[19];
    v87 = (char *)v4 + v86;
    v88 = (char *)a2 + v86;
    v89 = type metadata accessor for SectionData(0);
    v90 = *(_QWORD *)(v89 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
    {
      v91 = sub_5C154((uint64_t *)&unk_326100);
      memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v87, v88, v89);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
    }
  }
  return v4;
}

uint64_t destroy for Shelf(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[8];
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    v8.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v9 = a1 + a2[9];
  v10 = type metadata accessor for Metrics.Location(0, v8);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + a2[10]));
  v12 = a1 + a2[11];
  v13 = type metadata accessor for ShelfGridSpacing(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  v15 = a1 + a2[12];
  v16 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + a2[13]));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + a2[14]));
  v17 = a1 + a2[15];
  v18 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v18 - 1) + 48))(v17, 1, v18))
  {
    v35 = v7;
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));
    v19 = v17 + v18[5];
    v20 = type metadata accessor for LocalizerRequest(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v22(v19, v20);
    v23 = v17 + v18[6];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v20))
      v22(v23, v20);
    v24 = v17 + v18[9];
    v25 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v17 + v18[10]));
    v26 = v17 + v18[11];
    if (!v35(v26, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v26, v5);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16]));
  v27 = a1 + a2[17];
  v28 = type metadata accessor for PaginationInfo(0);
  v29 = *(_QWORD *)(v28 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  v30 = (_QWORD *)(a1 + a2[18]);
  if (v30[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v30);
  v31 = a1 + a2[19];
  v32 = type metadata accessor for SectionData(0);
  v33 = *(_QWORD *)(v32 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  return result;
}

uint64_t initializeWithCopy for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  __n128 v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(const void *, uint64_t, uint64_t, __n128);
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  void *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  char *v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  unsigned int (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_5C154(&qword_31F480);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    v15.n128_f64[0] = (*(double (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v16 = a3[9];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for Metrics.Location(0, v15);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_5C154(&qword_323B40);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = a3[10];
  v23 = *(_OWORD *)(a2 + v22 + 24);
  *(_OWORD *)(a1 + v22 + 24) = v23;
  (**(void (***)(void))(v23 - 8))();
  v24 = a3[11];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = type metadata accessor for ShelfGridSpacing(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_5C154(&qword_323BF8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  v34 = a3[13];
  v35 = *(_OWORD *)(a2 + v34 + 24);
  *(_OWORD *)(a1 + v34 + 24) = v35;
  (**(void (***)(void))(v35 - 8))();
  v36 = a3[14];
  v37 = *(_OWORD *)(a2 + v36 + 24);
  *(_OWORD *)(a1 + v36 + 24) = v37;
  (**(void (***)(void))(v37 - 8))();
  v38 = a3[15];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  v41 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v42 = *((_QWORD *)v41 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
  {
    v43 = sub_5C154(&qword_323C00);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v94 = v42;
    v95 = (unsigned int (*)(char *, uint64_t, uint64_t))v12;
    v96 = v11;
    v97 = v10;
    v44 = v40[1];
    *v39 = *v40;
    v39[1] = v44;
    v45 = v41[5];
    v91 = (char *)v40 + v45;
    v92 = (char *)v39 + v45;
    v46 = type metadata accessor for LocalizerRequest(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v49 = swift_bridgeObjectRetain(v44);
    v50 = v92;
    v93 = v48;
    ((void (*)(char *, char *, uint64_t, __n128))v48)(v50, v91, v46, v49);
    v51 = v41[6];
    v52 = (char *)v39 + v51;
    v53 = (char *)v40 + v51;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))((char *)v40 + v51, 1, v46))
    {
      v54 = sub_5C154(&qword_3217B8);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      v93(v52, v53, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v52, 0, 1, v46);
    }
    v55 = v41[7];
    v56 = (char *)v39 + v55;
    v57 = (char *)v40 + v55;
    *(_OWORD *)v56 = *(_OWORD *)v57;
    v56[16] = v57[16];
    *((_BYTE *)v39 + v41[8]) = *((_BYTE *)v40 + v41[8]);
    v58 = v41[9];
    v59 = (char *)v39 + v58;
    v60 = (char *)v40 + v58;
    v61 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
    v62 = v41[10];
    v63 = *(_OWORD *)((char *)v40 + v62 + 24);
    *(_OWORD *)((char *)v39 + v62 + 24) = v63;
    (**(void (***)(void))(v63 - 8))();
    v64 = v41[11];
    v65 = (char *)v39 + v64;
    v66 = (char *)v40 + v64;
    if (v95(v66, 1, v97))
    {
      v67 = sub_5C154(&qword_31F480);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v65, v66, v97);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v65, 0, 1, v97);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v94 + 56))(v39, 0, 1, v41);
  }
  v68 = a3[16];
  v69 = a3[17];
  v70 = *(_QWORD *)(a2 + v68);
  *(_QWORD *)(a1 + v68) = v70;
  v71 = (void *)(a1 + v69);
  v72 = (const void *)(a2 + v69);
  v73 = type metadata accessor for PaginationInfo(0);
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v74 + 48);
  v76 = swift_bridgeObjectRetain(v70);
  if (v75(v72, 1, v73, v76))
  {
    v77 = sub_5C154(&qword_323C08);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v74 + 16))(v71, v72, v73);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  v78 = a3[18];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = *(_QWORD *)(a2 + v78 + 24);
  if (v81)
  {
    v82 = *(_QWORD *)(v80 + 32);
    *(_QWORD *)(v79 + 24) = v81;
    *(_QWORD *)(v79 + 32) = v82;
    (**(void (***)(void))(v81 - 8))();
  }
  else
  {
    v83 = *(_OWORD *)(v80 + 16);
    *(_OWORD *)v79 = *(_OWORD *)v80;
    *(_OWORD *)(v79 + 16) = v83;
    *(_QWORD *)(v79 + 32) = *(_QWORD *)(v80 + 32);
  }
  v84 = a3[19];
  v85 = (void *)(a1 + v84);
  v86 = (const void *)(a2 + v84);
  v87 = type metadata accessor for SectionData(0);
  v88 = *(_QWORD *)(v87 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
  {
    v89 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v88 + 16))(v85, v86, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
  }
  return a1;
}

uint64_t assignWithCopy for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  int *v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD *, uint64_t, int *);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  __n128 v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  size_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t (*v71)(void);
  int v72;
  size_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(void *, uint64_t, uint64_t);
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(void *, uint64_t, uint64_t);
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v119;
  char *v120;
  char *v121;
  __int128 v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int v130;
  int v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *__srca;
  void (*__src)(char *, char *, uint64_t);
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = a3[8];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  v141 = v12;
  v142 = (uint64_t (*)(char *, uint64_t, uint64_t))v13;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v17 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v18 = a3[9];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for Metrics.Location(0, v16);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_12:
    v26 = sub_5C154(&qword_323B40);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_13:
  sub_65938((_QWORD *)(a1 + a3[10]), (_QWORD *)(a2 + a3[10]));
  v27 = a3[11];
  v28 = (void *)(a1 + v27);
  v29 = (void *)(a2 + v27);
  v30 = type metadata accessor for ShelfGridSpacing(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v28, v30);
LABEL_18:
    v35 = sub_5C154(&qword_323BF8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v31 + 24))(v28, v29, v30);
LABEL_19:
  v36 = a3[12];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
  sub_65938((_QWORD *)(a1 + a3[13]), (_QWORD *)(a2 + a3[13]));
  sub_65938((_QWORD *)(a1 + a3[14]), (_QWORD *)(a2 + a3[14]));
  v40 = a3[15];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  v43 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (v47)
    {
      sub_6685C((uint64_t)v41, type metadata accessor for ContentUnavailableComponentModel);
      goto LABEL_25;
    }
    v140 = v11;
    *v41 = *v42;
    v62 = v42[1];
    v63 = v41[1];
    v41[1] = v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRelease(v63);
    v64 = v43[5];
    v65 = (char *)v41 + v64;
    v66 = (char *)v42 + v64;
    v67 = type metadata accessor for LocalizerRequest(0);
    v68 = *(_QWORD *)(v67 - 8);
    v132 = *(void (**)(char *, char *, uint64_t))(v68 + 24);
    v132(v65, v66, v67);
    v69 = v43[6];
    v70 = (char *)v42 + v69;
    v134 = v68;
    v71 = *(uint64_t (**)(void))(v68 + 48);
    v138 = (char *)v41 + v69;
    LODWORD(v66) = v71();
    v72 = ((uint64_t (*)(char *, uint64_t, uint64_t))v71)(v70, 1, v67);
    if ((_DWORD)v66)
    {
      if (!v72)
      {
        (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v138, v70, v67);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v138, 0, 1, v67);
        goto LABEL_65;
      }
      v73 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v74 = v138;
    }
    else
    {
      if (!v72)
      {
        v132(v138, v70, v67);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v134 + 8))(v138, v67);
      v73 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v74 = v138;
    }
    memcpy(v74, v70, v73);
LABEL_65:
    v119 = v43[7];
    v120 = (char *)v41 + v119;
    v121 = (char *)v42 + v119;
    v122 = *(_OWORD *)v121;
    v120[16] = v121[16];
    *(_OWORD *)v120 = v122;
    *((_BYTE *)v41 + v43[8]) = *((_BYTE *)v42 + v43[8]);
    v123 = v43[9];
    v124 = (char *)v41 + v123;
    v125 = (char *)v42 + v123;
    v126 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 24))(v124, v125, v126);
    sub_65938((_QWORD *)((char *)v41 + v43[10]), (_QWORD *)((char *)v42 + v43[10]));
    v127 = v43[11];
    v128 = (char *)v41 + v127;
    v129 = (char *)v42 + v127;
    v130 = v142(v128, 1, v140);
    v131 = v142(v129, 1, v140);
    if (v130)
    {
      if (!v131)
      {
        (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v128, v129, v140);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v128, 0, 1, v140);
        goto LABEL_38;
      }
    }
    else
    {
      if (!v131)
      {
        (*(void (**)(char *, char *, uint64_t))(v141 + 24))(v128, v129, v140);
        goto LABEL_38;
      }
      (*(void (**)(char *, uint64_t))(v141 + 8))(v128, v140);
    }
    v59 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_31F480) - 8) + 64);
    v60 = v128;
    v61 = v129;
LABEL_26:
    memcpy(v60, v61, v59);
    goto LABEL_38;
  }
  if (v47)
  {
LABEL_25:
    v59 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_323C00) - 8) + 64);
    v60 = (char *)v41;
    v61 = (char *)v42;
    goto LABEL_26;
  }
  v137 = v44;
  v139 = v11;
  *v41 = *v42;
  v48 = v42[1];
  v41[1] = v48;
  v49 = v43[5];
  v133 = (char *)v42 + v49;
  __srca = (char *)v41 + v49;
  v50 = type metadata accessor for LocalizerRequest(0);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v53 = swift_bridgeObjectRetain(v48);
  v54 = __srca;
  __src = v52;
  ((void (*)(void *, char *, uint64_t, __n128))v52)(v54, v133, v50, v53);
  v55 = v43[6];
  v56 = (char *)v41 + v55;
  v57 = (char *)v42 + v55;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))((char *)v42 + v55, 1, v50))
  {
    v58 = sub_5C154(&qword_3217B8);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    __src(v56, v57, v50);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v56, 0, 1, v50);
  }
  v75 = v43[7];
  v76 = (char *)v41 + v75;
  v77 = (char *)v42 + v75;
  v78 = *(_OWORD *)v77;
  v76[16] = v77[16];
  *(_OWORD *)v76 = v78;
  *((_BYTE *)v41 + v43[8]) = *((_BYTE *)v42 + v43[8]);
  v79 = v43[9];
  v80 = (char *)v41 + v79;
  v81 = (char *)v42 + v79;
  v82 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
  v83 = v43[10];
  v84 = (char *)v41 + v83;
  v85 = *(_QWORD *)((char *)v42 + v83 + 24);
  *((_QWORD *)v84 + 3) = v85;
  *((_QWORD *)v84 + 4) = *(_QWORD *)((char *)v42 + v83 + 32);
  (**(void (***)(void))(v85 - 8))();
  v86 = v43[11];
  v87 = (char *)v41 + v86;
  v88 = (char *)v42 + v86;
  v89 = v137;
  if (v142(v88, 1, v139))
  {
    v90 = sub_5C154(&qword_31F480);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v87, v88, v139);
    v89 = v137;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v87, 0, 1, v139);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v89 + 56))(v41, 0, 1, v43);
LABEL_38:
  v91 = a3[16];
  v92 = *(_QWORD *)(a2 + v91);
  v93 = *(_QWORD *)(a1 + v91);
  *(_QWORD *)(a1 + v91) = v92;
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRelease(v93);
  v94 = a3[17];
  v95 = (void *)(a1 + v94);
  v96 = (void *)(a2 + v94);
  v97 = type metadata accessor for PaginationInfo(0);
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
  v100 = v99(v95, 1, v97);
  v101 = v99(v96, 1, v97);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(void *, void *, uint64_t))(v98 + 16))(v95, v96, v97);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v101)
  {
    (*(void (**)(void *, uint64_t))(v98 + 8))(v95, v97);
LABEL_43:
    v102 = sub_5C154(&qword_323C08);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(void *, void *, uint64_t))(v98 + 24))(v95, v96, v97);
LABEL_44:
  v103 = a3[18];
  v104 = a1 + v103;
  v105 = (__int128 *)(a2 + v103);
  v106 = *(_QWORD *)(a2 + v103 + 24);
  if (*(_QWORD *)(a1 + v103 + 24))
  {
    if (v106)
    {
      sub_65938((_QWORD *)v104, v105);
      goto LABEL_51;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)v104);
  }
  else if (v106)
  {
    *(_QWORD *)(v104 + 24) = v106;
    *(_QWORD *)(v104 + 32) = *((_QWORD *)v105 + 4);
    (**(void (***)(uint64_t, __int128 *))(v106 - 8))(v104, v105);
    goto LABEL_51;
  }
  v107 = *v105;
  v108 = v105[1];
  *(_QWORD *)(v104 + 32) = *((_QWORD *)v105 + 4);
  *(_OWORD *)v104 = v107;
  *(_OWORD *)(v104 + 16) = v108;
LABEL_51:
  v109 = a3[19];
  v110 = (void *)(a1 + v109);
  v111 = (void *)(a2 + v109);
  v112 = type metadata accessor for SectionData(0);
  v113 = *(_QWORD *)(v112 - 8);
  v114 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v113 + 48);
  v115 = v114(v110, 1, v112);
  v116 = v114(v111, 1, v112);
  if (!v115)
  {
    if (!v116)
    {
      (*(void (**)(void *, void *, uint64_t))(v113 + 24))(v110, v111, v112);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v113 + 8))(v110, v112);
    goto LABEL_56;
  }
  if (v116)
  {
LABEL_56:
    v117 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v113 + 16))(v110, v111, v112);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
  return a1;
}

uint64_t initializeWithTake for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_5C154(&qword_31F480);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    v13.n128_f64[0] = (*(double (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v14 = a3[9];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = type metadata accessor for Metrics.Location(0, v13);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_5C154(&qword_323B40);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[10];
  v21 = a3[11];
  v22 = a1 + v20;
  v23 = a2 + v20;
  v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
  v25 = (void *)(a1 + v21);
  v26 = (const void *)(a2 + v21);
  v27 = type metadata accessor for ShelfGridSpacing(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_5C154(&qword_323BF8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v34 = a3[13];
  v35 = a3[14];
  v36 = a1 + v34;
  v37 = (__int128 *)(a2 + v34);
  v38 = *v37;
  v39 = v37[1];
  *(_QWORD *)(v36 + 32) = *((_QWORD *)v37 + 4);
  *(_OWORD *)v36 = v38;
  *(_OWORD *)(v36 + 16) = v39;
  v40 = a1 + v35;
  v41 = a2 + v35;
  v42 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v42;
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
  v43 = a3[15];
  v44 = (_OWORD *)(a1 + v43);
  v45 = (_OWORD *)(a2 + v43);
  v46 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v47 = *((_QWORD *)v46 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v47 + 48))(v45, 1, v46))
  {
    v48 = sub_5C154(&qword_323C00);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v92 = v47;
    v93 = (unsigned int (*)(char *, uint64_t, uint64_t))v11;
    v91 = v10;
    v94 = v9;
    *v44 = *v45;
    v49 = v46[5];
    v50 = (char *)v44 + v49;
    v51 = (char *)v45 + v49;
    v52 = type metadata accessor for LocalizerRequest(0);
    v53 = *(_QWORD *)(v52 - 8);
    v90 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    v90(v50, v51, v52);
    v54 = v46[6];
    v55 = (char *)v44 + v54;
    v56 = (char *)v45 + v54;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))((char *)v45 + v54, 1, v52))
    {
      v57 = sub_5C154(&qword_3217B8);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v90(v55, v56, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v52);
    }
    v58 = v46[7];
    v59 = (char *)v44 + v58;
    v60 = (char *)v45 + v58;
    *(_OWORD *)v59 = *(_OWORD *)v60;
    v59[16] = v60[16];
    *((_BYTE *)v44 + v46[8]) = *((_BYTE *)v45 + v46[8]);
    v61 = v46[9];
    v62 = (char *)v44 + v61;
    v63 = (char *)v45 + v61;
    v64 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
    v65 = v46[10];
    v66 = (char *)v44 + v65;
    v67 = (char *)v45 + v65;
    v68 = *((_OWORD *)v67 + 1);
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *((_OWORD *)v66 + 1) = v68;
    *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
    v69 = v46[11];
    v70 = (char *)v44 + v69;
    v71 = (char *)v45 + v69;
    if (v93(v71, 1, v94))
    {
      v72 = sub_5C154(&qword_31F480);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v70, v71, v94);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v70, 0, 1, v94);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v92 + 56))(v44, 0, 1, v46);
  }
  v73 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  v74 = (void *)(a1 + v73);
  v75 = (const void *)(a2 + v73);
  v76 = type metadata accessor for PaginationInfo(0);
  v77 = *(_QWORD *)(v76 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
  {
    v78 = sub_5C154(&qword_323C08);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v77 + 32))(v74, v75, v76);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
  }
  v79 = a3[18];
  v80 = a3[19];
  v81 = a1 + v79;
  v82 = a2 + v79;
  v83 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_OWORD *)(v81 + 16) = v83;
  *(_QWORD *)(v81 + 32) = *(_QWORD *)(v82 + 32);
  v84 = (void *)(a1 + v80);
  v85 = (const void *)(a2 + v80);
  v86 = type metadata accessor for SectionData(0);
  v87 = *(_QWORD *)(v86 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
  {
    v88 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v87 + 32))(v84, v85, v86);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
  }
  return a1;
}

uint64_t assignWithTake for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  int *v55;
  uint64_t v56;
  uint64_t (*v57)(_QWORD *, uint64_t, int *);
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t (*v81)(void);
  int v82;
  size_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(void *, uint64_t, uint64_t);
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(void *, uint64_t, uint64_t);
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  char *v138;
  int v139;
  int v140;
  void (*v141)(char *, char *, uint64_t);
  uint64_t v142;
  void (*__src)(char *, char *, uint64_t);
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)(char *, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = a3[8];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  v148 = v12;
  v149 = (uint64_t (*)(char *, uint64_t, uint64_t))v13;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v17 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v18 = a3[9];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for Metrics.Location(0, v16);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_12:
    v26 = sub_5C154(&qword_323B40);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_13:
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + v27));
  v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
  v31 = a3[11];
  v32 = (void *)(a1 + v31);
  v33 = (void *)(a2 + v31);
  v34 = type metadata accessor for ShelfGridSpacing(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v35 + 8))(v32, v34);
LABEL_18:
    v39 = sub_5C154(&qword_323BF8);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v32, v33, v34);
LABEL_19:
  v40 = a3[12];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v41, v42, v43);
  v44 = a3[13];
  v45 = a1 + v44;
  v46 = a2 + v44;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + v44));
  v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 32);
  v48 = a3[14];
  v49 = a1 + v48;
  v50 = a2 + v48;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + v48));
  v51 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_OWORD *)(v49 + 16) = v51;
  *(_QWORD *)(v49 + 32) = *(_QWORD *)(v50 + 32);
  v52 = a3[15];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (_QWORD *)(a2 + v52);
  v55 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v56 = *((_QWORD *)v55 - 1);
  v57 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (v59)
    {
      sub_6685C((uint64_t)v53, type metadata accessor for ContentUnavailableComponentModel);
      goto LABEL_25;
    }
    v147 = v11;
    v72 = v54[1];
    v73 = v53[1];
    *v53 = *v54;
    v53[1] = v72;
    swift_bridgeObjectRelease(v73);
    v74 = v55[5];
    v75 = (char *)v53 + v74;
    v76 = (char *)v54 + v74;
    v77 = type metadata accessor for LocalizerRequest(0);
    v78 = *(_QWORD *)(v77 - 8);
    v141 = *(void (**)(char *, char *, uint64_t))(v78 + 40);
    v141(v75, v76, v77);
    v79 = v55[6];
    v80 = (char *)v54 + v79;
    v142 = v78;
    v81 = *(uint64_t (**)(void))(v78 + 48);
    v145 = (char *)v53 + v79;
    LODWORD(v76) = v81();
    v82 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v80, 1, v77);
    if ((_DWORD)v76)
    {
      if (!v82)
      {
        (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v145, v80, v77);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v145, 0, 1, v77);
        goto LABEL_60;
      }
      v83 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v84 = v145;
    }
    else
    {
      if (!v82)
      {
        v141(v145, v80, v77);
        goto LABEL_60;
      }
      (*(void (**)(char *, uint64_t))(v142 + 8))(v145, v77);
      v83 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v84 = v145;
    }
    memcpy(v84, v80, v83);
LABEL_60:
    v125 = v55[7];
    v126 = (char *)v53 + v125;
    v127 = (char *)v54 + v125;
    *(_OWORD *)v126 = *(_OWORD *)v127;
    v126[16] = v127[16];
    *((_BYTE *)v53 + v55[8]) = *((_BYTE *)v54 + v55[8]);
    v128 = v55[9];
    v129 = (char *)v53 + v128;
    v130 = (char *)v54 + v128;
    v131 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 40))(v129, v130, v131);
    v132 = v55[10];
    v133 = (char *)v53 + v132;
    v134 = (char *)v54 + v132;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)((char *)v53 + v132));
    v135 = *((_OWORD *)v134 + 1);
    *(_OWORD *)v133 = *(_OWORD *)v134;
    *((_OWORD *)v133 + 1) = v135;
    *((_QWORD *)v133 + 4) = *((_QWORD *)v134 + 4);
    v136 = v55[11];
    v137 = (char *)v53 + v136;
    v138 = (char *)v54 + v136;
    v139 = v149(v137, 1, v147);
    v140 = v149(v138, 1, v147);
    if (v139)
    {
      if (!v140)
      {
        (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v137, v138, v147);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v137, 0, 1, v147);
        goto LABEL_38;
      }
    }
    else
    {
      if (!v140)
      {
        (*(void (**)(char *, char *, uint64_t))(v148 + 40))(v137, v138, v147);
        goto LABEL_38;
      }
      (*(void (**)(char *, uint64_t))(v148 + 8))(v137, v147);
    }
    v69 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_31F480) - 8) + 64);
    v70 = v137;
    v71 = v138;
LABEL_26:
    memcpy(v70, v71, v69);
    goto LABEL_38;
  }
  if (v59)
  {
LABEL_25:
    v69 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_323C00) - 8) + 64);
    v70 = (char *)v53;
    v71 = (char *)v54;
    goto LABEL_26;
  }
  v144 = v56;
  v146 = v11;
  *(_OWORD *)v53 = *(_OWORD *)v54;
  v60 = v55[5];
  v61 = (char *)v53 + v60;
  v62 = (char *)v54 + v60;
  v63 = type metadata accessor for LocalizerRequest(0);
  v64 = *(_QWORD *)(v63 - 8);
  __src = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  __src(v61, v62, v63);
  v65 = v55[6];
  v66 = (char *)v53 + v65;
  v67 = (char *)v54 + v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))((char *)v54 + v65, 1, v63))
  {
    v68 = sub_5C154(&qword_3217B8);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    __src(v66, v67, v63);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v66, 0, 1, v63);
  }
  v85 = v55[7];
  v86 = (char *)v53 + v85;
  v87 = (char *)v54 + v85;
  *(_OWORD *)v86 = *(_OWORD *)v87;
  v86[16] = v87[16];
  *((_BYTE *)v53 + v55[8]) = *((_BYTE *)v54 + v55[8]);
  v88 = v55[9];
  v89 = (char *)v53 + v88;
  v90 = (char *)v54 + v88;
  v91 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
  v92 = v55[10];
  v93 = (char *)v53 + v92;
  v94 = (char *)v54 + v92;
  v95 = *((_OWORD *)v94 + 1);
  *(_OWORD *)v93 = *(_OWORD *)v94;
  *((_OWORD *)v93 + 1) = v95;
  *((_QWORD *)v93 + 4) = *((_QWORD *)v94 + 4);
  v96 = v55[11];
  v97 = (char *)v53 + v96;
  v98 = (char *)v54 + v96;
  if (v149(v98, 1, v146))
  {
    v99 = sub_5C154(&qword_31F480);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v97, v98, v146);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v97, 0, 1, v146);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v144 + 56))(v53, 0, 1, v55);
LABEL_38:
  v100 = a3[16];
  v101 = *(_QWORD *)(a1 + v100);
  *(_QWORD *)(a1 + v100) = *(_QWORD *)(a2 + v100);
  swift_bridgeObjectRelease(v101);
  v102 = a3[17];
  v103 = (void *)(a1 + v102);
  v104 = (void *)(a2 + v102);
  v105 = type metadata accessor for PaginationInfo(0);
  v106 = *(_QWORD *)(v105 - 8);
  v107 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v106 + 48);
  v108 = v107(v103, 1, v105);
  v109 = v107(v104, 1, v105);
  if (v108)
  {
    if (!v109)
    {
      (*(void (**)(void *, void *, uint64_t))(v106 + 32))(v103, v104, v105);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v109)
  {
    (*(void (**)(void *, uint64_t))(v106 + 8))(v103, v105);
LABEL_43:
    v110 = sub_5C154(&qword_323C08);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(void *, void *, uint64_t))(v106 + 40))(v103, v104, v105);
LABEL_44:
  v111 = a3[18];
  v112 = a1 + v111;
  v113 = a2 + v111;
  if (*(_QWORD *)(a1 + v111 + 24))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)v112);
  v114 = *(_OWORD *)(v113 + 16);
  *(_OWORD *)v112 = *(_OWORD *)v113;
  *(_OWORD *)(v112 + 16) = v114;
  *(_QWORD *)(v112 + 32) = *(_QWORD *)(v113 + 32);
  v115 = a3[19];
  v116 = (void *)(a1 + v115);
  v117 = (void *)(a2 + v115);
  v118 = type metadata accessor for SectionData(0);
  v119 = *(_QWORD *)(v118 - 8);
  v120 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v119 + 48);
  v121 = v120(v116, 1, v118);
  v122 = v120(v117, 1, v118);
  if (!v121)
  {
    if (!v122)
    {
      (*(void (**)(void *, void *, uint64_t))(v119 + 40))(v116, v117, v118);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v119 + 8))(v116, v118);
    goto LABEL_51;
  }
  if (v122)
  {
LABEL_51:
    v123 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v119 + 32))(v116, v117, v118);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shelf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19E458);
}

uint64_t sub_19E458(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F480);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = sub_5C154(&qword_323B40);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v13 = sub_5C154(&qword_323BF8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[11];
        }
        else
        {
          v14 = type metadata accessor for ShelfBackgroundViewModel(0);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[12];
          }
          else
          {
            v15 = sub_5C154(&qword_323C00);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              v10 = v15;
              v11 = a3[15];
            }
            else
            {
              v16 = sub_5C154(&qword_323C08);
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
              {
                v10 = v16;
                v11 = a3[17];
              }
              else
              {
                v10 = sub_5C154((uint64_t *)&unk_326100);
                v9 = *(_QWORD *)(v10 - 8);
                v11 = a3[19];
              }
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Shelf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19E5D0);
}

uint64_t sub_19E5D0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F480);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = sub_5C154(&qword_323B40);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v13 = sub_5C154(&qword_323BF8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[11];
        }
        else
        {
          v14 = type metadata accessor for ShelfBackgroundViewModel(0);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[12];
          }
          else
          {
            v15 = sub_5C154(&qword_323C00);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v15;
              v11 = a4[15];
            }
            else
            {
              v16 = sub_5C154(&qword_323C08);
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == a3)
              {
                v10 = v16;
                v11 = a4[17];
              }
              else
              {
                v10 = sub_5C154((uint64_t *)&unk_326100);
                v9 = *(_QWORD *)(v10 - 8);
                v11 = a4[19];
              }
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_19E738(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[16];

  v16[0] = &unk_263728;
  v16[1] = &unk_263740;
  v16[2] = &unk_263758;
  v16[3] = &unk_263740;
  sub_C1800(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
  if (v3 <= 0x3F)
  {
    v16[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_C1800(319, &qword_3281D0, (uint64_t (*)(uint64_t))&type metadata accessor for Metrics.Location);
    if (v5 <= 0x3F)
    {
      v16[5] = *(_QWORD *)(v4 - 8) + 64;
      v16[6] = &unk_263770;
      sub_C1800(319, &qword_3281D8, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfGridSpacing);
      if (v7 <= 0x3F)
      {
        v16[7] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for ShelfBackgroundViewModel(319);
        if (v9 <= 0x3F)
        {
          v16[8] = *(_QWORD *)(v8 - 8) + 64;
          v16[9] = &unk_263770;
          v16[10] = &unk_263770;
          sub_C1800(319, &qword_3281E0, type metadata accessor for ContentUnavailableComponentModel);
          if (v11 <= 0x3F)
          {
            v16[11] = *(_QWORD *)(v10 - 8) + 64;
            v16[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
            sub_C1800(319, (unint64_t *)&unk_3281E8, (uint64_t (*)(uint64_t))&type metadata accessor for PaginationInfo);
            if (v13 <= 0x3F)
            {
              v16[13] = *(_QWORD *)(v12 - 8) + 64;
              v16[14] = &unk_263788;
              sub_C1800(319, (unint64_t *)&unk_323CA0, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData);
              if (v15 <= 0x3F)
              {
                v16[15] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 16, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for Shelf.HeaderComponentModel()
{
  return &type metadata for Shelf.HeaderComponentModel;
}

ValueMetadata *type metadata accessor for Shelf.FooterComponentModel()
{
  return &type metadata for Shelf.FooterComponentModel;
}

ValueMetadata *type metadata accessor for Shelf.Presentation()
{
  return &type metadata for Shelf.Presentation;
}

uint64_t _s11BookStoreUI5ShelfV12PresentationV11OrientationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19E970 + 4 * byte_2633A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19E9A4 + 4 * byte_2633A0[v4]))();
}

uint64_t sub_19E9A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E9AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E9B4);
  return result;
}

uint64_t sub_19E9C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E9C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19E9CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E9D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.Orientation()
{
  return &type metadata for Shelf.Presentation.Orientation;
}

ValueMetadata *type metadata accessor for Shelf.ValidationError()
{
  return &type metadata for Shelf.ValidationError;
}

uint64_t getEnumTagSinglePayload for Shelf.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Shelf.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_19EAE0 + 4 * byte_2633AF[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_19EB14 + 4 * byte_2633AA[v4]))();
}

uint64_t sub_19EB14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19EB1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19EB24);
  return result;
}

uint64_t sub_19EB30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19EB38);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_19EB3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19EB44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Shelf.CodingKeys()
{
  return &type metadata for Shelf.CodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.CodingKeys()
{
  return &type metadata for Shelf.Presentation.CodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.FooterComponentModel.CodingKeys()
{
  return &type metadata for Shelf.FooterComponentModel.CodingKeys;
}

uint64_t _s11BookStoreUI5ShelfV15ValidationErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19EBC0 + 4 * byte_2633B4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19EBE0 + 4 * byte_2633B9[v4]))();
}

_BYTE *sub_19EBC0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19EBE0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19EBE8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19EBF0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19EBF8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19EC00(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Shelf.HeaderComponentModel.CodingKeys()
{
  return &type metadata for Shelf.HeaderComponentModel.CodingKeys;
}

unint64_t sub_19EC20()
{
  unint64_t result;

  result = qword_328250;
  if (!qword_328250)
  {
    result = swift_getWitnessTable(&unk_2638A8, &type metadata for Shelf.HeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328250);
  }
  return result;
}

unint64_t sub_19EC68()
{
  unint64_t result;

  result = qword_328258;
  if (!qword_328258)
  {
    result = swift_getWitnessTable(&unk_263960, &type metadata for Shelf.FooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328258);
  }
  return result;
}

unint64_t sub_19ECB0()
{
  unint64_t result;

  result = qword_328260;
  if (!qword_328260)
  {
    result = swift_getWitnessTable(&unk_263A18, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328260);
  }
  return result;
}

unint64_t sub_19ECF8()
{
  unint64_t result;

  result = qword_328268;
  if (!qword_328268)
  {
    result = swift_getWitnessTable(&unk_263B08, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328268);
  }
  return result;
}

unint64_t sub_19ED40()
{
  unint64_t result;

  result = qword_328270;
  if (!qword_328270)
  {
    result = swift_getWitnessTable(&unk_263A40, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328270);
  }
  return result;
}

unint64_t sub_19ED88()
{
  unint64_t result;

  result = qword_328278;
  if (!qword_328278)
  {
    result = swift_getWitnessTable(&unk_263A68, &type metadata for Shelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328278);
  }
  return result;
}

unint64_t sub_19EDD0()
{
  unint64_t result;

  result = qword_328280;
  if (!qword_328280)
  {
    result = swift_getWitnessTable(&unk_263988, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328280);
  }
  return result;
}

unint64_t sub_19EE18()
{
  unint64_t result;

  result = qword_328288;
  if (!qword_328288)
  {
    result = swift_getWitnessTable(&unk_2639B0, &type metadata for Shelf.Presentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328288);
  }
  return result;
}

unint64_t sub_19EE60()
{
  unint64_t result;

  result = qword_328290;
  if (!qword_328290)
  {
    result = swift_getWitnessTable(&unk_2638D0, &type metadata for Shelf.FooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328290);
  }
  return result;
}

unint64_t sub_19EEA8()
{
  unint64_t result;

  result = qword_328298;
  if (!qword_328298)
  {
    result = swift_getWitnessTable(&unk_2638F8, &type metadata for Shelf.FooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_328298);
  }
  return result;
}

unint64_t sub_19EEF0()
{
  unint64_t result;

  result = qword_3282A0;
  if (!qword_3282A0)
  {
    result = swift_getWitnessTable(&unk_263818, &type metadata for Shelf.HeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3282A0);
  }
  return result;
}

unint64_t sub_19EF38()
{
  unint64_t result;

  result = qword_3282A8;
  if (!qword_3282A8)
  {
    result = swift_getWitnessTable(&unk_263840, &type metadata for Shelf.HeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3282A8);
  }
  return result;
}

unint64_t sub_19EF7C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6898, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

unint64_t sub_19EFC4()
{
  unint64_t result;

  result = qword_3282B0;
  if (!qword_3282B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.Presentation.Orientation, &type metadata for Shelf.Presentation.Orientation);
    atomic_store(result, (unint64_t *)&qword_3282B0);
  }
  return result;
}

unint64_t sub_19F008()
{
  unint64_t result;

  result = qword_3282B8;
  if (!qword_3282B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf.ValidationError, &type metadata for Shelf.ValidationError);
    atomic_store(result, (unint64_t *)&qword_3282B8);
  }
  return result;
}

uint64_t LinkData.init(actionOrigin:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  unsigned int *v55;
  char v56;
  __n128 v57;
  void (*v58)(char *, uint64_t, __n128);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v112 = a2;
  v102 = type metadata accessor for ActionOrigin.Kind(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v104 = (char *)&v98 - v5;
  v6 = sub_5C154(&qword_322410);
  __chkstk_darwin(v6);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v110 = (uint64_t)&v98 - v10;
  __chkstk_darwin(v11);
  v105 = (char *)&v98 - v12;
  __chkstk_darwin(v13);
  v109 = (char *)&v98 - v14;
  __chkstk_darwin(v15);
  v108 = (uint64_t)&v98 - v16;
  __chkstk_darwin(v17);
  v107 = (char *)&v98 - v18;
  __chkstk_darwin(v19);
  v106 = (char *)&v98 - v20;
  __chkstk_darwin(v21);
  v103 = (uint64_t)&v98 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v98 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v98 - v27;
  v29 = type metadata accessor for ActionOrigin(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for LinkActionType(0, v31);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v116 = (char *)&v98 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v99 = (char *)&v98 - v38;
  __chkstk_darwin(v39);
  v41 = (char *)&v98 - v40;
  v113 = a1;
  sub_6C1C4(a1, (uint64_t)v28);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v43 = v42(v28, 1, v29);
  v117 = v41;
  v118 = v30;
  v111 = v8;
  v114 = v34;
  v115 = v35;
  if (v43 == 1)
  {
    sub_B5AE4((uint64_t)v28);
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v41, enum case for LinkActionType.unknown(_:), v34);
    v44 = v113;
    v45 = (uint64_t)v105;
  }
  else
  {
    v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v33, v28, v29);
    ActionOrigin.kind.getter(v46);
    v47 = v101;
    v48 = v100;
    v49 = v102;
    (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, enum case for ActionOrigin.Kind.header(_:), v102);
    v50 = sub_83844();
    dispatch thunk of RawRepresentable.rawValue.getter(&v121, v49, v50);
    v51 = v48;
    dispatch thunk of RawRepresentable.rawValue.getter(&v119, v49, v50);
    v52 = v122;
    v53 = v120;
    if (v121 == v119 && v122 == v120)
    {
      swift_bridgeObjectRelease_n(v122, 2);
      v54 = *(void (**)(char *, uint64_t))(v47 + 8);
      v54(v48, v49);
      v54(v104, v49);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v33, v29);
      v55 = (unsigned int *)&enum case for LinkActionType.titleClick(_:);
    }
    else
    {
      v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v121, v122, v119, v120, 0);
      swift_bridgeObjectRelease(v52);
      v57 = swift_bridgeObjectRelease(v53);
      v58 = *(void (**)(char *, uint64_t, __n128))(v47 + 8);
      v58(v51, v49, v57);
      ((void (*)(char *, uint64_t))v58)(v104, v49);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v33, v29);
      v55 = (unsigned int *)&enum case for LinkActionType.click(_:);
      if ((v56 & 1) != 0)
        v55 = (unsigned int *)&enum case for LinkActionType.titleClick(_:);
    }
    v44 = v113;
    v34 = v114;
    v59 = v115;
    v45 = (uint64_t)v105;
    v60 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v115 + 104))(v99, *v55, v114);
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v117, v60, v34);
  }
  v61 = v34;
  sub_6C1C4(v44, (uint64_t)v25);
  v62 = v42(v25, 1, v29);
  v63 = v118;
  if (v62 == 1)
  {
    sub_B5AE4((uint64_t)v25);
  }
  else
  {
    v64 = ActionOrigin.sectionID.getter();
    v66 = v65;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v25, v29);
    v113 = v66;
    if (v66)
      goto LABEL_13;
  }
  swift_bridgeObjectRelease(0);
  v64 = 0;
  v113 = 0xE000000000000000;
LABEL_13:
  v67 = (uint64_t)v109;
  v68 = v103;
  sub_6C1C4(v44, v103);
  v69 = v42((char *)v68, 1, v29);
  v70 = (uint64_t)v106;
  v109 = (char *)v64;
  if (v69 == 1)
  {
    sub_B5AE4(v68);
    v104 = 0;
    v105 = 0;
  }
  else
  {
    v71 = ActionOrigin.sectionName.getter();
    v104 = v72;
    v105 = (char *)v71;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v68, v29);
  }
  sub_6C1C4(v44, v70);
  v73 = v61;
  if (v42((char *)v70, 1, v29) == 1)
  {
    sub_B5AE4(v70);
    v102 = 0;
    v103 = 0;
  }
  else
  {
    v74 = ActionOrigin.contentID.getter();
    v102 = v75;
    v103 = v74;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v70, v29);
  }
  v76 = (uint64_t)v107;
  v77 = v115;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v116, v117, v73);
  sub_6C1C4(v44, v76);
  if (v42((char *)v76, 1, v29) == 1)
  {
    sub_B5AE4(v76);
    v106 = 0;
    v107 = 0;
  }
  else
  {
    v78 = ActionOrigin.seriesID.getter();
    v106 = v79;
    v107 = (char *)v78;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v76, v29);
  }
  v80 = v108;
  sub_6C1C4(v44, v108);
  if (v42((char *)v80, 1, v29) == 1)
  {
    sub_B5AE4(v80);
    v108 = 0;
    v101 = 0;
  }
  else
  {
    v108 = ActionOrigin.genreID.getter();
    v101 = v81;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v80, v29);
  }
  sub_6C1C4(v44, v67);
  if (v42((char *)v67, 1, v29) == 1)
  {
    sub_B5AE4(v67);
    v100 = 0;
    v99 = 0;
  }
  else
  {
    v100 = (char *)ActionOrigin.collectionID.getter();
    v99 = v82;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v67, v29);
  }
  sub_6C1C4(v44, v45);
  if (v42((char *)v45, 1, v29) == 1)
  {
    sub_B5AE4(v45);
    v83 = 0;
    v84 = 0;
  }
  else
  {
    v83 = ActionOrigin.authorID.getter();
    v84 = v85;
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v45, v29);
  }
  v86 = v110;
  v87 = v77;
  sub_6C1C4(v44, v110);
  v88 = v42((char *)v86, 1, v29);
  v89 = (uint64_t)v111;
  if (v88 == 1)
  {
    sub_B5AE4(v86);
    v90 = 0;
    v91 = 0;
  }
  else
  {
    v90 = ActionOrigin.flowcaseID.getter();
    v91 = v92;
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v86, v29);
  }
  sub_6C1C4(v44, v89);
  if (v42((char *)v89, 1, v29) == 1)
  {
    sub_B5AE4(v89);
    v93 = 0;
    v94 = 0;
  }
  else
  {
    v93 = ActionOrigin.brickID.getter();
    v95 = v89;
    v94 = v96;
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v95, v29);
  }
  LinkData.init(previousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:)(v109, v113, v105, v104, v103, v102, v116, v107, v106, v108, v101, v100, v99, v83, v84, v90, v91, v93, v94);
  sub_B5AE4(v44);
  return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v117, v114);
}

ValueMetadata *type metadata accessor for MenuItem()
{
  return &type metadata for MenuItem;
}

void sub_19F8F8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _QWORD v18[4];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v5 = sub_5C154(&qword_3282D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v11 = sub_19FC04();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MenuItem.CodingKeys, &type metadata for MenuItem.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  }
  else
  {
    LOBYTE(v16[0]) = 0;
    v18[0] = KeyedDecodingContainer.decode(_:forKey:)(v16, v5);
    v18[1] = v12;
    LOBYTE(v16[0]) = 1;
    v18[2] = KeyedDecodingContainer.decode(_:forKey:)(v16, v5);
    v18[3] = v13;
    v14 = sub_5C154(&qword_3274A8);
    v22 = 2;
    v15 = sub_19FC48();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v14, &v22, v5, v14, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v16[0];
    v20 = v16[1];
    v21 = v17;
    sub_19FC94((uint64_t)v18, a2);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    sub_19FCC8(v18);
  }
}

uint64_t sub_19FB04()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C746974;
  if (*v0 != 1)
    v1 = 0x6E6F69746361;
  if (*v0)
    return v1;
  else
    return 25705;
}

uint64_t sub_19FB4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19FE98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19FB70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19FC04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19FB98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19FC04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_19FBC0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

void sub_19FBF0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_19F8F8(a1, a2);
}

unint64_t sub_19FC04()
{
  unint64_t result;

  result = qword_3282D8;
  if (!qword_3282D8)
  {
    result = swift_getWitnessTable(&unk_263DD0, &type metadata for MenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3282D8);
  }
  return result;
}

unint64_t sub_19FC48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3274C0;
  if (!qword_3274C0)
  {
    v1 = sub_667D0(&qword_3274A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for CodeByKind<A>, v1);
    atomic_store(result, (unint64_t *)&qword_3274C0);
  }
  return result;
}

uint64_t sub_19FC94(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RecommendationSeedItem(a2, a1);
  return a2;
}

_QWORD *sub_19FCC8(_QWORD *a1)
{
  destroy for RecommendationSeedItem(a1);
  return a1;
}

uint64_t storeEnumTagSinglePayload for MenuItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19FD40 + 4 * byte_263C75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19FD74 + 4 * byte_263C70[v4]))();
}

uint64_t sub_19FD74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19FD7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19FD84);
  return result;
}

uint64_t sub_19FD90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19FD98);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19FD9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19FDA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MenuItem.CodingKeys()
{
  return &type metadata for MenuItem.CodingKeys;
}

unint64_t sub_19FDC4()
{
  unint64_t result;

  result = qword_3282E0;
  if (!qword_3282E0)
  {
    result = swift_getWitnessTable(&unk_263DA8, &type metadata for MenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3282E0);
  }
  return result;
}

unint64_t sub_19FE0C()
{
  unint64_t result;

  result = qword_3282E8;
  if (!qword_3282E8)
  {
    result = swift_getWitnessTable(&unk_263D18, &type metadata for MenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3282E8);
  }
  return result;
}

unint64_t sub_19FE54()
{
  unint64_t result;

  result = qword_3282F0;
  if (!qword_3282F0)
  {
    result = swift_getWitnessTable(&unk_263D40, &type metadata for MenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3282F0);
  }
  return result;
}

uint64_t sub_19FE98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t *sub_19FFC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v19 = type metadata accessor for FontConstants(0, v18);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v16, v19);
      v20 = v15;
      v21 = v17;
      v22 = 1;
    }
    else
    {
      v23 = *v16;
      *v15 = *v16;
      swift_retain(v23);
      v20 = v15;
      v21 = v17;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }
  return a1;
}

uint64_t sub_1A010C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v6, v7) != 1)
    return swift_release(*v6);
  v9 = type metadata accessor for FontConstants(0, v8);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
}

uint64_t *sub_1A01C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v17 = type metadata accessor for FontConstants(0, v16);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
    v18 = v13;
    v19 = v15;
    v20 = 1;
  }
  else
  {
    v21 = *v14;
    *v13 = *v14;
    swift_retain(v21);
    v18 = v13;
    v19 = v15;
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v19, v20);
  return a1;
}

uint64_t *sub_1A02E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_5E09C((uint64_t)a1 + v12, &qword_320290);
    v15 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v17 = type metadata accessor for FontConstants(0, v16);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
      v18 = v13;
      v19 = v15;
      v20 = 1;
    }
    else
    {
      v21 = *v14;
      *v13 = *v14;
      swift_retain(v21);
      v18 = v13;
      v19 = v15;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  return a1;
}

char *sub_1A0424(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v13 = type metadata accessor for FontConstants(0, v12);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

char *sub_1A0538(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_5E09C((uint64_t)&a1[v8], &qword_320290);
    v11 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v13 = type metadata accessor for FontConstants(0, v12);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1A0674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A0680);
}

uint64_t sub_1A0680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5C154(&qword_31F498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5C154(&qword_320BC8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1A06FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A0708);
}

uint64_t sub_1A0708(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5C154(&qword_31F498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5C154(&qword_320BC8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TextComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_328350;
  if (!qword_328350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TextComponent);
  return result;
}

void sub_1A07C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_663E4(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_663E4(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_1A086C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0((unint64_t *)&unk_32A080, type metadata accessor for TextComponent, (uint64_t)&unk_263E84);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_1A08C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[40];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[6];

  v62 = a2;
  v63 = sub_5C154(&qword_328390);
  __chkstk_darwin(v63);
  v49 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_5C154(&qword_328398);
  v4 = __chkstk_darwin(v59);
  v61 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for PlainButtonStyle(0, v4);
  v55 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v54 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TextComponentModel(0);
  v51 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v51 + 64);
  __chkstk_darwin(v7);
  v9 = type metadata accessor for TextComponent(0);
  v50 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v50 + 64);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_3261F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_5C154(&qword_3283A0);
  v52 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5C154(&qword_3283A8);
  v53 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v48 - v20;
  sub_5E1A4(a1 + 40, (uint64_t)v64, &qword_320B70);
  sub_66F14((uint64_t)v64, (uint64_t)&v65, (uint64_t *)&unk_326210);
  if (v67)
  {
    sub_5DC98(&v65, (uint64_t)v68);
    v23 = type metadata accessor for ButtonRole(0, v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
    sub_5E0D8((uint64_t)v68, (uint64_t)&v65);
    sub_5E11C((uint64_t)v56, (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TextComponent);
    sub_5E11C(a1, (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TextComponentModel);
    v24 = *(unsigned __int8 *)(v50 + 80);
    v25 = (v24 + 16) & ~v24;
    v26 = *(unsigned __int8 *)(v51 + 80);
    v56 = v21;
    v27 = (v10 + v26 + v25) & ~v26;
    v28 = swift_allocObject(&unk_2F1530, v27 + v8, v24 | v26 | 7);
    sub_5E160((uint64_t)v11, v28 + v25, type metadata accessor for TextComponent);
    sub_5E160((uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27, type metadata accessor for TextComponentModel);
    v29 = sub_1A1DBC();
    v30 = BooksActionButton.init(role:action:label:)(v14, &v65, sub_1A2470, v28, v63, v29);
    v31 = v54;
    PlainButtonStyle.init()(v30);
    v32 = sub_67060(&qword_3283B0, &qword_3283A0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v33 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v34 = v57;
    v35 = v60;
    View.buttonStyle<A>(_:)(v31, v57, v60, v32, v33);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v35);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v34);
    v36 = v53;
    v37 = (uint64_t)v56;
    v38 = v58;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v56, v18, v58);
    v39 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v61, v37, v38);
    swift_storeEnumTagMultiPayload(v39, v59, 0);
    *(_QWORD *)&v65 = v34;
    *((_QWORD *)&v65 + 1) = v35;
    v66 = v32;
    v67 = v33;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v39, v38, v63, OpaqueTypeConformance2, v29);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v68);
  }
  else
  {
    sub_5E09C((uint64_t)&v65, (uint64_t *)&unk_326210);
    v42 = v49;
    sub_1A0EA8(a1, v49);
    v43 = v61;
    sub_5E1A4(v42, v61, &qword_328390);
    swift_storeEnumTagMultiPayload(v43, v59, 1);
    v44 = sub_67060(&qword_3283B0, &qword_3283A0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v45 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v68[0] = v57;
    v68[1] = v60;
    v68[2] = v44;
    v68[3] = v45;
    v46 = swift_getOpaqueTypeConformance2(v68, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v47 = sub_1A1DBC();
    _ConditionalContent<>.init(storage:)(v43, v58, v63, v46, v47);
    return sub_5E09C(v42, &qword_328390);
  }
}

uint64_t sub_1A0EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t KeyPath;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  double v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  __n128 v174;
  uint64_t v175;
  __n128 v176;
  void (*v177)(uint64_t, uint64_t, __n128);
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;

  v217 = a2;
  v3 = type metadata accessor for TextComponent(0);
  __chkstk_darwin(v3);
  v184 = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorConstants(0);
  v219 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v218 = (uint64_t)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v181 - v8;
  v10 = type metadata accessor for _CodeImageScale_OrNil(0);
  __chkstk_darwin(v10);
  v201 = (uint64_t)&v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_3212C8);
  __chkstk_darwin(v12);
  v203 = (uint64_t)&v181 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Image.Scale(0);
  v206 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v190 = (char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_3212D0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v181 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for Text.Suffix(0, v17);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v21 = (char *)&v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_5C154(&qword_328430);
  __chkstk_darwin(v185);
  v23 = (char *)&v181 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_5C154(&qword_328450);
  v195 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v192 = (char *)&v181 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_5C154(&qword_328420);
  __chkstk_darwin(v194);
  v193 = (char *)&v181 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_5C154(&qword_328458);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v221 = (char *)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_5C154(&qword_328418);
  __chkstk_darwin(v189);
  v28 = (char *)&v181 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_5C154(&qword_328408);
  __chkstk_darwin(v199);
  v204 = (uint64_t)&v181 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_5C154(&qword_3283F8);
  __chkstk_darwin(v202);
  v207 = (uint64_t)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_5C154(&qword_320438);
  __chkstk_darwin(v205);
  v209 = (uint64_t)&v181 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_320440);
  __chkstk_darwin(v32);
  v210 = (uint64_t)&v181 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_5C154(&qword_3283D8);
  __chkstk_darwin(v212);
  v211 = (uint64_t)&v181 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5C154(&qword_3283C8);
  __chkstk_darwin(v35);
  v213 = (char *)&v181 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_99668((uint64_t)v23);
  v37 = type metadata accessor for TextComponentModel(0);
  v38 = (_QWORD *)(a1 + *(int *)(v37 + 32));
  v39 = v38[1];
  v215 = v5;
  v214 = v9;
  v208 = v14;
  v200 = v28;
  v196 = v38;
  v191 = v23;
  v220 = (int *)v37;
  if (v39)
  {
    v182 = v21;
    v222 = *v38;
    v223 = v39;
    v40 = sub_668F8();
    swift_bridgeObjectRetain(v39);
    v41 = Text.init<A>(_:)(&v222, &type metadata for String, v40);
    v42 = a1;
    v44 = v43;
    v46 = v45;
    v48 = v47;
    v49 = v220[15];
    v183 = v42;
    sub_5E1A4(v42 + v49, (uint64_t)v19, &qword_3212D0);
    v50 = type metadata accessor for FontSpec(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48))(v19, 1, v50);
    if ((_DWORD)v52 == 1)
    {
      sub_5E09C((uint64_t)v19, &qword_3212D0);
      v53 = 0;
    }
    else
    {
      v54 = FontSpec.font.getter(v52);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v50);
      v53 = Font.bold()(v54);
      swift_release(v54);
    }
    v55 = v46 & 1;
    v56 = Text.font(_:)(v53, v41, v44, v55, v48);
    v58 = v57;
    v60 = v59;
    v62 = v61 & 1;
    swift_release(v53);
    sub_6693C(v41, v44, v55);
    v63 = swift_bridgeObjectRelease(v48);
    LODWORD(v222) = static HierarchicalShapeStyle.primary.getter(v63);
    v64 = Text.foregroundStyle<A>(_:)(&v222, v56, v58, v62, v60, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v66 = v65;
    v68 = v67;
    v70 = v69 & 1;
    sub_6693C(v56, v58, v62);
    v71 = swift_bridgeObjectRelease(v60);
    v21 = v182;
    static Text.Suffix.truncated(_:)(v64, v66, v70, v68, v71);
    sub_6693C(v64, v66, v70);
    swift_bridgeObjectRelease(v68);
    a1 = v183;
  }
  else
  {
    static Text.Suffix.none.getter();
  }
  v72 = v188;
  v73 = v187;
  v74 = v186;
  v75 = v185;
  v76 = sub_1A212C();
  v77 = v192;
  v78 = v75;
  v79 = (uint64_t)v191;
  View.textSuffix(_:)(v21, v78, v76);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v21, v72);
  sub_5E09C(v79, &qword_328430);
  v80 = v220;
  v81 = (uint64_t *)(a1 + v220[18]);
  v82 = *v81;
  LOBYTE(v73) = *((_BYTE *)v81 + 8);
  KeyPath = swift_getKeyPath(&unk_263EF0);
  v84 = v195;
  v85 = (uint64_t)v193;
  (*(void (**)(char *, char *, uint64_t))(v195 + 16))(v193, v77, v74);
  v86 = v194;
  v87 = v85 + *(int *)(v194 + 36);
  *(_QWORD *)v87 = KeyPath;
  *(_QWORD *)(v87 + 8) = v82;
  *(_BYTE *)(v87 + 16) = v73;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v77, v74);
  v88 = a1 + v80[15];
  v89 = sub_1A2080();
  View.fontSpec(_:)(v88, v86, v89);
  sub_5E09C(v85, &qword_328420);
  v90 = v201;
  sub_5E11C(a1 + v80[12], v201, type metadata accessor for _CodeImageScale_OrNil);
  v91 = v90;
  v92 = v203;
  sub_66F14(v91, v203, &qword_3212C8);
  v93 = v206;
  v94 = v208;
  v95 = a1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v206 + 48))(v92, 1, v208) == 1)
  {
    v96 = v190;
    (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v190, enum case for Image.Scale.medium(_:), v94);
    sub_5E09C(v92, &qword_3212C8);
  }
  else
  {
    v96 = v190;
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v190, v92, v94);
  }
  v97 = v189;
  v98 = swift_getKeyPath(&unk_263F20);
  v99 = (uint64_t)v200;
  v100 = (uint64_t *)&v200[*(int *)(v97 + 36)];
  v101 = sub_5C154(&qword_3205E0);
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))((char *)v100 + *(int *)(v101 + 28), v96, v94);
  *v100 = v98;
  v102 = v197;
  v103 = v221;
  v104 = v198;
  (*(void (**)(uint64_t, char *, uint64_t))(v197 + 16))(v99, v221, v198);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v94);
  v105 = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v103, v104);
  v106 = static Edge.Set.top.getter(v105);
  v107 = v95;
  v108 = v95 + v80[16];
  v109 = *(_BYTE *)(v108 + 8);
  v110 = 0.0;
  v111 = 0.0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  if ((v109 & 1) == 0)
  {
    v111 = EdgeInsets.init(_all:)(*(double *)v108);
    v112 = v115;
    v113 = v116;
    v114 = v117;
  }
  v118 = v204;
  sub_5E1A4(v99, v204, &qword_328418);
  v119 = v118 + *(int *)(v199 + 36);
  *(_BYTE *)v119 = v106;
  *(double *)(v119 + 8) = v111;
  *(_QWORD *)(v119 + 16) = v112;
  *(_QWORD *)(v119 + 24) = v113;
  *(_QWORD *)(v119 + 32) = v114;
  *(_BYTE *)(v119 + 40) = v109;
  v120 = sub_5E09C(v99, &qword_328418);
  v121 = static Edge.Set.bottom.getter(v120);
  v122 = v107 + v80[17];
  v123 = *(_BYTE *)(v122 + 8);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = v216;
  if ((v123 & 1) == 0)
  {
    v110 = EdgeInsets.init(_all:)(*(double *)v122);
    v124 = v128;
    v125 = v129;
    v126 = v130;
  }
  v131 = v215;
  v132 = v207;
  sub_5E1A4(v118, v207, &qword_328408);
  v133 = v132 + *(int *)(v202 + 36);
  *(_BYTE *)v133 = v121;
  *(double *)(v133 + 8) = v110;
  *(_QWORD *)(v133 + 16) = v124;
  *(_QWORD *)(v133 + 24) = v125;
  *(_QWORD *)(v133 + 32) = v126;
  *(_BYTE *)(v133 + 40) = v123;
  v134 = sub_5E09C(v118, &qword_328408);
  v135 = static Edge.Set.leading.getter(v134);
  v136 = 2.0;
  if (!v196[1])
    v136 = 0.0;
  v137 = EdgeInsets.init(_all:)(v136);
  v139 = v138;
  v141 = v140;
  v143 = v142;
  v144 = v209;
  sub_5E1A4(v132, v209, &qword_3283F8);
  v145 = v144 + *(int *)(v205 + 36);
  *(_BYTE *)v145 = v135;
  *(double *)(v145 + 8) = v137;
  *(_QWORD *)(v145 + 16) = v139;
  *(_QWORD *)(v145 + 24) = v141;
  *(_QWORD *)(v145 + 32) = v143;
  *(_BYTE *)(v145 + 40) = 0;
  sub_5E09C(v132, &qword_3283F8);
  v146 = v107;
  v147 = 1;
  v148 = v210;
  sub_747D0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v210, 0.0, 1, 0.0, 1, *(_QWORD *)(v107 + v80[13]), *(_QWORD *)(v107 + v80[13] + 8));
  v149 = sub_5E09C(v144, &qword_320438);
  v150 = static Alignment.center.getter(v149);
  v151 = static Alignment.== infix(_:_:)(v150);
  v152 = (uint64_t)v213;
  if ((v151 & 1) == 0)
  {
    v153 = static Alignment.leading.getter(v151);
    v154 = static Alignment.== infix(_:_:)(v153);
    if ((v154 & 1) != 0)
    {
      v147 = 0;
    }
    else
    {
      v155 = static Alignment.trailing.getter(v154);
      if ((static Alignment.== infix(_:_:)(v155) & 1) != 0)
        v147 = 2;
      else
        v147 = 1;
    }
  }
  v156 = swift_getKeyPath(&unk_263F50);
  v157 = v211;
  sub_5E1A4(v148, v211, &qword_320440);
  v158 = v148;
  v159 = v212;
  v160 = v157 + *(int *)(v212 + 36);
  *(_QWORD *)v160 = v156;
  *(_BYTE *)(v160 + 8) = v147;
  sub_5E09C(v158, &qword_320440);
  v161 = sub_1A1EC4();
  View.accessibilityRespondsToUserInteraction(_:)(1, v159, v161);
  sub_5E09C(v157, &qword_3283D8);
  v162 = (uint64_t *)(v146 + v80[21]);
  v163 = v162[1];
  v164 = v127;
  v165 = v131;
  v166 = (uint64_t)v214;
  if (!v163)
    goto LABEL_24;
  v167 = v162[2];
  v222 = *v162;
  v223 = v163;
  v224 = v167;
  v225 = *(_OWORD *)(v162 + 3);
  sub_76AA0((uint64_t)v214);
  v168 = sub_11479C();
  (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v166, v165);
  if (!v168)
  {
LABEL_24:
    sub_76AA0(v218);
    v169 = (uint64_t *)(v146 + v80[14]);
    v170 = v169[1];
    if (v170)
    {
      v171 = *v169;
      v172 = v169[1];
    }
    else
    {
      v171 = 0;
      v172 = 0xE000000000000000;
    }
    v173 = (uint64_t)v184;
    v174 = swift_bridgeObjectRetain(v170);
    v175 = v218;
    v168 = ColorConstants.subscript.getter(v171, v172, v174);
    v176 = swift_bridgeObjectRelease(v172);
    v177 = *(void (**)(uint64_t, uint64_t, __n128))(v219 + 8);
    v177(v175, v165, v176);
    sub_5E11C(v164, v173, type metadata accessor for TextComponent);
    if (!v168)
    {
      v178 = sub_76AA0(v166);
      v168 = ColorConstants.booksLabel.getter(v178);
      ((void (*)(uint64_t, uint64_t))v177)(v166, v165);
    }
    sub_1A24F8(v173);
  }
  v179 = v217;
  sub_5E1A4(v152, v217, &qword_3283C8);
  *(_QWORD *)(v179 + *(int *)(sub_5C154(&qword_328390) + 36)) = v168;
  return sub_5E09C(v152, &qword_3283C8);
}

uint64_t sub_1A1CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(v5, (uint64_t)v4, type metadata accessor for TextComponent);
  v6 = sub_648E0((unint64_t *)&unk_32A080, type metadata accessor for TextComponent, (uint64_t)&unk_263E84);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_1A1D54()
{
  return sub_648E0(&qword_328388, type metadata accessor for TextComponent, (uint64_t)&unk_263E34);
}

uint64_t sub_1A1D80(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9488, 1);
}

uint64_t sub_1A1D90()
{
  return sub_648E0(&qword_3200A8, type metadata accessor for TextComponentModel, (uint64_t)&unk_25A438);
}

unint64_t sub_1A1DBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3283B8;
  if (!qword_3283B8)
  {
    v1 = sub_667D0(&qword_328390);
    sub_1A1E40();
    sub_67060(&qword_328440, &qword_328448, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3283B8);
  }
  return result;
}

unint64_t sub_1A1E40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3283C0;
  if (!qword_3283C0)
  {
    v1 = sub_667D0(&qword_3283C8);
    sub_1A1EC4();
    sub_648E0(&qword_31F710, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3283C0);
  }
  return result;
}

unint64_t sub_1A1EC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3283D0;
  if (!qword_3283D0)
  {
    v1 = sub_667D0(&qword_3283D8);
    sub_80008(&qword_3283E0, &qword_320440, (void (*)(void))sub_1A1F68);
    sub_67060(&qword_31F638, &qword_31F640, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3283D0);
  }
  return result;
}

uint64_t sub_1A1F68()
{
  return sub_80008(&qword_3283E8, &qword_320438, (void (*)(void))sub_1A1F8C);
}

uint64_t sub_1A1F8C()
{
  return sub_80008(&qword_3283F0, &qword_3283F8, (void (*)(void))sub_1A1FB0);
}

uint64_t sub_1A1FB0()
{
  return sub_80008(&qword_328400, &qword_328408, (void (*)(void))sub_1A1FD4);
}

unint64_t sub_1A1FD4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_328410;
  if (!qword_328410)
  {
    v1 = sub_667D0(&qword_328418);
    v2[0] = sub_667D0(&qword_328420);
    v2[1] = sub_1A2080();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontSpec(_:)>>, 1);
    sub_67060(&qword_3205F8, &qword_3205E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328410);
  }
  return result;
}

unint64_t sub_1A2080()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_328428;
  if (!qword_328428)
  {
    v1 = sub_667D0(&qword_328420);
    v2[0] = sub_667D0(&qword_328430);
    v2[1] = sub_1A212C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.textSuffix(_:)>>, 1);
    sub_67060(&qword_326A50, &qword_326A58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328428);
  }
  return result;
}

unint64_t sub_1A212C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328438;
  if (!qword_328438)
  {
    v1 = sub_667D0(&qword_328430);
    sub_67060(&qword_321478, &qword_321468, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_9B90C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328438);
  }
  return result;
}

uint64_t sub_1A21B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = type metadata accessor for TextComponent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for TextComponentModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v4 + v5 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(v0 + v4);
  v12 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = v9 & ~v8;
  v15 = (_QWORD *)((char *)v11 + *(int *)(v1 + 20));
  v16 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v18 = type metadata accessor for FontConstants(0, v17);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v15, v18);
  }
  else
  {
    swift_release(*v15);
  }
  v19 = v0 + v14;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v14));
  if (*(_QWORD *)(v0 + v14 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v19 + 40));
  v20 = v19 + v6[6];
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v6[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v6[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v6[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v6[11] + 8));
  v23 = v19 + v6[12];
  v24 = type metadata accessor for Image.Scale(0);
  v25 = *(_QWORD *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v6[14] + 8));
  v26 = v19 + v6[15];
  v27 = type metadata accessor for FontSpec(0);
  v28 = *(_QWORD *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v6[19] + 8));
  v29 = v19 + v6[20];
  v30 = type metadata accessor for AccessibilityTraits(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  v32 = v19 + v6[21];
  v33 = *(_QWORD *)(v32 + 8);
  if (v33)
  {
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(*(_QWORD *)(v32 + 32));
  }
  return swift_deallocObject(v0, v14 + v10, v3 | v8 | 7);
}

uint64_t sub_1A2470@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for TextComponent(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TextComponentModel(0) - 8) + 80);
  return sub_1A0EA8(v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t sub_1A24F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TextComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A2538()
{
  unint64_t result;
  uint64_t v1;
  __n128 v2;
  _QWORD v3[4];

  result = qword_328460;
  if (!qword_328460)
  {
    v1 = sub_667D0((uint64_t *)&unk_328468);
    v3[0] = sub_667D0(&qword_3283A0);
    v3[1] = type metadata accessor for PlainButtonStyle(255, v2);
    v3[2] = sub_67060(&qword_3283B0, &qword_3283A0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v3[3] = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1A1DBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328460);
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesSeeAllPaginationIntentImplementation()
{
  return &type metadata for SeriesSeeAllPaginationIntentImplementation;
}

uint64_t sub_1A2638()
{
  return sub_648E0(&qword_31FFB0, type metadata accessor for SeriesSeeAllPaginationIntent, (uint64_t)&protocol conformance descriptor for SeriesSeeAllPaginationIntent);
}

int64_t sub_1A2664(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A26A8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (result)
      v4 = v3;
    else
      v4 = 0;
    if (v2 >= v4)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A26E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v4[31] = a3;
  v4[32] = a4;
  v4[29] = a1;
  v4[30] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_323C08) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[33] = swift_task_alloc(v5);
  v4[34] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3257E8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[35] = swift_task_alloc(v6);
  v4[36] = swift_task_alloc(v6);
  v7 = sub_5C154(&qword_3257F0);
  v4[37] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[38] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[39] = swift_task_alloc(v9);
  v4[40] = swift_task_alloc(v9);
  v10 = sub_5C154(&qword_328480);
  v4[41] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[42] = v11;
  v4[43] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_328488);
  v4[44] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[45] = v13;
  v4[46] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PaginationInfo(0);
  v4[47] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[48] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[49] = swift_task_alloc(v16);
  v4[50] = swift_task_alloc(v16);
  v4[51] = swift_task_alloc(v16);
  v17 = type metadata accessor for SeriesType(0);
  v4[52] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[53] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[54] = swift_task_alloc(v19);
  v4[55] = swift_task_alloc(v19);
  v20 = sub_5C154(&qword_320908);
  v21 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v4[56] = v21;
  *v21 = v4;
  v21[1] = sub_1A28E0;
  return BaseObjectGraph.inject<A>(_:)(v4 + 2, v20, v20);
}

uint64_t sub_1A28E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 448);
  v3 = *v1;
  *(_QWORD *)(v3 + 456) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1A4528, 0, 0);
  v5 = sub_5C154(&qword_31FE78);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 464) = v6;
  *v6 = v3;
  v6[1] = sub_1A29A0;
  return BaseObjectGraph.inject<A>(_:)(v3 + 56, v5, v5);
}

uint64_t sub_1A29A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 464);
  *(_QWORD *)(*(_QWORD *)v1 + 472) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1A4608;
  else
    v3 = sub_1A2A04;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1A2A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t, char *, unint64_t);
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int *v59;

  v58 = (_QWORD *)(v0 + 56);
  v1 = v0 + 96;
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD **)(v0 + 240);
  sub_5E0D8((uint64_t)(v5 + 2), v0 + 96);
  v6 = v5[5];
  v7 = v5[6];
  sub_66898(v5 + 2, v6);
  dispatch thunk of SeriesInfo.seriesType.getter(v6, v7, v8);
  v9 = type metadata accessor for SeriesSeeAllPaginationIntent(0);
  *(_QWORD *)(v0 + 480) = v9;
  v10 = *(int *)(v9 + 24);
  *(_DWORD *)(v0 + 616) = v10;
  v11 = (char *)v5 + v10;
  v12 = *(void (**)(uint64_t, char *, unint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 488) = v12;
  v12(v2, v11, v3);
  v13 = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 88))(v2, v3);
  *(_DWORD *)(v0 + 620) = v13;
  if (v13 == enum case for PaginationInfo.nextHref(_:))
  {
    v14 = *(uint64_t **)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 384) + 96))(v14, *(_QWORD *)(v0 + 376));
    v17 = *v14;
    v16 = v14[1];
    v18 = type metadata accessor for MAsset(0);
    PaginatedResourceSetIntent.init(href:limit:)(v17, v16, v15, 0, v18);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    sub_66898(v58, v19);
    v21 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
    *(_QWORD *)(v0 + 496) = v21;
    v22 = sub_67060(&qword_3284A8, &qword_328488, (uint64_t)&protocol conformance descriptor for PaginatedResourceSetIntent<A>);
    *v21 = v0;
    v21[1] = sub_1A2E74;
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352), v22, v19, v20);
  }
  if (v13 != enum case for PaginationInfo.nextAssetIDs(_:))
  {
    v32 = *(_QWORD *)(v0 + 408);
    v34 = *(_QWORD *)(v0 + 376);
    v33 = *(_QWORD *)(v0 + 384);
    v35 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 416));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
    v36 = sub_5C154(&qword_31EF08);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    v38 = *(_QWORD *)(v0 + 432);
    v37 = *(_QWORD *)(v0 + 440);
    v40 = *(_QWORD *)(v0 + 400);
    v39 = *(_QWORD *)(v0 + 408);
    v41 = *(_QWORD *)(v0 + 392);
    v42 = *(_QWORD *)(v0 + 368);
    v43 = *(_QWORD *)(v0 + 344);
    v52 = *(_QWORD *)(v0 + 320);
    v53 = *(_QWORD *)(v0 + 312);
    v54 = *(_QWORD *)(v0 + 288);
    v55 = *(_QWORD *)(v0 + 280);
    v56 = *(_QWORD *)(v0 + 272);
    v57 = *(_QWORD *)(v0 + 264);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v58);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v24 = *(uint64_t **)(v0 + 408);
  v25 = *(_QWORD *)(v0 + 256);
  v26 = (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 384) + 96))(v24, *(_QWORD *)(v0 + 376));
  v27 = *v24;
  *(_QWORD *)(v0 + 552) = *v24;
  if (v25 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v24 = (uint64_t *)sub_1A2664(*(_QWORD *)(v0 + 256), v27);
  v1 = v28;
  v2 = v29;
  v3 = v30;
  if ((v30 & 1) != 0)
  {
    v44 = type metadata accessor for __ContiguousArrayStorageBase(0);
    swift_unknownObjectRetain_n(v24, 2, v45);
    swift_bridgeObjectRetain(v27);
    v46 = (_QWORD *)swift_dynamicCastClass(v24, v44);
    if (!v46)
    {
      swift_unknownObjectRelease(v24);
      v46 = _swiftEmptyArrayStorage;
    }
    v47 = v46[2];
    v26 = swift_release(v46);
    if (!__OFSUB__(v3 >> 1, v2))
    {
      v26 = (uint64_t)v24;
      if (v47 == (v3 >> 1) - v2)
      {
        v31 = (_QWORD *)swift_dynamicCastClass(v24, v44);
        if (!v31)
        {
          swift_unknownObjectRelease(v24);
          v31 = _swiftEmptyArrayStorage;
        }
        goto LABEL_15;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    swift_unknownObjectRelease(v26);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v27);
LABEL_7:
  v31 = sub_1A59D0((uint64_t)v24, v1, v2, v3);
LABEL_15:
  *(_QWORD *)(v0 + 560) = v31;
  swift_unknownObjectRelease(v24);
  v48 = *(_QWORD *)(v0 + 40);
  v49 = *(_QWORD *)(v0 + 48);
  sub_66898((_QWORD *)(v0 + 16), v48);
  *(_QWORD *)(v0 + 136) = 0;
  v50 = *(int **)(v49 + 32);
  v59 = (int *)((char *)v50 + *v50);
  v51 = (_QWORD *)swift_task_alloc(v50[1]);
  *(_QWORD *)(v0 + 568) = v51;
  *v51 = v0;
  v51[1] = sub_1A35E4;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v59)(v31, v0 + 136, v48, v49);
}

uint64_t sub_1A2E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1A46F0;
  else
    v3 = sub_1A2ED8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1A2ED8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int *v26;

  v1 = v0;
  v2 = v0[63];
  v3 = v0[55];
  v4 = PaginatedResourceSet.resources.getter(v0[41]);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v3;
  v6 = (uint64_t)sub_1511D8((void (*)(uint64_t *__return_ptr, id *))sub_1A6420, v5, v4);
  v0[64] = v6;
  v0[65] = v2;
  swift_bridgeObjectRelease(v4);
  swift_task_dealloc(v5);
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v24 = v6;
    else
      v24 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
  }
  if (!v7)
    goto LABEL_13;
  result = sub_20C95C(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v25 = v1;
    v9 = 0;
    v10 = v6 & 0xC000000000000001;
    v11 = v6;
    do
    {
      if (v10)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
      else
        v12 = *(id *)(v6 + 8 * v9 + 32);
      v13 = v12;
      v14 = MResource.id.getter(v12);
      v16 = v15;

      v18 = _swiftEmptyArrayStorage[2];
      v17 = _swiftEmptyArrayStorage[3];
      if (v18 >= v17 >> 1)
        sub_20C95C(v17 > 1, v18 + 1, 1);
      ++v9;
      _swiftEmptyArrayStorage[2] = v18 + 1;
      v19 = &_swiftEmptyArrayStorage[2 * v18];
      v19[4] = v14;
      v19[5] = v16;
      v6 = v11;
    }
    while (v7 != v9);
    v1 = v25;
LABEL_13:
    v1[66] = _swiftEmptyArrayStorage;
    v20 = v1[5];
    v21 = v1[6];
    sub_66898(v1 + 2, v20);
    v1[26] = 0;
    v22 = *(int **)(v21 + 32);
    v26 = (int *)((char *)v22 + *v22);
    v23 = (_QWORD *)swift_task_alloc(v22[1]);
    v1[67] = v23;
    *v23 = v1;
    v23[1] = sub_1A30E0;
    return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))v26)(_swiftEmptyArrayStorage, v1 + 26, v20, v21);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A30E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1A3148, 0, 0);
}

uint64_t sub_1A3148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t, __n128);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 512);
  v61 = *(_QWORD *)(v0 + 400);
  v64 = *(_QWORD *)(v0 + 376);
  v67 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v0 + 488);
  v70 = *(_QWORD *)(v0 + 328);
  v3 = *(uint64_t **)(v0 + 240);
  v58 = (char *)v3 + *(int *)(v0 + 616);
  swift_bridgeObjectRetain(v1);
  v4 = sub_1A5DF8(v2, v1);
  swift_bridgeObjectRelease_n(v1, 2);
  swift_bridgeObjectRelease(v2);
  sub_195B20((uint64_t)v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4);
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v0 + 96;
  v8 = sub_1DDB40((void (*)(__int128 *__return_ptr, uint64_t))sub_1A6204, v7, v6);
  swift_bridgeObjectRelease(v6);
  swift_task_dealloc(v7);
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v9 + 16) = v0 + 96;
  *(_QWORD *)(v9 + 24) = v3;
  v10 = sub_1A6218((uint64_t)v8, (void (*)(_QWORD, char *))sub_1A6498, v9);
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v9);
  v11 = sub_1345A8((uint64_t)v10);
  v12 = swift_bridgeObjectRelease(v10);
  v13 = *v3;
  v14 = v3[1];
  v67(v61, v58, v64, v12);
  v15 = swift_bridgeObjectRetain(v14);
  PaginatedResourceSet.nextHref.getter(v70, v15);
  v17 = v16;
  v18 = swift_bridgeObjectRelease(v16);
  v56 = v13;
  v57 = v11;
  if (!v17)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 384) + 56))(*(_QWORD *)(v0 + 272), 1, 1, *(_QWORD *)(v0 + 376));
    goto LABEL_5;
  }
  result = PaginatedResourceSet.nextHref.getter(*(_QWORD *)(v0 + 328), v18);
  if (v20)
  {
    v21 = *(unsigned int *)(v0 + 620);
    v22 = *(_QWORD *)(v0 + 376);
    v23 = *(_QWORD *)(v0 + 384);
    v24 = *(uint64_t **)(v0 + 272);
    *v24 = result;
    v24[1] = v20;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 104))(v24, v21, v22);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v24, 0, 1, v22);
LABEL_5:
    v68 = *(_QWORD *)(v0 + 440);
    v62 = *(_QWORD *)(v0 + 424);
    v65 = *(_QWORD *)(v0 + 416);
    v59 = *(_QWORD *)(v0 + 368);
    v54 = *(_QWORD *)(v0 + 360);
    v55 = *(_QWORD *)(v0 + 352);
    v25 = *(_QWORD *)(v0 + 320);
    v52 = *(_QWORD *)(v0 + 328);
    v53 = *(_QWORD *)(v0 + 344);
    v26 = *(_QWORD *)(v0 + 304);
    v50 = *(_QWORD *)(v0 + 296);
    v51 = *(_QWORD *)(v0 + 336);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(uint64_t **)(v0 + 232);
    PaginationUpdate.init(source:next:)(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 272));
    v29 = type metadata accessor for PaginationUpdate(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 0, 1, v29);
    v30 = type metadata accessor for Page(0);
    v31 = type metadata accessor for Shelf(0);
    v32 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
    v33 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
    PageUpdateInstruction.ShelfItemUpdateDescriptor.init(items:shelfID:paginationUpdate:)(v57, v56, v14, v27, v30, v31, v32, v33);
    v34 = sub_5C154(&qword_328490);
    v35 = *(unsigned __int8 *)(v26 + 80);
    v36 = (v35 + 32) & ~v35;
    v37 = swift_allocObject(v34, v36 + *(_QWORD *)(v26 + 72), v35 | 7);
    *(_OWORD *)(v37 + 16) = xmmword_258070;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v37 + v36, v25, v50);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v52);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v59, v55);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v68, v65);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
    *v28 = v37;
    v38 = enum case for PageUpdateInstruction.appendItems<A, B>(_:);
    v39 = sub_5C154(&qword_31EF08);
    v40 = *(_QWORD *)(v39 - 8);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v40 + 104))(v28, v38, v39);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, v39);
    v41 = *(_QWORD *)(v0 + 432);
    v42 = *(_QWORD *)(v0 + 440);
    v44 = *(_QWORD *)(v0 + 400);
    v43 = *(_QWORD *)(v0 + 408);
    v45 = *(_QWORD *)(v0 + 392);
    v46 = *(_QWORD *)(v0 + 368);
    v47 = *(_QWORD *)(v0 + 344);
    v49 = *(_QWORD *)(v0 + 312);
    v48 = *(_QWORD *)(v0 + 320);
    v60 = *(_QWORD *)(v0 + 288);
    v63 = *(_QWORD *)(v0 + 280);
    v66 = *(_QWORD *)(v0 + 272);
    v69 = *(_QWORD *)(v0 + 264);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v42);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v60);
    swift_task_dealloc(v63);
    swift_task_dealloc(v66);
    swift_task_dealloc(v69);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A35E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 568);
  *(_QWORD *)(*(_QWORD *)v1 + 576) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1A3640, 0, 0);
}

uint64_t sub_1A3640()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  __n128 v18;
  Swift::String v19;
  void *object;

  v1 = v0[54];
  v2 = v0[52];
  v3 = v0[53];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, v0[55], v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v4 == enum case for SeriesType.audiobook(_:))
  {
    v5 = v0 + 24;
    v6 = v0[70];
    v7 = v0[10];
    v8 = v0[11];
    sub_66898(v0 + 7, v7);
    v0[25] = v6;
    v9 = v0 + 25;
    v10 = async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1];
    swift_bridgeObjectRetain(v6);
    v11 = (_QWORD *)swift_task_alloc(v10);
    v0[73] = v11;
    v12 = sub_5C154(&qword_320948);
    v13 = sub_67060(&qword_320950, &qword_320948, (uint64_t)&protocol conformance descriptor for StoreCatalogIntent<A>);
    v14 = sub_1A38A8;
LABEL_5:
    *v11 = v0;
    v11[1] = v14;
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v5, v9, v0[31], v12, v13, v7, v8);
  }
  if (v4 == enum case for SeriesType.book(_:))
  {
    v5 = v0 + 18;
    v15 = v0[70];
    v7 = v0[10];
    v8 = v0[11];
    sub_66898(v0 + 7, v7);
    v0[19] = v15;
    v9 = v0 + 19;
    v16 = async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1];
    swift_bridgeObjectRetain(v15);
    v11 = (_QWORD *)swift_task_alloc(v16);
    v0[75] = v11;
    v12 = sub_5C154(&qword_320928);
    v13 = sub_67060(&qword_320930, &qword_320928, (uint64_t)&protocol conformance descriptor for StoreCatalogIntent<A>);
    v14 = sub_1A3EE8;
    goto LABEL_5;
  }
  _StringGuts.grow(_:)(22);
  v18 = swift_bridgeObjectRelease(0xE000000000000000);
  v19._countAndFlagsBits = SeriesType.rawValue.getter(v18);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(object);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000014, 0x8000000000273D10, "BookStoreUI/SeriesSeeAllPaginationIntentImplementation.swift", 60, 2, 77, 0);
}

uint64_t sub_1A38A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 584);
  *(_QWORD *)(*v1 + 592) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1A481C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 560));
    v4 = sub_1A3914;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1A3914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;

  v1 = v0 + 96;
  v2 = *(_QWORD *)(v0 + 192);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v74 = *(_QWORD *)(v0 + 192);
    else
      v74 = v2 & 0xFFFFFFFFFFFFFF8;
    v75 = type metadata accessor for MAsset(0);
    swift_bridgeObjectRetain(v2);
    v4 = _bridgeCocoaArray<A>(_:)(v74, v75);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 192));
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v3);
    type metadata accessor for MAsset(0);
    v4 = v2;
  }
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)(v0 + 184) = v4;
  v5 = sub_5C154(&qword_328498);
  v6 = sub_67060(&qword_3284A0, &qword_328498, (uint64_t)&protocol conformance descriptor for [A]);
  v7 = Collection.isNotEmpty.getter(v5, v6);
  v8 = *(_QWORD *)(v0 + 576);
  v9 = *(_QWORD *)(v0 + 560);
  if ((v7 & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 560));
    swift_bridgeObjectRetain(v8);
    v10 = sub_1A5DF8(v4, v8);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRetain(v8);
    v10 = sub_1A6024(v9, v8);
    swift_bridgeObjectRelease(v8);
    swift_release(v9);
  }
  v11 = *(_QWORD *)(v0 + 552);
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
  v14 = swift_task_alloc(32);
  *(_QWORD *)(v14 + 16) = v1;
  v15 = sub_1DDB40((void (*)(__int128 *__return_ptr, uint64_t))sub_1A6204, v14, (uint64_t)v10);
  swift_bridgeObjectRelease(v10);
  swift_task_dealloc(v14);
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = v1;
  *(_QWORD *)(v16 + 24) = v13;
  v17 = sub_1A6218((uint64_t)v15, (void (*)(_QWORD, char *))sub_1A6500, v16);
  swift_bridgeObjectRelease(v15);
  swift_task_dealloc(v16);
  v18 = sub_1A26A8(v12, v11);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  if ((v23 & 1) == 0)
    goto LABEL_7;
  v26 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v28 = swift_unknownObjectRetain_n(v18, 2, v27);
  v29 = (_QWORD *)swift_dynamicCastClass(v28, v26);
  if (!v29)
  {
    swift_unknownObjectRelease(v18);
    v29 = _swiftEmptyArrayStorage;
  }
  v30 = v29[2];
  v31 = swift_release(v29);
  if (__OFSUB__(v24 >> 1, v22))
  {
    __break(1u);
    goto LABEL_23;
  }
  v31 = v18;
  if (v30 != (v24 >> 1) - v22)
  {
LABEL_23:
    swift_unknownObjectRelease(v31);
LABEL_7:
    v25 = sub_1A59D0(v18, v20, v22, v24);
    goto LABEL_14;
  }
  v25 = (_QWORD *)swift_dynamicCastClass(v18, v26);
  if (!v25)
  {
    swift_unknownObjectRelease(v18);
    v25 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  v32 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v0 + 488);
  v33 = *(int *)(v0 + 616);
  v34 = *(_QWORD *)(v0 + 392);
  v35 = *(_QWORD *)(v0 + 376);
  v36 = *(uint64_t **)(v0 + 240);
  swift_unknownObjectRelease(v18);
  v37 = (char *)v36 + v33;
  v83 = sub_1345A8((uint64_t)v17);
  v38 = swift_bridgeObjectRelease(v17);
  v39 = *v36;
  v40 = v36[1];
  v81 = v39;
  v32(v34, v37, v35, v38);
  if (v25[2])
  {
    v41 = *(unsigned int *)(v0 + 620);
    v42 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 384);
    v44 = *(_QWORD **)(v0 + 264);
    *v44 = v25;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v43 + 104))(v44, v41, v42);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
    swift_bridgeObjectRetain(v40);
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 376);
    v46 = *(_QWORD *)(v0 + 384);
    v47 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRetain(v40);
    swift_release(v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1, 1, v45);
  }
  v78 = *(_QWORD *)(v0 + 416);
  v79 = *(_QWORD *)(v0 + 440);
  v49 = *(_QWORD *)(v0 + 304);
  v48 = *(_QWORD *)(v0 + 312);
  v76 = *(_QWORD *)(v0 + 296);
  v77 = *(_QWORD *)(v0 + 424);
  v50 = *(_QWORD *)(v0 + 280);
  v51 = *(uint64_t **)(v0 + 232);
  PaginationUpdate.init(source:next:)(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 264));
  v52 = type metadata accessor for PaginationUpdate(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1, v52);
  v53 = type metadata accessor for Page(0);
  v54 = type metadata accessor for Shelf(0);
  v55 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v56 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateInstruction.ShelfItemUpdateDescriptor.init(items:shelfID:paginationUpdate:)(v83, v81, v40, v50, v53, v54, v55, v56);
  v57 = sub_5C154(&qword_328490);
  v58 = *(unsigned __int8 *)(v49 + 80);
  v59 = (v58 + 32) & ~v58;
  v60 = swift_allocObject(v57, v59 + *(_QWORD *)(v49 + 72), v58 | 7);
  *(_OWORD *)(v60 + 16) = xmmword_258070;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v60 + v59, v48, v76);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v78);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  *v51 = v60;
  v61 = enum case for PageUpdateInstruction.appendItems<A, B>(_:);
  v62 = sub_5C154(&qword_31EF08);
  v63 = *(_QWORD *)(v62 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v63 + 104))(v51, v61, v62);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v51, 0, 1, v62);
  v64 = *(_QWORD *)(v0 + 432);
  v65 = *(_QWORD *)(v0 + 440);
  v67 = *(_QWORD *)(v0 + 400);
  v66 = *(_QWORD *)(v0 + 408);
  v68 = *(_QWORD *)(v0 + 392);
  v69 = *(_QWORD *)(v0 + 368);
  v70 = *(_QWORD *)(v0 + 344);
  v72 = *(_QWORD *)(v0 + 312);
  v71 = *(_QWORD *)(v0 + 320);
  v80 = *(_QWORD *)(v0 + 288);
  v82 = *(_QWORD *)(v0 + 280);
  v84 = *(_QWORD *)(v0 + 272);
  v85 = *(_QWORD *)(v0 + 264);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v65);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3EE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 600);
  *(_QWORD *)(*v1 + 608) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1A4E6C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 560));
    v4 = sub_1A3F54;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1A3F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;

  v1 = v0 + 96;
  v2 = *(_QWORD *)(v0 + 144);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v74 = *(_QWORD *)(v0 + 144);
    else
      v74 = v2 & 0xFFFFFFFFFFFFFF8;
    v75 = type metadata accessor for MAsset(0);
    swift_bridgeObjectRetain(v2);
    v4 = _bridgeCocoaArray<A>(_:)(v74, v75);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 144));
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v3);
    type metadata accessor for MAsset(0);
    v4 = v2;
  }
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)(v0 + 184) = v4;
  v5 = sub_5C154(&qword_328498);
  v6 = sub_67060(&qword_3284A0, &qword_328498, (uint64_t)&protocol conformance descriptor for [A]);
  v7 = Collection.isNotEmpty.getter(v5, v6);
  v8 = *(_QWORD *)(v0 + 576);
  v9 = *(_QWORD *)(v0 + 560);
  if ((v7 & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 560));
    swift_bridgeObjectRetain(v8);
    v10 = sub_1A5DF8(v4, v8);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRetain(v8);
    v10 = sub_1A6024(v9, v8);
    swift_bridgeObjectRelease(v8);
    swift_release(v9);
  }
  v11 = *(_QWORD *)(v0 + 552);
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
  v14 = swift_task_alloc(32);
  *(_QWORD *)(v14 + 16) = v1;
  v15 = sub_1DDB40((void (*)(__int128 *__return_ptr, uint64_t))sub_1A6204, v14, (uint64_t)v10);
  swift_bridgeObjectRelease(v10);
  swift_task_dealloc(v14);
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = v1;
  *(_QWORD *)(v16 + 24) = v13;
  v17 = sub_1A6218((uint64_t)v15, (void (*)(_QWORD, char *))sub_1A6500, v16);
  swift_bridgeObjectRelease(v15);
  swift_task_dealloc(v16);
  v18 = sub_1A26A8(v12, v11);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  if ((v23 & 1) == 0)
    goto LABEL_7;
  v26 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v28 = swift_unknownObjectRetain_n(v18, 2, v27);
  v29 = (_QWORD *)swift_dynamicCastClass(v28, v26);
  if (!v29)
  {
    swift_unknownObjectRelease(v18);
    v29 = _swiftEmptyArrayStorage;
  }
  v30 = v29[2];
  v31 = swift_release(v29);
  if (__OFSUB__(v24 >> 1, v22))
  {
    __break(1u);
    goto LABEL_23;
  }
  v31 = v18;
  if (v30 != (v24 >> 1) - v22)
  {
LABEL_23:
    swift_unknownObjectRelease(v31);
LABEL_7:
    v25 = sub_1A59D0(v18, v20, v22, v24);
    goto LABEL_14;
  }
  v25 = (_QWORD *)swift_dynamicCastClass(v18, v26);
  if (!v25)
  {
    swift_unknownObjectRelease(v18);
    v25 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  v32 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v0 + 488);
  v33 = *(int *)(v0 + 616);
  v34 = *(_QWORD *)(v0 + 392);
  v35 = *(_QWORD *)(v0 + 376);
  v36 = *(uint64_t **)(v0 + 240);
  swift_unknownObjectRelease(v18);
  v37 = (char *)v36 + v33;
  v83 = sub_1345A8((uint64_t)v17);
  v38 = swift_bridgeObjectRelease(v17);
  v39 = *v36;
  v40 = v36[1];
  v81 = v39;
  v32(v34, v37, v35, v38);
  if (v25[2])
  {
    v41 = *(unsigned int *)(v0 + 620);
    v42 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 384);
    v44 = *(_QWORD **)(v0 + 264);
    *v44 = v25;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v43 + 104))(v44, v41, v42);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
    swift_bridgeObjectRetain(v40);
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 376);
    v46 = *(_QWORD *)(v0 + 384);
    v47 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRetain(v40);
    swift_release(v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1, 1, v45);
  }
  v78 = *(_QWORD *)(v0 + 416);
  v79 = *(_QWORD *)(v0 + 440);
  v49 = *(_QWORD *)(v0 + 304);
  v48 = *(_QWORD *)(v0 + 312);
  v76 = *(_QWORD *)(v0 + 296);
  v77 = *(_QWORD *)(v0 + 424);
  v50 = *(_QWORD *)(v0 + 280);
  v51 = *(uint64_t **)(v0 + 232);
  PaginationUpdate.init(source:next:)(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 264));
  v52 = type metadata accessor for PaginationUpdate(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1, v52);
  v53 = type metadata accessor for Page(0);
  v54 = type metadata accessor for Shelf(0);
  v55 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v56 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateInstruction.ShelfItemUpdateDescriptor.init(items:shelfID:paginationUpdate:)(v83, v81, v40, v50, v53, v54, v55, v56);
  v57 = sub_5C154(&qword_328490);
  v58 = *(unsigned __int8 *)(v49 + 80);
  v59 = (v58 + 32) & ~v58;
  v60 = swift_allocObject(v57, v59 + *(_QWORD *)(v49 + 72), v58 | 7);
  *(_OWORD *)(v60 + 16) = xmmword_258070;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v60 + v59, v48, v76);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v78);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  *v51 = v60;
  v61 = enum case for PageUpdateInstruction.appendItems<A, B>(_:);
  v62 = sub_5C154(&qword_31EF08);
  v63 = *(_QWORD *)(v62 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v63 + 104))(v51, v61, v62);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v51, 0, 1, v62);
  v64 = *(_QWORD *)(v0 + 432);
  v65 = *(_QWORD *)(v0 + 440);
  v67 = *(_QWORD *)(v0 + 400);
  v66 = *(_QWORD *)(v0 + 408);
  v68 = *(_QWORD *)(v0 + 392);
  v69 = *(_QWORD *)(v0 + 368);
  v70 = *(_QWORD *)(v0 + 344);
  v72 = *(_QWORD *)(v0 + 312);
  v71 = *(_QWORD *)(v0 + 320);
  v80 = *(_QWORD *)(v0 + 288);
  v82 = *(_QWORD *)(v0 + 280);
  v84 = *(_QWORD *)(v0 + 272);
  v85 = *(_QWORD *)(v0 + 264);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v65);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A4528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 280);
  v12 = *(_QWORD *)(v0 + 272);
  v13 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A4608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 280);
  v12 = *(_QWORD *)(v0 + 272);
  v13 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A46F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 352));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  v4 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 368);
  v9 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A481C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;

  v1 = v0 + 96;
  swift_release(*(_QWORD *)(v0 + 560));
  v2 = *(_QWORD *)(v0 + 592);
  if (qword_31E658 != -1)
    swift_once(&qword_31E658, sub_126D24);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_325298);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v9 = _convertErrorToNSError(_:)(v2);
    *(_QWORD *)(v0 + 176) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v2);
    _os_log_impl(&dword_0, v5, v6, "Failed to fetch store assets: %@", v7, 0xCu);
    v10 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v8, 1, v10);
    v11 = v8;
    v1 = v0 + 96;
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 576);
  v13 = *(_QWORD *)(v0 + 560);

  swift_bridgeObjectRetain(v12);
  v14 = sub_1A6024(v13, v12);
  swift_bridgeObjectRelease(v12);
  swift_errorRelease(v2);
  swift_release(v13);
  v15 = *(_QWORD *)(v0 + 552);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
  v18 = swift_task_alloc(32);
  *(_QWORD *)(v18 + 16) = v1;
  v19 = sub_1DDB40((void (*)(__int128 *__return_ptr, uint64_t))sub_1A6204, v18, (uint64_t)v14);
  swift_bridgeObjectRelease(v14);
  swift_task_dealloc(v18);
  v20 = swift_task_alloc(32);
  *(_QWORD *)(v20 + 16) = v1;
  *(_QWORD *)(v20 + 24) = v17;
  v21 = sub_1A6218((uint64_t)v19, (void (*)(_QWORD, char *))sub_1A6500, v20);
  swift_bridgeObjectRelease(v19);
  swift_task_dealloc(v20);
  v22 = sub_1A26A8(v16, v15);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  if ((v27 & 1) == 0)
    goto LABEL_7;
  v30 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v32 = swift_unknownObjectRetain_n(v22, 2, v31);
  v33 = (_QWORD *)swift_dynamicCastClass(v32, v30);
  if (!v33)
  {
    swift_unknownObjectRelease(v22);
    v33 = _swiftEmptyArrayStorage;
  }
  v34 = v33[2];
  v35 = swift_release(v33);
  if (__OFSUB__(v28 >> 1, v26))
  {
    __break(1u);
    goto LABEL_19;
  }
  v35 = v22;
  if (v34 != (v28 >> 1) - v26)
  {
LABEL_19:
    swift_unknownObjectRelease(v35);
LABEL_7:
    v29 = sub_1A59D0(v22, v24, v26, v28);
    goto LABEL_14;
  }
  v29 = (_QWORD *)swift_dynamicCastClass(v22, v30);
  if (!v29)
  {
    swift_unknownObjectRelease(v22);
    v29 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  v36 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v0 + 488);
  v37 = *(int *)(v0 + 616);
  v38 = *(_QWORD *)(v0 + 392);
  v39 = *(_QWORD *)(v0 + 376);
  v40 = *(uint64_t **)(v0 + 240);
  swift_unknownObjectRelease(v22);
  v41 = (char *)v40 + v37;
  v85 = sub_1345A8((uint64_t)v21);
  v42 = swift_bridgeObjectRelease(v21);
  v43 = *v40;
  v44 = v40[1];
  v83 = v43;
  v36(v38, v41, v39, v42);
  if (v29[2])
  {
    v45 = *(unsigned int *)(v0 + 620);
    v46 = *(_QWORD *)(v0 + 376);
    v47 = *(_QWORD *)(v0 + 384);
    v48 = *(_QWORD **)(v0 + 264);
    *v48 = v29;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v47 + 104))(v48, v45, v46);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
    swift_bridgeObjectRetain(v44);
  }
  else
  {
    v49 = *(_QWORD *)(v0 + 376);
    v50 = *(_QWORD *)(v0 + 384);
    v51 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRetain(v44);
    swift_release(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v51, 1, 1, v49);
  }
  v80 = *(_QWORD *)(v0 + 416);
  v81 = *(_QWORD *)(v0 + 440);
  v53 = *(_QWORD *)(v0 + 304);
  v52 = *(_QWORD *)(v0 + 312);
  v78 = *(_QWORD *)(v0 + 296);
  v79 = *(_QWORD *)(v0 + 424);
  v54 = *(_QWORD *)(v0 + 280);
  v55 = *(uint64_t **)(v0 + 232);
  PaginationUpdate.init(source:next:)(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 264));
  v56 = type metadata accessor for PaginationUpdate(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v54, 0, 1, v56);
  v57 = type metadata accessor for Page(0);
  v58 = type metadata accessor for Shelf(0);
  v59 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v60 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateInstruction.ShelfItemUpdateDescriptor.init(items:shelfID:paginationUpdate:)(v85, v83, v44, v54, v57, v58, v59, v60);
  v61 = sub_5C154(&qword_328490);
  v62 = *(unsigned __int8 *)(v53 + 80);
  v63 = (v62 + 32) & ~v62;
  v64 = swift_allocObject(v61, v63 + *(_QWORD *)(v53 + 72), v62 | 7);
  *(_OWORD *)(v64 + 16) = xmmword_258070;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v64 + v63, v52, v78);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v81, v80);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  *v55 = v64;
  v65 = enum case for PageUpdateInstruction.appendItems<A, B>(_:);
  v66 = sub_5C154(&qword_31EF08);
  v67 = *(_QWORD *)(v66 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v67 + 104))(v55, v65, v66);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v55, 0, 1, v66);
  v68 = *(_QWORD *)(v0 + 432);
  v69 = *(_QWORD *)(v0 + 440);
  v71 = *(_QWORD *)(v0 + 400);
  v70 = *(_QWORD *)(v0 + 408);
  v72 = *(_QWORD *)(v0 + 392);
  v73 = *(_QWORD *)(v0 + 368);
  v74 = *(_QWORD *)(v0 + 344);
  v76 = *(_QWORD *)(v0 + 312);
  v75 = *(_QWORD *)(v0 + 320);
  v82 = *(_QWORD *)(v0 + 288);
  v84 = *(_QWORD *)(v0 + 280);
  v86 = *(_QWORD *)(v0 + 272);
  v87 = *(_QWORD *)(v0 + 264);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v69);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A4E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;

  v1 = v0 + 96;
  swift_release(*(_QWORD *)(v0 + 560));
  v2 = *(_QWORD *)(v0 + 608);
  if (qword_31E658 != -1)
    swift_once(&qword_31E658, sub_126D24);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_325298);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v9 = _convertErrorToNSError(_:)(v2);
    *(_QWORD *)(v0 + 176) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v2);
    _os_log_impl(&dword_0, v5, v6, "Failed to fetch store assets: %@", v7, 0xCu);
    v10 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v8, 1, v10);
    v11 = v8;
    v1 = v0 + 96;
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 576);
  v13 = *(_QWORD *)(v0 + 560);

  swift_bridgeObjectRetain(v12);
  v14 = sub_1A6024(v13, v12);
  swift_bridgeObjectRelease(v12);
  swift_errorRelease(v2);
  swift_release(v13);
  v15 = *(_QWORD *)(v0 + 552);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
  v18 = swift_task_alloc(32);
  *(_QWORD *)(v18 + 16) = v1;
  v19 = sub_1DDB40((void (*)(__int128 *__return_ptr, uint64_t))sub_1A6204, v18, (uint64_t)v14);
  swift_bridgeObjectRelease(v14);
  swift_task_dealloc(v18);
  v20 = swift_task_alloc(32);
  *(_QWORD *)(v20 + 16) = v1;
  *(_QWORD *)(v20 + 24) = v17;
  v21 = sub_1A6218((uint64_t)v19, (void (*)(_QWORD, char *))sub_1A6500, v20);
  swift_bridgeObjectRelease(v19);
  swift_task_dealloc(v20);
  v22 = sub_1A26A8(v16, v15);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  if ((v27 & 1) == 0)
    goto LABEL_7;
  v30 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v32 = swift_unknownObjectRetain_n(v22, 2, v31);
  v33 = (_QWORD *)swift_dynamicCastClass(v32, v30);
  if (!v33)
  {
    swift_unknownObjectRelease(v22);
    v33 = _swiftEmptyArrayStorage;
  }
  v34 = v33[2];
  v35 = swift_release(v33);
  if (__OFSUB__(v28 >> 1, v26))
  {
    __break(1u);
    goto LABEL_19;
  }
  v35 = v22;
  if (v34 != (v28 >> 1) - v26)
  {
LABEL_19:
    swift_unknownObjectRelease(v35);
LABEL_7:
    v29 = sub_1A59D0(v22, v24, v26, v28);
    goto LABEL_14;
  }
  v29 = (_QWORD *)swift_dynamicCastClass(v22, v30);
  if (!v29)
  {
    swift_unknownObjectRelease(v22);
    v29 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  v36 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v0 + 488);
  v37 = *(int *)(v0 + 616);
  v38 = *(_QWORD *)(v0 + 392);
  v39 = *(_QWORD *)(v0 + 376);
  v40 = *(uint64_t **)(v0 + 240);
  swift_unknownObjectRelease(v22);
  v41 = (char *)v40 + v37;
  v85 = sub_1345A8((uint64_t)v21);
  v42 = swift_bridgeObjectRelease(v21);
  v43 = *v40;
  v44 = v40[1];
  v83 = v43;
  v36(v38, v41, v39, v42);
  if (v29[2])
  {
    v45 = *(unsigned int *)(v0 + 620);
    v46 = *(_QWORD *)(v0 + 376);
    v47 = *(_QWORD *)(v0 + 384);
    v48 = *(_QWORD **)(v0 + 264);
    *v48 = v29;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v47 + 104))(v48, v45, v46);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
    swift_bridgeObjectRetain(v44);
  }
  else
  {
    v49 = *(_QWORD *)(v0 + 376);
    v50 = *(_QWORD *)(v0 + 384);
    v51 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRetain(v44);
    swift_release(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v51, 1, 1, v49);
  }
  v80 = *(_QWORD *)(v0 + 416);
  v81 = *(_QWORD *)(v0 + 440);
  v53 = *(_QWORD *)(v0 + 304);
  v52 = *(_QWORD *)(v0 + 312);
  v78 = *(_QWORD *)(v0 + 296);
  v79 = *(_QWORD *)(v0 + 424);
  v54 = *(_QWORD *)(v0 + 280);
  v55 = *(uint64_t **)(v0 + 232);
  PaginationUpdate.init(source:next:)(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 264));
  v56 = type metadata accessor for PaginationUpdate(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v54, 0, 1, v56);
  v57 = type metadata accessor for Page(0);
  v58 = type metadata accessor for Shelf(0);
  v59 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v60 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateInstruction.ShelfItemUpdateDescriptor.init(items:shelfID:paginationUpdate:)(v85, v83, v44, v54, v57, v58, v59, v60);
  v61 = sub_5C154(&qword_328490);
  v62 = *(unsigned __int8 *)(v53 + 80);
  v63 = (v62 + 32) & ~v62;
  v64 = swift_allocObject(v61, v63 + *(_QWORD *)(v53 + 72), v62 | 7);
  *(_OWORD *)(v64 + 16) = xmmword_258070;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v64 + v63, v52, v78);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v81, v80);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  *v55 = v64;
  v65 = enum case for PageUpdateInstruction.appendItems<A, B>(_:);
  v66 = sub_5C154(&qword_31EF08);
  v67 = *(_QWORD *)(v66 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v67 + 104))(v55, v65, v66);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v55, 0, 1, v66);
  v68 = *(_QWORD *)(v0 + 432);
  v69 = *(_QWORD *)(v0 + 440);
  v71 = *(_QWORD *)(v0 + 400);
  v70 = *(_QWORD *)(v0 + 408);
  v72 = *(_QWORD *)(v0 + 392);
  v73 = *(_QWORD *)(v0 + 368);
  v74 = *(_QWORD *)(v0 + 344);
  v76 = *(_QWORD *)(v0 + 312);
  v75 = *(_QWORD *)(v0 + 320);
  v82 = *(_QWORD *)(v0 + 288);
  v84 = *(_QWORD *)(v0 + 280);
  v86 = *(_QWORD *)(v0 + 272);
  v87 = *(_QWORD *)(v0 + 264);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 56));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v69);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1A54BC@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  id result;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for SeriesType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for SeriesType.audiobook(_:), v4, v6);
  v10 = sub_648E0((unint64_t *)&qword_323978, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesType, (uint64_t)&protocol conformance descriptor for SeriesType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v21, v4, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v4, v10);
  v11 = v22;
  v12 = v20;
  if (v21 == v19 && v22 == v20)
  {
    swift_bridgeObjectRelease_n(v22, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_5:
    v16 = type metadata accessor for MAudiobook(0);
    goto LABEL_7;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v19, v20, 0);
  swift_bridgeObjectRelease(v11);
  v14 = swift_bridgeObjectRelease(v12);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v14);
  if ((v13 & 1) != 0)
    goto LABEL_5;
  v16 = type metadata accessor for MBook(0, v15);
LABEL_7:
  result = (id)swift_dynamicCastClass(v9, v16);
  v18 = result;
  if (result)
    result = v9;
  *a2 = v18;
  return result;
}

uint64_t sub_1A5650@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v32 = a5;
  v33 = a4;
  v8 = sub_5C154(&qword_324C00);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ListItemViewModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - v16;
  v18 = a3[3];
  v19 = a3[4];
  sub_66898(a3, v18);
  v20 = ContentInfo.id.getter(v18, *(_QWORD *)(v19 + 8));
  v22 = v21;
  sub_5E0D8((uint64_t)a2, (uint64_t)v34);
  CardInfo.init(with:alwaysPresentNewCardSet:)(v34, 1);
  static ListItemViewModel.seriesPage(seriesID:assetInfo:cardInfo:)(v20, v22, a2, v10);
  swift_bridgeObjectRelease(v22);
  sub_5E09C((uint64_t)v10, &qword_324C00);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
  sub_5E0D8((uint64_t)a2, (uint64_t)v34);
  result = type metadata accessor for SeriesSeeAllPaginationIntent(0);
  v24 = *(_QWORD *)(v33 + *(int *)(result + 28));
  v25 = v24 + a1;
  if (__OFADD__(v24, a1))
  {
    __break(1u);
  }
  else
  {
    v26 = a2[3];
    v27 = a2[4];
    sub_66898(a2, v26);
    v28 = dispatch thunk of AssetInfo.assetType.getter(v26, v27);
    v29 = static Metrics.contentKind(for:)(v28);
    sub_203A28((uint64_t)v14, v34, v25, v29, v30, 0xD000000000000015, 0x80000000002714D0, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  return result;
}

uint64_t sub_1A5848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *v3;
  v9 = (_QWORD *)swift_task_alloc(dword_32847C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_64780;
  return sub_1A26E8(a1, a2, a3, v8);
}

_QWORD *sub_1A58B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_5C154(&qword_3284B0);
  v4 = *(_QWORD *)(type metadata accessor for GenreHighlight(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      sub_1A5B40(&v14, (uint64_t)v8 + v7, v1, a1);
      v12 = v11;
      v13 = v14;
      swift_bridgeObjectRetain(a1);
      sub_1A64F8(v13);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A59D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_5C154(&qword_31EF50);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

void sub_1A5B40(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for GenreHighlight(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - v13;
  v35 = a4;
  v17 = *(_QWORD *)(a4 + 64);
  v16 = a4 + 64;
  v15 = v17;
  v34 = v16;
  v18 = -1 << *(_BYTE *)(v16 - 32);
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & v15;
  if (!a2)
  {
    v21 = 0;
LABEL_37:
    v29 = v34;
    *a1 = v35;
    a1[1] = v29;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return;
  }
  if (!a3)
  {
    v21 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v31 = -1 << *(_BYTE *)(v16 - 32);
  v32 = a1;
  v21 = 0;
  v22 = 0;
  v33 = (unint64_t)(63 - v18) >> 6;
  v30 = v33 - 1;
  if (!v20)
    goto LABEL_9;
LABEL_8:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  v24 = v23 | (v21 << 6);
  while (1)
  {
    ++v22;
    v28 = *(_QWORD *)(v9 + 72);
    sub_1899F4(*(_QWORD *)(v35 + 56) + v28 * v24, (uint64_t)v11);
    sub_5E160((uint64_t)v11, (uint64_t)v14, type metadata accessor for GenreHighlight);
    sub_5E160((uint64_t)v14, a2, type metadata accessor for GenreHighlight);
    if (v22 == a3)
      goto LABEL_36;
    a2 += v28;
    if (v20)
      goto LABEL_8;
LABEL_9:
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v33)
      goto LABEL_32;
    v26 = *(_QWORD *)(v34 + 8 * v25);
    if (!v26)
      break;
LABEL_18:
    v20 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v25 << 6);
    v21 = v25;
  }
  v21 += 2;
  if (v25 + 1 >= v33)
  {
    v20 = 0;
    v21 = v25;
    goto LABEL_36;
  }
  v26 = *(_QWORD *)(v34 + 8 * v21);
  if (v26)
    goto LABEL_14;
  v27 = v25 + 2;
  if (v25 + 2 >= v33)
    goto LABEL_32;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v21 = v25 + 3;
  if (v25 + 3 >= v33)
  {
    v20 = 0;
    v21 = v25 + 2;
    goto LABEL_36;
  }
  v26 = *(_QWORD *)(v34 + 8 * v21);
  if (v26)
  {
LABEL_14:
    v25 = v21;
    goto LABEL_18;
  }
  v27 = v25 + 4;
  if (v25 + 4 >= v33)
  {
LABEL_32:
    v20 = 0;
LABEL_36:
    v18 = v31;
    a1 = v32;
    goto LABEL_37;
  }
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
  {
LABEL_17:
    v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v33)
    {
      v20 = 0;
      v21 = v30;
      goto LABEL_36;
    }
    v26 = *(_QWORD *)(v34 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

char *sub_1A5DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21[2];
  uint64_t v22;
  unint64_t v23;

  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v23 = a1 & 0xC000000000000001;
    v5 = (char *)_swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v7 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1) : *(id *)(a1 + 8 * i);
      v8 = v7;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v10 = MResource.id.getter(v7);
      v12 = v11;
      if (*(_QWORD *)(a2 + 16) && (v13 = sub_582B4(v10, v11), (v14 & 1) != 0))
      {
        sub_5E0D8(*(_QWORD *)(a2 + 56) + 40 * v13, (uint64_t)v21);
      }
      else
      {
        v22 = 0;
        memset(v21, 0, sizeof(v21));
      }
      swift_bridgeObjectRelease(v12);
      static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)(v21, v8);
      sub_5E09C((uint64_t)v21, &qword_320938);

      if (v20)
      {
        sub_5DC98(&v19, (uint64_t)v21);
        sub_5DC98(v21, (uint64_t)&v19);
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          v5 = sub_57168(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
        v16 = *((_QWORD *)v5 + 2);
        v15 = *((_QWORD *)v5 + 3);
        if (v16 >= v15 >> 1)
          v5 = sub_57168((char *)(v15 > 1), v16 + 1, 1, v5);
        *((_QWORD *)v5 + 2) = v16 + 1;
        sub_5DC98(&v19, (uint64_t)&v5[40 * v16 + 32]);
      }
      else
      {
        sub_5E09C((uint64_t)&v19, &qword_320940);
      }
      if (v9 == v4)
      {
        swift_bridgeObjectRelease(a1);
        return v5;
      }
    }
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return (char *)_swiftEmptyArrayStorage;
}

char *sub_1A6024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char *result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20[2];
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    v15 = v4;
    v5 = (uint64_t *)(v4 + 40);
    v6 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      v7 = *(v5 - 1);
      v8 = *v5;
      v9 = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain(*v5);
      if (v9 && (v10 = sub_582B4(v7, v8), (v11 & 1) != 0))
      {
        sub_5E0D8(*(_QWORD *)(a2 + 56) + 40 * v10, (uint64_t)v20);
        result = (char *)sub_1A64B0((uint64_t)v20, (uint64_t)v16);
        if (!v16[3])
        {
          __break(1u);
          return result;
        }
        static ContentInfoUtilities.assetInfo(libraryAssetInfo:)(&v17, v16);
        sub_5E09C((uint64_t)v20, &qword_320938);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v16);
      }
      else
      {
        v21 = 0;
        memset(v20, 0, sizeof(v20));
        sub_5E09C((uint64_t)v20, &qword_320938);
        v17 = 0u;
        v18 = 0u;
        v19 = 0;
      }
      swift_bridgeObjectRelease(v8);
      if (*((_QWORD *)&v18 + 1))
      {
        sub_5DC98(&v17, (uint64_t)v20);
        sub_5DC98(v20, (uint64_t)&v17);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_57168(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        v14 = *((_QWORD *)v6 + 2);
        v13 = *((_QWORD *)v6 + 3);
        if (v14 >= v13 >> 1)
          v6 = sub_57168((char *)(v13 > 1), v14 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v14 + 1;
        sub_5DC98(&v17, (uint64_t)&v6[40 * v14 + 32]);
      }
      else
      {
        sub_5E09C((uint64_t)&v17, &qword_320940);
      }
      v5 += 2;
      if (!--v2)
      {
        swift_bridgeObjectRelease(v15);
        return v6;
      }
    }
  }
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_1A6204(_QWORD *a1)
{
  return sub_1A6438(a1);
}

_QWORD *sub_1A6218(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, char *);
  uint64_t v21;
  __int128 v22[2];
  _OWORD v23[3];
  _OWORD v24[4];
  _QWORD *v25;

  v20 = a2;
  v21 = a3;
  v4 = type metadata accessor for ListItemComponentModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = _swiftEmptyArrayStorage;
  sub_20CAC4(0, 0, 0);
  v8 = v25;
  v9 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v19 = v9;
  v16 = a1;
  if (v9)
  {
    v10 = 0;
    v11 = a1 + 32;
    v18 = (uint64_t)v23 + 8;
    v17 = (char *)v24 + 8;
    do
    {
      sub_5E0D8(v11, (uint64_t)v22);
      *(_QWORD *)&v23[0] = v10;
      sub_5DC98(v22, v18);
      v24[0] = v23[0];
      v24[1] = v23[1];
      v24[2] = v23[2];
      v20(*(_QWORD *)&v23[0], v17);
      sub_5E09C((uint64_t)v24, &qword_31F008);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_20CAC4(0, v8[2] + 1, 1);
        v8 = v25;
      }
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_20CAC4(v12 > 1, v13 + 1, 1);
        v8 = v25;
      }
      ++v10;
      v8[2] = v13 + 1;
      sub_5E160((uint64_t)v7, (uint64_t)v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, type metadata accessor for ListItemComponentModel);
      v11 += 40;
    }
    while (v19 != v10);
  }
  swift_bridgeObjectRelease(v16);
  return v8;
}

id sub_1A6420@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1A54BC(a1, a2);
}

uint64_t sub_1A6438(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  return AssetInfo.enrich(with:)(v2, v3, v4);
}

uint64_t sub_1A6498@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1A5650(a1, a2, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_1A64B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320938);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A64F8(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_1A6504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::Int v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;

  v45 = a1;
  v46 = a4;
  v43 = a3;
  v44 = a2;
  v5 = type metadata accessor for AppAnalyticsAction.Type(0, a5);
  v6 = *(_QWORD *)(v5 - 8);
  v42[0] = v5;
  v42[1] = v6;
  __chkstk_darwin(v5);
  v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v9);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_31EF08);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v16);
  v18 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_31EF10);
  v20 = swift_allocObject(v19, 112, 7);
  *(_OWORD *)(v20 + 16) = xmmword_255F00;
  static ActionMetrics.notInstrumented.getter((__n128)xmmword_255F00);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for PageUpdateInstruction.startPendingData<A, B>(_:), v12);
  v21 = type metadata accessor for ClickData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 1, 1, v21);
  *(_QWORD *)(v20 + 56) = sub_5C154(&qword_3200B8);
  *(_QWORD *)(v20 + 64) = sub_67060((unint64_t *)&qword_3200C0, &qword_3200B8, (uint64_t)&protocol conformance descriptor for PageUpdateAction<A, B>);
  sub_668BC((_QWORD *)(v20 + 32));
  v22 = type metadata accessor for Page(0);
  v23 = type metadata accessor for Shelf(0);
  v24 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v25 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateAction.init(actionMetrics:instruction:animated:clickData:)(v18, v15, 0, v11, v22, v23, v24, v25);
  v26 = &v8[*(int *)(sub_5C154(&qword_324D18) + 48)];
  v27 = type metadata accessor for SeriesData(0);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v8, v44, v27);
  v29 = ToolbarActionMenuItem.id.getter(v28);
  v31 = v30;
  v32._countAndFlagsBits = v29;
  v32._object = v31;
  v33 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6B20, v32);
  swift_bridgeObjectRelease(v31);
  if (v33)
  {
    if (v33 == 2)
    {
      v34 = (unsigned int *)&enum case for FilterType.unread(_:);
    }
    else
    {
      if (v33 != 1)
      {
        v38 = type metadata accessor for FilterType(0);
        v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v26, 1, 1, v38);
LABEL_9:
        v39 = SeriesListSortOrder.index.getter(v37);
        if ((v39 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v39 < *(_QWORD *)(v43 + 16))
        {
          v40 = type metadata accessor for ToolbarActionMenuItem(0);
          v47._countAndFlagsBits = ToolbarActionMenuItem.id.getter(v40);
          v41 = (char *)&loc_1A68AC + *((int *)qword_1A6A00 + sub_1A7344(v47));
          __asm { BR              X10 }
        }
        __break(1u);
        JUMPOUT(0x1A6A00);
      }
      v34 = (unsigned int *)&enum case for FilterType.purchased(_:);
    }
  }
  else
  {
    v34 = (unsigned int *)&enum case for FilterType.allInSeries(_:);
  }
  v35 = *v34;
  v36 = type metadata accessor for FilterType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v26, v35, v36);
  type metadata accessor for FilterType(0);
  v37 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v26, 0, 1, v36);
  goto LABEL_9;
}

char *sub_1A6A18(__n128 a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::Int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for AppAnalyticsAction.Type(0, a1);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AppAnalyticsAction(0, v7);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PageScrollAction.Location(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_31EF10);
  v18 = (char *)swift_allocObject(v17, 72, 7);
  *((_OWORD *)v18 + 1) = xmmword_258070;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, v13);
  *((_QWORD *)v18 + 7) = type metadata accessor for PageScrollAction(0);
  *((_QWORD *)v18 + 8) = sub_648E0(&qword_3284E0, (uint64_t (*)(uint64_t))&type metadata accessor for PageScrollAction, (uint64_t)&protocol conformance descriptor for PageScrollAction);
  sub_668BC((_QWORD *)v18 + 4);
  v19 = PageScrollAction.init(location:)(v16);
  v20 = ToolbarActionMenuItem.id.getter(v19);
  v22 = v21;
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  v24 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6B20, v23);
  swift_bridgeObjectRelease(v22);
  switch(v24)
  {
    case 0:
      swift_bridgeObjectRelease(0xEB00000000736569);
LABEL_8:
      v29 = a4[3];
      v28 = a4[4];
      sub_66898(a4, v29);
      v30 = ContentInfo.id.getter(v29, *(_QWORD *)(v28 + 8));
      v32 = v31;
      v33 = a4[3];
      v34 = a4[4];
      sub_66898(a4, v33);
      v35 = SeriesInfo.assetCount.getter(v33, v34);
      *(_QWORD *)v9 = v30;
      *((_QWORD *)v9 + 1) = v32;
      *((_QWORD *)v9 + 2) = v35;
      v9[24] = v36 & 1;
      (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v9, enum case for AppAnalyticsAction.Type.reportAllInSeriesView(_:), v43);
      AppAnalyticsAction.init(type:)(v9);
      v18 = sub_57634((_BYTE *)&dword_0 + 1, 2, 1, v18);
      v37 = v45;
      v47 = v45;
      v48 = sub_648E0(&qword_31F5A0, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
      v38 = sub_668BC(&v46);
      v39 = v44;
      (*(void (**)(_QWORD *, char *, uint64_t))(v44 + 16))(v38, v12, v37);
      *((_QWORD *)v18 + 2) = 2;
      sub_5DC98(&v46, (uint64_t)(v18 + 72));
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v37);
      return v18;
    case 1:
      v25 = 0xE900000000000073;
      v26 = 0x6573616863727570;
      break;
    case 2:
      v25 = 0xEB00000000646568;
      v26 = 0x73696E6946746F6ELL;
      break;
    default:
      return v18;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, 0x7265536E496C6C61, 0xEB00000000736569, 0);
  swift_bridgeObjectRelease(v25);
  if ((v27 & 1) != 0)
    goto LABEL_8;
  return v18;
}

void sub_1A6D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::Int v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;

  v44 = a2;
  v45 = a4;
  v43 = a3;
  v42[0] = a1;
  v5 = type metadata accessor for AppAnalyticsAction.Type(0, a5);
  v42[1] = *(_QWORD *)(v5 - 8);
  v42[2] = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_31EF08);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v15);
  v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_31EF10);
  v19 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v19 + 16) = xmmword_255F00;
  static ActionMetrics.notInstrumented.getter((__n128)xmmword_255F00);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for PageUpdateInstruction.startPendingData<A, B>(_:), v11);
  v20 = type metadata accessor for ClickData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  *(_QWORD *)(v19 + 56) = sub_5C154(&qword_3200B8);
  *(_QWORD *)(v19 + 64) = sub_67060((unint64_t *)&qword_3200C0, &qword_3200B8, (uint64_t)&protocol conformance descriptor for PageUpdateAction<A, B>);
  sub_668BC((_QWORD *)(v19 + 32));
  v21 = type metadata accessor for Page(0);
  v22 = type metadata accessor for Shelf(0);
  v23 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v24 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  v25 = v21;
  v26 = v43;
  PageUpdateAction.init(actionMetrics:instruction:animated:clickData:)(v17, v14, 0, v10, v25, v22, v23, v24);
  v27 = *(int *)(sub_5C154(&qword_324D18) + 48);
  v28 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v7, v44, v28);
  if (*(_QWORD *)(v26 + 16) <= (unint64_t)v45)
  {
    __break(1u);
    JUMPOUT(0x1A7240);
  }
  v29 = &v7[v27];
  v30 = type metadata accessor for ToolbarActionMenuItem(0);
  v31 = ToolbarActionMenuItem.id.getter(v30);
  v33 = v32;
  v34._countAndFlagsBits = v31;
  v34._object = v33;
  v35 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6B20, v34);
  swift_bridgeObjectRelease(v33);
  if (v35)
  {
    if (v35 == 2)
    {
      v36 = (unsigned int *)&enum case for FilterType.unread(_:);
    }
    else
    {
      if (v35 != 1)
      {
        v40 = type metadata accessor for FilterType(0);
        v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v29, 1, 1, v40);
LABEL_10:
        v46._countAndFlagsBits = ToolbarActionMenuItem.id.getter(v39);
        v41 = (char *)&loc_1A7100 + *((int *)qword_1A7240 + sub_1A7344(v46));
        __asm { BR              X10 }
      }
      v36 = (unsigned int *)&enum case for FilterType.purchased(_:);
    }
  }
  else
  {
    v36 = (unsigned int *)&enum case for FilterType.allInSeries(_:);
  }
  v37 = *v36;
  v38 = type metadata accessor for FilterType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v29, v37, v38);
  type metadata accessor for FilterType(0);
  v39 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v29, 0, 1, v38);
  goto LABEL_10;
}

uint64_t sub_1A7258(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for PageScrollAction.Location(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_31EF10);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_258070;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  *(_QWORD *)(v8 + 56) = type metadata accessor for PageScrollAction(0);
  *(_QWORD *)(v8 + 64) = sub_648E0(&qword_3284E0, (uint64_t (*)(uint64_t))&type metadata accessor for PageScrollAction, (uint64_t)&protocol conformance descriptor for PageScrollAction);
  sub_668BC((_QWORD *)(v8 + 32));
  PageScrollAction.init(location:)(v6);
  return v8;
}

unint64_t sub_1A7344(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6A88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1A738C(_QWORD *a1, void (*a2)(char *), uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _QWORD *v61;
  _BYTE *v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  BOOL *v66;
  uint64_t v67;
  char *v68;
  __n128 v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  __n128 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  int *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  BOOL *v99;
  uint64_t v100;
  char *v101;
  __n128 v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  char *v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __n128 v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL *v153;
  char *v154;
  double v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(char *, uint64_t, uint64_t, uint64_t);
  char *v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t, uint64_t, uint64_t);
  char *v174;
  uint64_t v175;
  __n128 v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  __n128 v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  void *v209;
  unint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(char *, _QWORD *);
  void (*v220)(_QWORD *, char *, _QWORD *);
  uint64_t v221;
  uint64_t v222;
  char *v223;
  void *v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  BOOL *v249;
  char *v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void (*v256)(void);
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  int v263;
  unint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  void (*v270)(char *, uint64_t);
  void (*v271)(char *);
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  char *v275;
  unsigned __int8 *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  _QWORD *v282;
  __int128 v283;
  uint64_t v284;
  void *v285;

  v264 = a5;
  v276 = a4;
  v242 = a3;
  v271 = a2;
  v273 = a1;
  v243 = type metadata accessor for SeriesData(0);
  v234 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v233 = v5;
  v241 = (char *)&v216 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v6);
  v245 = (char *)&v216 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = type metadata accessor for SymbolImage.Kind(0);
  v248 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240);
  v247 = (char *)&v216 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for ToolbarActionMenuItem(0);
  v255 = *(_QWORD *)(v246 - 8);
  __chkstk_darwin(v246);
  v244 = (char *)&v216 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for PageScrollAction.Location(0);
  v253 = *(_QWORD *)(v254 - 8);
  __chkstk_darwin(v254);
  v235 = (char *)&v216 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = v10;
  __chkstk_darwin(v11);
  v252 = (char **)((char *)&v216 - v12);
  v251 = (_QWORD *)type metadata accessor for SeriesListSortOrder(0);
  v238 = *(v251 - 1);
  v13 = __chkstk_darwin(v251);
  v231 = v14;
  v250 = (char *)&v216 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = type metadata accessor for ToolbarActionMenuItemButtonType(0, v13);
  v265 = *(_QWORD *)(v274 - 8);
  __chkstk_darwin(v274);
  v249 = (BOOL *)&v216 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v16);
  v262 = (char *)&v216 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = type metadata accessor for LocalizerLookupStrategy(0);
  v269 = *(_QWORD *)(v279 - 8);
  v18 = __chkstk_darwin(v279);
  v266 = (char *)&v216 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = type metadata accessor for LocalizerDefaultValue(0, v18);
  v259 = *(_QWORD *)(v278 - 8);
  __chkstk_darwin(v278);
  v268 = (char *)&v216 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = type metadata accessor for LocalizerRequest(0);
  v230 = *(_QWORD **)(v239 - 8);
  __chkstk_darwin(v239);
  v275 = (char *)&v216 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v237 = (char *)&v216 - v24;
  v270 = (void (*)(char *, uint64_t))type metadata accessor for Metrics.Location(0, v23);
  v25 = *((_QWORD *)v270 - 1);
  v26 = __chkstk_darwin(v270);
  v28 = (char *)&v216 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Metrics.ClickActionType(0, v26);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v216 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Metrics.TargetType(0, v31);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v216 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = type metadata accessor for ActionMetrics(0);
  v261 = *(_QWORD *)(v277 - 8);
  v38 = __chkstk_darwin(v277);
  v40 = (unsigned __int8 *)&v216 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v267) = *(unsigned __int8 *)v271;
  v263 = *v276;
  v281 = (char *)&_swiftEmptyArrayStorage;
  v282 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v35 + 104))(v37, enum case for Metrics.TargetType.button(_:), v34, v38);
  v41 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v30 + 104))(v33, enum case for Metrics.ClickActionType.navigate(_:), v29);
  static Metrics.Location.genericButton.getter(v41);
  v276 = v40;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(0x63417265746C6966, 0xEC0000006E6F6974, v37, v33, 0, 0, 0, v28);
  (*(void (**)(char *, _QWORD *))(v25 + 8))(v28, v270);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  v42 = v273[3];
  v43 = v273[4];
  sub_66898(v273, v42);
  v44 = v272;
  v45 = SeriesInfo.assets.getter(v42, v43);
  if (v44)
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v261 + 8))(v276, v277);
    swift_bridgeObjectRelease(v281);
    return swift_bridgeObjectRelease(v282);
  }
  else
  {
    v47 = v45;
    v222 = 0;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v43);
    v49 = sub_5C154(&qword_31EF60);
    v50 = _arrayForceCast<A, B>(_:)(v47, AssociatedTypeWitness, v49);
    v260 = v50;
    swift_bridgeObjectRelease(v47);
    v228 = sub_5C154(&qword_31EEC0);
    v236 = *(_QWORD *)(v255 + 72);
    v51 = *(unsigned __int8 *)(v255 + 80);
    v225 = 2 * v236;
    v221 = ((v51 + 32) & ~v51) + 3 * v236;
    v52 = (v51 + 32) & ~v51;
    v229 = (char *)v52;
    v227 = v51 | 7;
    v53 = (char *)swift_allocObject(v228, v221, v51 | 7);
    v226 = xmmword_2584B0;
    v220 = (void (*)(_QWORD *, char *, _QWORD *))v53;
    *((_OWORD *)v53 + 1) = xmmword_2584B0;
    v223 = &v53[v52];
    v54 = v268;
    LocalizerDefaultValue.init(stringLiteral:)("All in Series", 13, 2, (__n128)xmmword_2584B0);
    LODWORD(v272) = enum case for LocalizerLookupStrategy.default(_:);
    v55 = v269;
    v271 = *(void (**)(char *))(v269 + 104);
    v56 = v266;
    v57 = v279;
    v271(v266);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000034, 0x8000000000273D30, 0, v54, v56);
    v270 = *(void (**)(char *, uint64_t))(v55 + 8);
    v270(v56, v57);
    v269 = *(_QWORD *)(v259 + 8);
    ((void (*)(char *, uint64_t))v269)(v54, v278);
    v257 = type metadata accessor for ClickData(0);
    v256 = *(void (**)(void))(*(_QWORD *)(v257 - 8) + 56);
    v58 = (uint64_t)v262;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v256)(v262, 1, 1, v257);
    v59 = type metadata accessor for SeriesListFilterAction(0);
    v284 = v59;
    v224 = (void *)sub_648E0(&qword_3284B8, type metadata accessor for SeriesListFilterAction, (uint64_t)&unk_264368);
    v285 = v224;
    v60 = sub_668BC(&v283);
    v61 = v273;
    sub_5E0D8((uint64_t)v273, (uint64_t)(v60 + 8));
    v62 = &v60[*(int *)(v59 + 28)];
    *(_QWORD *)&v258 = *(_QWORD *)(v261 + 16);
    ((void (*)(_BYTE *, unsigned __int8 *, uint64_t))v258)(v62, v276, v277);
    sub_6CFCC(v58, (uint64_t)&v60[*(int *)(v59 + 32)]);
    *v60 = 0;
    v60[48] = v267;
    sub_1A9658(v58);
    v63 = *(_QWORD *)(v50 + 16) != 0;
    v64 = v61[3];
    v65 = v61[4];
    sub_66898(v61, v64);
    LOBYTE(v64) = SeriesInfo.isExplicit.getter(v64, v65);
    v66 = v249;
    *v249 = v263 == 0;
    LODWORD(v259) = enum case for ToolbarActionMenuItemButtonType.toggle(_:);
    v265 = *(_QWORD *)(v265 + 104);
    ((void (*)(BOOL *))v265)(v66);
    v67 = v64 & 1;
    v68 = v223;
    v69.n128_f64[0] = ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(0x7265536E496C6C61, 0xEB00000000736569, v237, &v283, v63, v67, v66);
    v237 = &v68[v236];
    LocalizerDefaultValue.init(stringLiteral:)("Purchases", 9, 2, v69);
    v70 = v279;
    ((void (*)(char *, _QWORD, uint64_t))v271)(v56, v272, v279);
    v219 = (void (*)(char *, _QWORD *))0xD000000000000032;
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000032, 0x8000000000273D80, 0, v54, v56);
    v270(v56, v70);
    ((void (*)(char *, uint64_t))v269)(v54, v278);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v256)(v58, 1, 1, v257);
    v284 = v59;
    v285 = v224;
    v71 = sub_668BC(&v283);
    sub_5E0D8((uint64_t)v61, (uint64_t)(v71 + 8));
    ((void (*)(_BYTE *, unsigned __int8 *, uint64_t))v258)(&v71[*(int *)(v59 + 28)], v276, v277);
    sub_6CFCC(v58, (uint64_t)&v71[*(int *)(v59 + 32)]);
    *v71 = 1;
    v71[48] = v267;
    sub_1A9658(v58);
    LOBYTE(v280) = 1;
    LOBYTE(v71) = sub_195F1C(v260);
    v72 = v61[3];
    v73 = v61[4];
    sub_66898(v61, v72);
    LOBYTE(v72) = SeriesInfo.isExplicit.getter(v72, v73);
    *v66 = v263 == 1;
    ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v66, v259, v274);
    v74.n128_f64[0] = ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(0x6573616863727570, 0xE900000000000073, v275, &v283, v71 & 1, v72 & 1, v66);
    v237 = &v223[v225];
    LocalizerDefaultValue.init(stringLiteral:)("Not Finished", 12, 2, v74);
    v75 = v279;
    ((void (*)(char *, _QWORD, uint64_t))v271)(v56, v272, v279);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000034, 0x8000000000273DC0, 0, v54, v56);
    v270(v56, v75);
    ((void (*)(char *, uint64_t))v269)(v54, v278);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v256)(v58, 1, 1, v257);
    v284 = v59;
    v285 = v224;
    v76 = sub_668BC(&v283);
    sub_5E0D8((uint64_t)v61, (uint64_t)(v76 + 8));
    ((void (*)(_BYTE *, unsigned __int8 *, uint64_t))v258)(&v76[*(int *)(v59 + 28)], v276, v277);
    sub_6CFCC(v58, (uint64_t)&v76[*(int *)(v59 + 32)]);
    *v76 = 2;
    v76[48] = v267;
    sub_1A9658(v58);
    LOBYTE(v280) = 2;
    LOBYTE(v76) = sub_195F1C(v260);
    v77 = v61[3];
    v78 = v61[4];
    sub_66898(v61, v77);
    LOBYTE(v77) = SeriesInfo.isExplicit.getter(v77, v78);
    *v66 = v263 == 2;
    ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v66, v259, v274);
    ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(0x73696E6946746F6ELL, 0xEB00000000646568, v275, &v283, v76 & 1, v77 & 1, v66);
    sub_E008C((uint64_t)v220);
    v79 = v61[3];
    v80 = v61[4];
    sub_66898(v61, v79);
    LOBYTE(v79) = SeriesInfo.isOrdered.getter(v79, v80, v81);
    v82 = swift_allocObject(v228, v221, v227);
    v83 = (__n128)v226;
    *(_OWORD *)(v82 + 16) = v226;
    v224 = (void *)v82;
    v237 = &v229[v82];
    v84 = v268;
    if ((v79 & 1) != 0)
    {
      LocalizerDefaultValue.init(stringLiteral:)("Ascending", 9, 2, v83);
      v85 = v266;
      v86 = v279;
      ((void (*)(char *, _QWORD, uint64_t))v271)(v266, v272, v279);
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000034, 0x8000000000273F50, 0, v84, v85);
      v270(v85, v86);
      ((void (*)(char *, uint64_t))v269)(v84, v278);
      v87 = v238;
      v223 = *(char **)(v238 + 104);
      v88 = v250;
      v89 = v251;
      ((void (*)(char *, _QWORD, _QWORD *))v223)(v250, enum case for SeriesListSortOrder.ascending(_:), v251);
      v90 = (uint64_t)v262;
      v256();
      v91 = (int *)type metadata accessor for SeriesListSortAction(0);
      v284 = (uint64_t)v91;
      v221 = sub_648E0(&qword_3284C0, type metadata accessor for SeriesListSortAction, (uint64_t)&unk_257FE0);
      v285 = (void *)v221;
      v92 = sub_668BC(&v283);
      v220 = *(void (**)(_QWORD *, char *, _QWORD *))(v87 + 16);
      v220(v92, v88, v89);
      v93 = v273;
      sub_5E0D8((uint64_t)v273, (uint64_t)v92 + v91[5]);
      ((void (*)(char *, unsigned __int8 *, uint64_t))v258)((char *)v92 + v91[7], v276, v277);
      sub_6CFCC(v90, (uint64_t)v92 + v91[8]);
      *((_BYTE *)v92 + v91[6]) = v267;
      sub_1A9658(v90);
      v219 = *(void (**)(char *, _QWORD *))(v87 + 8);
      v219(v88, v89);
      v280 = v260;
      v94 = sub_5C154(&qword_325E10);
      v218 = v94;
      v217 = sub_67060((unint64_t *)&qword_3276B0, &qword_325E10, (uint64_t)&protocol conformance descriptor for [A]);
      LOBYTE(v92) = Collection.isNotEmpty.getter(v94, v217);
      v95 = v93[3];
      v96 = v93[4];
      sub_66898(v93, v95);
      v97 = SeriesInfo.isExplicit.getter(v95, v96);
      LOBYTE(v96) = v97;
      v98 = SeriesListSortOrder.index.getter(v97) == 0;
      v99 = v249;
      *v249 = v98;
      ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v99, v259, v274);
      v100 = v92 & 1;
      v101 = v237;
      v102.n128_f64[0] = ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(0x6E69646E65637361, 0xE900000000000067, v275, &v283, v100, v96 & 1, v99);
      v216 = &v101[v236];
      LocalizerDefaultValue.init(stringLiteral:)("Descending", 10, 2, v102);
      v103 = v279;
      ((void (*)(char *, _QWORD, uint64_t))v271)(v85, v272, v279);
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000035, 0x8000000000273F90, 0, v84, v85);
      v270(v85, v103);
      ((void (*)(char *, uint64_t))v269)(v84, v278);
      v104 = v251;
      ((void (*)(char *, _QWORD, _QWORD *))v223)(v88, enum case for SeriesListSortOrder.descending(_:), v251);
      v105 = (uint64_t)v262;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v256)(v262, 1, 1, v257);
      v284 = (uint64_t)v91;
      v285 = (void *)v221;
      v106 = sub_668BC(&v283);
      v220(v106, v88, v104);
      sub_5E0D8((uint64_t)v93, (uint64_t)v106 + v91[5]);
      ((void (*)(char *, unsigned __int8 *, uint64_t))v258)((char *)v106 + v91[7], v276, v277);
      sub_6CFCC(v105, (uint64_t)v106 + v91[8]);
      *((_BYTE *)v106 + v91[6]) = v267;
      sub_1A9658(v105);
      v219(v88, v104);
      v280 = v260;
      LOBYTE(v106) = Collection.isNotEmpty.getter(v218, v217);
      v107 = v93[3];
      v108 = v93[4];
      sub_66898(v93, v107);
      v109 = SeriesInfo.isExplicit.getter(v107, v108);
      LOBYTE(v108) = v109;
      *v99 = SeriesListSortOrder.index.getter(v109) == 1;
      ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v99, v259, v274);
      v110 = v106 & 1;
      v111 = v108 & 1;
      v112 = 0x69646E6563736564;
      v113 = 0xEA0000000000676ELL;
    }
    else
    {
      LocalizerDefaultValue.init(stringLiteral:)("Popular", 7, 2, v83);
      v85 = v266;
      v114 = v279;
      ((void (*)(char *, _QWORD, uint64_t))v271)(v266, v272, v279);
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(v219, 0x8000000000273E10, 0, v84, v85);
      v270(v85, v114);
      ((void (*)(char *, uint64_t))v269)(v84, v278);
      v115 = v238;
      v223 = *(char **)(v238 + 104);
      v88 = v250;
      v116 = v251;
      ((void (*)(char *, _QWORD, _QWORD *))v223)(v250, enum case for SeriesListSortOrder.popular(_:), v251);
      v117 = (uint64_t)v262;
      v256();
      v91 = (int *)type metadata accessor for SeriesListSortAction(0);
      v284 = (uint64_t)v91;
      v221 = sub_648E0(&qword_3284C0, type metadata accessor for SeriesListSortAction, (uint64_t)&unk_257FE0);
      v285 = (void *)v221;
      v118 = sub_668BC(&v283);
      v220 = *(void (**)(_QWORD *, char *, _QWORD *))(v115 + 16);
      v220(v118, v88, v116);
      v93 = v273;
      sub_5E0D8((uint64_t)v273, (uint64_t)v118 + v91[5]);
      ((void (*)(char *, unsigned __int8 *, uint64_t))v258)((char *)v118 + v91[7], v276, v277);
      sub_6CFCC(v117, (uint64_t)v118 + v91[8]);
      *((_BYTE *)v118 + v91[6]) = v267;
      sub_1A9658(v117);
      v219 = *(void (**)(char *, _QWORD *))(v115 + 8);
      v219(v88, v116);
      v280 = v260;
      v119 = sub_5C154(&qword_325E10);
      v218 = v119;
      v217 = sub_67060((unint64_t *)&qword_3276B0, &qword_325E10, (uint64_t)&protocol conformance descriptor for [A]);
      LOBYTE(v118) = Collection.isNotEmpty.getter(v119, v217);
      v120 = v93[3];
      v121 = v93[4];
      sub_66898(v93, v120);
      v122 = SeriesInfo.isExplicit.getter(v120, v121);
      LOBYTE(v121) = v122;
      v123 = SeriesListSortOrder.index.getter(v122) == 0;
      v99 = v249;
      *v249 = v123;
      ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v99, v259, v274);
      v124 = v118 & 1;
      v125 = v237;
      v126.n128_f64[0] = ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(0x6972616C75706F70, 0xEA00000000007974, v275, &v283, v124, v121 & 1, v99);
      v216 = &v125[v236];
      LocalizerDefaultValue.init(stringLiteral:)("Title", 5, 2, v126);
      v127 = v279;
      ((void (*)(char *, _QWORD, uint64_t))v271)(v85, v272, v279);
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000030, 0x8000000000273E50, 0, v84, v85);
      v270(v85, v127);
      ((void (*)(char *, uint64_t))v269)(v84, v278);
      v104 = v251;
      ((void (*)(char *, _QWORD, _QWORD *))v223)(v88, enum case for SeriesListSortOrder.title(_:), v251);
      v128 = (uint64_t)v262;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v256)(v262, 1, 1, v257);
      v284 = (uint64_t)v91;
      v285 = (void *)v221;
      v129 = sub_668BC(&v283);
      v220(v129, v88, v104);
      sub_5E0D8((uint64_t)v93, (uint64_t)v129 + v91[5]);
      ((void (*)(char *, unsigned __int8 *, uint64_t))v258)((char *)v129 + v91[7], v276, v277);
      sub_6CFCC(v128, (uint64_t)v129 + v91[8]);
      *((_BYTE *)v129 + v91[6]) = v267;
      sub_1A9658(v128);
      v219(v88, v104);
      v280 = v260;
      LOBYTE(v129) = Collection.isNotEmpty.getter(v218, v217);
      v130 = v93[3];
      v131 = v93[4];
      sub_66898(v93, v130);
      v132 = SeriesInfo.isExplicit.getter(v130, v131);
      LOBYTE(v131) = v132;
      *v99 = SeriesListSortOrder.index.getter(v132) == 1;
      ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v99, v259, v274);
      v110 = v129 & 1;
      v111 = v131 & 1;
      v112 = 0x656C746974;
      v113 = 0xE500000000000000;
    }
    v133.n128_f64[0] = ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(v112, v113, v275, &v283, v110, v111, v99);
    v237 += v225;
    v134 = v268;
    LocalizerDefaultValue.init(stringLiteral:)("Release Date", 12, 2, v133);
    v135 = v279;
    ((void (*)(char *, _QWORD, uint64_t))v271)(v85, v272, v279);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000036, 0x8000000000273E90, 0, v134, v85);
    v270(v85, v135);
    ((void (*)(char *, uint64_t))v269)(v134, v278);
    ((void (*)(char *, _QWORD, _QWORD *))v223)(v88, enum case for SeriesListSortOrder.releaseDate(_:), v104);
    v136 = (uint64_t)v262;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v256)(v262, 1, 1, v257);
    v284 = (uint64_t)v91;
    v285 = (void *)v221;
    v137 = sub_668BC(&v283);
    v220(v137, v88, v104);
    sub_5E0D8((uint64_t)v93, (uint64_t)v137 + v91[5]);
    ((void (*)(char *, unsigned __int8 *, uint64_t))v258)((char *)v137 + v91[7], v276, v277);
    sub_6CFCC(v136, (uint64_t)v137 + v91[8]);
    *((_BYTE *)v137 + v91[6]) = v267;
    sub_1A9658(v136);
    v219(v88, v104);
    v138 = v260;
    v280 = v260;
    LOBYTE(v137) = Collection.isNotEmpty.getter(v218, v217);
    swift_bridgeObjectRelease(v138);
    v139 = v93[3];
    v140 = v93[4];
    sub_66898(v93, v139);
    v141 = SeriesInfo.isExplicit.getter(v139, v140);
    LOBYTE(v140) = v141;
    *v99 = SeriesListSortOrder.index.getter(v141) == 2;
    ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v99, v259, v274);
    ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(0x44657361656C6572, 0xEB00000000657461, v275, &v283, v137 & 1, v140 & 1, v99);
    v142 = v240;
    sub_E008C((uint64_t)v224);
    *v252 = 0;
    v143.n128_f64[0] = (*(double (**)(void))(v253 + 104))();
    v144 = v268;
    LocalizerDefaultValue.init(stringLiteral:)("Share", 5, 2, v143);
    v145 = v266;
    v146 = v279;
    ((void (*)(char *, _QWORD, uint64_t))v271)(v266, v272, v279);
    v147 = v275;
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000012, 0x8000000000270310, 0, v144, v145);
    v270(v145, v146);
    ((void (*)(char *, uint64_t))v269)(v144, v278);
    v284 = type metadata accessor for EmptyAction(0);
    v285 = &protocol witness table for EmptyAction;
    sub_668BC(&v283);
    EmptyAction.init()();
    v148 = v273;
    v149 = v273[3];
    v150 = v273[4];
    sub_66898(v273, v149);
    LOBYTE(v149) = SeriesInfo.isExplicit.getter(v149, v150);
    v151 = v148[3];
    v152 = v148[4];
    sub_66898(v148, v151);
    v153 = v249;
    SeriesInfo.url.getter(v151, v152);
    ((void (*)(BOOL *, _QWORD, uint64_t))v265)(v153, enum case for ToolbarActionMenuItemButtonType.shareLink(_:), v274);
    v154 = v244;
    v155 = ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)(0x6573206572616873, 0xEC00000073656972, v147, &v283, 1, v149 & 1, v153);
    v156 = v248;
    v157 = v247;
    (*(void (**)(char *, _QWORD, uint64_t, double))(v248 + 104))(v247, enum case for SymbolImage.Kind.ellipsis(_:), v142, v155);
    v158 = sub_5C154(&qword_3284C8);
    v274 = type metadata accessor for ToolbarItemType(0);
    v267 = *(_QWORD *)(v274 - 8);
    v159 = *(unsigned __int8 *)(v267 + 80);
    v160 = (v159 + 32) & ~v159;
    v161 = swift_allocObject(v158, v160 + *(_QWORD *)(v267 + 72), v159 | 7);
    v258 = xmmword_258070;
    v275 = (char *)v161;
    *(_OWORD *)(v161 + 16) = xmmword_258070;
    v162 = v161 + v160;
    v262 = (char *)(v161 + v160);
    v265 = *(int *)(sub_5C154(&qword_3284D0) + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v156 + 16))(v162, v157, v142);
    v163 = sub_5C154(&qword_3284D8);
    v164 = *(_QWORD *)(type metadata accessor for ToolbarActionMenu(0) - 8);
    v165 = *(_QWORD *)(v164 + 72);
    v166 = *(unsigned __int8 *)(v164 + 80);
    v167 = (v166 + 32) & ~v166;
    v259 = 2 * v165;
    v168 = swift_allocObject(v163, v167 + 3 * v165, v166 | 7);
    v260 = v168;
    *(_OWORD *)(v168 + 16) = v226;
    v169 = v168 + v167;
    v170 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v230[7];
    v171 = v245;
    v172 = v239;
    v170(v245, 1, 1, v239);
    v173 = v170;
    v256 = (void (*)(void))v170;
    v174 = v229;
    v175 = swift_allocObject(v228, &v229[v236], v227);
    *(_OWORD *)(v175 + 16) = v258;
    (*(void (**)(char *, char *, uint64_t))(v255 + 16))(&v174[v175], v154, v246);
    v257 = v169;
    v176.n128_f64[0] = ToolbarActionMenu.init(id:name:items:preSelectionActionProvider:postSelectionActionProvider:)(0x6572616873, 0xE500000000000000, v171, v175, 0, 0, 0, 0);
    v237 = (char *)(v169 + v165);
    v177 = v268;
    LocalizerDefaultValue.init(stringLiteral:)("View", 4, 2, v176);
    v178 = v266;
    v179 = v279;
    ((void (*)(char *, _QWORD, uint64_t))v271)(v266, v272, v279);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000028, 0x8000000000273EE0, 0, v177, v178);
    v270(v178, v179);
    ((void (*)(char *, uint64_t))v269)(v177, v278);
    v173(v171, 0, 1, v172);
    v230 = v282;
    v180 = v234;
    *(_QWORD *)&v258 = *(_QWORD *)(v234 + 16);
    v181 = v241;
    v182 = v243;
    ((void (*)(char *, uint64_t, uint64_t))v258)(v241, v242, v243);
    v183 = v238;
    v184 = v251;
    (*(void (**)(char *, unint64_t, _QWORD *))(v238 + 16))(v250, v264, v251);
    v229 = v281;
    v185 = *(unsigned __int8 *)(v180 + 80);
    v186 = (v185 + 16) & ~v185;
    v187 = v185 | 7;
    v249 = (BOOL *)(v185 | 7);
    v236 = v186;
    v188 = (v233 + v186 + 7) & 0xFFFFFFFFFFFFFFF8;
    v264 = v188 + 8;
    v233 = v188;
    v189 = *(unsigned __int8 *)(v183 + 80);
    v190 = (v188 + 8 + v189) & ~v189;
    v191 = swift_allocObject(&unk_2F1648, v190 + v231, v187 | v189);
    v234 = *(_QWORD *)(v180 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v234)(v191 + v186, v181, v182);
    v192 = v229;
    *(_QWORD *)(v191 + v188) = v229;
    (*(void (**)(uint64_t, char *, _QWORD *))(v183 + 32))(v191 + v190, v250, v184);
    v193 = v253;
    v251 = *(_QWORD **)(v253 + 16);
    v194 = v235;
    v195 = v254;
    ((void (*)(char *, _QWORD *, uint64_t))v251)(v235, v252, v254);
    sub_5E0D8((uint64_t)v273, (uint64_t)&v283);
    v196 = *(unsigned __int8 *)(v193 + 80);
    v197 = (v196 + 16) & ~v196;
    v273 = (_QWORD *)(v197 + v232);
    v250 = (char *)(v196 | 7);
    v198 = (v197 + v232 + 7) & 0xFFFFFFFFFFFFFFF8;
    v199 = swift_allocObject(&unk_2F1670, v198 + 40, v196 | 7);
    v238 = *(_QWORD *)(v193 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v238)(v199 + v197, v194, v195);
    sub_5DC98(&v283, v199 + v198);
    v200 = v230;
    swift_bridgeObjectRetain(v230);
    swift_bridgeObjectRetain(v192);
    v201 = v245;
    v202.n128_f64[0] = ToolbarActionMenu.init(id:name:items:preSelectionActionProvider:postSelectionActionProvider:)(0x7265746C6966, 0xE600000000000000, v245, v200, sub_1A9760, v191, sub_1A984C, v199);
    v259 += v257;
    v203 = v268;
    LocalizerDefaultValue.init(stringLiteral:)("Sort by", 7, 2, v202);
    v204 = v266;
    v205 = v279;
    ((void (*)(char *, _QWORD, uint64_t))v271)(v266, v272, v279);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000002ALL, 0x8000000000273F10, 0, v203, v204);
    v270(v204, v205);
    ((void (*)(char *, uint64_t))v269)(v203, v278);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v256)(v201, 0, 1, v239);
    swift_beginAccess(&v281, &v283, 0, 0);
    v206 = v281;
    v207 = v241;
    v208 = v243;
    ((void (*)(char *, uint64_t, uint64_t))v258)(v241, v242, v243);
    v209 = v282;
    v210 = v233;
    v211 = swift_allocObject(&unk_2F1698, v233 + 9, v249);
    ((void (*)(uint64_t, char *, uint64_t))v234)(v211 + v236, v207, v208);
    *(_QWORD *)(v211 + v210) = v209;
    *(_BYTE *)(v211 + v264) = v263;
    v212 = v252;
    v213 = v254;
    ((void (*)(char *))v251)(v194);
    v214 = swift_allocObject(&unk_2F16C0, v273, v250);
    ((void (*)(uint64_t, char *, uint64_t))v238)(v214 + v197, v194, v213);
    v215 = ToolbarActionMenu.init(id:name:items:preSelectionActionProvider:postSelectionActionProvider:)(1953656691, 0xE400000000000000, v201, v206, sub_1A9910, v211, sub_1A99C8, v214);
    *(_QWORD *)&v262[v265] = v260;
    (*(void (**)(double))(v267 + 104))(v215);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v247, v240);
    (*(void (**)(char *, uint64_t))(v255 + 8))(v244, v246);
    (*(void (**)(_QWORD *, uint64_t))(v253 + 8))(v212, v213);
    (*(void (**)(unsigned __int8 *, uint64_t))(v261 + 8))(v276, v277);
    return (uint64_t)v275;
  }
}

uint64_t sub_1A9658(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_31F590);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for SeriesData(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for SeriesListSortOrder(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

void sub_1A9760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;

  v3 = *(_QWORD *)(type metadata accessor for SeriesData(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesListSortOrder(0) - 8) + 80);
  sub_1A6504(a1, v1 + v4, *(_QWORD *)(v1 + v5), v1 + ((v5 + v6 + 8) & ~v6), v7);
}

uint64_t sub_1A97D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for PageScrollAction.Location(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

char *sub_1A984C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;

  v3 = *(_QWORD *)(type metadata accessor for PageScrollAction.Location(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1A6A18(v5, a1, v1 + v4, (_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1A989C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for SeriesData(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 9, v5);
}

void sub_1A9910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;

  v3 = *(_QWORD *)(type metadata accessor for SeriesData(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1A6D5C(a1, v1 + v4, *(_QWORD *)v5, *(unsigned __int8 *)(v5 + 8), v6);
}

uint64_t sub_1A9968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PageScrollAction.Location(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1A99C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageScrollAction.Location(0) - 8) + 80);
  return sub_1A7258(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t destroy for ContentUnavailableComponent(uint64_t a1)
{
  sub_79528(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for ContentUnavailableComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_EBB1C(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for ContentUnavailableComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_EBB1C(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_79528(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

__n128 initializeWithTake for ContentUnavailableComponent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ContentUnavailableComponent(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_79528(v5, v6, v7);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentUnavailableComponent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentUnavailableComponent()
{
  return &type metadata for ContentUnavailableComponent;
}

uint64_t sub_1A9C2C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1A9C6C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

unint64_t sub_1A9C6C()
{
  unint64_t result;

  result = qword_3284E8;
  if (!qword_3284E8)
  {
    result = swift_getWitnessTable(&unk_26405C, &type metadata for ContentUnavailableComponent);
    atomic_store(result, (unint64_t *)&qword_3284E8);
  }
  return result;
}

uint64_t sub_1A9CB0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  char v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[4];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  char v80;

  v76 = a3;
  v5 = sub_5C154(&qword_320420);
  v71 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_320428);
  __chkstk_darwin(v8);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_5C154(&qword_328500);
  __chkstk_darwin(v70);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5C154(&qword_328508);
  __chkstk_darwin(v75);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v73 = (uint64_t)&v69 - v16;
  v74 = sub_5C154(&qword_328510);
  __chkstk_darwin(v74);
  v18 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for ContentUnavailableComponentModel(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19);
  v23 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1 + *(int *)(v22 + 28);
  if ((*(_BYTE *)(v24 + 16) & 1) != 0)
  {
    v79 = *a2;
    v80 = *((_BYTE *)a2 + 16);
    v77 = *((_QWORD *)a2 + 3);
    v78 = *((_BYTE *)a2 + 32);
    sub_1AB484(a1, (uint64_t)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    v25 = *(unsigned __int8 *)(v20 + 80);
    v26 = (v25 + 49) & ~v25;
    v27 = swift_allocObject(&unk_2F1768, v26 + v21, v25 | 7);
    v28 = a2[1];
    *(_OWORD *)(v27 + 16) = *a2;
    *(_OWORD *)(v27 + 32) = v28;
    *(_BYTE *)(v27 + 48) = *((_BYTE *)a2 + 32);
    sub_16B120((uint64_t)v23, v27 + v26);
    *v18 = sub_1AB610;
    v18[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v27;
    swift_storeEnumTagMultiPayload(v18, v74, 0);
    sub_1AB660((uint64_t)&v79);
    sub_1AB690(&v77);
    v29 = sub_5C154(&qword_328558);
    v30 = sub_67060(&qword_328560, &qword_328558, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v31 = sub_D643C(&qword_328568, &qword_328508, (void (*)(void))sub_1AB3E4);
    return _ConditionalContent<>.init(storage:)(v18, v29, v75, v30, v31);
  }
  else
  {
    v69 = (uint64_t)&v69;
    v34 = *(double *)v24;
    v33 = *(double *)(v24 + 8);
    __chkstk_darwin(v22);
    __chkstk_darwin(v35);
    v36 = sub_5C154(&qword_328518);
    v37 = sub_5C154(&qword_328520);
    v38 = sub_1AB170();
    v68[2] = sub_1AB368();
    v68[3] = &protocol witness table for EmptyView;
    v68[0] = &type metadata for EmptyView;
    v68[1] = v38;
    v39 = ((uint64_t (*)(uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, Swift::Void (__swiftcall *)(), _QWORD, uint64_t, uint64_t))ContentUnavailableView.init(label:description:actions:))(sub_1AB160, v68, sub_1AB168, v68, SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame(), 0, v36, v37);
    v40 = static Alignment.center.getter(v39);
    v42 = sub_74880(0.0, 1, 0.0, 1, 400.0, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v40, v41);
    v43 = (*(uint64_t (**)(char *, uint64_t, double))(v71 + 8))(v7, v72, v42);
    v44 = static Edge.Set.top.getter(v43);
    v45 = EdgeInsets.init(_all:)(v34);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    sub_5E1A4((uint64_t)v10, (uint64_t)v12, &qword_320428);
    v52 = &v12[*(int *)(v70 + 36)];
    *v52 = v44;
    *((double *)v52 + 1) = v45;
    *((_QWORD *)v52 + 2) = v47;
    *((_QWORD *)v52 + 3) = v49;
    *((_QWORD *)v52 + 4) = v51;
    v52[40] = 0;
    v53 = sub_5E09C((uint64_t)v10, &qword_320428);
    v54 = static Edge.Set.bottom.getter(v53);
    v55 = EdgeInsets.init(_all:)(v33);
    v57 = v56;
    v59 = v58;
    v61 = v60;
    sub_5E1A4((uint64_t)v12, (uint64_t)v14, &qword_328500);
    v62 = v75;
    v63 = &v14[*(int *)(v75 + 36)];
    *v63 = v54;
    *((double *)v63 + 1) = v55;
    *((_QWORD *)v63 + 2) = v57;
    *((_QWORD *)v63 + 3) = v59;
    *((_QWORD *)v63 + 4) = v61;
    v63[40] = 0;
    sub_5E09C((uint64_t)v12, &qword_328500);
    v64 = v73;
    sub_66F14((uint64_t)v14, v73, &qword_328508);
    sub_5E1A4(v64, (uint64_t)v18, &qword_328508);
    swift_storeEnumTagMultiPayload(v18, v74, 1);
    v65 = sub_5C154(&qword_328558);
    v66 = sub_67060(&qword_328560, &qword_328558, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v67 = sub_D643C(&qword_328568, &qword_328508, (void (*)(void))sub_1AB3E4);
    _ConditionalContent<>.init(storage:)(v18, v65, v62, v66, v67);
    return sub_5E09C(v64, &qword_328508);
  }
}

uint64_t sub_1AA23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  uint64_t v62;
  _BYTE v63[16];
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  _OWORD v67[3];
  CGRect v68;

  v56 = a3;
  v55 = a1;
  v60 = a4;
  v59 = sub_5C154(&qword_320420);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_320428);
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_5C154(&qword_320410);
  __chkstk_darwin(v57);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CoordinateSpace(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v18 = *(_BYTE *)(a2 + 16);
  sub_EBB1C(*(_QWORD *)a2, v16, v18);
  sub_79118(v17, v16, v18);
  v20 = v19;
  sub_79528(v17, v16, v18);
  v21 = *(_QWORD *)(a2 + 24);
  LOBYTE(v17) = *(_BYTE *)(a2 + 32);
  v22 = swift_retain(v21);
  v23 = sub_78264(v22, v17);
  swift_release(v21);
  KeyPath = swift_getKeyPath(&unk_2640C8);
  *(_QWORD *)&v67[0] = v23;
  v25 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v67, KeyPath, v25);
  swift_release(KeyPath);
  swift_beginAccess(v23 + 40, v66, 0, 0);
  v26 = *(double *)(v23 + 40);
  v27 = swift_release(v23);
  v28 = v20 + v26;
  static CoordinateSpace.shelfContainerContent.getter(v27);
  v29 = GeometryProxy.frame(in:)(v15);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v68.origin.x = v29;
  v68.origin.y = v31;
  v68.size.width = v33;
  v68.size.height = v35;
  v36 = v28 - CGRectGetMinY(v68);
  if (v36 > 0.0)
    v37 = v36;
  else
    v37 = 0.0;
  v64 = v56;
  v65 = a2;
  v62 = v56;
  v38 = sub_5C154(&qword_328518);
  v39 = sub_5C154(&qword_328520);
  v40 = sub_1AB170();
  v41 = sub_1AB368();
  v42 = ContentUnavailableView.init(label:description:actions:)(sub_1AB850, v63, sub_1AB84C, v61, SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame(), 0, v38, v39, &type metadata for EmptyView, v40, v41, &protocol witness table for EmptyView, v55);
  v43 = static Alignment.center.getter(v42);
  v45 = sub_74880(0.0, 1, 0.0, 1, 400.0, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v43, v44);
  v46 = (*(uint64_t (**)(char *, uint64_t, double))(v58 + 8))(v6, v59, v45);
  v47 = static Alignment.center.getter(v46);
  _FrameLayout.init(width:height:alignment:)(v67, 0, 1, *(_QWORD *)&v37, 0, v47, v48);
  sub_5E1A4((uint64_t)v9, (uint64_t)v11, &qword_320428);
  v49 = &v11[*(int *)(v57 + 36)];
  v50 = v67[1];
  *(_OWORD *)v49 = v67[0];
  *((_OWORD *)v49 + 1) = v50;
  *((_OWORD *)v49 + 2) = v67[2];
  v51 = sub_5E09C((uint64_t)v9, &qword_320428);
  v52 = static Alignment.center.getter(v51);
  sub_748D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v60, 0.0, 1, 0.0, 1, v52, v53);
  return sub_5E09C((uint64_t)v11, &qword_320410);
}

uint64_t sub_1AA6B0@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (**v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = a2;
  v3 = sub_5C154(&qword_321F58);
  v88 = *(_QWORD *)(v3 - 8);
  v89 = v3;
  __chkstk_darwin(v3);
  v86 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_328588);
  v91 = *(_QWORD *)(v5 - 8);
  v92 = v5;
  __chkstk_darwin(v5);
  v90 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_5C154(&qword_328538);
  __chkstk_darwin(v98);
  v87 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v93 = (uint64_t)&v84 - v9;
  v96 = sub_5C154(&qword_328590);
  __chkstk_darwin(v96);
  v97 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_31F7E8);
  __chkstk_darwin(v11);
  v85 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v84 = (char *)&v84 - v14;
  v15 = type metadata accessor for LocalizerRequest(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for LocalizedText(0);
  v19 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_328598);
  v23 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5C154(&qword_328548);
  __chkstk_darwin(v26);
  __chkstk_darwin(v27);
  v30 = a1[1];
  v95 = v31;
  if (v30)
  {
    v32 = *a1;
    v33 = type metadata accessor for ContentUnavailableComponentModel(0);
    __chkstk_darwin(v33);
    *(&v84 - 2) = v34;
    __chkstk_darwin(v35);
    *(&v84 - 2) = v32;
    *(&v84 - 1) = v30;
    sub_648E0(&qword_321F70, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    v36 = swift_bridgeObjectRetain(v30);
    v37 = v86;
    Label.init(title:icon:)(sub_ADEF0, v36);
    swift_bridgeObjectRelease(v30);
    v39 = *(int *)(v33 + 32);
    if ((*((_BYTE *)a1 + v39) & 1) != 0)
    {
      v40 = enum case for Font.Design.default(_:);
      v41 = type metadata accessor for Font.Design(0);
      v42 = *(_QWORD *)(v41 - 8);
      v43 = (uint64_t)v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 104))(v85, v40, v41);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v41);
    }
    else
    {
      v43 = (uint64_t)v85;
      static Font.Design.serifIfSupported.getter(v38);
    }
    v54 = v90;
    v55 = sub_67060(&qword_321F68, &qword_321F58, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v56 = v89;
    View.fontDesign(_:)(v43, v89, v55);
    sub_5E09C(v43, &qword_31F7E8);
    v57 = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v37, v56);
    if ((*((_BYTE *)a1 + v39) & 1) != 0)
      v58 = static Color.secondary.getter(v57);
    else
      v58 = static Color.primary.getter(v57);
    v59 = v58;
    v61 = v91;
    v60 = v92;
    v62 = (uint64_t)v87;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v87, v54, v92);
    v63 = v98;
    *(_QWORD *)(v62 + *(int *)(v98 + 36)) = v59;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v54, v60);
    v64 = &qword_328538;
    v65 = v93;
    sub_66F14(v62, v93, &qword_328538);
    v66 = v97;
    sub_5E1A4(v65, v97, &qword_328538);
    swift_storeEnumTagMultiPayload(v66, v96, 0);
    v67 = sub_1AB1DC();
    v68 = sub_1AB2A8();
    v69 = v66;
    v70 = v63;
    v71 = v95;
  }
  else
  {
    v89 = v29;
    v90 = v23;
    v92 = (uint64_t)&v84 - v28;
    v93 = v19;
    v91 = v22;
    v44 = type metadata accessor for ContentUnavailableComponentModel(0);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, (char *)a1 + *(int *)(v44 + 20), v15);
    v45 = LocalizedText.init(_:)(v18);
    v46 = *(int *)(v44 + 32);
    v47 = a1;
    v48 = *((_BYTE *)a1 + v46);
    v49 = v94;
    v50 = (uint64_t)v84;
    if ((v48 & 1) != 0)
    {
      v51 = enum case for Font.Design.default(_:);
      v52 = type metadata accessor for Font.Design(0);
      v53 = *(_QWORD *)(v52 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 104))(v50, v51, v52);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
    }
    else
    {
      static Font.Design.serifIfSupported.getter(v45);
    }
    v72 = v93;
    v73 = sub_648E0(&qword_321F70, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    View.fontDesign(_:)(v50, v49, v73);
    sub_5E09C(v50, &qword_31F7E8);
    v74 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v21, v49);
    v76 = (void (**)(uint64_t, char *, uint64_t))v90;
    v75 = v91;
    if ((*((_BYTE *)v47 + v46) & 1) != 0)
      v77 = static Color.secondary.getter(v74);
    else
      v77 = static Color.primary.getter(v74);
    v78 = v77;
    v79 = v89;
    v76[2](v89, v25, v75);
    v80 = v95;
    *(_QWORD *)(v79 + *(int *)(v95 + 36)) = v78;
    ((void (*)(char *, uint64_t))v76[1])(v25, v75);
    v64 = &qword_328548;
    v81 = v79;
    v65 = v92;
    sub_66F14(v81, v92, &qword_328548);
    v82 = v97;
    sub_5E1A4(v65, v97, &qword_328548);
    swift_storeEnumTagMultiPayload(v82, v96, 1);
    v67 = sub_1AB1DC();
    v68 = sub_1AB2A8();
    v70 = v98;
    v69 = v82;
    v71 = v80;
  }
  _ConditionalContent<>.init(storage:)(v69, v70, v71, v67, v68);
  return sub_5E09C(v65, v64);
}

uint64_t sub_1AAD84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v3 = type metadata accessor for LocalizedText(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v22 - v15;
  v17 = type metadata accessor for ContentUnavailableComponentModel(0);
  sub_5E1A4(a1 + *(int *)(v17 + 24), (uint64_t)v9, &qword_3217B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_5E09C((uint64_t)v9, &qword_3217B8);
    v18 = 1;
    v19 = v23;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    LocalizedText.init(_:)(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v20 = v23;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v23, v6, v3);
    v18 = 0;
    v19 = v20;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v19, v18, 1, v3);
}

uint64_t sub_1AAF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16[2];
  char v17;

  v5 = sub_5C154(&qword_320400);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_OWORD *)(v2 + 16);
  v16[0] = *(_OWORD *)v2;
  v16[1] = v8;
  v17 = *(_BYTE *)(v2 + 32);
  *v7 = static Alignment.center.getter(v9);
  v7[1] = v10;
  v11 = sub_5C154(&qword_3284F8);
  v12 = sub_1A9CB0(a1, v16, (uint64_t)v7 + *(int *)(v11 + 44));
  v13 = static Alignment.center.getter(v12);
  sub_74828(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, 0.0, 1, v13, v14);
  return sub_5E09C((uint64_t)v7, &qword_320400);
}

uint64_t sub_1AB064(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v9[2];
  char v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v9[0] = *(_QWORD *)v1;
  v9[1] = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  sub_EBB1C(v9[0], v3, v4);
  v7 = sub_1A9C6C();
  swift_retain(v5);
  return _ComponentBody.init(_:)(v9, a1, v7);
}

unint64_t sub_1AB0E0()
{
  unint64_t result;

  result = qword_3284F0;
  if (!qword_3284F0)
  {
    result = swift_getWitnessTable(&unk_26400C, &type metadata for ContentUnavailableComponent);
    atomic_store(result, (unint64_t *)&qword_3284F0);
  }
  return result;
}

uint64_t sub_1AB124(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B94E8, 1);
}

uint64_t sub_1AB134()
{
  return sub_648E0(&qword_320030, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
}

uint64_t sub_1AB160@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AA6B0(*(char ***)(v1 + 16), a1);
}

uint64_t sub_1AB168@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AAD84(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1AB170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328528;
  if (!qword_328528)
  {
    v1 = sub_667D0(&qword_328518);
    sub_1AB1DC();
    sub_1AB2A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328528);
  }
  return result;
}

unint64_t sub_1AB1DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_328530;
  if (!qword_328530)
  {
    v1 = sub_667D0(&qword_328538);
    v2[0] = sub_667D0(&qword_321F58);
    v2[1] = sub_67060(&qword_321F68, &qword_321F58, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontDesign(_:)>>, 1);
    sub_67060(&qword_328440, &qword_328448, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328530);
  }
  return result;
}

unint64_t sub_1AB2A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_328540;
  if (!qword_328540)
  {
    v1 = sub_667D0(&qword_328548);
    v2[0] = type metadata accessor for LocalizedText(255);
    v2[1] = sub_648E0(&qword_321F70, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontDesign(_:)>>, 1);
    sub_67060(&qword_328440, &qword_328448, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328540);
  }
  return result;
}

unint64_t sub_1AB368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328550;
  if (!qword_328550)
  {
    v1 = sub_667D0(&qword_328520);
    sub_648E0(&qword_321F70, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_328550);
  }
  return result;
}

uint64_t sub_1AB3E4()
{
  return sub_D643C(&qword_328570, &qword_328500, (void (*)(void))sub_1AB400);
}

unint64_t sub_1AB400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328578;
  if (!qword_328578)
  {
    v1 = sub_667D0(&qword_320428);
    sub_67060(&qword_328580, &qword_320420, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328578);
  }
  return result;
}

uint64_t sub_1AB484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentUnavailableComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AB4C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 49) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_79528(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  v12 = v6 + v1[9];
  v13 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v6 + v1[10]));
  v14 = v6 + v1[11];
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1AB610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContentUnavailableComponentModel(0) - 8) + 80);
  return sub_1AA23C(a1, v2 + 16, v2 + ((v5 + 49) & ~v5), a2);
}

uint64_t sub_1AB660(uint64_t a1)
{
  sub_EBB1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_1AB690(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_1AB6C0(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return LocalizedText.init(_:)(v5);
}

uint64_t sub_1AB740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  swift_bridgeObjectRetain(a2);
  result = Image.init(systemName:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AB784@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  result = Image.init(systemName:)(v4, v3);
  *a1 = result;
  return result;
}

unint64_t sub_1AB7C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3285A0;
  if (!qword_3285A0)
  {
    v1 = sub_667D0(&qword_320408);
    sub_67060(&qword_3285A8, &qword_320400, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3285A0);
  }
  return result;
}

uint64_t *sub_1AB854(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_64DD8(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
    v19 = a3[6];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v26 = a3[7];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(_QWORD *)v28;
    v30 = v28[8];
    sub_64DD8(*(_QWORD *)v28, v30);
    *(_QWORD *)v27 = v29;
    v27[8] = v30;
  }
  return a1;
}

uint64_t sub_1AB9EC(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  v7 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return sub_64FFC(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
}

uint64_t *sub_1ABAD0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_64DD8(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = v26[8];
  sub_64DD8(*(_QWORD *)v26, v28);
  *(_QWORD *)v25 = v27;
  v25[8] = v28;
  return a1;
}

uint64_t *sub_1ABC3C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_64DD8(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_64FFC(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[6];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_5E09C((uint64_t)a1 + v19, &qword_320160);
    v22 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
  }
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = v28[8];
  sub_64DD8(*(_QWORD *)v28, v30);
  v31 = *(_QWORD *)v27;
  v32 = v27[8];
  *(_QWORD *)v27 = v29;
  v27[8] = v30;
  sub_64FFC(v31, v32);
  return a1;
}

char *sub_1ABDF0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  return a1;
}

char *sub_1ABF40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_64FFC(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    sub_5E09C((uint64_t)&a1[v14], &qword_320160);
    v17 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)v21;
  LOBYTE(v21) = v21[8];
  v23 = *(_QWORD *)v20;
  v24 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = (char)v21;
  sub_64FFC(v23, v24);
  return a1;
}

uint64_t sub_1AC0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1AC0E8);
}

uint64_t sub_1AC0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = sub_5C154(&qword_31F498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = sub_5C154(&qword_3201B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t sub_1AC194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1AC1A0);
}

uint64_t sub_1AC1A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5C154(&qword_31F498);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
      return result;
    }
    v10 = sub_5C154(&qword_3201B0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ReviewBrickComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_328608;
  if (!qword_328608)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReviewBrickComponent);
  return result;
}

void sub_1AC288(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_663E4(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    sub_663E4(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = "\t";
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_1AC334(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0(&qword_32A020, type metadata accessor for ReviewBrickComponent, (uint64_t)&unk_264170);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_1AC38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v3 = v2;
  v54 = a2;
  v48 = type metadata accessor for RedactionReasons(0);
  v53 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_328650);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_3203F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_5C154(&qword_3203F8);
  __chkstk_darwin(v50);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_328658);
  v51 = *(_QWORD *)(v15 - 8);
  v52 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5C154(&qword_328660);
  __chkstk_darwin(v49);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v20);
  *((_QWORD *)v9 + 1) = 0x4020000000000000;
  v9[16] = 0;
  v21 = sub_5C154(&qword_328668);
  v22 = sub_1AC780(a1, v3, (uint64_t)&v9[*(int *)(v21 + 44)]);
  LOBYTE(a1) = static Edge.Set.all.getter(v22);
  sub_5E1A4((uint64_t)v9, (uint64_t)v12, &qword_328650);
  v23 = &v12[*(int *)(v10 + 36)];
  *v23 = a1;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)(v23 + 8) = _Q0;
  *(_OWORD *)(v23 + 24) = _Q0;
  v23[40] = 0;
  v29 = sub_5E09C((uint64_t)v9, &qword_328650);
  v30 = static Alignment.leading.getter(v29);
  sub_74930(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v30, v31);
  sub_5E09C((uint64_t)v12, &qword_3203F0);
  v32 = v3 + *(int *)(type metadata accessor for ReviewBrickComponent(0) + 20);
  v33 = *(_QWORD *)v32;
  LOBYTE(v9) = *(_BYTE *)(v32 + 8);
  sub_64DD8(*(_QWORD *)v32, (char)v9);
  LOBYTE(v10) = sub_768E8(v33, (char)v9);
  v34 = sub_64FFC(v33, (char)v9);
  if ((v10 & 1) != 0)
  {
    static RedactionReasons.placeholder.getter(v34);
    v35 = v48;
  }
  else
  {
    v55 = _swiftEmptyArrayStorage;
    v36 = sub_648E0(&qword_328670, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v37 = sub_5C154(&qword_328678);
    v38 = sub_67060(&qword_328680, &qword_328678, (uint64_t)&protocol conformance descriptor for [A]);
    v39 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v37, v38, v48, v36);
    v35 = v39;
  }
  v40 = sub_1AEC9C();
  View.redacted(reason:)(v6, v50, v40);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v6, v35);
  v41 = sub_5E09C((uint64_t)v14, &qword_3203F8);
  v42 = static Alignment.center.getter(v41);
  v44 = v43;
  v45 = (uint64_t)&v19[*(int *)(v49 + 36)];
  sub_1AE9B4(v45);
  v46 = (uint64_t *)(v45 + *(int *)(sub_5C154(&qword_3286A0) + 36));
  *v46 = v42;
  v46[1] = v44;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v19, v17, v52);
  return sub_66F14((uint64_t)v19, v54, &qword_328660);
}

uint64_t sub_1AC780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  char *v109;
  __n128 v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t OpaqueTypeConformance2;
  uint64_t v116;
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  char v168;
  uint64_t v169;

  v162 = a3;
  v5 = sub_5C154(&qword_3286A8);
  __chkstk_darwin(v5);
  v163 = (uint64_t)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v154 = (uint64_t *)((char *)&v139 - v8);
  v156 = sub_5C154(&qword_3286B0);
  __chkstk_darwin(v156);
  v157 = (uint64_t *)((char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v158 = sub_5C154(&qword_3286B8);
  v147 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v145 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v146 = (char *)&v139 - v12;
  v13 = sub_5C154(&qword_3286C0);
  __chkstk_darwin(v13);
  v160 = (uint64_t)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v159 = (char *)&v139 - v16;
  v153 = sub_5C154(&qword_3286C8);
  __chkstk_darwin(v153);
  v18 = (char *)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_5C154(&qword_3286D0);
  __chkstk_darwin(v151);
  v152 = (uint64_t)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for AccessibilityTraits(0);
  v142 = *(_QWORD *)(v143 - 8);
  v20 = __chkstk_darwin(v143);
  v140 = (char *)&v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Font.Leading(0, v20);
  v164 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_323350);
  __chkstk_darwin(v25);
  v141 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_5C154(&qword_3286D8);
  __chkstk_darwin(v150);
  v144 = (uint64_t)&v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5C154((uint64_t *)&unk_326320);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for CoverViewModel(0, v29);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v139 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5C154(&qword_3286E0);
  __chkstk_darwin(v36);
  v155 = (uint64_t)&v139 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v38);
  v149 = (char *)&v139 - v40;
  sub_18431C((uint64_t)v31, v39);
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
  v165 = a1;
  v161 = a2;
  v148 = v22;
  if (v41 == 1)
  {
    sub_5E09C((uint64_t)v31, (uint64_t *)&unk_326320);
    v42 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 36));
    v44 = *v42;
    v43 = v42[1];
    v45 = sub_5C154(&qword_327470);
    _DecodeDefault_Wrapper.wrappedValue.getter(&v166, v45);
    v139 = v166;
    swift_bridgeObjectRetain(v43);
    v48 = static Font.footnote.getter(v46, v47);
    v49 = v164;
    (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v24, enum case for Font.Leading.tight(_:), v22);
    v50 = Font.leading(_:)(v24, v48);
    swift_release(v48);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v22);
    v51 = Text.font(_:)(v50, v44, v43, 0, _swiftEmptyArrayStorage);
    v53 = v52;
    v55 = v54;
    v57 = v56;
    swift_bridgeObjectRelease(v43);
    swift_release(v50);
    LOBYTE(v43) = v55 & 1;
    v58 = (void *)Text.bold()(v51, v53, v55 & 1, v57);
    v60 = v59;
    v62 = v61;
    v64 = v63;
    sub_6693C(v51, v53, v43);
    swift_bridgeObjectRelease(v57);
    v166 = v58;
    v167 = v60;
    v168 = v62 & 1;
    v169 = v64;
    a1 = v165;
    v65 = v140;
    static AccessibilityTraits.isHeader.getter(v66);
    v67 = (uint64_t)v141;
    View.accessibilityAddTraits(_:)(v65, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v65, v143);
    sub_6693C((uint64_t)v166, (uint64_t)v167, v168);
    swift_bridgeObjectRelease(v169);
    KeyPath = swift_getKeyPath(&unk_2641D8);
    v69 = v144;
    sub_5E1A4(v67, v144, &qword_323350);
    v70 = v150;
    v71 = v69 + *(int *)(v150 + 36);
    v72 = v139;
    *(_QWORD *)v71 = KeyPath;
    *(_QWORD *)(v71 + 8) = v72;
    *(_BYTE *)(v71 + 16) = v72 ^ 1;
    sub_5E09C(v67, &qword_323350);
    v73 = v152;
    sub_5E1A4(v69, v152, &qword_3286D8);
    swift_storeEnumTagMultiPayload(v73, v151, 1);
    v74 = sub_67060(&qword_3286E8, &qword_3286C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v75 = sub_1AEE20();
    v76 = (uint64_t)v149;
    _ConditionalContent<>.init(storage:)(v73, v153, v70, v74, v75);
    sub_5E09C(v69, &qword_3286D8);
  }
  else
  {
    v77.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v33 + 32))(v35, v31, v32);
    *(_QWORD *)v18 = static VerticalAlignment.center.getter(v77);
    *((_QWORD *)v18 + 1) = 0x4020000000000000;
    v18[16] = 0;
    v78 = sub_5C154(&qword_328718);
    sub_1AD338((uint64_t)v35, a2, a1, (uint64_t)&v18[*(int *)(v78 + 44)]);
    v79 = v152;
    sub_5E1A4((uint64_t)v18, v152, &qword_3286C8);
    swift_storeEnumTagMultiPayload(v79, v151, 0);
    v80 = sub_67060(&qword_3286E8, &qword_3286C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v81 = sub_1AEE20();
    v76 = (uint64_t)v149;
    _ConditionalContent<>.init(storage:)(v79, v153, v150, v80, v81);
    sub_5E09C((uint64_t)v18, &qword_3286C8);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  }
  v82 = type metadata accessor for ReviewBrickComponentModel(0);
  v83 = sub_5C154(&qword_327470);
  _DecodeDefault_Wrapper.wrappedValue.getter(&v166, v83);
  v84 = v166;
  v85 = (uint64_t *)(a1 + *(int *)(v82 + 44));
  v87 = *v85;
  v86 = v85[1];
  swift_bridgeObjectRetain(v86);
  v90 = static Font.footnote.getter(v88, v89);
  v91 = v164;
  v92 = v148;
  (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v24, enum case for Font.Leading.tight(_:), v148);
  v93 = Font.leading(_:)(v24, v90);
  swift_release(v90);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v24, v92);
  if (v84 == 1)
  {
    v94 = (void *)Text.font(_:)(v93, v87, v86, 0, _swiftEmptyArrayStorage);
    v96 = v95;
    v98 = v97;
    v100 = v99;
    swift_bridgeObjectRelease(v86);
    swift_release(v93);
    v101 = v98 & 1;
    v166 = v94;
    v167 = v96;
    v168 = v101;
    v169 = v100;
    v102 = type metadata accessor for ReviewBrickComponent(0);
    v103 = v161;
    v104 = v161 + *(int *)(v102 + 28);
    v105 = *(_QWORD *)v104;
    v106 = *(_BYTE *)(v104 + 8);
    sub_64DD8(*(_QWORD *)v104, v106);
    v107 = sub_768E8(v105, v106);
    sub_64FFC(v105, v106);
    if ((v107 & 1) != 0)
      v108 = 5;
    else
      v108 = 3;
    v109 = v145;
    View.lineLimit(_:reservesSpace:)(v108, 1, &type metadata for Text, &protocol witness table for Text);
    sub_6693C((uint64_t)v94, (uint64_t)v96, v101);
    v110 = swift_bridgeObjectRelease(v100);
    v111 = v147;
    v112 = v146;
    v113 = v158;
    (*(void (**)(char *, char *, uint64_t, __n128))(v147 + 32))(v146, v109, v158, v110);
    v114 = v157;
    (*(void (**)(uint64_t *, char *, uint64_t))(v111 + 16))(v157, v112, v113);
    swift_storeEnumTagMultiPayload(v114, v156, 0);
    v166 = &type metadata for Text;
    v167 = &protocol witness table for Text;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v166, &opaque type descriptor for <<opaque return type of View.lineLimit(_:reservesSpace:)>>, 1);
    v116 = (uint64_t)v159;
    _ConditionalContent<>.init(storage:)(v114, v113, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v113);
  }
  else
  {
    v118 = Text.font(_:)(v93, v87, v86, 0, _swiftEmptyArrayStorage);
    v120 = v119;
    v122 = v121;
    v124 = v123;
    swift_bridgeObjectRelease(v86);
    swift_release(v93);
    v125 = v156;
    v126 = v157;
    *v157 = v118;
    v126[1] = v120;
    *((_BYTE *)v126 + 16) = v122 & 1;
    v126[3] = v124;
    swift_storeEnumTagMultiPayload(v126, v125, 1);
    v166 = &type metadata for Text;
    v167 = &protocol witness table for Text;
    v127 = swift_getOpaqueTypeConformance2(&v166, &opaque type descriptor for <<opaque return type of View.lineLimit(_:reservesSpace:)>>, 1);
    v116 = (uint64_t)v159;
    _ConditionalContent<>.init(storage:)(v126, v158, &type metadata for Text, v127, &protocol witness table for Text);
    v103 = v161;
  }
  v128 = static VerticalAlignment.center.getter(v117);
  v129 = (uint64_t)v154;
  *v154 = v128;
  *(_QWORD *)(v129 + 8) = 0;
  *(_BYTE *)(v129 + 16) = 1;
  v130 = v129 + *(int *)(sub_5C154(&qword_328700) + 44);
  *(_QWORD *)v130 = static VerticalAlignment.center.getter(v131);
  *(_QWORD *)(v130 + 8) = 0x4020000000000000;
  *(_BYTE *)(v130 + 16) = 0;
  v132 = sub_5C154(&qword_328708);
  sub_1ADB58(v165, v103, (char *)(v130 + *(int *)(v132 + 44)));
  v133 = v155;
  sub_5E1A4(v76, v155, &qword_3286E0);
  v134 = v160;
  sub_5E1A4(v116, v160, &qword_3286C0);
  v135 = v163;
  sub_5E1A4(v129, v163, &qword_3286A8);
  v136 = v162;
  sub_5E1A4(v133, v162, &qword_3286E0);
  v137 = sub_5C154(&qword_328710);
  sub_5E1A4(v134, v136 + *(int *)(v137 + 48), &qword_3286C0);
  sub_5E1A4(v135, v136 + *(int *)(v137 + 64), &qword_3286A8);
  sub_5E09C(v129, &qword_3286A8);
  sub_5E09C(v116, &qword_3286C0);
  sub_5E09C(v76, &qword_3286E0);
  sub_5E09C(v135, &qword_3286A8);
  sub_5E09C(v134, &qword_3286C0);
  return sub_5E09C(v133, &qword_3286E0);
}

uint64_t sub_1AD338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[3];

  v40 = a2;
  v41 = a3;
  v38 = a1;
  v42 = a4;
  v4 = sub_5C154(&qword_328720);
  __chkstk_darwin(v4);
  v39 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v37 - v8;
  v10 = type metadata accessor for CoverViewModel(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CoverView(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_326088);
  __chkstk_darwin(v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v37 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v38, v10, v23);
  v26 = CoverView.init(model:cacheGeometry:)(v14, 0);
  v27 = static Alignment.leading.getter(v26);
  _FrameLayout.init(width:height:alignment:)(v43, 0, 1, 0x4040000000000000, 0, v27, v28);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v18, v15);
  v29 = &v21[*(int *)(v19 + 36)];
  v30 = v43[1];
  *(_OWORD *)v29 = v43[0];
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v43[2];
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v31 = sub_66F14((uint64_t)v21, (uint64_t)v25, &qword_326088);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v31);
  *((_QWORD *)v9 + 1) = 0x3FF0000000000000;
  v9[16] = 0;
  v32 = sub_5C154(&qword_328728);
  sub_1AD5FC(v40, v41, (uint64_t)&v9[*(int *)(v32 + 44)]);
  sub_5E1A4((uint64_t)v25, (uint64_t)v21, &qword_326088);
  v33 = v39;
  sub_5E1A4((uint64_t)v9, v39, &qword_328720);
  v34 = v42;
  sub_5E1A4((uint64_t)v21, v42, &qword_326088);
  v35 = sub_5C154(&qword_328730);
  sub_5E1A4(v33, v34 + *(int *)(v35 + 48), &qword_328720);
  sub_5E09C((uint64_t)v9, &qword_328720);
  sub_5E09C((uint64_t)v25, &qword_326088);
  sub_5E09C(v33, &qword_328720);
  return sub_5E09C((uint64_t)v21, &qword_326088);
}

uint64_t sub_1AD5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;

  v80 = a1;
  v90 = a3;
  v81 = type metadata accessor for ColorConstants(0);
  v79 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v78 = (uint64_t)v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityTraits(0);
  v87 = *(_QWORD *)(v5 - 8);
  v88 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Font.Leading(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_323350);
  __chkstk_darwin(v13);
  v83 = (char *)v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_5C154(&qword_3286D8);
  __chkstk_darwin(v86);
  v89 = (uint64_t)v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)v77 - v17;
  v84 = (int *)type metadata accessor for ReviewBrickComponentModel(0);
  v85 = a2;
  v19 = a2;
  v20 = (uint64_t *)(a2 + v84[9]);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19 + v84[7];
  v77[0] = sub_5C154(&qword_327470);
  v77[1] = v23;
  _DecodeDefault_Wrapper.wrappedValue.getter(&v91, v77[0]);
  v82 = v91;
  swift_bridgeObjectRetain(v21);
  v26 = static Font.footnote.getter(v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Font.Leading.tight(_:), v9);
  v27 = Font.leading(_:)(v12, v26);
  swift_release(v26);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v28 = Text.font(_:)(v27, v22, v21, 0, _swiftEmptyArrayStorage);
  v30 = v29;
  LOBYTE(v9) = v31;
  v33 = v32;
  swift_bridgeObjectRelease(v21);
  swift_release(v27);
  LOBYTE(v21) = v9 & 1;
  v34 = Text.bold()(v28, v30, v9 & 1, v33);
  v36 = v35;
  LOBYTE(v10) = v37;
  v39 = v38;
  sub_6693C(v28, v30, v21);
  swift_bridgeObjectRelease(v33);
  v91 = v34;
  v92 = v36;
  v93 = v10 & 1;
  v94 = v39;
  static AccessibilityTraits.isHeader.getter(v40);
  v41 = (uint64_t)v83;
  View.accessibilityAddTraits(_:)(v8, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v8, v88);
  sub_6693C(v91, v92, v93);
  swift_bridgeObjectRelease(v94);
  KeyPath = swift_getKeyPath(&unk_2641D8);
  sub_5E1A4(v41, (uint64_t)v18, &qword_323350);
  v43 = v18;
  v44 = &v18[*(int *)(v86 + 36)];
  v45 = v82;
  *(_QWORD *)v44 = KeyPath;
  *((_QWORD *)v44 + 1) = v45;
  v44[16] = v45 ^ 1;
  sub_5E09C(v41, &qword_323350);
  v46 = (uint64_t *)(v85 + v84[10]);
  v47 = v46[1];
  if (v47)
  {
    v48 = *v46;
    v49 = swift_bridgeObjectRetain(v46[1]);
    v50 = static Font.caption2.getter(v49);
    v51 = Text.font(_:)(v50, v48, v47, 0, _swiftEmptyArrayStorage);
    v53 = v52;
    LOBYTE(v48) = v54;
    v56 = v55;
    swift_bridgeObjectRelease(v47);
    swift_release(v50);
    v57 = v48 & 1;
    v58 = v78;
    v59 = sub_76AA0(v78);
    v60 = ColorConstants.booksSecondaryLabel.getter(v59);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v58, v81);
    v91 = v60;
    v88 = Text.foregroundStyle<A>(_:)(&v91, v51, v53, v57, v56, &type metadata for Color, &protocol witness table for Color);
    v62 = v61;
    v64 = v63;
    v66 = v65 & 1;
    sub_6693C(v51, v53, v57);
    swift_release(v60);
    swift_bridgeObjectRelease(v56);
    _DecodeDefault_Wrapper.wrappedValue.getter(&v91, v77[0]);
    v67 = v91;
    v68 = v91 ^ 1;
    v69 = swift_getKeyPath(&unk_2641D8);
  }
  else
  {
    v88 = 0;
    v62 = 0;
    v66 = 0;
    v64 = 0;
    v69 = 0;
    v67 = 0;
    v68 = 0;
  }
  v70 = (uint64_t)v43;
  v71 = (uint64_t)v43;
  v72 = v89;
  sub_5E1A4(v71, v89, &qword_3286D8);
  v73 = v90;
  sub_5E1A4(v72, v90, &qword_3286D8);
  v74 = v73 + *(int *)(sub_5C154(&qword_328738) + 48);
  v75 = v88;
  *(_QWORD *)v74 = v88;
  *(_QWORD *)(v74 + 8) = v62;
  *(_QWORD *)(v74 + 16) = v66;
  *(_QWORD *)(v74 + 24) = v64;
  *(_QWORD *)(v74 + 32) = v69;
  *(_QWORD *)(v74 + 40) = v67;
  *(_BYTE *)(v74 + 48) = v68;
  sub_1AEF28(v75, v62, v66, v64, v69);
  sub_5E09C(v70, &qword_3286D8);
  sub_1AEF64(v75, v62, v66, v64, v69);
  return sub_5E09C(v72, &qword_3286D8);
}

uint64_t sub_1ADB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  __n128 v66;
  _QWORD v68[2];
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD v79[2];

  v71 = a2;
  v78 = a3;
  v5 = type metadata accessor for ColorConstants(0);
  v73 = *(_QWORD *)(v5 - 8);
  v74 = v5;
  __chkstk_darwin(v5);
  v72 = (uint64_t)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReviewBrickComponent(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for ReviewBrickComponentModel(0);
  v11 = *(_QWORD *)(v69 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v69);
  v13 = sub_5C154(&qword_328740);
  v76 = *(_QWORD *)(v13 - 8);
  v77 = v13;
  __chkstk_darwin(v13);
  v75 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v70 = (char *)v68 - v16;
  v68[1] = a1;
  sub_5E11C(a1, (uint64_t)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ReviewBrickComponentModel);
  sub_5E11C(a2, (uint64_t)v10, type metadata accessor for ReviewBrickComponent);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = (v12 + v19 + v18) & ~v19;
  v21 = swift_allocObject(&unk_2F1818, v20 + v9, v17 | v19 | 7);
  sub_5E160((uint64_t)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v18, type metadata accessor for ReviewBrickComponentModel);
  sub_5E160((uint64_t)v10, v21 + v20, type metadata accessor for ReviewBrickComponent);
  v22 = sub_5C154(&qword_328748);
  v23 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v24 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v25 = sub_1AF2DC();
  v26 = sub_648E0(&qword_320B58, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v27 = sub_648E0(&qword_320B60, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_1AEDCC, 0, sub_1AF264, v21, v22, v23, v24, v25, v26, v27);
  v28 = (_QWORD *)(a1 + *(int *)(v69 + 48));
  v29 = v28[1];
  v79[0] = *v28;
  v79[1] = v29;
  v30 = sub_668F8();
  swift_bridgeObjectRetain(v29);
  v31 = Text.init<A>(_:)(v79, &type metadata for String, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v39 = static Font.caption2.getter(v38);
  v40 = Text.font(_:)(v39, v31, v33, v37, v35);
  v42 = v41;
  LOBYTE(v24) = v43;
  v45 = v44;
  swift_release(v39);
  LOBYTE(v39) = v24 & 1;
  sub_6693C(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  v46 = v72;
  v47 = sub_76AA0(v72);
  v48 = ColorConstants.booksSecondaryLabel.getter(v47);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v46, v74);
  v79[0] = v48;
  v73 = Text.foregroundStyle<A>(_:)(v79, v40, v42, v24 & 1, v45, &type metadata for Color, &protocol witness table for Color);
  v74 = v49;
  v51 = v50;
  LOBYTE(v46) = v52 & 1;
  sub_6693C(v40, v42, v39);
  swift_release(v48);
  swift_bridgeObjectRelease(v45);
  v53 = sub_5C154(&qword_327470);
  _DecodeDefault_Wrapper.wrappedValue.getter(v79, v53);
  v54 = LOBYTE(v79[0]);
  KeyPath = swift_getKeyPath(&unk_2641D8);
  v57 = v75;
  v56 = v76;
  v58 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v59 = v70;
  v60 = v77;
  v58(v75, v70, v77);
  v61 = v78;
  v58(v78, v57, v60);
  v62 = &v61[*(int *)(sub_5C154(&qword_328788) + 48)];
  v64 = v73;
  v63 = v74;
  *(_QWORD *)v62 = v73;
  *((_QWORD *)v62 + 1) = v51;
  v62[16] = v46;
  *((_QWORD *)v62 + 3) = v63;
  *((_QWORD *)v62 + 4) = KeyPath;
  *((_QWORD *)v62 + 5) = v54;
  v62[48] = v54 ^ 1;
  sub_7BBCC(v64, v51, v46);
  v65 = *(void (**)(char *, uint64_t))(v56 + 8);
  swift_bridgeObjectRetain(v63);
  swift_retain(KeyPath);
  v65(v59, v60);
  sub_6693C(v64, v51, v46);
  swift_release(KeyPath);
  v66 = swift_bridgeObjectRelease(v63);
  return ((uint64_t (*)(char *, uint64_t, __n128))v65)(v57, v60, v66);
}

uint64_t sub_1AE000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  void (*v66)(char *, _QWORD, uint64_t);
  uint64_t result;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t OpaqueTypeConformance2;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  _QWORD v139[4];

  v137 = a3;
  v112 = a1;
  v113 = a4;
  v111 = type metadata accessor for LocalizerLookupStrategy(0);
  v110 = *(_QWORD *)(v111 - 8);
  v5 = __chkstk_darwin(v111);
  v109 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for LocalizerDefaultValue(0, v5);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v106 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v8);
  v105 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_5C154(&qword_31F5F8);
  __chkstk_darwin(v119);
  v120 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v117 = (char *)&v102 - v12;
  v13 = type metadata accessor for DynamicTypeSize(0);
  v136 = *(_QWORD **)(v13 - 8);
  __chkstk_darwin(v13);
  v131 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v135 = (char *)&v102 - v16;
  v121 = sub_5C154(&qword_31F600);
  __chkstk_darwin(v121);
  v116 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v118 = (uint64_t)&v102 - v19;
  v20 = type metadata accessor for Image.Scale(0);
  v133 = *(_QWORD *)(v20 - 8);
  v134 = v20;
  __chkstk_darwin(v20);
  v132 = (char *)&v102 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ColorConstants(0);
  v129 = *(_QWORD *)(v22 - 8);
  v130 = v22;
  v23 = __chkstk_darwin(v22);
  v128 = (uint64_t)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for StarRatingView(0, v23);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = v25;
  __chkstk_darwin(v25);
  v29 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_5C154(&qword_328778);
  __chkstk_darwin(v123);
  v31 = (char *)&v102 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_328790);
  v126 = *(_QWORD *)(v32 - 8);
  v127 = v32;
  __chkstk_darwin(v32);
  v34 = (char *)&v102 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_5C154(&qword_328770);
  __chkstk_darwin(v125);
  v124 = (char *)&v102 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5C154(&qword_328758);
  __chkstk_darwin(v36);
  v138 = (char *)&v102 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5C154(&qword_328798);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v115 = (char *)&v102 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(int *)(type metadata accessor for ReviewBrickComponentModel(0) + 52);
  v122 = a2;
  v114 = v39;
  v40 = StarRatingView.init(rating:)(*(double *)(a2 + v39));
  v42 = static Font.footnote.getter(v40, v41);
  KeyPath = swift_getKeyPath(&unk_264208);
  v44 = v27;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v31, v29, v27);
  v45 = v123;
  v46 = (uint64_t *)&v31[*(int *)(v123 + 36)];
  *v46 = KeyPath;
  v46[1] = v42;
  v47 = v131;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v44);
  v48 = sub_1AF4FC();
  View.bold(_:)(1, v45, v48);
  sub_5E09C((uint64_t)v31, &qword_328778);
  v49 = v128;
  v50 = sub_76AA0(v128);
  v51 = ColorConstants.booksSecondaryLabel.getter(v50);
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v49, v130);
  v53 = v126;
  v52 = v127;
  v54 = (uint64_t)v124;
  (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v124, v34, v127);
  *(_QWORD *)(v54 + *(int *)(v125 + 36)) = v51;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v52);
  v56 = v132;
  v55 = v133;
  v57 = v134;
  (*(void (**)(char *, _QWORD, uint64_t))(v133 + 104))(v132, enum case for Image.Scale.small(_:), v134);
  v58 = swift_getKeyPath(&unk_264238);
  v137 = v36;
  v59 = *(int *)(v36 + 36);
  v60 = (uint64_t)v138;
  v61 = (uint64_t *)&v138[v59];
  v62 = sub_5C154(&qword_3205E0);
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))((char *)v61 + *(int *)(v62 + 28), v56, v57);
  *v61 = v58;
  sub_5E1A4(v54, v60, &qword_328770);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
  v63 = v54;
  v64 = v135;
  sub_5E09C(v63, &qword_328770);
  v65 = v136;
  v66 = (void (*)(char *, _QWORD, uint64_t))v136[13];
  v66(v64, enum case for DynamicTypeSize.xSmall(_:), v13);
  v66(v47, enum case for DynamicTypeSize.medium(_:), v13);
  sub_648E0(&qword_31F610, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v64, v47, v13);
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v68 = v119;
  v69 = v117;
  v70 = &v117[*(int *)(v119 + 48)];
  v71 = (void (*)(char *, char *, uint64_t))v65[4];
  v71(v117, v64, v13);
  v71(v70, v47, v13);
  v72 = v120;
  v73 = &v120[*(int *)(v68 + 48)];
  v74 = (void (*)(char *, char *, uint64_t))v65[2];
  v74(v120, v69, v13);
  v74(v73, v70, v13);
  v75 = (uint64_t)v116;
  v71(v116, v72, v13);
  v76 = (void (*)(char *, uint64_t))v65[1];
  v76(v73, v13);
  v77 = &v72[*(int *)(v68 + 48)];
  v71(v72, v69, v13);
  v71(v77, v70, v13);
  v78 = v121;
  v71((char *)(v75 + *(int *)(v121 + 36)), v77, v13);
  v76(v72, v13);
  v79 = v118;
  sub_66F14(v75, v118, &qword_31F600);
  v80 = sub_1AF3CC();
  v81 = sub_67060(&qword_31F620, &qword_31F600, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  v82 = v115;
  v83 = (uint64_t)v138;
  View.dynamicTypeSize<A>(_:)(v79, v137, v78, v80);
  sub_5E09C(v79, &qword_31F600);
  result = sub_5E09C(v83, &qword_328758);
  v84.n128_u64[0] = *(_QWORD *)(v122 + v114);
  if ((~v84.n128_u64[0] & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v84.n128_f64[0] <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v84.n128_f64[0] < 9.22337204e18)
  {
    v85 = v78;
    v86 = (uint64_t)v84.n128_f64[0];
    v87 = v106;
    LocalizerDefaultValue.init(stringLiteral:)("Rating, @@count@@ stars", 23, 2, v84);
    v88 = v110;
    v89 = v109;
    v90 = v111;
    (*(void (**)(char *, _QWORD, uint64_t))(v110 + 104))(v109, enum case for LocalizerLookupStrategy.default(_:), v111);
    v91 = v105;
    static LocalizerRequest.string(withCount:forKey:with:defaultValue:using:)(v86, 0xD00000000000001CLL, 0x8000000000273FE0, 0, v87, v89);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v90);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v87, v108);
    sub_5E0D8(v112, (uint64_t)v139);
    v92 = Text.init(_:localizer:)(v91, v139);
    v94 = v93;
    v96 = v95;
    v139[0] = v137;
    v139[1] = v85;
    v98 = v97 & 1;
    v139[2] = v80;
    v139[3] = v81;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v139, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v100 = v104;
    View.accessibilityLabel(_:)(v92, v94, v98, v96, v104, OpaqueTypeConformance2);
    sub_6693C(v92, v94, v98);
    v101 = swift_bridgeObjectRelease(v96);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v103 + 8))(v82, v100, v101);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1AE9B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v2 = type metadata accessor for ColorConstants(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v6);
  v8 = (_OWORD *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_5C154(&qword_31F778);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)v8 + *(int *)(v6 + 20);
  v14 = enum case for RoundedCornerStyle.continuous(_:);
  v15 = type metadata accessor for RoundedCornerStyle(0, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  __asm { FMOV            V0.2D, #10.0 }
  *v8 = _Q0;
  v21 = sub_76AA0((uint64_t)v5);
  v22 = ColorConstants.booksSecondaryBackground.getter(v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_5E11C((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v12[*(int *)(v9 + 52)] = v22;
  *(_WORD *)&v12[*(int *)(v9 + 56)] = 256;
  v23 = sub_1AED8C((uint64_t)v8);
  v24 = static Alignment.center.getter(v23);
  sub_74988(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, 0.0, 1, v24, v25);
  return sub_5E09C((uint64_t)v12, &qword_31F778);
}

uint64_t sub_1AEB98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(v5, (uint64_t)v4, type metadata accessor for ReviewBrickComponent);
  v6 = sub_648E0(&qword_32A020, type metadata accessor for ReviewBrickComponent, (uint64_t)&unk_264170);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_1AEC34()
{
  return sub_648E0(&qword_328648, type metadata accessor for ReviewBrickComponent, (uint64_t)&unk_264120);
}

uint64_t sub_1AEC60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9538, 1);
}

uint64_t sub_1AEC70()
{
  return sub_648E0(&qword_320070, type metadata accessor for ReviewBrickComponentModel, (uint64_t)&protocol conformance descriptor for ReviewBrickComponentModel);
}

unint64_t sub_1AEC9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328688;
  if (!qword_328688)
  {
    v1 = sub_667D0(&qword_3203F8);
    sub_1AED08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328688);
  }
  return result;
}

unint64_t sub_1AED08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328690;
  if (!qword_328690)
  {
    v1 = sub_667D0(&qword_3203F0);
    sub_67060(&qword_328698, &qword_328650, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328690);
  }
  return result;
}

uint64_t sub_1AED8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AEDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_errorRetain();
  swift_retain(a3);
  return _JetLocalizeDefaultFailed.init(error:retry:)(a1, a2, a3);
}

unint64_t sub_1AEE20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3286F0;
  if (!qword_3286F0)
  {
    v1 = sub_667D0(&qword_3286D8);
    sub_1AEEA4();
    sub_67060(&qword_326A50, &qword_326A58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3286F0);
  }
  return result;
}

unint64_t sub_1AEEA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3286F8;
  if (!qword_3286F8)
  {
    v1 = sub_667D0(&qword_323350);
    sub_648E0(&qword_31F710, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3286F8);
  }
  return result;
}

uint64_t sub_1AEF28(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_7BBCC(result, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    return swift_retain(a5);
  }
  return result;
}

double sub_1AEF64(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a4)
  {
    sub_6693C(a1, a2, a3 & 1);
    swift_release(a5);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1AEFA0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v1 = (int *)type metadata accessor for ReviewBrickComponentModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for ReviewBrickComponent(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v29 = *(_QWORD *)(v7 + 64);
  v30 = v0;
  v9 = v0 + v4;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v4));
  if (*(_QWORD *)(v0 + v4 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v9 + 40));

  v10 = v9 + v1[7];
  v11 = sub_5C154(&qword_327470);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v9 + v1[8];
  v13 = type metadata accessor for ImpressionMetrics(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[12] + 8));
  v15 = (_QWORD *)(v9 + v1[14]);
  v16 = v15[1];
  if (v16)
  {
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v15[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v15 + 4);
  }
  v17 = (_QWORD *)(v9 + v1[15]);
  v18 = v17[1];
  if (v18)
  {
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v17[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v17 + 4);
  }
  v19 = (v4 + v5 + v8) & ~v8;
  v20 = (_QWORD *)(v9 + v1[16]);
  v21 = v20[1];
  if (v21)
  {
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v20 + 4);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[18] + 8));
  v22 = (_QWORD *)(v30 + v19);
  v23 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v30 + v19, v23) == 1)
  {
    v24 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  sub_64FFC(*(_QWORD *)((char *)v22 + v6[5]), *((_BYTE *)v22 + v6[5] + 8));
  v25 = (_QWORD *)((char *)v22 + v6[6]);
  v26 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v25, v27);
  }
  else
  {
    swift_release(*v25);
  }
  sub_64FFC(*(_QWORD *)((char *)v22 + v6[7]), *((_BYTE *)v22 + v6[7] + 8));
  return swift_deallocObject(v30, v19 + v29, v3 | v8 | 7);
}

uint64_t sub_1AF264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ReviewBrickComponentModel(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ReviewBrickComponent(0) - 8) + 80);
  return sub_1AE000(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

unint64_t sub_1AF2DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_328750;
  if (!qword_328750)
  {
    v1 = sub_667D0(&qword_328748);
    v2[0] = sub_667D0(&qword_328758);
    v2[1] = sub_667D0(&qword_31F600);
    v2[2] = sub_1AF3CC();
    v2[3] = sub_67060(&qword_31F620, &qword_31F600, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_648E0(&qword_31F710, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328750);
  }
  return result;
}

unint64_t sub_1AF3CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328760;
  if (!qword_328760)
  {
    v1 = sub_667D0(&qword_328758);
    sub_1AF450();
    sub_67060(&qword_3205F8, &qword_3205E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328760);
  }
  return result;
}

unint64_t sub_1AF450()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_328768;
  if (!qword_328768)
  {
    v1 = sub_667D0(&qword_328770);
    v2[0] = sub_667D0(&qword_328778);
    v2[1] = sub_1AF4FC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
    sub_67060(&qword_328440, &qword_328448, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328768);
  }
  return result;
}

unint64_t sub_1AF4FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328780;
  if (!qword_328780)
  {
    v1 = sub_667D0(&qword_328778);
    sub_648E0(&qword_320B50, (uint64_t (*)(uint64_t))&type metadata accessor for StarRatingView, (uint64_t)&protocol conformance descriptor for StarRatingView);
    sub_67060(&qword_31F7D0, &qword_31F7D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328780);
  }
  return result;
}

unint64_t sub_1AF5AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_3287A0;
  if (!qword_3287A0)
  {
    v1 = sub_667D0(&qword_328660);
    v2[0] = sub_667D0(&qword_3203F8);
    v2[1] = sub_1AEC9C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_67060(&qword_3287A8, &qword_3286A0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3287A0);
  }
  return result;
}

uint64_t destroy for JetViewAppearanceViewModifier(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for JetViewAppearanceViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for JetViewAppearanceViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = a1[3];
  v8 = a2[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v7);
  return a1;
}

uint64_t *assignWithTake for JetViewAppearanceViewModifier(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a1[3];
  a1[3] = a2[3];
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JetViewAppearanceViewModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JetViewAppearanceViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for JetViewAppearanceViewModifier()
{
  return &type metadata for JetViewAppearanceViewModifier;
}

uint64_t sub_1AF84C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9584, 1);
}

uint64_t sub_1AF85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)(uint64_t);
  uint64_t (*v29)(char *, uint64_t);
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  _QWORD v37[2];
  unsigned __int8 v38;

  v33 = a5;
  v7 = a4;
  v34 = a4;
  v31[1] = a1;
  v32 = a3 & 1;
  v10 = sub_5C154(&qword_3287B0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v7;
  v36 = a5;
  v14 = sub_5C154(&qword_325B50);
  State.projectedValue.getter(v37, v14);
  v16 = v37[0];
  v15 = v37[1];
  v17 = v38;
  v18 = sub_5C154(&qword_3287B8);
  v19 = sub_67060(&qword_3287C0, &qword_3287B8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.viewAppearance(_:)(v16, v15, v17, v18, v19);
  swift_release(v15);
  swift_release(v16);
  v20 = swift_retain(a2);
  v21 = v32;
  v22 = sub_77E94(v20, v32);
  v23 = swift_release(a2);
  v24 = HostingControllerVisibilityStateManager.statePublisher.getter(v23);
  swift_release(v22);
  v25 = swift_allocObject(&unk_2F1960, 48, 7);
  *(_QWORD *)(v25 + 16) = a2;
  *(_BYTE *)(v25 + 24) = v21;
  *(_BYTE *)(v25 + 32) = v34;
  v26 = v33;
  *(_QWORD *)(v25 + 40) = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a6, v13, v10);
  v27 = sub_5C154(&qword_3287C8);
  *(_QWORD *)(a6 + *(int *)(v27 + 52)) = v24;
  v28 = (uint64_t (**)(uint64_t))(a6 + *(int *)(v27 + 56));
  *v28 = sub_1AFBD0;
  v28[1] = (uint64_t (*)(uint64_t))v25;
  v29 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  swift_retain(a2);
  swift_retain(v26);
  return v29(v13, v10);
}

uint64_t sub_1AFA3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = type metadata accessor for HostingControllerVisibilityStateManager.State(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, enum case for HostingControllerVisibilityStateManager.State.visible(_:), v7, v9);
  v12 = sub_1AFBEC();
  dispatch thunk of RawRepresentable.rawValue.getter(&v21, v7, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v7, v12);
  v13 = v22;
  v14 = v20;
  if (v21 == v19 && v22 == v20)
  {
    v15 = 1;
    v14 = v22;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v19, v20, 0);
  }
  swift_bridgeObjectRelease(v13);
  v16 = swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v11, v7, v16);
  LOBYTE(v21) = a4 & 1;
  v22 = a5;
  LOBYTE(v19) = v15 & 1;
  v17 = sub_5C154(&qword_325B50);
  return State.wrappedValue.setter(&v19, v17);
}

uint64_t sub_1AFB88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1AF85C(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1AFBA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1AFBD0(uint64_t a1)
{
  uint64_t v1;

  return sub_1AFA3C(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_1AFBEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323060;
  if (!qword_323060)
  {
    v1 = type metadata accessor for HostingControllerVisibilityStateManager.State(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for HostingControllerVisibilityStateManager.State, v1);
    atomic_store(result, (unint64_t *)&qword_323060);
  }
  return result;
}

uint64_t sub_1AFC34()
{
  return sub_67060(&qword_3287D0, &qword_3287C8, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
}

uint64_t sub_1AFC60(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    *(_BYTE *)(v4 + 48) = *((_BYTE *)a2 + 48);
    v8 = *(int *)(a3 + 28);
    v9 = v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 32);
    v13 = (void *)(v4 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for ClickData(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_5C154(&qword_31F590);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t sub_1AFDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for ClickData(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t sub_1AFE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for ClickData(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_5C154(&qword_31F590);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_1AFF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_65938((_QWORD *)(a1 + 8), (_QWORD *)(a2 + 8));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for ClickData(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  v16 = v15(v12, 1, v13);
  if (!(_DWORD)v8)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_5C154(&qword_31F590);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_1B009C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for ClickData(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_5C154(&qword_31F590);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t sub_1B01AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for ClickData(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  v16 = v15(v12, 1, v13);
  if (!(_DWORD)v8)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_5C154(&qword_31F590);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_1B030C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B0318);
}

uint64_t sub_1B0318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_5C154(&qword_31F590);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1B03BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B03C8);
}

uint64_t sub_1B03C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_5C154(&qword_31F590);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SeriesListFilterAction(uint64_t a1)
{
  uint64_t result;

  result = qword_328830;
  if (!qword_328830)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesListFilterAction);
  return result;
}

void sub_1B04A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_2642F8;
  v6[1] = &unk_264310;
  v6[2] = &unk_264328;
  v2 = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_6CEDC(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t *sub_1B0548(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v19 = type metadata accessor for FontConstants(0, v18);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v16, v19);
      v20 = v15;
      v21 = v17;
      v22 = 1;
    }
    else
    {
      v23 = *v16;
      *v15 = *v16;
      swift_retain(v23);
      v20 = v15;
      v21 = v17;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v24 = *(int *)(a3 + 24);
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = v25;
      v30 = v27;
      v31 = 1;
    }
    else
    {
      v32 = *v26;
      *v25 = *v26;
      swift_retain(v32);
      v29 = v25;
      v30 = v27;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
  }
  return a1;
}

uint64_t sub_1B0714(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v9 = type metadata accessor for FontConstants(0, v8);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v11 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v10, v11) != 1)
    return swift_release(*v10);
  v12 = type metadata accessor for SizeConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
}

uint64_t *sub_1B0828(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v17 = type metadata accessor for FontConstants(0, v16);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
    v18 = v13;
    v19 = v15;
    v20 = 1;
  }
  else
  {
    v21 = *v14;
    *v13 = *v14;
    swift_retain(v21);
    v18 = v13;
    v19 = v15;
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v19, v20);
  v22 = *(int *)(a3 + 24);
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = v23;
    v28 = v25;
    v29 = 1;
  }
  else
  {
    v30 = *v24;
    *v23 = *v24;
    swift_retain(v30);
    v27 = v23;
    v28 = v25;
    v29 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v28, v29);
  return a1;
}

uint64_t *sub_1B09C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_5E09C((uint64_t)a1 + v12, &qword_320290);
    v15 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v17 = type metadata accessor for FontConstants(0, v16);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
      v18 = v13;
      v19 = v15;
      v20 = 1;
    }
    else
    {
      v21 = *v14;
      *v13 = *v14;
      swift_retain(v21);
      v18 = v13;
      v19 = v15;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
    v22 = *(int *)(a3 + 24);
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    sub_5E09C((uint64_t)a1 + v22, &qword_320160);
    v25 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = v23;
      v28 = v25;
      v29 = 1;
    }
    else
    {
      v30 = *v24;
      *v23 = *v24;
      swift_retain(v30);
      v27 = v23;
      v28 = v25;
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
  }
  return a1;
}

char *sub_1B0BA0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v13 = type metadata accessor for FontConstants(0, v12);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  return a1;
}

char *sub_1B0D34(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_5E09C((uint64_t)&a1[v8], &qword_320290);
    v11 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v13 = type metadata accessor for FontConstants(0, v12);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v14 = *(int *)(a3 + 24);
    v15 = &a1[v14];
    v16 = &a2[v14];
    sub_5E09C((uint64_t)&a1[v14], &qword_320160);
    v17 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1B0F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B0F0C);
}

uint64_t sub_1B0F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_5C154(&qword_31F498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_5C154(&qword_320BC8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_5C154(&qword_3201B0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1B0FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B0FBC);
}

uint64_t sub_1B0FBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5C154(&qword_31F498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5C154(&qword_320BC8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_3201B0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SheetHeaderComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_3288D0;
  if (!qword_3288D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SheetHeaderComponent);
  return result;
}

void sub_1B10A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_663E4(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_663E4(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_663E4(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1B1174(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0(&qword_328910, type metadata accessor for SheetHeaderComponent, (uint64_t)&unk_264408);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_1B11CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  v5 = type metadata accessor for SizeConstants.Spacing(0, a3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SizeConstants(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_320448);
  __chkstk_darwin(v13);
  v15 = (double *)((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SheetHeaderComponent(0);
  v16 = sub_76D64((uint64_t)v12);
  SizeConstants.spacing.getter(v16);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v18 = SizeConstants.Spacing.m.getter(v17);
  v19.n128_f64[0] = (*(double (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)v15 = static VerticalAlignment.center.getter(v19);
  v15[1] = v18;
  *((_BYTE *)v15 + 16) = 0;
  v20 = sub_5C154(&qword_328920);
  v22 = sub_1B13A8(a1, v3, (uint64_t)v15 + *(int *)(v20 + 44), v21);
  v23 = static Alignment.leading.getter(v22);
  sub_749E0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v27, 0.0, 1, 0.0, 1, v23, v24);
  return sub_5E09C((uint64_t)v15, &qword_320448);
}

uint64_t sub_1B13A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, char *, uint64_t, double);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, __n128);
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[2];
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v54 = a2;
  v55 = a3;
  v5 = type metadata accessor for CoverViewModel(0, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CoverView(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_328928);
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v56 = (char *)&v50 - v18;
  type metadata accessor for SheetHeaderComponentModel(0);
  v19 = sub_5C154(&qword_322C98);
  v20 = (void *)MResourceDecoder.wrappedValue.getter(v19);
  v21 = dispatch thunk of MAsset.isAudiobook.getter(v20);

  if ((v21 & 1) != 0)
    v22 = 44.0;
  else
    v22 = 36.0;
  if ((v21 & 1) != 0)
    v23 = 44.0;
  else
    v23 = 54.0;
  sub_1EADAC((uint64_t)v9);
  CoverView.init(model:cacheGeometry:)(v9, 0);
  v24 = sub_1EADAC((uint64_t)v9);
  v25 = CoverViewModel.aspectRatio.getter(v24);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v26 = sub_648E0(&qword_328930, (uint64_t (*)(uint64_t))&type metadata accessor for CoverView, (uint64_t)&protocol conformance descriptor for CoverView);
  v27 = v16;
  View.frame(fitting:withAspectRatio:)(v10, v26, v22, v23, v25);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v29 = v56;
  v28 = v57;
  v30 = v58;
  v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v57 + 32))(v56, v16, v58);
  v52 = static HorizontalAlignment.leading.getter(v31);
  v32 = sub_1B16FC(a1, v54, v59);
  v34 = v59[0];
  v33 = v59[1];
  v35 = v60;
  v36 = v61;
  v50 = v63;
  v51 = v62;
  v37 = v64;
  v53 = v16;
  v54 = v65;
  v38 = *(void (**)(char *, char *, uint64_t, double))(v28 + 16);
  v38(v27, v29, v30, v32);
  v39 = v55;
  ((void (*)(uint64_t, char *, uint64_t))v38)(v55, v27, v30);
  v40 = v39 + *(int *)(sub_5C154(&qword_328938) + 48);
  v41 = v51;
  *(_QWORD *)v40 = v52;
  *(_QWORD *)(v40 + 8) = 0x4008000000000000;
  *(_BYTE *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = v34;
  *(_QWORD *)(v40 + 32) = v33;
  *(_BYTE *)(v40 + 40) = v35;
  *(_QWORD *)(v40 + 48) = v36;
  *(_QWORD *)(v40 + 56) = v41;
  v42 = v50;
  *(_QWORD *)(v40 + 64) = v50;
  *(_BYTE *)(v40 + 72) = v37;
  v43 = v54;
  *(_QWORD *)(v40 + 80) = v54;
  sub_7BBCC(v34, v33, v35);
  swift_bridgeObjectRetain(v36);
  sub_7BBCC(v41, v42, v37);
  v44 = *(void (**)(char *, uint64_t, __n128))(v57 + 8);
  v45 = v43;
  v46 = swift_bridgeObjectRetain(v43);
  v47 = v58;
  v44(v56, v58, v46);
  sub_6693C(v34, v33, v35);
  swift_bridgeObjectRelease(v36);
  sub_6693C(v41, v42, v37);
  v48 = swift_bridgeObjectRelease(v45);
  return ((uint64_t (*)(char *, uint64_t, __n128))v44)(v53, v47, v48);
}

double sub_1B16FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double result;
  uint64_t v75;
  char *v76;
  void (*v77)(uint64_t, uint64_t);
  void (*v78)(char *, uint64_t);
  uint64_t (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v93 = a2;
  v86 = a1;
  v90 = a3;
  v92 = type metadata accessor for ColorConstants(0);
  v89 = *(_QWORD *)(v92 - 8);
  v4 = __chkstk_darwin(v92);
  v83 = (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for FontConstants.SheetHeader(0, v4);
  v6 = *(_QWORD *)(v91 - 8);
  v7 = __chkstk_darwin(v91);
  v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FontConstants(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  v80 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for SheetHeaderComponentModel(0);
  v14 = (uint64_t *)(a1 + *(int *)(v84 + 32));
  v15 = v14[1];
  v94 = *v14;
  v95 = v15;
  v16 = sub_668F8();
  v82 = v16;
  swift_bridgeObjectRetain(v15);
  v17 = Text.init<A>(_:)(&v94, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v81 = v93 + *(int *)(type metadata accessor for SheetHeaderComponent(0) + 20);
  v24 = sub_77618((uint64_t)v13);
  v76 = v9;
  FontConstants.sheetHeader.getter(v24);
  v79 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v25 = v79(v13, v10);
  v26 = FontConstants.SheetHeader.title.getter(v25);
  v78 = *(void (**)(char *, uint64_t))(v6 + 8);
  v78(v9, v91);
  v27 = Text.font(_:)(v26, v17, v19, v23, v21);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  sub_6693C(v17, v19, v23);
  swift_release(v26);
  swift_bridgeObjectRelease(v21);
  v34 = v83;
  v35 = sub_76AA0(v83);
  v36 = ColorConstants.booksLabel.getter(v35);
  v77 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
  v77(v34, v92);
  v37 = Text.foregroundColor(_:)(v36, v27, v29, v33, v31);
  v88 = v38;
  v89 = v37;
  v87 = v39;
  v85 = v40 & 1;
  sub_6693C(v27, v29, v33);
  swift_release(v36);
  swift_bridgeObjectRelease(v31);
  v41 = (uint64_t *)(v86 + *(int *)(v84 + 36));
  v42 = v41[1];
  v94 = *v41;
  v95 = v42;
  swift_bridgeObjectRetain(v42);
  v43 = Text.init<A>(_:)(&v94, &type metadata for String, v82);
  v45 = v44;
  v47 = v46;
  v49 = v48 & 1;
  v50 = sub_77618((uint64_t)v13);
  v51 = v76;
  FontConstants.sheetHeader.getter(v50);
  v52 = v79(v13, v80);
  v53 = FontConstants.SheetHeader.subtitle.getter(v52);
  v78(v51, v91);
  v54 = Text.font(_:)(v53, v43, v45, v49, v47);
  v56 = v55;
  v58 = v57;
  v60 = v59 & 1;
  sub_6693C(v43, v45, v49);
  swift_release(v53);
  swift_bridgeObjectRelease(v47);
  v61 = sub_76AA0(v34);
  v62 = ColorConstants.booksSecondaryLabel.getter(v61);
  v77(v34, v92);
  v63 = Text.foregroundColor(_:)(v62, v54, v56, v60, v58);
  v65 = v64;
  v67 = v66;
  LOBYTE(v49) = v68 & 1;
  sub_6693C(v54, v56, v60);
  swift_release(v62);
  swift_bridgeObjectRelease(v58);
  v69 = v85;
  LOBYTE(v94) = v85;
  v71 = v89;
  v70 = v90;
  v73 = v87;
  v72 = v88;
  *v90 = v89;
  v70[1] = v73;
  *((_BYTE *)v70 + 16) = v69;
  v70[3] = v72;
  v70[4] = v63;
  v70[5] = v65;
  *((_BYTE *)v70 + 48) = v49;
  v70[7] = v67;
  sub_7BBCC(v71, v73, v69);
  swift_bridgeObjectRetain(v72);
  sub_7BBCC(v63, v65, v49);
  swift_bridgeObjectRetain(v67);
  sub_6693C(v63, v65, v49);
  swift_bridgeObjectRelease(v67);
  sub_6693C(v71, v73, v94);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v72).n128_u64[0];
  return result;
}

uint64_t sub_1B1B5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1C58(v5, (uint64_t)v4);
  v6 = sub_648E0(&qword_328910, type metadata accessor for SheetHeaderComponent, (uint64_t)&unk_264408);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_1B1BF0()
{
  return sub_648E0(&qword_328918, type metadata accessor for SheetHeaderComponent, (uint64_t)&unk_2643B8);
}

uint64_t sub_1B1C1C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B95FC, 1);
}

uint64_t sub_1B1C2C()
{
  return sub_648E0(&qword_320098, type metadata accessor for SheetHeaderComponentModel, (uint64_t)&unk_266798);
}

uint64_t sub_1B1C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SheetHeaderComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B1CA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328940;
  if (!qword_328940)
  {
    v1 = sub_667D0(&qword_320450);
    sub_1B1D0C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328940);
  }
  return result;
}

unint64_t sub_1B1D0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328948;
  if (!qword_328948)
  {
    v1 = sub_667D0(&qword_320448);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_328948);
  }
  return result;
}

uint64_t sub_1B1D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _QWORD v35[2];
  __int128 v36;
  uint64_t v37;

  v8 = sub_5C154(&qword_323250);
  __chkstk_darwin(v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v35 - v12;
  v14 = type metadata accessor for HostProxy(0);
  v15 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  *(_QWORD *)a4 = Environment.init<A>(_:)(v14, v14, v15);
  *(_BYTE *)(a4 + 8) = v16 & 1;
  v17 = (int *)type metadata accessor for PageView(0);
  v18 = (_QWORD *)(a4 + v17[5]);
  *v18 = swift_getKeyPath(&unk_2647F0);
  v19 = sub_5C154(&qword_3202E8);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  v20 = (_QWORD *)(a4 + v17[6]);
  *v20 = swift_getKeyPath(&unk_264820);
  v21 = sub_5C154(&qword_320270);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = a4 + v17[7];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_264850);
  *(_BYTE *)(v22 + 8) = 0;
  v23 = a4 + v17[8];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_2645F0);
  *(_BYTE *)(v23 + 8) = 0;
  v24 = (_QWORD *)(a4 + v17[9]);
  *v24 = swift_getKeyPath(&unk_264880);
  v25 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = (_QWORD *)(a4 + v17[12]);
  v35[0] = 0x3FF0000000000000;
  State.init(wrappedValue:)(&v36, v35, &type metadata for CGFloat);
  v27 = *((_QWORD *)&v36 + 1);
  *v26 = v36;
  v26[1] = v27;
  v28 = (_QWORD *)(a4 + v17[13]);
  v29 = type metadata accessor for NavigationBarTransitionInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 1, 1, v29);
  sub_5E1A4((uint64_t)v13, (uint64_t)v10, &qword_323250);
  State.init(wrappedValue:)(v28, v10, v8);
  sub_5E09C((uint64_t)v13, &qword_323250);
  v30 = a4 + v17[14];
  type metadata accessor for CGPoint(0);
  v35[0] = 0;
  v35[1] = 0;
  State.init(wrappedValue:)(&v36, v35, v31);
  v32 = v37;
  *(_OWORD *)v30 = v36;
  *(_QWORD *)(v30 + 16) = v32;
  sub_5E1A4(a1, a4 + v17[10], &qword_323090);
  sub_5E1A4(a2, a4 + v17[11], &qword_3230B8);
  v33 = type metadata accessor for PaginationController();
  BaseObjectGraph.inject<A>(_:)(&v36, v33, v33);
  sub_5E09C(a2, &qword_3230B8);
  result = sub_5E09C(a1, &qword_323090);
  *(_QWORD *)(a4 + v17[15]) = v36;
  *(_QWORD *)(a4 + v17[16]) = a3;
  return result;
}

uint64_t sub_1B2060@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInList.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B208C(unsigned __int8 *a1)
{
  return EnvironmentValues.isInList.setter(*a1);
}

uint64_t sub_1B20B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.analyticsVisibilityManager.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B20D8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.analyticsVisibilityManager.setter(v1);
}

_QWORD *sub_1B2100(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(uint64_t *__return_ptr, char *);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  v32 = sub_5C154(&qword_3239A8);
  __chkstk_darwin(v32);
  v31 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v30 = (uint64_t *)((char *)&v26 - v8);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - v10;
  v36 = _swiftEmptyArrayStorage;
  sub_20CAF0(0, 0, 0);
  v12 = v36;
  v13 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain(a3);
  v29 = v13;
  v27 = a3;
  if (v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(type metadata accessor for Shelf(0) - 8);
    v16 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v28 = *(_QWORD *)(v15 + 72);
    while (1)
    {
      v17 = v32;
      v18 = (uint64_t)&v31[*(int *)(v32 + 48)];
      sub_5E11C(v16, v18, type metadata accessor for Shelf);
      v19 = *(int *)(v17 + 48);
      v20 = (uint64_t)v30;
      v21 = (uint64_t)v30 + v19;
      *v30 = v14;
      sub_5E160(v18, v21, type metadata accessor for Shelf);
      sub_66F14(v20, (uint64_t)v11, &qword_3239A8);
      v33(&v35, v11);
      if (v4)
        break;
      v4 = 0;
      sub_5E09C((uint64_t)v11, &qword_3239A8);
      v22 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      {
        sub_20CAF0(0, v12[2] + 1, 1);
        v12 = v36;
      }
      v24 = v12[2];
      v23 = v12[3];
      if (v24 >= v23 >> 1)
      {
        sub_20CAF0(v23 > 1, v24 + 1, 1);
        v12 = v36;
      }
      ++v14;
      v12[2] = v24 + 1;
      *((_BYTE *)v12 + v24 + 32) = v22;
      v16 += v28;
      if (v29 == v14)
        goto LABEL_9;
    }
    sub_5E09C((uint64_t)v11, &qword_3239A8);
    swift_release(v12);
    swift_bridgeObjectRelease(v27);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(v27);
  }
  return v12;
}

uint64_t sub_1B2370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v39[2];

  v37 = a2;
  v3 = type metadata accessor for ScrollViewProxy(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PPTTestCase.Name(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_328BF0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin(v11);
  v38 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_31E6C0 != -1)
    swift_once(&qword_31E6C0, sub_140214);
  v13 = sub_5240C(v7, (uint64_t)qword_345FE0);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v34(v10, v13, v7);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v33((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v14 = *(unsigned __int8 *)(v4 + 80);
  v15 = (v14 + 16) & ~v14;
  v31 = v14 | 7;
  v32 = v15 + v5;
  v16 = swift_allocObject(&unk_2F1BC0, v15 + v5, v14 | 7);
  v17 = v8;
  v18 = v16;
  v30 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v30(v16 + v15, v6, v3);
  v19 = sub_5C154(&qword_328BA8);
  v29 = a1;
  v20 = v19;
  v21 = sub_C39DC(&qword_328BF8, &qword_328BA8, (void (*)(void))sub_1BD1F8, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
  View.onTest(_:handler:)(v10, sub_1BD1E4, v18, v20, v21);
  swift_release(v18);
  v22 = *(void (**)(char *, uint64_t))(v17 + 8);
  v22(v10, v7);
  if (qword_31E6C8 != -1)
    swift_once(&qword_31E6C8, sub_140238);
  v23 = sub_5240C(v7, (uint64_t)qword_345FF8);
  v34(v10, v23, v7);
  v33(v6, v29, v3);
  v24 = swift_allocObject(&unk_2F1BE8, v32, v31);
  v30(v24 + v15, v6, v3);
  v39[0] = v20;
  v39[1] = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v39, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v26 = v36;
  v27 = v38;
  View.onTest(_:handler:)(v10, sub_1BD3F8, v24, v36, OpaqueTypeConformance2);
  swift_release(v24);
  v22(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v27, v26);
}

void sub_1B2674(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = type metadata accessor for Shelf(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Page(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0)
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (a1)
  {
    type metadata accessor for PageView(0);
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = sub_5C154(&qword_323090);
      Binding.wrappedValue.getter(v11, v12);
      v13 = *(_QWORD *)&v8[*(int *)(v6 + 52)];
      swift_bridgeObjectRetain(v13);
      sub_6685C((uint64_t)v8, type metadata accessor for Page);
      if (v10 >= *(_QWORD *)(v13 + 16))
        break;
      sub_5E11C(v13+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v10, (uint64_t)v5, type metadata accessor for Shelf);
      swift_bridgeObjectRelease(v13);
      v14 = v5[40];
      sub_6685C((uint64_t)v5, type metadata accessor for Shelf);
      v15 = __OFADD__(v9, v14);
      v9 += v14;
      if (v15)
        goto LABEL_10;
      if (a1 == ++v10)
        return;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_1B27F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for PageView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_31F010);
  v6 = type metadata accessor for Dependency(0);
  v7 = swift_allocObject(v5, ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) | 7);
  *(_OWORD *)(v7 + 16) = xmmword_258070;
  v8 = type metadata accessor for BATracker(0);
  v9 = v1 + *(int *)(v2 + 32);
  v10 = *(id *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  sub_AAFF4(*(id *)v9, v11);
  v12 = sub_77EB0(v10, v11);
  sub_794D8(v10, v11);
  sub_5E11C(v1, (uint64_t)v4, type metadata accessor for PageView);
  if (v12)
    v18 = v12;
  else
    BaseObjectGraph.inject<A>(_:)(&v18, v8, v8);
  sub_6685C((uint64_t)v4, type metadata accessor for PageView);
  v17 = v18;
  Dependency.init<A>(satisfying:with:)(v8, &v17, v8);
  v18 = v7;
  v13 = sub_5C154((uint64_t *)&unk_31FEC0);
  v14 = sub_67060((unint64_t *)&qword_31FAC0, (uint64_t *)&unk_31FEC0, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(&v18, v13, v14);
  swift_bridgeObjectRelease(v7);
  return v15;
}

uint64_t sub_1B29C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  __n128 v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (**v133)(uint64_t);
  __n128 v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t);
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (**v149)(uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t OpaqueTypeConformance2;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t (*v164)(uint64_t);
  __n128 v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  void *v171;
  void *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __n128 v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  int *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t KeyPath;
  int v193;
  char *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  void (*v209)(char *, uint64_t, uint64_t);
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  int *v250;
  uint64_t v251;
  char v252[8];
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  _QWORD v256[4];
  id v257[2];
  uint64_t (*v258)(uint64_t);
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  double v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  char v268;

  v251 = a1;
  v240 = a3;
  v4 = sub_5C154(&qword_328A48);
  __chkstk_darwin(v4);
  v234 = (char *)&v190 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_5C154(&qword_328A50);
  v237 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v236 = (char *)&v190 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for PageViewEventViewModifier(0);
  __chkstk_darwin(v222);
  v219 = (uint64_t *)((char *)&v190 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v213 = type metadata accessor for PageMetrics(0);
  v212 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v214 = (char *)&v190 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v242 = (char *)&v190 - v10;
  v245 = type metadata accessor for PageData(0);
  v210 = *(_QWORD *)(v245 - 8);
  __chkstk_darwin(v245);
  v211 = (char *)&v190 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v247 = (char *)&v190 - v13;
  v205 = type metadata accessor for PageAlertViewModifier(0);
  __chkstk_darwin(v205);
  v204 = (char *)&v190 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_5C154(&qword_3230B8);
  __chkstk_darwin(v203);
  v202 = (uint64_t)&v190 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v201 = (char *)&v190 - v17;
  v197 = type metadata accessor for NavigationStyle(0);
  v196 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v195 = (uint64_t *)((char *)&v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for Page(0);
  __chkstk_darwin(v19);
  v209 = (void (*)(char *, uint64_t, uint64_t))((char *)&v190 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v207 = (char *)&v190 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v190 - v24;
  v26 = (int *)type metadata accessor for PageView(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(_QWORD *)(v27 + 64);
  __chkstk_darwin(v26);
  v29 = (char *)&v190 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_5C154(&qword_328A58);
  v199 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v194 = (char *)&v190 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_5C154(&qword_328A60);
  __chkstk_darwin(v198);
  v241 = (uint64_t)&v190 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_5C154(&qword_328A68);
  __chkstk_darwin(v208);
  v206 = (char *)&v190 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = sub_5C154(&qword_328A70);
  v220 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221);
  v218 = (char *)&v190 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_5C154(&qword_328A78);
  __chkstk_darwin(v216);
  v223 = (char *)&v190 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = sub_5C154(&qword_328A80);
  __chkstk_darwin(v226);
  v225 = (uint64_t)&v190 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_5C154(&qword_328A88);
  v228 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin(v230);
  v227 = (char *)&v190 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = sub_5C154(&qword_328A90);
  v232 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v231 = (char *)&v190 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5C154(&qword_328A98);
  __chkstk_darwin(v38);
  v238 = (char *)&v190 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_5C154(&qword_328AA0);
  __chkstk_darwin(v229);
  v235 = (char *)&v190 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(a2, (uint64_t)v29, type metadata accessor for PageView);
  v41 = *(unsigned __int8 *)(v27 + 80);
  v42 = (v41 + 16) & ~v41;
  v215 = v42 + v28;
  v243 = v41 | 7;
  v43 = swift_allocObject(&unk_2F1AD0, v42 + v28, v41 | 7);
  v217 = v42;
  v224 = v29;
  sub_5E160((uint64_t)v29, v43 + v42, type metadata accessor for PageView);
  v248 = a2;
  v244 = sub_1B5F3C();
  v193 = static Edge.Set.all.getter(v244);
  KeyPath = swift_getKeyPath(&unk_264570);
  v44 = GeometryProxy.size.getter(KeyPath);
  v46 = v45;
  v191 = swift_getKeyPath(&unk_264598);
  v47 = a2 + v26[10];
  v48 = sub_5C154(&qword_323090);
  v251 = v48;
  v249 = v47;
  Binding.wrappedValue.getter(v48, v49);
  v250 = (int *)v19;
  LOBYTE(a2) = v25[*(int *)(v19 + 84)];
  sub_6685C((uint64_t)v25, type metadata accessor for Page);
  v50 = swift_getKeyPath(&unk_2645C8);
  Binding.wrappedValue.getter(v48, v51);
  v52 = v25[*(int *)(v19 + 28)];
  sub_6685C((uint64_t)v25, type metadata accessor for Page);
  v258 = sub_1BC584;
  v259 = v43;
  v260 = v244;
  LOBYTE(v261) = v193;
  v262 = KeyPath;
  v263 = v44;
  v264 = v46;
  v265 = v191;
  v266 = a2;
  v267 = v50;
  v268 = v52;
  v53 = v195;
  v54 = v248;
  sub_1B6318(v195);
  v244 = v26[16];
  v55 = sub_5C154(&qword_31FE28);
  BaseObjectGraph.inject<A>(_:)(v257, v55, v55);
  v56 = v54 + v26[14];
  v57 = *(_QWORD *)(v56 + 16);
  v254 = *(_OWORD *)v56;
  v255 = v57;
  v58 = sub_5C154(&qword_328AA8);
  State.projectedValue.getter(v256, v58);
  v59 = v256[0];
  v60 = v256[1];
  v61 = *(double *)&v256[2];
  v62 = *(double *)&v256[3];
  v63 = sub_5C154(&qword_328AB0);
  v64 = sub_1BC5FC();
  v65 = v194;
  View.navigationStyle(_:localizer:scrollContentOffset:)(v53, v257, v59, v60, v63, v64, v61, v62);
  swift_release(v60);
  swift_release(v59);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v257);
  (*(void (**)(_QWORD *, uint64_t))(v196 + 8))(v53, v197);
  v66 = v259;
  v67 = v260;
  v68 = v262;
  v69 = v265;
  swift_release(v267);
  swift_release(v69);
  swift_release(v68);
  swift_release(v67);
  swift_release(v66);
  v70 = (uint64_t)v201;
  Binding.projectedValue.getter(v203);
  v71 = v202;
  sub_5E1A4(v70, v202, &qword_3230B8);
  v72 = v205;
  v73 = (uint64_t)v204;
  v74 = &v204[*(int *)(v205 + 20)];
  *(_QWORD *)v74 = swift_getKeyPath(&unk_2645F0);
  v74[8] = 0;
  v75 = v73 + *(int *)(v72 + 24);
  *(_QWORD *)v75 = swift_getKeyPath(&unk_264620);
  *(_BYTE *)(v75 + 40) = 0;
  v76 = (_QWORD *)(v73 + *(int *)(v72 + 28));
  *v76 = swift_getKeyPath(&unk_264650);
  v77 = sub_5C154(&qword_326110);
  swift_storeEnumTagMultiPayload(v76, v77, 0);
  sub_66F14(v71, v73, &qword_3230B8);
  v78 = v241;
  sub_5E160(v73, v241 + *(int *)(v198 + 36), type metadata accessor for PageAlertViewModifier);
  v79 = v199;
  v80 = v200;
  (*(void (**)(uint64_t, char *, uint64_t))(v199 + 16))(v78, v65, v200);
  sub_5E09C(v70, &qword_3230B8);
  v81.n128_f64[0] = (*(double (**)(char *, uint64_t))(v79 + 8))(v65, v80);
  v205 = *(_QWORD *)(v54 + v244);
  v82 = v251;
  Binding.wrappedValue.getter(v251, v81);
  v83 = v250;
  v84 = v210;
  v85 = *(void (**)(char *, char *, uint64_t))(v210 + 16);
  v86 = v247;
  v87 = v245;
  v85(v247, &v25[v250[15]], v245);
  v246 = v25;
  sub_6685C((uint64_t)v25, type metadata accessor for Page);
  v88 = (uint64_t)v207;
  Binding.wrappedValue.getter(v82, v89);
  v204 = *(char **)(v88 + v83[16]);
  swift_bridgeObjectRetain(v204);
  sub_6685C(v88, type metadata accessor for Page);
  v90 = (uint64_t)v209;
  Binding.wrappedValue.getter(v82, v91);
  v92 = v90 + v83[17];
  v93 = v212;
  v94 = *(void (**)(char *, uint64_t, uint64_t))(v212 + 16);
  v95 = v242;
  v96 = v213;
  v94(v242, v92, v213);
  sub_6685C(v90, type metadata accessor for Page);
  v97 = v211;
  v209 = (void (*)(char *, uint64_t, uint64_t))v85;
  v85(v211, v86, v87);
  v98 = v214;
  v94(v214, (uint64_t)v95, v96);
  v99 = swift_getKeyPath(&unk_2645F0);
  v100 = (uint64_t)v219;
  *v219 = v99;
  *(_BYTE *)(v100 + 8) = 0;
  v101 = v205;
  *(_QWORD *)(v100 + 16) = v205;
  v102 = v222;
  (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v100 + *(int *)(v222 + 24), v97, v87);
  *(_QWORD *)(v100 + *(int *)(v102 + 28)) = v204;
  v103 = v100 + *(int *)(v102 + 32);
  v104 = v93;
  v105 = v208;
  v106 = v98;
  v107 = (uint64_t)v206;
  (*(void (**)(uint64_t, char *, uint64_t))(v104 + 32))(v103, v106, v96);
  sub_5E160(v100, v107 + *(int *)(v105 + 36), type metadata accessor for PageViewEventViewModifier);
  v108 = v241;
  sub_5E1A4(v241, v107, &qword_328A60);
  v109 = *(void (**)(char *, uint64_t))(v104 + 8);
  swift_retain(v101);
  v109(v242, v96);
  v242 = *(char **)(v84 + 8);
  ((void (*)(char *, uint64_t))v242)(v247, v87);
  sub_5E09C(v108, &qword_328A60);
  v110 = v248;
  v111 = sub_1B27F0();
  v112 = v110;
  v253 = v110;
  BaseObjectGraph.inject<A>(_:)(&v258, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if (v258 == 1)
  {
    swift_retain(v111);
    v113 = v111;
  }
  else
  {
    v114 = type metadata accessor for MetricsPipeline(0);
    v113 = dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(v114);
  }
  v115 = type metadata accessor for BaseObjectGraph(0);
  v116 = sub_1BC83C();
  v117 = v218;
  View.actionDispatcher<A>(with:implementations:)(v113, sub_1BC834, v252, v105, v115, v116);
  swift_release(v111);
  swift_release(v113);
  sub_5E09C(v107, &qword_328A68);
  v118 = v112;
  v119 = *(_QWORD *)v112;
  LOBYTE(v115) = *(_BYTE *)(v112 + 8);
  v120 = swift_retain(*(_QWORD *)v112);
  v121 = sub_78264(v120, v115);
  swift_release(v119);
  v258 = *(uint64_t (**)(uint64_t))(v121 + 16);
  v122 = sub_5C154(&qword_31FA68);
  v123 = sub_67060(&qword_31FA70, &qword_31FA68, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v124 = Publisher.eraseToAnyPublisher()(v122, v123);
  swift_release(v121);
  v125 = (uint64_t)v224;
  sub_5E11C(v118, (uint64_t)v224, type metadata accessor for PageView);
  v126 = v215;
  v127 = swift_allocObject(&unk_2F1AF8, v215, v243);
  v128 = v217;
  sub_5E160(v125, v127 + v217, type metadata accessor for PageView);
  v129 = v220;
  v130 = (uint64_t)v223;
  v131 = v221;
  (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v223, v117, v221);
  v132 = v216;
  *(_QWORD *)(v130 + *(int *)(v216 + 52)) = v124;
  v133 = (uint64_t (**)(uint64_t))(v130 + *(int *)(v132 + 56));
  *v133 = sub_1BC970;
  v133[1] = (uint64_t (*)(uint64_t))v127;
  v134.n128_f64[0] = (*(double (**)(char *, uint64_t))(v129 + 8))(v117, v131);
  v135 = (uint64_t)v246;
  Binding.wrappedValue.getter(v251, v134);
  v136 = *(uint64_t (**)(uint64_t))(v135 + v250[20]);
  swift_retain(v136);
  sub_6685C(v135, type metadata accessor for Page);
  v258 = v136;
  v137 = sub_14065C();
  v257[0] = (id)static OS_dispatch_queue.main.getter(v137);
  v138 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v139 = (uint64_t)v234;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v234, 1, 1, v138);
  v140 = sub_5C154(&qword_328B40);
  v141 = sub_67060(&qword_328B48, &qword_328B40, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v142 = sub_648E0(&qword_328B50, (uint64_t (*)(uint64_t))sub_14065C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v143 = v236;
  Publisher.receive<A>(on:options:)(v257, v139, v140, v137, v141, v142);
  sub_5E09C(v139, &qword_328A48);

  swift_release(v258);
  sub_5E11C(v248, v125, type metadata accessor for PageView);
  v144 = swift_allocObject(&unk_2F1B20, v126, v243);
  sub_5E160(v125, v144 + v128, type metadata accessor for PageView);
  v145 = v225;
  sub_5E1A4(v130, v225, &qword_328A78);
  v146 = v226;
  v147 = v237;
  v148 = v239;
  (*(void (**)(uint64_t, char *, uint64_t))(v237 + 16))(v145 + *(int *)(v226 + 52), v143, v239);
  v149 = (uint64_t (**)(uint64_t))(v145 + *(int *)(v146 + 56));
  *v149 = sub_1BC988;
  v149[1] = (uint64_t (*)(uint64_t))v144;
  (*(void (**)(char *, uint64_t))(v147 + 8))(v143, v148);
  sub_5E09C(v130, &qword_328A78);
  v150 = type metadata accessor for ListItemComponentModel(0);
  v151 = sub_5C154(&qword_328B58);
  v152 = sub_67060(&qword_328B60, &qword_328A80, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  v153 = type metadata accessor for ContextActionMenuView(255);
  v154 = sub_648E0(&qword_3265D0, type metadata accessor for ContextActionMenuView, (uint64_t)&protocol conformance descriptor for ContextActionMenuView);
  v258 = (uint64_t (*)(uint64_t))v153;
  v259 = v154;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v258, &opaque type descriptor for <<opaque return type of View.referenceId(_:)>>, 1);
  v156 = sub_648E0(&qword_320058, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
  v157 = v227;
  View.componentMenuTemplate<A, B>(for:on:content:)(0xD00000000000002DLL, 0x8000000000274020, v150, sub_1B716C, 0, v146, v151, v150, v152, OpaqueTypeConformance2, v156);
  sub_5E09C(v145, &qword_328A80);
  v158 = type metadata accessor for RecommendationItemComponentModel(0);
  v159 = sub_5C154(&qword_328B68);
  v243 = v159;
  v258 = (uint64_t (*)(uint64_t))v146;
  v259 = v151;
  v260 = v150;
  v261 = v152;
  v262 = OpaqueTypeConformance2;
  v263 = *(double *)&v156;
  v160 = swift_getOpaqueTypeConformance2(&v258, &opaque type descriptor for <<opaque return type of View.componentMenuTemplate<A, B>(for:on:content:)>>, 1);
  v161 = sub_1BC99C();
  v162 = sub_648E0(&qword_320068, type metadata accessor for RecommendationItemComponentModel, (uint64_t)&unk_25CC18);
  v163 = v231;
  v164 = (uint64_t (*)(uint64_t))v230;
  View.componentMenuTemplate<A, B>(for:on:content:)(0xD000000000000037, 0x80000000002707E0, v158, sub_1B73E0, 0, v230, v159, v158, v160, v161, v162);
  v165.n128_f64[0] = (*(double (**)(char *, uint64_t (*)(uint64_t)))(v228 + 8))(v157, v164);
  v166 = (uint64_t)v246;
  Binding.wrappedValue.getter(v251, v165);
  v167 = v247;
  v168 = v245;
  v209(v247, v166 + v250[15], v245);
  v169 = sub_6685C(v166, type metadata accessor for Page);
  v170 = (void *)PageData.pageType.getter(v169);
  v172 = v171;
  ((void (*)(char *, uint64_t))v242)(v167, v168);
  v257[0] = v170;
  v257[1] = v172;
  v258 = v164;
  v259 = v243;
  v260 = v158;
  v261 = v160;
  v262 = v161;
  v263 = *(double *)&v162;
  v173 = swift_getOpaqueTypeConformance2(&v258, &opaque type descriptor for <<opaque return type of View.componentMenuTemplate<A, B>(for:on:content:)>>, 1);
  v174 = sub_668F8();
  v175 = (uint64_t)v238;
  v176 = v233;
  View.accessibilityLabel<A>(_:)(v257, v233, &type metadata for String, v173, v174);
  v177 = swift_bridgeObjectRelease(v172);
  v178.n128_f64[0] = (*(double (**)(char *, uint64_t, __n128))(v232 + 8))(v163, v176, v177);
  v179 = *(_QWORD *)(v248 + v244);
  v180 = (uint64_t)v246;
  Binding.wrappedValue.getter(v251, v178);
  v181 = *(_QWORD *)(v180 + v250[19]);
  swift_bridgeObjectRetain(v181);
  sub_6685C(v180, type metadata accessor for Page);
  v182 = (uint64_t)v235;
  v183 = &v235[*(int *)(v229 + 36)];
  *(_QWORD *)v183 = swift_getKeyPath(&unk_264680);
  v183[8] = 0;
  *((_QWORD *)v183 + 2) = swift_getKeyPath(&unk_2646B0);
  v183[24] = 0;
  v184 = (int *)type metadata accessor for PageLifeCycleViewModifier(0);
  v185 = &v183[v184[6]];
  *(_QWORD *)v185 = swift_getKeyPath(&unk_2646E0);
  v186 = sub_5C154(&qword_320498);
  swift_storeEnumTagMultiPayload(v185, v186, 0);
  v187 = &v183[v184[7]];
  *(_QWORD *)v187 = swift_getKeyPath(&unk_2645F0);
  v187[8] = 0;
  *(_QWORD *)&v183[v184[8]] = v179;
  *(_QWORD *)&v183[v184[10]] = v181;
  v188 = type metadata accessor for PageLifecycleHandler();
  swift_retain_n(v179, 2);
  swift_bridgeObjectRetain(v181);
  BaseObjectGraph.inject<A>(_:)(&v258, v188, v188);
  swift_release(v179);
  *(_QWORD *)&v183[v184[9]] = v258;
  sub_5E1A4(v175, v182, &qword_328A98);
  swift_bridgeObjectRelease(v181);
  sub_5E09C(v175, &qword_328A98);
  return sub_66F14(v182, v240, &qword_328AA0);
}

uint64_t sub_1B3F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (**v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  _QWORD v90[6];

  v85 = a3;
  v84 = sub_5C154(&qword_320278);
  __chkstk_darwin(v84);
  v83 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Page(0);
  __chkstk_darwin(v6);
  v80 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ScrollViewProxy(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v77 = v8;
  v78 = v10;
  v11 = v9;
  __chkstk_darwin(v8);
  v75 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for PageView(0);
  v13 = *(_QWORD *)(v79 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v79);
  v15 = sub_5C154(&qword_328BA8);
  __chkstk_darwin(v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_5C154(&qword_328BB0);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_5C154(&qword_328BB8);
  __chkstk_darwin(v88);
  v87 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_328BC0);
  v22 = *(_QWORD *)(v21 - 8);
  v81 = v21;
  v82 = v22;
  __chkstk_darwin(v21);
  v89 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B4528((uint64_t)v17);
  sub_1B2370(a1, (uint64_t)v19);
  sub_5E09C((uint64_t)v17, &qword_328BA8);
  v24 = *(_QWORD *)a2;
  v25 = *(_BYTE *)(a2 + 8);
  v86 = a2;
  v26 = swift_retain(v24);
  v27 = sub_78264(v26, v25);
  swift_release(v24);
  v90[0] = *(_QWORD *)(v27 + 16);
  v28 = sub_5C154(&qword_31FA68);
  v29 = sub_67060(&qword_31FA70, &qword_31FA68, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v71 = Publisher.eraseToAnyPublisher()(v28, v29);
  swift_release(v27);
  v30 = a2;
  v31 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(v30, (uint64_t)v31, type metadata accessor for PageView);
  v32 = v11;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v34 = v75;
  v35 = a1;
  v36 = v77;
  v33(v75, v35, v77);
  v37 = *(unsigned __int8 *)(v13 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = v38 + v14;
  v40 = v37 | 7;
  v73 = v37 | 7;
  v41 = *(unsigned __int8 *)(v32 + 80);
  v72 = v38 + v14;
  v42 = (v38 + v14 + v41) & ~v41;
  v43 = swift_allocObject(&unk_2F1B48, v42 + v78, v40 | v41);
  sub_5E160((uint64_t)v31, v43 + v38, type metadata accessor for PageView);
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v43 + v42, v34, v36);
  v44 = v74;
  v45 = v87;
  v46 = v76;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v87, v19, v76);
  v47 = v88;
  *(_QWORD *)&v45[*(int *)(v88 + 52)] = v71;
  v48 = (uint64_t (**)(uint64_t))&v45[*(int *)(v47 + 56)];
  *v48 = sub_1BD040;
  v48[1] = (uint64_t (*)(uint64_t))v43;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v19, v46);
  v49 = v86;
  v50 = sub_5C154(&qword_323090);
  v51 = (uint64_t)v80;
  Binding.wrappedValue.getter(v50, v52);
  Page.shelfGridIDToLoadMore.getter((uint64_t)v90);
  sub_6685C(v51, type metadata accessor for Page);
  v53 = (uint64_t)v31;
  sub_5E11C(v49, (uint64_t)v31, type metadata accessor for PageView);
  v54 = v39;
  v55 = v73;
  v56 = swift_allocObject(&unk_2F1B70, v54, v73);
  sub_5E160(v53, v56 + v38, type metadata accessor for PageView);
  v57 = sub_5C154(&qword_323D48);
  v58 = sub_67060(&qword_328BC8, &qword_328BB8, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  v59 = sub_1BD0B8();
  v60 = v88;
  v61 = (uint64_t)v87;
  View.onChange<A>(of:initial:_:)(v90, 0, sub_1BD0AC, v56, v88, v57, v58, v59);
  swift_release(v56);
  sub_5E09C((uint64_t)v90, &qword_323D48);
  sub_5E09C(v61, &qword_328BB8);
  v62 = v86;
  v63 = v83;
  sub_792E8(v83);
  sub_5E11C(v62, v53, type metadata accessor for PageView);
  v64 = swift_allocObject(&unk_2F1B98, v72, v55);
  sub_5E160(v53, v64 + v38, type metadata accessor for PageView);
  v90[0] = v60;
  v90[1] = v57;
  v90[2] = v58;
  v90[3] = v59;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v90, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v66 = sub_1BD164();
  v67 = v81;
  v68 = v89;
  View.onChange<A>(of:initial:_:)(v63, 1, sub_1BD118, v64, v81, v84, OpaqueTypeConformance2, v66);
  swift_release(v64);
  sub_5E09C(v63, &qword_320278);
  return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v68, v67);
}

uint64_t sub_1B4528@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  __n128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  void *v58;

  v53 = a1;
  v54 = sub_5C154(&qword_328C40);
  v49 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v2 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_5C154(&qword_328C48);
  __chkstk_darwin(v51);
  v50 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_5C154(&qword_328C50);
  v48 = *(_QWORD *)(v52 - 8);
  v4 = __chkstk_darwin(v52);
  v47 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ListItemViewModel.PerfHacks(0, v4);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - v11;
  v13 = type metadata accessor for Page(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PageView(0);
  v16 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v16, v17);
  v18 = v15[*(int *)(v13 + 48)];
  v19 = sub_6685C((uint64_t)v15, type metadata accessor for Page);
  if (v18 == 1
    && (v20 = static ListItemViewModel.perfHacks.getter(v19),
        static ListItemViewModel.PerfHacks.disableSwiftUIList.getter(v20),
        v21 = sub_648E0(&qword_323E80, (uint64_t (*)(uint64_t))&type metadata accessor for ListItemViewModel.PerfHacks, (uint64_t)&protocol conformance descriptor for ListItemViewModel.PerfHacks), v22 = dispatch thunk of SetAlgebra.isSuperset(of:)(v9, v6, v21), v23 = *(void (**)(char *, uint64_t))(v7 + 8), v23(v9, v6), v23(v12, v6), (v22 & 1) == 0))
  {
    v36 = v47;
    sub_1B4964(v47, v24);
    v37 = v48;
    v38 = v50;
    v39 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v50, v36, v52);
    swift_storeEnumTagMultiPayload(v38, v51, 0);
    v40 = sub_667D0(&qword_328C10);
    v41 = type metadata accessor for BaseObjectGraph(255);
    v42 = sub_1BD2F8();
    v55 = v40;
    v56 = (void *)v41;
    v57 = v42;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(with:implementations:)>>, 1);
    v44 = sub_667D0(&qword_328C30);
    v45 = sub_67060(&qword_328C38, &qword_328C30, (uint64_t)&protocol conformance descriptor for ShelfPage<A, B>);
    v55 = v44;
    v56 = &type metadata for Bool;
    v57 = v45;
    v58 = &protocol witness table for Bool;
    v46 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v38, v39, v54, OpaqueTypeConformance2, v46);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v39);
  }
  else
  {
    sub_1B5214((uint64_t)v2);
    v26 = v49;
    v25 = v50;
    v27 = v54;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v50, v2, v54);
    swift_storeEnumTagMultiPayload(v25, v51, 1);
    v28 = sub_667D0(&qword_328C10);
    v29 = type metadata accessor for BaseObjectGraph(255);
    v30 = sub_1BD2F8();
    v55 = v28;
    v56 = (void *)v29;
    v57 = v30;
    v31 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(with:implementations:)>>, 1);
    v32 = sub_667D0(&qword_328C30);
    v33 = sub_67060(&qword_328C38, &qword_328C30, (uint64_t)&protocol conformance descriptor for ShelfPage<A, B>);
    v55 = v32;
    v56 = &type metadata for Bool;
    v57 = v33;
    v58 = &protocol witness table for Bool;
    v34 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v25, v52, v27, v31, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v2, v27);
  }
}

uint64_t sub_1B4964@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t KeyPath;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD v104[3];

  v101 = a1;
  v3 = type metadata accessor for GenericGeometryReferenceBuilder(0, a2);
  v99 = *(_QWORD *)(v3 - 8);
  v100 = v3;
  v4 = __chkstk_darwin(v3);
  v98 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for ImpressionsCalculator.Configuration(0, v4);
  v92 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v87 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for PlainListStyle(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v79 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_5C154(&qword_328C58);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_5C154(&qword_328C60);
  v77 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v75 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_5C154(&qword_328C68);
  __chkstk_darwin(v84);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_5C154(&qword_328C70);
  v89 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v86 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_5C154(&qword_328C78);
  v93 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v88 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_5C154(&qword_328C28);
  __chkstk_darwin(v85);
  v90 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_5C154(&qword_328C10);
  __chkstk_darwin(v96);
  v97 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_325818);
  __chkstk_darwin(v17);
  v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Page(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Shelf(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = type metadata accessor for PageView(0);
  v27 = v2;
  v28 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v28, v29);
  v30 = *(_QWORD *)&v22[*(int *)(v20 + 52)];
  swift_bridgeObjectRetain(v30);
  sub_6685C((uint64_t)v22, type metadata accessor for Page);
  if (*(_QWORD *)(v30 + 16))
  {
    sub_5E11C(v30 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)), (uint64_t)v19, type metadata accessor for Shelf);
    v31 = 0;
  }
  else
  {
    v31 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v19, v31, 1, v23);
  v32 = swift_bridgeObjectRelease(v30);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v24 + 48))(v19, 1, v23, v32);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v34 = sub_5E160((uint64_t)v19, (uint64_t)v26, type metadata accessor for Shelf);
    __chkstk_darwin(v34);
    v35 = v27;
    *(&v74 - 2) = v27;
    v36 = sub_5C154(&qword_328C80);
    v37 = sub_C39DC(&qword_328C88, &qword_328C80, (void (*)(void))sub_1BD414, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    v38 = List<>.init(content:)(sub_1BD40C, &v74 - 4, v36, v37);
    v39 = v79;
    PlainListStyle.init()(v38);
    v40 = sub_67060(&qword_328CA8, &qword_328C58, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v41 = v75;
    v42 = v78;
    v43 = v83;
    View.listStyle<A>(_:)(v39, v78, v83, v40, &protocol witness table for PlainListStyle);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v39, v43);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v9, v42);
    v44 = v77;
    v45 = v80;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v12, v41, v80);
    v46 = v84;
    v47 = &v12[*(int *)(v84 + 36)];
    *(_QWORD *)v47 = 0xD000000000000019;
    *((_QWORD *)v47 + 1) = 0x8000000000274050;
    v48 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v41, v45);
    v49 = v87;
    static ImpressionsCalculator.Configuration.tenth.getter(v48);
    v50 = (char *)v26 + *(int *)(v23 + 32);
    v51 = sub_1BD4B0();
    v52 = v86;
    View.impressionable(_:configuration:position:definesParentContext:)(v50, v49, 0, 1, 0, v46, v51);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v49, v94);
    sub_5E09C((uint64_t)v12, &qword_328C68);
    v53 = v26[1];
    v102 = *v26;
    v103 = v53;
    swift_bridgeObjectRetain(v53);
    v54 = AnyHashable.init<A>(_:)(&v102, &type metadata for String, &protocol witness table for String);
    v55 = v98;
    static GeometryReferenceBuilding<>.generic.getter(v54);
    v102 = v46;
    v103 = v51;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
    v57 = sub_648E0(&qword_323BD0, (uint64_t (*)(uint64_t))&type metadata accessor for GenericGeometryReferenceBuilder, (uint64_t)&protocol conformance descriptor for GenericGeometryReferenceBuilder);
    v58 = v88;
    v59 = v91;
    v60 = v100;
    View.cacheGeometry<A>(for:referenceBuilder:)(v104, v55, v91, v100, OpaqueTypeConformance2, v57);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v55, v60);
    sub_5E09C((uint64_t)v104, &qword_323D48);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v52, v59);
    v61 = (uint64_t)v26 + *(int *)(v23 + 40);
    v62 = v93;
    v63 = (uint64_t)v90;
    v64 = v95;
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v90, v58, v95);
    sub_5DCB0(v61, v63 + *(int *)(v85 + 52));
    (*(void (**)(char *, uint64_t))(v62 + 8))(v58, v64);
    KeyPath = swift_getKeyPath(&unk_264770);
    v66 = v97;
    sub_5E1A4(v63, v97, &qword_328C28);
    v67 = v96;
    v68 = v66 + *(int *)(v96 + 36);
    *(_QWORD *)v68 = KeyPath;
    *(_BYTE *)(v68 + 8) = 1;
    v69 = sub_5E09C(v63, &qword_328C28);
    v70 = *(_QWORD *)(v35 + *(int *)(v81 + 64));
    __chkstk_darwin(v69);
    *(&v74 - 2) = (uint64_t)v26;
    BaseObjectGraph.inject<A>(_:)(v104, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
    if (LOBYTE(v104[0]) == 1)
    {
      swift_retain(v70);
    }
    else
    {
      v71 = type metadata accessor for MetricsPipeline(0);
      v70 = dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(v71);
    }
    v72 = type metadata accessor for BaseObjectGraph(0);
    v73 = sub_1BD2F8();
    View.actionDispatcher<A>(with:implementations:)(v70, sub_1BD5E4, &v74 - 4, v67, v72, v73);
    swift_release(v70);
    sub_5E09C(v66, &qword_328C10);
    return sub_6685C((uint64_t)v26, type metadata accessor for Shelf);
  }
  return result;
}

uint64_t sub_1B5214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  double (*v39)(char *, uint64_t);
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;

  v57 = a1;
  v2 = type metadata accessor for PageView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Page(0);
  __chkstk_darwin(v6);
  v56 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - v9;
  v51 = sub_5C154(&qword_328C30);
  v55 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v50 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v48 = v1;
  v49 = (char *)&v47 - v13;
  v14 = *(int *)(v2 + 40);
  v15 = v1;
  v53 = v1 + v14;
  v52 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v52, v16);
  v17 = *(_QWORD *)&v10[*(int *)(v6 + 52)];
  swift_bridgeObjectRetain(v17);
  sub_6685C((uint64_t)v10, type metadata accessor for Page);
  v58[0] = v17;
  sub_5E11C(v15, (uint64_t)v5, type metadata accessor for PageView);
  v18 = *(unsigned __int8 *)(v3 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = v19 + v4;
  v21 = v18 | 7;
  v22 = swift_allocObject(&unk_2F1C60, v19 + v4, v18 | 7);
  v23 = sub_5E160((uint64_t)v5, v22 + v19, type metadata accessor for PageView);
  v24 = static ShelfPageConfiguration.standard.getter(v23);
  v25 = sub_5C154(&qword_325888);
  v26 = sub_5C154(&qword_328CD0);
  v27 = sub_67060(&qword_328CC0, &qword_325888, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = sub_1BD718();
  v29 = sub_648E0(&qword_328160, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  v46 = v27;
  v30 = v50;
  v31 = v24;
  v32 = v25;
  v33 = v51;
  v34 = v26;
  v35 = v48;
  v36 = v49;
  ShelfPage.init<A>(_:spacing:configuration:shelfContent:)(v58, 0, 0, v31, sub_1BD6C4, v22, v32, v34, v46, v28, v29);
  sub_5E11C(v35, (uint64_t)v5, type metadata accessor for PageView);
  v54 = v20;
  v37 = swift_allocObject(&unk_2F1C88, v20, v21);
  sub_5E160((uint64_t)v5, v37 + v19, type metadata accessor for PageView);
  v38 = v30;
  ShelfPage.onScroll(perform:)(sub_1BD7B8, v37, v33);
  swift_release(v37);
  v39 = *(double (**)(char *, uint64_t))(v55 + 8);
  v40.n128_f64[0] = v39(v38, v33);
  v41 = (uint64_t)v56;
  Binding.wrappedValue.getter(v52, v40);
  Page.intentToLoadMore.getter((uint64_t)v58);
  sub_6685C(v41, type metadata accessor for Page);
  v42 = v59;
  if (v59)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v58);
  LOBYTE(v58[0]) = v42 != 0;
  sub_5E11C(v35, (uint64_t)v5, type metadata accessor for PageView);
  v43 = swift_allocObject(&unk_2F1CB0, v54, v21);
  sub_5E160((uint64_t)v5, v43 + v19, type metadata accessor for PageView);
  v44 = sub_67060(&qword_328C38, &qword_328C30, (uint64_t)&protocol conformance descriptor for ShelfPage<A, B>);
  View.onChange<A>(of:initial:_:)(v58, 0, sub_1BDC84, v43, v33, &type metadata for Bool, v44, &protocol witness table for Bool);
  swift_release(v43);
  return ((uint64_t (*)(char *, uint64_t))v39)(v36, v33);
}

uint64_t sub_1B5614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v39 = a3;
  v40 = a2;
  v4 = type metadata accessor for Shelf(0);
  v37 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v38 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = type metadata accessor for Page(0);
  __chkstk_darwin(v41);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - v9;
  v11 = type metadata accessor for HostProxy.Event(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PageScrollAction.Location(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (unint64_t *)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v20 = (char *)&v36 - v19;
  sub_5E11C(a1, (uint64_t)v13, type metadata accessor for HostProxy.Event);
  if (swift_getEnumCaseMultiPayload(v13, v11) != 4)
    return sub_6685C((uint64_t)v13, type metadata accessor for HostProxy.Event);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
  (*(void (**)(unint64_t *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
  if ((*(unsigned int (**)(unint64_t *, uint64_t))(v15 + 88))(v17, v14) == enum case for PageScrollAction.Location.shelf(_:))
  {
    (*(void (**)(unint64_t *, uint64_t))(v15 + 96))(v17, v14);
    v21 = *v17;
    type metadata accessor for PageView(0);
    v22 = sub_5C154(&qword_323090);
    Binding.wrappedValue.getter(v22, v23);
    v24 = v41;
    v25 = *(_QWORD *)&v10[*(int *)(v41 + 52)];
    swift_bridgeObjectRetain(v25);
    sub_6685C((uint64_t)v10, type metadata accessor for Page);
    v26 = *(_QWORD *)(v25 + 16);
    v27 = swift_bridgeObjectRelease(v25);
    if ((v21 & 0x8000000000000000) != 0 || (uint64_t)v21 >= v26)
      return (*(uint64_t (**)(char *, uint64_t, __n128))(v15 + 8))(v20, v14, v27);
    Binding.wrappedValue.getter(v22, v27);
    v28 = *(_QWORD *)&v7[*(int *)(v24 + 52)];
    swift_bridgeObjectRetain(v28);
    sub_6685C((uint64_t)v7, type metadata accessor for Page);
    if (v21 < *(_QWORD *)(v28 + 16))
    {
      v29 = v38;
      sub_5E11C(v28+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v21, (uint64_t)v38, type metadata accessor for Shelf);
      swift_bridgeObjectRelease(v28);
      v31 = *v29;
      v30 = v29[1];
      swift_bridgeObjectRetain(v30);
      v32 = sub_6685C((uint64_t)v29, type metadata accessor for Shelf);
      v42[0] = v31;
      v42[1] = v30;
      v33 = static UnitPoint.top.getter(v32);
      ScrollViewProxy.scrollTo<A>(_:anchor:)(v42, *(_QWORD *)&v33, v34, 0, &type metadata for String, &protocol witness table for String);
      v27 = swift_bridgeObjectRelease(v30);
      return (*(uint64_t (**)(char *, uint64_t, __n128))(v15 + 8))(v20, v14, v27);
    }
    __break(1u);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v14, v14);
  __break(1u);
  return result;
}

uint64_t sub_1B5964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  _QWORD v26[2];

  v2 = type metadata accessor for IntentDispatchState(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_328BE8);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_320278);
  __chkstk_darwin(v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v26 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)v26 - v16;
  v26[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PageView(0) + 60));
  sub_792E8((uint64_t)v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v14, enum case for IntentDispatchState.loading(_:), v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_5E1A4((uint64_t)v17, (uint64_t)v8, &qword_320278);
  sub_5E1A4((uint64_t)v14, v18, &qword_320278);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v19((uint64_t)v8, 1, v2) == 1)
  {
    sub_5E09C((uint64_t)v14, &qword_320278);
    sub_5E09C((uint64_t)v17, &qword_320278);
    v20 = v19(v18, 1, v2);
    if (v20 == 1)
      v21 = &qword_320278;
    else
      v21 = &qword_328BE8;
    if (v20 == 1)
      v22 = -1;
    else
      v22 = 0;
  }
  else
  {
    sub_5E1A4((uint64_t)v8, (uint64_t)v11, &qword_320278);
    if (v19(v18, 1, v2) == 1)
    {
      sub_5E09C((uint64_t)v14, &qword_320278);
      sub_5E09C((uint64_t)v17, &qword_320278);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      v22 = 0;
      v21 = &qword_328BE8;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v18, v2);
      v23 = sub_648E0(&qword_328BE0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDispatchState, (uint64_t)&protocol conformance descriptor for IntentDispatchState);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v5, v2, v23);
      v24 = *(void (**)(char *, uint64_t))(v3 + 8);
      v24(v5, v2);
      v21 = &qword_320278;
      sub_5E09C((uint64_t)v14, &qword_320278);
      sub_5E09C((uint64_t)v17, &qword_320278);
      v24(v11, v2);
    }
  }
  sub_5E09C((uint64_t)v8, v21);
  return sub_16D064(v22 & 1);
}

void sub_1B5C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v5 = type metadata accessor for IntentDispatchState(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_328BE8);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_320278);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v25 - v17;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v6 + 104))((char *)&v25 - v17, enum case for IntentDispatchState.loading(_:), v5, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
  v19 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_5E1A4(a2, (uint64_t)v11, &qword_320278);
  sub_5E1A4((uint64_t)v18, v19, &qword_320278);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v20((uint64_t)v11, 1, v5) == 1)
  {
    sub_5E09C((uint64_t)v18, &qword_320278);
    if (v20(v19, 1, v5) == 1)
    {
      sub_5E09C((uint64_t)v11, &qword_320278);
      return;
    }
  }
  else
  {
    sub_5E1A4((uint64_t)v11, (uint64_t)v14, &qword_320278);
    if (v20(v19, 1, v5) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v19, v5);
      v21 = sub_648E0(&qword_328BE0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDispatchState, (uint64_t)&protocol conformance descriptor for IntentDispatchState);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v8, v5, v21);
      v23 = *(void (**)(char *, uint64_t))(v6 + 8);
      v23(v8, v5);
      sub_5E09C((uint64_t)v18, &qword_320278);
      v23(v14, v5);
      sub_5E09C((uint64_t)v11, &qword_320278);
      if ((v22 & 1) != 0)
        return;
      goto LABEL_8;
    }
    sub_5E09C((uint64_t)v18, &qword_320278);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  sub_5E09C((uint64_t)v11, &qword_328BE8);
LABEL_8:
  v24 = type metadata accessor for PageView(0);
  sub_16CD4C(*(_QWORD *)(a3 + *(int *)(v24 + 64)));
}

uint64_t sub_1B5F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  __n128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = type metadata accessor for Page(0);
  __chkstk_darwin(v1);
  v40 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - v4;
  v6 = type metadata accessor for ColorConstants(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v37 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = v0 + *(int *)(type metadata accessor for PageView(0) + 36);
  v13 = sub_76AA0((uint64_t)v11);
  v42 = ColorConstants.booksBackground.getter(v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v11, v6);
  v15 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v15, v16);
  v41 = v1;
  v17 = &v5[*(int *)(v1 + 88)];
  v18 = *(_QWORD *)v17;
  v19 = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain(v19);
  sub_6685C((uint64_t)v5, type metadata accessor for Page);
  v38 = v14;
  v39 = v12;
  if (v19)
  {
    v21 = v37;
    sub_76AA0(v37);
    v23 = ColorConstants.subscript.getter(v18, v19, v22);
    v24 = swift_bridgeObjectRelease(v19);
    ((void (*)(uint64_t, uint64_t, __n128))v14)(v21, v6, v24);
    v25 = v6;
    if (v23)
    {
      swift_release(v42);
      v42 = v23;
    }
  }
  else
  {
    v25 = v6;
  }
  v27 = (uint64_t)v40;
  v26 = v41;
  Binding.wrappedValue.getter(v15, v20);
  v28 = (uint64_t *)(v27 + *(int *)(v26 + 92));
  v29 = *v28;
  v30 = v28[1];
  v31 = v28[2];
  v32 = v28[3];
  v33 = v28[4];
  sub_13E36C(*v28, v30, v31, v32, v33);
  sub_6685C(v27, type metadata accessor for Page);
  if (!v30)
    return v42;
  v43 = v29;
  v44 = v30;
  v45 = v31;
  v46 = v32;
  v47 = v33;
  sub_76AA0((uint64_t)v11);
  v34 = sub_11479C();
  v38(v11, v25);
  sub_13E39C(v29, v30, v31, v32, v33);
  if (!v34)
    return v42;
  swift_release(v42);
  return v34;
}

double EnvironmentValues.pageContainerSize.getter()
{
  unint64_t v0;
  double v2;

  v0 = sub_1B6208();
  EnvironmentValues.subscript.getter(&type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v0);
  return v2;
}

unint64_t sub_1B6208()
{
  unint64_t result;

  result = qword_328960;
  if (!qword_328960)
  {
    result = swift_getWitnessTable(&unk_2644E8, &type metadata for PageContainerSizeKey);
    atomic_store(result, (unint64_t *)&qword_328960);
  }
  return result;
}

double sub_1B624C@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_1B6208();
  EnvironmentValues.subscript.getter(&type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1B6298(__int128 *a1)
{
  unint64_t v1;
  __int128 v3;

  v3 = *a1;
  v1 = sub_1B6208();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v1);
}

uint64_t EnvironmentValues.pageContainerSize.setter(double a1, double a2)
{
  unint64_t v2;
  _QWORD v4[2];

  *(double *)v4 = a1;
  *(double *)&v4[1] = a2;
  v2 = sub_1B6208();
  return EnvironmentValues.subscript.setter(v4, &type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v2);
}

uint64_t sub_1B6318@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  unsigned int *v52;
  int *v53;
  uint64_t v54;
  _QWORD *v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];

  v72 = a1;
  v2 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v2);
  v66 = (uint64_t)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_322F98);
  __chkstk_darwin(v4);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Page(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v71 = (char *)&v64 - v11;
  __chkstk_darwin(v12);
  v70 = (char *)&v64 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v64 - v15;
  v17 = type metadata accessor for ToolbarPrincipalType(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PageView(0);
  v22 = v1;
  v23 = v1 + *(int *)(v21 + 40);
  v67 = sub_5C154(&qword_323090);
  v68 = v23;
  Binding.wrappedValue.getter(v67, v24);
  v69 = v7;
  sub_5E1A4((uint64_t)&v16[*(int *)(v7 + 36)], (uint64_t)v6, &qword_322F98);
  sub_6685C((uint64_t)v16, type metadata accessor for Page);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v6, 1, v17) == 1)
  {
    v64 = v21;
    v65 = v22;
    sub_5E09C((uint64_t)v6, &qword_322F98);
    v25 = v67;
    Binding.wrappedValue.getter(v67, v26);
    v27 = v69;
    v28 = v66;
    sub_5E1A4((uint64_t)&v9[*(int *)(v69 + 20)], v66, &qword_3217B8);
    sub_6685C((uint64_t)v9, type metadata accessor for Page);
    v29 = type metadata accessor for LocalizerRequest(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29);
    v33 = (uint64_t)v71;
    v32 = v72;
    v34 = (uint64_t)v70;
    if (v31 == 1)
    {
      static LocalizerRequest.verbatim(_:)(0);
      sub_5E09C(v28, &qword_3217B8);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v30 + 32))(v72, v28, v29);
    }
    v53 = (int *)sub_5C154(&qword_328B90);
    v54 = v53[12];
    v66 = v53[16];
    v55 = (_QWORD *)((char *)v32 + v53[20]);
    Binding.wrappedValue.getter(v25, v56);
    v57 = *(_QWORD *)(v34 + *(int *)(v27 + 40));
    swift_bridgeObjectRetain(v57);
    sub_6685C(v34, type metadata accessor for Page);
    *(_QWORD *)((char *)v32 + v54) = v57;
    Binding.wrappedValue.getter(v25, v58);
    v59 = *(_QWORD *)(v33 + *(int *)(v27 + 44));
    swift_bridgeObjectRetain(v59);
    sub_6685C(v33, type metadata accessor for Page);
    *(_QWORD *)((char *)v32 + v66) = v59;
    v60 = sub_5C154(&qword_328968);
    State.projectedValue.getter(v55, v60);
    v52 = (unsigned int *)&enum case for NavigationStyle.plain(_:);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v6, v17);
    v35 = (int *)sub_5C154(&qword_328B98);
    v32 = v72;
    v36 = (char *)v72 + v35[12];
    v37 = v35[20];
    v65 = v35[16];
    v66 = v37;
    v38 = (uint64_t *)(v22 + *(int *)(v21 + 48));
    v39 = *v38;
    v40 = v38[1];
    v73 = v39;
    v74 = v40;
    v41 = sub_5C154(&qword_328BA0);
    State.projectedValue.getter(v75, v41);
    v42 = v75[1];
    v43 = v75[2];
    *v32 = v75[0];
    v32[1] = v42;
    v32[2] = v43;
    v44.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v18 + 16))(v36, v20, v17);
    v45 = (uint64_t)v70;
    v46 = v67;
    Binding.wrappedValue.getter(v67, v44);
    v47 = v69;
    v48 = *(_QWORD *)(v45 + *(int *)(v69 + 40));
    swift_bridgeObjectRetain(v48);
    sub_6685C(v45, type metadata accessor for Page);
    *(_QWORD *)((char *)v32 + v65) = v48;
    v49 = (uint64_t)v71;
    Binding.wrappedValue.getter(v46, v50);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v51 = *(_QWORD *)(v49 + *(int *)(v47 + 44));
    swift_bridgeObjectRetain(v51);
    sub_6685C(v49, type metadata accessor for Page);
    *(_QWORD *)((char *)v32 + v66) = v51;
    v52 = (unsigned int *)&enum case for NavigationStyle.uber(_:);
  }
  v61 = *v52;
  v62 = type metadata accessor for NavigationStyle(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 104))(v32, v61, v62);
}

uint64_t sub_1B67D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v29 = type metadata accessor for PageData(0);
  v1 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Page(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for AssetActionImplementation(0);
  __chkstk_darwin(v30);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_31FE40);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - v14;
  type metadata accessor for PageView(0);
  v16 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v16, v17);
  v18 = v29;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, &v6[*(int *)(v4 + 60)], v29);
  sub_6685C((uint64_t)v6, type metadata accessor for Page);
  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v8, v3, v18);
  v19 = type metadata accessor for BaseObjectGraph(0);
  ActionDispatcher.init()(v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v20(v15, v12, v9);
  v21 = sub_648E0(&qword_320380, type metadata accessor for AssetActionImplementation, (uint64_t)&protocol conformance descriptor for AssetActionImplementation);
  ActionDispatcher.add<A>(_:)(v8, v9, v30, v21);
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v12, v9);
  sub_6685C((uint64_t)v8, type metadata accessor for AssetActionImplementation);
  v23 = sub_5C154(&qword_320150);
  v24 = *(unsigned __int8 *)(v10 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = swift_allocObject(v23, v25 + *(_QWORD *)(v10 + 72), v24 | 7);
  v20((char *)(v26 + v25), v15, v9);
  ActionDispatcher.init()(v19);
  ActionDispatcher.add(contentsOf:)(v26 + v25, v9);
  swift_setDeallocating(v26);
  swift_arrayDestroy(v26 + v25, 1, v9);
  swift_deallocClassInstance(v26, 32, 7);
  return ((uint64_t (*)(char *, uint64_t))v22)(v15, v9);
}

uint64_t sub_1B6A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t (*v23)(_QWORD);
  int EnumCaseMultiPayload;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t *v51;
  __int128 *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  __int128 v63[2];
  __int128 v64;
  uint64_t v65;
  _QWORD v66[6];

  v62 = a2;
  v3 = sub_5C154(&qword_320658);
  v57 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  __chkstk_darwin(v3);
  v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_5C154(&qword_31FE40);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v53 = (_QWORD **)((char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5C154(&qword_328B88);
  __chkstk_darwin(v6);
  v61 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Shelf(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Page(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v53 - v16;
  v18 = type metadata accessor for SeeAllFooterComponentModel(0);
  v60 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v59 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for HostProxy.Event(0);
  __chkstk_darwin(v20);
  v22 = (unint64_t *)((char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_5E11C(a1, (uint64_t)v22, v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v20);
  if (EnumCaseMultiPayload == 6)
  {
    v47 = type metadata accessor for PageView(0);
    v48 = v62;
    v49 = sub_5C154(&qword_323090);
    Binding.wrappedValue.getter(v49, v50);
    Page.intentToLoadMore.getter((uint64_t)&v64);
    result = sub_6685C((uint64_t)v14, type metadata accessor for Page);
    if (v65)
    {
      sub_5DC98(&v64, (uint64_t)v66);
      sub_16B2A4((uint64_t)v66, *(_QWORD *)(v48 + *(int *)(v47 + 64)));
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v66);
    }
    return result;
  }
  if (EnumCaseMultiPayload != 5)
  {
    v45 = type metadata accessor for HostProxy.Event;
    v46 = (uint64_t)v22;
    return sub_6685C(v46, v45);
  }
  v25 = *v22;
  v26 = type metadata accessor for PageView(0);
  v27 = v62;
  v28 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v28, v29);
  v30 = *(_QWORD *)&v17[*(int *)(v12 + 52)];
  swift_bridgeObjectRetain(v30);
  result = sub_6685C((uint64_t)v17, type metadata accessor for Page);
  if ((v25 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v25 >= *(_QWORD *)(v30 + 16))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  sub_5E11C(v30+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v25, (uint64_t)v11, type metadata accessor for Shelf);
  swift_bridgeObjectRelease(v30);
  sub_11F108((uint64_t)&v11[*(int *)(v8 + 56)], (uint64_t)v66);
  sub_6685C((uint64_t)v11, type metadata accessor for Shelf);
  sub_5E1A4((uint64_t)v66, (uint64_t)v63, &qword_323F40);
  sub_5DC98(v63, (uint64_t)&v64);
  sub_11F4C8(v66);
  v32 = sub_5C154(&qword_31EF38);
  v33 = (uint64_t)v61;
  v34 = swift_dynamicCast(v61, &v64, v32, v18, 6);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56);
  if ((v34 & 1) != 0)
  {
    v36 = v26;
    v35(v33, 0, 1, v18);
    v37 = v59;
    sub_5E160(v33, v59, type metadata accessor for SeeAllFooterComponentModel);
    sub_5E1A4(v37 + 40, (uint64_t)v63, &qword_320B70);
    sub_66F14((uint64_t)v63, (uint64_t)&v64, (uint64_t *)&unk_326210);
    if (v65)
    {
      sub_5DC98(&v64, (uint64_t)v66);
      v38 = *(_QWORD *)(v27 + *(int *)(v36 + 64));
      v39 = v53;
      v40 = v55;
      BaseObjectGraph.inject<A>(_:)(v53, v55, v55);
      v42 = v57;
      v41 = v58;
      v43 = v56;
      (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v58);
      v44 = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v66, v43, v38, v40);
      swift_release(v44);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
      (*(void (**)(_QWORD *, uint64_t))(v54 + 8))(v39, v40);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v66);
      v45 = type metadata accessor for SeeAllFooterComponentModel;
      v46 = v37;
      return sub_6685C(v46, v45);
    }
    sub_6685C(v37, type metadata accessor for SeeAllFooterComponentModel);
    v51 = (uint64_t *)&unk_326210;
    v52 = &v64;
  }
  else
  {
    v35(v33, 1, 1, v18);
    v51 = &qword_328B88;
    v52 = (__int128 *)v33;
  }
  return sub_5E09C((uint64_t)v52, v51);
}

uint64_t sub_1B6FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v18[5];

  v4 = sub_5C154(&qword_320658);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_31FE40);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for PageView(0) + 64));
  BaseObjectGraph.inject<A>(_:)(v11, v8, v8);
  v13 = sub_5C154(&qword_3200B8);
  v18[3] = v13;
  v18[4] = sub_67060((unint64_t *)&qword_3200C0, &qword_3200B8, (uint64_t)&protocol conformance descriptor for PageUpdateAction<A, B>);
  v14 = sub_668BC(v18);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, a1, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v4);
  v15 = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v18, v7, v12, v8);
  swift_release(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
}

uint64_t sub_1B716C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[3];
  __int128 v25[2];

  v23 = a1;
  v1 = sub_5C154(&qword_324C00);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_31FA60);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContextActionMenuView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_328B58);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ListItemComponentModel(0);
  ListItemViewModel.assetInfo.getter(v25);
  v24[0] = xmmword_2611C0;
  memset(&v24[1], 0, 32);
  v14 = ContextActionMenuView.init(assetInfo:originatingLocation:)(v25, (uint64_t)v24, (uint64_t)v9);
  v15.n128_f64[0] = ListItemViewModel.cardInfo.getter(v14);
  v16 = type metadata accessor for CardInfo(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v3, 1, v16) == 1)
  {
    sub_5E09C((uint64_t)v3, &qword_324C00);
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  }
  else
  {
    CardInfo.identifier.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v16);
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 0, 1, v19);
  }
  v20 = sub_648E0(&qword_3265D0, type metadata accessor for ContextActionMenuView, (uint64_t)&protocol conformance descriptor for ContextActionMenuView);
  View.referenceId(_:)(v6, v7, v20);
  sub_5E09C((uint64_t)v6, &qword_31FA60);
  sub_6685C((uint64_t)v9, type metadata accessor for ContextActionMenuView);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v23, v13, v10);
}

uint64_t sub_1B73E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  __int128 v36[2];

  v34 = a1;
  v1 = sub_5C154(&qword_324C00);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_31FA60);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ContextActionMenuView(0);
  __chkstk_darwin(v32);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_5C154(&qword_328B58);
  v9 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_328B80);
  __chkstk_darwin(v30);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_5C154(&qword_328B68);
  __chkstk_darwin(v31);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecommendationItemComponentModel(0);
  ListItemViewModel.assetInfo.getter(v36);
  v35[0] = xmmword_2611C0;
  memset(&v35[1], 0, 32);
  v16 = ContextActionMenuView.init(assetInfo:originatingLocation:)(v36, (uint64_t)v35, (uint64_t)v8);
  v17.n128_f64[0] = ListItemViewModel.cardInfo.getter(v16);
  v18 = type metadata accessor for CardInfo(0, v17);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v3, 1, v18) == 1)
  {
    sub_5E09C((uint64_t)v3, &qword_324C00);
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
  }
  else
  {
    CardInfo.identifier.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v18);
    v21 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 0, 1, v21);
  }
  v22 = sub_648E0(&qword_3265D0, type metadata accessor for ContextActionMenuView, (uint64_t)&protocol conformance descriptor for ContextActionMenuView);
  View.referenceId(_:)(v6, v32, v22);
  sub_5E09C((uint64_t)v6, &qword_31FA60);
  sub_6685C((uint64_t)v8, type metadata accessor for ContextActionMenuView);
  KeyPath = swift_getKeyPath(&unk_264710);
  v24 = v33;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v11, v33);
  v25 = &v13[*(int *)(v30 + 36)];
  *(_QWORD *)v25 = KeyPath;
  v25[8] = 1;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  v26 = swift_getKeyPath(&unk_264740);
  sub_5E1A4((uint64_t)v13, (uint64_t)v15, &qword_328B80);
  v27 = &v15[*(int *)(v31 + 36)];
  *(_QWORD *)v27 = v26;
  v27[8] = 1;
  sub_5E09C((uint64_t)v13, &qword_328B80);
  return sub_66F14((uint64_t)v15, v34, &qword_328B68);
}

uint64_t sub_1B7764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v3 = type metadata accessor for PageView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_5C154(&qword_328CB8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Page(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v12, v13);
  v14 = *(_QWORD *)&v11[*(int *)(v9 + 52)];
  swift_bridgeObjectRetain(v14);
  sub_6685C((uint64_t)v11, type metadata accessor for Page);
  v27 = v14;
  v15 = sub_5C154(&qword_325888);
  v16 = sub_67060(&qword_328CC0, &qword_325888, (uint64_t)&protocol conformance descriptor for [A]);
  IndexedRandomAccessCollection.init(_:)(&v27, v15, v16);
  KeyPath = swift_getKeyPath(&unk_2647A0);
  sub_5E11C(a1, (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PageView);
  v18 = *(unsigned __int8 *)(v4 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_2F1C10, v19 + v5, v18 | 7);
  sub_5E160((uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for PageView);
  v21 = swift_allocObject(&unk_2F1C38, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1BD5F0;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = sub_5C154(&qword_328C98);
  v23 = sub_67060(&qword_328CC8, &qword_328CB8, (uint64_t)&protocol conformance descriptor for IndexedRandomAccessCollection<A>);
  v24 = sub_1BD414();
  return ForEach<>.init(_:id:content:)(v8, KeyPath, sub_1BD668, v21, v6, v22, v23, &protocol witness table for String, v24);
}

uint64_t sub_1B79C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_5C154(&qword_323090);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ListShelfView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PageView(0);
  Binding.projectedValue.getter(v4);
  v10 = sub_1B27F0();
  ListShelfView.init(page:shelfIndex:objectGraph:)((uint64_t)v6, a1, v10, (uint64_t)v9, v11);
  sub_5E11C((uint64_t)v9, a2, type metadata accessor for ListShelfView);
  v12 = a2 + *(int *)(sub_5C154(&qword_328C98) + 36);
  *(_BYTE *)(v12 + 32) = 0;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  return sub_6685C((uint64_t)v9, type metadata accessor for ListShelfView);
}

uint64_t sub_1B7AF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;

  v47 = a1;
  v1 = sub_5C154(&qword_323D50);
  __chkstk_darwin(v1);
  v45 = (uint64_t)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v41 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - v10;
  v12 = sub_5C154(&qword_31FE40);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - v17;
  __chkstk_darwin(v19);
  v46 = (char *)&v41 - v20;
  v21 = Shelf.cardSetData.getter();
  if (v21)
  {
    v22 = v21;
    v23 = type metadata accessor for BaseObjectGraph(0);
    ActionDispatcher.init()(v23);
    v48 = v22;
    v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v24(v18, v15, v12);
    v25 = sub_F02C8();
    ActionDispatcher.add<A>(_:)(&v48, v12, &type metadata for FlowActionCardSetPresentationImplementation, v25);
    v43 = *(void (**)(char *, uint64_t))(v13 + 8);
    v43(v15, v12);
    swift_bridgeObjectRelease(v22);
    v26 = sub_5C154(&qword_320150);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = (v27 + 32) & ~v27;
    v44 = v28 + *(_QWORD *)(v13 + 72);
    v42 = v27 | 7;
    v29 = swift_allocObject(v26, v44, v27 | 7);
    v24((char *)(v29 + v28), v18, v12);
    ActionDispatcher.init()(v23);
    ActionDispatcher.add(contentsOf:)(v29 + v28, v12);
    swift_setDeallocating(v29);
    swift_arrayDestroy(v29 + v28, 1, v12);
    swift_deallocClassInstance(v29, 32, 7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v5, 0, 1, v12);
    v30 = v45;
    sub_5E1A4((uint64_t)v5, v45, &qword_323D50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v30, 1, v12) == 1)
    {
      v31 = v46;
      ActionDispatcher.init()(v23);
      sub_5E09C(v30, &qword_323D50);
    }
    else
    {
      v31 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v46, v30, v12);
    }
    sub_5E09C((uint64_t)v5, &qword_323D50);
    v43(v18, v12);
    v34 = v44;
    v35 = v42;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    sub_5E1A4((uint64_t)v11, (uint64_t)v8, &qword_323D50);
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12);
    v31 = v46;
    if (v32 == 1)
    {
      v33 = type metadata accessor for BaseObjectGraph(0);
      ActionDispatcher.init()(v33);
      sub_5E09C((uint64_t)v8, &qword_323D50);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v46, v8, v12);
    }
    sub_5E09C((uint64_t)v11, &qword_323D50);
    v36 = *(unsigned __int8 *)(v13 + 80);
    v28 = (v36 + 32) & ~v36;
    v34 = v28 + *(_QWORD *)(v13 + 72);
    v35 = v36 | 7;
  }
  v37 = sub_5C154(&qword_320150);
  v38 = swift_allocObject(v37, v34, v35);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v38 + v28, v31, v12);
  v39 = type metadata accessor for BaseObjectGraph(0);
  ActionDispatcher.init()(v39);
  ActionDispatcher.add(contentsOf:)(v38 + v28, v12);
  swift_setDeallocating(v38);
  swift_arrayDestroy(v38 + v28, 1, v12);
  swift_deallocClassInstance(v38, 32, 7);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v31, v12);
}

uint64_t sub_1B7F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t result;
  uint64_t v33;
  char v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v53 = a2;
  v52 = type metadata accessor for ShelfBackgroundViewModel(0);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v49 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for ShelfBackgroundViewModifier(0);
  __chkstk_darwin(v48);
  v51 = (uint64_t *)((char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ColorScheme(0);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  __chkstk_darwin(v5);
  v56 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Page(0);
  __chkstk_darwin(v55);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_323248);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v54);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_328CE8);
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_328D00);
  ShelfPageContext.shelfOffset.getter(&v59, v17);
  v18 = v59;
  *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v19);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v20 = &v16[*(int *)(sub_5C154(&qword_328D08) + 44)];
  v47 = a1;
  sub_5E11C(a1, (uint64_t)v13, type metadata accessor for Shelf);
  sub_1B2674(v18);
  v22 = v21;
  type metadata accessor for PageView(0);
  v23 = sub_5C154(&qword_328968);
  State.projectedValue.getter(v11, v23);
  v24 = sub_1B27F0();
  sub_E3CD4((uint64_t)v13, v22, (uint64_t)v11, v24, v20);
  v25 = *(int *)(v54 + 48);
  v26 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v26, v27);
  v28 = *(_QWORD *)&v8[*(int *)(v55 + 52)];
  swift_bridgeObjectRetain(v28);
  sub_6685C((uint64_t)v8, type metadata accessor for Page);
  v29 = v56;
  sub_79074(v56);
  v30 = _s7BooksUI24ShelfBackgroundViewModelV09BookStoreB0E21allowDefaultGradients2in11colorSchemeSaySbGSayAD0C0VG_05SwiftB005ColorN0OtFZ_0(v28, v29);
  v31 = swift_bridgeObjectRelease(v28);
  result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v57 + 8))(v29, v58, v31);
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v18 < *(_QWORD *)(v30 + 16))
  {
    v33 = v47 + v25;
    v34 = *(_BYTE *)(v30 + v18 + 32);
    v35 = swift_bridgeObjectRelease(v30);
    v37 = v49;
    v36 = v50;
    v38 = v33;
    v39 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v50 + 16))(v49, v38, v52, v35);
    KeyPath = swift_getKeyPath(&unk_2647F0);
    v41 = (uint64_t)v51;
    *v51 = KeyPath;
    v42 = sub_5C154(&qword_3202E8);
    swift_storeEnumTagMultiPayload(v41, v42, 0);
    v43 = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v41 + *(int *)(v48 + 20), v37, v39);
    *(_BYTE *)(v41 + *(int *)(v43 + 24)) = v34;
    v44 = v53;
    sub_5E1A4((uint64_t)v16, v53, &qword_328CE8);
    v45 = sub_5C154(&qword_328CD0);
    sub_5E160(v41, v44 + *(int *)(v45 + 36), type metadata accessor for ShelfBackgroundViewModifier);
    return sub_5E09C((uint64_t)v16, &qword_328CE8);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B8338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v4 = type metadata accessor for Page(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = ShelfScrollGeometryProxy.contentOffset.getter(v7);
  v10 = v9;
  v11 = (int *)type metadata accessor for PageView(0);
  v12 = (__int128 *)(a2 + v11[14]);
  v13 = *((_QWORD *)v12 + 2);
  v34 = *v12;
  v35 = v13;
  *(double *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v10;
  v14 = sub_5C154(&qword_328AA8);
  State.wrappedValue.setter(&v32, v14);
  v15 = sub_1B84F8(a1);
  v16 = ShelfScrollGeometryProxy.contentSize.getter(v15);
  v18 = v17;
  v19 = ShelfScrollGeometryProxy.containerSize.getter(v16);
  v21 = v18 - v20;
  v22 = ShelfScrollGeometryProxy.containerInsets.getter(v19);
  v24 = v21 + v23;
  ShelfScrollGeometryProxy.contentOffset.getter(v22);
  if (v24 + -700.0 <= v25)
  {
    v28 = sub_5C154(&qword_323090);
    Binding.wrappedValue.getter(v28, v29);
    Page.intentToLoadMore.getter((uint64_t)&v32);
    sub_6685C((uint64_t)v6, type metadata accessor for Page);
    if (v33)
    {
      sub_5DC98(&v32, (uint64_t)&v34);
      sub_16B2A4((uint64_t)&v34, *(_QWORD *)(a2 + v11[16]));
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v34);
    }
    else
    {
      v30 = *(_QWORD *)(a2 + v11[15]);
      result = swift_beginAccess(v30 + 16, &v34, 1, 0);
      *(_BYTE *)(v30 + 16) = 1;
    }
  }
  else
  {
    v26 = *(_QWORD *)(a2 + v11[15]);
    result = swift_beginAccess(v26 + 16, &v34, 1, 0);
    *(_BYTE *)(v26 + 16) = 0;
  }
  return result;
}

_QWORD *sub_1B84F8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  int v17;
  double v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *result;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double *v63;
  double v64;
  _QWORD v65[3];
  _QWORD v66[3];
  __int128 v67;
  double v68;

  v2 = v1;
  v61 = a1;
  v62 = type metadata accessor for HostProxy.Event(0);
  __chkstk_darwin(v62);
  v63 = (double *)((char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5C154(&qword_323250);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for NavigationBarTransitionInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Page(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PageView(0);
  v15 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v15, v16);
  v17 = v13[*(int *)(v11 + 32)];
  sub_6685C((uint64_t)v13, type metadata accessor for Page);
  v18 = 1.0;
  if (v17 == 1)
  {
    v19 = v10;
    v20 = (char *)v2 + *(int *)(v14 + 28);
    v21 = *(_QWORD *)v20;
    v22 = v20[8];
    sub_64DD8(*(_QWORD *)v20, v22);
    v23 = sub_79314(v21, v22);
    v24 = sub_64FFC(v21, v22);
    if ((v23 & 1) != 0)
    {
      ShelfScrollGeometryProxy.contentOffset.getter(v24);
      if (v27 <= 0.0)
        v18 = 0.0;
      else
        v18 = 1.0;
    }
    else
    {
      v25 = sub_5C154(&qword_328968);
      State.wrappedValue.getter(v6, v25);
      v26 = v7;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_5E09C((uint64_t)v6, &qword_323250);
        v18 = 0.0;
      }
      else
      {
        v28 = v19;
        v29 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v8 + 32))(v19, v6, v26);
        v30 = NavigationBarTransitionInfo.startOffset.getter(v29);
        v31 = *v2;
        v32 = *((_BYTE *)v2 + 8);
        v33 = swift_retain(*v2);
        v34 = sub_78264(v33, v32);
        swift_release(v31);
        KeyPath = swift_getKeyPath(&unk_2647C8);
        v66[0] = v34;
        v36 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v66, KeyPath, v36);
        swift_release(KeyPath);
        swift_beginAccess(v34 + 32, v66, 0, 0);
        v37 = *(double *)(v34 + 32);
        v38 = swift_release(v34);
        v39 = v30 - v37;
        v40 = NavigationBarTransitionInfo.endOffset.getter(v38);
        v41 = *v2;
        LOBYTE(v34) = *((_BYTE *)v2 + 8);
        v42 = swift_retain(*v2);
        v43 = sub_78264(v42, v34);
        swift_release(v41);
        v44 = swift_getKeyPath(&unk_2647C8);
        v65[0] = v43;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v65, v44, v36);
        swift_release(v44);
        swift_beginAccess(v43 + 32, v65, 0, 0);
        v45 = *(double *)(v43 + 32);
        v46 = swift_release(v43);
        ShelfScrollGeometryProxy.contentOffset.getter(v46);
        v64 = (v47 - v39) / (v40 - v45 - v39);
        v67 = xmmword_264470;
        v48 = sub_1BDCD4();
        Comparable.clamped(_:)(&v68, &v67, &type metadata for CGFloat, v48);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v28, v26);
        v18 = v68;
      }
    }
  }
  v49 = (_QWORD *)((char *)v2 + *(int *)(v14 + 48));
  v50 = *v49;
  v51 = v49[1];
  *(_QWORD *)&v67 = *v49;
  *((_QWORD *)&v67 + 1) = v51;
  v52 = sub_5C154(&qword_328BA0);
  result = State.wrappedValue.getter(&v68, v52);
  if (v68 != v18)
  {
    *(_QWORD *)&v67 = v50;
    *((_QWORD *)&v67 + 1) = v51;
    v68 = v18;
    State.wrappedValue.setter(&v68, v52);
    v54 = *v2;
    v55 = *((_BYTE *)v2 + 8);
    v56 = swift_retain(*v2);
    v57 = sub_78264(v56, v55);
    swift_release(v54);
    v58 = *(_QWORD *)(v57 + 16);
    swift_retain(v58);
    swift_release(v57);
    v59 = v62;
    v60 = (uint64_t)v63;
    *v63 = v18;
    swift_storeEnumTagMultiPayload(v60, v59, 1);
    PassthroughSubject.send(_:)(v60);
    swift_release(v58);
    return (_QWORD *)sub_6685C(v60, type metadata accessor for HostProxy.Event);
  }
  return result;
}

uint64_t sub_1B899C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[5];
  _BYTE v14[24];

  v2 = type metadata accessor for Page(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PageView(0);
  v6 = *(_QWORD *)(a1 + *(int *)(v5 + 60));
  result = swift_beginAccess(v6 + 16, v14, 0, 0);
  if (*(_BYTE *)(v6 + 16) == 1)
  {
    v8 = sub_5C154(&qword_323090);
    Binding.wrappedValue.getter(v8, v9);
    Page.intentToLoadMore.getter((uint64_t)&v11);
    result = sub_6685C((uint64_t)v4, type metadata accessor for Page);
    if (v12)
    {
      sub_5DC98(&v11, (uint64_t)v13);
      sub_16B2A4((uint64_t)v13, *(_QWORD *)(a1 + *(int *)(v5 + 64)));
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v13);
    }
  }
  return result;
}

uint64_t sub_1B8AA4@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_5E11C(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PageView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_2F1AA8, v7 + v5, v6 | 7);
  result = sub_5E160((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for PageView);
  *a2 = sub_1BC574;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_1B8B58@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, _BYTE *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BYTE *v30;

  v28 = a6;
  v29 = a4;
  v27 = a5;
  v30 = a7;
  v10 = sub_5C154(&qword_3239A8);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v26 - v14);
  v16 = type metadata accessor for ColorScheme(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v17 + 104))(v20, enum case for ColorScheme.dark(_:), v16, v18);
  LOBYTE(a2) = static ColorScheme.== infix(_:_:)(a2, v20);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v21 = *(int *)(v10 + 48);
  v22 = *a1;
  if ((a2 & 1) != 0)
  {
    *v15 = v22;
    v23 = v29;
  }
  else
  {
    *v12 = v22;
    v15 = v12;
    a3 = v27;
    v23 = v28;
  }
  v24 = (uint64_t)v15 + v21;
  sub_5E11C((uint64_t)a1 + v21, (uint64_t)v15 + v21, type metadata accessor for Shelf);
  result = sub_6685C(v24, type metadata accessor for Shelf);
  *v30 = v23 & 1 | (v22 != a3);
  return result;
}

uint64_t sub_1B8CEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v0 = type metadata accessor for CoordinateSpace(0);
  sub_5DD20(v0, qword_346020);
  v1 = sub_5240C(v0, (uint64_t)qword_346020);
  v3[0] = 0xD000000000000019;
  v3[1] = 0x8000000000274050;
  AnyHashable.init<A>(_:)(v3, &type metadata for String, &protocol witness table for String);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for CoordinateSpace.named(_:), v0);
}

void sub_1B8D90()
{
  xmmword_328950 = 0uLL;
}

double sub_1B8DA0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (qword_31E720 != -1)
    swift_once(&qword_31E720, sub_1B8D90);
  result = *(double *)&xmmword_328950;
  *a1 = xmmword_328950;
  return result;
}

uint64_t sub_1B8DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_648E0(&qword_328D10, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void (*EnvironmentValues.pageContainerSize.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = sub_1B6208();
  v3[5] = v4;
  EnvironmentValues.subscript.getter(&type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v4);
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return sub_1B8ECC;
}

void sub_1B8ECC(_OWORD **a1)
{
  _OWORD *v1;
  uint64_t v2;

  v2 = *((_QWORD *)*a1 + 5);
  v1 = *a1;
  v1[1] = **a1;
  EnvironmentValues.subscript.setter(v1 + 1, &type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v2);
  free(v1);
}

uint64_t sub_1B8F0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.exposureCollector.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B8F34()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_1B8F54(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ScenePhase(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return EnvironmentValues.scenePhase.setter(v5);
}

uint64_t _s7BooksUI24ShelfBackgroundViewModelV09BookStoreB0E21allowDefaultGradients2in11colorSchemeSaySbGSayAD0C0VG_05SwiftB005ColorN0OtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned __int8 *)(v6 + 80);
    v25 = a1;
    v23 = a2;
    v24 = (v11 + 32) & ~v11;
    v12 = a1 + v24;
    v13 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      v14 = sub_5E11C(v12, (uint64_t)v8, type metadata accessor for Shelf);
      v15 = ShelfBackgroundViewModel.ignoreShelf.getter(v14);
      result = sub_6685C((uint64_t)v8, type metadata accessor for Shelf);
      if ((v15 & 1) == 0)
        break;
      ++v10;
      v12 += v13;
      if (v9 == v10)
      {
        v10 = 0;
        break;
      }
    }
    v16 = v9 - 1;
    v17 = v25 + v24 + v13 * (v9 - 1);
    v18 = -v13;
    while (v16 < v9)
    {
      v19 = sub_5E11C(v17, (uint64_t)v8, type metadata accessor for Shelf);
      v20 = ShelfBackgroundViewModel.ignoreShelf.getter(v19);
      result = sub_6685C((uint64_t)v8, type metadata accessor for Shelf);
      if ((v20 & 1) == 0)
        goto LABEL_11;
      --v16;
      v17 += v18;
      if (v16 == -1)
      {
        v16 = 0;
LABEL_11:
        a1 = v25;
        a2 = v23;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    v16 = 0;
    v10 = 0;
    v20 = 1;
    v15 = 1;
LABEL_13:
    __chkstk_darwin(result);
    *(&v22 - 6) = a2;
    *(&v22 - 5) = v10;
    *((_BYTE *)&v22 - 32) = v15 & 1;
    *(&v22 - 3) = v16;
    *((_BYTE *)&v22 - 16) = v20 & 1;
    swift_bridgeObjectRetain(a1);
    v21 = sub_1B2100((void (*)(uint64_t *__return_ptr, char *))sub_1BDD20, (uint64_t)(&v22 - 8), a1);
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v21;
  }
  return result;
}

double sub_1B91BC@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_1B6208();
  EnvironmentValues.subscript.getter(&type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1B9208(__int128 *a1)
{
  unint64_t v1;
  __int128 v3;

  v3 = *a1;
  v1 = sub_1B6208();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PageContainerSizeKey, &type metadata for PageContainerSizeKey, v1);
}

ValueMetadata *type metadata accessor for PageContainerSizeKey()
{
  return &type metadata for PageContainerSizeKey;
}

uint64_t sub_1B9260(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t, __n128);
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t, __n128);
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t, __n128);
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int (*v129)(char *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v141;
  uint64_t *v142;
  uint64_t v143;
  char *v144;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    v16 = v15 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v7);
    v12 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v18 = a3[6];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = sub_5C154(&qword_320270);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for IntentDispatchState(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        v24 = sub_5C154(&qword_320278);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 16))(v19, v20, v22);
        v25 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v25);
    v27 = a3[7];
    v28 = a1 + v27;
    v29 = (uint64_t)a2 + v27;
    v30 = *(_QWORD *)v29;
    v31 = *(_BYTE *)(v29 + 8);
    sub_64DD8(*(_QWORD *)v29, v31);
    *(_QWORD *)v28 = v30;
    *(_BYTE *)(v28 + 8) = v31;
    v32 = a3[8];
    v33 = a1 + v32;
    v34 = (uint64_t)a2 + v32;
    v35 = *(id *)v34;
    v36 = *(_BYTE *)(v34 + 8);
    sub_AAFF4(*(id *)v34, v36);
    *(_QWORD *)v33 = v35;
    *(_BYTE *)(v33 + 8) = v36;
    v37 = a3[9];
    v38 = (uint64_t *)(a1 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    v40 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
      v42 = 1;
    }
    else
    {
      v43 = *v39;
      *v38 = *v39;
      swift_retain(v43);
      v42 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v40, v42);
    v141 = a3;
    v142 = a2;
    v44 = a3[10];
    v45 = (uint64_t *)(a1 + v44);
    v46 = (uint64_t *)((char *)a2 + v44);
    v47 = *v46;
    v48 = v46[1];
    *v45 = *v46;
    v45[1] = v48;
    swift_retain(v47);
    swift_retain(v48);
    v49 = *(int *)(sub_5C154(&qword_323090) + 32);
    v50 = (uint64_t *)((char *)v45 + v49);
    v51 = (uint64_t *)((char *)v46 + v49);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = (int *)type metadata accessor for Page(0);
    v54 = v53[5];
    v55 = (char *)v50 + v54;
    v56 = (char *)v51 + v54;
    v57 = type metadata accessor for LocalizerRequest(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v58 + 48);
    v60 = swift_bridgeObjectRetain(v52);
    if (v59(v56, 1, v57, v60))
    {
      v61 = sub_5C154(&qword_3217B8);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    v62 = v53[6];
    v63 = (char *)v50 + v62;
    v64 = (char *)v51 + v62;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v59)((char *)v51 + v62, 1, v57))
    {
      v65 = sub_5C154(&qword_3217B8);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v63, v64, v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v63, 0, 1, v57);
    }
    *((_BYTE *)v50 + v53[7]) = *((_BYTE *)v51 + v53[7]);
    *((_BYTE *)v50 + v53[8]) = *((_BYTE *)v51 + v53[8]);
    v66 = v53[9];
    v67 = (char *)v50 + v66;
    v68 = (char *)v51 + v66;
    v69 = type metadata accessor for ToolbarPrincipalType(0);
    v70 = *(_QWORD *)(v69 - 8);
    v143 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v71 = sub_5C154(&qword_322F98);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
    }
    v72 = v53[10];
    v73 = *(_QWORD *)((char *)v51 + v72);
    *(_QWORD *)((char *)v50 + v72) = v73;
    v74 = v53[11];
    v75 = *(_QWORD *)((char *)v51 + v74);
    *(_QWORD *)((char *)v50 + v74) = v75;
    *((_BYTE *)v50 + v53[12]) = *((_BYTE *)v51 + v53[12]);
    v76 = v53[13];
    v77 = *(_QWORD *)((char *)v51 + v76);
    *(_QWORD *)((char *)v50 + v76) = v77;
    v78 = v53[14];
    v79 = (_QWORD *)((char *)v50 + v78);
    v80 = (_QWORD *)((char *)v51 + v78);
    v81 = v80[1];
    *v79 = *v80;
    v79[1] = v81;
    v82 = v53[15];
    v144 = (char *)v50 + v82;
    v83 = (char *)v51 + v82;
    v84 = type metadata accessor for PageData(0);
    v85 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v84 - 8) + 16);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v77);
    v86 = swift_bridgeObjectRetain(v81);
    v85(v144, v83, v84, v86);
    v87 = v53[16];
    v88 = *(_QWORD *)((char *)v51 + v87);
    *(_QWORD *)((char *)v50 + v87) = v88;
    v89 = v53[17];
    v90 = (char *)v50 + v89;
    v91 = (char *)v51 + v89;
    v92 = type metadata accessor for PageMetrics(0);
    v93 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v92 - 8) + 16);
    v94 = swift_bridgeObjectRetain(v88);
    v93(v90, v91, v92, v94);
    *((_BYTE *)v50 + v53[18]) = *((_BYTE *)v51 + v53[18]);
    v95 = v53[19];
    v96 = *(_QWORD *)((char *)v51 + v95);
    *(_QWORD *)((char *)v50 + v95) = v96;
    v97 = v53[20];
    v98 = *(_QWORD *)((char *)v51 + v97);
    *(_QWORD *)((char *)v50 + v97) = v98;
    *((_BYTE *)v50 + v53[21]) = *((_BYTE *)v51 + v53[21]);
    v99 = v53[22];
    v100 = (_QWORD *)((char *)v50 + v99);
    v101 = (_QWORD *)((char *)v51 + v99);
    v102 = v101[1];
    *v100 = *v101;
    v100[1] = v102;
    v103 = v53[23];
    v104 = (char *)v50 + v103;
    v105 = (char *)v51 + v103;
    v106 = *((_QWORD *)v105 + 1);
    swift_bridgeObjectRetain(v96);
    swift_retain(v98);
    swift_bridgeObjectRetain(v102);
    if (v106)
    {
      *(_QWORD *)v104 = *(_QWORD *)v105;
      *((_QWORD *)v104 + 1) = v106;
      *((_OWORD *)v104 + 1) = *((_OWORD *)v105 + 1);
      v107 = *((_QWORD *)v105 + 4);
      *((_QWORD *)v104 + 4) = v107;
      swift_bridgeObjectRetain(v106);
      swift_bridgeObjectRetain(v107);
    }
    else
    {
      v108 = *((_OWORD *)v105 + 1);
      *(_OWORD *)v104 = *(_OWORD *)v105;
      *((_OWORD *)v104 + 1) = v108;
      *((_QWORD *)v104 + 4) = *((_QWORD *)v105 + 4);
    }
    v16 = v143;
    v109 = v141[11];
    v110 = (_QWORD *)(v143 + v109);
    v111 = (uint64_t)v142 + v109;
    v112 = *(uint64_t *)((char *)v142 + v109);
    v113 = *(uint64_t *)((char *)v142 + v109 + 8);
    *v110 = v112;
    v110[1] = v113;
    swift_retain(v112);
    swift_retain(v113);
    v114 = *(int *)(sub_5C154(&qword_3230B8) + 32);
    v115 = (char *)v110 + v114;
    v116 = (const void *)(v111 + v114);
    v117 = type metadata accessor for BooksAlertAction(0);
    v118 = *(_QWORD *)(v117 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
    {
      v119 = sub_5C154(&qword_322FA0);
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v118 + 16))(v115, v116, v117);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
    }
    v120 = v141[12];
    v121 = v141[13];
    v122 = (_QWORD *)(v143 + v120);
    v123 = (uint64_t *)((char *)v142 + v120);
    v124 = v123[1];
    *v122 = *v123;
    v122[1] = v124;
    v125 = (char *)(v143 + v121);
    v126 = (char *)v142 + v121;
    v127 = type metadata accessor for NavigationBarTransitionInfo(0);
    v128 = *(_QWORD *)(v127 - 8);
    v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
    swift_retain(v124);
    if (v129(v126, 1, v127))
    {
      v130 = sub_5C154(&qword_323250);
      memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v125, v126, v127);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
    }
    v131 = *(int *)(sub_5C154(&qword_328968) + 28);
    v132 = *(_QWORD *)&v126[v131];
    *(_QWORD *)&v125[v131] = v132;
    v133 = v141[14];
    v134 = v141[15];
    v135 = v143 + v133;
    v136 = (uint64_t)v142 + v133;
    *(_OWORD *)v135 = *(_OWORD *)v136;
    v137 = *(_QWORD *)(v136 + 16);
    *(_QWORD *)(v135 + 16) = v137;
    v138 = *(uint64_t *)((char *)v142 + v134);
    *(_QWORD *)(v143 + v134) = v138;
    v139 = v141[16];
    v15 = *(uint64_t *)((char *)v142 + v139);
    *(_QWORD *)(v143 + v139) = v15;
    swift_retain(v132);
    swift_retain(v137);
    swift_retain(v138);
  }
  swift_retain(v15);
  return v16;
}

uint64_t sub_1B9A20(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + a2[6]);
  v8 = sub_5C154(&qword_320270);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for IntentDispatchState(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  sub_794D8(*(id *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  v11 = (_QWORD *)((char *)a1 + a2[9]);
  v12 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)((char *)a1 + a2[10]);
  swift_release(*v14);
  swift_release(v14[1]);
  v15 = (char *)v14 + *(int *)(sub_5C154(&qword_323090) + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v15 + 1));
  v16 = (int *)type metadata accessor for Page(0);
  v17 = &v15[v16[5]];
  v18 = type metadata accessor for LocalizerRequest(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (!v20(v17, 1, v18))
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  v21 = &v15[v16[6]];
  if (!v20(v21, 1, v18))
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v22 = &v15[v16[9]];
  v23 = type metadata accessor for ToolbarPrincipalType(0);
  v24 = *(_QWORD *)(v23 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[10]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[13]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[14] + 8]);
  v25 = &v15[v16[15]];
  v26 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[16]]);
  v27 = &v15[v16[17]];
  v28 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[19]]);
  swift_release(*(_QWORD *)&v15[v16[20]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[22] + 8]);
  v29 = &v15[v16[23]];
  v30 = *((_QWORD *)v29 + 1);
  if (v30)
  {
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(*((_QWORD *)v29 + 4));
  }
  v31 = (_QWORD *)((char *)a1 + a2[11]);
  swift_release(*v31);
  swift_release(v31[1]);
  v32 = (char *)v31 + *(int *)(sub_5C154(&qword_3230B8) + 32);
  v33 = type metadata accessor for BooksAlertAction(0);
  v34 = *(_QWORD *)(v33 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
  swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8));
  v35 = (char *)a1 + a2[13];
  v36 = type metadata accessor for NavigationBarTransitionInfo(0);
  v37 = *(_QWORD *)(v36 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
  v38 = sub_5C154(&qword_328968);
  swift_release(*(_QWORD *)&v35[*(int *)(v38 + 28)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[14] + 16));
  swift_release(*(_QWORD *)((char *)a1 + a2[15]));
  return swift_release(*(_QWORD *)((char *)a1 + a2[16]));
}

uint64_t sub_1B9E3C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, __n128);
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  const void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v139;
  int *v140;
  uint64_t v141;
  char *v142;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v6);
  v11 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = sub_5C154(&qword_320270);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for IntentDispatchState(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
    {
      v21 = sub_5C154(&qword_320278);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      v22 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v20 + 16))(v16, v17, v19);
      v22 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
    }
  }
  else
  {
    v23 = *v17;
    *v16 = *v17;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v22);
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = (uint64_t)a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_64DD8(*(_QWORD *)v26, v28);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = (uint64_t)a2 + v29;
  v32 = *(id *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_AAFF4(*(id *)v31, v33);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v33;
  v34 = a3[9];
  v35 = (uint64_t *)(a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v35, v36, v38);
    v39 = 1;
  }
  else
  {
    v40 = *v36;
    *v35 = *v36;
    swift_retain(v40);
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v35, v37, v39);
  v139 = a2;
  v140 = a3;
  v41 = a3[10];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t)a2 + v41;
  v44 = *(uint64_t *)((char *)a2 + v41);
  v45 = *(uint64_t *)((char *)a2 + v41 + 8);
  *v42 = v44;
  v42[1] = v45;
  swift_retain(v44);
  swift_retain(v45);
  v46 = *(int *)(sub_5C154(&qword_323090) + 32);
  v47 = (_QWORD *)((char *)v42 + v46);
  v48 = v43 + v46;
  v49 = *(_QWORD *)(v43 + v46 + 8);
  *v47 = *(_QWORD *)(v43 + v46);
  v47[1] = v49;
  v50 = (int *)type metadata accessor for Page(0);
  v51 = v50[5];
  v52 = (char *)v47 + v51;
  v53 = (const void *)(v48 + v51);
  v54 = type metadata accessor for LocalizerRequest(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v55 + 48);
  v57 = swift_bridgeObjectRetain(v49);
  if (v56(v53, 1, v54, v57))
  {
    v58 = sub_5C154(&qword_3217B8);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v55 + 16))(v52, v53, v54);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  v59 = v50[6];
  v60 = (char *)v47 + v59;
  v61 = (const void *)(v48 + v59);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v56)(v48 + v59, 1, v54))
  {
    v62 = sub_5C154(&qword_3217B8);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v55 + 16))(v60, v61, v54);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v60, 0, 1, v54);
  }
  *((_BYTE *)v47 + v50[7]) = *(_BYTE *)(v48 + v50[7]);
  *((_BYTE *)v47 + v50[8]) = *(_BYTE *)(v48 + v50[8]);
  v63 = v50[9];
  v64 = (char *)v47 + v63;
  v65 = (const void *)(v48 + v63);
  v66 = type metadata accessor for ToolbarPrincipalType(0);
  v67 = *(_QWORD *)(v66 - 8);
  v141 = a1;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = sub_5C154(&qword_322F98);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v67 + 16))(v64, v65, v66);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  v69 = v50[10];
  v70 = *(_QWORD *)(v48 + v69);
  *(_QWORD *)((char *)v47 + v69) = v70;
  v71 = v50[11];
  v72 = *(_QWORD *)(v48 + v71);
  *(_QWORD *)((char *)v47 + v71) = v72;
  *((_BYTE *)v47 + v50[12]) = *(_BYTE *)(v48 + v50[12]);
  v73 = v50[13];
  v74 = *(_QWORD *)(v48 + v73);
  *(_QWORD *)((char *)v47 + v73) = v74;
  v75 = v50[14];
  v76 = (_QWORD *)((char *)v47 + v75);
  v77 = (_QWORD *)(v48 + v75);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  v79 = v50[15];
  v142 = (char *)v47 + v79;
  v80 = v48 + v79;
  v81 = type metadata accessor for PageData(0);
  v82 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v81 - 8) + 16);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v74);
  v83 = swift_bridgeObjectRetain(v78);
  v82(v142, v80, v81, v83);
  v84 = v50[16];
  v85 = *(_QWORD *)(v48 + v84);
  *(_QWORD *)((char *)v47 + v84) = v85;
  v86 = v50[17];
  v87 = (char *)v47 + v86;
  v88 = v48 + v86;
  v89 = type metadata accessor for PageMetrics(0);
  v90 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v89 - 8) + 16);
  v91 = swift_bridgeObjectRetain(v85);
  v90(v87, v88, v89, v91);
  *((_BYTE *)v47 + v50[18]) = *(_BYTE *)(v48 + v50[18]);
  v92 = v50[19];
  v93 = *(_QWORD *)(v48 + v92);
  *(_QWORD *)((char *)v47 + v92) = v93;
  v94 = v50[20];
  v95 = *(_QWORD *)(v48 + v94);
  *(_QWORD *)((char *)v47 + v94) = v95;
  *((_BYTE *)v47 + v50[21]) = *(_BYTE *)(v48 + v50[21]);
  v96 = v50[22];
  v97 = (_QWORD *)((char *)v47 + v96);
  v98 = (_QWORD *)(v48 + v96);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = v50[23];
  v101 = (char *)v47 + v100;
  v102 = v48 + v100;
  v103 = *(_QWORD *)(v102 + 8);
  swift_bridgeObjectRetain(v93);
  swift_retain(v95);
  swift_bridgeObjectRetain(v99);
  if (v103)
  {
    *(_QWORD *)v101 = *(_QWORD *)v102;
    *((_QWORD *)v101 + 1) = v103;
    *((_OWORD *)v101 + 1) = *(_OWORD *)(v102 + 16);
    v104 = *(_QWORD *)(v102 + 32);
    *((_QWORD *)v101 + 4) = v104;
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRetain(v104);
  }
  else
  {
    v105 = *(_OWORD *)(v102 + 16);
    *(_OWORD *)v101 = *(_OWORD *)v102;
    *((_OWORD *)v101 + 1) = v105;
    *((_QWORD *)v101 + 4) = *(_QWORD *)(v102 + 32);
  }
  v106 = v140[11];
  v107 = (_QWORD *)(v141 + v106);
  v108 = (uint64_t)v139 + v106;
  v109 = *(uint64_t *)((char *)v139 + v106);
  v110 = *(uint64_t *)((char *)v139 + v106 + 8);
  *v107 = v109;
  v107[1] = v110;
  swift_retain(v109);
  swift_retain(v110);
  v111 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v112 = (char *)v107 + v111;
  v113 = (const void *)(v108 + v111);
  v114 = type metadata accessor for BooksAlertAction(0);
  v115 = *(_QWORD *)(v114 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
  {
    v116 = sub_5C154(&qword_322FA0);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v115 + 16))(v112, v113, v114);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
  }
  v117 = v140[12];
  v118 = v140[13];
  v119 = (_QWORD *)(v141 + v117);
  v120 = (uint64_t *)((char *)v139 + v117);
  v121 = v120[1];
  *v119 = *v120;
  v119[1] = v121;
  v122 = (char *)(v141 + v118);
  v123 = (char *)v139 + v118;
  v124 = type metadata accessor for NavigationBarTransitionInfo(0);
  v125 = *(_QWORD *)(v124 - 8);
  v126 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48);
  swift_retain(v121);
  if (v126(v123, 1, v124))
  {
    v127 = sub_5C154(&qword_323250);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v122, v123, v124);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
  }
  v128 = *(int *)(sub_5C154(&qword_328968) + 28);
  v129 = *(_QWORD *)&v123[v128];
  *(_QWORD *)&v122[v128] = v129;
  v130 = v140[14];
  v131 = v140[15];
  v132 = v141 + v130;
  v133 = (uint64_t)v139 + v130;
  *(_OWORD *)v132 = *(_OWORD *)v133;
  v134 = *(_QWORD *)(v133 + 16);
  *(_QWORD *)(v132 + 16) = v134;
  v135 = *(uint64_t *)((char *)v139 + v131);
  *(_QWORD *)(v141 + v131) = v135;
  v136 = v140[16];
  v137 = *(uint64_t *)((char *)v139 + v136);
  *(_QWORD *)(v141 + v136) = v137;
  swift_retain(v129);
  swift_retain(v134);
  swift_retain(v135);
  swift_retain(v137);
  return v141;
}

uint64_t *sub_1BA5D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(void *, uint64_t, uint64_t);
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(char *, uint64_t, uint64_t);
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int *v178;
  uint64_t *v179;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_5E09C((uint64_t)a1 + v9, &qword_3202E8);
    v12 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v16 = a3[6];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    sub_5E09C((uint64_t)a1 + v16, &qword_320270);
    v19 = sub_5C154(&qword_320270);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for IntentDispatchState(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
      {
        v22 = sub_5C154(&qword_320278);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        v23 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v21 + 16))(v17, v18, v20);
        v23 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
      }
    }
    else
    {
      v24 = *v18;
      *v17 = *v18;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v23);
  }
  v25 = a3[7];
  v26 = (uint64_t)a1 + v25;
  v27 = (uint64_t)a2 + v25;
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  sub_64DD8(*(_QWORD *)v27, v29);
  v30 = *(_QWORD *)v26;
  v31 = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v29;
  sub_64FFC(v30, v31);
  v32 = a3[8];
  v33 = (uint64_t)a1 + v32;
  v34 = (uint64_t)a2 + v32;
  v35 = *(id *)v34;
  v36 = *(_BYTE *)(v34 + 8);
  sub_AAFF4(*(id *)v34, v36);
  v37 = *(void **)v33;
  v38 = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v33 = v35;
  *(_BYTE *)(v33 + 8) = v36;
  sub_794D8(v37, v38);
  if (a1 != a2)
  {
    v39 = a3[9];
    v40 = (uint64_t *)((char *)a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    sub_5E09C((uint64_t)a1 + v39, (uint64_t *)&unk_32A010);
    v42 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v44 = 1;
    }
    else
    {
      v45 = *v41;
      *v40 = *v41;
      swift_retain(v45);
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v42, v44);
  }
  v178 = a3;
  v179 = a2;
  v46 = a3[10];
  v47 = (uint64_t)a1 + v46;
  v48 = (uint64_t *)((char *)a2 + v46);
  v49 = *(uint64_t *)((char *)a1 + v46);
  v50 = *v48;
  *(uint64_t *)((char *)a1 + v46) = *v48;
  swift_retain(v50);
  swift_release(v49);
  v51 = v48[1];
  v52 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)(v47 + 8) = v51;
  swift_retain(v51);
  swift_release(v52);
  v53 = *(int *)(sub_5C154(&qword_323090) + 32);
  v54 = (char *)(v47 + v53);
  v55 = (char *)v48 + v53;
  *(_QWORD *)v54 = *(uint64_t *)((char *)v48 + v53);
  v56 = *(uint64_t *)((char *)v48 + v53 + 8);
  v57 = *(_QWORD *)(v47 + v53 + 8);
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  v58 = (int *)type metadata accessor for Page(0);
  v59 = v58[5];
  v60 = &v54[v59];
  v61 = &v55[v59];
  v62 = type metadata accessor for LocalizerRequest(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_21:
    v67 = sub_5C154(&qword_3217B8);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 24))(v60, v61, v62);
LABEL_22:
  v68 = v58[6];
  v69 = &v54[v68];
  v70 = &v55[v68];
  v71 = v64(&v54[v68], 1, v62);
  v72 = v64(v70, 1, v62);
  if (v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v69, v70, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v69, 0, 1, v62);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v72)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v69, v62);
LABEL_27:
    v73 = sub_5C154(&qword_3217B8);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 24))(v69, v70, v62);
LABEL_28:
  v54[v58[7]] = v55[v58[7]];
  v54[v58[8]] = v55[v58[8]];
  v74 = v58[9];
  v75 = &v54[v74];
  v76 = &v55[v74];
  v77 = type metadata accessor for ToolbarPrincipalType(0);
  v78 = *(_QWORD *)(v77 - 8);
  v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  v80 = v79(v75, 1, v77);
  v81 = v79(v76, 1, v77);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v75, v76, v77);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v75, v77);
LABEL_33:
    v82 = sub_5C154(&qword_322F98);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v78 + 24))(v75, v76, v77);
LABEL_34:
  v83 = v58[10];
  v84 = *(_QWORD *)&v55[v83];
  v85 = *(_QWORD *)&v54[v83];
  *(_QWORD *)&v54[v83] = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  v86 = v58[11];
  v87 = *(_QWORD *)&v55[v86];
  v88 = *(_QWORD *)&v54[v86];
  *(_QWORD *)&v54[v86] = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v88);
  v54[v58[12]] = v55[v58[12]];
  v89 = v58[13];
  v90 = *(_QWORD *)&v55[v89];
  v91 = *(_QWORD *)&v54[v89];
  *(_QWORD *)&v54[v89] = v90;
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRelease(v91);
  v92 = v58[14];
  v93 = &v54[v92];
  v94 = &v55[v92];
  *(_QWORD *)v93 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v96 = *((_QWORD *)v93 + 1);
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease(v96);
  v97 = v58[15];
  v98 = &v54[v97];
  v99 = &v55[v97];
  v100 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 24))(v98, v99, v100);
  v101 = v58[16];
  v102 = *(_QWORD *)&v55[v101];
  v103 = *(_QWORD *)&v54[v101];
  *(_QWORD *)&v54[v101] = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  v104 = v58[17];
  v105 = &v54[v104];
  v106 = &v55[v104];
  v107 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 24))(v105, v106, v107);
  v54[v58[18]] = v55[v58[18]];
  v108 = v58[19];
  v109 = *(_QWORD *)&v55[v108];
  v110 = *(_QWORD *)&v54[v108];
  *(_QWORD *)&v54[v108] = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  v111 = v58[20];
  v112 = *(_QWORD *)&v55[v111];
  v113 = *(_QWORD *)&v54[v111];
  *(_QWORD *)&v54[v111] = v112;
  swift_retain(v112);
  swift_release(v113);
  v54[v58[21]] = v55[v58[21]];
  v114 = v58[22];
  v115 = &v54[v114];
  v116 = &v55[v114];
  *(_QWORD *)v115 = *(_QWORD *)v116;
  v117 = *((_QWORD *)v116 + 1);
  v118 = *((_QWORD *)v115 + 1);
  *((_QWORD *)v115 + 1) = v117;
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRelease(v118);
  v119 = v58[23];
  v120 = &v54[v119];
  v121 = &v55[v119];
  v122 = *(_QWORD *)&v54[v119 + 8];
  v123 = *(_QWORD *)&v55[v119 + 8];
  if (v122)
  {
    if (v123)
    {
      *(_QWORD *)v120 = *(_QWORD *)v121;
      v124 = *((_QWORD *)v121 + 1);
      *((_QWORD *)v120 + 1) = v124;
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRelease(v122);
      *((_QWORD *)v120 + 2) = *((_QWORD *)v121 + 2);
      *((_QWORD *)v120 + 3) = *((_QWORD *)v121 + 3);
      v125 = *((_QWORD *)v121 + 4);
      v126 = *((_QWORD *)v120 + 4);
      *((_QWORD *)v120 + 4) = v125;
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRelease(v126);
    }
    else
    {
      sub_984B0((uint64_t)v120);
      v129 = *((_QWORD *)v121 + 4);
      v130 = *((_OWORD *)v121 + 1);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *((_OWORD *)v120 + 1) = v130;
      *((_QWORD *)v120 + 4) = v129;
    }
  }
  else if (v123)
  {
    *(_QWORD *)v120 = *(_QWORD *)v121;
    v127 = *((_QWORD *)v121 + 1);
    *((_QWORD *)v120 + 1) = v127;
    *((_QWORD *)v120 + 2) = *((_QWORD *)v121 + 2);
    *((_QWORD *)v120 + 3) = *((_QWORD *)v121 + 3);
    v128 = *((_QWORD *)v121 + 4);
    *((_QWORD *)v120 + 4) = v128;
    swift_bridgeObjectRetain(v127);
    swift_bridgeObjectRetain(v128);
  }
  else
  {
    v131 = *(_OWORD *)v121;
    v132 = *((_OWORD *)v121 + 1);
    *((_QWORD *)v120 + 4) = *((_QWORD *)v121 + 4);
    *(_OWORD *)v120 = v131;
    *((_OWORD *)v120 + 1) = v132;
  }
  v133 = v178[11];
  v134 = (uint64_t)a1 + v133;
  v135 = (uint64_t)v179 + v133;
  v136 = *(uint64_t *)((char *)a1 + v133);
  v137 = *(uint64_t *)((char *)v179 + v133);
  *(uint64_t *)((char *)a1 + v133) = v137;
  swift_retain(v137);
  swift_release(v136);
  v138 = *(_QWORD *)(v135 + 8);
  v139 = *(_QWORD *)(v134 + 8);
  *(_QWORD *)(v134 + 8) = v138;
  swift_retain(v138);
  swift_release(v139);
  v140 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v141 = (void *)(v134 + v140);
  v142 = (void *)(v135 + v140);
  v143 = type metadata accessor for BooksAlertAction(0);
  v144 = *(_QWORD *)(v143 - 8);
  v145 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v144 + 48);
  v146 = v145(v141, 1, v143);
  v147 = v145(v142, 1, v143);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, void *, uint64_t))(v144 + 16))(v141, v142, v143);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v144 + 8))(v141, v143);
LABEL_49:
    v148 = sub_5C154(&qword_322FA0);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_50;
  }
  (*(void (**)(void *, void *, uint64_t))(v144 + 24))(v141, v142, v143);
LABEL_50:
  v149 = v178[12];
  v150 = (uint64_t *)((char *)a1 + v149);
  v151 = (uint64_t *)((char *)v179 + v149);
  *v150 = *v151;
  v152 = v150[1];
  v153 = v151[1];
  v150[1] = v153;
  swift_retain(v153);
  swift_release(v152);
  v154 = v178[13];
  v155 = (char *)a1 + v154;
  v156 = (char *)v179 + v154;
  v157 = type metadata accessor for NavigationBarTransitionInfo(0);
  v158 = *(_QWORD *)(v157 - 8);
  v159 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v158 + 48);
  v160 = v159(v155, 1, v157);
  v161 = v159(v156, 1, v157);
  if (!v160)
  {
    if (!v161)
    {
      (*(void (**)(char *, char *, uint64_t))(v158 + 24))(v155, v156, v157);
      goto LABEL_56;
    }
    (*(void (**)(char *, uint64_t))(v158 + 8))(v155, v157);
    goto LABEL_55;
  }
  if (v161)
  {
LABEL_55:
    v162 = sub_5C154(&qword_323250);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_56;
  }
  (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v155, v156, v157);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
LABEL_56:
  v163 = *(int *)(sub_5C154(&qword_328968) + 28);
  v164 = *(_QWORD *)&v155[v163];
  v165 = *(_QWORD *)&v156[v163];
  *(_QWORD *)&v155[v163] = v165;
  swift_retain(v165);
  swift_release(v164);
  v166 = v178[14];
  v167 = (uint64_t *)((char *)a1 + v166);
  v168 = (uint64_t *)((char *)v179 + v166);
  *v167 = *v168;
  v167[1] = v168[1];
  v169 = v167[2];
  v170 = v168[2];
  v167[2] = v170;
  swift_retain(v170);
  swift_release(v169);
  v171 = v178[15];
  v172 = *(uint64_t *)((char *)v179 + v171);
  v173 = *(uint64_t *)((char *)a1 + v171);
  *(uint64_t *)((char *)a1 + v171) = v172;
  swift_retain(v172);
  swift_release(v173);
  v174 = v178[16];
  v175 = *(uint64_t *)((char *)v179 + v174);
  v176 = *(uint64_t *)((char *)a1 + v174);
  *(uint64_t *)((char *)a1 + v174) = v175;
  swift_retain(v175);
  swift_release(v176);
  return a1;
}

uint64_t sub_1BB070(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v88;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_5C154(&qword_320270);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for IntentDispatchState(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15))
    {
      v17 = sub_5C154(&qword_320278);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v12, v13, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
    }
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a3[9];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for ColorConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v88 = a3;
  v29 = a3[10];
  v30 = (_QWORD *)(a1 + v29);
  v31 = a2 + v29;
  v32 = *(_QWORD *)(a2 + v29 + 8);
  *v30 = *(_QWORD *)(a2 + v29);
  v30[1] = v32;
  v33 = *(int *)(sub_5C154(&qword_323090) + 32);
  v34 = (char *)v30 + v33;
  v35 = v31 + v33;
  *(_OWORD *)((char *)v30 + v33) = *(_OWORD *)(v31 + v33);
  v36 = (int *)type metadata accessor for Page(0);
  v37 = v36[5];
  v38 = &v34[v37];
  v39 = (const void *)(v35 + v37);
  v40 = type metadata accessor for LocalizerRequest(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
  if (v42(v39, 1, v40))
  {
    v43 = sub_5C154(&qword_3217B8);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v44 = v36[6];
  v45 = &v34[v44];
  v46 = (const void *)(v35 + v44);
  if (v42((const void *)(v35 + v44), 1, v40))
  {
    v47 = sub_5C154(&qword_3217B8);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v41 + 32))(v45, v46, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v45, 0, 1, v40);
  }
  v34[v36[7]] = *(_BYTE *)(v35 + v36[7]);
  v34[v36[8]] = *(_BYTE *)(v35 + v36[8]);
  v48 = v36[9];
  v49 = &v34[v48];
  v50 = (const void *)(v35 + v48);
  v51 = type metadata accessor for ToolbarPrincipalType(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    v53 = sub_5C154(&qword_322F98);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v52 + 32))(v49, v50, v51);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  *(_QWORD *)&v34[v36[10]] = *(_QWORD *)(v35 + v36[10]);
  *(_QWORD *)&v34[v36[11]] = *(_QWORD *)(v35 + v36[11]);
  v34[v36[12]] = *(_BYTE *)(v35 + v36[12]);
  *(_QWORD *)&v34[v36[13]] = *(_QWORD *)(v35 + v36[13]);
  *(_OWORD *)&v34[v36[14]] = *(_OWORD *)(v35 + v36[14]);
  v54 = v36[15];
  v55 = &v34[v54];
  v56 = v35 + v54;
  v57 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  *(_QWORD *)&v34[v36[16]] = *(_QWORD *)(v35 + v36[16]);
  v58 = v36[17];
  v59 = &v34[v58];
  v60 = v35 + v58;
  v61 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
  v34[v36[18]] = *(_BYTE *)(v35 + v36[18]);
  *(_QWORD *)&v34[v36[19]] = *(_QWORD *)(v35 + v36[19]);
  *(_QWORD *)&v34[v36[20]] = *(_QWORD *)(v35 + v36[20]);
  v34[v36[21]] = *(_BYTE *)(v35 + v36[21]);
  *(_OWORD *)&v34[v36[22]] = *(_OWORD *)(v35 + v36[22]);
  v62 = v36[23];
  v63 = &v34[v62];
  v64 = v35 + v62;
  v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *((_OWORD *)v63 + 1) = v65;
  *((_QWORD *)v63 + 4) = *(_QWORD *)(v64 + 32);
  v66 = v88[11];
  v67 = (_QWORD *)(a1 + v66);
  v68 = a2 + v66;
  v69 = *(_QWORD *)(a2 + v66 + 8);
  *v67 = *(_QWORD *)(a2 + v66);
  v67[1] = v69;
  v70 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v71 = (char *)v67 + v70;
  v72 = (const void *)(v68 + v70);
  v73 = type metadata accessor for BooksAlertAction(0);
  v74 = *(_QWORD *)(v73 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
  {
    v75 = sub_5C154(&qword_322FA0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v74 + 32))(v71, v72, v73);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  v76 = v88[13];
  *(_OWORD *)(a1 + v88[12]) = *(_OWORD *)(a2 + v88[12]);
  v77 = (char *)(a1 + v76);
  v78 = (char *)(a2 + v76);
  v79 = type metadata accessor for NavigationBarTransitionInfo(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_5C154(&qword_323250);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  v82 = sub_5C154(&qword_328968);
  *(_QWORD *)&v77[*(int *)(v82 + 28)] = *(_QWORD *)&v78[*(int *)(v82 + 28)];
  v83 = v88[14];
  v84 = v88[15];
  v85 = a1 + v83;
  v86 = a2 + v83;
  *(_QWORD *)(v85 + 16) = *(_QWORD *)(v86 + 16);
  *(_OWORD *)v85 = *(_OWORD *)v86;
  *(_QWORD *)(a1 + v84) = *(_QWORD *)(a2 + v84);
  *(_QWORD *)(a1 + v88[16]) = *(_QWORD *)(a2 + v88[16]);
  return a1;
}

uint64_t *sub_1BB70C(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(void *, uint64_t, uint64_t);
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(char *, uint64_t, uint64_t);
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v150;
  int *v151;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_5E09C((uint64_t)a1 + v8, &qword_3202E8);
    v11 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_5E09C((uint64_t)a1 + v13, &qword_320270);
    v16 = sub_5C154(&qword_320270);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for IntentDispatchState(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      {
        v19 = sub_5C154(&qword_320278);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v15, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v20 = a3[7];
  v21 = (uint64_t)a1 + v20;
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = (_BYTE)v22;
  sub_64FFC(v24, v25);
  v26 = a3[8];
  v27 = (uint64_t)a1 + v26;
  v28 = (uint64_t *)((char *)a2 + v26);
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  v30 = *(void **)v27;
  v31 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = (_BYTE)v28;
  sub_794D8(v30, v31);
  if (a1 != a2)
  {
    v32 = a3[9];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    sub_5E09C((uint64_t)a1 + v32, (uint64_t *)&unk_32A010);
    v35 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload(v33, v35, 1);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
  }
  v150 = a2;
  v151 = a3;
  v37 = a3[10];
  v38 = (uint64_t)a1 + v37;
  v39 = (uint64_t *)((char *)a2 + v37);
  v40 = *(uint64_t *)((char *)a1 + v37);
  *(uint64_t *)((char *)a1 + v37) = *v39;
  swift_release(v40);
  v41 = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v38 + 8) = v39[1];
  swift_release(v41);
  v42 = *(int *)(sub_5C154(&qword_323090) + 32);
  v43 = (char *)(v38 + v42);
  v44 = (char *)v39 + v42;
  v45 = *(uint64_t *)((char *)v39 + v42 + 8);
  v46 = *(_QWORD *)(v38 + v42 + 8);
  *(_QWORD *)v43 = *(uint64_t *)((char *)v39 + v42);
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease(v46);
  v47 = (int *)type metadata accessor for Page(0);
  v48 = v47[5];
  v49 = &v43[v48];
  v50 = &v44[v48];
  v51 = type metadata accessor for LocalizerRequest(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v49, v50, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v49, v51);
LABEL_20:
    v56 = sub_5C154(&qword_3217B8);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v49, v50, v51);
LABEL_21:
  v57 = v47[6];
  v58 = &v43[v57];
  v59 = &v44[v57];
  v60 = v53(&v43[v57], 1, v51);
  v61 = v53(v59, 1, v51);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v58, v59, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v58, 0, 1, v51);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v58, v51);
LABEL_26:
    v62 = sub_5C154(&qword_3217B8);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v58, v59, v51);
LABEL_27:
  v43[v47[7]] = v44[v47[7]];
  v43[v47[8]] = v44[v47[8]];
  v63 = v47[9];
  v64 = &v43[v63];
  v65 = &v44[v63];
  v66 = type metadata accessor for ToolbarPrincipalType(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
LABEL_32:
    v71 = sub_5C154(&qword_322F98);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v64, v65, v66);
LABEL_33:
  v72 = v47[10];
  v73 = *(_QWORD *)&v43[v72];
  *(_QWORD *)&v43[v72] = *(_QWORD *)&v44[v72];
  swift_bridgeObjectRelease(v73);
  v74 = v47[11];
  v75 = *(_QWORD *)&v43[v74];
  *(_QWORD *)&v43[v74] = *(_QWORD *)&v44[v74];
  swift_bridgeObjectRelease(v75);
  v43[v47[12]] = v44[v47[12]];
  v76 = v47[13];
  v77 = *(_QWORD *)&v43[v76];
  *(_QWORD *)&v43[v76] = *(_QWORD *)&v44[v76];
  swift_bridgeObjectRelease(v77);
  v78 = v47[14];
  v79 = &v43[v78];
  v80 = &v44[v78];
  v82 = *(_QWORD *)v80;
  v81 = *((_QWORD *)v80 + 1);
  v83 = v79[1];
  *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease(v83);
  v84 = v47[15];
  v85 = &v43[v84];
  v86 = &v44[v84];
  v87 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 40))(v85, v86, v87);
  v88 = v47[16];
  v89 = *(_QWORD *)&v43[v88];
  *(_QWORD *)&v43[v88] = *(_QWORD *)&v44[v88];
  swift_bridgeObjectRelease(v89);
  v90 = v47[17];
  v91 = &v43[v90];
  v92 = &v44[v90];
  v93 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 40))(v91, v92, v93);
  v43[v47[18]] = v44[v47[18]];
  v94 = v47[19];
  v95 = *(_QWORD *)&v43[v94];
  *(_QWORD *)&v43[v94] = *(_QWORD *)&v44[v94];
  swift_bridgeObjectRelease(v95);
  v96 = v47[20];
  v97 = *(_QWORD *)&v43[v96];
  *(_QWORD *)&v43[v96] = *(_QWORD *)&v44[v96];
  swift_release(v97);
  v43[v47[21]] = v44[v47[21]];
  v98 = v47[22];
  v99 = &v43[v98];
  v100 = &v44[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v47[23];
  v105 = &v43[v104];
  v106 = &v44[v104];
  v107 = *(_QWORD *)&v43[v104 + 8];
  if (v107)
  {
    v108 = *((_QWORD *)v106 + 1);
    if (v108)
    {
      *v105 = *(_QWORD *)v106;
      v105[1] = v108;
      swift_bridgeObjectRelease(v107);
      v105[2] = *((_QWORD *)v106 + 2);
      v109 = *((_QWORD *)v106 + 4);
      v110 = v105[4];
      v105[3] = *((_QWORD *)v106 + 3);
      v105[4] = v109;
      swift_bridgeObjectRelease(v110);
      goto LABEL_38;
    }
    sub_984B0((uint64_t)v105);
  }
  v111 = *((_OWORD *)v106 + 1);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *((_OWORD *)v105 + 1) = v111;
  v105[4] = *((_QWORD *)v106 + 4);
LABEL_38:
  v112 = v151[11];
  v113 = (uint64_t)a1 + v112;
  v114 = (uint64_t)v150 + v112;
  v115 = *(uint64_t *)((char *)a1 + v112);
  *(uint64_t *)((char *)a1 + v112) = *(uint64_t *)((char *)v150 + v112);
  swift_release(v115);
  v116 = *(_QWORD *)(v113 + 8);
  *(_QWORD *)(v113 + 8) = *(_QWORD *)(v114 + 8);
  swift_release(v116);
  v117 = *(int *)(sub_5C154(&qword_3230B8) + 32);
  v118 = (void *)(v113 + v117);
  v119 = (void *)(v114 + v117);
  v120 = type metadata accessor for BooksAlertAction(0);
  v121 = *(_QWORD *)(v120 - 8);
  v122 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v121 + 48);
  v123 = v122(v118, 1, v120);
  v124 = v122(v119, 1, v120);
  if (v123)
  {
    if (!v124)
    {
      (*(void (**)(void *, void *, uint64_t))(v121 + 32))(v118, v119, v120);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v124)
  {
    (*(void (**)(void *, uint64_t))(v121 + 8))(v118, v120);
LABEL_43:
    v125 = sub_5C154(&qword_322FA0);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(void *, void *, uint64_t))(v121 + 40))(v118, v119, v120);
LABEL_44:
  v126 = v151[12];
  v127 = (uint64_t *)((char *)a1 + v126);
  v128 = (uint64_t *)((char *)v150 + v126);
  *v127 = *v128;
  v129 = v127[1];
  v127[1] = v128[1];
  swift_release(v129);
  v130 = v151[13];
  v131 = (char *)a1 + v130;
  v132 = (char *)v150 + v130;
  v133 = type metadata accessor for NavigationBarTransitionInfo(0);
  v134 = *(_QWORD *)(v133 - 8);
  v135 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v134 + 48);
  v136 = v135(v131, 1, v133);
  v137 = v135(v132, 1, v133);
  if (!v136)
  {
    if (!v137)
    {
      (*(void (**)(char *, char *, uint64_t))(v134 + 40))(v131, v132, v133);
      goto LABEL_50;
    }
    (*(void (**)(char *, uint64_t))(v134 + 8))(v131, v133);
    goto LABEL_49;
  }
  if (v137)
  {
LABEL_49:
    v138 = sub_5C154(&qword_323250);
    memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    goto LABEL_50;
  }
  (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v131, v132, v133);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
LABEL_50:
  v139 = *(int *)(sub_5C154(&qword_328968) + 28);
  v140 = *(_QWORD *)&v131[v139];
  *(_QWORD *)&v131[v139] = *(_QWORD *)&v132[v139];
  swift_release(v140);
  v141 = v151[14];
  v142 = (uint64_t)a1 + v141;
  v143 = (uint64_t)v150 + v141;
  *(_OWORD *)v142 = *(_OWORD *)v143;
  v144 = *(_QWORD *)(v142 + 16);
  *(_QWORD *)(v142 + 16) = *(_QWORD *)(v143 + 16);
  swift_release(v144);
  v145 = v151[15];
  v146 = *(uint64_t *)((char *)a1 + v145);
  *(uint64_t *)((char *)a1 + v145) = *(uint64_t *)((char *)v150 + v145);
  swift_release(v146);
  v147 = v151[16];
  v148 = *(uint64_t *)((char *)a1 + v147);
  *(uint64_t *)((char *)a1 + v147) = *(uint64_t *)((char *)v150 + v147);
  swift_release(v148);
  return a1;
}

uint64_t sub_1BC06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1BC078);
}

uint64_t sub_1BC078(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_5C154(&qword_327778);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_5C154(&qword_328970);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_5C154(&qword_31F498);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_5C154(&qword_323090);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = sub_5C154(&qword_3230B8);
  v7 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v13;
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v14 = sub_5C154(&qword_328968);
  v7 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v16 = *(_QWORD *)(a1 + a3[15]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_1BC1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1BC1D0);
}

uint64_t sub_1BC1D0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_5C154(&qword_327778);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = sub_5C154(&qword_328970);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v13 = sub_5C154(&qword_31F498);
  v9 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v13;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v14 = sub_5C154(&qword_323090);
  v9 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v14;
    v11 = a4[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v15 = sub_5C154(&qword_3230B8);
  v9 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v15;
    v11 = a4[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_5C154(&qword_328968);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[15]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PageView(uint64_t a1)
{
  uint64_t result;

  result = qword_3289D0;
  if (!qword_3289D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageView);
  return result;
}

void sub_1BC354(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[13];

  v14[0] = "\t";
  sub_8C25C(319, (unint64_t *)&qword_3277E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v14[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1BC508(319, &qword_3289E0, &qword_320278, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v14[2] = *(_QWORD *)(v4 - 8) + 64;
      v14[3] = "\t";
      v14[4] = "\t";
      sub_8C25C(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v14[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_8C25C(319, (unint64_t *)&unk_324240, type metadata accessor for Page, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
        if (v9 <= 0x3F)
        {
          v14[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_8C25C(319, (unint64_t *)&unk_326E48, type metadata accessor for PageAlert, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
          if (v11 <= 0x3F)
          {
            v14[7] = *(_QWORD *)(v10 - 8) + 64;
            v14[8] = &unk_2644B8;
            sub_1BC508(319, (unint64_t *)&unk_3289E8, &qword_323250, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
            if (v13 <= 0x3F)
            {
              v14[9] = *(_QWORD *)(v12 - 8) + 64;
              v14[10] = &unk_2644D0;
              v14[11] = (char *)&value witness table for Builtin.NativeObject + 64;
              v14[12] = (char *)&value witness table for Builtin.NativeObject + 64;
              swift_initStructMetadata(a1, 256, 13, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

void sub_1BC508(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = sub_667D0(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1BC560(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9670, 1);
}

uint64_t sub_1BC574(uint64_t a1)
{
  return sub_1BC590(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1B29C0);
}

uint64_t sub_1BC584(uint64_t a1)
{
  return sub_1BC590(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1B3F58);
}

uint64_t sub_1BC590(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_1BC5FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328AB8;
  if (!qword_328AB8)
  {
    v1 = sub_667D0(&qword_328AB0);
    sub_1BC680();
    sub_67060(&qword_328B20, &qword_328B28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328AB8);
  }
  return result;
}

unint64_t sub_1BC680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328AC0;
  if (!qword_328AC0)
  {
    v1 = sub_667D0(&qword_328AC8);
    sub_1BC704();
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328AC0);
  }
  return result;
}

unint64_t sub_1BC704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328AD0;
  if (!qword_328AD0)
  {
    v1 = sub_667D0(&qword_328AD8);
    sub_1BC788();
    sub_67060(&qword_328B10, &qword_328B18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328AD0);
  }
  return result;
}

unint64_t sub_1BC788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328AE0;
  if (!qword_328AE0)
  {
    v1 = sub_667D0(&qword_328AE8);
    sub_67060(&qword_328AF0, &qword_328AF8, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
    sub_67060(&qword_328B00, &qword_328B08, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328AE0);
  }
  return result;
}

uint64_t sub_1BC834@<X0>(uint64_t a1@<X8>)
{
  return sub_1B67D8(a1);
}

unint64_t sub_1BC83C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328B30;
  if (!qword_328B30)
  {
    v1 = sub_667D0(&qword_328A68);
    sub_1BC8C0();
    sub_648E0(&qword_3254C8, type metadata accessor for PageViewEventViewModifier, (uint64_t)&unk_25FD68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328B30);
  }
  return result;
}

unint64_t sub_1BC8C0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_328B38;
  if (!qword_328B38)
  {
    v1 = sub_667D0(&qword_328A60);
    v2[0] = sub_667D0(&qword_328AB0);
    v2[1] = sub_1BC5FC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationStyle(_:localizer:scrollContentOffset:)>>, 1);
    sub_648E0(&qword_326E98, type metadata accessor for PageAlertViewModifier, (uint64_t)&protocol conformance descriptor for PageAlertViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328B38);
  }
  return result;
}

uint64_t sub_1BC970(uint64_t a1)
{
  return sub_1BD7CC(a1, type metadata accessor for PageView, sub_1B6A90);
}

uint64_t sub_1BC988(uint64_t a1)
{
  return sub_1BD7CC(a1, type metadata accessor for PageView, sub_1B6FDC);
}

unint64_t sub_1BC99C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328B70;
  if (!qword_328B70)
  {
    v1 = sub_667D0(&qword_328B68);
    sub_1BCA20();
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328B70);
  }
  return result;
}

unint64_t sub_1BCA20()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_328B78;
  if (!qword_328B78)
  {
    v1 = sub_667D0(&qword_328B80);
    v2[0] = type metadata accessor for ContextActionMenuView(255);
    v2[1] = sub_648E0(&qword_3265D0, type metadata accessor for ContextActionMenuView, (uint64_t)&protocol conformance descriptor for ContextActionMenuView);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.referenceId(_:)>>, 1);
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328B78);
  }
  return result;
}

uint64_t sub_1BCAE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.analyticsVisibilityManager.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1BCB08(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.analyticsVisibilityManager.setter(v1);
}

uint64_t sub_1BCB30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.exposureCollector.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1BCB58()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_1BCB8C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = (int *)type metadata accessor for PageView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v46 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for ScrollViewProxy(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v47 = v5;
  v48 = v4;
  v45 = *(_QWORD *)(v5 + 64);
  v49 = v0;
  v7 = (_QWORD *)(v0 + ((v3 + 16) & ~v3));
  swift_release(*v7);
  v8 = (_QWORD *)((char *)v7 + v1[5]);
  v9 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)((char *)v7 + v1[6]);
  v12 = sub_5C154(&qword_320270);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for IntentDispatchState(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  sub_64FFC(*(_QWORD *)((char *)v7 + v1[7]), *((_BYTE *)v7 + v1[7] + 8));
  sub_794D8(*(id *)((char *)v7 + v1[8]), *((_BYTE *)v7 + v1[8] + 8));
  v15 = (_QWORD *)((char *)v7 + v1[9]);
  v16 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = (_QWORD *)((char *)v7 + v1[10]);
  swift_release(*v18);
  swift_release(v18[1]);
  v19 = (char *)v18 + *(int *)(sub_5C154(&qword_323090) + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v19 + 1));
  v20 = (int *)type metadata accessor for Page(0);
  v21 = &v19[v20[5]];
  v22 = type metadata accessor for LocalizerRequest(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (!v24(v21, 1, v22))
    (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
  v25 = &v19[v20[6]];
  if (!v24(v25, 1, v22))
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v26 = &v19[v20[9]];
  v27 = type metadata accessor for ToolbarPrincipalType(0);
  v28 = *(_QWORD *)(v27 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[10]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[13]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[14] + 8]);
  v29 = &v19[v20[15]];
  v30 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[16]]);
  v31 = &v19[v20[17]];
  v32 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[19]]);
  swift_release(*(_QWORD *)&v19[v20[20]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[22] + 8]);
  v33 = &v19[v20[23]];
  v34 = *((_QWORD *)v33 + 1);
  if (v34)
  {
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(*((_QWORD *)v33 + 4));
  }
  v35 = (_QWORD *)((char *)v7 + v1[11]);
  swift_release(*v35);
  swift_release(v35[1]);
  v36 = (char *)v35 + *(int *)(sub_5C154(&qword_3230B8) + 32);
  v37 = type metadata accessor for BooksAlertAction(0);
  v38 = *(_QWORD *)(v37 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v37);
  swift_release(*(_QWORD *)((char *)v7 + v1[12] + 8));
  v39 = (char *)v7 + v1[13];
  v40 = type metadata accessor for NavigationBarTransitionInfo(0);
  v41 = *(_QWORD *)(v40 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
  v42 = (((v3 + 16) & ~v3) + v46 + v6) & ~v6;
  v43 = sub_5C154(&qword_328968);
  swift_release(*(_QWORD *)&v39[*(int *)(v43 + 28)]);
  swift_release(*(_QWORD *)((char *)v7 + v1[14] + 16));
  swift_release(*(_QWORD *)((char *)v7 + v1[15]));
  swift_release(*(_QWORD *)((char *)v7 + v1[16]));
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49 + v42, v48);
  return swift_deallocObject(v49, v42 + v45, v3 | v6 | 7);
}

uint64_t sub_1BD040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for PageView(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return sub_1B5614(a1, v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_1BD0AC()
{
  return sub_1BDC90(sub_1B5964);
}

unint64_t sub_1BD0B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328BD0;
  if (!qword_328BD0)
  {
    v1 = sub_667D0(&qword_323D48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_328BD0);
  }
  return result;
}

void sub_1BD118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageView(0) - 8) + 80);
  sub_1B5C78(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_1BD164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328BD8;
  if (!qword_328BD8)
  {
    v1 = sub_667D0(&qword_320278);
    sub_648E0(&qword_328BE0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDispatchState, (uint64_t)&protocol conformance descriptor for IntentDispatchState);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_328BD8);
  }
  return result;
}

uint64_t sub_1BD1E4(uint64_t a1)
{
  return sub_1BD7CC(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ScrollViewProxy, sub_1402B8);
}

unint64_t sub_1BD1F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;

  result = qword_328C00;
  if (!qword_328C00)
  {
    v1 = sub_667D0(&qword_328C08);
    v4 = sub_667D0(&qword_328C10);
    v5 = (void *)type metadata accessor for BaseObjectGraph(255);
    v6 = sub_1BD2F8();
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(with:implementations:)>>, 1);
    v2 = sub_667D0(&qword_328C30);
    v3 = sub_67060(&qword_328C38, &qword_328C30, (uint64_t)&protocol conformance descriptor for ShelfPage<A, B>);
    v4 = v2;
    v5 = &type metadata for Bool;
    v6 = v3;
    v7 = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328C00);
  }
  return result;
}

unint64_t sub_1BD2F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328C18;
  if (!qword_328C18)
  {
    v1 = sub_667D0(&qword_328C10);
    sub_67060(&qword_328C20, &qword_328C28, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328C18);
  }
  return result;
}

uint64_t sub_1BD398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1BD3F8(uint64_t a1)
{
  return sub_1BD7CC(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ScrollViewProxy, sub_1402D4);
}

uint64_t sub_1BD40C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B7764(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1BD414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328C90;
  if (!qword_328C90)
  {
    v1 = sub_667D0(&qword_328C98);
    sub_648E0(&qword_328CA0, type metadata accessor for ListShelfView, (uint64_t)&protocol conformance descriptor for ListShelfView);
    sub_67060(&qword_323EC8, &qword_323ED0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328C90);
  }
  return result;
}

unint64_t sub_1BD4B0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_328CB0;
  if (!qword_328CB0)
  {
    v1 = sub_667D0(&qword_328C68);
    v2[0] = sub_667D0(&qword_328C58);
    v2[1] = type metadata accessor for PlainListStyle(255);
    v2[2] = sub_67060(&qword_328CA8, &qword_328C58, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v2[3] = &protocol witness table for PlainListStyle;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    sub_67060(&qword_327748, &qword_327750, (uint64_t)&protocol conformance descriptor for _CoordinateSpaceModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328CB0);
  }
  return result;
}

uint64_t sub_1BD594@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInList.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BD5C0(unsigned __int8 *a1)
{
  return EnvironmentValues.isInList.setter(*a1);
}

uint64_t sub_1BD5E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1B7AF4(a1);
}

uint64_t sub_1BD5F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for PageView(0);
  return sub_1B79C8(a1, a2);
}

uint64_t sub_1BD644()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1BD668(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = sub_5C154(&qword_3239A8);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_1BD6C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for PageView(0);
  return sub_1B7F30(a1, a2);
}

unint64_t sub_1BD718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328CD8;
  if (!qword_328CD8)
  {
    v1 = sub_667D0(&qword_328CD0);
    sub_67060(&qword_328CE0, &qword_328CE8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_648E0((unint64_t *)&qword_328CF0, type metadata accessor for ShelfBackgroundViewModifier, (uint64_t)&protocol conformance descriptor for ShelfBackgroundViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328CD8);
  }
  return result;
}

uint64_t sub_1BD7B8(uint64_t a1)
{
  return sub_1BD7CC(a1, type metadata accessor for PageView, sub_1B8338);
}

uint64_t sub_1BD7CC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_1BD81C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v1 = (int *)type metadata accessor for PageView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v42 = *(_QWORD *)(v2 + 64);
  v43 = v0;
  v5 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  v6 = (_QWORD *)(v0 + v4 + v1[5]);
  v7 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v5 + v1[6]);
  v10 = sub_5C154(&qword_320270);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for IntentDispatchState(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  sub_64FFC(*(_QWORD *)(v5 + v1[7]), *(_BYTE *)(v5 + v1[7] + 8));
  sub_794D8(*(id *)(v5 + v1[8]), *(_BYTE *)(v5 + v1[8] + 8));
  v13 = (_QWORD *)(v5 + v1[9]);
  v14 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(v5 + v1[10]);
  swift_release(*v16);
  swift_release(v16[1]);
  v17 = (char *)v16 + *(int *)(sub_5C154(&qword_323090) + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v17 + 1));
  v18 = (int *)type metadata accessor for Page(0);
  v19 = &v17[v18[5]];
  v20 = type metadata accessor for LocalizerRequest(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (!v22(v19, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
  v23 = &v17[v18[6]];
  if (!v22(v23, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v24 = &v17[v18[9]];
  v25 = type metadata accessor for ToolbarPrincipalType(0);
  v26 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[v18[10]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[v18[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[v18[13]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[v18[14] + 8]);
  v27 = &v17[v18[15]];
  v28 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[v18[16]]);
  v29 = &v17[v18[17]];
  v30 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[v18[19]]);
  swift_release(*(_QWORD *)&v17[v18[20]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[v18[22] + 8]);
  v31 = &v17[v18[23]];
  v32 = *((_QWORD *)v31 + 1);
  if (v32)
  {
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(*((_QWORD *)v31 + 4));
  }
  v33 = (_QWORD *)(v5 + v1[11]);
  swift_release(*v33);
  swift_release(v33[1]);
  v34 = (char *)v33 + *(int *)(sub_5C154(&qword_3230B8) + 32);
  v35 = type metadata accessor for BooksAlertAction(0);
  v36 = *(_QWORD *)(v35 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
  swift_release(*(_QWORD *)(v5 + v1[12] + 8));
  v37 = v5 + v1[13];
  v38 = type metadata accessor for NavigationBarTransitionInfo(0);
  v39 = *(_QWORD *)(v38 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  v40 = sub_5C154(&qword_328968);
  swift_release(*(_QWORD *)(v37 + *(int *)(v40 + 28)));
  swift_release(*(_QWORD *)(v5 + v1[14] + 16));
  swift_release(*(_QWORD *)(v5 + v1[15]));
  swift_release(*(_QWORD *)(v5 + v1[16]));
  return swift_deallocObject(v43, v4 + v42, v3 | 7);
}

uint64_t sub_1BDC84()
{
  return sub_1BDC90(sub_1B899C);
}

uint64_t sub_1BDC90(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

unint64_t sub_1BDCD4()
{
  unint64_t result;

  result = qword_328CF8;
  if (!qword_328CF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_328CF8);
  }
  return result;
}

uint64_t sub_1BDD20@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B8B58(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), a2);
}

uint64_t sub_1BDD50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.hostingViewBarType.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BDD80()
{
  return sub_67060(&qword_328D18, &qword_328D20, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

BOOL static NavigationBarStyle.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v5;

  v5 = (a4 & 1) == 0 && a1 == a3;
  if ((a2 & 1) != 0)
    return a4 & 1;
  else
    return v5;
}

uint64_t sub_1BDDC8(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0)
    return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(_DWORD)result;
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationBarStyle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NavigationBarStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1BDE40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BDE5C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarStyle()
{
  return &type metadata for NavigationBarStyle;
}

_QWORD *sub_1BDE8C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  return dispatch thunk of ComponentModel.id.getter(a2, v3, v4);
}

uint64_t sub_1BDED0()
{
  return EnvironmentValues.libraryAssetStateObserverProvider.getter();
}

uint64_t sub_1BDEF0(uint64_t a1)
{
  _BYTE v2[40];

  sub_5E1A4(a1, (uint64_t)v2, &qword_3240F0);
  return EnvironmentValues.libraryAssetStateObserverProvider.setter(v2);
}

uint64_t sub_1BDF2C()
{
  return EnvironmentValues._dataStack.getter();
}

uint64_t sub_1BDF4C(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for DataStack(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return EnvironmentValues._dataStack.setter(v5);
}

uint64_t ListShelfView.init(page:shelfIndex:objectGraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v9 = type metadata accessor for DataStackID(0, a5);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ListShelfView(0);
  v13 = a4 + v12[8];
  *(_QWORD *)v13 = swift_getKeyPath("ا\r");
  *(_BYTE *)(v13 + 8) = 0;
  v14 = (_QWORD *)(a4 + v12[9]);
  *v14 = swift_getKeyPath(&unk_264928);
  v15 = sub_5C154(&qword_3202B8);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = a4 + v12[10];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_264958);
  *(_BYTE *)(v16 + 40) = 0;
  static DataStackID.additionalEventData.getter();
  AppAnalyticsData.init(_:)(v11);
  v17 = a4 + v12[12];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_264988);
  *(_BYTE *)(v17 + 40) = 0;
  sub_5E1A4(a1, a4, &qword_323090);
  *(_QWORD *)(a4 + v12[5]) = a2;
  *(_QWORD *)(a4 + v12[6]) = a3;
  v18 = type metadata accessor for PaginationController();
  swift_retain(a3);
  BaseObjectGraph.inject<A>(_:)(&v21, v18, v18);
  swift_release(a3);
  result = sub_5E09C(a1, &qword_323090);
  *(_QWORD *)(a4 + v12[7]) = v21;
  return result;
}

uint64_t type metadata accessor for ListShelfView(uint64_t a1)
{
  uint64_t result;

  result = qword_328DC8;
  if (!qword_328DC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListShelfView);
  return result;
}

uint64_t sub_1BE19C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Page(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Shelf(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v13, v14);
  v15 = *(_QWORD *)&v8[*(int *)(v6 + 52)];
  swift_bridgeObjectRetain(v15);
  sub_6685C((uint64_t)v8, type metadata accessor for Page);
  result = type metadata accessor for ListShelfView(0);
  v17 = *(_QWORD *)(v1 + *(int *)(result + 20));
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v17 >= *(_QWORD *)(v15 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_5E11C(v15+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v17, (uint64_t)v12, type metadata accessor for Shelf);
  swift_bridgeObjectRelease(v15);
  sub_5E1A4((uint64_t)&v12[*(int *)(v9 + 76)], (uint64_t)v5, (uint64_t *)&unk_326100);
  v18 = type metadata accessor for SectionData(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v5, 1, v18);
  if ((_DWORD)result)
  {
LABEL_6:
    sub_66F14((uint64_t)v5, a1, (uint64_t *)&unk_326100);
    return sub_6685C((uint64_t)v12, type metadata accessor for Shelf);
  }
  if (!(v17 >> 31))
  {
    SectionData.exposureIndex.setter(v17);
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t ListShelfView.body.getter@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OpaqueTypeConformance2;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __n128 v67;
  uint64_t KeyPath;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  void (*v75)(char *, uint64_t, __n128);
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;

  v3 = v2;
  v99 = a1;
  v4 = type metadata accessor for DataStackID(0, a2);
  v97 = *(_QWORD *)(v4 - 8);
  v98 = v4;
  __chkstk_darwin(v4);
  v96 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v6);
  v94 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v95 = (char *)&v82 - v9;
  v10 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v10);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v82 - v14;
  v100 = sub_5C154(&qword_328D28);
  v82 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_5C154(&qword_328D30);
  v83 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_5C154(&qword_328D38);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v104 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_5C154(&qword_328D40);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v90 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_5C154(&qword_328D48);
  __chkstk_darwin(v84);
  v92 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_5C154(&qword_328D50);
  __chkstk_darwin(v85);
  v88 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v86 = (uint64_t)&v82 - v24;
  v25 = type metadata accessor for Page(0);
  __chkstk_darwin(v25);
  v27 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Shelf(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (uint64_t *)((char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v32, v33);
  v34 = *(_QWORD *)&v27[*(int *)(v25 + 52)];
  swift_bridgeObjectRetain(v34);
  sub_6685C((uint64_t)v27, type metadata accessor for Page);
  result = type metadata accessor for ListShelfView(0);
  v36 = *(int *)(result + 20);
  v102 = v3;
  v37 = *(_QWORD *)(v3 + v36);
  if ((v37 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v37 >= *(_QWORD *)(v34 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sub_5E11C(v34+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v37, (uint64_t)v31, type metadata accessor for Shelf);
  swift_bridgeObjectRelease(v34);
  __chkstk_darwin(v38);
  v39 = v102;
  *(&v82 - 2) = (uint64_t)v31;
  *(&v82 - 1) = v39;
  v40 = sub_5C154(&qword_328D58);
  v41 = sub_67060(&qword_328D60, &qword_328D58, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v42 = Section<>.init(content:)(sub_1C166C, &v82 - 4, v40, v41);
  v43 = static VerticalEdge.Set.all.getter(v42);
  v44 = sub_1C1674();
  v45 = v100;
  View.listSectionSeparator(_:edges:)(2, v43, v100, v44);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v45);
  sub_5E1A4((uint64_t)v31 + *(int *)(v28 + 36), (uint64_t)v12, &qword_323B40);
  v47 = type metadata accessor for Metrics.Location(0, v46);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v12, 1, v47) == 1)
  {
    static Metrics.Location.genericSection.getter();
    sub_5E09C((uint64_t)v12, &qword_323B40);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v15, v12, v47);
  }
  v50 = (uint64_t)v95;
  v49 = v96;
  v51 = (uint64_t)v94;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v15, 0, 1, v47);
  v105 = v100;
  v106 = v44;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.listSectionSeparator(_:edges:)>>, 1);
  v53 = v103;
  v54 = v101;
  View.figaroLocation(_:)(v15, v103, OpaqueTypeConformance2);
  sub_5E09C((uint64_t)v15, &qword_323B40);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v54, v53);
  sub_1BE19C(v50);
  v55 = *v31;
  v56 = v31[1];
  swift_bridgeObjectRetain(v56);
  DataStackID.init(stringLiteral:)(v55, v56);
  v57 = sub_5C154(&qword_321F20);
  v58 = swift_allocObject(v57, 80, 7);
  *(_OWORD *)(v58 + 16) = xmmword_258070;
  v59 = (_QWORD *)(v58 + 32);
  sub_5E1A4(v50, v51, (uint64_t *)&unk_326100);
  v60 = type metadata accessor for SectionData(0);
  v61 = *(_QWORD *)(v60 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v51, 1, v60) == 1)
  {
    sub_5E09C(v51, (uint64_t *)&unk_326100);
    *(_OWORD *)v59 = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(_OWORD *)(v58 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v58 + 56) = v60;
    *(_QWORD *)(v58 + 64) = sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    *(_QWORD *)(v58 + 72) = sub_648E0((unint64_t *)&unk_322500, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    v62 = sub_668BC(v59);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v61 + 32))(v62, v51, v60);
  }
  v105 = v103;
  v106 = OpaqueTypeConformance2;
  v63 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.figaroLocation(_:)>>, 1);
  v64 = v89;
  v65 = v90;
  v66 = v104;
  View.appAnalyticsData(_:for:)(v58, v49, v89, v63);
  v67 = swift_bridgeObjectRelease(v58);
  (*(void (**)(char *, uint64_t, __n128))(v97 + 8))(v49, v98, v67);
  sub_5E09C(v50, (uint64_t *)&unk_326100);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v66, v64);
  KeyPath = swift_getKeyPath(&unk_2649C0);
  v70 = *v31;
  v69 = v31[1];
  v72 = v91;
  v71 = (uint64_t)v92;
  v73 = v93;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v92, v65, v93);
  v74 = (uint64_t *)(v71 + *(int *)(v84 + 36));
  *v74 = KeyPath;
  v74[1] = v70;
  v74[2] = v69;
  v75 = *(void (**)(char *, uint64_t, __n128))(v72 + 8);
  v76 = swift_bridgeObjectRetain(v69);
  v75(v65, v73, v76);
  v78 = *v31;
  v77 = v31[1];
  v79 = v88;
  sub_5E1A4(v71, v88, &qword_328D48);
  v80 = (_QWORD *)(v79 + *(int *)(v85 + 52));
  *v80 = v78;
  v80[1] = v77;
  swift_bridgeObjectRetain(v77);
  sub_5E09C(v71, &qword_328D48);
  v81 = v86;
  sub_66F14(v79, v86, &qword_328D50);
  sub_66F14(v81, v99, &qword_328D50);
  return sub_6685C((uint64_t)v31, type metadata accessor for Shelf);
}

uint64_t sub_1BEB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  char v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t OpaqueTypeConformance2;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t KeyPath;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  void *v168;
  uint64_t v169;
  char *v170;
  uint64_t *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v166 = a1;
  v157 = a3;
  v4 = type metadata accessor for ListShelfView(0);
  v141 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v142 = v5;
  v143 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_5C154(&qword_323EE0);
  __chkstk_darwin(v144);
  v159 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_5C154(&qword_328E28);
  v146 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v145 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_5C154(&qword_328E30);
  __chkstk_darwin(v150);
  v151 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v9);
  v124 = (uint64_t)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_31F480);
  v12 = __chkstk_darwin(v11);
  v125 = (uint64_t)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for ImpressionsCalculator.Configuration(0, v12);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v137 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_5C154(&qword_329DD0);
  v127 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v135 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_5C154(&qword_323DA8);
  v131 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v126 = (char *)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v130 = (char *)&v123 - v18;
  v19 = sub_5C154(&qword_323C00);
  __chkstk_darwin(v19);
  v136 = (uint64_t)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = type metadata accessor for ContentUnavailableComponentModel(0);
  v134 = *(_QWORD *)(KeyPath - 8);
  __chkstk_darwin(KeyPath);
  v133 = (char *)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v132 = (char *)&v123 - v23;
  v24 = sub_5C154(&qword_328E38);
  __chkstk_darwin(v24);
  v156 = (uint64_t)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v163 = (uint64_t)&v123 - v27;
  v160 = sub_5C154(&qword_323B48);
  __chkstk_darwin(v160);
  v29 = (char *)&v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_328E40);
  v164 = *(_QWORD *)(v30 - 8);
  v165 = v30;
  __chkstk_darwin(v30);
  v153 = (char *)&v123 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v154 = (char *)&v123 - v33;
  __chkstk_darwin(v34);
  v161 = (char *)&v123 - v35;
  __chkstk_darwin(v36);
  v162 = (char *)&v123 - v37;
  v152 = (char *)type metadata accessor for DataStack(0);
  v148 = *((_QWORD *)v152 - 1);
  __chkstk_darwin(v152);
  v39 = (char *)&v123 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Shelf(0);
  v139 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v42 = (char *)&v123 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v123 - v44;
  v46 = a2 + *(int *)(v4 + 32);
  v47 = *(id *)v46;
  v48 = *(_BYTE *)(v46 + 8);
  sub_AAFF4(*(id *)v46, v48);
  v49 = (void *)sub_77EB0(v47, v48);
  sub_794D8(v47, v48);
  sub_78BF0((uint64_t)v39);
  v50 = a2;
  sub_78C1C((uint64_t)&v173);
  v51 = sub_1BF9EC();
  v52 = v166;
  sub_5E11C(v166, (uint64_t)v42, type metadata accessor for Shelf);
  v53 = v52;
  v54 = *(_QWORD *)(v52 + *(int *)(v40 + 64));
  v168 = v49;
  v169 = v53;
  v170 = v39;
  v171 = &v173;
  v172 = v51;
  swift_bridgeObjectRetain(v54);
  v55 = sub_1DD9D8((void (*)(_QWORD *__return_ptr, uint64_t))sub_F1320, (uint64_t)v167, v54);
  swift_bridgeObjectRelease(v54);
  v56 = *(int *)(v40 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)&v42[v56]);
  *(_QWORD *)&v42[v56] = v55;
  sub_5E160((uint64_t)v42, (uint64_t)v45, type metadata accessor for Shelf);
  swift_bridgeObjectRelease(v51);

  sub_5E09C((uint64_t)&v173, &qword_320300);
  v57 = v39;
  v58 = v50;
  (*(void (**)(char *, char *))(v148 + 8))(v57, v152);
  v59 = *(_QWORD *)&v45[*(int *)(v40 + 64)];
  swift_bridgeObjectRetain(v59);
  sub_6685C((uint64_t)v45, type metadata accessor for Shelf);
  v60 = sub_1BFC24((uint64_t)v29);
  v61 = static VerticalEdge.Set.all.getter(v60);
  v62 = sub_E5DC4();
  v63 = v161;
  v148 = v62;
  View.listRowSeparator(_:edges:)(2, v61, v160);
  v152 = v29;
  sub_5E09C((uint64_t)v29, &qword_323B48);
  v147 = *(void (**)(char *, char *, uint64_t))(v164 + 32);
  v147(v162, v63, v165);
  if (!*(_QWORD *)(v59 + 16))
  {
    v64 = v45;
    v65 = (uint64_t)v133;
    v66 = (uint64_t)v132;
    v67 = v135;
    v68 = v137;
    v69 = v158;
    v70 = v136;
    sub_5E1A4(v166 + *(int *)(v40 + 60), v136, &qword_323C00);
    v71 = KeyPath;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v70, 1, KeyPath) != 1)
    {
      swift_bridgeObjectRelease(v59);
      sub_5E160(v70, v66, type metadata accessor for ContentUnavailableComponentModel);
      v175 = v71;
      v176 = sub_648E0(&qword_320030, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
      v94 = sub_668BC(&v173);
      sub_5E11C(v66, (uint64_t)v94, type metadata accessor for ContentUnavailableComponentModel);
      v95 = sub_F0B00();
      ComponentView.init(_:content:)(&v173, sub_1BFF44, 0, &type metadata for _ComponentContentByType, v95);
      v96 = sub_5E11C(v66, v65, type metadata accessor for ContentUnavailableComponentModel);
      static ImpressionsCalculator.Configuration.half.getter(v96);
      v97 = v124;
      sub_5E1A4(v65 + *(int *)(v71 + 44), v124, &qword_321EA8);
      v98 = v97;
      v99 = v125;
      sub_66F14(v98, v125, &qword_31F480);
      v100 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
      v101 = v126;
      View.impressionable(_:configuration:position:definesParentContext:)(v99, v68, 0, 1, 0, v69, v100);
      sub_5E09C(v99, &qword_31F480);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v68, v129);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v67, v69);
      sub_6685C(v65, type metadata accessor for ContentUnavailableComponentModel);
      v102 = v131;
      v103 = v130;
      v104 = v149;
      (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v130, v101, v149);
      v105 = v151;
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v151, v103, v104);
      swift_storeEnumTagMultiPayload(v105, v150, 0);
      v173 = v69;
      v174 = v100;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
      v107 = sub_1C4078();
      v93 = v163;
      _ConditionalContent<>.init(storage:)(v105, v104, v155, OpaqueTypeConformance2, v107);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v104);
      sub_6685C(v66, type metadata accessor for ContentUnavailableComponentModel);
      goto LABEL_6;
    }
    sub_5E09C(v70, &qword_323C00);
    v45 = v64;
  }
  v173 = v59;
  swift_bridgeObjectRetain(v59);
  v72 = sub_5C154(&qword_323EE8);
  v73 = sub_67060(&qword_323EF0, &qword_323EE8, (uint64_t)&protocol conformance descriptor for [A]);
  IndexedRandomAccessCollection.init(_:)(&v173, v72, v73);
  KeyPath = swift_getKeyPath(&unk_264A80);
  v74 = v143;
  sub_5E11C(v58, v143, type metadata accessor for ListShelfView);
  sub_5E11C(v166, (uint64_t)v45, type metadata accessor for Shelf);
  v75 = *(unsigned __int8 *)(v141 + 80);
  v76 = (v75 + 16) & ~v75;
  v77 = (v142 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
  v78 = *(unsigned __int8 *)(v139 + 80);
  v79 = (v78 + v77 + 8) & ~v78;
  v80 = swift_allocObject(&unk_2F1E40, v79 + v140, v75 | v78 | 7);
  sub_5E160(v74, v80 + v76, type metadata accessor for ListShelfView);
  *(_QWORD *)(v80 + v77) = v59;
  sub_5E160((uint64_t)v45, v80 + v79, type metadata accessor for Shelf);
  v81 = swift_allocObject(&unk_2F1E68, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_1C3FC4;
  *(_QWORD *)(v81 + 24) = v80;
  v82 = sub_5C154(&qword_328E48);
  v83 = sub_67060(&qword_323EF8, &qword_323EE0, (uint64_t)&protocol conformance descriptor for IndexedRandomAccessCollection<A>);
  v84 = sub_67060(&qword_328E50, &qword_328E48, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v85 = v145;
  ForEach<>.init(_:id:content:)(v159, KeyPath, sub_F0BCC, v81, v144, v82, v83, &protocol witness table for AnyHashable, v84);
  v86 = v146;
  v87 = v151;
  v88 = v155;
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v151, v85, v155);
  swift_storeEnumTagMultiPayload(v87, v150, 1);
  v89 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
  v173 = v158;
  v174 = v89;
  v90 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  v91 = sub_1C4078();
  v92 = v163;
  _ConditionalContent<>.init(storage:)(v87, v149, v88, v90, v91);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v88);
  v93 = v92;
LABEL_6:
  v108 = (uint64_t)v152;
  v109 = sub_1C0F10((uint64_t)v152);
  v110 = static VerticalEdge.Set.all.getter(v109);
  v111 = v154;
  View.listRowSeparator(_:edges:)(2, v110, v160);
  sub_5E09C(v108, &qword_323B48);
  v112 = v161;
  v113 = v165;
  v147(v161, v111, v165);
  v114 = v164;
  v115 = *(void (**)(char *, char *, uint64_t))(v164 + 16);
  v116 = v162;
  v115(v111, v162, v113);
  v117 = v156;
  sub_5E1A4(v93, v156, &qword_328E38);
  v118 = v153;
  v115(v153, v112, v113);
  v119 = v157;
  v115(v157, v111, v113);
  v120 = sub_5C154(&qword_328E60);
  sub_5E1A4(v117, (uint64_t)&v119[*(int *)(v120 + 48)], &qword_328E38);
  v115(&v119[*(int *)(v120 + 64)], v118, v113);
  v121 = *(void (**)(char *, uint64_t))(v114 + 8);
  v121(v112, v113);
  sub_5E09C(v163, &qword_328E38);
  v121(v116, v113);
  v121(v118, v113);
  sub_5E09C(v117, &qword_328E38);
  return ((uint64_t (*)(char *, uint64_t))v121)(v111, v113);
}

_QWORD *sub_1BF9EC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  void (*v11)(char *, char *, uint64_t);
  unint64_t v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SectionData(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - v8;
  type metadata accessor for ListShelfView(0);
  v10 = (_QWORD *)AppAnalyticsData.wrappedValue.getter();
  sub_1BE19C((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_5E09C((uint64_t)v2, (uint64_t *)&unk_326100);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
    v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v11(v6, v9, v3);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_573F0(0, v10[2] + 1, 1, v10);
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
      v10 = sub_573F0((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v18 = v3;
    v19 = sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    v20 = sub_648E0((unint64_t *)&unk_322500, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    v14 = (char *)sub_668BC(&v17);
    v11(v14, v6, v3);
    v10[2] = v13 + 1;
    sub_F1344(&v17, &v10[6 * v13 + 4]);
    v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v6, v3);
    v15(v9, v3);
  }
  return v10;
}

uint64_t sub_1BFC24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32[2];
  _QWORD v33[5];
  _QWORD v34[5];

  v31 = a1;
  v2 = sub_5C154(&qword_329DD0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_323B48);
  __chkstk_darwin(v30);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Page(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Shelf(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v15, v16);
  v17 = *(_QWORD *)&v10[*(int *)(v8 + 52)];
  swift_bridgeObjectRetain(v17);
  sub_6685C((uint64_t)v10, type metadata accessor for Page);
  result = type metadata accessor for ListShelfView(0);
  v19 = *(_QWORD *)(v1 + *(int *)(result + 20));
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v19 >= *(_QWORD *)(v17 + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_5E11C(v17+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v19, (uint64_t)v14, type metadata accessor for Shelf);
  swift_bridgeObjectRelease(v17);
  sub_11F098((uint64_t)&v14[*(int *)(v11 + 52)], (uint64_t)v33);
  sub_6685C((uint64_t)v14, type metadata accessor for Shelf);
  sub_5E1A4((uint64_t)v33, (uint64_t)v32, &qword_323F40);
  sub_5DC98(v32, (uint64_t)v34);
  sub_11F0D4(v33);
  sub_5E0D8((uint64_t)v34, (uint64_t)v33);
  v20 = sub_F0B00();
  ComponentView.init(_:content:)(v33, sub_1C1230, 0, &type metadata for _ComponentContentByType, v20);
  sub_5E0D8((uint64_t)v34, (uint64_t)v33);
  v21 = sub_5C154(&qword_31EF38);
  v22 = sub_5C154(&qword_323F50);
  v23 = swift_dynamicCast(v32, v33, v21, v22, 6);
  if (v23)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v32);
  v24 = v23 ^ 1;
  KeyPath = swift_getKeyPath(&unk_264AD8);
  v26 = swift_getKeyPath(&unk_264B00);
  v27 = swift_getKeyPath(&unk_264B30);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v2);
  v28 = &v7[*(int *)(v30 + 36)];
  *(_QWORD *)v28 = KeyPath;
  v28[8] = 0;
  *((_QWORD *)v28 + 2) = v26;
  v28[24] = 0;
  *((_QWORD *)v28 + 4) = v27;
  v28[40] = 0;
  v28[41] = v24;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v34);
  return sub_66F14((uint64_t)v7, v31, &qword_323B48);
}

uint64_t sub_1BFF44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;

  KeyPath = swift_getKeyPath(&unk_264AB0);
  v3 = type metadata accessor for HostProxy(0);
  v4 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v5 = Environment.init<A>(_:)(v3, v3, v4);
  v9 = (unint64_t)KeyPath;
  v10 = 0;
  v11 = v5;
  v12 = v6 & 1;
  swift_retain(KeyPath);
  v7 = sub_1E7510(&v9, (uint64_t)&_swiftEmptyDictionarySingleton);
  swift_release_n(KeyPath, 2);
  result = swift_release(v5);
  *a1 = v7;
  return result;
}

uint64_t sub_1C0004@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t OpaqueTypeConformance2;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t DynamicType;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[32];
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v105 = a5;
  v92 = a4;
  v110 = a3;
  v91 = a1;
  v109 = a6;
  v7 = type metadata accessor for AutomationSemantics(0);
  v107 = *(_QWORD *)(v7 - 8);
  v108 = v7;
  __chkstk_darwin(v7);
  v106 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ListShelfView(0);
  v93 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v94 = v10;
  v95 = (uint64_t)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Page(0);
  __chkstk_darwin(v11);
  v90 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_329DD0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_323DD8);
  v86 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_5C154(&qword_323DD0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_5C154(&qword_328E68);
  __chkstk_darwin(v111);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_5C154(&qword_328E70);
  v97 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v96 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5C154(&qword_328E78);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v98 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5C154(&qword_328E80);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v99 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5C154(&qword_328E48);
  __chkstk_darwin(v26);
  v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E0D8((uint64_t)a2, (uint64_t)&v116);
  v29 = sub_F0B00();
  v85 = v16;
  ComponentView.init(_:content:)(&v116, sub_1C0904, 0, &type metadata for _ComponentContentByType, v29);
  sub_5E0D8((uint64_t)a2, (uint64_t)v112);
  v30 = sub_5C154(&qword_31EF38);
  v31 = sub_5C154(&qword_323F10);
  if ((swift_dynamicCast(&v113, v112, v30, v31, 6) & 1) != 0)
  {
    v33 = *((_QWORD *)&v114 + 1);
    v32 = v115;
    v84 = sub_66898(&v113, *((uint64_t *)&v114 + 1));
    *((_QWORD *)&v117 + 1) = v33;
    v118 = *(_QWORD *)(v32 + 8);
    v34 = sub_668BC(&v116);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v34, v84, v33);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v113);
  }
  else
  {
    v115 = 0;
    v113 = 0u;
    v114 = 0u;
    sub_5E09C((uint64_t)&v113, &qword_323F18);
    v116 = 0u;
    v117 = 0u;
    v118 = 0;
  }
  v35 = v110;
  sub_789DC((uint64_t)&v113);
  v36 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
  v37 = v85;
  View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)(&v116, &v113, v13, v36);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v113);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v37, v13);
  sub_5E09C((uint64_t)&v116, &qword_323F20);
  *(_QWORD *)&v116 = v13;
  *((_QWORD *)&v116 + 1) = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v116, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)>>, 1);
  v39 = v87;
  v40 = v91;
  View.figaroLocationPositionOverride(_:)(v91, v17, OpaqueTypeConformance2);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v19, v17);
  v42 = static Alignment.center.getter(v41);
  v44 = v43;
  v45 = (uint64_t)&v22[*(int *)(v111 + 36)];
  sub_1C0A98(v40, v92, v35, a2, v45);
  v46 = (uint64_t *)(v45 + *(int *)(sub_5C154(&qword_328E88) + 36));
  *v46 = v42;
  v46[1] = v44;
  (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v22, v39, v89);
  v47 = sub_5C154(&qword_323090);
  v48 = (uint64_t)v90;
  Binding.wrappedValue.getter(v47, v49);
  Page.intentToLoadMore.getter((uint64_t)&v116);
  sub_6685C(v48, type metadata accessor for Page);
  v50 = *((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v116);
  LOBYTE(v116) = v50 != 0;
  v51 = v95;
  sub_5E11C(v110, v95, type metadata accessor for ListShelfView);
  v52 = *(unsigned __int8 *)(v93 + 80);
  v53 = (v52 + 16) & ~v52;
  v54 = swift_allocObject(&unk_2F1E90, v53 + v94, v52 | 7);
  sub_5E160(v51, v54 + v53, type metadata accessor for ListShelfView);
  v55 = sub_1C444C();
  v56 = v96;
  v57 = v111;
  View.onChange<A>(of:initial:_:)(&v116, 0, sub_1C4420, v54, v111, &type metadata for Bool, v55, &protocol witness table for Bool);
  swift_release(v54);
  sub_5E09C((uint64_t)v22, &qword_328E68);
  v58 = a2[3];
  v59 = sub_66898(a2, v58);
  DynamicType = swift_getDynamicType(v59, v58, 1);
  v61 = _typeName(_:qualified:)(DynamicType, 0);
  v63 = v62;
  v64 = a2[3];
  v65 = a2[4];
  sub_66898(a2, v64);
  v66 = dispatch thunk of ComponentModel.id.getter(&v116, v64, v65);
  v67 = AnyHashable.description.getter(v66);
  v69 = v68;
  sub_5DCEC((uint64_t)&v116);
  *((_QWORD *)&v117 + 1) = &type metadata for String;
  *(_QWORD *)&v116 = v67;
  *((_QWORD *)&v116 + 1) = v69;
  v71 = *v105;
  v70 = v105[1];
  *((_QWORD *)&v114 + 1) = &type metadata for String;
  *(_QWORD *)&v113 = v71;
  *((_QWORD *)&v113 + 1) = v70;
  v72 = swift_bridgeObjectRetain(v70);
  v73 = v106;
  static AutomationSemantics.shelfItem(itemKind:id:parentId:)(v61, v63, &v116, &v113, v72);
  swift_bridgeObjectRelease(v63);
  sub_5E09C((uint64_t)&v113, &qword_31F8B0);
  sub_5E09C((uint64_t)&v116, &qword_31F8B0);
  *(_QWORD *)&v116 = v57;
  *((_QWORD *)&v116 + 1) = &type metadata for Bool;
  *(_QWORD *)&v117 = v55;
  *((_QWORD *)&v117 + 1) = &protocol witness table for Bool;
  v74 = swift_getOpaqueTypeConformance2(&v116, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v75 = v98;
  v76 = v101;
  View.automationSemantics(_:)(v73, v101, v74);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v73, v108);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v56, v76);
  *(_QWORD *)&v116 = v76;
  *((_QWORD *)&v116 + 1) = v74;
  v77 = swift_getOpaqueTypeConformance2(&v116, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
  v78 = v99;
  v79 = v102;
  View.shelfItemDebugBorder()(v102, v77);
  v80.n128_f64[0] = (*(double (**)(char *, uint64_t))(v100 + 8))(v75, v79);
  *(_QWORD *)v28 = static HorizontalAlignment.center.getter(v80);
  *((_QWORD *)v28 + 1) = 0;
  v28[16] = 1;
  v81 = sub_5C154(&qword_328EA0);
  (*(void (**)(char *, char *, uint64_t))(v103 + 32))(&v28[*(int *)(v81 + 44)], v78, v104);
  return sub_66F14((uint64_t)v28, v109, &qword_328E48);
}

uint64_t sub_1C0904@<X0>(uint64_t *a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  char v16;
  uint64_t v17;
  char v18;

  KeyPath = swift_getKeyPath(&unk_264AB0);
  v3 = type metadata accessor for HostProxy(0);
  v4 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v5 = Environment.init<A>(_:)(v3, v3, v4);
  v7 = v6;
  v8 = (void *)swift_getKeyPath("ا\r");
  v9 = swift_getKeyPath(&unk_264B90);
  v10 = (void *)swift_getKeyPath("ا\r");
  v15 = (unint64_t)KeyPath;
  v16 = 0;
  v17 = v5;
  v18 = v7 & 1;
  swift_retain(KeyPath);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  v11 = sub_1E7510(&v15, (uint64_t)&_swiftEmptyDictionarySingleton);
  swift_release(KeyPath);
  v12 = sub_1E783C(v8, 0, v9, 0, v11);
  swift_release(v9);
  swift_release(v8);
  swift_bridgeObjectRelease(v11);
  v13 = sub_1E76C8(v10, 0, v12);
  swift_bridgeObjectRelease(v12);
  swift_release(KeyPath);
  swift_release(v9);
  swift_release(v8);
  swift_release_n(v10, 2);
  result = swift_release(v5);
  *a1 = v13;
  return result;
}

uint64_t sub_1C0A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t@<X8>);
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;

  v28 = a1;
  v30 = a5;
  v8 = sub_5C154(&qword_31F480);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for ImpressionsCalculator.Configuration(0, v9);
  v12 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ListShelfView(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  sub_5E11C(a3, (uint64_t)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ListShelfView);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(&unk_2F1EB8, v19 + v17, v18 | 7);
  *(_QWORD *)(v20 + 16) = v28;
  *(_QWORD *)(v20 + 24) = a2;
  sub_5E160((uint64_t)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for ListShelfView);
  swift_bridgeObjectRetain(a2);
  static ImpressionsCalculator.Configuration.half.getter(v21);
  v31 = sub_1C0C94;
  v32 = 0;
  v33 = sub_1C485C;
  v34 = v20;
  v22 = a4[3];
  v23 = a4[4];
  sub_66898(a4, v22);
  dispatch thunk of ViewModel.impressionMetrics.getter(v22, *(_QWORD *)(v23 + 8));
  v24 = sub_5C154(&qword_328EA8);
  v25 = sub_1C489C();
  View.impressionable(_:configuration:position:definesParentContext:)(v11, v14, 0, 1, 0, v24, v25);
  sub_5E09C((uint64_t)v11, &qword_31F480);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v29);
  return swift_release(v20);
}

void sub_1C0C94(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_31E718 != -1)
    swift_once(&qword_31E718, sub_1B8CEC);
  v2 = type metadata accessor for CoordinateSpace(0);
  v3 = sub_5240C(v2, (uint64_t)qword_346020);
  *(double *)a1 = GeometryProxy.frame(in:)(v3);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
}

uint64_t sub_1C0CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[5];

  v7 = type metadata accessor for Page(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + 16) - 5 <= a2
    && (v10 = sub_5C154(&qword_323090),
        Binding.wrappedValue.getter(v10, v11),
        Page.intentToLoadMore.getter((uint64_t)&v15),
        sub_6685C((uint64_t)v9, type metadata accessor for Page),
        v16))
  {
    sub_5DC98(&v15, (uint64_t)v17);
    v12 = type metadata accessor for ListShelfView(0);
    sub_16B2A4((uint64_t)v17, *(_QWORD *)(a4 + *(int *)(v12 + 24)));
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v17);
  }
  else
  {
    v14 = *(_QWORD *)(a4 + *(int *)(type metadata accessor for ListShelfView(0) + 28));
    result = swift_beginAccess(v14 + 16, v17, 1, 0);
    *(_BYTE *)(v14 + 16) = 1;
  }
  return result;
}

uint64_t sub_1C0E10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[5];
  _BYTE v14[24];

  v2 = type metadata accessor for Page(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ListShelfView(0);
  v6 = *(_QWORD *)(a1 + *(int *)(v5 + 28));
  result = swift_beginAccess(v6 + 16, v14, 0, 0);
  if (*(_BYTE *)(v6 + 16) == 1)
  {
    v8 = sub_5C154(&qword_323090);
    Binding.wrappedValue.getter(v8, v9);
    Page.intentToLoadMore.getter((uint64_t)&v11);
    result = sub_6685C((uint64_t)v4, type metadata accessor for Page);
    if (v12)
    {
      sub_5DC98(&v11, (uint64_t)v13);
      sub_16B2A4((uint64_t)v13, *(_QWORD *)(a1 + *(int *)(v5 + 24)));
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v13);
    }
  }
  return result;
}

uint64_t sub_1C0F10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32[2];
  _QWORD v33[5];
  _QWORD v34[5];

  v31 = a1;
  v2 = sub_5C154(&qword_329DD0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_323B48);
  __chkstk_darwin(v30);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Page(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Shelf(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_323090);
  Binding.wrappedValue.getter(v15, v16);
  v17 = *(_QWORD *)&v10[*(int *)(v8 + 52)];
  swift_bridgeObjectRetain(v17);
  sub_6685C((uint64_t)v10, type metadata accessor for Page);
  result = type metadata accessor for ListShelfView(0);
  v19 = *(_QWORD *)(v1 + *(int *)(result + 20));
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v19 >= *(_QWORD *)(v17 + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_5E11C(v17+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v19, (uint64_t)v14, type metadata accessor for Shelf);
  swift_bridgeObjectRelease(v17);
  sub_11F108((uint64_t)&v14[*(int *)(v11 + 56)], (uint64_t)v33);
  sub_6685C((uint64_t)v14, type metadata accessor for Shelf);
  sub_5E1A4((uint64_t)v33, (uint64_t)v32, &qword_323F40);
  sub_5DC98(v32, (uint64_t)v34);
  sub_11F4C8(v33);
  sub_5E0D8((uint64_t)v34, (uint64_t)v33);
  v20 = sub_F0B00();
  ComponentView.init(_:content:)(v33, sub_1C141C, 0, &type metadata for _ComponentContentByType, v20);
  sub_5E0D8((uint64_t)v34, (uint64_t)v33);
  v21 = sub_5C154(&qword_31EF38);
  v22 = sub_5C154(&qword_323F50);
  v23 = swift_dynamicCast(v32, v33, v21, v22, 6);
  if (v23)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v32);
  v24 = v23 ^ 1;
  KeyPath = swift_getKeyPath(&unk_264AD8);
  v26 = swift_getKeyPath(&unk_264B00);
  v27 = swift_getKeyPath(&unk_264B30);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v2);
  v28 = &v7[*(int *)(v30 + 36)];
  *(_QWORD *)v28 = KeyPath;
  v28[8] = 0;
  *((_QWORD *)v28 + 2) = v26;
  v28[24] = 0;
  *((_QWORD *)v28 + 4) = v27;
  v28[40] = 0;
  v28[41] = v24;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v34);
  return sub_66F14((uint64_t)v7, v31, &qword_323B48);
}

uint64_t sub_1C1230@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v2 = type metadata accessor for SeriesRoomListHeaderComponent(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - v6;
  v8 = type metadata accessor for DefaultHeaderComponent(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - v12;
  *v10 = swift_getKeyPath(&unk_264B60);
  v14 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v10, v14, 0);
  sub_5E160((uint64_t)v10, (uint64_t)v13, type metadata accessor for DefaultHeaderComponent);
  *v4 = swift_getKeyPath(&unk_264B60);
  swift_storeEnumTagMultiPayload(v4, v14, 0);
  v15 = (char *)v4 + *(int *)(v2 + 20);
  *(_QWORD *)v15 = swift_getKeyPath(&unk_2649C0);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  sub_5E160((uint64_t)v4, (uint64_t)v7, type metadata accessor for SeriesRoomListHeaderComponent);
  v16 = sub_1E7CF4((uint64_t)v13, (uint64_t)&_swiftEmptyDictionarySingleton);
  v17 = sub_1E7C34(v16);
  swift_bridgeObjectRelease(v16);
  v18 = sub_1E7CAC((uint64_t)v7, v17);
  swift_bridgeObjectRelease(v17);
  v19 = sub_1E7C90(v18);
  swift_bridgeObjectRelease(v18);
  sub_6685C((uint64_t)v7, type metadata accessor for SeriesRoomListHeaderComponent);
  result = sub_6685C((uint64_t)v13, type metadata accessor for DefaultHeaderComponent);
  *a1 = v19;
  return result;
}

uint64_t sub_1C141C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = type metadata accessor for DefaultFooterComponent(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - v6;
  *v4 = swift_getKeyPath(&unk_264B60);
  v8 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v4, v8, 0);
  sub_5E160((uint64_t)v4, (uint64_t)v7, type metadata accessor for DefaultFooterComponent);
  v9 = sub_1E7E88((uint64_t)v7, (uint64_t)&_swiftEmptyDictionarySingleton);
  v10 = sub_1E7C34(v9);
  swift_bridgeObjectRelease(v9);
  v11 = sub_1E7D18(v10);
  swift_bridgeObjectRelease(v10);
  result = sub_6685C((uint64_t)v7, type metadata accessor for DefaultFooterComponent);
  *a1 = v11;
  return result;
}

uint64_t sub_1C1534()
{
  return EnvironmentValues._dataStack.getter();
}

uint64_t sub_1C1558()
{
  return EnvironmentValues._sizeProvider.getter();
}

uint64_t sub_1C1578()
{
  return EnvironmentValues._sizeProvider.getter();
}

uint64_t sub_1C1598(uint64_t a1)
{
  _BYTE v2[40];

  sub_5E1A4(a1, (uint64_t)v2, &qword_320300);
  return EnvironmentValues._sizeProvider.setter(v2);
}

uint64_t sub_1C15D4(uint64_t a1)
{
  _BYTE v2[40];

  sub_5E1A4(a1, (uint64_t)v2, &qword_320300);
  return EnvironmentValues._sizeProvider.setter(v2);
}

uint64_t sub_1C1610()
{
  return EnvironmentValues.libraryAssetStateObserverProvider.getter();
}

uint64_t sub_1C1630(uint64_t a1)
{
  _BYTE v2[40];

  sub_5E1A4(a1, (uint64_t)v2, &qword_3240F0);
  return EnvironmentValues.libraryAssetStateObserverProvider.setter(v2);
}

uint64_t sub_1C166C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1BEB94(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1C1674()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328D68;
  if (!qword_328D68)
  {
    v1 = sub_667D0(&qword_328D28);
    sub_67060(&qword_328D60, &qword_328D58, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_328D68);
  }
  return result;
}

uint64_t sub_1C1704(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListShelfView.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ListShelfView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  char v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  _QWORD *v101;
  _QWORD *v102;
  char *v103;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    v21 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
LABEL_27:
    swift_retain(v5);
    return v21;
  }
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v5);
  swift_retain(v7);
  v8 = *(int *)(sub_5C154(&qword_323090) + 32);
  v9 = (_QWORD *)((char *)a1 + v8);
  v101 = a2;
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (int *)type metadata accessor for Page(0);
  v13 = v12[5];
  v14 = (char *)v9 + v13;
  v15 = (char *)v10 + v13;
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48);
  v19 = swift_bridgeObjectRetain(v11);
  if (v18(v15, 1, v16, v19))
  {
    v20 = sub_5C154(&qword_3217B8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v22 = v12[6];
  v23 = (char *)v9 + v22;
  v24 = (char *)v10 + v22;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v18)((char *)v10 + v22, 1, v16))
  {
    v25 = sub_5C154(&qword_3217B8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v24, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
  }
  *((_BYTE *)v9 + v12[7]) = *((_BYTE *)v10 + v12[7]);
  *((_BYTE *)v9 + v12[8]) = *((_BYTE *)v10 + v12[8]);
  v26 = v12[9];
  v27 = (char *)v9 + v26;
  v28 = (char *)v10 + v26;
  v29 = type metadata accessor for ToolbarPrincipalType(0);
  v30 = *(_QWORD *)(v29 - 8);
  v102 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_5C154(&qword_322F98);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = v12[10];
  v33 = *(_QWORD *)((char *)v10 + v32);
  *(_QWORD *)((char *)v9 + v32) = v33;
  v34 = v12[11];
  v35 = *(_QWORD *)((char *)v10 + v34);
  *(_QWORD *)((char *)v9 + v34) = v35;
  *((_BYTE *)v9 + v12[12]) = *((_BYTE *)v10 + v12[12]);
  v36 = v12[13];
  v37 = *(_QWORD *)((char *)v10 + v36);
  *(_QWORD *)((char *)v9 + v36) = v37;
  v38 = v12[14];
  v39 = (_QWORD *)((char *)v9 + v38);
  v40 = (_QWORD *)((char *)v10 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v12[15];
  v103 = (char *)v9 + v42;
  v43 = (char *)v10 + v42;
  v44 = type metadata accessor for PageData(0);
  v45 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 16);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v37);
  v46 = swift_bridgeObjectRetain(v41);
  v45(v103, v43, v44, v46);
  v47 = v12[16];
  v48 = *(_QWORD *)((char *)v10 + v47);
  *(_QWORD *)((char *)v9 + v47) = v48;
  v49 = v12[17];
  v50 = (char *)v9 + v49;
  v51 = (char *)v10 + v49;
  v52 = type metadata accessor for PageMetrics(0);
  v53 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
  v54 = swift_bridgeObjectRetain(v48);
  v53(v50, v51, v52, v54);
  *((_BYTE *)v9 + v12[18]) = *((_BYTE *)v10 + v12[18]);
  v55 = v12[19];
  v56 = *(_QWORD *)((char *)v10 + v55);
  *(_QWORD *)((char *)v9 + v55) = v56;
  v57 = v12[20];
  v58 = *(_QWORD *)((char *)v10 + v57);
  *(_QWORD *)((char *)v9 + v57) = v58;
  *((_BYTE *)v9 + v12[21]) = *((_BYTE *)v10 + v12[21]);
  v59 = v12[22];
  v60 = (_QWORD *)((char *)v9 + v59);
  v61 = (_QWORD *)((char *)v10 + v59);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  v63 = v12[23];
  v64 = (char *)v9 + v63;
  v65 = (char *)v10 + v63;
  v66 = *((_QWORD *)v65 + 1);
  swift_bridgeObjectRetain(v56);
  swift_retain(v58);
  swift_bridgeObjectRetain(v62);
  if (v66)
  {
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v66;
    *((_OWORD *)v64 + 1) = *((_OWORD *)v65 + 1);
    v67 = *((_QWORD *)v65 + 4);
    *((_QWORD *)v64 + 4) = v67;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v67);
  }
  else
  {
    v68 = *((_OWORD *)v65 + 1);
    *(_OWORD *)v64 = *(_OWORD *)v65;
    *((_OWORD *)v64 + 1) = v68;
    *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
  }
  v21 = v102;
  v69 = a3[6];
  *(_QWORD *)((char *)v102 + a3[5]) = *(_QWORD *)((char *)v101 + a3[5]);
  v70 = *(_QWORD *)((char *)v101 + v69);
  *(_QWORD *)((char *)v102 + v69) = v70;
  v71 = a3[7];
  v72 = a3[8];
  v73 = *(_QWORD *)((char *)v101 + v71);
  *(_QWORD *)((char *)v102 + v71) = v73;
  v74 = (char *)v102 + v72;
  v75 = *(void **)((char *)v101 + v72);
  v76 = *((_BYTE *)v101 + v72 + 8);
  swift_retain(v70);
  swift_retain(v73);
  sub_AAFF4(v75, v76);
  *(_QWORD *)v74 = v75;
  v74[8] = v76;
  v77 = a3[9];
  v78 = (_QWORD *)((char *)v102 + v77);
  v79 = (_QWORD *)((char *)v101 + v77);
  v80 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v79, v80) == 1)
  {
    v81 = type metadata accessor for DataStack(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v78, v79, v81);
    v82 = 1;
  }
  else
  {
    v83 = *v79;
    *v78 = *v79;
    swift_retain(v83);
    v82 = 0;
  }
  swift_storeEnumTagMultiPayload(v78, v80, v82);
  v84 = a3[10];
  v85 = (char *)v102 + v84;
  v86 = (char *)v101 + v84;
  if ((*((_BYTE *)v101 + v84 + 40) & 1) != 0)
  {
    v87 = *((_QWORD *)v86 + 3);
    if (v87)
    {
      v88 = *((_QWORD *)v86 + 4);
      *((_QWORD *)v85 + 3) = v87;
      *((_QWORD *)v85 + 4) = v88;
      (**(void (***)(char *))(v87 - 8))(v85);
    }
    else
    {
      v90 = *((_OWORD *)v86 + 1);
      *(_OWORD *)v85 = *(_OWORD *)v86;
      *((_OWORD *)v85 + 1) = v90;
      *((_QWORD *)v85 + 4) = *((_QWORD *)v86 + 4);
    }
    v85[40] = 1;
  }
  else
  {
    v89 = *(_QWORD *)v86;
    *(_QWORD *)v85 = *(_QWORD *)v86;
    v85[40] = 0;
    swift_retain(v89);
  }
  v91 = a3[11];
  v92 = (char *)v102 + v91;
  v93 = (char *)v101 + v91;
  v94 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v92, v93, v94);
  v95 = a3[12];
  v96 = (char *)v102 + v95;
  v97 = (char *)v101 + v95;
  if ((*((_BYTE *)v101 + v95 + 40) & 1) == 0)
  {
    v5 = *(_QWORD *)v97;
    *(_QWORD *)v96 = *(_QWORD *)v97;
    v96[40] = 0;
    goto LABEL_27;
  }
  v98 = *(_OWORD *)(v97 + 24);
  *(_OWORD *)(v96 + 24) = v98;
  (**(void (***)(char *))(v98 - 8))(v96);
  v96[40] = 1;
  return v21;
}

uint64_t destroy for ListShelfView(_QWORD *a1, int *a2)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_5C154(&qword_323090) + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
  v5 = (int *)type metadata accessor for Page(0);
  v6 = &v4[v5[5]];
  v7 = type metadata accessor for LocalizerRequest(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v10 = &v4[v5[6]];
  if (!v9(v10, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v11 = &v4[v5[9]];
  v12 = type metadata accessor for ToolbarPrincipalType(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[10]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[13]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[14] + 8]);
  v14 = &v4[v5[15]];
  v15 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[16]]);
  v16 = &v4[v5[17]];
  v17 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[19]]);
  swift_release(*(_QWORD *)&v4[v5[20]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[22] + 8]);
  v18 = &v4[v5[23]];
  v19 = *((_QWORD *)v18 + 1);
  if (v19)
  {
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(*((_QWORD *)v18 + 4));
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[6]));
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  sub_794D8(*(id *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  v20 = (_QWORD *)((char *)a1 + a2[9]);
  v21 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  v23 = (_QWORD *)((char *)a1 + a2[10]);
  if ((v23[5] & 1) != 0)
  {
    if (v23[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  }
  else
  {
    swift_release(*v23);
  }
  v24 = (char *)a1 + a2[11];
  v25 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = (_QWORD *)((char *)a1 + a2[12]);
  if ((v26[5] & 1) != 0)
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v26);
  else
    return swift_release(*v26);
}

_QWORD *initializeWithCopy for ListShelfView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t, __n128);
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void *v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  _QWORD *v101;
  _QWORD *v102;
  char *v103;

  v5 = *a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain(v5);
  swift_retain(v6);
  v7 = *(int *)(sub_5C154(&qword_323090) + 32);
  v8 = (_QWORD *)((char *)a1 + v7);
  v101 = a2;
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = (int *)type metadata accessor for Page(0);
  v12 = v11[5];
  v13 = (char *)v8 + v12;
  v14 = (char *)v9 + v12;
  v15 = type metadata accessor for LocalizerRequest(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
  v18 = swift_bridgeObjectRetain(v10);
  if (v17(v14, 1, v15, v18))
  {
    v19 = sub_5C154(&qword_3217B8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v20 = v11[6];
  v21 = (char *)v8 + v20;
  v22 = (char *)v9 + v20;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v17)((char *)v9 + v20, 1, v15))
  {
    v23 = sub_5C154(&qword_3217B8);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
  }
  *((_BYTE *)v8 + v11[7]) = *((_BYTE *)v9 + v11[7]);
  *((_BYTE *)v8 + v11[8]) = *((_BYTE *)v9 + v11[8]);
  v24 = v11[9];
  v25 = (char *)v8 + v24;
  v26 = (char *)v9 + v24;
  v27 = type metadata accessor for ToolbarPrincipalType(0);
  v28 = *(_QWORD *)(v27 - 8);
  v102 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_5C154(&qword_322F98);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = v11[10];
  v31 = *(_QWORD *)((char *)v9 + v30);
  *(_QWORD *)((char *)v8 + v30) = v31;
  v32 = v11[11];
  v33 = *(_QWORD *)((char *)v9 + v32);
  *(_QWORD *)((char *)v8 + v32) = v33;
  *((_BYTE *)v8 + v11[12]) = *((_BYTE *)v9 + v11[12]);
  v34 = v11[13];
  v35 = *(_QWORD *)((char *)v9 + v34);
  *(_QWORD *)((char *)v8 + v34) = v35;
  v36 = v11[14];
  v37 = (_QWORD *)((char *)v8 + v36);
  v38 = (_QWORD *)((char *)v9 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = v11[15];
  v103 = (char *)v8 + v40;
  v41 = (char *)v9 + v40;
  v42 = type metadata accessor for PageData(0);
  v43 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v42 - 8) + 16);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v35);
  v44 = swift_bridgeObjectRetain(v39);
  v43(v103, v41, v42, v44);
  v45 = v11[16];
  v46 = *(_QWORD *)((char *)v9 + v45);
  *(_QWORD *)((char *)v8 + v45) = v46;
  v47 = v11[17];
  v48 = (char *)v8 + v47;
  v49 = (char *)v9 + v47;
  v50 = type metadata accessor for PageMetrics(0);
  v51 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v50 - 8) + 16);
  v52 = swift_bridgeObjectRetain(v46);
  v51(v48, v49, v50, v52);
  *((_BYTE *)v8 + v11[18]) = *((_BYTE *)v9 + v11[18]);
  v53 = v11[19];
  v54 = *(_QWORD *)((char *)v9 + v53);
  *(_QWORD *)((char *)v8 + v53) = v54;
  v55 = v11[20];
  v56 = *(_QWORD *)((char *)v9 + v55);
  *(_QWORD *)((char *)v8 + v55) = v56;
  *((_BYTE *)v8 + v11[21]) = *((_BYTE *)v9 + v11[21]);
  v57 = v11[22];
  v58 = (_QWORD *)((char *)v8 + v57);
  v59 = (_QWORD *)((char *)v9 + v57);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = v11[23];
  v62 = (char *)v8 + v61;
  v63 = (char *)v9 + v61;
  v64 = *((_QWORD *)v63 + 1);
  swift_bridgeObjectRetain(v54);
  swift_retain(v56);
  swift_bridgeObjectRetain(v60);
  if (v64)
  {
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    *((_OWORD *)v62 + 1) = *((_OWORD *)v63 + 1);
    v65 = *((_QWORD *)v63 + 4);
    *((_QWORD *)v62 + 4) = v65;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v65);
  }
  else
  {
    v66 = *((_OWORD *)v63 + 1);
    *(_OWORD *)v62 = *(_OWORD *)v63;
    *((_OWORD *)v62 + 1) = v66;
    *((_QWORD *)v62 + 4) = *((_QWORD *)v63 + 4);
  }
  v67 = a3[6];
  *(_QWORD *)((char *)v102 + a3[5]) = *(_QWORD *)((char *)v101 + a3[5]);
  v68 = *(_QWORD *)((char *)v101 + v67);
  *(_QWORD *)((char *)v102 + v67) = v68;
  v69 = a3[7];
  v70 = a3[8];
  v71 = *(_QWORD *)((char *)v101 + v69);
  *(_QWORD *)((char *)v102 + v69) = v71;
  v72 = (char *)v102 + v70;
  v73 = *(void **)((char *)v101 + v70);
  v74 = *((_BYTE *)v101 + v70 + 8);
  swift_retain(v68);
  swift_retain(v71);
  sub_AAFF4(v73, v74);
  *(_QWORD *)v72 = v73;
  v72[8] = v74;
  v75 = a3[9];
  v76 = (_QWORD *)((char *)v102 + v75);
  v77 = (_QWORD *)((char *)v101 + v75);
  v78 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v77, v78) == 1)
  {
    v79 = type metadata accessor for DataStack(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v76, v77, v79);
    v80 = 1;
  }
  else
  {
    v81 = *v77;
    *v76 = *v77;
    swift_retain(v81);
    v80 = 0;
  }
  swift_storeEnumTagMultiPayload(v76, v78, v80);
  v82 = a3[10];
  v83 = (char *)v102 + v82;
  v84 = (char *)v101 + v82;
  if ((*((_BYTE *)v101 + v82 + 40) & 1) != 0)
  {
    v85 = *((_QWORD *)v84 + 3);
    if (v85)
    {
      v86 = *((_QWORD *)v84 + 4);
      *((_QWORD *)v83 + 3) = v85;
      *((_QWORD *)v83 + 4) = v86;
      (**(void (***)(char *))(v85 - 8))(v83);
    }
    else
    {
      v88 = *((_OWORD *)v84 + 1);
      *(_OWORD *)v83 = *(_OWORD *)v84;
      *((_OWORD *)v83 + 1) = v88;
      *((_QWORD *)v83 + 4) = *((_QWORD *)v84 + 4);
    }
    v83[40] = 1;
  }
  else
  {
    v87 = *(_QWORD *)v84;
    *(_QWORD *)v83 = *(_QWORD *)v84;
    v83[40] = 0;
    swift_retain(v87);
  }
  v89 = a3[11];
  v90 = (char *)v102 + v89;
  v91 = (char *)v101 + v89;
  v92 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
  v93 = a3[12];
  v94 = (char *)v102 + v93;
  v95 = (char *)v101 + v93;
  v96 = *((_BYTE *)v101 + v93 + 40);
  if ((v96 & 1) != 0)
  {
    v97 = *(_OWORD *)(v95 + 24);
    *(_OWORD *)(v94 + 24) = v97;
    (**(void (***)(char *))(v97 - 8))(v94);
  }
  else
  {
    v98 = *(_QWORD *)v95;
    *(_QWORD *)v94 = *(_QWORD *)v95;
    swift_retain(v98);
  }
  v94[40] = v96;
  return v102;
}

