uint64_t *assignWithCopy for ListShelfView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  id v98;
  char v99;
  void *v100;
  char v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v127;

  v5 = *a1;
  v6 = *a2;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v5);
  v7 = a2[1];
  v8 = a1[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = *(int *)(sub_5C154(&qword_323090) + 32);
  v10 = (char *)a1 + v9;
  v127 = a2;
  v11 = (char *)a2 + v9;
  *(_QWORD *)v10 = *(uint64_t *)((char *)a2 + v9);
  v12 = *(uint64_t *)((char *)a2 + v9 + 8);
  v13 = *(uint64_t *)((char *)a1 + v9 + 8);
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = (int *)type metadata accessor for Page(0);
  v15 = v14[5];
  v16 = &v10[v15];
  v17 = &v11[v15];
  v18 = type metadata accessor for LocalizerRequest(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    v23 = sub_5C154(&qword_3217B8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = v14[6];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = v20(&v10[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    v29 = sub_5C154(&qword_3217B8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  v10[v14[7]] = v11[v14[7]];
  v10[v14[8]] = v11[v14[8]];
  v30 = v14[9];
  v31 = &v10[v30];
  v32 = &v11[v30];
  v33 = type metadata accessor for ToolbarPrincipalType(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
LABEL_18:
    v38 = sub_5C154(&qword_322F98);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v31, v32, v33);
LABEL_19:
  v39 = v14[10];
  v40 = *(_QWORD *)&v11[v39];
  v41 = *(_QWORD *)&v10[v39];
  *(_QWORD *)&v10[v39] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = v14[11];
  v43 = *(_QWORD *)&v11[v42];
  v44 = *(_QWORD *)&v10[v42];
  *(_QWORD *)&v10[v42] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v10[v14[12]] = v11[v14[12]];
  v45 = v14[13];
  v46 = *(_QWORD *)&v11[v45];
  v47 = *(_QWORD *)&v10[v45];
  *(_QWORD *)&v10[v45] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = v14[14];
  v49 = &v10[v48];
  v50 = &v11[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v52 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = v14[15];
  v54 = &v10[v53];
  v55 = &v11[v53];
  v56 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  v57 = v14[16];
  v58 = *(_QWORD *)&v11[v57];
  v59 = *(_QWORD *)&v10[v57];
  *(_QWORD *)&v10[v57] = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  v60 = v14[17];
  v61 = &v10[v60];
  v62 = &v11[v60];
  v63 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
  v10[v14[18]] = v11[v14[18]];
  v64 = v14[19];
  v65 = *(_QWORD *)&v11[v64];
  v66 = *(_QWORD *)&v10[v64];
  *(_QWORD *)&v10[v64] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v67 = v14[20];
  v68 = *(_QWORD *)&v11[v67];
  v69 = *(_QWORD *)&v10[v67];
  *(_QWORD *)&v10[v67] = v68;
  swift_retain(v68);
  swift_release(v69);
  v10[v14[21]] = v11[v14[21]];
  v70 = v14[22];
  v71 = &v10[v70];
  v72 = &v11[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  v74 = *((_QWORD *)v71 + 1);
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v75 = v14[23];
  v76 = &v10[v75];
  v77 = &v11[v75];
  v78 = *(_QWORD *)&v10[v75 + 8];
  v79 = *(_QWORD *)&v11[v75 + 8];
  if (v78)
  {
    if (v79)
    {
      *(_QWORD *)v76 = *(_QWORD *)v77;
      v80 = *((_QWORD *)v77 + 1);
      *((_QWORD *)v76 + 1) = v80;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRelease(v78);
      *((_QWORD *)v76 + 2) = *((_QWORD *)v77 + 2);
      *((_QWORD *)v76 + 3) = *((_QWORD *)v77 + 3);
      v81 = *((_QWORD *)v77 + 4);
      v82 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v76 + 4) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82);
    }
    else
    {
      sub_984B0((uint64_t)v76);
      v85 = *((_QWORD *)v77 + 4);
      v86 = *((_OWORD *)v77 + 1);
      *(_OWORD *)v76 = *(_OWORD *)v77;
      *((_OWORD *)v76 + 1) = v86;
      *((_QWORD *)v76 + 4) = v85;
    }
  }
  else if (v79)
  {
    *(_QWORD *)v76 = *(_QWORD *)v77;
    v83 = *((_QWORD *)v77 + 1);
    *((_QWORD *)v76 + 1) = v83;
    *((_QWORD *)v76 + 2) = *((_QWORD *)v77 + 2);
    *((_QWORD *)v76 + 3) = *((_QWORD *)v77 + 3);
    v84 = *((_QWORD *)v77 + 4);
    *((_QWORD *)v76 + 4) = v84;
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v84);
  }
  else
  {
    v87 = *(_OWORD *)v77;
    v88 = *((_OWORD *)v77 + 1);
    *((_QWORD *)v76 + 4) = *((_QWORD *)v77 + 4);
    *(_OWORD *)v76 = v87;
    *((_OWORD *)v76 + 1) = v88;
  }
  *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)v127 + a3[5]);
  v89 = a3[6];
  v90 = *(uint64_t *)((char *)v127 + v89);
  v91 = *(uint64_t *)((char *)a1 + v89);
  *(uint64_t *)((char *)a1 + v89) = v90;
  swift_retain(v90);
  swift_release(v91);
  v92 = a3[7];
  v93 = *(uint64_t *)((char *)v127 + v92);
  v94 = *(uint64_t *)((char *)a1 + v92);
  *(uint64_t *)((char *)a1 + v92) = v93;
  swift_retain(v93);
  swift_release(v94);
  v95 = a3[8];
  v96 = (char *)a1 + v95;
  v97 = (char *)v127 + v95;
  v98 = *(id *)v97;
  v99 = v97[8];
  sub_AAFF4(*(id *)v97, v99);
  v100 = *(void **)v96;
  v101 = v96[8];
  *(_QWORD *)v96 = v98;
  v96[8] = v99;
  sub_794D8(v100, v101);
  if (a1 != v127)
  {
    v102 = a3[9];
    v103 = (uint64_t *)((char *)a1 + v102);
    v104 = (uint64_t *)((char *)v127 + v102);
    sub_5E09C((uint64_t)a1 + v102, &qword_3202B8);
    v105 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v104, v105) == 1)
    {
      v106 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v103, v104, v106);
      v107 = 1;
    }
    else
    {
      v108 = *v104;
      *v103 = *v104;
      swift_retain(v108);
      v107 = 0;
    }
    swift_storeEnumTagMultiPayload(v103, v105, v107);
    v109 = a3[10];
    v110 = (char *)a1 + v109;
    v111 = (char *)v127 + v109;
    sub_5E09C((uint64_t)a1 + v109, &qword_3202F8);
    if ((v111[40] & 1) != 0)
    {
      v112 = *((_QWORD *)v111 + 3);
      if (v112)
      {
        *((_QWORD *)v110 + 3) = v112;
        *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
        (**(void (***)(char *, char *))(v112 - 8))(v110, v111);
      }
      else
      {
        v114 = *(_OWORD *)v111;
        v115 = *((_OWORD *)v111 + 1);
        *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
        *(_OWORD *)v110 = v114;
        *((_OWORD *)v110 + 1) = v115;
      }
      v110[40] = 1;
    }
    else
    {
      v113 = *(_QWORD *)v111;
      *(_QWORD *)v110 = *(_QWORD *)v111;
      v110[40] = 0;
      swift_retain(v113);
    }
  }
  v116 = a3[11];
  v117 = (char *)a1 + v116;
  v118 = (char *)v127 + v116;
  v119 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 24))(v117, v118, v119);
  if (a1 != v127)
  {
    v120 = a3[12];
    v121 = (char *)a1 + v120;
    v122 = (char *)v127 + v120;
    sub_5E09C((uint64_t)a1 + v120, &qword_3202F0);
    if ((v122[40] & 1) != 0)
    {
      v123 = *((_QWORD *)v122 + 3);
      *((_QWORD *)v121 + 3) = v123;
      *((_QWORD *)v121 + 4) = *((_QWORD *)v122 + 4);
      (**(void (***)(char *, char *))(v123 - 8))(v121, v122);
      v121[40] = 1;
    }
    else
    {
      v124 = *(_QWORD *)v122;
      *(_QWORD *)v121 = *(_QWORD *)v122;
      v121[40] = 0;
      swift_retain(v124);
    }
  }
  return a1;
}

_QWORD *initializeWithTake for ListShelfView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  __int128 v59;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(sub_5C154(&qword_323090) + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for Page(0);
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for LocalizerRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    v16 = sub_5C154(&qword_3217B8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[6];
  v18 = &v7[v17];
  v19 = &v8[v17];
  if (v15(&v8[v17], 1, v13))
  {
    v20 = sub_5C154(&qword_3217B8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v19, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
  }
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v21 = v9[9];
  v22 = &v7[v21];
  v23 = &v8[v21];
  v24 = type metadata accessor for ToolbarPrincipalType(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_5C154(&qword_322F98);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  v7[v9[12]] = v8[v9[12]];
  *(_QWORD *)&v7[v9[13]] = *(_QWORD *)&v8[v9[13]];
  *(_OWORD *)&v7[v9[14]] = *(_OWORD *)&v8[v9[14]];
  v27 = v9[15];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  *(_QWORD *)&v7[v9[16]] = *(_QWORD *)&v8[v9[16]];
  v31 = v9[17];
  v32 = &v7[v31];
  v33 = &v8[v31];
  v34 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v7[v9[18]] = v8[v9[18]];
  *(_QWORD *)&v7[v9[19]] = *(_QWORD *)&v8[v9[19]];
  *(_QWORD *)&v7[v9[20]] = *(_QWORD *)&v8[v9[20]];
  v7[v9[21]] = v8[v9[21]];
  *(_OWORD *)&v7[v9[22]] = *(_OWORD *)&v8[v9[22]];
  v35 = v9[23];
  v36 = &v7[v35];
  v37 = &v8[v35];
  v38 = *((_OWORD *)v37 + 1);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *((_OWORD *)v36 + 1) = v38;
  *((_QWORD *)v36 + 4) = *((_QWORD *)v37 + 4);
  v39 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v39) = *(_QWORD *)((char *)a2 + v39);
  v40 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v41[8] = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v43 = a3[9];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
  {
    v47 = type metadata accessor for DataStack(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v44, v45, v47);
    swift_storeEnumTagMultiPayload(v44, v46, 1);
  }
  else
  {
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  v48 = a3[10];
  v49 = a3[11];
  v50 = (_OWORD *)((char *)a1 + v48);
  v51 = (_OWORD *)((char *)a2 + v48);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  *(_OWORD *)((char *)v50 + 25) = *(_OWORD *)((char *)v51 + 25);
  v53 = (char *)a1 + v49;
  v54 = (char *)a2 + v49;
  v55 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  v56 = a3[12];
  v57 = (_OWORD *)((char *)a1 + v56);
  v58 = (_OWORD *)((char *)a2 + v56);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  *(_OWORD *)((char *)v57 + 25) = *(_OWORD *)((char *)v58 + 25);
  return a1;
}

uint64_t *assignWithTake for ListShelfView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void *v86;
  char v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  _OWORD *v103;
  __int128 v104;
  uint64_t *v107;

  v5 = *a1;
  *a1 = *a2;
  swift_release(v5);
  v6 = a1[1];
  a1[1] = a2[1];
  swift_release(v6);
  v7 = *(int *)(sub_5C154(&qword_323090) + 32);
  v8 = (char *)a1 + v7;
  v107 = a2;
  v9 = (char *)a2 + v7;
  v10 = *(uint64_t *)((char *)a2 + v7 + 8);
  v11 = *(uint64_t *)((char *)a1 + v7 + 8);
  *(_QWORD *)v8 = *(uint64_t *)((char *)a2 + v7);
  *((_QWORD *)v8 + 1) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (int *)type metadata accessor for Page(0);
  v13 = v12[5];
  v14 = &v8[v13];
  v15 = &v9[v13];
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    v21 = sub_5C154(&qword_3217B8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_7:
  v22 = v12[6];
  v23 = &v8[v22];
  v24 = &v9[v22];
  v25 = v18(&v8[v22], 1, v16);
  v26 = v18(v24, 1, v16);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v24, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
LABEL_12:
    v27 = sub_5C154(&qword_3217B8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v23, v24, v16);
LABEL_13:
  v8[v12[7]] = v9[v12[7]];
  v8[v12[8]] = v9[v12[8]];
  v28 = v12[9];
  v29 = &v8[v28];
  v30 = &v9[v28];
  v31 = type metadata accessor for ToolbarPrincipalType(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    v36 = v107;
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v36 = v107;
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
LABEL_18:
    v37 = sub_5C154(&qword_322F98);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v29, v30, v31);
LABEL_19:
  v38 = v12[10];
  v39 = *(_QWORD *)&v8[v38];
  *(_QWORD *)&v8[v38] = *(_QWORD *)&v9[v38];
  swift_bridgeObjectRelease(v39);
  v40 = v12[11];
  v41 = *(_QWORD *)&v8[v40];
  *(_QWORD *)&v8[v40] = *(_QWORD *)&v9[v40];
  swift_bridgeObjectRelease(v41);
  v8[v12[12]] = v9[v12[12]];
  v42 = v12[13];
  v43 = *(_QWORD *)&v8[v42];
  *(_QWORD *)&v8[v42] = *(_QWORD *)&v9[v42];
  swift_bridgeObjectRelease(v43);
  v44 = v12[14];
  v45 = &v8[v44];
  v46 = &v9[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  v49 = v45[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease(v49);
  v50 = v12[15];
  v51 = &v8[v50];
  v52 = &v9[v50];
  v53 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
  v54 = v12[16];
  v55 = *(_QWORD *)&v8[v54];
  *(_QWORD *)&v8[v54] = *(_QWORD *)&v9[v54];
  swift_bridgeObjectRelease(v55);
  v56 = v12[17];
  v57 = &v8[v56];
  v58 = &v9[v56];
  v59 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v57, v58, v59);
  v8[v12[18]] = v9[v12[18]];
  v60 = v12[19];
  v61 = *(_QWORD *)&v8[v60];
  *(_QWORD *)&v8[v60] = *(_QWORD *)&v9[v60];
  swift_bridgeObjectRelease(v61);
  v62 = v12[20];
  v63 = *(_QWORD *)&v8[v62];
  *(_QWORD *)&v8[v62] = *(_QWORD *)&v9[v62];
  swift_release(v63);
  v8[v12[21]] = v9[v12[21]];
  v64 = v12[22];
  v65 = &v8[v64];
  v66 = &v9[v64];
  v68 = *(_QWORD *)v66;
  v67 = *((_QWORD *)v66 + 1);
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v12[23];
  v71 = &v8[v70];
  v72 = &v9[v70];
  v73 = *(_QWORD *)&v8[v70 + 8];
  if (v73)
  {
    v74 = *((_QWORD *)v72 + 1);
    if (v74)
    {
      *v71 = *(_QWORD *)v72;
      v71[1] = v74;
      swift_bridgeObjectRelease(v73);
      v71[2] = *((_QWORD *)v72 + 2);
      v75 = *((_QWORD *)v72 + 4);
      v76 = v71[4];
      v71[3] = *((_QWORD *)v72 + 3);
      v71[4] = v75;
      swift_bridgeObjectRelease(v76);
      goto LABEL_24;
    }
    sub_984B0((uint64_t)v71);
  }
  v77 = *((_OWORD *)v72 + 1);
  *(_OWORD *)v71 = *(_OWORD *)v72;
  *((_OWORD *)v71 + 1) = v77;
  v71[4] = *((_QWORD *)v72 + 4);
LABEL_24:
  v78 = a3[6];
  *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)v36 + a3[5]);
  v79 = *(uint64_t *)((char *)a1 + v78);
  *(uint64_t *)((char *)a1 + v78) = *(uint64_t *)((char *)v36 + v78);
  swift_release(v79);
  v80 = a3[7];
  v81 = *(uint64_t *)((char *)a1 + v80);
  *(uint64_t *)((char *)a1 + v80) = *(uint64_t *)((char *)v36 + v80);
  swift_release(v81);
  v82 = a3[8];
  v83 = (char *)a1 + v82;
  v84 = (char *)v36 + v82;
  v85 = *(_QWORD *)v84;
  LOBYTE(v84) = v84[8];
  v86 = *(void **)v83;
  v87 = v83[8];
  *(_QWORD *)v83 = v85;
  v83[8] = (char)v84;
  sub_794D8(v86, v87);
  if (a1 != v36)
  {
    v88 = a3[9];
    v89 = (char *)a1 + v88;
    v90 = (char *)v36 + v88;
    sub_5E09C((uint64_t)a1 + v88, &qword_3202B8);
    v91 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v90, v91) == 1)
    {
      v92 = type metadata accessor for DataStack(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v89, v90, v92);
      swift_storeEnumTagMultiPayload(v89, v91, 1);
    }
    else
    {
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    v93 = a3[10];
    v94 = (_OWORD *)((char *)v36 + v93);
    v95 = (_OWORD *)((char *)a1 + v93);
    sub_5E09C((uint64_t)a1 + v93, &qword_3202F8);
    v96 = v94[1];
    *v95 = *v94;
    v95[1] = v96;
    *(_OWORD *)((char *)v95 + 25) = *(_OWORD *)((char *)v94 + 25);
  }
  v97 = a3[11];
  v98 = (char *)a1 + v97;
  v99 = (char *)v36 + v97;
  v100 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 40))(v98, v99, v100);
  if (a1 != v36)
  {
    v101 = a3[12];
    v102 = (_OWORD *)((char *)v36 + v101);
    v103 = (_OWORD *)((char *)a1 + v101);
    sub_5E09C((uint64_t)a1 + v101, &qword_3202F0);
    v104 = v102[1];
    *v103 = *v102;
    v103[1] = v104;
    *(_OWORD *)((char *)v103 + 25) = *(_OWORD *)((char *)v102 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListShelfView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C3688);
}

uint64_t sub_1C3688(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_5C154(&qword_323090);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_5C154(&qword_323C18);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[9];
    }
    else
    {
      v8 = type metadata accessor for AppAnalyticsData(0);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[11];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[6]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for ListShelfView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C3768);
}

uint64_t sub_1C3768(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_5C154(&qword_323090);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
      return result;
    }
    v13 = sub_5C154(&qword_323C18);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[9];
    }
    else
    {
      v10 = type metadata accessor for AppAnalyticsData(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[11];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1C3838(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  sub_8C25C(319, (unint64_t *)&unk_324240, type metadata accessor for Page, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v8[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v8[4] = "\t";
    sub_8C25C(319, &qword_323C98, (uint64_t (*)(uint64_t))&type metadata accessor for DataStack, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v4 - 8) + 64;
      v8[6] = &unk_264A68;
      v6 = type metadata accessor for AppAnalyticsData(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        v8[8] = &unk_264A68;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1C3938()
{
  return sub_67060(&qword_328E20, &qword_328D50, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
}

_QWORD *sub_1C3964@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  sub_66898(a1, v3);
  return dispatch thunk of ComponentModel.id.getter(a2, v3, v4);
}

uint64_t sub_1C39A8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  __n128 v50;
  void (*v51)(uint64_t, uint64_t, __n128);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = (int *)type metadata accessor for ListShelfView(0);
  v2 = *((_QWORD *)v1 - 1);
  v69 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v69 + 16) & ~v69;
  v66 = *(_QWORD *)(v2 + 64);
  v4 = (int *)type metadata accessor for Shelf(0);
  v5 = *((_QWORD *)v4 - 1);
  v72 = *(unsigned __int8 *)(v5 + 80);
  v68 = *(_QWORD *)(v5 + 64);
  v6 = v0 + v3;
  swift_release(*(_QWORD *)(v0 + v3));
  swift_release(*(_QWORD *)(v0 + v3 + 8));
  v7 = v0 + v3 + *(int *)(sub_5C154(&qword_323090) + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
  v8 = (int *)type metadata accessor for Page(0);
  v9 = v7 + v8[5];
  v10 = type metadata accessor for LocalizerRequest(0);
  v70 = *(_QWORD *)(v10 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (!v11(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v9, v10);
  v71 = v0;
  v12 = v66 + v3;
  v13 = v7 + v8[6];
  if (!v11(v13, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v13, v10);
  v64 = v11;
  v65 = v10;
  v14 = v12 + 7;
  v15 = v7 + v8[9];
  v16 = type metadata accessor for ToolbarPrincipalType(0);
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  v18 = v14 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[14] + 8));
  v19 = v7 + v8[15];
  v20 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[16]));
  v21 = v7 + v8[17];
  v22 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[19]));
  swift_release(*(_QWORD *)(v7 + v8[20]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[22] + 8));
  v23 = v7 + v8[23];
  v24 = *(_QWORD *)(v23 + 8);
  if (v24)
  {
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(*(_QWORD *)(v23 + 32));
  }
  swift_release(*(_QWORD *)(v6 + v1[6]));
  swift_release(*(_QWORD *)(v6 + v1[7]));
  sub_794D8(*(id *)(v6 + v1[8]), *(_BYTE *)(v6 + v1[8] + 8));
  v25 = (_QWORD *)(v6 + v1[9]);
  v26 = sub_5C154(&qword_3202B8);
  v27 = v71;
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v28 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v25, v28);
  }
  else
  {
    swift_release(*v25);
  }
  v29 = (_QWORD *)(v6 + v1[10]);
  if ((v29[5] & 1) != 0)
  {
    if (v29[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v29);
  }
  else
  {
    swift_release(*v29);
  }
  v30 = (v18 + v72 + 8) & ~v72;
  v31 = v6 + v1[11];
  v32 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  v33 = (_QWORD *)(v6 + v1[12]);
  if ((v33[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v33);
  else
    swift_release(*v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v71 + v18));
  v67 = (v18 + v72 + 8) & ~v72;
  v34 = v71 + v30;
  swift_bridgeObjectRelease(*(_QWORD *)(v71 + v30 + 8));
  v35 = v71 + v30 + v4[8];
  v36 = type metadata accessor for ImpressionMetrics(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (!v38(v35, 1, v36))
    v39.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  v40 = v34 + v4[9];
  v41 = type metadata accessor for Metrics.Location(0, v39);
  v42 = *(_QWORD *)(v41 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v34 + v4[10]));
  v43 = v34 + v4[11];
  v44 = type metadata accessor for ShelfGridSpacing(0);
  v45 = *(_QWORD *)(v44 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  v46 = v34 + v4[12];
  v47 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v34 + v4[13]));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v34 + v4[14]));
  v48 = v34 + v4[15];
  v49 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v49 - 1) + 48))(v48, 1, v49))
  {
    v50 = swift_bridgeObjectRelease(*(_QWORD *)(v48 + 8));
    v51 = *(void (**)(uint64_t, uint64_t, __n128))(v70 + 8);
    v51(v48 + v49[5], v65, v50);
    v52 = v48 + v49[6];
    if (!v64(v52, 1, v65))
      ((void (*)(uint64_t, uint64_t))v51)(v52, v65);
    v53 = v48 + v49[9];
    v54 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v48 + v49[10]));
    v55 = v48 + v49[11];
    v27 = v71;
    if (!v38(v55, 1, v36))
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v55, v36);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v34 + v4[16]));
  v56 = v34 + v4[17];
  v57 = type metadata accessor for PaginationInfo(0);
  v58 = *(_QWORD *)(v57 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
  v59 = (_QWORD *)(v34 + v4[18]);
  if (v59[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v59);
  v60 = v34 + v4[19];
  v61 = type metadata accessor for SectionData(0);
  v62 = *(_QWORD *)(v61 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
  return swift_deallocObject(v27, v67 + v68, v69 | v72 | 7);
}

uint64_t sub_1C3FC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(type metadata accessor for ListShelfView(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Shelf(0) - 8) + 80);
  return sub_1C0004(a1, a2, v3 + v8, *(_QWORD *)(v3 + v9), (uint64_t *)(v3 + ((v9 + v10 + 8) & ~v10)), a3);
}

uint64_t sub_1C4054()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1C4078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328E58;
  if (!qword_328E58)
  {
    v1 = sub_667D0(&qword_328E28);
    sub_67060(&qword_328E50, &qword_328E48, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_328E58);
  }
  return result;
}

uint64_t sub_1C4114()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;

  v1 = (int *)type metadata accessor for ListShelfView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v30 = *(_QWORD *)(v2 + 64);
  v31 = v0;
  v5 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + *(int *)(sub_5C154(&qword_323090) + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
  v7 = (int *)type metadata accessor for Page(0);
  v8 = v6 + v7[5];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v12 = v6 + v7[6];
  if (!v11(v12, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  v13 = v6 + v7[9];
  v14 = type metadata accessor for ToolbarPrincipalType(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[14] + 8));
  v16 = v6 + v7[15];
  v17 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[16]));
  v18 = v6 + v7[17];
  v19 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[19]));
  swift_release(*(_QWORD *)(v6 + v7[20]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[22] + 8));
  v20 = v6 + v7[23];
  v21 = *(_QWORD *)(v20 + 8);
  if (v21)
  {
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 32));
  }
  swift_release(*(_QWORD *)(v5 + v1[6]));
  swift_release(*(_QWORD *)(v5 + v1[7]));
  sub_794D8(*(id *)(v5 + v1[8]), *(_BYTE *)(v5 + v1[8] + 8));
  v22 = (_QWORD *)(v5 + v1[9]);
  v23 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  v25 = (_QWORD *)(v5 + v1[10]);
  if ((v25[5] & 1) != 0)
  {
    if (v25[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
  }
  else
  {
    swift_release(*v25);
  }
  v26 = v5 + v1[11];
  v27 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = (_QWORD *)(v5 + v1[12]);
  if ((v28[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v28);
  else
    swift_release(*v28);
  return swift_deallocObject(v31, v4 + v30, v3 | 7);
}

uint64_t sub_1C4420()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListShelfView(0) - 8) + 80);
  return sub_1C0E10(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_1C444C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_328E90;
  if (!qword_328E90)
  {
    v1 = sub_667D0(&qword_328E68);
    v2 = sub_667D0(&qword_323DD8);
    v4 = sub_667D0(&qword_329DD0);
    v5 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.figaroLocationPositionOverride(_:)>>, 1);
    sub_67060(&qword_328E98, &qword_328E88, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328E90);
  }
  return result;
}

uint64_t sub_1C4540()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;

  v1 = (int *)type metadata accessor for ListShelfView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v29 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v4 = (_QWORD *)(v0 + ((v3 + 32) & ~v3));
  swift_release(*v4);
  swift_release(v4[1]);
  v5 = (char *)v4 + *(int *)(sub_5C154(&qword_323090) + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 1));
  v6 = (int *)type metadata accessor for Page(0);
  v7 = &v5[v6[5]];
  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v11 = &v5[v6[6]];
  if (!v10(v11, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v12 = &v5[v6[9]];
  v13 = type metadata accessor for ToolbarPrincipalType(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[10]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[13]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[14] + 8]);
  v15 = &v5[v6[15]];
  v16 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[16]]);
  v17 = &v5[v6[17]];
  v18 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[19]]);
  swift_release(*(_QWORD *)&v5[v6[20]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[22] + 8]);
  v19 = &v5[v6[23]];
  v20 = *((_QWORD *)v19 + 1);
  if (v20)
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(*((_QWORD *)v19 + 4));
  }
  swift_release(*(_QWORD *)((char *)v4 + v1[6]));
  swift_release(*(_QWORD *)((char *)v4 + v1[7]));
  sub_794D8(*(id *)((char *)v4 + v1[8]), *((_BYTE *)v4 + v1[8] + 8));
  v21 = (_QWORD *)((char *)v4 + v1[9]);
  v22 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  v24 = (_QWORD *)((char *)v4 + v1[10]);
  if ((v24[5] & 1) != 0)
  {
    if (v24[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v24);
  }
  else
  {
    swift_release(*v24);
  }
  v25 = (char *)v4 + v1[11];
  v26 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = (_QWORD *)((char *)v4 + v1[12]);
  if ((v27[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v27);
  else
    swift_release(*v27);
  return swift_deallocObject(v0, ((v3 + 32) & ~v3) + v29, v3 | 7);
}

uint64_t sub_1C485C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListShelfView(0) - 8) + 80);
  return sub_1C0CFC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

unint64_t sub_1C489C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328EB0;
  if (!qword_328EB0)
  {
    v1 = sub_667D0(&qword_328EA8);
    sub_67060(&qword_328EB8, &qword_328EC0, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328EB0);
  }
  return result;
}

uint64_t destroy for ListItemComponent(uint64_t a1)
{
  sub_794D8(*(id *)a1, *(_BYTE *)(a1 + 8));
  return sub_64FFC(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for ListItemComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  char v5;
  uint64_t v6;

  v2 = a2;
  v4 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_AAFF4(*(id *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(v2 + 16);
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  sub_64DD8(v6, v2);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v2;
  return a1;
}

uint64_t assignWithCopy for ListItemComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  char v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  v4 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_AAFF4(*(id *)a2, v5);
  v6 = *(void **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_794D8(v6, v7);
  v8 = *(_QWORD *)(v2 + 16);
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  sub_64DD8(v8, v2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v2;
  sub_64FFC(v9, v10);
  return a1;
}

__n128 initializeWithTake for ListItemComponent(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ListItemComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(void **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_794D8(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  sub_64FFC(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemComponent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemComponent()
{
  return &type metadata for ListItemComponent;
}

uint64_t sub_1C4B48(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1C4B88();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

unint64_t sub_1C4B88()
{
  unint64_t result;

  result = qword_32A060;
  if (!qword_32A060)
  {
    result = swift_getWitnessTable(&unk_264C24, &type metadata for ListItemComponent);
    atomic_store(result, (unint64_t *)&qword_32A060);
  }
  return result;
}

uint64_t sub_1C4BCC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];

  v33 = a6;
  v11 = type metadata accessor for RedactionReasons(0);
  v32 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_328EE8);
  v31 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_328EF0);
  v29 = *(_QWORD *)(v17 - 8);
  v30 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4E24(a1, a2, a3 & 1, (uint64_t)v16);
  sub_64DD8(a4, a5 & 1);
  v20 = sub_768E8(a4, a5 & 1);
  v21 = sub_64FFC(a4, a5 & 1);
  if ((v20 & 1) != 0)
  {
    static RedactionReasons.placeholder.getter(v21);
  }
  else
  {
    v34[0] = _swiftEmptyArrayStorage;
    v22 = sub_648E0(&qword_328670, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v23 = sub_5C154(&qword_328678);
    v24 = sub_67060(&qword_328680, &qword_328678, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v34, v23, v24, v11, v22);
  }
  v25 = sub_667D0(&qword_328EF8);
  v26 = sub_1C6324();
  v34[0] = v25;
  v34[1] = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v34, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  View.redacted(reason:)(v13, v14, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v33, v19, v30);
}

uint64_t sub_1C4E24@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t OpaqueTypeConformance2;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[6];

  v67 = a3;
  v66 = a2;
  v74 = a4;
  v75 = a1;
  v73 = sub_5C154(&qword_328EF8);
  v4 = __chkstk_darwin(v73);
  v70 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DataStackID(0, v4);
  v71 = *(_QWORD *)(v6 - 8);
  v72 = v6;
  __chkstk_darwin(v6);
  v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ListItemViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ListItemView(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_320430);
  __chkstk_darwin(v16);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_328F28);
  __chkstk_darwin(v19);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5C154(&qword_328F10);
  __chkstk_darwin(v61);
  v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_5C154(&qword_328F08);
  v68 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for ListItemComponentModel(0);
  v64 = v75 + *(int *)(v62 + 20);
  (*(void (**)(char *))(v9 + 16))(v11);
  v25 = ListItemView.init(_:contextActionMenuView:)(v11, sub_18A50C, 0);
  v26 = static Alignment.leading.getter(v25);
  v28 = sub_74A38(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v18, 0.0, 1, 0.0, 1, v26, v27);
  (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v28);
  KeyPath = swift_getKeyPath(&unk_264D28);
  v30 = swift_getKeyPath(&unk_264D50);
  v31 = swift_getKeyPath(&unk_264D80);
  sub_5E1A4((uint64_t)v18, (uint64_t)v21, &qword_320430);
  v32 = &v21[*(int *)(v19 + 36)];
  *(_QWORD *)v32 = KeyPath;
  v32[8] = 0;
  *((_QWORD *)v32 + 2) = v30;
  v32[24] = 0;
  *((_QWORD *)v32 + 4) = v31;
  *((_WORD *)v32 + 20) = 256;
  sub_5E09C((uint64_t)v18, &qword_320430);
  sub_5E1A4((uint64_t)v21, (uint64_t)v23, &qword_328F28);
  v33 = v61;
  v23[*(int *)(v61 + 36)] = 0;
  sub_5E09C((uint64_t)v21, &qword_328F28);
  v34 = sub_5C154(&qword_328F58);
  v35 = *(_QWORD *)(type metadata accessor for UTType(0) - 8);
  v36 = swift_allocObject(v34, ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ 6 * *(_QWORD *)(v35 + 72), *(unsigned __int8 *)(v35 + 80) | 7);
  *(_OWORD *)(v36 + 16) = xmmword_261680;
  v37 = static UTType.png.getter();
  v38 = static UTType.url.getter(v37);
  v39 = static UTType.text.getter(v38);
  v40 = static UTType.html.getter(v39);
  v41 = static UTType.utf8PlainText.getter(v40);
  static UTType.pdf.getter(v41);
  v76[3] = v62;
  v76[4] = sub_648E0(&qword_328F60, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
  v42 = sub_668BC(v76);
  sub_5E11C(v75, (uint64_t)v42, type metadata accessor for ListItemComponentModel);
  v43 = sub_1C641C();
  v44 = v63;
  View.onDrop(of:delegate:)(v36, v76, v33, v43);
  swift_bridgeObjectRelease(v36);
  sub_5E09C((uint64_t)v23, &qword_328F10);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v76);
  v45 = type metadata accessor for ContentExposureEvent(0);
  v46 = sub_5C154(&qword_321F20);
  v47 = swift_allocObject(v46, 80, 7);
  *(_OWORD *)(v47 + 16) = xmmword_258070;
  LOBYTE(v30) = v67 & 1;
  v48 = v66;
  sub_AAFF4(v66, v67 & 1);
  v49 = (void *)sub_77EB0(v48, v30);
  sub_794D8(v48, v30);
  *(_QWORD *)(v47 + 56) = type metadata accessor for ContentData(0);
  *(_QWORD *)(v47 + 64) = sub_648E0(&qword_326250, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  *(_QWORD *)(v47 + 72) = sub_648E0(&qword_326258, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  sub_668BC((_QWORD *)(v47 + 32));
  ListItemViewModel.contentData(with:)(v49);

  v50 = ListItemViewModel.assetID.getter();
  v51 = v69;
  DataStackID.init(stringLiteral:)(v50, v52);
  v76[0] = v33;
  v76[1] = v43;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v76, &opaque type descriptor for <<opaque return type of View.onDrop(of:delegate:)>>, 1);
  v54 = sub_648E0(&qword_328F50, (uint64_t (*)(uint64_t))&type metadata accessor for ContentExposureEvent, (uint64_t)&protocol conformance descriptor for ContentExposureEvent);
  v55 = (uint64_t)v70;
  v56 = v65;
  View.emitAppAnalyticsExposureEvent<A>(_:)(v45, v65, v45, OpaqueTypeConformance2, v54);
  v57 = sub_1C6324();
  View.appAnalyticsData(_:for:)(v47, v51, v73, v57);
  sub_5E09C(v55, &qword_328EF8);
  v58 = swift_bridgeObjectRelease(v47);
  (*(void (**)(char *, uint64_t, __n128))(v71 + 8))(v51, v72, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v44, v56);
}

uint64_t sub_1C545C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1C4BCC(a1, *(void **)v2, *(_BYTE *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_1C547C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = type metadata accessor for ListItemComponentModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(a1, (uint64_t)v6, type metadata accessor for ListItemComponentModel);
  v7 = type metadata accessor for ListItemComponent._ButtonStyle(0);
  v8 = (_QWORD *)(a2 + *(int *)(v7 + 20));
  v9 = type metadata accessor for ProfileRestrictions(0);
  v10 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *v8 = EnvironmentObject.init()(v9, v10);
  v8[1] = v11;
  v12 = a2 + *(int *)(v7 + 24);
  *(_QWORD *)v12 = swift_getKeyPath(&unk_264CF8);
  *(_BYTE *)(v12 + 8) = 0;
  return sub_5E160((uint64_t)v6, a2, type metadata accessor for ListItemComponentModel);
}

uint64_t sub_1C5574(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  void *v9;
  char v10;
  uint64_t v11;
  char v12;

  v3 = *(void **)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  sub_AAFF4(v3, v4);
  sub_64DD8(v5, v6);
  v7 = sub_1C4B88();
  return _ComponentBody.init(_:)(&v9, a1, v7);
}

unint64_t sub_1C55F0()
{
  unint64_t result;

  result = qword_328EC8;
  if (!qword_328EC8)
  {
    result = swift_getWitnessTable(&unk_264BD4, &type metadata for ListItemComponent);
    atomic_store(result, (unint64_t *)&qword_328EC8);
  }
  return result;
}

uint64_t sub_1C5634(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B97A0, 1);
}

uint64_t sub_1C5644()
{
  return sub_648E0(&qword_320058, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
}

uint64_t sub_1C5670()
{
  return sub_648E0(&qword_328ED0, type metadata accessor for ListItemComponent._ButtonStyle, (uint64_t)&unk_264C8C);
}

uint64_t type metadata accessor for ListItemComponent._ButtonStyle(uint64_t a1)
{
  return sub_64960(a1, qword_329058, (uint64_t)&nominal type descriptor for ListItemComponent._ButtonStyle);
}

uint64_t sub_1C56B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9778, 1);
}

uint64_t sub_1C56C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];

  v39 = a1;
  v47 = a2;
  v2 = type metadata accessor for ListItemComponent._ButtonStyle(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v3;
  __chkstk_darwin(v2);
  v44 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ListItemComponentModel(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ListItemComponent.ListItemButtonStyle(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - v12;
  v14 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_321E90);
  v40 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_328ED8);
  v22 = *(_QWORD *)(v21 - 8);
  v42 = v21;
  v43 = v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v17, v39, v14, v23);
  Button<>.init(_:)(v17);
  v26 = v41;
  sub_5E11C(v41, (uint64_t)v7, type metadata accessor for ListItemComponentModel);
  *v10 = swift_getKeyPath(&unk_264CC8);
  v27 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v10, v27, 0);
  v28 = (char *)v10 + *(int *)(v8 + 24);
  *(_QWORD *)v28 = swift_getKeyPath(&unk_264CF8);
  v28[8] = 0;
  sub_5E160((uint64_t)v7, (uint64_t)v10 + *(int *)(v8 + 20), type metadata accessor for ListItemComponentModel);
  sub_5E160((uint64_t)v10, (uint64_t)v13, type metadata accessor for ListItemComponent.ListItemButtonStyle);
  v29 = sub_67060(&qword_321E98, &qword_321E90, (uint64_t)&protocol conformance descriptor for Button<A>);
  v30 = sub_648E0(&qword_328EE0, type metadata accessor for ListItemComponent.ListItemButtonStyle, (uint64_t)&unk_264E08);
  View.buttonStyle<A>(_:)(v13, v18, v8, v29, v30);
  sub_6685C((uint64_t)v13, type metadata accessor for ListItemComponent.ListItemButtonStyle);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v18);
  v31 = v44;
  sub_5E11C(v26, v44, type metadata accessor for ListItemComponent._ButtonStyle);
  v32 = *(unsigned __int8 *)(v45 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = swift_allocObject(&unk_2F1FD8, v33 + v46, v32 | 7);
  sub_5E160(v31, v34 + v33, type metadata accessor for ListItemComponent._ButtonStyle);
  v48[0] = v18;
  v48[1] = v8;
  v48[2] = v29;
  v48[3] = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v48, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v36 = v42;
  View.onDrag(_:)(sub_1C62F8, v34, v42, OpaqueTypeConformance2);
  swift_release(v34);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v25, v36);
}

id sub_1C5A60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for ListItemComponent._ButtonStyle(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + *(int *)(v5 + 24);
  v7 = *(_QWORD *)v6;
  v8 = *(_BYTE *)(v6 + 8);
  sub_64DD8(*(_QWORD *)v6, v8);
  v9 = sub_768E8(v7, v8);
  sub_64FFC(v7, v8);
  if ((v9 & 1) != 0)
    return objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  type metadata accessor for ListItemComponentModel(0);
  ListItemViewModel.assetInfo.getter(v20);
  v11 = v21;
  v12 = v22;
  sub_66898(v20, v21);
  LOBYTE(v11) = AssetInfo.isExplicit.getter(v11, v12);
  sub_5E11C(a1, (uint64_t)v4, type metadata accessor for ListItemComponent._ButtonStyle);
  if ((v11 & 1) == 0)
  {
    sub_6685C((uint64_t)v4, type metadata accessor for ListItemComponent._ButtonStyle);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v20);
    return ListItemComponentModel.dragProvider.getter();
  }
  v13 = &v4[*(int *)(v2 + 20)];
  if (*(_QWORD *)v13)
  {
    v14 = *(id *)v13;
    v15 = dispatch thunk of ProfileRestrictions.isExplicitContentAllowed.getter();

    sub_6685C((uint64_t)v4, type metadata accessor for ListItemComponent._ButtonStyle);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v20);
    if ((v15 & 1) == 0)
      return objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
    return ListItemComponentModel.dragProvider.getter();
  }
  v16 = *((_QWORD *)v13 + 1);
  v17 = type metadata accessor for ProfileRestrictions(0);
  v18 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = (id)EnvironmentObject.error()(0, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ListItemComponent.ListItemButtonStyle(uint64_t a1)
{
  return sub_64960(a1, qword_328FC0, (uint64_t)&nominal type descriptor for ListItemComponent.ListItemButtonStyle);
}

uint64_t sub_1C5C64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t KeyPath;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v69 = a1;
  v1 = type metadata accessor for ListItemViewModel(0);
  v67 = *(_QWORD *)(v1 - 8);
  v68 = v1;
  __chkstk_darwin(v1);
  v66 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AutomaticHoverEffect(0);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for ColorConstants(0);
  v6 = *(_QWORD *)(v57 - 8);
  v7 = __chkstk_darwin(v57);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ButtonStyleConfiguration.Label(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_329098);
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_3290A0);
  v62 = *(_QWORD *)(v17 - 8);
  v63 = v17;
  __chkstk_darwin(v17);
  v61 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5C154(&qword_3290A8);
  __chkstk_darwin(v58);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_5C154(&qword_3290B0);
  v21 = __chkstk_darwin(v64);
  v65 = (uint64_t)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = ButtonStyleConfiguration.label.getter(v21);
  if ((ButtonStyleConfiguration.isPressed.getter(v23) & 1) != 0)
  {
    v24 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray4Color");
    v25 = Color.init(_:)(v24);
    v26 = v25;
  }
  else
  {
    v27 = sub_76AA0((uint64_t)v9);
    v26 = ColorConstants.booksBackground.getter(v27);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v57);
  }
  v28 = static Edge.Set.all.getter(v25);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v10);
  v29 = &v16[*(int *)(v14 + 36)];
  *(_QWORD *)v29 = v26;
  v29[8] = v28;
  v30 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  static CustomHoverEffect<>.automatic.getter(v30);
  v31 = sub_1C84F4();
  v32 = sub_648E0(&qword_321F80, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v33 = v61;
  v34 = v14;
  v35 = v60;
  View.hoverEffect<A>(_:isEnabled:)(v5, 1, v34, v60, v31, v32);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v5, v35);
  sub_5E09C((uint64_t)v16, &qword_329098);
  v36 = type metadata accessor for ListItemComponent.ListItemButtonStyle(0);
  v37 = v70;
  v38 = v70 + *(int *)(v36 + 20);
  v39 = type metadata accessor for ListItemComponentModel(0);
  v41 = v66;
  v40 = v67;
  v42 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v38 + *(int *)(v39 + 20), v68);
  v43 = &v20[*(int *)(v58 + 36)];
  *(_QWORD *)v43 = swift_getKeyPath(&unk_264E40);
  v43[8] = 0;
  *((_QWORD *)v43 + 2) = swift_getKeyPath(&unk_264D50);
  v43[24] = 0;
  *((_QWORD *)v43 + 4) = swift_getKeyPath(&unk_264CF8);
  v43[40] = 0;
  v44 = type metadata accessor for ProfileRestrictions(0);
  v45 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *((_QWORD *)v43 + 6) = EnvironmentObject.init()(v44, v45);
  *((_QWORD *)v43 + 7) = v46;
  *((_QWORD *)v43 + 8) = swift_getKeyPath(&unk_264E70);
  v43[72] = 0;
  v47 = type metadata accessor for SwipeActionsViewModifier(0);
  v48 = &v43[*(int *)(v47 + 36)];
  *(_QWORD *)v48 = swift_getKeyPath(&unk_264EA0);
  v49 = sub_5C154(&qword_3202D0);
  swift_storeEnumTagMultiPayload(v48, v49, 0);
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v43[*(int *)(v47 + 40)], v41, v42);
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v20, v33, v63);
  v50 = v37 + *(int *)(v36 + 24);
  v51 = *(_QWORD *)v50;
  LOBYTE(v47) = *(_BYTE *)(v50 + 8);
  sub_64DD8(*(_QWORD *)v50, v47);
  LOBYTE(v48) = sub_768E8(v51, v47);
  sub_64FFC(v51, v47);
  KeyPath = swift_getKeyPath(&unk_264ED0);
  v53 = swift_allocObject(&unk_2F2000, 17, 7);
  *(_BYTE *)(v53 + 16) = v48 & 1;
  v54 = v65;
  sub_5E1A4((uint64_t)v20, v65, &qword_3290A8);
  v55 = (uint64_t *)(v54 + *(int *)(v64 + 36));
  *v55 = KeyPath;
  v55[1] = (uint64_t)sub_ADEE8;
  v55[2] = v53;
  sub_5E09C((uint64_t)v20, &qword_3290A8);
  return sub_1C85C0(v54, v69);
}

uint64_t sub_1C61AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for ListItemComponent._ButtonStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for ImpressionMetrics(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v4, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v4, v7);
  v9 = (int *)type metadata accessor for ListItemComponentModel(0);
  v10 = v6 + v9[5];
  v11 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (_QWORD *)(v6 + v9[6]);
  if (v12[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v12);
  v13 = v6 + v9[7];
  v14 = type metadata accessor for Models.Menu(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  sub_64FFC(*(_QWORD *)(v6 + *(int *)(v1 + 24)), *(_BYTE *)(v6 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

id sub_1C62F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListItemComponent._ButtonStyle(0) - 8) + 80);
  return sub_1C5A60(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_1C6324()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_328F00;
  if (!qword_328F00)
  {
    v1 = sub_667D0(&qword_328EF8);
    v2 = sub_667D0(&qword_328F08);
    v3 = type metadata accessor for ContentExposureEvent(255);
    v6 = sub_667D0(&qword_328F10);
    v7 = sub_1C641C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.onDrop(of:delegate:)>>, 1);
    v5 = sub_648E0(&qword_328F50, (uint64_t (*)(uint64_t))&type metadata accessor for ContentExposureEvent, (uint64_t)&protocol conformance descriptor for ContentExposureEvent);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.emitAppAnalyticsExposureEvent<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_328F00);
  }
  return result;
}

unint64_t sub_1C641C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328F18;
  if (!qword_328F18)
  {
    v1 = sub_667D0(&qword_328F10);
    sub_1C64A0();
    sub_67060(&qword_328F40, &qword_328F48, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328F18);
  }
  return result;
}

unint64_t sub_1C64A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328F20;
  if (!qword_328F20)
  {
    v1 = sub_667D0(&qword_328F28);
    sub_1C650C();
    sub_E5E48();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328F20);
  }
  return result;
}

unint64_t sub_1C650C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328F30;
  if (!qword_328F30)
  {
    v1 = sub_667D0(&qword_320430);
    sub_648E0(&qword_328F38, (uint64_t (*)(uint64_t))&type metadata accessor for ListItemView, (uint64_t)&protocol conformance descriptor for ListItemView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_328F30);
  }
  return result;
}

uint64_t *sub_1C65A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ImpressionMetrics(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_5C154(&qword_31F480);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = (int *)type metadata accessor for ListItemComponentModel(0);
    v21 = v20[5];
    v22 = &v15[v21];
    v23 = &v16[v21];
    v24 = type metadata accessor for ListItemViewModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = v20[6];
    v26 = &v15[v25];
    v27 = &v16[v25];
    v28 = *(_QWORD *)&v16[v25 + 24];
    if (v28)
    {
      v29 = *((_QWORD *)v27 + 4);
      *((_QWORD *)v26 + 3) = v28;
      *((_QWORD *)v26 + 4) = v29;
      (**(void (***)(void))(v28 - 8))();
    }
    else
    {
      v30 = *((_OWORD *)v27 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *((_OWORD *)v26 + 1) = v30;
      *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
    }
    v31 = v20[7];
    v32 = &v15[v31];
    v33 = &v16[v31];
    v34 = type metadata accessor for Models.Menu(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_5C154(&qword_322C80);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = *(int *)(a3 + 24);
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    v40 = *(_QWORD *)v39;
    v41 = v39[8];
    sub_64DD8(*(_QWORD *)v39, v41);
    *(_QWORD *)v38 = v40;
    v38[8] = v41;
  }
  return a1;
}

uint64_t sub_1C6824(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for ImpressionMetrics(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v9 = (int *)type metadata accessor for ListItemComponentModel(0);
  v10 = &v6[v9[5]];
  v11 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = &v6[v9[6]];
  if (*((_QWORD *)v12 + 3))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v12);
  v13 = &v6[v9[7]];
  v14 = type metadata accessor for Models.Menu(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  return sub_64FFC(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)), *((_BYTE *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t *sub_1C6970(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_5C154(&qword_31F480);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = (int *)type metadata accessor for ListItemComponentModel(0);
  v19 = v18[5];
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = v18[6];
  v24 = &v13[v23];
  v25 = &v14[v23];
  v26 = *(_QWORD *)&v14[v23 + 24];
  if (v26)
  {
    v27 = *((_QWORD *)v25 + 4);
    *((_QWORD *)v24 + 3) = v26;
    *((_QWORD *)v24 + 4) = v27;
    (**(void (***)(void))(v26 - 8))();
  }
  else
  {
    v28 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v28;
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
  }
  v29 = v18[7];
  v30 = &v13[v29];
  v31 = &v14[v29];
  v32 = type metadata accessor for Models.Menu(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_5C154(&qword_322C80);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v35 = *(int *)(a3 + 24);
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(_QWORD *)v37;
  v39 = v37[8];
  sub_64DD8(*(_QWORD *)v37, v39);
  *(_QWORD *)v36 = v38;
  v36[8] = v39;
  return a1;
}

uint64_t *sub_1C6BC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_11:
    v20 = sub_5C154(&qword_31F480);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_12:
  v21 = (int *)type metadata accessor for ListItemComponentModel(0);
  v22 = v21[5];
  v23 = &v13[v22];
  v24 = &v14[v22];
  v25 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = v21[6];
  v27 = &v13[v26];
  v28 = &v14[v26];
  v29 = *(_QWORD *)&v14[v26 + 24];
  if (*(_QWORD *)&v13[v26 + 24])
  {
    if (v29)
    {
      sub_65938(v27, v28);
      goto LABEL_19;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v27);
  }
  else if (v29)
  {
    *((_QWORD *)v27 + 3) = v29;
    *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
    (**(void (***)(char *, char *))(v29 - 8))(v27, v28);
    goto LABEL_19;
  }
  v30 = *(_OWORD *)v28;
  v31 = *((_OWORD *)v28 + 1);
  *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
  *(_OWORD *)v27 = v30;
  *((_OWORD *)v27 + 1) = v31;
LABEL_19:
  v32 = v21[7];
  v33 = &v13[v32];
  v34 = &v14[v32];
  v35 = type metadata accessor for Models.Menu(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_24;
  }
  if (v39)
  {
LABEL_24:
    v40 = sub_5C154(&qword_322C80);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_25:
  v41 = *(int *)(a3 + 24);
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)v43;
  v45 = v43[8];
  sub_64DD8(*(_QWORD *)v43, v45);
  v46 = *(_QWORD *)v42;
  v47 = v42[8];
  *(_QWORD *)v42 = v44;
  v42[8] = v45;
  sub_64FFC(v46, v47);
  return a1;
}

char *sub_1C6EFC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = (int *)type metadata accessor for ListItemComponentModel(0);
  v15 = v14[5];
  v16 = &v9[v15];
  v17 = &v10[v15];
  v18 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = v14[6];
  v20 = &v9[v19];
  v21 = &v10[v19];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  v23 = v14[7];
  v24 = &v9[v23];
  v25 = &v10[v23];
  v26 = type metadata accessor for Models.Menu(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_5C154(&qword_322C80);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = *(int *)(a3 + 24);
  v30 = &a1[v29];
  v31 = &a2[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  return a1;
}

char *sub_1C7120(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_10:
    v16 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_11:
  v17 = (int *)type metadata accessor for ListItemComponentModel(0);
  v18 = v17[5];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v21 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = v17[6];
  v23 = &v9[v22];
  v24 = &v10[v22];
  if (*(_QWORD *)&v9[v22 + 24])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  v26 = v17[7];
  v27 = &v9[v26];
  v28 = &v10[v26];
  v29 = type metadata accessor for Models.Menu(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v27, v28, v29);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    v34 = sub_5C154(&qword_322C80);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_19:
  v35 = *(int *)(a3 + 24);
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = *(_QWORD *)v37;
  LOBYTE(v37) = v37[8];
  v39 = *(_QWORD *)v36;
  v40 = v36[8];
  *(_QWORD *)v36 = v38;
  v36[8] = (char)v37;
  sub_64FFC(v39, v40);
  return a1;
}

uint64_t sub_1C7408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C7414);
}

uint64_t sub_1C7414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = sub_5C154(&qword_31F498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for ListItemComponentModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_1C74C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C74CC);
}

uint64_t sub_1C74CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_5C154(&qword_31F498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for ListItemComponentModel(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  return result;
}

void sub_1C7578(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_91328(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ListItemComponentModel(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\t";
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t *sub_1C7604(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  id v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for ImpressionMetrics(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5C154(&qword_31F480);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = (int *)type metadata accessor for ListItemComponentModel(0);
    v12 = v11[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for ListItemViewModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = v11[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(uint64_t *)((char *)a2 + v16 + 24);
    if (v19)
    {
      v20 = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 3) = v19;
      *((_QWORD *)v17 + 4) = v20;
      (**(void (***)(void))(v19 - 8))();
    }
    else
    {
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v21;
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    }
    v22 = v11[7];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for Models.Menu(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_5C154(&qword_322C80);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = *(int *)(a3 + 20);
    v29 = *(int *)(a3 + 24);
    v30 = (uint64_t *)((char *)a1 + v28);
    v31 = (char *)a2 + v28;
    v33 = *(void **)v31;
    v32 = *((_QWORD *)v31 + 1);
    *v30 = v33;
    v30[1] = v32;
    v34 = (char *)a1 + v29;
    v35 = (char *)a2 + v29;
    v36 = *(uint64_t *)((char *)a2 + v29);
    v37 = v35[8];
    v38 = v33;
    sub_64DD8(v36, v37);
    *(_QWORD *)v34 = v36;
    v34[8] = v37;
  }
  return a1;
}

uint64_t sub_1C781C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for ImpressionMetrics(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = (int *)type metadata accessor for ListItemComponentModel(0);
  v7 = a1 + v6[5];
  v8 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)(a1 + v6[6]);
  if (v9[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v9);
  v10 = a1 + v6[7];
  v11 = type metadata accessor for Models.Menu(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);

  return sub_64FFC(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 8));
}

char *sub_1C7924(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  id v36;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for ListItemComponentModel(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = v9[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_QWORD *)&a2[v14 + 24];
  if (v17)
  {
    v18 = *((_QWORD *)v16 + 4);
    *((_QWORD *)v15 + 3) = v17;
    *((_QWORD *)v15 + 4) = v18;
    (**(void (***)(void))(v17 - 8))();
  }
  else
  {
    v19 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v19;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  }
  v20 = v9[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for Models.Menu(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_5C154(&qword_322C80);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = *(int *)(a3 + 20);
  v27 = *(int *)(a3 + 24);
  v28 = &a1[v26];
  v29 = &a2[v26];
  v31 = *(void **)v29;
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  v32 = &a1[v27];
  v33 = &a2[v27];
  v34 = *(_QWORD *)&a2[v27];
  v35 = v33[8];
  v36 = v31;
  sub_64DD8(v34, v35);
  *(_QWORD *)v32 = v34;
  v32[8] = v35;
  return a1;
}

char *sub_1C7B10(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for ListItemComponentModel(0);
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v12[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)&a2[v17 + 24];
  if (*(_QWORD *)&a1[v17 + 24])
  {
    if (v20)
    {
      sub_65938(v18, v19);
      goto LABEL_14;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
  }
  else if (v20)
  {
    *((_QWORD *)v18 + 3) = v20;
    *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
    (**(void (***)(char *, char *))(v20 - 8))(v18, v19);
    goto LABEL_14;
  }
  v21 = *(_OWORD *)v19;
  v22 = *((_OWORD *)v19 + 1);
  *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  *(_OWORD *)v18 = v21;
  *((_OWORD *)v18 + 1) = v22;
LABEL_14:
  v23 = v12[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for Models.Menu(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_19;
  }
  if (v30)
  {
LABEL_19:
    v31 = sub_5C154(&qword_322C80);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_20:
  v32 = *(int *)(a3 + 20);
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(void **)&a1[v32];
  v36 = *(void **)&a2[v32];
  *(_QWORD *)v33 = v36;
  v37 = v36;

  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  v38 = *(int *)(a3 + 24);
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = *(_QWORD *)v40;
  v42 = v40[8];
  sub_64DD8(*(_QWORD *)v40, v42);
  v43 = *(_QWORD *)v39;
  v44 = v39[8];
  *(_QWORD *)v39 = v41;
  v39[8] = v42;
  sub_64FFC(v43, v44);
  return a1;
}

char *sub_1C7DDC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for ListItemComponentModel(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = v9[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  v18 = v9[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for Models.Menu(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_5C154(&qword_322C80);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  return a1;
}

char *sub_1C7F90(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for ListItemComponentModel(0);
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = v12[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (*(_QWORD *)&a1[v17 + 24])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  v21 = v12[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for Models.Menu(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_14;
  }
  if (v28)
  {
LABEL_14:
    v29 = sub_5C154(&qword_322C80);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_15:
  v30 = *(int *)(a3 + 20);
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = *(void **)&a1[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;

  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  v34 = *(int *)(a3 + 24);
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = *(_QWORD *)v36;
  LOBYTE(v36) = v36[8];
  v38 = *(_QWORD *)v35;
  v39 = v35[8];
  *(_QWORD *)v35 = v37;
  v35[8] = (char)v36;
  sub_64FFC(v38, v39);
  return a1;
}

uint64_t sub_1C820C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C8218);
}

uint64_t sub_1C8218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for ListItemComponentModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1C82A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C82AC);
}

uint64_t sub_1C82AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ListItemComponentModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t sub_1C8324(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for ListItemComponentModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_264DF0;
    v4[2] = "\t";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1C83A0()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_667D0(&qword_328ED8);
  v3 = sub_667D0(&qword_321E90);
  v4 = type metadata accessor for ListItemComponent.ListItemButtonStyle(255);
  v5 = sub_67060(&qword_321E98, &qword_321E90, (uint64_t)&protocol conformance descriptor for Button<A>);
  v6 = sub_648E0(&qword_328EE0, type metadata accessor for ListItemComponent.ListItemButtonStyle, (uint64_t)&unk_264E08);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onDrag(_:)>>, 1);
}

uint64_t sub_1C8470()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  unint64_t v4;

  v0 = sub_667D0(&qword_328EE8);
  v3 = sub_667D0(&qword_328EF8);
  v4 = sub_1C6324();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
}

uint64_t sub_1C84E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B97C8, 1);
}

unint64_t sub_1C84F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3290B8;
  if (!qword_3290B8)
  {
    v1 = sub_667D0(&qword_329098);
    sub_648E0(&qword_321F78, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_67060(&qword_328B00, &qword_328B08, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3290B8);
  }
  return result;
}

uint64_t sub_1C85B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1C85C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3290B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C860C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3290C0;
  if (!qword_3290C0)
  {
    v1 = sub_667D0(&qword_3290B0);
    sub_1C8690();
    sub_67060(&qword_321F10, &qword_321F18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3290C0);
  }
  return result;
}

unint64_t sub_1C8690()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_3290C8;
  if (!qword_3290C8)
  {
    v1 = sub_667D0(&qword_3290A8);
    v2[0] = sub_667D0(&qword_329098);
    v2[1] = type metadata accessor for AutomaticHoverEffect(255);
    v2[2] = sub_1C84F4();
    v2[3] = sub_648E0(&qword_321F80, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    sub_648E0(&qword_3290D0, type metadata accessor for SwipeActionsViewModifier, (uint64_t)&protocol conformance descriptor for SwipeActionsViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3290C8);
  }
  return result;
}

uint64_t sub_1C8780(char *a1, char *a2)
{
  return sub_196478(*a1, *a2);
}

Swift::Int sub_1C878C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x746E65746E69;
  else
    v2 = 0x65526E4972616579;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xEC00000077656976;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1C8810(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x746E65746E69;
  else
    v2 = 0x65526E4972616579;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xEC00000077656976;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1C8870(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x746E65746E69;
  else
    v3 = 0x65526E4972616579;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEC00000077656976;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1C88F0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6C08, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1C894C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65526E4972616579;
  if (*v1)
    v2 = 0x746E65746E69;
  v3 = 0xEC00000077656976;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1C8990()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E65746E69;
  else
    return 0x65526E4972616579;
}

uint64_t sub_1C89D0@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6C08, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1C8A30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C8F40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C8A58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C8F40();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1C8A80()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 12383, 0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1C8AC4(uint64_t a1)
{
  return String.hash(into:)(a1, 12383, 0xE200000000000000);
}

Swift::Int sub_1C8AD0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 12383, 0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1C8B10@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6C58, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1C8B60(_QWORD *a1@<X8>)
{
  *a1 = 12383;
  a1[1] = 0xE200000000000000;
}

uint64_t sub_1C8B70@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E7098, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1C8BC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C8FD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C8BEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C8FD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowAction.YearInReviewDestination.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40[2];
  _OWORD v41[2];
  uint64_t v42;
  _QWORD *v43;

  v37 = a2;
  v39 = sub_5C154(&qword_3290D8);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v34 = (uint64_t *)((char *)&v32 - v5);
  v35 = sub_5C154(&qword_3290E0);
  v6 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_3290E8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_66898(a1, v13);
  v15 = sub_1C8F40();
  v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s23YearInReviewDestinationV10CodingKeysON, &_s23YearInReviewDestinationV10CodingKeysON, v15, v13, v14);
  if (v16)
  {
    v28 = a1;
  }
  else
  {
    v33 = v6;
    v43 = a1;
    v17 = v10;
    v19 = v38;
    v18 = v39;
    LOBYTE(v40[0]) = 0;
    v20 = v9;
    if ((KeyedDecodingContainer.contains(_:)(v40, v9) & 1) != 0)
    {
      LOBYTE(v40[0]) = 0;
      v21 = sub_1C8FD0();
      v22 = v8;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s23YearInReviewDestinationV16LegacyCodingKeysON, v40, v20, &_s23YearInReviewDestinationV16LegacyCodingKeysON, v21);
      v38 = v12;
      v23 = sub_1C8F84();
      v25 = v34;
      v24 = v35;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v18, v26, v35, v18, v23);
      CodeAnyIntentModel.wrappedValue.getter(v40, v18);
      (*(void (**)(_QWORD *, uint64_t))(v36 + 8))(v25, v18);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v24);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v38, v20);
    }
    else
    {
      LOBYTE(v40[0]) = 1;
      v27 = sub_1C8F84();
      KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v18, v40, v9, v18, v27);
      CodeAnyIntentModel.wrappedValue.getter(v40, v18);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v18);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v9);
    }
    sub_5DC98(v40, (uint64_t)v41);
    v30 = v37;
    v28 = v43;
    v31 = v41[1];
    *v37 = v41[0];
    v30[1] = v31;
    *((_QWORD *)v30 + 4) = v42;
  }
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v28);
}

unint64_t sub_1C8F40()
{
  unint64_t result;

  result = qword_3290F0;
  if (!qword_3290F0)
  {
    result = swift_getWitnessTable(&unk_2651F4, &_s23YearInReviewDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_3290F0);
  }
  return result;
}

unint64_t sub_1C8F84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3290F8;
  if (!qword_3290F8)
  {
    v1 = sub_667D0(&qword_3290D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v1);
    atomic_store(result, (unint64_t *)&qword_3290F8);
  }
  return result;
}

unint64_t sub_1C8FD0()
{
  unint64_t result;

  result = qword_329100;
  if (!qword_329100)
  {
    result = swift_getWitnessTable(&unk_2651A4, &_s23YearInReviewDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_329100);
  }
  return result;
}

unint64_t sub_1C9018()
{
  unint64_t result;

  result = qword_329108;
  if (!qword_329108)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.YearInReviewDestination, &type metadata for FlowAction.YearInReviewDestination);
    atomic_store(result, (unint64_t *)&qword_329108);
  }
  return result;
}

uint64_t sub_1C905C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return FlowAction.YearInReviewDestination.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for FlowAction.YearInReviewDestination()
{
  return &type metadata for FlowAction.YearInReviewDestination;
}

uint64_t _s23YearInReviewDestinationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C90CC + 4 * byte_264F05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C9100 + 4 * byte_264F00[v4]))();
}

uint64_t sub_1C9100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C9108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C9110);
  return result;
}

uint64_t sub_1C911C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C9124);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C9128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C9130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s23YearInReviewDestinationV10CodingKeysOMa()
{
  return &_s23YearInReviewDestinationV10CodingKeysON;
}

uint64_t _s23YearInReviewDestinationV16LegacyCodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C918C + 4 * byte_264F0A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C91AC + 4 * byte_264F0F[v4]))();
}

_BYTE *sub_1C918C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C91AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C91B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C91BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C91C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C91CC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s23YearInReviewDestinationV16LegacyCodingKeysOMa()
{
  return &_s23YearInReviewDestinationV16LegacyCodingKeysON;
}

unint64_t sub_1C91EC()
{
  unint64_t result;

  result = qword_329110;
  if (!qword_329110)
  {
    result = swift_getWitnessTable(&unk_26508C, &_s23YearInReviewDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_329110);
  }
  return result;
}

unint64_t sub_1C9234()
{
  unint64_t result;

  result = qword_329118;
  if (!qword_329118)
  {
    result = swift_getWitnessTable(&unk_26517C, &_s23YearInReviewDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_329118);
  }
  return result;
}

unint64_t sub_1C927C()
{
  unint64_t result;

  result = qword_329120;
  if (!qword_329120)
  {
    result = swift_getWitnessTable(&unk_264FC4, &_s23YearInReviewDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_329120);
  }
  return result;
}

unint64_t sub_1C92C4()
{
  unint64_t result;

  result = qword_329128;
  if (!qword_329128)
  {
    result = swift_getWitnessTable(&unk_264FEC, &_s23YearInReviewDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_329128);
  }
  return result;
}

unint64_t sub_1C930C()
{
  unint64_t result;

  result = qword_329130;
  if (!qword_329130)
  {
    result = swift_getWitnessTable(&unk_2650B4, &_s23YearInReviewDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_329130);
  }
  return result;
}

unint64_t sub_1C9354()
{
  unint64_t result;

  result = qword_329138[0];
  if (!qword_329138[0])
  {
    result = swift_getWitnessTable(&unk_2650DC, &_s23YearInReviewDestinationV10CodingKeysON);
    atomic_store(result, qword_329138);
  }
  return result;
}

double StoreCatalog.resources.getter()
{
  uint64_t v0;
  double result;

  v0 = ContentInfoBuildOptions.rawValue.getter();
  *(_QWORD *)&result = swift_bridgeObjectRetain(v0).n128_u64[0];
  return result;
}

double sub_1C93AC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  double result;

  type metadata accessor for StoreCatalog(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  v5 = ContentInfoBuildOptions.rawValue.getter();
  *a4 = v5;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v5).n128_u64[0];
  return result;
}

uint64_t sub_1C93F4(_QWORD *a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain(*a1);
  return FigaroProvider.contextMenuActionTypeToIndexDict.setter(v1);
}

uint64_t sub_1C941C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_265460, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1C9450(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_265460, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t StoreCatalog.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a5;
  v21 = a2;
  v7 = type metadata accessor for StoreCatalog.CodingKeys(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_265460, v7);
  v9 = type metadata accessor for KeyedDecodingContainer(0, v7, WitnessTable);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - v11;
  v14 = a1[3];
  v13 = a1[4];
  sub_66898(a1, v14);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v14, v13);
  if (!v5)
  {
    v15 = v20;
    v16 = type metadata accessor for _MResourceDecoder_Many(0, v21);
    v17 = swift_getWitnessTable(&protocol conformance descriptor for _MResourceDecoder_Many<A>, v16);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, v16, v18, v9, v16, v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *v15 = v22;
  }
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
}

uint64_t sub_1C95EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return StoreCatalog.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

unint64_t static StoreCatalogIntent.kind.getter()
{
  return 0xD000000000000012;
}

unint64_t sub_1C9620@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = static StoreCatalogIntent.kind.getter();
  *a1 = 0xD000000000000012;
  a1[1] = v3;
  return result;
}

unint64_t StoreCatalogIntent.jsRepresentation(in:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t result;
  _BYTE v25[128];
  unint64_t v26;

  v6 = type metadata accessor for MResourceType(0, a3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *v3;
  v11 = sub_5C154(&qword_323970);
  inited = swift_initStackObject(v11, v25);
  *(_OWORD *)(inited + 16) = xmmword_255F00;
  *(_QWORD *)(inited + 32) = 0x7344496D616461;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v13 = sub_5C154(&qword_31F730);
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)(inited + 80) = 0x7079547465737361;
  *(_QWORD *)(inited + 88) = 0xE900000000000065;
  v14 = swift_bridgeObjectRetain(v10);
  v15 = dispatch thunk of static MResource.type.getter(v14);
  v16 = MResourceType.name.getter(v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = v16;
  *(_QWORD *)(inited + 104) = v18;
  v26 = sub_52E00(inited);
  v19 = a1;
  v20 = sub_5C154(&qword_320660);
  v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v26, v20);
  v22 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", v21, v19);
  swift_unknownObjectRelease(v21);

  a2[3] = sub_5C154(&qword_323810);
  result = sub_E0584();
  a2[4] = result;
  *a2 = v22;
  return result;
}

unint64_t sub_1C9810@<X0>(void *a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  return StoreCatalogIntent.jsRepresentation(in:)(a1, a2, a3);
}

uint64_t type metadata accessor for StoreCatalog.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoreCatalog.CodingKeys);
}

uint64_t sub_1C9838()
{
  return 8;
}

_QWORD *sub_1C9844(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for StoreCatalog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoreCatalog);
}

uint64_t type metadata accessor for StoreCatalogIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoreCatalogIntent);
}

uint64_t sub_1C9868(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C98A8 + 4 * byte_265250[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C98C8 + 4 * byte_265255[v4]))();
}

_BYTE *sub_1C98A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C98C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C98D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C98D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C98E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C98E8(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1C98F4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_265438, a1);
}

uint64_t sub_1C9904(uint64_t a1)
{
  return swift_getWitnessTable(&unk_2653A8, a1);
}

uint64_t sub_1C9914(uint64_t a1)
{
  return swift_getWitnessTable(&unk_2653D0, a1);
}

uint64_t AssetActionImplementation.init(pageData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t AssetActionImplementation.perform(_:asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v5 = sub_5C154(&qword_329740);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AssetAction(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AssetActionImplementation(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  sub_1C9C40(v3, (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v14 + v17 + v16) & ~v17;
  v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_2F2538, v19 + 8, v15 | v17 | 7);
  sub_1C9C88((uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v18, v11, v8);
  v21 = v29;
  *(_QWORD *)(v20 + v19) = v29;
  sub_5C154(&qword_3208F8);
  v22 = swift_retain(v21);
  v23 = Promise.__allocating_init()(v22);
  v24 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 1, 1, v24);
  v25 = (_QWORD *)swift_allocObject(&unk_2F2560, 56, 7);
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = &unk_3292C8;
  v25[5] = v20;
  v25[6] = v23;
  swift_retain(v23);
  v26 = sub_174AF8((uint64_t)v7, (uint64_t)&unk_320900, (uint64_t)v25);
  swift_release(v26);
  return v23;
}

uint64_t type metadata accessor for AssetActionImplementation(uint64_t a1)
{
  uint64_t result;

  result = qword_329328;
  if (!qword_329328)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AssetActionImplementation);
  return result;
}

uint64_t sub_1C9BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = type metadata accessor for MainActor(0);
  v4[2] = v8;
  v4[3] = static MainActor.shared.getter(v8);
  v9 = (_QWORD *)swift_task_alloc(dword_32936C);
  v4[4] = v9;
  *v9 = v4;
  v9[1] = sub_B3ACC;
  return sub_1C9D84(a1, a3, a4);
}

uint64_t sub_1C9C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssetActionImplementation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssetActionImplementation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for AssetAction(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1 + v5;
  v10 = v1 + v8;
  v11 = *(_QWORD *)(v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_3292C4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_7BFF8;
  return sub_1C9BB0(a1, v9, v10, v11);
}

uint64_t sub_1C9D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v5 = type metadata accessor for Date(0);
  v4[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[12] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v8);
  v4[14] = swift_task_alloc(v8);
  v9 = type metadata accessor for URL(0);
  v4[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[16] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[17] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v12);
  v4[19] = swift_task_alloc(v12);
  v13 = type metadata accessor for AssetAction(0);
  v4[20] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[21] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v4[22] = v15;
  v4[23] = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v4[24] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v4[25] = v17;
  v4[26] = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_329740);
  v4[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AssetAction.Kind(0, v19);
  v4[28] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v4[29] = v21;
  v4[30] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MainActor(0);
  v4[31] = v22;
  v4[32] = static MainActor.shared.getter(v22);
  v23 = dispatch thunk of Actor.unownedExecutor.getter(v22, &protocol witness table for MainActor);
  v4[33] = v23;
  v4[34] = v24;
  return swift_task_switch(sub_1C9F10, v23, v24);
}

uint64_t sub_1C9F10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v0[35] = AssetAction.assetID.getter();
  v0[36] = v1;
  v2 = sub_5C154(&qword_329370);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[37] = v3;
  *v3 = v0;
  v3[1] = sub_1C9F94;
  return BaseObjectGraph.inject<A>(_:)(v0 + 2, v2, v2);
}

uint64_t sub_1C9F94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[36]);
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CB678;
  }
  else
  {
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CA000;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1CA000()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[39] = v0[2];
  v1 = type metadata accessor for ProfileRestrictions(0);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[40] = v2;
  *v2 = v0;
  v2[1] = sub_1CA07C;
  return BaseObjectGraph.inject<A>(_:)(v0 + 3, v1, v1);
}

uint64_t sub_1CA07C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_QWORD *)(*(_QWORD *)v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[36]);
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CB714;
  }
  else
  {
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CA0E8;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1CA0E8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __n128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  char v246;
  id v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(uint64_t, uint64_t, uint64_t);
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  id v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  uint64_t v293;

  v1 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 336) = v1;
  if ((AssetAction.isExplicit.getter() & 1) != 0
    && (dispatch thunk of ProfileRestrictions.isExplicitContentAllowed.getter() & 1) == 0)
  {
    swift_release(*(_QWORD *)(v0 + 256));
    if (qword_31E560 != -1)
      swift_once(&qword_31E560, sub_126518);
    v31 = *(_QWORD *)(v0 + 288);
    v32 = type metadata accessor for Logger(0);
    sub_5240C(v32, (uint64_t)qword_324FC8);
    swift_bridgeObjectRetain(v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter();
    v36 = os_log_type_enabled(v34, v35);
    v37 = *(_QWORD *)(v0 + 312);
    v38 = *(_QWORD *)(v0 + 288);
    if (v36)
    {
      v286 = v1;
      v39 = *(_QWORD *)(v0 + 280);
      v281 = *(_QWORD *)(v0 + 312);
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v293 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(v38);
      *(_QWORD *)(v0 + 40) = sub_57CD8(v39, v38, &v293);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v38, 3);
      _os_log_impl(&dword_0, v34, v35, "Skipping the action for assetID: %s because the book is an explicit book and the restriction is set to CLEAN.", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      swift_unknownObjectRelease(v281);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 288), 2);

      swift_unknownObjectRelease(v37);
    }
    v54 = *(_QWORD *)(v0 + 48);
    v55 = enum case for ActionOutcome.performed(_:);
    v23 = type metadata accessor for ActionOutcome(0);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
    v25 = v54;
    v26 = v55;
    goto LABEL_19;
  }
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 224);
  AssetAction.kind.getter();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 != enum case for AssetAction.Kind.addTo(_:))
  {
    if (v5 == enum case for AssetAction.Kind.buy(_:))
    {
      v27 = *(_QWORD **)(v0 + 240);
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v0 + 232) + 96))(v27, *(_QWORD *)(v0 + 224));
      *(_QWORD *)(v0 + 344) = *v27;
      v28 = sub_5C154(&qword_31FE20);
      v29 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
      *(_QWORD *)(v0 + 352) = v29;
      *v29 = v0;
      v29[1] = sub_1CB3C0;
      return BaseObjectGraph.inject<A>(_:)(v0 + 32, v28, v28);
    }
    if (v5 == enum case for AssetAction.Kind.cancelDownload(_:))
    {
      v6 = *(_QWORD *)(v0 + 312);
      v42 = v1;
      v44 = *(_QWORD *)(v0 + 280);
      v43 = *(_QWORD *)(v0 + 288);
      v46 = *(_QWORD *)(v0 + 232);
      v45 = *(id **)(v0 + 240);
      v47 = *(_QWORD *)(v0 + 216);
      v48 = *(_QWORD *)(v0 + 224);
      v285 = *(_QWORD *)(v0 + 48);
      swift_release(*(_QWORD *)(v0 + 256));
      (*(void (**)(id *, uint64_t))(v46 + 96))(v45, v48);

      v49 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v47, 1, 1, v49);
      v50 = swift_unknownObjectRetain(v6);
      v51 = static MainActor.shared.getter(v50);
      v52 = (_QWORD *)swift_allocObject(&unk_2F26A0, 56, 7);
      v52[2] = v51;
      v52[3] = &protocol witness table for MainActor;
      v52[4] = v6;
      v52[5] = v44;
      v52[6] = v43;
      v53 = sub_1D979C(v47, (uint64_t)&unk_3293E0, (uint64_t)v52);
LABEL_16:
      v21 = v53;

      goto LABEL_6;
    }
    if (v5 == enum case for AssetAction.Kind.download(_:))
    {
      v63 = *(_QWORD *)(v0 + 312);
      v273 = *(_QWORD *)(v0 + 288);
      v266 = *(_QWORD *)(v0 + 280);
      v65 = *(_QWORD *)(v0 + 232);
      v64 = *(uint64_t **)(v0 + 240);
      v287 = v1;
      v66 = *(_QWORD *)(v0 + 216);
      v67 = *(_QWORD *)(v0 + 224);
      v68 = *(_QWORD *)(v0 + 208);
      v240 = *(_QWORD *)(v0 + 200);
      v243 = v66;
      v237 = v68;
      v238 = *(_QWORD *)(v0 + 192);
      v69 = *(_QWORD *)(v0 + 64);
      v70 = *(_QWORD *)(v0 + 72);
      v235 = v69;
      v282 = *(_QWORD *)(v0 + 48);
      swift_release(*(_QWORD *)(v0 + 256));
      (*(void (**)(uint64_t *, uint64_t))(v65 + 96))(v64, v67);
      v251 = v64[1];
      v256 = *v64;
      v260 = *((_BYTE *)v64 + 16);
      v71 = (void *)v64[3];
      v72 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v66, 1, 1, v72);
      sub_1C9C40(v70, v68);
      v247 = v71;
      swift_retain(v69);
      v73 = swift_unknownObjectRetain(v63);
      v74 = static MainActor.shared.getter(v73);
      v75 = *(unsigned __int8 *)(v238 + 80);
      v76 = (v75 + 40) & ~v75;
      v77 = (v240 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
      v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8;
      v79 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8;
      v80 = (v79 + 15) & 0xFFFFFFFFFFFFFFF8;
      v81 = (_QWORD *)swift_allocObject(&unk_2F26C8, v80 + 17, v75 | 7);
      v81[2] = v74;
      v81[3] = &protocol witness table for MainActor;
      v81[4] = v71;
      sub_1C9C88(v237, (uint64_t)v81 + v76);
      *(_QWORD *)((char *)v81 + v77) = v235;
      v82 = (_QWORD *)((char *)v81 + v78);
      *v82 = v256;
      v82[1] = v251;
      *(_QWORD *)((char *)v81 + v79) = v63;
      v83 = (char *)v81 + v80;
      *(_QWORD *)v83 = v266;
      *((_QWORD *)v83 + 1) = v273;
      v83[16] = v260;
      v84 = sub_16CC20(v243, (uint64_t)&unk_3293F0, (uint64_t)v81);

      swift_unknownObjectRelease(v63);
      v85 = v247;
    }
    else
    {
      if (v5 == enum case for AssetAction.Kind.preview(_:))
      {
        v86 = *(_QWORD *)(v0 + 312);
        v288 = v1;
        v88 = *(_QWORD *)(v0 + 280);
        v87 = *(_QWORD *)(v0 + 288);
        v90 = *(_QWORD *)(v0 + 232);
        v89 = *(void ***)(v0 + 240);
        v91 = *(_QWORD *)(v0 + 216);
        v92 = *(_QWORD *)(v0 + 224);
        v93 = *(_QWORD *)(v0 + 64);
        v282 = *(_QWORD *)(v0 + 48);
        swift_release(*(_QWORD *)(v0 + 256));
        (*(void (**)(void **, uint64_t))(v90 + 96))(v89, v92);
        v94 = *v89;
        v95 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v91, 1, 1, v95);
        swift_retain(v93);
        swift_unknownObjectRetain(v86);
        v96 = v94;
        v97 = static MainActor.shared.getter(v96);
        v98 = (_QWORD *)swift_allocObject(&unk_2F26F0, 72, 7);
        v98[2] = v97;
        v98[3] = &protocol witness table for MainActor;
        v98[4] = v93;
        v98[5] = v86;
        v98[6] = v88;
        v98[7] = v87;
        v98[8] = v96;
        v84 = sub_1D979C(v91, (uint64_t)&unk_329400, (uint64_t)v98);

        swift_unknownObjectRelease(v86);
        goto LABEL_26;
      }
      if (v5 == enum case for AssetAction.Kind.removeFrom(_:))
      {
        v6 = *(_QWORD *)(v0 + 312);
        v274 = *(_QWORD *)(v0 + 280);
        v283 = *(_QWORD *)(v0 + 288);
        v100 = *(_QWORD *)(v0 + 232);
        v99 = *(uint64_t **)(v0 + 240);
        v9 = *(_QWORD *)(v0 + 216);
        v101 = *(_QWORD *)(v0 + 224);
        v102 = *(_QWORD *)(v0 + 64);
        v285 = *(_QWORD *)(v0 + 48);
        swift_release(*(_QWORD *)(v0 + 256));
        (*(void (**)(uint64_t *, uint64_t))(v100 + 96))(v99, v101);
        v103 = *v99;
        v104 = v99[1];
        v14 = v1;
        v105 = *((_BYTE *)v99 + 16);
        LOBYTE(v99) = *((_BYTE *)v99 + 17);
        v106 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v9, 1, 1, v106);
        swift_retain(v102);
        v107 = swift_unknownObjectRetain(v6);
        v108 = static MainActor.shared.getter(v107);
        v19 = swift_allocObject(&unk_2F2790, 82, 7);
        *(_QWORD *)(v19 + 16) = v108;
        *(_QWORD *)(v19 + 24) = &protocol witness table for MainActor;
        *(_QWORD *)(v19 + 32) = v102;
        *(_QWORD *)(v19 + 40) = v274;
        *(_QWORD *)(v19 + 48) = v283;
        *(_QWORD *)(v19 + 56) = v103;
        *(_QWORD *)(v19 + 64) = v104;
        *(_QWORD *)(v19 + 72) = v6;
        *(_BYTE *)(v19 + 80) = v105;
        *(_BYTE *)(v19 + 81) = (_BYTE)v99;
        v20 = &unk_329440;
        goto LABEL_5;
      }
      if (v5 == enum case for AssetAction.Kind.sample(_:))
      {
        v257 = *(_QWORD *)(v0 + 280);
        v261 = *(_QWORD *)(v0 + 288);
        v236 = *(_QWORD *)(v0 + 312);
        v110 = *(_QWORD *)(v0 + 232);
        v109 = *(_QWORD *)(v0 + 240);
        v289 = v1;
        v111 = *(_QWORD *)(v0 + 216);
        v112 = *(_QWORD *)(v0 + 224);
        v113 = *(_QWORD *)(v0 + 184);
        v239 = *(_QWORD *)(v0 + 176);
        v114 = *(_QWORD *)(v0 + 152);
        v275 = *(_QWORD *)(v0 + 168);
        v284 = *(_QWORD *)(v0 + 160);
        v115 = *(_QWORD *)(v0 + 144);
        v234 = v115;
        v241 = *(_QWORD *)(v0 + 136);
        v116 = *(_QWORD *)(v0 + 120);
        v117 = *(_QWORD *)(v0 + 128);
        v231 = *(_QWORD *)(v0 + 56);
        v232 = *(_QWORD *)(v0 + 64);
        v267 = *(_QWORD *)(v0 + 48);
        swift_release(*(_QWORD *)(v0 + 256));
        (*(void (**)(uint64_t, uint64_t))(v110 + 96))(v109, v112);
        v248 = v114;
        v252 = *(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 32);
        v118 = v109;
        v119 = v116;
        v233 = v116;
        v252(v114, v118, v116);
        v120 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v111, 1, 1, v120);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v275 + 16))(v113, v231, v284);
        v121 = v117;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 16))(v115, v114, v119);
        swift_retain(v232);
        v122 = swift_unknownObjectRetain(v236);
        v123 = static MainActor.shared.getter(v122);
        v124 = *(unsigned __int8 *)(v275 + 80);
        v125 = (v124 + 48) & ~v124;
        v126 = (v239 + v125 + 7) & 0xFFFFFFFFFFFFFFF8;
        v127 = (v126 + 15) & 0xFFFFFFFFFFFFFFF8;
        v128 = *(unsigned __int8 *)(v121 + 80);
        v129 = (v128 + v127 + 8) & ~v128;
        v130 = (char *)swift_allocObject(&unk_2F2718, v129 + v241, v124 | v128 | 7);
        *((_QWORD *)v130 + 2) = v123;
        *((_QWORD *)v130 + 3) = &protocol witness table for MainActor;
        *((_QWORD *)v130 + 4) = v257;
        *((_QWORD *)v130 + 5) = v261;
        (*(void (**)(char *, uint64_t, uint64_t))(v275 + 32))(&v130[v125], v113, v284);
        *(_QWORD *)&v130[v126] = v232;
        *(_QWORD *)&v130[v127] = v236;
        v252((uint64_t)&v130[v129], v234, v233);
        v131 = sub_1D979C(v111, (uint64_t)&unk_329410, (uint64_t)v130);

        swift_release(v131);
        swift_unknownObjectRelease(v236);
        (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v248, v233);
        v22 = enum case for ActionOutcome.performed(_:);
        v23 = type metadata accessor for ActionOutcome(0);
        v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
        v25 = v267;
        goto LABEL_7;
      }
      if (v5 != enum case for AssetAction.Kind.update(_:))
      {
        if (v5 == enum case for AssetAction.Kind.opinion(_:))
        {
          v6 = *(_QWORD *)(v0 + 312);
          v151 = *(_QWORD *)(v0 + 288);
          v153 = *(_QWORD *)(v0 + 232);
          v152 = *(_BYTE **)(v0 + 240);
          v154 = *(_QWORD *)(v0 + 216);
          v155 = *(_QWORD *)(v0 + 224);
          v42 = v1;
          v156 = *(_QWORD *)(v0 + 64);
          v285 = *(_QWORD *)(v0 + 48);
          swift_release(*(_QWORD *)(v0 + 256));
          v157 = swift_bridgeObjectRelease(v151);
          (*(void (**)(_BYTE *, uint64_t, __n128))(v153 + 96))(v152, v155, v157);
          LOBYTE(v151) = *v152;
          v158 = type metadata accessor for TaskPriority(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 56))(v154, 1, 1, v158);
          v159 = swift_retain(v156);
          v160 = static MainActor.shared.getter(v159);
          v161 = swift_allocObject(&unk_2F2678, 41, 7);
          *(_QWORD *)(v161 + 16) = v160;
          *(_QWORD *)(v161 + 24) = &protocol witness table for MainActor;
          *(_QWORD *)(v161 + 32) = v156;
          *(_BYTE *)(v161 + 40) = v151;
          v53 = sub_16CC20(v154, (uint64_t)&unk_3293D0, v161);
          goto LABEL_16;
        }
        if (v5 == enum case for AssetAction.Kind.setFinishedDate(_:))
        {
          v254 = *(_QWORD *)(v0 + 312);
          v277 = *(_QWORD *)(v0 + 288);
          v269 = *(_QWORD *)(v0 + 280);
          v291 = v1;
          v163 = *(_QWORD *)(v0 + 232);
          v162 = *(_QWORD *)(v0 + 240);
          v165 = *(_QWORD *)(v0 + 216);
          v164 = *(_QWORD *)(v0 + 224);
          v242 = v165;
          v166 = *(_QWORD *)(v0 + 104);
          v167 = *(_QWORD *)(v0 + 112);
          v168 = *(_QWORD *)(v0 + 88);
          v263 = *(_QWORD *)(v0 + 96);
          v169 = *(_QWORD *)(v0 + 80);
          v170 = *(_QWORD *)(v0 + 64);
          v282 = *(_QWORD *)(v0 + 48);
          swift_release(*(_QWORD *)(v0 + 256));
          (*(void (**)(uint64_t, uint64_t))(v163 + 96))(v162, v164);
          v245 = *(_BYTE *)(v162 + *(int *)(sub_5C154(&qword_3293A0) + 48));
          v171 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 32);
          v172 = v167;
          v250 = v167;
          v171(v167, v162, v169);
          v173 = type metadata accessor for TaskPriority(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 56))(v165, 1, 1, v173);
          v174 = v166;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16))(v166, v172, v169);
          swift_retain(v170);
          v175 = v254;
          v176 = swift_unknownObjectRetain(v254);
          v177 = static MainActor.shared.getter(v176);
          v178 = *(unsigned __int8 *)(v168 + 80);
          v179 = (v178 + 72) & ~v178;
          v180 = swift_allocObject(&unk_2F2628, v179 + v263, v178 | 7);
          *(_QWORD *)(v180 + 16) = v177;
          *(_QWORD *)(v180 + 24) = &protocol witness table for MainActor;
          *(_BYTE *)(v180 + 32) = v245;
          *(_QWORD *)(v180 + 40) = v170;
          *(_QWORD *)(v180 + 48) = v254;
          *(_QWORD *)(v180 + 56) = v269;
          *(_QWORD *)(v180 + 64) = v277;
          v171(v180 + v179, v174, v169);
          v181 = &unk_3293B0;
        }
        else
        {
          if (v5 != enum case for AssetAction.Kind.setFinishedYear(_:))
          {
            if (v5 != enum case for AssetAction.Kind.open(_:))
            {
              v214 = *(_QWORD *)(v0 + 312);
              v215 = *(_QWORD *)(v0 + 288);
              if (v5 != enum case for AssetAction.Kind.unsetFinishedDate(_:))
              {
                v224 = *(_QWORD *)(v0 + 256);
                v226 = *(_QWORD *)(v0 + 232);
                v225 = *(_QWORD *)(v0 + 240);
                v227 = *(_QWORD *)(v0 + 224);
                v228 = *(_QWORD *)(v0 + 48);

                swift_unknownObjectRelease(v214);
                swift_release(v224);
                swift_bridgeObjectRelease(v215);
                v229 = enum case for ActionOutcome.unsupported(_:);
                v230 = type metadata accessor for ActionOutcome(0);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v230 - 8) + 104))(v228, v229, v230);
                (*(void (**)(uint64_t, uint64_t))(v226 + 8))(v225, v227);
                goto LABEL_20;
              }
              v216 = *(_QWORD *)(v0 + 280);
              v217 = *(_QWORD *)(v0 + 216);
              v218 = *(_QWORD *)(v0 + 48);
              swift_release(*(_QWORD *)(v0 + 256));
              v219 = type metadata accessor for TaskPriority(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v219 - 8) + 56))(v217, 1, 1, v219);
              v220 = swift_unknownObjectRetain(v214);
              v221 = static MainActor.shared.getter(v220);
              v222 = (_QWORD *)swift_allocObject(&unk_2F25D8, 56, 7);
              v222[2] = v221;
              v222[3] = &protocol witness table for MainActor;
              v222[4] = v214;
              v222[5] = v216;
              v222[6] = v215;
              v223 = sub_1D979C(v217, (uint64_t)&unk_329380, (uint64_t)v222);

              swift_unknownObjectRelease(v214);
              swift_release(v223);
              v22 = enum case for ActionOutcome.performed(_:);
              v23 = type metadata accessor for ActionOutcome(0);
              v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
              v25 = v218;
              goto LABEL_7;
            }
            v198 = *(_QWORD *)(v0 + 312);
            v279 = *(_QWORD *)(v0 + 288);
            v199 = *(_QWORD *)(v0 + 216);
            v265 = v199;
            v271 = *(_QWORD *)(v0 + 280);
            v201 = *(_QWORD *)(v0 + 176);
            v200 = *(_QWORD *)(v0 + 184);
            v259 = v200;
            v292 = v1;
            v202 = *(_QWORD *)(v0 + 160);
            v203 = *(_QWORD *)(v0 + 168);
            v204 = *(_QWORD *)(v0 + 56);
            v205 = *(_QWORD *)(v0 + 64);
            v282 = *(_QWORD *)(v0 + 48);
            swift_release(*(_QWORD *)(v0 + 256));
            v206 = type metadata accessor for TaskPriority(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v206 - 8) + 56))(v199, 1, 1, v206);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v203 + 16))(v200, v204, v202);
            swift_retain(v205);
            v207 = swift_unknownObjectRetain(v198);
            v208 = static MainActor.shared.getter(v207);
            v209 = *(unsigned __int8 *)(v203 + 80);
            v210 = (v209 + 48) & ~v209;
            v211 = (v201 + v210 + 7) & 0xFFFFFFFFFFFFFFF8;
            v212 = (v211 + 15) & 0xFFFFFFFFFFFFFFF8;
            v213 = (char *)swift_allocObject(&unk_2F2740, v212 + 8, v209 | 7);
            *((_QWORD *)v213 + 2) = v208;
            *((_QWORD *)v213 + 3) = &protocol witness table for MainActor;
            *((_QWORD *)v213 + 4) = v271;
            *((_QWORD *)v213 + 5) = v279;
            (*(void (**)(char *, uint64_t, uint64_t))(v203 + 32))(&v213[v210], v259, v202);
            *(_QWORD *)&v213[v211] = v205;
            *(_QWORD *)&v213[v212] = v198;
            v84 = sub_1D979C(v265, (uint64_t)&unk_329420, (uint64_t)v213);

            swift_unknownObjectRelease(v198);
            goto LABEL_26;
          }
          v255 = *(_QWORD *)(v0 + 312);
          v278 = *(_QWORD *)(v0 + 288);
          v270 = *(_QWORD *)(v0 + 280);
          v291 = v1;
          v183 = *(_QWORD *)(v0 + 232);
          v182 = *(_QWORD *)(v0 + 240);
          v185 = *(_QWORD *)(v0 + 216);
          v184 = *(_QWORD *)(v0 + 224);
          v242 = v185;
          v186 = *(_QWORD *)(v0 + 104);
          v187 = *(_QWORD *)(v0 + 112);
          v168 = *(_QWORD *)(v0 + 88);
          v264 = *(_QWORD *)(v0 + 96);
          v169 = *(_QWORD *)(v0 + 80);
          v188 = *(_QWORD *)(v0 + 64);
          v282 = *(_QWORD *)(v0 + 48);
          swift_release(*(_QWORD *)(v0 + 256));
          (*(void (**)(uint64_t, uint64_t))(v183 + 96))(v182, v184);
          v246 = *(_BYTE *)(v182 + *(int *)(sub_5C154(&qword_329388) + 48));
          v189 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 32);
          v190 = v187;
          v250 = v187;
          v189(v187, v182, v169);
          v191 = type metadata accessor for TaskPriority(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 56))(v185, 1, 1, v191);
          v192 = v186;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16))(v186, v190, v169);
          swift_retain(v188);
          v175 = v255;
          v193 = swift_unknownObjectRetain(v255);
          v194 = static MainActor.shared.getter(v193);
          v195 = *(unsigned __int8 *)(v168 + 80);
          v196 = (v195 + 72) & ~v195;
          v180 = swift_allocObject(&unk_2F2600, v196 + v264, v195 | 7);
          *(_QWORD *)(v180 + 16) = v194;
          *(_QWORD *)(v180 + 24) = &protocol witness table for MainActor;
          *(_BYTE *)(v180 + 32) = v246;
          *(_QWORD *)(v180 + 40) = v188;
          *(_QWORD *)(v180 + 48) = v255;
          *(_QWORD *)(v180 + 56) = v270;
          *(_QWORD *)(v180 + 64) = v278;
          v189(v180 + v196, v192, v169);
          v181 = &unk_329398;
        }
        v197 = sub_1D979C(v242, (uint64_t)v181, v180);

        swift_release(v197);
        swift_unknownObjectRelease(v175);
        (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v250, v169);
        goto LABEL_27;
      }
      v132 = *(_QWORD *)(v0 + 312);
      v276 = *(_QWORD *)(v0 + 288);
      v268 = *(_QWORD *)(v0 + 280);
      v134 = *(_QWORD *)(v0 + 232);
      v133 = *(void ***)(v0 + 240);
      v290 = v1;
      v135 = *(_QWORD *)(v0 + 216);
      v136 = *(_QWORD *)(v0 + 224);
      v137 = *(_QWORD *)(v0 + 208);
      v253 = *(_QWORD *)(v0 + 200);
      v258 = v135;
      v244 = v137;
      v249 = *(_QWORD *)(v0 + 192);
      v138 = *(_QWORD *)(v0 + 64);
      v139 = *(_QWORD *)(v0 + 72);
      v282 = *(_QWORD *)(v0 + 48);
      swift_release(*(_QWORD *)(v0 + 256));
      (*(void (**)(void **, uint64_t))(v134 + 96))(v133, v136);
      v140 = *v133;
      v141 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 56))(v135, 1, 1, v141);
      sub_1C9C40(v139, v137);
      v262 = v140;
      swift_retain(v138);
      v142 = swift_unknownObjectRetain(v132);
      v143 = static MainActor.shared.getter(v142);
      v144 = *(unsigned __int8 *)(v249 + 80);
      v145 = (v144 + 40) & ~v144;
      v146 = (v253 + v145 + 7) & 0xFFFFFFFFFFFFFFF8;
      v147 = (v146 + 15) & 0xFFFFFFFFFFFFFFF8;
      v148 = (v147 + 15) & 0xFFFFFFFFFFFFFFF8;
      v149 = (_QWORD *)swift_allocObject(&unk_2F2650, v148 + 16, v144 | 7);
      v149[2] = v143;
      v149[3] = &protocol witness table for MainActor;
      v149[4] = v140;
      sub_1C9C88(v244, (uint64_t)v149 + v145);
      *(_QWORD *)((char *)v149 + v146) = v138;
      *(_QWORD *)((char *)v149 + v147) = v132;
      v150 = (_QWORD *)((char *)v149 + v148);
      *v150 = v268;
      v150[1] = v276;
      v84 = sub_16CC20(v258, (uint64_t)&unk_3293C0, (uint64_t)v149);

      swift_unknownObjectRelease(v132);
      v85 = v262;
    }

LABEL_26:
    swift_release(v84);
LABEL_27:
    v22 = enum case for ActionOutcome.performed(_:);
    v23 = type metadata accessor for ActionOutcome(0);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
    v25 = v282;
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(v0 + 312);
  v272 = *(_QWORD *)(v0 + 280);
  v280 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(uint64_t **)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 64);
  v285 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 256));
  (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v7, v10);
  v12 = *v7;
  v13 = v7[1];
  v14 = v1;
  v15 = *((_BYTE *)v7 + 16);
  LOBYTE(v7) = *((_BYTE *)v7 + 17);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  swift_retain(v11);
  v17 = swift_unknownObjectRetain(v6);
  v18 = static MainActor.shared.getter(v17);
  v19 = swift_allocObject(&unk_2F27B8, 82, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v19 + 32) = v11;
  *(_QWORD *)(v19 + 40) = v272;
  *(_QWORD *)(v19 + 48) = v280;
  *(_QWORD *)(v19 + 56) = v12;
  *(_QWORD *)(v19 + 64) = v13;
  *(_QWORD *)(v19 + 72) = v6;
  *(_BYTE *)(v19 + 80) = v15;
  *(_BYTE *)(v19 + 81) = (_BYTE)v7;
  v20 = &unk_329450;
LABEL_5:
  v21 = sub_1D979C(v9, (uint64_t)v20, v19);

LABEL_6:
  swift_unknownObjectRelease(v6);
  swift_release(v21);
  v22 = enum case for ActionOutcome.performed(_:);
  v23 = type metadata accessor for ActionOutcome(0);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
  v25 = v285;
LABEL_7:
  v26 = v22;
LABEL_19:
  v24(v25, v26, v23);
LABEL_20:
  v56 = *(_QWORD *)(v0 + 208);
  v57 = *(_QWORD *)(v0 + 216);
  v58 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 144);
  v59 = *(_QWORD *)(v0 + 152);
  v62 = *(_QWORD *)(v0 + 104);
  v61 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v57);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CB3C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[36]);
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CB7BC;
  }
  else
  {
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CB42C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1CB42C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  swift_release(*(_QWORD *)(v0 + 256));
  v1 = *(void **)(v0 + 32);
  v2 = objc_msgSend(v1, "figaroPageContext");
  swift_unknownObjectRelease(v1);
  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v36 = v4;
    v37 = v3;

  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  v38 = *(void **)(v0 + 336);
  v39 = *(_QWORD *)(v0 + 312);
  v35 = *(_QWORD *)(v0 + 288);
  v33 = *(void **)(v0 + 344);
  v34 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v40 = *(_QWORD *)(v0 + 48);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  sub_1C9C40(v10, v6);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_2F2768, v17 + 16, v12 | 7);
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  sub_1C9C88(v6, v18 + v13);
  *(_QWORD *)(v18 + v14) = v33;
  *(_QWORD *)(v18 + v15) = v9;
  v19 = (uint64_t *)(v18 + v16);
  *v19 = v37;
  v19[1] = v36;
  v20 = (_QWORD *)(v18 + v17);
  *v20 = v34;
  v20[1] = v35;
  swift_retain(v9);
  v21 = v33;
  v22 = sub_1CE714(v5, (uint64_t)&unk_329430, v18);

  swift_release(v22);
  swift_unknownObjectRelease(v39);
  sub_16D6CC(v5);
  v23 = enum case for ActionOutcome.performed(_:);
  v24 = type metadata accessor for ActionOutcome(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v40, v23, v24);
  v25 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v0 + 184);
  v29 = *(_QWORD *)(v0 + 144);
  v28 = *(_QWORD *)(v0 + 152);
  v31 = *(_QWORD *)(v0 + 104);
  v30 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v26);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CB678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 256));
  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CB714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 256);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 312));
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CB7BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 256);

  swift_unknownObjectRelease(v2);
  swift_release(v3);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CB874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  __int16 v14;

  *(_WORD *)(v8 + 464) = v14;
  *(_QWORD *)(v8 + 264) = a8;
  *(_QWORD *)(v8 + 272) = v13;
  *(_QWORD *)(v8 + 248) = a6;
  *(_QWORD *)(v8 + 256) = a7;
  *(_QWORD *)(v8 + 232) = a4;
  *(_QWORD *)(v8 + 240) = a5;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 280) = v9;
  *(_QWORD *)(v8 + 288) = static MainActor.shared.getter(v9);
  v10 = type metadata accessor for BATracker(0);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v8 + 296) = v11;
  *v11 = v8;
  v11[1] = sub_1CB924;
  return BaseObjectGraph.inject<A>(_:)(v8 + 216, v10, v10);
}

uint64_t sub_1CB924()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2[35], &protocol witness table for MainActor);
  v6 = v4;
  if (v0)
  {
    v7 = sub_1CC044;
  }
  else
  {
    v2[39] = v4;
    v2[40] = v5;
    v7 = sub_1CB9AC;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_1CB9AC()
{
  objc_super *v0;
  objc_super *v1;
  id receiver;
  Class super_class;
  Class v4;
  id v5;
  id v6;
  objc_class *v7;
  objc_class *v8;
  char *v9;
  char *v10;
  char *v11;
  objc_class *v12;
  id v13;
  uint64_t v14;
  Class *p_super_class;

  v1 = v0 + 1;
  super_class = v0[16].super_class;
  receiver = v0[17].receiver;
  v4 = v0[15].super_class;
  v5 = v0[16].receiver;
  v6 = v0[15].receiver;
  v7 = v0[13].super_class;
  v0[20].super_class = v7;
  v8 = (objc_class *)type metadata accessor for AssetActionModifyRequest();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR___BSUIAssetActionModifyRequest_storeID];
  *(_QWORD *)v10 = v6;
  *((_QWORD *)v10 + 1) = v4;
  v11 = &v9[OBJC_IVAR___BSUIAssetActionModifyRequest_collectionID];
  *(_QWORD *)v11 = v5;
  *((_QWORD *)v11 + 1) = super_class;
  *(_QWORD *)&v9[OBJC_IVAR___BSUIAssetActionModifyRequest_tracker] = v7;
  v0[11].receiver = v9;
  v0[11].super_class = v8;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(super_class);
  v12 = v7;
  v13 = objc_msgSendSuper2(v0 + 11, "init");
  v0[21].receiver = v13;
  v0[3].super_class = (Class)&v0[12];
  v0[1].receiver = v0;
  v0[1].super_class = (Class)sub_1CBAF8;
  v14 = swift_continuation_init(&v0[1], 1);
  v0[8].super_class = (Class)_NSConcreteStackBlock;
  p_super_class = &v0[8].super_class;
  p_super_class[1] = (Class)0x40000000;
  p_super_class[2] = (Class)sub_1CC568;
  p_super_class[3] = (Class)&unk_2F27D0;
  p_super_class[4] = (Class)v14;
  objc_msgSend(receiver, "performAddRequest:completionHandler:", v13, p_super_class);
  return swift_continuation_await(v1);
}

uint64_t sub_1CBAF8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 344) = v2;
  if (v2)
    v3 = sub_1CC2D0;
  else
    v3 = sub_1CBB54;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_1CBB54()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(char **)(v0 + 192);
  *(_QWORD *)(v0 + 352) = v1;
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 264);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 256);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v23 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 224) = sub_57CD8(v9, v8, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl(&dword_0, v5, v6, "Add to collection %s completed, success", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 264), 2);
  }

  if (*(_BYTE *)(v0 + 464) == 1)
  {
    v12 = *(void **)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 280);
    *(_QWORD *)(v0 + 360) = sub_5C194(0, &qword_329458, &off_2E2F88);
    v14 = &v1[OBJC_IVAR___BSUIAssetActionModifyResponse_assetID];
    *(_QWORD *)(v0 + 368) = *(_QWORD *)&v1[OBJC_IVAR___BSUIAssetActionModifyResponse_assetID];
    v15 = *((_QWORD *)v14 + 1);
    *(_QWORD *)(v0 + 376) = v15;
    *(_QWORD *)(v0 + 384) = *(_QWORD *)&v1[OBJC_IVAR___BSUIAssetActionModifyResponse_assetContentType];
    v16 = &v1[OBJC_IVAR___BSUIAssetActionModifyResponse_collectionTitle];
    *(_QWORD *)(v0 + 392) = *(_QWORD *)&v1[OBJC_IVAR___BSUIAssetActionModifyResponse_collectionTitle];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)(v0 + 400) = v17;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    *(_QWORD *)(v0 + 408) = sub_53458((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 416) = static MainActor.shared.getter(v12);
    v18 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 424) = v18;
    *(_QWORD *)(v0 + 432) = v19;
    return swift_task_switch(sub_1CBE28, v18, v19);
  }
  else
  {
    v21 = *(void **)(v0 + 336);
    v22 = *(_QWORD *)(v0 + 288);

    swift_release(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1CBE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 232);
  v6 = sub_5C154(&qword_329460);
  inited = swift_initStackObject(v6, v0 + 80);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  swift_bridgeObjectRetain(v1);
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  v8 = sub_53598(inited);
  *(_QWORD *)(v0 + 440) = v8;
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 448) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v3;
  v10 = (_QWORD *)swift_task_alloc(dword_32B9C4);
  *(_QWORD *)(v0 + 456) = v10;
  *v10 = v0;
  v10[1] = sub_1CBF24;
  return sub_22347C(v8, *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 256), v4, *(_QWORD *)(v0 + 408), *(_BYTE *)(v0 + 465), (uint64_t)sub_1D53F8);
}

uint64_t sub_1CBF24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 448);
  v3 = *(_QWORD *)(*v0 + 440);
  swift_task_dealloc(*(_QWORD *)(*v0 + 456));
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1CBF8C, *(_QWORD *)(v1 + 424), *(_QWORD *)(v1 + 432));
}

uint64_t sub_1CBF8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = v0[51];
  v2 = v0[50];
  v3 = v0[47];
  v4 = (void *)v0[41];
  swift_release(v0[52]);

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1CBFF4, v0[39], v0[40]);
}

uint64_t sub_1CBFF4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 352);
  v2 = *(void **)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 288);

  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CC044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 288));
  v1 = *(_QWORD *)(v0 + 304);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 264);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 256);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v16 = v15;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 208) = sub_57CD8(v9, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v1);
    v12 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 200) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v10 + 14, v10 + 22);
    *v11 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v5, v6, "Add to collection %s failed! error=%@", (uint8_t *)v10, 0x16u);
    v13 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CC2D0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 336);
  v2 = *(void **)(v0 + 328);
  v3 = swift_release(*(_QWORD *)(v0 + 288));
  swift_willThrow(v3);

  v4 = *(_QWORD *)(v0 + 344);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = type metadata accessor for Logger(0);
  sub_5240C(v6, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v5);
  swift_errorRetain(v4);
  swift_bridgeObjectRetain(v5);
  v7 = swift_errorRetain(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 264);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 256);
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v13 = 136315394;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 208) = sub_57CD8(v12, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v4);
    v15 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 200) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v13 + 14, v13 + 22);
    *v14 = v15;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl(&dword_0, v8, v9, "Add to collection %s failed! error=%@", (uint8_t *)v13, 0x16u);
    v16 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CC568(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_5C154((uint64_t *)&unk_321CD0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CC5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  __int16 v14;

  *(_WORD *)(v8 + 288) = v14;
  *(_QWORD *)(v8 + 200) = a8;
  *(_QWORD *)(v8 + 208) = v13;
  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 192) = a7;
  *(_QWORD *)(v8 + 176) = a5;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 216) = v9;
  *(_QWORD *)(v8 + 224) = static MainActor.shared.getter(v9);
  v10 = type metadata accessor for BATracker(0);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v8 + 232) = v11;
  *v11 = v8;
  v11[1] = sub_1CC6A4;
  return BaseObjectGraph.inject<A>(_:)(v8 + 160, v10, v10);
}

uint64_t sub_1CC6A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2[27], &protocol witness table for MainActor);
  v6 = v4;
  if (v0)
  {
    v7 = sub_1CCC10;
  }
  else
  {
    v2[31] = v4;
    v2[32] = v5;
    v7 = sub_1CC72C;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_1CC72C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  objc_class *v8;
  char *v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = v0 + 16;
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(void **)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(void **)(v0 + 160);
  *(_QWORD *)(v0 + 264) = v7;
  v8 = (objc_class *)type metadata accessor for AssetActionModifyRequest();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR___BSUIAssetActionModifyRequest_storeID];
  *(_QWORD *)v10 = v6;
  *((_QWORD *)v10 + 1) = v4;
  v11 = &v9[OBJC_IVAR___BSUIAssetActionModifyRequest_collectionID];
  *(_QWORD *)v11 = v5;
  *((_QWORD *)v11 + 1) = v3;
  *(_QWORD *)&v9[OBJC_IVAR___BSUIAssetActionModifyRequest_tracker] = v7;
  *(_QWORD *)(v0 + 120) = v9;
  *(_QWORD *)(v0 + 128) = v8;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  v12 = v7;
  v13 = objc_msgSendSuper2((objc_super *)(v0 + 120), "init");
  *(_QWORD *)(v0 + 272) = v13;
  *(_QWORD *)(v0 + 56) = v0 + 144;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1CC878;
  v14 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v15 = (_QWORD *)(v0 + 80);
  v15[1] = 0x40000000;
  v15[2] = sub_1CC568;
  v15[3] = &unk_2F27E8;
  v15[4] = v14;
  objc_msgSend(v2, "performRemoveRequest:completionHandler:", v13, v15);
  return swift_continuation_await(v1);
}

uint64_t sub_1CC878()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 280) = v2;
  if (v2)
    v3 = sub_1CCE90;
  else
    v3 = sub_1CC8D4;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 256));
}

uint64_t sub_1CC8D4()
{
  uint64_t v0;
  char *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSNumber v22;
  uint64_t v23;
  Class isa;
  NSString v25;
  Class v26;
  unint64_t v27;
  unsigned int v29;
  char *v30;
  uint64_t v31;

  swift_release(*(_QWORD *)(v0 + 224));
  v1 = *(char **)(v0 + 144);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v2 = (_BYTE *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = type metadata accessor for Logger(0);
  sub_5240C(v4, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 200);
  v30 = v1;
  if (v8)
  {
    v10 = *(_QWORD *)(v0 + 192);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v31 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain(v9);
    v13 = v10;
    v2 = (_BYTE *)(v0 + 288);
    *(_QWORD *)(v0 + 168) = sub_57CD8(v13, v9, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl(&dword_0, v6, v7, "Remove from collection %s completed, success", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    v14 = v11;
    v1 = v30;
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v9, 2);
  }

  v16 = *(void **)(v0 + 264);
  v15 = *(void **)(v0 + 272);
  if (*v2 == 1)
  {
    v29 = v2[1];
    v17 = *(_QWORD *)&v1[OBJC_IVAR___BSUIAssetActionModifyResponse_collectionTitle + 8];
    swift_bridgeObjectRetain(v17);
    v18 = sub_53458((uint64_t)_swiftEmptyArrayStorage);
    v19 = (void *)objc_opt_self(BSUINoticeViewController);
    v20 = sub_5C154(&qword_322430);
    v21 = swift_allocObject(v20, 40, 7);
    *(_OWORD *)(v21 + 16) = xmmword_25BE20;
    v22.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    *(NSNumber *)(v21 + 32) = v22;
    v31 = v21;
    specialized Array._endMutation()(v22.super.super.isa);
    v23 = v31;
    sub_5C194(0, &qword_31F450, NSNumber_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v25 = String._bridgeToObjectiveC()();
    v26 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "presentNoticeForRemovingBooks:fromCollectionNamed:options:useNonSpecificDeterminerInMessage:", isa, v25, v26, v29);

    v27 = v18;
    v1 = v30;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v17);
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCC10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 224));
  v1 = *(_QWORD *)(v0 + 240);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 200);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 192);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v16 = v12;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 152) = sub_57CD8(v9, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v1);
    v13 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 136) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v10 + 14, v10 + 22);
    *v11 = v13;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v5, v6, "Remove from collection %s failed! error=%@", (uint8_t *)v10, 0x16u);
    v14 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v11, 1, v14);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCE90()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = *(void **)(v0 + 272);
  v2 = *(void **)(v0 + 264);
  v3 = swift_release(*(_QWORD *)(v0 + 224));
  swift_willThrow(v3);

  v4 = *(_QWORD *)(v0 + 280);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = type metadata accessor for Logger(0);
  sub_5240C(v6, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v5);
  swift_errorRetain(v4);
  swift_bridgeObjectRetain(v5);
  v7 = swift_errorRetain(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 200);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 192);
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v19 = v15;
    *(_DWORD *)v13 = 136315394;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 152) = sub_57CD8(v12, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v4);
    v16 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 136) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 14, v13 + 22);
    *v14 = v16;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl(&dword_0, v8, v9, "Remove from collection %s failed! error=%@", (uint8_t *)v13, 0x16u);
    v17 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v14, 1, v17);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CD124(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v9[30] = v16;
  v9[31] = v17;
  v9[28] = a8;
  v9[29] = a9;
  v9[26] = a6;
  v9[27] = a7;
  v9[25] = a5;
  v12 = type metadata accessor for BooksFeatureFlag(0, a1);
  v9[32] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v9[33] = v13;
  v9[34] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_task_alloc(dword_32946C);
  v9[35] = v14;
  *v14 = v9;
  v14[1] = sub_1CD1F0;
  return sub_1CDE9C(a6, a7);
}

uint64_t sub_1CD1F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 280);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 272));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v6 = type metadata accessor for BATracker(0);
    v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *(_QWORD *)(v2 + 288) = v7;
    *v7 = v4;
    v7[1] = sub_1CD2E4;
    return BaseObjectGraph.inject<A>(_:)(v2 + 144, v6, v6);
  }
}

uint64_t sub_1CD2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1CDC4C;
  else
    v3 = sub_1CD38C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1CD38C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  NSNumber v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  NSString v52;
  uint64_t v53;
  _QWORD *v54;
  char v56;
  uint64_t v57;

  v2 = v0[33];
  v1 = v0[34];
  v3 = v0[32];
  v4 = (void *)v0[26];
  v5 = (void *)v0[18];
  v0[38] = v5;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for BooksFeatureFlag.unifiedProductPage(_:), v3);
  v6 = sub_648E0(&qword_320358, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
  v7 = sub_17853C();
  v8 = RawRepresentable<>.isEnabled.getter(v3, v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v9 = objc_msgSend(v4, "buyParams");
  if (v9)
  {
    v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v12 = 0xE000000000000000;
  }
  v13 = (void *)v0[26];
  v56 = dispatch thunk of MAsset.isAudiobook.getter(v9);
  v14 = objc_msgSend(v13, "isSG");
  if ((v8 & 1) != 0)
  {
    v15 = (void *)v0[26];
    objc_msgSend(v15, "supportsUnifiedProductPage");
    v16.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v17 = objc_msgSend(v15, "editionKind");
    if (v17)
    {
      v18 = v17;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    v16.super.super.isa = 0;
  }
  v21 = v5;
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  if (v20)
  {
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v23 = 0;
  }
  v24 = objc_msgSend(objc_allocWithZone((Class)BSUIPurchaseParameters), "initWithBuyParams:isAudiobook:hasRacSupport:supportsUnifiedProductPage:editionKind:tracker:", v22, v56 & 1, v14, v16.super.super.isa, v23, v21);
  v0[39] = v24;

  PageData.pageID.getter(v25);
  if (v26)
  {
    v28 = v26;
    v29 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v28).n128_u64[0];
  }
  else
  {
    v29 = 0;
  }
  v30 = v0[29];
  objc_msgSend(v24, "setPageId:", v29, v27);

  PageData.pageType.getter(v31);
  v33 = v32;
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setPageType:", v34, swift_bridgeObjectRelease(v33).n128_f64[0]);

  if (v30)
    v35 = String._bridgeToObjectiveC()();
  else
    v35 = 0;
  objc_msgSend(v24, "setPageContext:", v35);

  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v36 = v0[31];
  v37 = type metadata accessor for Logger(0);
  v0[40] = sub_5240C(v37, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain_n(v36, 2);
  v38 = v24;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  v41 = os_log_type_enabled(v39, v40);
  v42 = v0[31];
  if (v41)
  {
    v43 = v0[30];
    v44 = swift_slowAlloc(22, -1);
    v45 = swift_slowAlloc(64, -1);
    v57 = v45;
    *(_DWORD *)v44 = 136315394;
    swift_bridgeObjectRetain(v42);
    v0[23] = sub_57CD8(v43, v42, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease_n(v42, 3);
    *(_WORD *)(v44 + 12) = 2080;
    v46 = objc_msgSend(v38, "buyParams");
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

    v0[24] = sub_57CD8(v47, v49, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease(v49);

    _os_log_impl(&dword_0, v39, v40, "%%Purchasing: assetID=%s, buyParams=%s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[31], 2);

  }
  v50 = v0 + 2;
  v51 = (void *)objc_opt_self(BSUIPurchaseManager);
  v52 = String._bridgeToObjectiveC()();
  v0[41] = v52;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1CD908;
  v53 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v54 = v0 + 10;
  v54[1] = 0x40000000;
  v54[2] = sub_1CE674;
  v54[3] = &unk_2F2800;
  v54[4] = v53;
  objc_msgSend(v51, "purchaseAsset:parameters:completion:", v52, v38, v54);
  return swift_continuation_await(v50);
}

uint64_t sub_1CD908()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 336) = v1;
  if (v1)
    v2 = sub_1CDCAC;
  else
    v2 = sub_1CD9AC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1CD9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(void **)(v0 + 136);

  swift_bridgeObjectRetain(v1);
  v4 = v3;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v19 = (_QWORD *)swift_slowAlloc(8, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain(v1);
    v8 = Optional<A>.description.getter(v2, v1);
    v10 = v9;
    swift_bridgeObjectRelease(v1);
    *(_QWORD *)(v0 + 160) = sub_57CD8(v8, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease_n(v1, 2);
    *(_WORD *)(v7 + 12) = 2112;
    if (v3)
    {
      *(_QWORD *)(v0 + 176) = v4;
      v11 = v4;
      v12 = v0 + 176;
      v13 = v0 + 184;
    }
    else
    {
      v12 = v0 + 168;
      *(_QWORD *)(v0 + 168) = 0;
      v13 = v0 + 176;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12, v13, v7 + 14, v7 + 22);
    v15 = *(void **)(v0 + 304);
    v16 = *(void **)(v0 + 312);
    *v19 = v3;

    _os_log_impl(&dword_0, v5, v6, "%%Purchase done! downloadID=%s, response=%@", (uint8_t *)v7, 0x16u);
    v17 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v19, 1, v17);
    swift_slowDealloc(v19, -1, -1);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v14 = *(void **)(v0 + 312);

    swift_bridgeObjectRelease_n(v1, 2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CDC4C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CDCAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v16;

  v3 = *(void **)(v1 + 328);
  v2 = *(_QWORD *)(v1 + 336);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v1 + 336);
    v8 = *(NSObject **)(v1 + 304);
    v16 = *(void **)(v1 + 312);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v1 + 152) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v5, v6, "%%Purchase failed! error=%@", v9, 0xCu);
    v12 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v7);
    v5 = v8;
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 336);
    v14 = *(void **)(v1 + 312);

    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 272));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1CDE9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[21] = a1;
  v2[22] = a2;
  v3 = type metadata accessor for ContentStoreData(0);
  v2[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[24] = v4;
  v2[25] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C194(0, (unint64_t *)&qword_31FE50, BUBag_ptr);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[26] = v6;
  *v6 = v2;
  v6[1] = sub_1CDF4C;
  return BaseObjectGraph.inject<A>(_:)(v2 + 19, v5, v5);
}

uint64_t sub_1CDF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1CE3F0;
  else
    v3 = sub_1CDFB0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1CDFB0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[28] = v0[19];
  v1 = type metadata accessor for BATracker(0);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[29] = v2;
  *v2 = v0;
  v2[1] = sub_1CE02C;
  return BaseObjectGraph.inject<A>(_:)(v0 + 20, v1, v1);
}

uint64_t sub_1CE02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1CE424;
  else
    v3 = sub_1CE090;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1CE090()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = (void *)v0[28];
  v0[31] = v0[20];
  v3 = objc_msgSend(v2, "currencyCode");
  v0[32] = v3;
  v0[7] = v0 + 17;
  v0[2] = v0;
  v0[3] = sub_1CE150;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1D3EB8;
  v5[3] = &unk_2F2818;
  v5[4] = v4;
  objc_msgSend(v3, "valueWithCompletion:", v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1CE150()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 264) = v1;
  if (v1)
    v2 = sub_1CE460;
  else
    v2 = sub_1CE1B0;
  return swift_task_switch(v2, 0, 0);
}

unint64_t sub_1CE1B0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(void **)(v0 + 136);

  if ((unint64_t)v1 >= 2)
  {
    v28 = 0;
    v29 = 0;
    v2 = v1;
    static String._conditionallyBridgeFromObjectiveC(_:result:)(v2, &v28);

    v3 = v28;
    v4 = v29;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
  }
  v5 = objc_msgSend(*(id *)(v0 + 168), "version");
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v27 = v8;

  }
  else
  {
    v7 = 0;
    v27 = 0;
  }
  v9 = objc_msgSend(*(id *)(v0 + 168), "priceFormatted");
  if (v9)
  {
    v10 = v9;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v26 = 0;
    v12 = 0xE000000000000000;
  }
  v13 = *(void **)(v0 + 168);
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0xE000000000000000;
  objc_msgSend(v13, "averageRating");
  Double.write<A>(to:)(v0 + 120, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v14 * 5.0);
  v16 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  result = (unint64_t)objc_msgSend(v13, "ratingCountForAnalytics");
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    v18 = *(void **)(v0 + 248);
    v19 = v3;
    v20 = *(void **)(v0 + 224);
    v21 = v7;
    v23 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 200);
    v24 = v4;
    v25 = *(_QWORD *)(v0 + 184);
    LOBYTE(v28) = 0;
    ContentStoreData.init(currency:version:pricePoint:rating:ratingsCount:)(v19, v24, v21, v27, v26, v12, v16, v15, result);
    sub_648E0(&qword_329470, (uint64_t (*)(uint64_t))&type metadata accessor for ContentStoreData, (uint64_t)&protocol conformance descriptor for ContentStoreData);
    sub_648E0(&qword_329478, (uint64_t (*)(uint64_t))&type metadata accessor for ContentStoreData, (uint64_t)&protocol conformance descriptor for ContentStoreData);
    BATracker.push<A>(data:traits:file:line:)(v22, 0, 0xD00000000000008ALL);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v25);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1CE3F0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CE424()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1CE460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(void **)(v1 + 256);
  v2 = *(_QWORD *)(v1 + 264);
  swift_willThrow(a1);
  swift_errorRelease(v2);

  v4 = objc_msgSend(*(id *)(v1 + 168), "version");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = objc_msgSend(*(id *)(v1 + 168), "priceFormatted");
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0xE000000000000000;
  }
  v14 = *(void **)(v1 + 168);
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0xE000000000000000;
  objc_msgSend(v14, "averageRating");
  Double.write<A>(to:)(v1 + 120, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v15 * 5.0);
  v16 = *(_QWORD *)(v1 + 120);
  v17 = *(_QWORD *)(v1 + 128);
  result = (unint64_t)objc_msgSend(v14, "ratingCountForAnalytics");
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    v19 = *(void **)(v1 + 248);
    v20 = *(void **)(v1 + 224);
    v21 = v6;
    v23 = *(_QWORD *)(v1 + 192);
    v22 = *(_QWORD *)(v1 + 200);
    v24 = v8;
    v25 = *(_QWORD *)(v1 + 184);
    ContentStoreData.init(currency:version:pricePoint:rating:ratingsCount:)(0, 0, v21, v24, v11, v13, v16, v17, result);
    sub_648E0(&qword_329470, (uint64_t (*)(uint64_t))&type metadata accessor for ContentStoreData, (uint64_t)&protocol conformance descriptor for ContentStoreData);
    sub_648E0(&qword_329478, (uint64_t (*)(uint64_t))&type metadata accessor for ContentStoreData, (uint64_t)&protocol conformance descriptor for ContentStoreData);
    BATracker.push<A>(data:traits:file:line:)(v22, 0, 0xD00000000000008ALL);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v25);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  return result;
}

uint64_t sub_1CE674(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v12;
  uint64_t *v13;
  id v14;

  v4 = *(_QWORD *)(a1 + 32);
  if (a4)
  {
    v6 = sub_5C154((uint64_t *)&unk_321CD0);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else
  {
    if (a2)
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    else
      v12 = 0;
    v13 = *(uint64_t **)(*(_QWORD *)(v4 + 64) + 40);
    *v13 = v12;
    v13[1] = a2;
    v13[2] = (uint64_t)a3;
    v14 = a3;
    return swift_continuation_throwingResume(v4);
  }
}

uint64_t sub_1CE714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD v21[4];

  v6 = sub_5C154(&qword_329740);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D5400(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_16D6CC((uint64_t)v8);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v18 = 0;
      return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v19 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_1CE884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[29] = a7;
  v8[30] = a8;
  v8[27] = a5;
  v8[28] = a6;
  v8[26] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[31] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[32] = v10;
  v8[33] = v11;
  return swift_task_switch(sub_1CE8F8, v10, v11);
}

uint64_t sub_1CE8F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[27];
  v2 = v0[26];
  v3 = sub_5C154(&qword_3206C0);
  inited = swift_initStackObject(v3, v0 + 10);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000000002741B0;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain(v1);
  v5 = sub_52A70(inited);
  v6 = AssetAction.instanceID.getter();
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    sub_5A288(v8, v9, 0xD000000000000016, 0x80000000002741F0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v0[34] = v5;
  v11 = type metadata accessor for BATracker(0);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[35] = v12;
  *v12 = v0;
  v12[1] = sub_1CEA2C;
  return BaseObjectGraph.inject<A>(_:)(v0 + 24, v11, v11);
}

uint64_t sub_1CEA2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[34]);
    v4 = v2[32];
    v5 = v2[33];
    v6 = sub_1CEC60;
  }
  else
  {
    v4 = v2[32];
    v5 = v2[33];
    v6 = sub_1CEA98;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1CEA98()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0 + 2;
  v2 = v0[34];
  v3 = (void *)v0[30];
  v4 = v0[24];
  v0[37] = v4;
  v5 = String._bridgeToObjectiveC()();
  v0[38] = v5;
  sub_215D54(v2);
  v7 = v6;
  swift_bridgeObjectRelease(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[39] = isa;
  swift_bridgeObjectRelease(v7);
  v0[7] = v0 + 41;
  v0[2] = v0;
  v0[3] = sub_1CEBB4;
  v9 = swift_continuation_init(v0 + 2, 1);
  v0[18] = _NSConcreteStackBlock;
  v10 = v0 + 18;
  v10[1] = 0x40000000;
  v10[2] = sub_1CF184;
  v10[3] = &unk_2F2830;
  v10[4] = v9;
  objc_msgSend(v3, "openAssetID:options:tracker:completionHandler:", v5, isa, v4, v10);
  return swift_continuation_await(v1);
}

uint64_t sub_1CEBB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 320) = v2;
  if (v2)
    v3 = sub_1CEEE8;
  else
    v3 = sub_1CEC10;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264));
}

uint64_t sub_1CEC10()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 304);
  v1 = *(void **)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 248);

  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CEC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 288);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 216);
  if (v7)
  {
    v15 = *(_QWORD *)(v0 + 208);
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 184) = sub_57CD8(v15, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v1);
    v12 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 200) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v5, v6, "Failed to open asset %s: %@", (uint8_t *)v9, 0x16u);
    v13 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CEEE8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 312);
  v3 = *(void **)(v0 + 296);
  v2 = *(void **)(v0 + 304);
  v4 = swift_release(*(_QWORD *)(v0 + 248));
  swift_willThrow(v4);

  v5 = *(_QWORD *)(v0 + 320);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v6 = *(_QWORD *)(v0 + 216);
  v7 = type metadata accessor for Logger(0);
  sub_5240C(v7, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v6);
  swift_errorRetain(v5);
  swift_bridgeObjectRetain(v6);
  v8 = swift_errorRetain(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 216);
  if (v11)
  {
    v19 = *(_QWORD *)(v0 + 208);
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v20 = v15;
    *(_DWORD *)v13 = 136315394;
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v0 + 184) = sub_57CD8(v19, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v5);
    v16 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 200) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v13 + 14, v13 + 22);
    *v14 = v16;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v9, v10, "Failed to open asset %s: %@", (uint8_t *)v13, 0x16u);
    v17 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v14, 1, v17);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF184(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_5C154((uint64_t *)&unk_321CD0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1CF204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8[30] = a8;
  v8[31] = v13;
  v8[28] = a6;
  v8[29] = a7;
  v8[26] = a4;
  v8[27] = a5;
  v9 = type metadata accessor for MainActor(0);
  v8[32] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[33] = v10;
  v8[34] = v11;
  return swift_task_switch(sub_1CF280, v10, v11);
}

uint64_t sub_1CF280()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[27];
  v2 = v0[26];
  v3 = sub_5C154(&qword_3206C0);
  inited = swift_initStackObject(v3, v0 + 10);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000000002741B0;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain(v1);
  v5 = sub_52A70(inited);
  v6 = AssetAction.instanceID.getter();
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    sub_5A288(v8, v9, 0xD000000000000016, 0x80000000002741F0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v0[35] = v5;
  v11 = type metadata accessor for BATracker(0);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[36] = v12;
  *v12 = v0;
  v12[1] = sub_1CF3B4;
  return BaseObjectGraph.inject<A>(_:)(v0 + 24, v11, v11);
}

uint64_t sub_1CF3B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[35]);
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CF600;
  }
  else
  {
    v4 = v2[33];
    v5 = v2[34];
    v6 = sub_1CF420;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1CF420()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSString v6;
  NSURL *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;

  v1 = v0;
  v2 = v0 + 2;
  v3 = v1[35];
  v4 = (void *)v1[30];
  v5 = v1[24];
  v1[38] = v5;
  v6 = String._bridgeToObjectiveC()();
  v1[39] = v6;
  URL._bridgeToObjectiveC()(v7);
  v9 = v8;
  v1[40] = v8;
  sub_215D54(v3);
  v11 = v10;
  swift_bridgeObjectRelease(v3);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v1[41] = isa;
  swift_bridgeObjectRelease(v11);
  v1[7] = v1 + 43;
  v1[2] = v1;
  v1[3] = sub_1CF550;
  v13 = swift_continuation_init(v2, 1);
  v1[18] = _NSConcreteStackBlock;
  v1 += 18;
  v1[1] = 0x40000000;
  v1[2] = sub_1CF184;
  v1[3] = &unk_2F2848;
  v1[4] = v13;
  objc_msgSend(v4, "sampleAssetID:url:options:tracker:completionHandler:", v6, v9, isa, v5, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_1CF550()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 336) = v2;
  if (v2)
    v3 = sub_1CF888;
  else
    v3 = sub_1CF5AC;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 272));
}

uint64_t sub_1CF5AC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(v0 + 320);
  v1 = *(void **)(v0 + 328);
  v3 = *(void **)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 256);

  swift_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 256));
  v1 = *(_QWORD *)(v0 + 296);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 216);
  if (v7)
  {
    v15 = *(_QWORD *)(v0 + 208);
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 184) = sub_57CD8(v15, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v1);
    v12 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 200) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v5, v6, "Failed to sample asset %s: %@", (uint8_t *)v9, 0x16u);
    v13 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF888()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(v0 + 328);
  v3 = *(void **)(v0 + 312);
  v2 = *(void **)(v0 + 320);
  v4 = *(void **)(v0 + 304);
  v5 = swift_release(*(_QWORD *)(v0 + 256));
  swift_willThrow(v5);

  v6 = *(_QWORD *)(v0 + 336);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = type metadata accessor for Logger(0);
  sub_5240C(v8, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v7);
  swift_errorRetain(v6);
  swift_bridgeObjectRetain(v7);
  v9 = swift_errorRetain(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 216);
  if (v12)
  {
    v20 = *(_QWORD *)(v0 + 208);
    v14 = swift_slowAlloc(22, -1);
    v15 = (uint64_t *)swift_slowAlloc(8, -1);
    v16 = swift_slowAlloc(32, -1);
    v21 = v16;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(v13);
    *(_QWORD *)(v0 + 184) = sub_57CD8(v20, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(v13, 3);
    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain(v6);
    v17 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 200) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v14 + 14, v14 + 22);
    *v15 = v17;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl(&dword_0, v10, v11, "Failed to sample asset %s: %@", (uint8_t *)v14, 0x16u);
    v18 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v15, 1, v18);
    swift_slowDealloc(v15, -1, -1);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(v6);
    swift_bridgeObjectRelease_n(v13, 2);
    swift_errorRelease(v6);
    swift_errorRelease(v6);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CFB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v8[20] = a7;
  v8[21] = a8;
  v8[18] = a5;
  v8[19] = a6;
  v9 = type metadata accessor for MainActor(0);
  v8[22] = v9;
  v8[23] = static MainActor.shared.getter(v9);
  v10 = type metadata accessor for BATracker(0);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v8[24] = v11;
  *v11 = v8;
  v11[1] = sub_1CFBC4;
  return BaseObjectGraph.inject<A>(_:)(v8 + 15, v10, v10);
}

uint64_t sub_1CFBC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2[22], &protocol witness table for MainActor);
  v6 = v4;
  if (v0)
  {
    v7 = sub_1CFDB0;
  }
  else
  {
    v2[26] = v4;
    v2[27] = v5;
    v7 = sub_1CFC4C;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_1CFC4C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSString v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0 + 2;
  v2 = v0[21];
  v3 = (void *)v0[18];
  v4 = v0[15];
  v0[28] = v4;
  v5 = String._bridgeToObjectiveC()();
  v0[29] = v5;
  v0[7] = v0 + 31;
  v0[2] = v0;
  v0[3] = sub_1CFD14;
  v6 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = sub_1CF184;
  v7[3] = &unk_2F2860;
  v7[4] = v6;
  objc_msgSend(v3, "previewAssetID:asset:tracker:completionHandler:", v5, v2, v4, v7);
  return swift_continuation_await(v1);
}

uint64_t sub_1CFD14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 240) = v2;
  if (v2)
    v3 = sub_1D002C;
  else
    v3 = sub_1CFD70;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216));
}

uint64_t sub_1CFD70()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CFDB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 184));
  v1 = *(_QWORD *)(v0 + 200);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 160);
  if (v7)
  {
    v15 = *(_QWORD *)(v0 + 152);
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 128) = sub_57CD8(v15, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v1);
    v12 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 136) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v5, v6, "Failed to preview asset %s: %@", (uint8_t *)v9, 0x16u);
    v13 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D002C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 224);
  v3 = swift_release(*(_QWORD *)(v0 + 184));
  swift_willThrow(v3);

  v4 = *(_QWORD *)(v0 + 240);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = type metadata accessor for Logger(0);
  sub_5240C(v6, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v5);
  swift_errorRetain(v4);
  swift_bridgeObjectRetain(v5);
  v7 = swift_errorRetain(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 160);
  if (v10)
  {
    v18 = *(_QWORD *)(v0 + 152);
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 128) = sub_57CD8(v18, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(v4);
    v15 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 136) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v12 + 14, v12 + 22);
    *v13 = v15;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl(&dword_0, v8, v9, "Failed to preview asset %s: %@", (uint8_t *)v12, 0x16u);
    v16 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v13, 1, v16);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D02BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  char v15;

  *(_BYTE *)(v8 + 386) = v15;
  *(_QWORD *)(v8 + 288) = v14;
  *(_OWORD *)(v8 + 272) = v13;
  *(_QWORD *)(v8 + 256) = a7;
  *(_QWORD *)(v8 + 264) = a8;
  *(_QWORD *)(v8 + 240) = a5;
  *(_QWORD *)(v8 + 248) = a6;
  *(_QWORD *)(v8 + 232) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 296) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 304) = v10;
  *(_QWORD *)(v8 + 312) = v11;
  return swift_task_switch(sub_1D034C, v10, v11);
}

uint64_t sub_1D034C()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  _QWORD *v20;

  v1 = *(void **)(v0 + 232);
  if (v1)
  {
    v2 = v1;
    *(_BYTE *)(v0 + 387) = objc_msgSend(v2, "isSG");
    v3 = (_QWORD *)swift_task_alloc(dword_32946C);
    *(_QWORD *)(v0 + 320) = v3;
    *v3 = v0;
    v3[1] = sub_1D05C8;
    return sub_1CDE9C((uint64_t)v2, *(_QWORD *)(v0 + 248));
  }
  else
  {
    if (qword_31E560 != -1)
      swift_once(&qword_31E560, sub_126518);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_5240C(v5, (uint64_t)qword_324FC8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "Not pushing ContentStoreData because the store asset is not provided", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    *(_BYTE *)(v0 + 388) = 0;
    if (*(_QWORD *)(v0 + 264))
    {
      v10 = type metadata accessor for BATracker(0);
      v11 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
      *(_QWORD *)(v0 + 336) = v11;
      *v11 = v0;
      v11[1] = sub_1D07A0;
      return BaseObjectGraph.inject<A>(_:)(v0 + 224, v10, v10);
    }
    else
    {
      v12 = v0 + 16;
      v14 = *(_QWORD *)(v0 + 280);
      v13 = *(_QWORD *)(v0 + 288);
      v15 = *(void **)(v0 + 272);
      v16 = sub_5C154(&qword_31EF50);
      v17 = swift_allocObject(v16, 48, 7);
      *(_OWORD *)(v17 + 16) = xmmword_258070;
      *(_QWORD *)(v17 + 32) = v14;
      *(_QWORD *)(v17 + 40) = v13;
      swift_bridgeObjectRetain(v13);
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 352) = isa;
      swift_bridgeObjectRelease(v17);
      *(_QWORD *)(v0 + 56) = v0 + 385;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1D0800;
      v19 = swift_continuation_init(v0 + 16, 0);
      *(_QWORD *)(v0 + 184) = _NSConcreteStackBlock;
      v20 = (_QWORD *)(v0 + 184);
      v20[1] = 0x40000000;
      v20[2] = sub_94150;
      v20[3] = &unk_2F2878;
      v20[4] = v19;
      objc_msgSend(v15, "downloadAssetIDs:completionHandler:", isa, v20);
      return swift_continuation_await(v12);
    }
  }
}

uint64_t sub_1D05C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1D0A1C;
  else
    v4 = sub_1D0628;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 304), *(_QWORD *)(v2 + 312));
}

uint64_t sub_1D0628()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;
  _QWORD *v12;

  *(_BYTE *)(v0 + 388) = *(_BYTE *)(v0 + 387);
  if (*(_QWORD *)(v0 + 264))
  {
    v1 = type metadata accessor for BATracker(0);
    v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *(_QWORD *)(v0 + 336) = v2;
    *v2 = v0;
    v2[1] = sub_1D07A0;
    return BaseObjectGraph.inject<A>(_:)(v0 + 224, v1, v1);
  }
  else
  {
    v4 = v0 + 16;
    v6 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 288);
    v7 = *(void **)(v0 + 272);
    v8 = sub_5C154(&qword_31EF50);
    v9 = swift_allocObject(v8, 48, 7);
    *(_OWORD *)(v9 + 16) = xmmword_258070;
    *(_QWORD *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v5;
    swift_bridgeObjectRetain(v5);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 352) = isa;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v0 + 56) = v0 + 385;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1D0800;
    v11 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 184) = _NSConcreteStackBlock;
    v12 = (_QWORD *)(v0 + 184);
    v12[1] = 0x40000000;
    v12[2] = sub_94150;
    v12[3] = &unk_2F2878;
    v12[4] = v11;
    objc_msgSend(v7, "downloadAssetIDs:completionHandler:", isa, v12);
    return swift_continuation_await(v4);
  }
}

uint64_t sub_1D07A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 336);
  *(_QWORD *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1D0A58;
  else
    v4 = sub_1D0880;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 304), *(_QWORD *)(v2 + 312));
}

uint64_t sub_1D0800()
{
  uint64_t v0;

  return swift_task_switch(sub_1D0844, *(_QWORD *)(*(_QWORD *)v0 + 304), *(_QWORD *)(*(_QWORD *)v0 + 312));
}

uint64_t sub_1D0844()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 352);
  swift_release(*(_QWORD *)(v0 + 296));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D0880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSString v6;
  NSString v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0 + 80;
  v2 = *(unsigned __int8 *)(v0 + 388);
  v3 = *(unsigned __int8 *)(v0 + 386);
  v4 = *(void **)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 360) = v5;
  v6 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 368) = v6;
  v7 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 376) = v7;
  *(_QWORD *)(v0 + 120) = v0 + 384;
  *(_QWORD *)(v0 + 80) = v0;
  *(_QWORD *)(v0 + 88) = sub_1D0984;
  v8 = swift_continuation_init(v0 + 80, 0);
  *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
  v9 = (_QWORD *)(v0 + 144);
  v9[1] = 0x40000000;
  v9[2] = sub_94150;
  v9[3] = &unk_2F2890;
  v9[4] = v8;
  objc_msgSend(v4, "downloadAssetID:redownloadParameters:isAudiobook:hasRacSupport:tracker:completionHandler:", v6, v7, v3, v2, v5, v9);
  return swift_continuation_await(v1);
}

uint64_t sub_1D0984()
{
  uint64_t v0;

  return swift_task_switch(sub_1D09C8, *(_QWORD *)(*(_QWORD *)v0 + 304), *(_QWORD *)(*(_QWORD *)v0 + 312));
}

uint64_t sub_1D09C8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 368);
  v1 = *(void **)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 296);

  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D0A1C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 296));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D0A58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 296));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D0A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[18] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[19] = v8;
  v6[20] = v9;
  return swift_task_switch(sub_1D0AFC, v8, v9);
}

uint64_t sub_1D0AFC()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  v3 = String._bridgeToObjectiveC()();
  v0[21] = v3;
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_1D0BAC;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1CF184;
  v5[3] = &unk_2F28A8;
  v5[4] = v4;
  objc_msgSend(v2, "cancelDownloadForAssetID:completionHandler:", v3, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1D0BAC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 176) = v2;
  if (v2)
    v3 = sub_1D0C08;
  else
    v3 = sub_1D5704;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
}

uint64_t sub_1D0C08()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 168);
  v2 = swift_release(*(_QWORD *)(v0 + 144));
  swift_willThrow(v2);

  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = type metadata accessor for Logger(0);
  sub_5240C(v5, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v4);
  swift_errorRetain(v3);
  swift_bridgeObjectRetain(v4);
  v6 = swift_errorRetain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 136);
  if (v9)
  {
    v12 = *(_QWORD *)(v0 + 128);
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v13 = 136315394;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 80) = sub_57CD8(v12, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v10);
    v15 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 80) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v13 + 14, v13 + 22);
    *v14 = v15;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v7, v8, "Failed to cancel download of asset %s: %@", (uint8_t *)v13, 0x16u);
    v16 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 176));
    swift_bridgeObjectRelease_n(v11, 2);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D0E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 4664) = a5;
  *(_QWORD *)(v5 + 3944) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 3992) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 4040) = v7;
  *(_QWORD *)(v5 + 4088) = v8;
  return swift_task_switch(sub_1D0F08, v7, v8);
}

uint64_t sub_1D0F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_retain_n(v1, 2);
  v2 = sub_667D0(&qword_31FE90);
  swift_asyncLet_begin(v0 + 656, 0, v2, &unk_329488, v1, v0 + 3496);
  swift_retain_n(v1, 2);
  v3 = type metadata accessor for BATracker(255);
  swift_asyncLet_begin(v0 + 1936, 0, v3, &unk_329498, v1, v0 + 3896);
  swift_retain_n(v1, 2);
  v4 = sub_667D0(&qword_3294B0);
  swift_asyncLet_begin(v0 + 2576, 0, v4, &unk_3294A8, v1, v0 + 3256);
  swift_retain_n(v1, 2);
  v5 = sub_667D0(&qword_3294C8);
  swift_asyncLet_begin(v0 + 1296, 0, v5, &unk_3294C0, v1, v0 + 3336);
  swift_retain(v1);
  v6 = sub_667D0(&qword_3294E0);
  swift_asyncLet_begin(v0 + 16, 0, v6, &unk_3294D8, v1, v0 + 3416);
  return swift_asyncLet_get_throwing(v0 + 656, v0 + 3496, sub_1D10A4, v0 + 3296);
}

uint64_t sub_1D10A4()
{
  uint64_t v0;
  _QWORD *v1;

  v1[517] = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 2, v1 + 427, sub_1D16C4, v1 + 422);
  else
    return swift_task_switch(sub_1D10D8, v1[505], v1[511]);
}

uint64_t sub_1D10D8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_5E0D8((uint64_t)(v0 + 437), (uint64_t)(v0 + 447));
  v1 = v0[450];
  v0[523] = v1;
  v0[529] = v0[451];
  v0[535] = sub_66898(v0 + 447, v1);
  return swift_asyncLet_get_throwing(v0 + 322, v0 + 407, sub_1D1150, v0 + 472);
}

uint64_t sub_1D1150()
{
  uint64_t v0;
  _QWORD *v1;

  v1[541] = v0;
  if (v0)
    return swift_task_switch(sub_1D1880, v1[505], v1[511]);
  sub_5E0D8((uint64_t)(v1 + 407), (uint64_t)(v1 + 457));
  return swift_asyncLet_get_throwing(v1 + 162, v1 + 417, sub_1D11D4, v1 + 512);
}

uint64_t sub_1D11D4()
{
  uint64_t v0;
  _QWORD *v1;

  v1[547] = v0;
  if (v0)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1 + 457);
    return swift_task_switch(sub_1D1A90, v1[505], v1[511]);
  }
  else
  {
    sub_5E0D8((uint64_t)(v1 + 417), (uint64_t)(v1 + 467));
    return swift_asyncLet_get_throwing(v1 + 2, v1 + 427, sub_1D1264, v1 + 548);
  }
}

uint64_t sub_1D1264()
{
  uint64_t v0;
  _QWORD *v1;

  v1[553] = v0;
  if (v0)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1 + 467);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1 + 457);
    return swift_task_switch(sub_1D1CB4, v1[505], v1[511]);
  }
  else
  {
    sub_5E0D8((uint64_t)(v1 + 427), (uint64_t)(v1 + 477));
    return swift_asyncLet_get_throwing(v1 + 242, v1 + 487, sub_1D1300, v1 + 584);
  }
}

uint64_t sub_1D1300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  int *v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  int *v9;

  *(_QWORD *)(v1 + 4472) = v0;
  if (v0)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 3816));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 3736));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 3656));
    return swift_task_switch(sub_1D1ED8, *(_QWORD *)(v1 + 4040), *(_QWORD *)(v1 + 4088));
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 4232);
    v4 = *(void **)(v1 + 3896);
    *(_QWORD *)(v1 + 4520) = v4;
    v5 = *(int **)(v3 + 8);
    v6 = v5[1];
    v9 = (int *)((char *)v5 + *v5);
    v7 = v4;
    v8 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v1 + 4568) = v8;
    *v8 = v1;
    v8[1] = sub_1D13FC;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, void *, _QWORD, _QWORD))v9)(*(unsigned __int8 *)(v1 + 4664), v1 + 3656, v1 + 3736, v1 + 3816, v4, *(_QWORD *)(v1 + 4184), *(_QWORD *)(v1 + 4232));
  }
}

uint64_t sub_1D13FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 4568);
  v4 = *(void **)(*(_QWORD *)v1 + 4520);
  *(_QWORD *)(*(_QWORD *)v1 + 4616) = v0;
  swift_task_dealloc(v3);

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v2 + 477);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v2 + 467);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v2 + 457);
  if (v0)
    v5 = sub_1D20FC;
  else
    v5 = sub_1D14A4;
  return swift_task_switch(v5, v2[505], v2[511]);
}

uint64_t sub_1D14A4()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 3576));
  return swift_asyncLet_finish(v0 + 16, v0 + 3416, sub_1D14FC, v0 + 5200);
}

uint64_t sub_1D14FC()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1510, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1510()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 3336, sub_1D152C, v0 + 5248);
}

uint64_t sub_1D152C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1540, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1540()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 2576, v0 + 3256, sub_1D1598, v0 + 5296);
}

uint64_t sub_1D1598()
{
  uint64_t v0;

  return swift_task_switch(sub_1D15AC, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D15AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 1936, v0 + 3896, sub_1D1604, v0 + 5344);
}

uint64_t sub_1D1604()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1618, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1618()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 656, v0 + 3496, sub_1D166C, v0 + 3216);
}

uint64_t sub_1D166C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1680, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1680()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_release(*(_QWORD *)(v0 + 3992));
  swift_release_n(v1, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D16C4()
{
  uint64_t v0;

  return swift_task_switch(sub_1D16D8, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D16D8()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 3336, sub_1D16F0, v0 + 3456);
}

uint64_t sub_1D16F0()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1704, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1704()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 2576, v0 + 3256, sub_1D1758, v0 + 3536);
}

uint64_t sub_1D1758()
{
  uint64_t v0;

  return swift_task_switch(sub_1D176C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D176C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 1936, v0 + 3896, sub_1D17C0, v0 + 3616);
}

uint64_t sub_1D17C0()
{
  uint64_t v0;

  return swift_task_switch(sub_1D17D4, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D17D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 656, v0 + 3496, sub_1D1828, v0 + 3696);
}

uint64_t sub_1D1828()
{
  uint64_t v0;

  return swift_task_switch(sub_1D183C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D183C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_release(*(_QWORD *)(v0 + 3992));
  swift_release_n(v1, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D1880()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 3576));
  return swift_asyncLet_finish(v0 + 16, v0 + 3416, sub_1D18D4, v0 + 3856);
}

uint64_t sub_1D18D4()
{
  uint64_t v0;

  return swift_task_switch(sub_1D18E8, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D18E8()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 3336, sub_1D1900, v0 + 3904);
}

uint64_t sub_1D1900()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1914, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1914()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 2576, v0 + 3256, sub_1D1968, v0 + 3952);
}

uint64_t sub_1D1968()
{
  uint64_t v0;

  return swift_task_switch(sub_1D197C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D197C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 1936, v0 + 3896, sub_1D19D0, v0 + 4000);
}

uint64_t sub_1D19D0()
{
  uint64_t v0;

  return swift_task_switch(sub_1D19E4, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D19E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 656, v0 + 3496, sub_1D1A38, v0 + 4048);
}

uint64_t sub_1D1A38()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1A4C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1A4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_release(*(_QWORD *)(v0 + 3992));
  swift_release_n(v1, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D1A90()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 3576));
  return swift_asyncLet_finish(v0 + 16, v0 + 3416, sub_1D1AE8, v0 + 4144);
}

uint64_t sub_1D1AE8()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1AFC, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1AFC()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 3336, sub_1D1B18, v0 + 4192);
}

uint64_t sub_1D1B18()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1B2C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1B2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 2576, v0 + 3256, sub_1D1B84, v0 + 4240);
}

uint64_t sub_1D1B84()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1B98, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1B98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 1936, v0 + 3896, sub_1D1BF0, v0 + 4288);
}

uint64_t sub_1D1BF0()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1C04, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1C04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 656, v0 + 3496, sub_1D1C5C, v0 + 4336);
}

uint64_t sub_1D1C5C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1C70, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1C70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_release(*(_QWORD *)(v0 + 3992));
  swift_release_n(v1, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D1CB4()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 3576));
  return swift_asyncLet_finish(v0 + 16, v0 + 3416, sub_1D1D0C, v0 + 4432);
}

uint64_t sub_1D1D0C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1D20, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1D20()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 3336, sub_1D1D3C, v0 + 4480);
}

uint64_t sub_1D1D3C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1D50, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1D50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 2576, v0 + 3256, sub_1D1DA8, v0 + 4528);
}

uint64_t sub_1D1DA8()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1DBC, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1DBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 1936, v0 + 3896, sub_1D1E14, v0 + 4576);
}

uint64_t sub_1D1E14()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1E28, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1E28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 656, v0 + 3496, sub_1D1E80, v0 + 4624);
}

uint64_t sub_1D1E80()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1E94, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1E94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_release(*(_QWORD *)(v0 + 3992));
  swift_release_n(v1, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D1ED8()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 3576));
  return swift_asyncLet_finish(v0 + 16, v0 + 3416, sub_1D1F30, v0 + 4720);
}

uint64_t sub_1D1F30()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1F44, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1F44()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 3336, sub_1D1F60, v0 + 4768);
}

uint64_t sub_1D1F60()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1F74, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1F74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 2576, v0 + 3256, sub_1D1FCC, v0 + 4816);
}

uint64_t sub_1D1FCC()
{
  uint64_t v0;

  return swift_task_switch(sub_1D1FE0, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D1FE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 1936, v0 + 3896, sub_1D2038, v0 + 4864);
}

uint64_t sub_1D2038()
{
  uint64_t v0;

  return swift_task_switch(sub_1D204C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D204C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 656, v0 + 3496, sub_1D20A4, v0 + 4912);
}

uint64_t sub_1D20A4()
{
  uint64_t v0;

  return swift_task_switch(sub_1D20B8, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D20B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_release(*(_QWORD *)(v0 + 3992));
  swift_release_n(v1, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D20FC()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 3576));
  return swift_asyncLet_finish(v0 + 16, v0 + 3416, sub_1D2154, v0 + 4960);
}

uint64_t sub_1D2154()
{
  uint64_t v0;

  return swift_task_switch(sub_1D2168, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D2168()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 3336, sub_1D2184, v0 + 5008);
}

uint64_t sub_1D2184()
{
  uint64_t v0;

  return swift_task_switch(sub_1D2198, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D2198()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 2576, v0 + 3256, sub_1D21F0, v0 + 5056);
}

uint64_t sub_1D21F0()
{
  uint64_t v0;

  return swift_task_switch(sub_1D2204, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D2204()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 1936, v0 + 3896, sub_1D225C, v0 + 5104);
}

uint64_t sub_1D225C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D2270, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D2270()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3944));
  return swift_asyncLet_finish(v0 + 656, v0 + 3496, sub_1D22C8, v0 + 5152);
}

uint64_t sub_1D22C8()
{
  uint64_t v0;

  return swift_task_switch(sub_1D22DC, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4088));
}

uint64_t sub_1D22DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3944);
  swift_release(*(_QWORD *)(v0 + 3992));
  swift_release_n(v1, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D2320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = sub_5C154(&qword_31FE90);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_7BFF8;
  return BaseObjectGraph.inject<A>(_:)(a1, v3, v3);
}

uint64_t sub_1D2398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = type metadata accessor for BATracker(0);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_64780;
  return BaseObjectGraph.inject<A>(_:)(a1, v3, v3);
}

uint64_t sub_1D240C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = sub_5C154(&qword_3294B0);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_7BFF8;
  return BaseObjectGraph.inject<A>(_:)(a1, v3, v3);
}

uint64_t sub_1D2484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = sub_5C154(&qword_3294C8);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_7BFF8;
  return BaseObjectGraph.inject<A>(_:)(a1, v3, v3);
}

uint64_t sub_1D24FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = sub_5C154(&qword_3294E0);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_7BFF8;
  return BaseObjectGraph.inject<A>(_:)(a1, v3, v3);
}

uint64_t sub_1D2574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8[19] = a8;
  v8[20] = v13;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  v9 = type metadata accessor for MainActor(0);
  v8[21] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[22] = v10;
  v8[23] = v11;
  return swift_task_switch(sub_1D25F0, v10, v11);
}

uint64_t sub_1D25F0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;
  _QWORD *v19;

  v1 = (void *)v0[15];
  if (v1)
  {
    v2 = dword_32946C;
    v3 = v1;
    v4 = (_QWORD *)swift_task_alloc(v2);
    v0[24] = v4;
    *v4 = v0;
    v4[1] = sub_1D27F0;
    return sub_1CDE9C((uint64_t)v3, v0[17]);
  }
  else
  {
    if (qword_31E560 != -1)
      swift_once(&qword_31E560, sub_126518);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_5240C(v6, (uint64_t)qword_324FC8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "Not pushing ContentStoreData because the store asset is not provided", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = v0 + 2;
    v13 = v0[19];
    v12 = v0[20];
    v14 = (void *)v0[18];
    v15 = sub_5C154(&qword_31EF50);
    v16 = swift_allocObject(v15, 48, 7);
    *(_OWORD *)(v16 + 16) = xmmword_258070;
    *(_QWORD *)(v16 + 32) = v13;
    *(_QWORD *)(v16 + 40) = v12;
    swift_bridgeObjectRetain(v12);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v0[26] = isa;
    swift_bridgeObjectRelease(v16);
    v0[7] = v0 + 27;
    v0[2] = v0;
    v0[3] = sub_1D2958;
    v18 = swift_continuation_init(v0 + 2, 0);
    v0[10] = _NSConcreteStackBlock;
    v19 = v0 + 10;
    v19[1] = 0x40000000;
    v19[2] = sub_94150;
    v19[3] = &unk_2F28C0;
    v19[4] = v18;
    objc_msgSend(v14, "updateAssetIDs:completionHandler:", isa, v19);
    return swift_continuation_await(v11);
  }
}

uint64_t sub_1D27F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1D29D8;
  else
    v4 = sub_1D2850;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 184));
}

uint64_t sub_1D2850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0 + 16;

  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(void **)(v0 + 144);
  v5 = sub_5C154(&qword_31EF50);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_258070;
  *(_QWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v2;
  swift_bridgeObjectRetain(v2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 208) = isa;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(v0 + 56) = v0 + 216;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1D2958;
  v8 = swift_continuation_init(v0 + 16, 0);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v9 = (_QWORD *)(v0 + 80);
  v9[1] = 0x40000000;
  v9[2] = sub_94150;
  v9[3] = &unk_2F28C0;
  v9[4] = v8;
  objc_msgSend(v4, "updateAssetIDs:completionHandler:", isa, v9);
  return swift_continuation_await(v1);
}

uint64_t sub_1D2958()
{
  uint64_t v0;

  return swift_task_switch(sub_1D299C, *(_QWORD *)(*(_QWORD *)v0 + 176), *(_QWORD *)(*(_QWORD *)v0 + 184));
}

uint64_t sub_1D299C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 168));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D29D8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 168));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D2A14(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)(v8 + 800) = v13;
  *(_QWORD *)(v8 + 792) = a8;
  *(_QWORD *)(v8 + 784) = a7;
  *(_QWORD *)(v8 + 776) = a6;
  *(_QWORD *)(v8 + 768) = a5;
  *(_BYTE *)(v8 + 881) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 808) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 816) = v10;
  *(_QWORD *)(v8 + 824) = v11;
  return swift_task_switch(sub_1D2AA0, v10, v11);
}

uint64_t sub_1D2AA0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_BYTE *)(v0 + 881);
  v3 = swift_allocObject(&unk_2F28E8, 32, 7);
  *(_QWORD *)(v0 + 832) = v3;
  *(_BYTE *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain(v1);
  swift_retain(v3);
  v4 = sub_667D0(&qword_3294F8);
  swift_asyncLet_begin(v0 + 16, 0, v4, &unk_3294F0, v3, v0 + 760);
  *(_QWORD *)(v0 + 840) = String._bridgeToObjectiveC()();
  *(NSDate *)(v0 + 848) = Date._bridgeToObjectiveC()();
  return swift_asyncLet_get_throwing(v0 + 16, v0 + 760, sub_1D2B90, v0 + 720);
}

uint64_t sub_1D2B90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)();

  v1[107] = v0;
  if (v0)
    v2 = sub_1D2D68;
  else
    v2 = sub_1D2BB8;
  return swift_task_switch(v2, v1[102], v1[103]);
}

uint64_t sub_1D2BB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = v0[106];
  v2 = v0[105];
  v3 = (void *)v0[97];
  v4 = (void *)v0[95];
  v0[108] = v4;
  v0[82] = v0;
  v0[87] = v0 + 110;
  v0[83] = sub_1D2C88;
  v0[94] = swift_continuation_init(v0 + 82, 1);
  v0[90] = _NSConcreteStackBlock;
  v0[91] = 0x40000000;
  v0[92] = sub_1CF184;
  v0[93] = &unk_2F2900;
  objc_msgSend(v3, "setFinishedDateForAssetID:toDate:tracker:callback:", v2, v1, v4, v0 + 90);
  return swift_continuation_await(v0 + 82);
}

uint64_t sub_1D2C88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 688);
  *(_QWORD *)(*v0 + 872) = v2;
  if (v2)
    v3 = sub_1D2DD8;
  else
    v3 = sub_1D2CE8;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 816), *(_QWORD *)(v1 + 824));
}

uint64_t sub_1D2CE8()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 864);
  v2 = *(void **)(v0 + 840);

  return swift_asyncLet_finish(v0 + 16, v0 + 760, sub_1D2D54, v0 + 720);
}

uint64_t sub_1D2D54()
{
  uint64_t v0;

  return swift_task_switch(sub_1D5700, *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 824));
}

uint64_t sub_1D2D68()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 840);

  return swift_asyncLet_finish(v0 + 16, v0 + 760, sub_1D2DC4, v0 + 720);
}

uint64_t sub_1D2DC4()
{
  uint64_t v0;

  return swift_task_switch(sub_1D570C, *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 824));
}

uint64_t sub_1D2DD8(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)v1[108];
  v3 = (void *)v1[106];
  v4 = (void *)v1[105];
  swift_willThrow(a1);

  return swift_asyncLet_finish(v1 + 2, v1 + 95, sub_1D2E54, v1 + 90);
}

uint64_t sub_1D2E54()
{
  uint64_t v0;

  return swift_task_switch(sub_1D5710, *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 824));
}

uint64_t sub_1D2E68(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_1D2E84, 0, 0);
}

uint64_t sub_1D2E84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    v1 = type metadata accessor for BATracker(0);
    v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *(_QWORD *)(v0 + 40) = v2;
    *v2 = v0;
    v2[1] = sub_1D2F28;
    return BaseObjectGraph.inject<A>(_:)(v0 + 16, v1, v1);
  }
  else
  {
    **(_QWORD **)(v0 + 24) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1D2F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1D5708;
  else
    v3 = sub_1D56F8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1D2F8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)(v8 + 800) = v13;
  *(_QWORD *)(v8 + 792) = a8;
  *(_QWORD *)(v8 + 784) = a7;
  *(_QWORD *)(v8 + 776) = a6;
  *(_QWORD *)(v8 + 768) = a5;
  *(_BYTE *)(v8 + 881) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 808) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 816) = v10;
  *(_QWORD *)(v8 + 824) = v11;
  return swift_task_switch(sub_1D3018, v10, v11);
}

uint64_t sub_1D3018()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_BYTE *)(v0 + 881);
  v3 = swift_allocObject(&unk_2F2928, 32, 7);
  *(_QWORD *)(v0 + 832) = v3;
  *(_BYTE *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain(v1);
  swift_retain(v3);
  v4 = sub_667D0(&qword_3294F8);
  swift_asyncLet_begin(v0 + 16, 0, v4, &unk_329508, v3, v0 + 760);
  *(_QWORD *)(v0 + 840) = String._bridgeToObjectiveC()();
  *(NSDate *)(v0 + 848) = Date._bridgeToObjectiveC()();
  return swift_asyncLet_get_throwing(v0 + 16, v0 + 760, sub_1D3108, v0 + 720);
}

uint64_t sub_1D3108()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)();

  v1[107] = v0;
  if (v0)
    v2 = sub_1D3320;
  else
    v2 = sub_1D3130;
  return swift_task_switch(v2, v1[102], v1[103]);
}

uint64_t sub_1D3130()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = v0[106];
  v2 = v0[105];
  v3 = (void *)v0[97];
  v4 = (void *)v0[95];
  v0[108] = v4;
  v0[82] = v0;
  v0[87] = v0 + 110;
  v0[83] = sub_1D3200;
  v0[94] = swift_continuation_init(v0 + 82, 1);
  v0[90] = _NSConcreteStackBlock;
  v0[91] = 0x40000000;
  v0[92] = sub_1CF184;
  v0[93] = &unk_2F2940;
  objc_msgSend(v3, "setFinishedYearForAssetID:toYearOfDate:tracker:callback:", v2, v1, v4, v0 + 90);
  return swift_continuation_await(v0 + 82);
}

uint64_t sub_1D3200()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 688);
  *(_QWORD *)(*v0 + 872) = v2;
  if (v2)
    v3 = sub_1D3620;
  else
    v3 = sub_1D3260;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 816), *(_QWORD *)(v1 + 824));
}

uint64_t sub_1D3260()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 864);
  v2 = *(void **)(v0 + 840);

  return swift_asyncLet_finish(v0 + 16, v0 + 760, sub_1D32CC, v0 + 720);
}

uint64_t sub_1D32CC()
{
  uint64_t v0;

  return swift_task_switch(sub_1D32E0, *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 824));
}

uint64_t sub_1D32E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 832);
  swift_release(*(_QWORD *)(v0 + 808));
  swift_release_n(v1, 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D3320()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 840);

  return swift_asyncLet_finish(v0 + 16, v0 + 760, sub_1D337C, v0 + 720);
}

uint64_t sub_1D337C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D3390, *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 824));
}

uint64_t sub_1D3390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 856);
  v2 = *(_QWORD *)(v0 + 832);
  swift_release(*(_QWORD *)(v0 + 808));
  swift_release(v2);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v3 = *(_QWORD *)(v0 + 792);
  v4 = type metadata accessor for Logger(0);
  sub_5240C(v4, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v3);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v3);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 832);
  v10 = *(_QWORD *)(v0 + 792);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 784);
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136315394;
    v18 = v17;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 16) = sub_57CD8(v11, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2112;
    v14 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 16) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 14, v12 + 22);
    *v13 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v6, v7, "Failed to set finished date for asset %s: %@", (uint8_t *)v12, 0x16u);
    v15 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_release(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D3620(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)v1[108];
  v3 = (void *)v1[106];
  v4 = (void *)v1[105];
  swift_willThrow(a1);

  return swift_asyncLet_finish(v1 + 2, v1 + 95, sub_1D369C, v1 + 90);
}

uint64_t sub_1D369C()
{
  uint64_t v0;

  return swift_task_switch(sub_1D36B0, *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 824));
}

uint64_t sub_1D36B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 872);
  v2 = *(_QWORD *)(v0 + 832);
  swift_release(*(_QWORD *)(v0 + 808));
  swift_release(v2);
  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v3 = *(_QWORD *)(v0 + 792);
  v4 = type metadata accessor for Logger(0);
  sub_5240C(v4, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v3);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v3);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 832);
  v10 = *(_QWORD *)(v0 + 792);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 784);
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136315394;
    v18 = v17;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 16) = sub_57CD8(v11, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2112;
    v14 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 16) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 14, v12 + 22);
    *v13 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v6, v7, "Failed to set finished date for asset %s: %@", (uint8_t *)v12, 0x16u);
    v15 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_release(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D3940(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_1D395C, 0, 0);
}

uint64_t sub_1D395C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    v1 = type metadata accessor for BATracker(0);
    v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *(_QWORD *)(v0 + 40) = v2;
    *v2 = v0;
    v2[1] = sub_1D3A00;
    return BaseObjectGraph.inject<A>(_:)(v0 + 16, v1, v1);
  }
  else
  {
    **(_QWORD **)(v0 + 24) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1D3A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1D3A78;
  else
    v3 = sub_1D3A64;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1D3A64()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D3A78()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D3A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[18] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[19] = v8;
  v6[20] = v9;
  return swift_task_switch(sub_1D3AF4, v8, v9);
}

uint64_t sub_1D3AF4()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  v3 = String._bridgeToObjectiveC()();
  v0[21] = v3;
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_1D3BA4;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1CF184;
  v5[3] = &unk_2F2958;
  v5[4] = v4;
  objc_msgSend(v2, "unsetFinishedDateForAssetID:callback:", v3, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1D3BA4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 176) = v2;
  if (v2)
    v3 = sub_1D3C38;
  else
    v3 = sub_1D3C00;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
}

uint64_t sub_1D3C00()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 144));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D3C38()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 168);
  v2 = swift_release(*(_QWORD *)(v0 + 144));
  swift_willThrow(v2);

  if (qword_31E560 != -1)
    swift_once(&qword_31E560, sub_126518);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = type metadata accessor for Logger(0);
  sub_5240C(v5, (uint64_t)qword_324FC8);
  swift_bridgeObjectRetain(v4);
  swift_errorRetain(v3);
  swift_bridgeObjectRetain(v4);
  v6 = swift_errorRetain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 136);
  if (v9)
  {
    v12 = *(_QWORD *)(v0 + 128);
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v13 = 136315394;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 80) = sub_57CD8(v12, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v13 + 12) = 2112;
    v15 = _convertErrorToNSError(_:)(v10);
    *(_QWORD *)(v0 + 80) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v13 + 14, v13 + 22);
    *v14 = v15;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v7, v8, "Failed to unset finished date for asset %s: %@", (uint8_t *)v13, 0x16u);
    v16 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 176));
    swift_bridgeObjectRelease_n(v11, 2);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D3EB8(uint64_t result, void *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(result + 32);
  if (a4)
  {
    v6 = sub_5C154((uint64_t *)&unk_321CD0);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else if (a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
    *(_QWORD *)v10 = a2;
    *(_BYTE *)(v10 + 8) = a3;
    v11 = a2;
    return swift_continuation_throwingResume(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D3F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v5 = v3;
  v31 = a2;
  v7 = sub_5C154(&qword_329740);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AssetAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = *(_QWORD *)(a3 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v15);
  v16 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C9C40(v5, (uint64_t)v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v14 + v19 + v18) & ~v19;
  v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_2F2588, v21 + 8, v17 | v19 | 7);
  sub_1C9C88((uint64_t)v16, v22 + v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v22 + v20, (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v23 = v31;
  *(_QWORD *)(v22 + v21) = v31;
  sub_5C154(&qword_3208F8);
  v24 = swift_retain(v23);
  v25 = Promise.__allocating_init()(v24);
  v26 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 1, 1, v26);
  v27 = (_QWORD *)swift_allocObject(&unk_2F25B0, 56, 7);
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = &unk_329360;
  v27[5] = v22;
  v27[6] = v25;
  swift_retain(v25);
  v28 = sub_174AF8((uint64_t)v9, (uint64_t)&unk_326F00, (uint64_t)v27);
  swift_release(v28);
  return v25;
}

uint64_t sub_1D415C()
{
  return sub_648E0(&qword_325E48, (uint64_t (*)(uint64_t))&type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
}

uint64_t initializeBufferWithCopyOfBuffer for AssetActionImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for AssetActionImplementation(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PageData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for AssetActionImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for AssetActionImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AssetActionImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AssetActionImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetActionImplementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D4314);
}

uint64_t sub_1D4314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AssetActionImplementation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D435C);
}

uint64_t sub_1D435C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1D439C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PageData(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1D4408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for AssetAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = v2 | v7 | 7;
  v10 = (*(_QWORD *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + v3, v11);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  swift_release(*(_QWORD *)(v0 + v10));
  return swift_deallocObject(v0, v10 + 8, v9);
}

uint64_t sub_1D44DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_32937C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_7BFF8;
  return sub_1D3A84(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1D4560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_329394);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_7BFF8;
  return sub_1D2F8C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1D4620()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 5));
  swift_unknownObjectRelease(*((_QWORD *)v0 + 6));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 8));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1D46AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_3293AC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_7BFF8;
  return sub_1D2A14(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1D4768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v8 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
  swift_release(*(_QWORD *)(v0 + v5));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v4);
}

uint64_t sub_1D4830(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = *(_QWORD *)((char *)v1 + v6);
  v12 = *(_QWORD *)((char *)v1 + v7);
  v13 = (uint64_t)v1 + v5;
  v14 = *(_QWORD *)((char *)v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_3293BC);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_7BFF8;
  return sub_1D2574(a1, v8, v9, v10, v13, v11, v12, v14);
}

uint64_t sub_1D4914()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1D4940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_3293CC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_7BFF8;
  return sub_1D0E90(a1, v4, v5, v6, v7);
}

uint64_t sub_1D49C0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1D49F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_3293DC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_7BFF8;
  return sub_1D0A8C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1D4A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v9 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v3, v9);
  swift_release(*(_QWORD *)(v0 + v5));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v7));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 17, v4);
}

uint64_t sub_1D4B50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[4];
  v14 = v1[3];
  v15 = v1[2];
  v8 = *(_QWORD *)((char *)v1 + v5);
  v9 = (uint64_t)v1 + v4;
  v10 = *(_QWORD *)((char *)v1 + v6);
  v11 = *(_QWORD *)((char *)v1 + v6 + 8);
  v12 = (_QWORD *)swift_task_alloc(dword_3293EC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_7BFF8;
  return sub_1D02BC(a1, v15, v14, v7, v9, v8, v10, v11);
}

uint64_t sub_1D4C50()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1D4C94(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_3293FC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_7BFF8;
  return sub_1CFB2C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1D4D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for AssetAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + v6 + 8) & ~v9;
  v13 = v10 + *(_QWORD *)(v8 + 64);
  v11 = v3 | v9 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);
  return swift_deallocObject(v0, v13, v11);
}

uint64_t sub_1D4E1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for AssetAction(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for URL(0);
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = v1[5];
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *(_QWORD *)((char *)v1 + v7);
  v14 = (_QWORD *)swift_task_alloc(dword_32940C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_7BFF8;
  return sub_1CF204(a1, v8, v9, v10, v11, (uint64_t)v1 + v5, v12, v13);
}

uint64_t sub_1D4F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for AssetAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1D4FB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for AssetAction(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *(_QWORD *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_32941C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_7BFF8;
  return sub_1CE884(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1D5080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v9 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v3, v9);

  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v4);
}

uint64_t sub_1D5154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;

  v3 = *(_QWORD *)(type metadata accessor for AssetActionImplementation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v4;
  v11 = *(_QWORD *)(v1 + v5);
  v12 = *(_QWORD *)(v1 + v6);
  v13 = *(_QWORD *)(v1 + v7);
  v14 = *(_QWORD *)(v1 + v7 + 8);
  v15 = (_QWORD *)swift_task_alloc(dword_32942C);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_64780;
  return sub_1CD124(v16, a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1D5248(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v4 = v1[4];
  v11 = v1[3];
  v12 = v1[2];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = (_QWORD *)swift_task_alloc(dword_32943C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_64780;
  return sub_1CC5F4(a1, v12, v11, v4, v5, v6, v7, v8);
}

uint64_t sub_1D5300()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_unknownObjectRelease(v0[9]);
  return swift_deallocObject(v0, 82, 7);
}

uint64_t sub_1D5344(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v4 = v1[4];
  v11 = v1[3];
  v12 = v1[2];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = (_QWORD *)swift_task_alloc(dword_32944C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_7BFF8;
  return sub_1CB874(a1, v12, v11, v4, v5, v6, v7, v8);
}

uint64_t sub_1D53F8(uint64_t a1)
{
  uint64_t v1;

  return sub_223D58(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1D5400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_329740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D5448(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_329484);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_7BFF8;
  return sub_1D2320(a1);
}

uint64_t sub_1D549C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_329494);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_7BFF8;
  return sub_1D2398(a1);
}

uint64_t sub_1D54F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_3294A4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_7BFF8;
  return sub_1D240C(a1);
}

uint64_t sub_1D5544(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_3294BC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_7BFF8;
  return sub_1D2484(a1);
}

uint64_t sub_1D5598(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_3294D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_7BFF8;
  return sub_1D24FC(a1);
}

uint64_t sub_1D55EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1D5610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_BYTE *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = swift_task_alloc(dword_3294EC);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_7BFF8;
  *(_BYTE *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v5;
  return swift_task_switch(sub_1D2E84, 0, 0);
}

uint64_t sub_1D5684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_BYTE *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = swift_task_alloc(dword_329504);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_7BFF8;
  *(_BYTE *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v5;
  return swift_task_switch(sub_1D395C, 0, 0);
}

unint64_t static SeriesSeeAllPaginationIntent.kind.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t SeriesSeeAllPaginationIntent.seriesInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E0D8(v1 + 16, a1);
}

uint64_t SeriesSeeAllPaginationIntent.paginationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesSeeAllPaginationIntent(0) + 24);
  v4 = type metadata accessor for PaginationInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesSeeAllPaginationIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_329568;
  if (!qword_329568)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesSeeAllPaginationIntent);
  return result;
}

uint64_t SeriesSeeAllPaginationIntent.offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for SeriesSeeAllPaginationIntent(0) + 28));
}

uint64_t SeriesSeeAllPaginationIntent.filterOption.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SeriesSeeAllPaginationIntent(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

void sub_1D5810(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x8000000000265500;
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesSeeAllPaginationIntent(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v8;
    v9 = v8;
    v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
    swift_bridgeObjectRetain(v7);
    v10(a1 + 16, (uint64_t)(a2 + 2), v9);
    v11 = a3[6];
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for PaginationInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[8];
    *(_QWORD *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_BYTE *)(a1 + v15) = *((_BYTE *)a2 + v15);
  }
  return a1;
}

uint64_t destroy for SeriesSeeAllPaginationIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for PaginationInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for SeriesSeeAllPaginationIntent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2 + 16;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 16, v7, v9);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for PaginationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

_QWORD *assignWithCopy for SeriesSeeAllPaginationIntent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_65938(a1 + 2, a2 + 2);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PaginationInfo(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for SeriesSeeAllPaginationIntent(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PaginationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for SeriesSeeAllPaginationIntent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 16));
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = a3[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for PaginationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesSeeAllPaginationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D5C00);
}

uint64_t sub_1D5C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PaginationInfo(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesSeeAllPaginationIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D5C88);
}

uint64_t sub_1D5C88(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PaginationInfo(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1D5CFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_2655B0;
  v4[1] = &unk_2655C8;
  result = type metadata accessor for PaginationInfo(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_2655E0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t ContentUnavailableComponentModel.init(iconName:title:message:layout:id:titleStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  char v24;
  __int128 v25;
  char v26;
  _BYTE v27[40];
  _OWORD v28[2];
  uint64_t v29;

  *(_QWORD *)&v25 = a6;
  *((_QWORD *)&v25 + 1) = a7;
  v14 = *a5;
  v15 = a5[1];
  v24 = *((_BYTE *)a5 + 16);
  v26 = *a8;
  v16 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  sub_5E1A4((uint64_t)v28, (uint64_t)v27, (uint64_t *)&unk_326210);
  _CodeAnyActionModel_OrNil.init(wrappedValue:)(v27);
  sub_5E09C((uint64_t)v28, (uint64_t *)&unk_326210);
  v17 = (char *)a9 + v16[11];
  v18 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *a9 = a1;
  a9[1] = a2;
  v19 = (char *)a9 + v16[5];
  v20 = type metadata accessor for LocalizerRequest(0);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, a3, v20);
  sub_5E1A4(a4, (uint64_t)a9 + v16[6], &qword_3217B8);
  v22 = (char *)a9 + v16[7];
  *(_QWORD *)v22 = v14;
  *((_QWORD *)v22 + 1) = v15;
  v22[16] = v24;
  v28[0] = v25;
  AnyHashable.init<A>(_:)(v28, &type metadata for String, &protocol witness table for String);
  sub_5E09C(a4, &qword_3217B8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(a3, v20);
  *((_BYTE *)a9 + v16[8]) = v26;
  return result;
}

uint64_t type metadata accessor for ContentUnavailableComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_329688;
  if (!qword_329688)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContentUnavailableComponentModel);
  return result;
}

uint64_t ContentUnavailableComponentModel.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentUnavailableComponentModel(0) + 20);
  v4 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentUnavailableComponentModel.message.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ContentUnavailableComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 24), a1, &qword_3217B8);
}

__n128 ContentUnavailableComponentModel.layout.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = (__n128 *)(v1 + *(int *)(type metadata accessor for ContentUnavailableComponentModel(0) + 28));
  v4 = v3[1].n128_u8[0];
  result = *v3;
  *a1 = *v3;
  a1[1].n128_u8[0] = v4;
  return result;
}

uint64_t ContentUnavailableComponentModel.titleStyle.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ContentUnavailableComponentModel(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ContentUnavailableComponentModel.segue.getter()
{
  type metadata accessor for ContentUnavailableComponentModel(0);
  return _CodeAnyActionModel_OrNil.wrappedValue.getter();
}

uint64_t sub_1D608C(uint64_t a1)
{
  _BYTE v2[40];
  _BYTE v3[40];

  sub_5E1A4(a1, (uint64_t)v3, (uint64_t *)&unk_326210);
  sub_5E1A4((uint64_t)v3, (uint64_t)v2, (uint64_t *)&unk_326210);
  type metadata accessor for ContentUnavailableComponentModel(0);
  _CodeAnyActionModel_OrNil.wrappedValue.setter(v2);
  return sub_5E09C((uint64_t)v3, (uint64_t *)&unk_326210);
}

uint64_t ContentUnavailableComponentModel.segue.setter(uint64_t a1)
{
  _BYTE v3[40];

  sub_5E1A4(a1, (uint64_t)v3, (uint64_t *)&unk_326210);
  type metadata accessor for ContentUnavailableComponentModel(0);
  _CodeAnyActionModel_OrNil.wrappedValue.setter(v3);
  return sub_5E09C(a1, (uint64_t *)&unk_326210);
}

void (*ContentUnavailableComponentModel.segue.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ContentUnavailableComponentModel(0);
  v2[4] = _CodeAnyActionModel_OrNil.wrappedValue.modify(v2);
  return sub_1D61BC;
}

uint64_t ContentUnavailableComponentModel.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ContentUnavailableComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 40), a1, &qword_320B78);
}

uint64_t sub_1D61FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[40];

  sub_5DCB0(a1, (uint64_t)v5);
  v3 = type metadata accessor for ContentUnavailableComponentModel(0);
  return sub_180F44((uint64_t)v5, a2 + *(int *)(v3 + 40));
}

uint64_t ContentUnavailableComponentModel.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ContentUnavailableComponentModel(0) + 40);
  return sub_180F44(a1, v3);
}

Swift::Void (__swiftcall *ContentUnavailableComponentModel.id.modify())()
{
  type metadata accessor for ContentUnavailableComponentModel(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t ContentUnavailableComponentModel.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContentUnavailableComponentModel(0);
  sub_5E1A4(v1 + *(int *)(v6 + 44), (uint64_t)v5, &qword_321EA8);
  return sub_66F14((uint64_t)v5, a1, &qword_31F480);
}

uint64_t sub_1D632C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContentUnavailableComponentModel(0);
  sub_5E1A4(a1 + *(int *)(v7 + 44), (uint64_t)v6, &qword_321EA8);
  return sub_66F14((uint64_t)v6, a2, &qword_31F480);
}

uint64_t sub_1D63C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(a1, (uint64_t)v6, &qword_31F480);
  v7 = type metadata accessor for ContentUnavailableComponentModel(0);
  return sub_8B3E0((uint64_t)v6, a2 + *(int *)(v7 + 44), &qword_31F480);
}

uint64_t ContentUnavailableComponentModel.impressionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ContentUnavailableComponentModel(0);
  return sub_8B3E0(a1, v1 + *(int *)(v3 + 44), &qword_31F480);
}

Swift::Void (__swiftcall *ContentUnavailableComponentModel.impressionMetrics.modify())()
{
  type metadata accessor for ContentUnavailableComponentModel(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_1D64BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D6F74737563;
  else
    return 0x657263536C6C7566;
}

uint64_t sub_1D64F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D9224(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D651C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D6924();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D6544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D6924();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1D656C()
{
  _BYTE *v0;

  if (*v0)
    return 0x61506D6F74746F62;
  else
    return 0x6964646150706F74;
}

uint64_t sub_1D65B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D9318(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D65DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D6968();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D6604(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D6968();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1D662C()
{
  return 0;
}

uint64_t sub_1D6638@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_1D6664(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D69AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D668C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D69AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentUnavailableComponentModel.Layout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v3 = sub_5C154(&qword_3295B0);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  __chkstk_darwin(v3);
  v28 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5C154(&qword_3295B8);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_3295C0);
  v8 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v11 = v1[1];
  v13 = *((_BYTE *)v1 + 16);
  v14 = a1[3];
  v15 = a1[4];
  sub_66898(a1, v14);
  v16 = sub_1D6924();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentUnavailableComponentModel.Layout.CodingKeys, &type metadata for ContentUnavailableComponentModel.Layout.CodingKeys, v16, v14, v15);
  if ((v13 & 1) != 0)
  {
    LOBYTE(v34) = 0;
    v17 = sub_1D69AC();
    v18 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys, &v34, v32, &type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys, v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  }
  else
  {
    LOBYTE(v34) = 1;
    v20 = sub_1D6968();
    v21 = v28;
    v22 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys, &v34, v32, &type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys, v20);
    v34 = v12;
    v33 = 0;
    v23 = sub_114C70();
    v25 = v30;
    v24 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v30, &type metadata for CGFloat, v23);
    if (!v24)
    {
      v34 = v11;
      v33 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v25, &type metadata for CGFloat, v23);
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  }
}

unint64_t sub_1D6924()
{
  unint64_t result;

  result = qword_3295C8;
  if (!qword_3295C8)
  {
    result = swift_getWitnessTable(&unk_265CAC, &type metadata for ContentUnavailableComponentModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3295C8);
  }
  return result;
}

unint64_t sub_1D6968()
{
  unint64_t result;

  result = qword_3295D0;
  if (!qword_3295D0)
  {
    result = swift_getWitnessTable(&unk_265C5C, &type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_3295D0);
  }
  return result;
}

unint64_t sub_1D69AC()
{
  unint64_t result;

  result = qword_3295D8;
  if (!qword_3295D8)
  {
    result = swift_getWitnessTable(&unk_265C0C, &type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_3295D8);
  }
  return result;
}

uint64_t ContentUnavailableComponentModel.Layout.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  _QWORD *v34;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  _BYTE v44[4];
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _BYTE *v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a2;
  v3 = sub_5C154(&qword_3295E0);
  v4 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v48 = v4;
  __chkstk_darwin(v3);
  v50 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_5C154(&qword_3295E8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_5C154(&qword_3295F0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = a1[3];
  v15 = a1[4];
  v51 = a1;
  sub_66898(a1, v14);
  v16 = sub_1D6924();
  v17 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentUnavailableComponentModel.Layout.CodingKeys, &type metadata for ContentUnavailableComponentModel.Layout.CodingKeys, v16, v14, v15);
  if (v17)
    goto LABEL_6;
  v18 = v6;
  v19 = v50;
  v46 = v11;
  v20 = KeyedDecodingContainer.allKeys.getter(v10);
  if (*(_QWORD *)(v20 + 16) != 1)
  {
    v27 = v20;
    v28 = type metadata accessor for DecodingError(0);
    swift_allocError(v28, &protocol witness table for DecodingError, 0, 0);
    v30 = v29;
    sub_5C154(&qword_320DA8);
    *v30 = &type metadata for ContentUnavailableComponentModel.Layout;
    v31 = KeyedDecodingContainer.codingPath.getter(v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v31, 0xD00000000000002BLL, 0x800000000026FD60, 0);
    v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for DecodingError.typeMismatch(_:), v28);
    swift_willThrow(v32);
    v33 = swift_bridgeObjectRelease(v27);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v46 + 8))(v13, v10, v33);
LABEL_6:
    v34 = v51;
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v34);
  }
  v21 = *(unsigned __int8 *)(v20 + 32);
  if ((v21 & 1) != 0)
  {
    v22 = v46;
    v52 = v20;
    LOBYTE(v55) = 1;
    v23 = sub_1D6968();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys, &v55, v10, &type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys, v23);
    v45 = v21;
    LOBYTE(v54) = 0;
    v24 = sub_9BB00();
    v25 = v47;
    v26 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for CGFloat, &v54, v47, &type metadata for CGFloat, v24);
    v40 = v25;
    v41 = v55;
    v53 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for CGFloat, &v53, v40, &type metadata for CGFloat, v24);
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v26, v40);
    v42 = swift_bridgeObjectRelease(v52);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v22 + 8))(v13, v10, v42);
    v43 = v54;
  }
  else
  {
    v45 = *(unsigned __int8 *)(v20 + 32);
    v36 = v20;
    LOBYTE(v55) = 0;
    v37 = sub_1D69AC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys, &v55, v10, &type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys, v37);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v18);
    v38 = swift_bridgeObjectRelease(v36);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v46 + 8))(v13, v10, v38);
    v41 = 0;
    v43 = 0;
  }
  v34 = v51;
  v39 = v49;
  *v49 = v41;
  v39[1] = v43;
  *((_BYTE *)v39 + 16) = v45 ^ 1;
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v34);
}

uint64_t sub_1D6DF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ContentUnavailableComponentModel.Layout.init(from:)(a1, a2);
}

uint64_t sub_1D6E04(_QWORD *a1)
{
  return ContentUnavailableComponentModel.Layout.encode(to:)(a1);
}

BookStoreUI::ContentUnavailableComponentModel::TitleStyle_optional __swiftcall ContentUnavailableComponentModel.TitleStyle.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BookStoreUI::ContentUnavailableComponentModel::TitleStyle_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6608, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t ContentUnavailableComponentModel.TitleStyle.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7261646E6F636573;
  else
    return 0x7972616D697270;
}

uint64_t sub_1D6EB8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D6EEC + 4 * byte_265600[a1]))(0x656D614E6E6F6369, 0xE800000000000000);
}

uint64_t sub_1D6EEC()
{
  return 0x656C746974;
}

uint64_t sub_1D6F00()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1D6F18()
{
  return 0x74756F79616CLL;
}

uint64_t sub_1D6F2C()
{
  return 0x797453656C746974;
}

uint64_t sub_1D6F48()
{
  return 0x6575676573;
}

uint64_t sub_1D6F5C()
{
  return 25705;
}

unint64_t sub_1D6F68()
{
  return 0xD000000000000011;
}

uint64_t sub_1D6F84(char *a1, char *a2)
{
  return sub_1968DC(*a1, *a2);
}

Swift::Int sub_1D6F90()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x7261646E6F636573;
  else
    v2 = 0x7972616D697270;
  if (v1)
    v3 = 0xE900000000000079;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1D7014(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7261646E6F636573;
  else
    v2 = 0x7972616D697270;
  if (*v1)
    v3 = 0xE900000000000079;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1D7074(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x7261646E6F636573;
  else
    v3 = 0x7972616D697270;
  if (v2)
    v4 = 0xE900000000000079;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookStoreUI::ContentUnavailableComponentModel::TitleStyle_optional sub_1D70F4(Swift::String *a1)
{
  return ContentUnavailableComponentModel.TitleStyle.init(rawValue:)(*a1);
}

void sub_1D7100(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7972616D697270;
  if (*v1)
    v2 = 0x7261646E6F636573;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE900000000000079;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1D7144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D9758();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1D71A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D9758();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1D71EC()
{
  unsigned __int8 *v0;

  return sub_1D6EB8(*v0);
}

uint64_t sub_1D71F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D9438(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D7218(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1D7224(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D7994();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D724C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D7994();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentUnavailableComponentModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  int *v37;
  char v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[40];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v52 = a2;
  v53 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v53);
  v54 = (uint64_t *)((char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  v70 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v55 = (uint64_t *)((char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v5);
  v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for LocalizerRequest(0);
  v58 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_5C154(&qword_3295F8);
  v9 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v14[*(int *)(v15 + 36)];
  v69 = 0;
  v67 = 0u;
  v68 = 0u;
  sub_5E1A4((uint64_t)&v67, (uint64_t)v66, (uint64_t *)&unk_326210);
  v63 = v16;
  _CodeAnyActionModel_OrNil.init(wrappedValue:)(v66);
  sub_5E09C((uint64_t)&v67, (uint64_t *)&unk_326210);
  v17 = (uint64_t)&v14[v12[11]];
  v18 = type metadata accessor for ImpressionMetrics(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v62 = v17;
  v19(v17, 1, 1, v18);
  v21 = a1[3];
  v20 = a1[4];
  v61 = a1;
  sub_66898(a1, v21);
  v22 = sub_1D7994();
  v60 = v11;
  v23 = v64;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentUnavailableComponentModel.CodingKeys, &type metadata for ContentUnavailableComponentModel.CodingKeys, v22, v21, v20);
  if (v23)
  {
    v28 = v65;
    v29 = v70;
    v30 = v62;
    v31 = v63;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v61);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    return sub_5E09C(v30, &qword_321EA8);
  }
  else
  {
    v24 = v8;
    v26 = (uint64_t)v57;
    v25 = v58;
    v64 = v9;
    LOBYTE(v67) = 0;
    v27 = v59;
    *(_QWORD *)v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v67, v59);
    *((_QWORD *)v14 + 1) = v32;
    LOBYTE(v67) = 1;
    v33 = sub_648E0(&qword_325838, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
    v34 = v56;
    v51 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24, v56, &v67, v27, v56, v33);
    v35 = v63;
    (*(void (**)(char *, _QWORD *, uint64_t))(v25 + 32))(&v14[v12[5]], v24, v34);
    LOBYTE(v67) = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &v67, v59, v34, v51);
    sub_66F14(v26, (uint64_t)&v14[v12[6]], &qword_3217B8);
    v66[0] = 3;
    v36 = sub_1D79D8();
    v57 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for ContentUnavailableComponentModel.Layout, v66, v59, &type metadata for ContentUnavailableComponentModel.Layout, v36);
    v37 = v12;
    v38 = v68;
    v39 = &v14[v12[7]];
    *(_OWORD *)v39 = v67;
    v39[16] = v38;
    v66[0] = 4;
    v40 = sub_1D7A1C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for ContentUnavailableComponentModel.TitleStyle, v66, v59, &type metadata for ContentUnavailableComponentModel.TitleStyle, v40);
    v14[v12[8]] = v67;
    LOBYTE(v67) = 5;
    v41 = sub_648E0(&qword_329618, (uint64_t (*)(uint64_t))&type metadata accessor for _CodeAnyActionModel_OrNil, (uint64_t)&protocol conformance descriptor for _CodeAnyActionModel_OrNil);
    v42 = v55;
    v43 = v65;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v65, &v67, v59, v65, v41);
    (*(void (**)(char *, _QWORD *, uint64_t))(v70 + 40))(v35, v42, v43);
    v44 = sub_5C154(&qword_320B78);
    v66[0] = 6;
    v45 = sub_1D7A60();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, v44, v66, v59, v44, v45);
    v46 = &v14[v37[10]];
    v47 = v68;
    *(_OWORD *)v46 = v67;
    *((_OWORD *)v46 + 1) = v47;
    *((_QWORD *)v46 + 4) = v69;
    LOBYTE(v67) = 7;
    v48 = sub_AF0B8();
    v49 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v53, &v67, v59, v53, v48);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v59);
    sub_8B3E0((uint64_t)v49, v62, &qword_321EA8);
    sub_1AB484((uint64_t)v14, v52);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v61);
    return sub_1D7AAC((uint64_t)v14);
  }
}

unint64_t sub_1D7994()
{
  unint64_t result;

  result = qword_329600;
  if (!qword_329600)
  {
    result = swift_getWitnessTable(&unk_265BBC, &type metadata for ContentUnavailableComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_329600);
  }
  return result;
}

unint64_t sub_1D79D8()
{
  unint64_t result;

  result = qword_329608;
  if (!qword_329608)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentUnavailableComponentModel.Layout, &type metadata for ContentUnavailableComponentModel.Layout);
    atomic_store(result, (unint64_t *)&qword_329608);
  }
  return result;
}

unint64_t sub_1D7A1C()
{
  unint64_t result;

  result = qword_329610;
  if (!qword_329610)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentUnavailableComponentModel.TitleStyle, &type metadata for ContentUnavailableComponentModel.TitleStyle);
    atomic_store(result, (unint64_t *)&qword_329610);
  }
  return result;
}

unint64_t sub_1D7A60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_320B90;
  if (!qword_320B90)
  {
    v1 = sub_667D0(&qword_320B78);
    result = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyHashable<A>, v1);
    atomic_store(result, (unint64_t *)&qword_320B90);
  }
  return result;
}

uint64_t sub_1D7AAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContentUnavailableComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D7AEC()
{
  unint64_t result;

  result = qword_329620;
  if (!qword_329620)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentUnavailableComponentModel.TitleStyle, &type metadata for ContentUnavailableComponentModel.TitleStyle);
    atomic_store(result, (unint64_t *)&qword_329620);
  }
  return result;
}

uint64_t sub_1D7B30()
{
  return sub_648E0(&qword_320030, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
}

uint64_t sub_1D7B5C(uint64_t a1)
{
  _BYTE v3[40];

  sub_5E1A4(a1, (uint64_t)v3, (uint64_t *)&unk_326210);
  _CodeAnyActionModel_OrNil.wrappedValue.setter(v3);
  return sub_5E09C(a1, (uint64_t *)&unk_326210);
}

void (*sub_1D7BBC(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _CodeAnyActionModel_OrNil.wrappedValue.modify();
  return sub_1D61BC;
}

uint64_t sub_1D7C0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ContentUnavailableComponentModel.init(from:)(a1, a2);
}

uint64_t sub_1D7C20()
{
  return sub_648E0(&qword_329628, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
}

uint64_t sub_1D7C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 40), a2, &qword_320B78);
}

uint64_t sub_1D7C74()
{
  return _CodeAnyActionModel_OrNil.wrappedValue.getter();
}

uint64_t sub_1D7C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(v2 + *(int *)(a1 + 44), (uint64_t)v7, &qword_321EA8);
  return sub_66F14((uint64_t)v7, a2, &qword_31F480);
}

uint64_t sub_1D7D30()
{
  type metadata accessor for ContentUnavailableComponentModel(0);
  return _CodeAnyActionModel_OrNil.wrappedValue.getter();
}

uint64_t sub_1D7D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentUnavailableComponentModel(0);
  return sub_5E1A4(a1 + *(int *)(v4 + 40), a2, &qword_320B78);
}

_QWORD *initializeBufferWithCopyOfBuffer for ContentUnavailableComponentModel(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = &a2[v8];
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(v12 + 16);
    v14 = swift_bridgeObjectRetain(v7);
    v13(v9, v10, v11, v14);
    v15 = a3[6];
    v16 = (char *)v4 + v15;
    v17 = &a2[v15];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v15], 1, v11))
    {
      v18 = sub_5C154(&qword_3217B8);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v13)(v16, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = (char *)v4 + v20;
    v23 = &a2[v20];
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v24 = a2[v21];
    v22[16] = v23[16];
    *((_BYTE *)v4 + v21) = v24;
    v25 = a3[9];
    v26 = (char *)v4 + v25;
    v27 = &a2[v25];
    v28 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[10];
    v30 = *(_OWORD *)&a2[v29 + 24];
    *(_OWORD *)((char *)v4 + v29 + 24) = v30;
    (**(void (***)(void))(v30 - 8))();
    v31 = a3[11];
    v32 = (char *)v4 + v31;
    v33 = &a2[v31];
    v34 = type metadata accessor for ImpressionMetrics(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_5C154(&qword_31F480);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
  }
  return v4;
}

uint64_t destroy for ContentUnavailableComponentModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for LocalizerRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = a1 + a2[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  v9 = a1 + a2[9];
  v10 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + a2[10]));
  v11 = a1 + a2[11];
  v12 = type metadata accessor for ImpressionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

_QWORD *initializeWithCopy for ContentUnavailableComponentModel(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(v11 + 16);
  v13 = swift_bridgeObjectRetain(v6);
  v12(v8, v9, v10, v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v14], 1, v10))
  {
    v17 = sub_5C154(&qword_3217B8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v12)(v15, v16, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = (char *)a1 + v18;
  v21 = &a2[v18];
  *(_OWORD *)v20 = *(_OWORD *)v21;
  v22 = a2[v19];
  v20[16] = v21[16];
  *((_BYTE *)a1 + v19) = v22;
  v23 = a3[9];
  v24 = (char *)a1 + v23;
  v25 = &a2[v23];
  v26 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = *(_OWORD *)&a2[v27 + 24];
  *(_OWORD *)((char *)a1 + v27 + 24) = v28;
  (**(void (***)(void))(v28 - 8))();
  v29 = a3[11];
  v30 = (char *)a1 + v29;
  v31 = &a2[v29];
  v32 = type metadata accessor for ImpressionMetrics(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_5C154(&qword_31F480);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

char *assignWithCopy for ContentUnavailableComponentModel(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  uint64_t v36;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v18 = v17(&a1[v14], 1, v11);
  v19 = v17(v16, 1, v11);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
LABEL_6:
    v20 = sub_5C154(&qword_3217B8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v13(v15, v16, v11);
LABEL_7:
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = *(_OWORD *)v23;
  v22[16] = v23[16];
  *(_OWORD *)v22 = v24;
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 24))(v26, v27, v28);
  sub_65938(&a1[a3[10]], (_QWORD *)((char *)a2 + a3[10]));
  v29 = a3[11];
  v30 = &a1[v29];
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for ImpressionMetrics(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  LODWORD(v27) = v34(v30, 1, v32);
  v35 = v34(v31, 1, v32);
  if (!(_DWORD)v27)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v30, v31, v32);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v36 = sub_5C154(&qword_31F480);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

_OWORD *initializeWithTake for ContentUnavailableComponentModel(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    v15 = sub_5C154(&qword_3217B8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v16 = a3[7];
  v17 = a3[8];
  v18 = (char *)a1 + v16;
  v19 = &a2[v16];
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v20 = a2[v17];
  v18[16] = v19[16];
  *((_BYTE *)a1 + v17) = v20;
  v21 = a3[9];
  v22 = (char *)a1 + v21;
  v23 = &a2[v21];
  v24 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v25 = a3[10];
  v26 = a3[11];
  v27 = (char *)a1 + v25;
  v28 = &a2[v25];
  v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
  v30 = (char *)a1 + v26;
  v31 = &a2[v26];
  v32 = type metadata accessor for ImpressionMetrics(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_5C154(&qword_31F480);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

char *assignWithTake for ContentUnavailableComponentModel(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  uint64_t v41;

  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v18 = v17(&a1[v14], 1, v11);
  v19 = v17(v16, 1, v11);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
LABEL_6:
    v20 = sub_5C154(&qword_3217B8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v13(v15, v16, v11);
LABEL_7:
  v21 = a3[7];
  v22 = a3[8];
  v23 = &a1[v21];
  v24 = (char *)a2 + v21;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v25 = *((_BYTE *)a2 + v22);
  v23[16] = v24[16];
  a1[v22] = v25;
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  v30 = a3[10];
  v31 = &a1[v30];
  v32 = (char *)a2 + v30;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&a1[v30]);
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  v34 = a3[11];
  v35 = &a1[v34];
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for ImpressionMetrics(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  LODWORD(v32) = v39(v35, 1, v37);
  v40 = v39(v36, 1, v37);
  if (!(_DWORD)v32)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_12;
  }
  if (v40)
  {
LABEL_12:
    v41 = sub_5C154(&qword_31F480);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentUnavailableComponentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D89A8);
}

uint64_t sub_1D89A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_5C154(&qword_3217B8);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5C154(&qword_321EA8);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[10] + 24);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableComponentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D8AAC);
}

uint64_t sub_1D8AAC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = sub_5C154(&qword_3217B8);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      result = type metadata accessor for _CodeAnyActionModel_OrNil(0);
      v9 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = result;
        v11 = a4[9];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[10] + 24) = (a2 - 1);
          return result;
        }
        v10 = sub_5C154(&qword_321EA8);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[11];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1D8BA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  v10[0] = &unk_265878;
  v2 = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_C1800(319, (unint64_t *)&qword_324600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      v10[3] = &unk_265890;
      v10[4] = &unk_2658A8;
      v6 = type metadata accessor for _CodeAnyActionModel_OrNil(319);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        v10[6] = &unk_2658C0;
        sub_C1800(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for ContentUnavailableComponentModel.Layout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableComponentModel.Layout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_1D8CF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D8D10(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentUnavailableComponentModel.Layout()
{
  return &type metadata for ContentUnavailableComponentModel.Layout;
}

ValueMetadata *type metadata accessor for ContentUnavailableComponentModel.TitleStyle()
{
  return &type metadata for ContentUnavailableComponentModel.TitleStyle;
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1D8DA0 + 4 * byte_26560D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1D8DD4 + 4 * byte_265608[v4]))();
}

uint64_t sub_1D8DD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D8DDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D8DE4);
  return result;
}

uint64_t sub_1D8DF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D8DF8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1D8DFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D8E04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentUnavailableComponentModel.CodingKeys()
{
  return &type metadata for ContentUnavailableComponentModel.CodingKeys;
}

ValueMetadata *type metadata accessor for ContentUnavailableComponentModel.Layout.CodingKeys()
{
  return &type metadata for ContentUnavailableComponentModel.Layout.CodingKeys;
}

ValueMetadata *type metadata accessor for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys()
{
  return &type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys;
}

uint64_t _s11BookStoreUI32ContentUnavailableComponentModelV10TitleStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D8E8C + 4 * byte_265617[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D8EC0 + 4 * byte_265612[v4]))();
}

uint64_t sub_1D8EC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D8EC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D8ED0);
  return result;
}

uint64_t sub_1D8EDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D8EE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D8EE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D8EF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentUnavailableComponentModel.Layout.CustomCodingKeys()
{
  return &type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys;
}

unint64_t sub_1D8F10()
{
  unint64_t result;

  result = qword_3296D8;
  if (!qword_3296D8)
  {
    result = swift_getWitnessTable(&unk_2659D4, &type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_3296D8);
  }
  return result;
}

unint64_t sub_1D8F58()
{
  unint64_t result;

  result = qword_3296E0;
  if (!qword_3296E0)
  {
    result = swift_getWitnessTable(&unk_265ADC, &type metadata for ContentUnavailableComponentModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3296E0);
  }
  return result;
}

unint64_t sub_1D8FA0()
{
  unint64_t result;

  result = qword_3296E8;
  if (!qword_3296E8)
  {
    result = swift_getWitnessTable(&unk_265B94, &type metadata for ContentUnavailableComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3296E8);
  }
  return result;
}

unint64_t sub_1D8FE8()
{
  unint64_t result;

  result = qword_3296F0;
  if (!qword_3296F0)
  {
    result = swift_getWitnessTable(&unk_265B04, &type metadata for ContentUnavailableComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3296F0);
  }
  return result;
}

unint64_t sub_1D9030()
{
  unint64_t result;

  result = qword_3296F8;
  if (!qword_3296F8)
  {
    result = swift_getWitnessTable(&unk_265B2C, &type metadata for ContentUnavailableComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3296F8);
  }
  return result;
}

unint64_t sub_1D9078()
{
  unint64_t result;

  result = qword_329700;
  if (!qword_329700)
  {
    result = swift_getWitnessTable(&unk_2659FC, &type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_329700);
  }
  return result;
}

unint64_t sub_1D90C0()
{
  unint64_t result;

  result = qword_329708;
  if (!qword_329708)
  {
    result = swift_getWitnessTable(&unk_265A24, &type metadata for ContentUnavailableComponentModel.Layout.FullScreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_329708);
  }
  return result;
}

unint64_t sub_1D9108()
{
  unint64_t result;

  result = qword_329710;
  if (!qword_329710)
  {
    result = swift_getWitnessTable(&unk_265944, &type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_329710);
  }
  return result;
}

unint64_t sub_1D9150()
{
  unint64_t result;

  result = qword_329718;
  if (!qword_329718)
  {
    result = swift_getWitnessTable(&unk_26596C, &type metadata for ContentUnavailableComponentModel.Layout.CustomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_329718);
  }
  return result;
}

unint64_t sub_1D9198()
{
  unint64_t result;

  result = qword_329720;
  if (!qword_329720)
  {
    result = swift_getWitnessTable(&unk_265A4C, &type metadata for ContentUnavailableComponentModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_329720);
  }
  return result;
}

unint64_t sub_1D91E0()
{
  unint64_t result;

  result = qword_329728;
  if (!qword_329728)
  {
    result = swift_getWitnessTable(&unk_265A74, &type metadata for ContentUnavailableComponentModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_329728);
  }
  return result;
}

uint64_t sub_1D9224(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x657263536C6C7566 && a2 == 0xEA00000000006E65)
  {
    v5 = 0xEA00000000006E65;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657263536C6C7566, 0xEA00000000006E65, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D6F74737563 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D6F74737563, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D9318(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6964646150706F74 && a2 == 0xEA0000000000676ELL)
  {
    v5 = 0xEA0000000000676ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6964646150706F74, 0xEA0000000000676ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x61506D6F74746F62 && a2 == 0xED0000676E696464)
  {
    swift_bridgeObjectRelease(0xED0000676E696464);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61506D6F74746F62, 0xED0000676E696464, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D9438(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E6E6F6369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74756F79616CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x797453656C746974 && a2 == 0xEA0000000000656CLL)
  {
    v10 = 0xEA0000000000656CLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797453656C746974, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v12 = 0xE200000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000026D790)
  {
    swift_bridgeObjectRelease(0x800000000026D790);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_1D9758()
{
  unint64_t result;

  result = qword_329730;
  if (!qword_329730)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentUnavailableComponentModel.TitleStyle, &type metadata for ContentUnavailableComponentModel.TitleStyle);
    atomic_store(result, (unint64_t *)&qword_329730);
  }
  return result;
}

uint64_t sub_1D979C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_5E09C(a1, &qword_329740);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_2F2FB0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_329898, v16);
}

uint64_t sub_1D98E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_5E09C(a1, &qword_329740);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_2F2F88, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_5C154(&qword_329890);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_329888, v16);
}

void *ContextMenuPresentationContextProtocol.isCompact.getter(uint64_t a1, uint64_t a2)
{
  void *result;
  void *v3;
  id v4;
  char *v5;

  result = (void *)(*(uint64_t (**)(void))(a2 + 8))();
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "traitCollection");

    v5 = (char *)objc_msgSend(v4, "horizontalSizeClass");
    return (void *)(v5 == (_BYTE *)&dword_0 + 1);
  }
  return result;
}

uint64_t ContextMenuPresentationContextProtocol.showShareSheet(with:using:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[2];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[48];

  v63 = a5;
  v9 = sub_5C154(&qword_329740);
  __chkstk_darwin(v9);
  v64 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for UnsafeSendable(0, a4, v14, v15);
  v60 = *(_QWORD *)(v61 - 8);
  v16 = *(_QWORD *)(v60 + 64);
  __chkstk_darwin(v61);
  v58 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v59 = (char *)&v56 - v18;
  sub_5E0D8((uint64_t)a1, (uint64_t)v73);
  v19 = swift_allocObject(&unk_2F2E28, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  v20 = a1[3];
  v21 = a1[4];
  sub_66898(a1, v20);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
  swift_retain(a3);
  v23 = v22(v20, v21);
  v24 = v23;
  if (*(_QWORD *)(v23 + 16))
  {
    sub_5E0D8(v23 + 32, (uint64_t)&v67);
  }
  else
  {
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
  }
  swift_bridgeObjectRelease(v24);
  if (!*((_QWORD *)&v68 + 1))
  {
    sub_5E09C((uint64_t)v73, (uint64_t *)&unk_329758);
    swift_release(v19);
    return sub_5E09C((uint64_t)&v67, (uint64_t *)&unk_326130);
  }
  sub_5DC98(&v67, (uint64_t)v70);
  v25 = v71;
  v26 = v72;
  sub_66898(v70, v71);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v26 + 168))(v25, v26) & 1) == 0)
    goto LABEL_11;
  v27 = v71;
  v28 = v72;
  sub_66898(v70, v71);
  (*(void (**)(uint64_t, uint64_t))(v28 + 264))(v27, v28);
  if (!v29)
    goto LABEL_11;
  v30 = v29;
  v31 = (*(uint64_t (**)(uint64_t))(v63 + 8))(a4);
  if (!v31)
  {
    swift_bridgeObjectRelease(v30);
LABEL_11:
    v42 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v13, v62, a4);
    v43 = v59;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v59, v13, a4);
    v44 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v64, 1, 1, v44);
    sub_5E0D8((uint64_t)v70, (uint64_t)&v67);
    sub_5E1A4((uint64_t)v73, (uint64_t)v65, (uint64_t *)&unk_329758);
    v45 = v60;
    v46 = v58;
    v47 = v61;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v58, v43, v61);
    type metadata accessor for MainActor(0);
    v48 = swift_retain(v19);
    v49 = static MainActor.shared.getter(v48);
    v50 = *(unsigned __int8 *)(v45 + 80);
    v51 = (v50 + 144) & ~v50;
    v52 = swift_allocObject(&unk_2F2E50, v51 + v16, v50 | 7);
    *(_QWORD *)(v52 + 16) = v49;
    *(_QWORD *)(v52 + 24) = &protocol witness table for MainActor;
    v53 = v63;
    *(_QWORD *)(v52 + 32) = a4;
    *(_QWORD *)(v52 + 40) = v53;
    *(_QWORD *)(v52 + 48) = &unk_329750;
    *(_QWORD *)(v52 + 56) = v19;
    sub_5DC98(&v67, v52 + 64);
    v54 = v65[1];
    *(_OWORD *)(v52 + 104) = v65[0];
    *(_OWORD *)(v52 + 120) = v54;
    *(_QWORD *)(v52 + 136) = v66;
    (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v52 + v51, v46, v47);
    v55 = sub_1D979C(v64, (uint64_t)&unk_329770, v52);
    swift_release(v19);
    swift_release(v55);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v47);
    goto LABEL_12;
  }
  v32 = (void *)v31;
  v33 = (void *)objc_opt_self(JSAShare);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v30);
  v35 = a1[3];
  v36 = a1[4];
  sub_66898(a1, v35);
  v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 88))(v35, v36);
  v38 = a1[3];
  v39 = a1[4];
  sub_66898(a1, v38);
  v40 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v39 + 72))(v38, v39);
  objc_msgSend(v33, "shareURL:fromViewController:sourceView:sourceBarButtonItem:", v34, v32, v37, v40);
  swift_release(v19);

LABEL_12:
  sub_5E09C((uint64_t)v73, (uint64_t *)&unk_329758);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v70);
}

unint64_t ContextMenuPresentationContextProtocol.newOptionsForShowingHUD.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  id v7;
  unint64_t v8;
  _QWORD v10[2];
  _BYTE v11[104];

  v2 = ContextMenuPresentationContextProtocol.transactionProvider.getter(a1, a2);
  if (!v2)
    return sub_53458((uint64_t)_swiftEmptyArrayStorage);
  v3 = (void *)v2;
  v4 = sub_5C154(qword_329778);
  inited = swift_initStackObject(v4, v11);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  v10[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(BCTransactionOptionsTransactionKey);
  v10[1] = v6;
  AnyHashable.init<A>(_:)(v10, &type metadata for String, &protocol witness table for String);
  v7 = objc_msgSend(v3, "newTransactionWithName:", BCTransactionNameShowHUD);
  *(_QWORD *)(inited + 96) = swift_getObjectType();
  *(_QWORD *)(inited + 72) = v7;
  v8 = sub_53458(inited);
  swift_unknownObjectRelease(v3);
  return v8;
}

uint64_t ContextMenuPresentationContextProtocol.transactionProvider.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  __objc2_prot *v17;
  _BYTE v18[24];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = (char *)(*(uint64_t (**)(__n128))(v9 + 16))(v6);
  v11 = (uint64_t *)&v10[OBJC_IVAR___BSUIContextActionDataModel_transactionProvider];
  swift_beginAccess(&v10[OBJC_IVAR___BSUIContextActionDataModel_transactionProvider], v18, 0, 0);
  v12 = *v11;
  swift_unknownObjectRetain(v12);

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return v12;
  }
  v13 = (void *)ContextMenuPresentationContextProtocol.transaction.getter(a1, a2);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return 0;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "originatingSceneController");
  swift_unknownObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  if (!v15)
    return 0;
  v17 = &OBJC_PROTOCOL___BCTransactionProviding;
  v12 = swift_dynamicCastObjCProtocolConditional(v15, 1, &v17);
  if (!v12)
    swift_unknownObjectRelease(v15);
  return v12;
}

uint64_t ContextMenuPresentationContextProtocol.transaction.getter(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char v6[24];

  v2 = (char *)(*(uint64_t (**)(void))(a2 + 16))();
  v3 = &v2[OBJC_IVAR___BSUIContextActionDataModel_transaction];
  swift_beginAccess(&v2[OBJC_IVAR___BSUIContextActionDataModel_transaction], v6, 0, 0);
  v4 = *(_QWORD *)v3;
  swift_unknownObjectRetain(v4);

  return v4;
}

uint64_t sub_1DA234(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *a2;
  v9 = a2[1];
  v10 = *a3;
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)a5 + *a5);
  v11 = (_QWORD *)swift_task_alloc(a5[1]);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_7BFF8;
  return v13(a1, v8, v9, v10, a4);
}

uint64_t sub_1DA2C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, __n128 a8@<Q0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  dispatch_semaphore_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[2];

  v37 = a1;
  v38 = a4;
  v41 = a7;
  v12 = type metadata accessor for DispatchTime(0, a8);
  v13 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  v40 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - v17;
  v19 = sub_5C154(&qword_329740);
  __chkstk_darwin(v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a3;
  v23 = dispatch_semaphore_create(0);
  v24 = sub_5C154(&qword_3298C8);
  v25 = swift_allocObject(v24, 48, 7);
  v26 = type metadata accessor for TaskPriority(0);
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 1, 1, v26);
  sub_5E0D8(a6, (uint64_t)v42);
  v27 = (_QWORD *)swift_allocObject(&unk_2F3090, 128, 7);
  v27[2] = 0;
  v27[3] = 0;
  v28 = v38;
  v27[4] = v25;
  v27[5] = v28;
  v29 = v37;
  v27[6] = a5;
  v27[7] = v29;
  v27[8] = a2;
  v27[9] = v22;
  sub_5DC98(v42, (uint64_t)(v27 + 10));
  v27[15] = v23;
  v30 = v22;
  swift_retain(v25);
  swift_retain(a5);
  swift_bridgeObjectRetain(a2);
  v31 = v23;
  v32 = sub_1D979C((uint64_t)v21, (uint64_t)&unk_3298D8, (uint64_t)v27);
  swift_release(v32);
  v33 = v31;
  static DispatchTime.now()();
  + infix(_:_:)(v15, 2.0);
  v34 = v39;
  v35 = *(void (**)(char *, uint64_t))(v40 + 8);
  v35(v15, v39);
  OS_dispatch_semaphore.wait(timeout:)(v18);

  v35(v18, v34);
  swift_beginAccess(v25 + 16, v42, 0, 0);
  sub_5E1A4(v25 + 16, v41, &qword_31F8B0);
  return swift_release(v25);
}

uint64_t sub_1DA520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 152) = v11;
  *(_OWORD *)(v8 + 136) = v10;
  *(_QWORD *)(v8 + 120) = a7;
  *(_QWORD *)(v8 + 128) = a8;
  *(_QWORD *)(v8 + 104) = a5;
  *(_QWORD *)(v8 + 112) = a6;
  *(_QWORD *)(v8 + 96) = a4;
  return swift_task_switch(sub_1DA554, 0, 0);
}

uint64_t sub_1DA554()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  int *v8;

  v2 = v0[16];
  v1 = (void *)v0[17];
  v3 = (int *)v0[13];
  v0[9] = v0[15];
  v0[10] = v2;
  v0[11] = v1;
  v4 = v3[1];
  v8 = (int *)((char *)v3 + *v3);
  v5 = v1;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[20] = v6;
  *v6 = v0;
  v6[1] = sub_1DA5F8;
  return ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *, _QWORD))v8)(v0 + 2, v0 + 9, v0 + 11, v0[18]);
}

uint64_t sub_1DA5F8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));

  return swift_task_switch(sub_1DA654, 0, 0);
}

uint64_t sub_1DA654()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96) + 16;
  swift_beginAccess(v1, v0 + 48, 33, 0);
  sub_AC6F8(v0 + 16, v1);
  swift_endAccess(v0 + 48);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DA6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8[26] = v13;
  v8[27] = v14;
  v8[24] = a7;
  v8[25] = a8;
  v8[22] = a5;
  v8[23] = a6;
  v8[21] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[28] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[29] = v10;
  v8[30] = v11;
  return swift_task_switch(sub_1DA744, v10, v11);
}

uint64_t sub_1DA744()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;

  v1 = *((_QWORD *)v0 + 22);
  v2 = *((_QWORD *)v0 + 21);
  sub_5E0D8(*((_QWORD *)v0 + 23), (uint64_t)(v0 + 8));
  v3 = swift_allocObject(&unk_2F2FD8, 72, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  sub_5DC98(v0 + 8, v3 + 32);
  v4 = objc_allocWithZone((Class)AEAssetActivityItemProvider);
  *((_QWORD *)v0 + 14) = sub_1DB9F8;
  *((_QWORD *)v0 + 15) = v3;
  *((_QWORD *)v0 + 10) = _NSConcreteStackBlock;
  *((_QWORD *)v0 + 11) = 1107296256;
  *((_QWORD *)v0 + 12) = sub_1DB02C;
  *((_QWORD *)v0 + 13) = &unk_2F2FF0;
  v5 = _Block_copy(v0 + 5);
  swift_retain(v1);
  v6 = objc_msgSend(v4, "initWithPropertySource:", v5);
  *((_QWORD *)v0 + 31) = v6;
  _Block_release(v5);
  swift_release(*((_QWORD *)v0 + 15));
  v7 = sub_5C154(&qword_31EFF0);
  v8 = swift_allocObject(v7, 64, 7);
  *((_QWORD *)v0 + 32) = v8;
  *(_OWORD *)(v8 + 16) = xmmword_258070;
  *(_QWORD *)(v8 + 56) = sub_5C194(0, &qword_3298A8, AEAssetActivityItemProvider_ptr);
  *(_QWORD *)(v8 + 32) = v6;
  v9 = (void *)objc_opt_self(BCProgressKitController);
  v10 = v6;
  v11 = objc_msgSend(v9, "sharedController");
  *((_QWORD *)v0 + 33) = v11;
  *((_QWORD *)v0 + 7) = v0 + 8;
  *((_QWORD *)v0 + 2) = v0;
  *((_QWORD *)v0 + 3) = sub_1DA928;
  v12 = swift_continuation_init(v0 + 1, 0);
  *((_QWORD *)v0 + 10) = _NSConcreteStackBlock;
  *((_QWORD *)v0 + 11) = 0x40000000;
  *((_QWORD *)v0 + 12) = sub_1DAF10;
  *((_QWORD *)v0 + 13) = &unk_2F3018;
  *((_QWORD *)v0 + 14) = v12;
  objc_msgSend(v11, "activeContextWithCompletion:", v0 + 5);
  return swift_continuation_await(v0 + 1);
}

uint64_t sub_1DA928()
{
  uint64_t v0;

  return swift_task_switch(sub_1DA96C, *(_QWORD *)(*(_QWORD *)v0 + 232), *(_QWORD *)(*(_QWORD *)v0 + 240));
}

void sub_1DA96C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  Class isa;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  void *v64;

  v1 = *(void **)(v0 + 264);
  swift_release(*(_QWORD *)(v0 + 224));
  v2 = *(void **)(v0 + 128);

  if (v2)
  {
    v3 = *(_QWORD **)(v0 + 256);
    *(_QWORD *)(v0 + 104) = sub_5C194(0, &qword_3298B8, CLSContext_ptr);
    *(_QWORD *)(v0 + 80) = v2;
    v4 = v3[2];
    v5 = v3[3];
    v6 = v2;
    if (v4 >= v5 >> 1)
      v3 = sub_578BC((_QWORD *)(v5 > 1), v4 + 1, 1, v3);
    v3[2] = v4 + 1;
    sub_5D000((_OWORD *)(v0 + 80), &v3[4 * v4 + 4]);

  }
  else
  {
    v3 = *(_QWORD **)(v0 + 256);
  }
  v7 = *(void **)(v0 + 248);
  v8 = *(_QWORD **)(v0 + 192);
  v9 = objc_msgSend(v7, "shareType");
  v10 = objc_msgSend(v7, "propertySource");
  v11 = swift_allocObject(&unk_2F3040, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v12 = objc_allocWithZone((Class)IMActivityController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)(v0 + 112) = sub_1DBA40;
  *(_QWORD *)(v0 + 120) = v11;
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 88) = 1107296256;
  *(_QWORD *)(v0 + 96) = sub_1DB02C;
  *(_QWORD *)(v0 + 104) = &unk_2F3058;
  v14 = _Block_copy((const void *)(v0 + 80));
  v15 = objc_msgSend(v12, "initWithActivityItems:applicationActivities:shareType:propertySource:tracker:", isa, 0, v9, v14, 0);

  _Block_release(v14);
  swift_release(*(_QWORD *)(v0 + 120));
  v16 = v8[3];
  v17 = v8[4];
  sub_66898(v8, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  v19 = v18;
  if (*(_QWORD *)(v18 + 16))
  {
    sub_5E0D8(v18 + 32, v0 + 80);
  }
  else
  {
    *(_QWORD *)(v0 + 112) = 0;
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
  }
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(v0 + 104);
  if (v20)
  {
    v21 = *(_QWORD *)(v0 + 112);
    sub_66898((_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104));
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 80));
    if (v22 != 2)
      objc_msgSend(v15, "setManagedBook:", v22 & 1);
  }
  else
  {
    sub_5E09C(v0 + 80, (uint64_t *)&unk_326130);
  }
  v23 = *(_QWORD **)(v0 + 192);
  v24 = objc_msgSend(v15, "viewController");
  v25 = v8[3];
  v26 = v8[4];
  sub_66898(v23, v25);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88))(v25, v26);
  if (!v27)
  {
    v47 = v8[3];
    v46 = v8[4];
    sub_66898(*(_QWORD **)(v0 + 192), v47);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 72))(v47, v46);
    if (!v48)
    {
LABEL_38:
      v64 = *(void **)(v0 + 248);
      (*(void (**)(id, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 32))(v24, 1, *(_QWORD *)(v0 + 208));

      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v28 = (void *)v48;
    v49 = objc_msgSend(v24, "popoverPresentationController");
    if (!v49)
    {
LABEL_37:

      goto LABEL_38;
    }
    v50 = v49;
    objc_msgSend(v49, "setBarButtonItem:", v28);
LABEL_36:

    goto LABEL_37;
  }
  v28 = (void *)v27;
  v29 = objc_msgSend(v24, "popoverPresentationController");
  if (v29)
  {
    v30 = v29;
    objc_msgSend(v29, "setSourceView:", v28);

  }
  v31 = objc_msgSend(v28, "subviews");
  v32 = sub_5C194(0, (unint64_t *)&qword_3298B0, UIView_ptr);
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);

  if (!((unint64_t)v33 >> 62))
  {
    if (*(_QWORD *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFF8)))
      goto LABEL_18;
LABEL_33:
    *(_QWORD *)&v45 = swift_bridgeObjectRelease(v33).n128_u64[0];
    goto LABEL_34;
  }
  if (v33 < 0)
    v58 = v33;
  else
    v58 = v33 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v33);
  v59 = _CocoaArrayWrapper.endIndex.getter(v58);
  swift_bridgeObjectRelease(v33);
  if (!v59)
    goto LABEL_33;
LABEL_18:
  if ((v33 & 0xC000000000000001) != 0)
  {
    v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v33);
LABEL_21:
    v35 = v34;
    swift_bridgeObjectRelease(v33);
    v36 = objc_opt_self(UIButton);
    v37 = (void *)swift_dynamicCastObjCClass(v35, v36);
    if (v37)
    {
      v38 = v37;
      objc_msgSend(v37, "intrinsicContentSize");
      v40 = v39;
      objc_msgSend(v38, "bounds");
      if (v41 <= v40)
      {
        objc_msgSend(v38, "intrinsicContentSize");
        v43 = v42;
        objc_msgSend(v38, "bounds");
        if (v44 <= v43)
        {
          objc_msgSend(v38, "intrinsicContentSize");
          v51 = CGRect.center(in:)(objc_msgSend(v38, "frame"));
          v53 = v52;
          v55 = v54;
          v57 = v56;

LABEL_35:
          v50 = objc_msgSend(v24, "popoverPresentationController");
          objc_msgSend(v50, "setSourceRect:", v51, v53, v55, v57);
          goto LABEL_36;
        }
      }
    }

LABEL_34:
    objc_msgSend(v28, "bounds", v45);
    v51 = v60;
    v53 = v61;
    v55 = v62;
    v57 = v63;
    goto LABEL_35;
  }
  if (*(_QWORD *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFF8)))
  {
    v34 = *(id *)(v33 + 32);
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t sub_1DAF10(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  sub_1DBA48((uint64_t)&v6, v3);
  return swift_continuation_resume(v2);
}

double sub_1DAF58@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  NSString v6;
  id v7;
  double result;

  v6 = String._bridgeToObjectiveC()();
  v7 = (id)(*(uint64_t (**)(uint64_t, NSString, uint64_t))(a2 + 16))(a2, v6, a1);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1DAFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = type metadata accessor for Optional(0, *(_QWORD *)(*(_QWORD *)v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

id sub_1DB02C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t, id);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD v18[3];
  uint64_t v19;

  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, id))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v7;
  swift_retain(v4);
  v9 = a3;
  v5(v18, v6, v8, v9);
  swift_release(v4);
  swift_bridgeObjectRelease(v8);

  v10 = v19;
  if (!v19)
    return 0;
  v11 = sub_66898(v18, v19);
  v12 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v12 + 16))(v15, v13);
  v16 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v15, v10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
  return v16;
}

uint64_t type metadata accessor for UnsafeSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeSendable);
}

uint64_t sub_1DB148()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1DB16C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;

  v10 = *(int **)(v4 + 16);
  v11 = (_QWORD *)swift_task_alloc(dword_32974C);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_7BFF8;
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *, uint64_t, int *))((char *)&dword_329748 + dword_329748))(a1, a2, a3, a4, v10);
}

uint64_t sub_1DB204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *((_QWORD *)v4 + 4);
  v6 = *(_QWORD *)(type metadata accessor for UnsafeSendable(0, v5, a3, a4) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 144) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  swift_release(*((_QWORD *)v4 + 7));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)v4 + 8);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)v4 + 13);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v4[v8], v5);
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_1DB298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UnsafeSendable(0, v4[4], a3, a4) - 8) + 80);
  v7 = v4[2];
  v8 = v4[3];
  v9 = v4[6];
  v10 = v4[7];
  v11 = (uint64_t)(v4 + 8);
  v12 = (uint64_t)(v4 + 13);
  v13 = (uint64_t)v4 + ((v6 + 144) & ~v6);
  v14 = (_QWORD *)swift_task_alloc(dword_32976C);
  *(_QWORD *)(v5 + 16) = v14;
  *v14 = v5;
  v14[1] = sub_7BFF8;
  return sub_1DA6C4(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1DB35C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for EvilSendableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EvilSendableBox);
}

uint64_t sub_1DB3D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_1DB444(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_1DB4B4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1DB4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1DB4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1DB524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1DB554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1DB584(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1DB634 + 4 * byte_265D00[(v7 - 1)]))();
}

void sub_1DB684(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_4;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &dword_0 + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1DB834(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1DB89C;
  return v5(v2 + 32);
}

uint64_t sub_1DB89C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1DB8EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_329884);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_64780;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_329880 + dword_329880))(a1, v4);
}

uint64_t sub_1DB95C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_329B2C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_7BFF8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_329B28 + dword_329B28))(a1, v4);
}

uint64_t sub_1DB9CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1DB9F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;

  return sub_1DA2C4(a1, a2, a3, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), v5 + 32, a4, a5);
}

uint64_t sub_1DBA04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1DBA14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1DBA1C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

double sub_1DBA40@<D0>(uint64_t a1@<X2>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1DAF58(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1DBA48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3298C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DBA90()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_1DBAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = swift_task_alloc(dword_3298D4);
  v6 = *(_OWORD *)(v0 + 32);
  v7 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_64780;
  *(_QWORD *)(v5 + 144) = v0 + 80;
  *(_QWORD *)(v5 + 152) = v4;
  *(_OWORD *)(v5 + 128) = v7;
  *(_QWORD *)(v5 + 112) = v2;
  *(_QWORD *)(v5 + 120) = v3;
  *(_OWORD *)(v5 + 96) = v6;
  return swift_task_switch(sub_1DA554, 0, 0);
}

uint64_t TextAttributesBuilder.init(attributes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_WORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 80) = 1;
  *(_QWORD *)(a2 + 88) = result;
  return result;
}

id TextAttributesBuilder.foregroundColor(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v19;

  v4 = *((_BYTE *)v2 + 16);
  v5 = *((_BYTE *)v2 + 40);
  v19 = (id)*((_QWORD *)v2 + 6);
  v6 = *((_BYTE *)v2 + 64);
  v7 = *((_BYTE *)v2 + 65);
  v8 = *((_QWORD *)v2 + 9);
  v9 = *((_BYTE *)v2 + 80);
  v10 = *((_QWORD *)v2 + 11);
  v11 = *v2;
  *(_OWORD *)a2 = *v2;
  v12 = (void *)v11;
  *(_BYTE *)(a2 + 16) = v4;
  v13 = *(__int128 *)((char *)v2 + 24);
  *(_OWORD *)(a2 + 24) = v13;
  v14 = (void *)v13;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = a1;
  *(_BYTE *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 65) = v7;
  *(_QWORD *)(a2 + 72) = v8;
  *(_BYTE *)(a2 + 80) = v9;
  *(_QWORD *)(a2 + 88) = v10;
  swift_bridgeObjectRetain(v10);
  v15 = a1;
  v16 = v12;
  v17 = v14;
  return v19;
}

id TextAttributesBuilder.centered(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v3;
  char v4;
  void *v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v18;

  v3 = *((_BYTE *)v2 + 16);
  v4 = *((_BYTE *)v2 + 40);
  v5 = (void *)*((_QWORD *)v2 + 6);
  v18 = (id)*((_QWORD *)v2 + 7);
  v6 = *((_BYTE *)v2 + 65);
  v7 = *((_QWORD *)v2 + 9);
  v8 = *((_BYTE *)v2 + 80);
  v9 = *((_QWORD *)v2 + 11);
  v10 = *v2;
  *(_OWORD *)a2 = *v2;
  *(_BYTE *)(a2 + 16) = v3;
  v11 = *(__int128 *)((char *)v2 + 24);
  *(_OWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v18;
  *(_BYTE *)(a2 + 64) = a1;
  *(_BYTE *)(a2 + 65) = v6;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v8;
  v12 = (void *)v10;
  v13 = (void *)v11;
  *(_QWORD *)(a2 + 88) = v9;
  swift_bridgeObjectRetain(v9);
  v14 = v12;
  v15 = v13;
  v16 = v5;
  return v18;
}

id TextAttributesBuilder.truncated(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v3;
  char v4;
  void *v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v18;

  v3 = *((_BYTE *)v2 + 16);
  v4 = *((_BYTE *)v2 + 40);
  v5 = (void *)*((_QWORD *)v2 + 6);
  v18 = (id)*((_QWORD *)v2 + 7);
  v6 = *((_BYTE *)v2 + 64);
  v7 = *((_QWORD *)v2 + 9);
  v8 = *((_BYTE *)v2 + 80);
  v9 = *((_QWORD *)v2 + 11);
  v10 = *v2;
  *(_OWORD *)a2 = *v2;
  *(_BYTE *)(a2 + 16) = v3;
  v11 = *(__int128 *)((char *)v2 + 24);
  *(_OWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v18;
  *(_BYTE *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 65) = a1;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v8;
  v12 = (void *)v10;
  v13 = (void *)v11;
  *(_QWORD *)(a2 + 88) = v9;
  swift_bridgeObjectRetain(v9);
  v14 = v12;
  v15 = v13;
  v16 = v5;
  return v18;
}

void *TextAttributesBuilder.build()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  void *v4;
  double v5;
  char v6;
  void *v7;
  void *v8;
  double v9;
  uint64_t v10;
  NSString *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  NSString *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  NSString *v25;
  NSString *v26;
  unint64_t v27;
  unint64_t v28;
  Class isa;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  id v43;
  id v44;
  NSString *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  double v53;
  double v54;
  double v55;
  NSString *v56;
  id v57;
  char isUniquelyReferenced_nonNull_native;
  void *v59;
  NSString *v60;
  id v61;
  char v62;
  NSString *v63;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  double v68;
  NSString *v69;
  id v70;
  void *v71;
  char v72;
  __int128 v74;
  char v75;
  int v76;
  int v77;
  char v78[48];
  char v79[72];
  void *v80;
  id v81[4];
  __int128 v82;
  __int128 v83;
  void *v84;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v5 = *(double *)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 40);
  v8 = *(void **)(v0 + 48);
  v7 = *(void **)(v0 + 56);
  v75 = *(_BYTE *)(v0 + 64);
  v76 = *(unsigned __int8 *)(v0 + 65);
  v9 = *(double *)(v0 + 72);
  v77 = *(unsigned __int8 *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  if (!v10)
  {
LABEL_11:
    v16 = (void *)objc_opt_self(UIFontDescriptor);
    if (!v4)
    {
      v15 = UIFontTextStyleBody;
      v17 = 0;
      goto LABEL_14;
    }
LABEL_12:
    v17 = v4;
    v15 = (NSString *)v4;
LABEL_14:
    v18 = v17;
    v19 = objc_msgSend(v16, "preferredFontDescriptorWithTextStyle:", v15);
    goto LABEL_15;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
    v82 = 0u;
    v83 = 0u;
    goto LABEL_10;
  }
  v11 = NSFontAttributeName;
  v12 = sub_583FC((uint64_t)v11);
  if ((v13 & 1) == 0)
  {
    v82 = 0u;
    v83 = 0u;

    goto LABEL_10;
  }
  sub_5E1EC(*(_QWORD *)(v10 + 56) + 32 * v12, (uint64_t)&v82);

  if (!*((_QWORD *)&v83 + 1))
  {
LABEL_10:
    sub_6EF98((uint64_t)&v82);
    goto LABEL_11;
  }
  v14 = sub_5C194(0, &qword_3298E0, UIFont_ptr);
  if ((swift_dynamicCast(v81, &v82, (char *)&type metadata for Any + 8, v14, 6) & 1) == 0)
    goto LABEL_11;
  v15 = (NSString *)v81[0];
  if (v4)
  {

    v16 = (void *)objc_opt_self(UIFontDescriptor);
    goto LABEL_12;
  }
  v19 = objc_msgSend(v81[0], "fontDescriptor");
LABEL_15:
  v20 = v19;

  if ((v3 & 1) == 0)
  {
    v21 = sub_5C154(&qword_3298E8);
    inited = swift_initStackObject(v21, v79);
    v74 = xmmword_258070;
    *(_OWORD *)(inited + 16) = xmmword_258070;
    *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
    v23 = sub_5C154(&qword_3298F0);
    v24 = swift_initStackObject(v23, v78);
    *(_OWORD *)(v24 + 16) = xmmword_258070;
    *(_QWORD *)(v24 + 32) = UIFontWeightTrait;
    *(_QWORD *)(v24 + 40) = v2;
    v25 = UIFontDescriptorTraitsAttribute;
    v26 = UIFontWeightTrait;
    v27 = sub_53124(v24);
    *(_QWORD *)(inited + 64) = sub_5C154(&qword_3298F8);
    *(_QWORD *)(inited + 40) = v27;
    v28 = sub_5322C(inited);
    type metadata accessor for AttributeName(0);
    sub_1DD4A8();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v20, "fontDescriptorByAddingAttributes:", isa, swift_bridgeObjectRelease(v28).n128_f64[0]);

    v20 = v30;
  }
  if (v1)
  {
    v31 = v1;
    v32 = objc_msgSend(v20, "fontDescriptorWithDesign:", v31);
    if (v32)
    {
      v33 = v32;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
      v36 = v35;
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIFontDescriptorSystemDesignSerif);
      v39 = v37;
      if (v34 == v38 && v36 == v37)
      {
        v40 = swift_bridgeObjectRelease_n(v36, 2);
        goto LABEL_23;
      }
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v38, v37, 0);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v39);
      if ((v41 & 1) != 0)
      {
LABEL_23:
        v42 = static FallBackFontSpec.useFallBackFont()(v40);

        if ((v42 & 1) != 0)
          v31 = v33;
        else
          v31 = v20;
        if ((v42 & 1) == 0)
          v20 = v33;
        goto LABEL_29;
      }

      v31 = v20;
      v20 = v33;
    }
LABEL_29:

  }
  if ((v6 & 1) == 0)
  {
    v43 = objc_msgSend(v20, "fontDescriptorWithSize:", v5);

    v20 = v43;
  }
  v44 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v20, 0.0);
  if (v8)
  {
    if (v4)
      v45 = (NSString *)v4;
    else
      v45 = UIFontTextStyleBody;
    v46 = (void *)objc_opt_self(UIFontDescriptor);
    v47 = (void *)objc_opt_self(UITraitCollection);
    v48 = v4;
    v49 = v44;
    v50 = v8;
    v51 = objc_msgSend(v47, "traitCollectionWithPreferredContentSizeCategory:", v50);
    v52 = objc_msgSend(v46, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", v45, v51);

    objc_msgSend(v52, "pointSize");
    v54 = v53;

    objc_msgSend(v49, "pointSize");
    if (v54 < v55)
      v55 = v54;
    v44 = objc_msgSend(v49, "fontWithSize:", v55, v74);

  }
  *((_QWORD *)&v83 + 1) = sub_5C194(0, &qword_3298E0, UIFont_ptr);
  *(_QWORD *)&v82 = v44;
  sub_5D000(&v82, v81);
  v56 = NSFontAttributeName;
  v57 = v44;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v80 = &_swiftEmptyDictionarySingleton;
  sub_59DC0(v81, v56, isUniquelyReferenced_nonNull_native);
  v59 = v80;
  v84 = v80;

  swift_bridgeObjectRelease(0x8000000000000000);
  if (v7)
  {
    *((_QWORD *)&v83 + 1) = sub_5C194(0, (unint64_t *)&qword_324870, UIColor_ptr);
    *(_QWORD *)&v82 = v7;
    sub_5D000(&v82, v81);
    v60 = NSForegroundColorAttributeName;
    v61 = v7;
    v62 = swift_isUniquelyReferenced_nonNull_native(v59);
    v80 = v59;
    sub_59DC0(v81, v60, v62);
    v84 = v80;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    v63 = NSForegroundColorAttributeName;
    sub_1DC848((uint64_t)v63, &v82);

    sub_6EF98((uint64_t)&v82);
  }
  v64 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  v65 = v64;
  if ((v75 & 1) != 0)
    v66 = &dword_0 + 1;
  else
    v66 = objc_msgSend(v64, "alignment");
  objc_msgSend(v65, "setAlignment:", v66, v74);
  if (v76)
    v67 = 4;
  else
    v67 = 0;
  objc_msgSend(v65, "setLineBreakMode:", v67);
  if (v77)
  {
    objc_msgSend(v65, "lineSpacing");
    v9 = v68;
  }
  objc_msgSend(v65, "setLineSpacing:", v9);
  v69 = NSParagraphStyleAttributeName;
  v70 = objc_msgSend(v65, "copy");
  _bridgeAnyObjectToAny(_:)(v70);
  swift_unknownObjectRelease(v70);
  sub_5D000(&v82, v81);
  v71 = v84;
  v72 = swift_isUniquelyReferenced_nonNull_native(v84);
  v80 = v71;
  sub_59DC0(v81, v69, v72);
  v84 = v80;

  swift_bridgeObjectRelease(0x8000000000000000);
  return v84;
}

id TextAttributesBuilder.lineSpacing(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  char v4;
  char v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v18;

  v4 = *((_BYTE *)v3 + 16);
  v5 = *((_BYTE *)v3 + 40);
  v6 = (void *)*((_QWORD *)v3 + 6);
  v18 = (id)*((_QWORD *)v3 + 7);
  v7 = *((_BYTE *)v3 + 64);
  v8 = *((_BYTE *)v3 + 65);
  v9 = *((_QWORD *)v3 + 11);
  v10 = *v3;
  *(_OWORD *)a3 = *v3;
  *(_BYTE *)(a3 + 16) = v4;
  v11 = *(__int128 *)((char *)v3 + 24);
  *(_OWORD *)(a3 + 24) = v11;
  *(_BYTE *)(a3 + 40) = v5;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = v18;
  *(_BYTE *)(a3 + 64) = v7;
  *(_BYTE *)(a3 + 65) = v8;
  *(_QWORD *)(a3 + 72) = a1;
  *(_BYTE *)(a3 + 80) = a2 & 1;
  v12 = (void *)v10;
  v13 = (void *)v11;
  *(_QWORD *)(a3 + 88) = v9;
  swift_bridgeObjectRetain(v9);
  v14 = v12;
  v15 = v13;
  v16 = v6;
  return v18;
}

id TextAttributesBuilder.design(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  id v14;
  id v15;
  id v16;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 40);
  v6 = *(void **)(v2 + 48);
  v7 = *(void **)(v2 + 56);
  v8 = *(_BYTE *)(v2 + 64);
  v9 = *(_BYTE *)(v2 + 65);
  v10 = *(_QWORD *)(v2 + 72);
  v11 = *(_BYTE *)(v2 + 80);
  v12 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  v13 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 64) = v8;
  *(_BYTE *)(a2 + 65) = v9;
  *(_QWORD *)(a2 + 72) = v10;
  *(_BYTE *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 88) = v12;
  v14 = (id)v13;
  v15 = v6;
  v16 = v7;
  swift_bridgeObjectRetain(v12);
  return a1;
}

id TextAttributesBuilder.weight(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v18;

  v4 = *(void **)v3;
  v5 = *(_BYTE *)(v3 + 40);
  v6 = *(void **)(v3 + 48);
  v18 = *(id *)(v3 + 56);
  v7 = *(_BYTE *)(v3 + 64);
  v8 = *(_BYTE *)(v3 + 65);
  v9 = *(_QWORD *)(v3 + 72);
  v10 = *(_BYTE *)(v3 + 80);
  v11 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)a3 = *(_QWORD *)v3;
  *(_QWORD *)(a3 + 8) = a1;
  *(_BYTE *)(a3 + 16) = a2 & 1;
  v12 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a3 + 24) = v12;
  *(_BYTE *)(a3 + 40) = v5;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = v18;
  *(_BYTE *)(a3 + 64) = v7;
  *(_BYTE *)(a3 + 65) = v8;
  *(_QWORD *)(a3 + 72) = v9;
  *(_BYTE *)(a3 + 80) = v10;
  v13 = (void *)v12;
  *(_QWORD *)(a3 + 88) = v11;
  swift_bridgeObjectRetain(v11);
  v14 = v4;
  v15 = v13;
  v16 = v6;
  return v18;
}

id TextAttributesBuilder.pointSize(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  char v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v18;

  v4 = *((_BYTE *)v3 + 16);
  v5 = (void *)*((_QWORD *)v3 + 3);
  v6 = (void *)*((_QWORD *)v3 + 6);
  v18 = (id)*((_QWORD *)v3 + 7);
  v7 = *((_BYTE *)v3 + 64);
  v8 = *((_BYTE *)v3 + 65);
  v9 = *((_QWORD *)v3 + 9);
  v10 = *((_BYTE *)v3 + 80);
  v11 = *((_QWORD *)v3 + 11);
  v12 = *v3;
  *(_OWORD *)a3 = *v3;
  *(_BYTE *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 24) = v5;
  *(_QWORD *)(a3 + 32) = a1;
  *(_BYTE *)(a3 + 40) = a2 & 1;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = v18;
  *(_BYTE *)(a3 + 64) = v7;
  *(_BYTE *)(a3 + 65) = v8;
  *(_QWORD *)(a3 + 72) = v9;
  *(_BYTE *)(a3 + 80) = v10;
  v13 = (void *)v12;
  *(_QWORD *)(a3 + 88) = v11;
  swift_bridgeObjectRetain(v11);
  v14 = v13;
  v15 = v5;
  v16 = v6;
  return v18;
}

id TextAttributesBuilder.textStyle(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  id v15;
  id v16;
  id v17;
  id v19;

  v4 = *((_BYTE *)v2 + 16);
  v5 = *((_QWORD *)v2 + 4);
  v6 = *((_BYTE *)v2 + 40);
  v7 = (void *)*((_QWORD *)v2 + 6);
  v8 = (void *)*((_QWORD *)v2 + 7);
  v9 = *((_BYTE *)v2 + 64);
  v10 = *((_BYTE *)v2 + 65);
  v11 = *((_QWORD *)v2 + 9);
  v12 = *((_BYTE *)v2 + 80);
  v13 = *((_QWORD *)v2 + 11);
  v14 = *v2;
  *(_OWORD *)a2 = *v2;
  v19 = (id)v14;
  *(_BYTE *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = a1;
  *(_QWORD *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v8;
  *(_BYTE *)(a2 + 64) = v9;
  *(_BYTE *)(a2 + 65) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_BYTE *)(a2 + 80) = v12;
  *(_QWORD *)(a2 + 88) = v13;
  v15 = v7;
  v16 = v8;
  swift_bridgeObjectRetain(v13);
  v17 = a1;
  return v19;
}

id TextAttributesBuilder.maxContentSize(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v4;
  char v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  __int128 v14;
  id v15;
  id v16;
  id v17;
  id v19;

  v4 = *((_BYTE *)v2 + 16);
  v5 = *((_BYTE *)v2 + 40);
  v6 = (void *)*((_QWORD *)v2 + 7);
  v7 = *((_BYTE *)v2 + 64);
  v8 = *((_BYTE *)v2 + 65);
  v9 = *((_QWORD *)v2 + 9);
  v10 = *((_BYTE *)v2 + 80);
  v11 = *((_QWORD *)v2 + 11);
  v12 = *v2;
  *(_OWORD *)a2 = *v2;
  v13 = (void *)v12;
  *(_BYTE *)(a2 + 16) = v4;
  v14 = *(__int128 *)((char *)v2 + 24);
  *(_OWORD *)(a2 + 24) = v14;
  v19 = (id)v14;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = a1;
  *(_QWORD *)(a2 + 56) = v6;
  *(_BYTE *)(a2 + 64) = v7;
  *(_BYTE *)(a2 + 65) = v8;
  *(_QWORD *)(a2 + 72) = v9;
  *(_BYTE *)(a2 + 80) = v10;
  *(_QWORD *)(a2 + 88) = v11;
  v15 = v6;
  swift_bridgeObjectRetain(v11);
  v16 = a1;
  v17 = v13;
  return v19;
}

double sub_1DC848@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_583FC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_5B138();
      v10 = v13;
    }

    sub_5D000((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7), a2);
    sub_1DCD30(v7, v10);
    v11 = *v3;
    *v3 = v10;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_1DC92C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_1DCA4C(a1, a2, (void (*)(unint64_t, _OWORD *, __n128))sub_5D000, sub_5B4D0, a3);
}

double sub_1DC940@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_582B4(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_5B4EC();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_5DC98((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v9), a3);
    sub_1DD0EC(v9, v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

double sub_1DCA38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_1DCA4C(a1, a2, (void (*)(unint64_t, _OWORD *, __n128))sub_5D000, sub_5B6EC, a3);
}

double sub_1DCA4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t, _OWORD *, __n128)@<X2>, void (*a4)(void)@<X3>, _OWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  v8 = v5;
  v12 = *v8;
  swift_bridgeObjectRetain(*v8);
  v13 = sub_582B4(a1, a2);
  LOBYTE(a2) = v14;
  swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v16 = *v8;
    v20 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v16 = v20;
    }
    v17 = swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v13 + 8));
    a3(*(_QWORD *)(v16 + 56) + 32 * v13, a5, v17);
    sub_1DD2D4(v13, v16);
    v18 = *v8;
    *v8 = v16;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v18).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

unint64_t sub_1DCB50(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_BYTE *)(v11 + v3);
        v13 = (_BYTE *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6;
        v19 = v18 + v15;
        if (v16 < v17 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v18);
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result, v18);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1DCD30(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;
        Hasher.init(_seed:)(v30, v10);
        v15 = v11;
        String.hash(into:)(v30, v12, v14);
        v16 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v14);
        v17 = v16 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v17 < v8)
            goto LABEL_5;
        }
        else if (v17 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(a2 + 48);
          v19 = (_QWORD *)(v18 + 8 * v3);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v3 != v6 || v19 >= v20 + 1)
            *v19 = *v20;
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_OWORD *)(v21 + 32 * v3);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 2))
          {
            v9 = v23[1];
            *v22 = *v23;
            v22[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1DCF20(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v25, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_BYTE *)(v13 + v3);
          v15 = (_BYTE *)(v13 + v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1DD0EC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1DD2D4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1DD4A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31EE18;
  if (!qword_31EE18)
  {
    type metadata accessor for AttributeName(255);
    result = swift_getWitnessTable(&unk_25715C, v1);
    atomic_store(result, (unint64_t *)&qword_31EE18);
  }
  return result;
}

uint64_t destroy for TextAttributesBuilder(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
}

uint64_t initializeWithCopy for TextAttributesBuilder(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(void **)(a2 + 48);
  v8 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = v3;
  v11 = v6;
  v12 = v7;
  v13 = v8;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for TextAttributesBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(void **)(a1 + 24);
  v9 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  v10 = v9;

  v11 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  v12 = *(void **)(a1 + 48);
  v13 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  v14 = v13;

  v15 = *(void **)(a1 + 56);
  v16 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  v17 = v16;

  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v18 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v18;
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t assignWithTake for TextAttributesBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);

  v6 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextAttributesBuilder(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextAttributesBuilder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextAttributesBuilder()
{
  return &type metadata for TextAttributesBuilder;
}

void sub_1DD820(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v6 = v5;
  v25 = a1;
  v26 = a2;
  v9 = type metadata accessor for CoverViewModel(0, a5);
  v23 = *(_QWORD *)(v9 - 8);
  v24 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v12 == -1)
    return;
  v28 = &_swiftEmptyArrayStorage;
  sub_20C498(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v14 = 0;
    v15 = v28;
    v16 = a3 - 1;
    while (a4 != v16)
    {
      if (v14)
        goto LABEL_24;
      v27 = a3;
      v25(&v27);
      if (v6)
      {
        swift_release(v15);
        return;
      }
      v6 = 0;
      v17 = v11;
      v28 = v15;
      v19 = v15[2];
      v18 = v15[3];
      if (v19 >= v18 >> 1)
      {
        sub_20C498(v18 > 1, v19 + 1, 1);
        v15 = v28;
      }
      v15[2] = v19 + 1;
      v20 = (unint64_t)v15
          + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
          + *(_QWORD *)(v23 + 72) * v19;
      v11 = v17;
      (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v20, v17, v24);
      v14 = a3 == a4;
      if (a3 == a4)
      {
        a3 = 0;
      }
      else if (__OFADD__(a3++, 1))
      {
        goto LABEL_20;
      }
      if (a4 == ++v16)
        return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

_QWORD *sub_1DD9D8(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t i;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = v3;
  v20 = a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v24 = _swiftEmptyArrayStorage;
    sub_20C4C4(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    for (i = a3 + 32; ; i += 40)
    {
      a1(v21, i);
      if (v4)
        break;
      v4 = 0;
      v24 = v6;
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        sub_20C4C4(v10 > 1, v11 + 1, 1);
      v12 = v22;
      v13 = v23;
      v14 = sub_7EEDC((uint64_t)v21, v22);
      v15 = __chkstk_darwin(v14);
      v17 = (char *)&v21[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v18 + 16))(v17, v15);
      sub_13D728(v11, (uint64_t)v17, (uint64_t *)&v24, v12, v13);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v21);
      v6 = v24;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

_QWORD *sub_1DDB40(void (*a1)(__int128 *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t i;
  unint64_t v10;
  unint64_t v11;
  __int128 v13[2];
  _QWORD *v14;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v14 = _swiftEmptyArrayStorage;
    sub_20C858(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    for (i = a3 + 32; ; i += 40)
    {
      a1(v13, i);
      if (v4)
        break;
      v4 = 0;
      v14 = v6;
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_20C858(v10 > 1, v11 + 1, 1);
        v6 = v14;
      }
      v6[2] = v11 + 1;
      sub_5DC98(v13, (uint64_t)&v6[5 * v11 + 4]);
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

void Shelf.instrumentingAppAnalyticsClickEvent(using:dataStack:sizeProvider:additionalData:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_830B0(v5, a5);
  v11 = type metadata accessor for Shelf(0);
  v12 = *(_QWORD *)(v5 + *(int *)(v11 + 64));
  v15[2] = a1;
  v16 = v5;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  swift_bridgeObjectRetain(v12);
  v13 = sub_1DD9D8((void (*)(_QWORD *__return_ptr, uint64_t))sub_F1320, (uint64_t)v15, v12);
  swift_bridgeObjectRelease(v12);
  v14 = *(int *)(v11 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a5 + v14));
  *(_QWORD *)(a5 + v14) = v13;
}

uint64_t sub_1DDD04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v51 = a6;
  v50 = a5;
  v49 = a4;
  v62 = a3;
  v10 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ClickData(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E0D8((uint64_t)a1, (uint64_t)v56);
  v17 = sub_5C154(&qword_31EF38);
  v18 = sub_5C154(&qword_3259E0);
  if ((swift_dynamicCast(&v53, v56, v17, v18, 6) & 1) == 0)
  {
    v55 = 0;
    v53 = 0u;
    v54 = 0u;
    sub_5E09C((uint64_t)&v53, &qword_329900);
    return sub_5E0D8((uint64_t)a1, (uint64_t)a7);
  }
  v46 = v12;
  v19 = v62;
  v44 = a2;
  v45 = v16;
  v47 = v14;
  v48 = a7;
  sub_5DC98(&v53, (uint64_t)v59);
  v20 = a1[3];
  v21 = a1[4];
  sub_66898(a1, v20);
  dispatch thunk of ComponentModel.segue.getter(v52, v20, v21);
  if (!v52[3])
  {
    sub_5E09C((uint64_t)v52, (uint64_t *)&unk_326210);
    v53 = 0u;
    v54 = 0u;
    v55 = 0;
    goto LABEL_10;
  }
  v22 = sub_5C154(&qword_31EF18);
  v23 = sub_5C154(&qword_329908);
  if ((swift_dynamicCast(&v53, v52, v22, v23, 6) & 1) == 0)
  {
    v55 = 0;
    v53 = 0u;
    v54 = 0u;
    goto LABEL_10;
  }
  if (!*((_QWORD *)&v54 + 1))
  {
LABEL_10:
    sub_5E09C((uint64_t)&v53, &qword_327940);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v59);
    a7 = v48;
    return sub_5E0D8((uint64_t)a1, (uint64_t)a7);
  }
  sub_5DC98(&v53, (uint64_t)v56);
  v24 = v57;
  v25 = v58;
  sub_66898(v56, v57);
  v26 = v24;
  v27 = (uint64_t)v46;
  dispatch thunk of BooksActionModel.clickData.getter(v26, v25);
  v28 = v47;
  v29 = v13;
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v27, 1, v13);
  a7 = v48;
  if (v30 == 1)
  {
    sub_5E09C(v27, &qword_31F590);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v56);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v59);
    return sub_5E0D8((uint64_t)a1, (uint64_t)a7);
  }
  v32 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v45, v27, v13);
  v33 = v28;
  v34 = v57;
  v35 = v58;
  sub_66898(v56, v57);
  v36 = v19[1];
  *(_QWORD *)&v53 = *v19;
  *((_QWORD *)&v53 + 1) = v36;
  swift_bridgeObjectRetain(v36);
  AnyHashable.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String);
  ActionModel.instrumentingAppAnalyticsClickEvent(using:refId:dataStack:sizeProvider:clickData:additionalData:)(&v53, v44, v52, v49, v50, v32, v51, v34, *(_QWORD *)(v35 + 8));
  sub_5E09C((uint64_t)v52, &qword_323D48);
  v37 = v60;
  v38 = v61;
  sub_7EEDC((uint64_t)v59, v60);
  dispatch thunk of BooksComponentModel.segue.setter(&v53, v37, v38);
  v39 = v60;
  v40 = v61;
  v41 = sub_66898(v59, v60);
  a7[3] = v39;
  a7[4] = *(_QWORD *)(v40 + 8);
  v42 = sub_668BC(a7);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v42, v41, v39);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v29);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v56);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v59);
}

void SharedWithYouActionItem.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 128);
}

uint64_t SharedWithYouActionItem.init(data:context:tracker:figaroProvider:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)(a5 + 128) = 1;
  sub_5DC98(a1, a5);
  sub_5DC98(a2, a5 + 40);
  *(_QWORD *)(a5 + 80) = a3;
  return sub_5DC98(a4, a5 + 88);
}

uint64_t SharedWithYouActionItem.isSupported.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  id v27;
  void (*v28)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  void (*v30)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[24];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v1 = sub_5C154(&qword_31E7B0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v31 - v6);
  v8 = v0[3];
  v9 = v0[4];
  sub_66898(v0, v8);
  ContextActionDataProtocol.selectionMode.getter(v8, v9, (uint64_t)&v36);
  if ((v39 & 1) == 0)
  {
    sub_5DC98(&v36, (uint64_t)&v40);
    sub_5DC98(&v40, (uint64_t)&v36);
    v11 = v37;
    v12 = v38;
    sub_66898(&v36, v37);
    (*(void (**)(uint64_t, uint64_t))(v12 + 272))(v11, v12);
    v14 = v13;
    sub_5E0D8((uint64_t)&v36, (uint64_t)&v40);
    if (!v14)
    {
      if (qword_31E540 != -1)
        swift_once(&qword_31E540, sub_53A50);
      v15 = qword_31E548;
      v16 = v41;
      v17 = v42;
      sub_66898(&v40, v41);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      v20 = v19;
      v21 = sub_5C154(&qword_31E7B8);
      Regex.init(_regexString:version:)(0x392D305B2864692FLL, 0xEC0000002F292B5DLL, 1, v21);
      Regex.init(_regexString:version:)(0x2B5D392D305B282FLL, 0xEA00000000002F29, 1, v21);
      v22 = (uint64_t *)(v15 + OBJC_IVAR____TtC11BookStoreUI27BSUISharedWithYouController_highlights);
      swift_beginAccess(v15 + OBJC_IVAR____TtC11BookStoreUI27BSUISharedWithYouController_highlights, v35, 0, 0);
      v23 = *v22;
      if (!*v22 || (v24 = *(_QWORD *)(v23 + 16)) == 0)
      {
LABEL_13:
        v28 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v2 + 8);
        v28(v4, v1);
        v28(v7, v1);
        swift_bridgeObjectRelease(v20);
        v10 = 0;
        v14 = 0;
        goto LABEL_14;
      }
      v33 = v2;
      swift_bridgeObjectRetain_n(v23, 2);
      v32 = v23;
      v25 = (void **)(v23 + 48);
      while (1)
      {
        v14 = (uint64_t)*(v25 - 1);
        v26 = *v25;
        v34[0] = *(v25 - 2);
        v34[1] = v14;
        v34[2] = v26;
        swift_bridgeObjectRetain(v14);
        v27 = v26;
        if ((sub_547B0((uint64_t)v34, (uint64_t)v7, v4, v18, v20) & 1) != 0)
          break;

        swift_bridgeObjectRelease(v14);
        v25 += 3;
        if (!--v24)
        {
          swift_bridgeObjectRelease_n(v32, 2);
          v2 = v33;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease_n(v32, 2);
      v30 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v33 + 8);
      v30(v4, v1);
      v30(v7, v1);
      swift_bridgeObjectRelease(v20);

    }
    v10 = 1;
LABEL_14:
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v40);
    swift_bridgeObjectRelease(v14);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v36);
    return v10;
  }
  sub_A4430(&v36);
  return 0;
}

uint64_t SharedWithYouActionItem.handle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1DE4F4, v2, v3);
}

uint64_t sub_1DE4F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SharedWithYouActionItem.menuItemView.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  a1[3] = sub_5C154(&qword_329918);
  a1[4] = sub_1DEB84();
  v2 = sub_668BC(a1);
  return sub_1DE568((uint64_t)v2);
}

uint64_t sub_1DE568@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  void *v49;
  id v50;
  void (*v51)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v52;
  uint64_t v54;
  void (*v55)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD v61[3];
  _BYTE v62[24];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;

  v2 = v1;
  v4 = sub_5C154(&qword_31E7B0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v10 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v56 - v9);
  v11 = v1[3];
  v12 = v1[4];
  sub_66898(v1, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = v13;
  if (!*(_QWORD *)(v13 + 16))
  {
    v65 = 0;
    v63 = 0u;
    v64 = 0u;
    swift_bridgeObjectRelease(v13);
    goto LABEL_11;
  }
  sub_5E0D8(v13 + 32, (uint64_t)&v63);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v64 + 1))
  {
LABEL_11:
    sub_185814((uint64_t)&v63);
LABEL_24:
    v52 = sub_5C154(&qword_329930);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(a1, 1, 1, v52);
  }
  v58 = v5;
  sub_5DC98(&v63, (uint64_t)v66);
  v15 = v67;
  v16 = v68;
  sub_66898(v66, v67);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 272))(v15, v16);
  v19 = v18;
  sub_5E0D8((uint64_t)v66, (uint64_t)&v63);
  if (!v19)
  {
    if (qword_31E540 != -1)
      swift_once(&qword_31E540, sub_53A50);
    v40 = qword_31E548;
    v41 = *((_QWORD *)&v64 + 1);
    v42 = v65;
    sub_66898(&v63, *((uint64_t *)&v64 + 1));
    v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
    v60 = (uint64_t *)v43;
    v44 = sub_5C154(&qword_31E7B8);
    Regex.init(_regexString:version:)(0x392D305B2864692FLL, 0xEC0000002F292B5DLL, 1, v44);
    Regex.init(_regexString:version:)(0x2B5D392D305B282FLL, 0xEA00000000002F29, 1, v44);
    v45 = (uint64_t *)(v40 + OBJC_IVAR____TtC11BookStoreUI27BSUISharedWithYouController_highlights);
    swift_beginAccess(v40 + OBJC_IVAR____TtC11BookStoreUI27BSUISharedWithYouController_highlights, v62, 0, 0);
    v46 = *v45;
    if (!v46 || (v47 = *(_QWORD *)(v46 + 16)) == 0)
    {
LABEL_20:
      v51 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v58 + 8);
      v51(v7, v4);
      v51(v10, v4);
      swift_bridgeObjectRelease(v60);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v63);
LABEL_23:
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v66);
      goto LABEL_24;
    }
    v57 = a1;
    swift_bridgeObjectRetain_n(v46, 2);
    v56 = v46;
    v48 = (void **)(v46 + 48);
    while (1)
    {
      v19 = *(v48 - 1);
      v49 = *v48;
      v17 = (uint64_t)*(v48 - 2);
      v61[0] = v17;
      v61[1] = v19;
      v61[2] = v49;
      swift_bridgeObjectRetain(v19);
      v50 = v49;
      if ((sub_547B0((uint64_t)v61, (uint64_t)v10, v7, v59, (unint64_t)v60) & 1) != 0)
        break;

      swift_bridgeObjectRelease(v19);
      v48 += 3;
      if (!--v47)
      {
        swift_bridgeObjectRelease_n(v56, 2);
        a1 = v57;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease_n(v56, 2);
    v55 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v58 + 8);
    v55(v7, v4);
    v55(v10, v4);
    swift_bridgeObjectRelease(v60);

    a1 = v57;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v63);
  v20 = v2[8];
  v21 = v2[9];
  sub_66898(v2 + 5, v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  if (!v22)
  {
    swift_bridgeObjectRelease(v19);
    goto LABEL_23;
  }
  v23 = (void *)v22;
  if (qword_31E540 != -1)
    swift_once(&qword_31E540, sub_53A50);
  v24 = v23;
  v25 = sub_55124(v17, v19, v23);

  if (!v25)
  {
    swift_bridgeObjectRelease(v19);

    goto LABEL_23;
  }
  v57 = a1;
  v26 = objc_msgSend(v25, "highlightMenu");
  v27 = objc_msgSend(v26, "children");
  v28 = sub_1DF630();
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

  v61[0] = v29;
  v30 = sub_5C154(&qword_329948);
  v31 = sub_67060(&qword_329950, &qword_329948, (uint64_t)&protocol conformance descriptor for [A]);
  LOBYTE(v27) = Collection.isNotEmpty.getter(v30, v31);
  swift_bridgeObjectRelease(v29);
  if ((v27 & 1) != 0)
  {
    v60 = &v56;
    __chkstk_darwin(v32);
    *(&v56 - 4) = (uint64_t)v26;
    *(&v56 - 3) = v17;
    *(&v56 - 2) = (uint64_t)v19;
    *(&v56 - 1) = (uint64_t)v24;
    __chkstk_darwin(v33);
    *(&v56 - 2) = (uint64_t)v2;
    v34 = sub_5C154(&qword_321050);
    v35 = sub_5C154(&qword_329958);
    v36 = sub_67060((unint64_t *)&unk_326150, &qword_321050, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v37 = sub_1DF6D8();
    v38 = v57;
    Menu.init(content:label:)(sub_1DF66C, &v56 - 6, sub_1DF678, &v56 - 4, v34, v35, v36, v37);

    swift_bridgeObjectRelease(v19);
    v39 = sub_5C154(&qword_329930);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  else
  {
    swift_bridgeObjectRelease(v19);

    v54 = sub_5C154(&qword_329930);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v57, 1, 1, v54);
  }
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v66);
}

unint64_t sub_1DEB84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329920;
  if (!qword_329920)
  {
    v1 = sub_667D0(&qword_329918);
    sub_67060(&qword_329928, &qword_329930, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_329920);
  }
  return result;
}

uint64_t sub_1DEC00(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = objc_msgSend(a1, "children");
  v8 = sub_1DF630();
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  v18 = v9;
  KeyPath = swift_getKeyPath(&unk_265E10);
  v11 = (_QWORD *)swift_allocObject(&unk_2F3270, 40, 7);
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  swift_bridgeObjectRetain(a3);
  v12 = a4;
  v13 = sub_5C154(&qword_329948);
  v14 = sub_5C154(&qword_329970);
  v15 = sub_67060(&qword_329978, &qword_329948, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_67060(&qword_329968, &qword_329970, (uint64_t)&protocol conformance descriptor for Button<A>);
  return ForEach<>.init(_:id:content:)(&v18, KeyPath, sub_1DF7D8, v11, v13, v14, v15, &protocol witness table for String, v16);
}

void sub_1DED4C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "title");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1DEDA0(void **a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD v13[4];

  v7 = *a1;
  v8 = (_QWORD *)swift_allocObject(&unk_2F3298, 48, 7);
  v8[2] = v7;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v13[2] = v7;
  v9 = v7;
  swift_bridgeObjectRetain(a3);
  v10 = a4;
  v11 = sub_5C154(&qword_329980);
  sub_67060(&qword_329988, &qword_329980, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  return Button.init(action:label:)(sub_1DF818, v8, sub_1DF824, v13, v11);
}

void sub_1DEE6C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  v8 = objc_opt_self(UIAction);
  v9 = swift_dynamicCastObjCClass(a1, v8);
  if (v9)
  {
    v10 = (void *)v9;
    v30 = a1;
    v11 = objc_msgSend(v10, "identifier");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(SLReplyContextMenuIdentifier);
    if (v12 == v15 && v14 == v16)
    {
      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v18 = v16;
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
      swift_bridgeObjectRelease(v14);
      *(_QWORD *)&v20 = swift_bridgeObjectRelease(v18).n128_u64[0];
      if ((v19 & 1) == 0)
      {
        objc_msgSend(v10, "performWithSender:target:", 0, 0, v20);
        goto LABEL_17;
      }
    }
    if (qword_31E540 != -1)
      swift_once(&qword_31E540, sub_53A50);
    sub_54BE4(a2, a3, a4);
    goto LABEL_17;
  }
  if (qword_31E580 != -1)
    swift_once(&qword_31E580, sub_126680);
  v21 = type metadata accessor for Logger(0);
  sub_5240C(v21, (uint64_t)qword_325028);
  v30 = a1;
  v22 = Logger.logObject.getter(v30);
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v32 = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = objc_msgSend(v30, "title");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v31 = sub_57CD8(v27, v29, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v24 + 4, v24 + 12);

    swift_bridgeObjectRelease(v29);
    _os_log_impl(&dword_0, v22, v23, "Failed to convert SWY UIMenuElement %s to UIAction.", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    return;
  }

LABEL_17:
}

uint64_t sub_1DF174()
{
  __n128 v0;

  sub_5C154(&qword_329990);
  sub_1DF83C();
  return Label.init(title:icon:)(sub_1DF82C, v0);
}

uint64_t sub_1DF1EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v12[2];

  v3 = objc_msgSend(a1, "title");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v12[0] = v4;
  v12[1] = v6;
  v7 = sub_668F8();
  result = Text.init<A>(_:)(v12, &type metadata for String, v7);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

id sub_1DF26C@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(a1, "image");
  if (result)
    result = (id)Image.init(uiImage:)();
  *a2 = result;
  return result;
}

uint64_t sub_1DF2A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  sub_2302BC();
  v9[0] = v2;
  v9[1] = v3;
  v4 = sub_668F8();
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7 & 1;
  *(_QWORD *)(a1 + 24) = v8;
  return result;
}

uint64_t sub_1DF30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1DF898, v2, v3);
}

uint64_t destroy for SharedWithYouActionItem(uint64_t a1)
{
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));

  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 88));
}

uint64_t initializeWithCopy for SharedWithYouActionItem(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v6;
  v9(a1 + 88, a2 + 88, v8);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for SharedWithYouActionItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  sub_65938((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  sub_65938((_QWORD *)(a1 + 88), (_QWORD *)(a2 + 88));
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

__n128 initializeWithTake for SharedWithYouActionItem(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SharedWithYouActionItem(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(void **)(a1 + 80);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharedWithYouActionItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharedWithYouActionItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedWithYouActionItem()
{
  return &type metadata for SharedWithYouActionItem;
}

unint64_t sub_1DF630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329940;
  if (!qword_329940)
  {
    v1 = objc_opt_self(UIMenuElement);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_329940);
  }
  return result;
}

uint64_t sub_1DF66C()
{
  uint64_t v0;

  return sub_1DEC00(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1DF678(__n128 a1)
{
  return Label.init(title:icon:)(sub_1DF754, a1);
}

unint64_t sub_1DF6D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329960;
  if (!qword_329960)
  {
    v1 = sub_667D0(&qword_329958);
    sub_67060(&qword_329968, &qword_329970, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_329960);
  }
  return result;
}

uint64_t sub_1DF754@<X0>(uint64_t a1@<X8>)
{
  return sub_1DF2A8(a1);
}

uint64_t sub_1DF75C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_22F3CC();
  result = Image.init(systemName:)(v2, v3);
  *a1 = result;
  return result;
}

const char *sub_1DF79C()
{
  return "title";
}

uint64_t sub_1DF7AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1DF7D8(void **a1)
{
  uint64_t v1;

  return sub_1DEDA0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1DF7E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1DF818()
{
  uint64_t v0;

  sub_1DEE6C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1DF824()
{
  return sub_1DF174();
}

uint64_t sub_1DF82C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1DF1EC(*(void **)(v1 + 16), a1);
}

id sub_1DF834@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1DF26C(*(void **)(v1 + 16), a1);
}

unint64_t sub_1DF83C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329998;
  if (!qword_329998)
  {
    v1 = sub_667D0(&qword_329990);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_329998);
  }
  return result;
}

uint64_t LocalizerManager.__allocating_init(objectGraph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  swift_allocObject(v1, 168, 15);
  v4 = (_QWORD *)swift_task_alloc(dword_3299AC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_9431C;
  return LocalizerManager.init(objectGraph:)(a1);
}

uint64_t sub_1DF8FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1DF914, v1, 0);
}

uint64_t sub_1DF914()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0[3] + 160);
  v0[4] = v1;
  v2 = async function pointer to Task.value.getter[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[5] = v3;
  v4 = sub_5C154(&qword_31FE28);
  v5 = sub_5C154((uint64_t *)&unk_321CD0);
  *v3 = v0;
  v3[1] = sub_1DF9B4;
  return Task.value.getter(v0[2], v1, v4, v5, &protocol self-conformance witness table for Error);
}

uint64_t sub_1DF9B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1DFA4C;
  else
    v4 = sub_1DFA18;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 24), 0);
}

uint64_t sub_1DFA18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DFA4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LocalizerManager.init(objectGraph:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2[10] = a1;
  v2[11] = v1;
  v4 = *v1;
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v2[12] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v6);
  v2[14] = swift_task_alloc(v6);
  v7 = sub_5C154(&qword_3299B8);
  v2[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[16] = v8;
  v2[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_329740);
  v10 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[18] = v10;
  swift_defaultActor_initialize(v1);
  v1[19] = 0;
  *(_OWORD *)(v1 + 17) = 0u;
  *(_OWORD *)(v1 + 15) = 0u;
  v1[14] = a1;
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject(&unk_2F32C8, 48, 7);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  v12[5] = v4;
  swift_retain_n(a1, 2);
  v1[20] = sub_16CAF4(v10, (uint64_t)&unk_3299C8, (uint64_t)v12);
  return swift_task_switch(sub_1DFBDC, v1, 0);
}

uint64_t sub_1DFBDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 80);
  v7 = (void *)objc_opt_self(NSNotificationCenter);
  v8 = objc_msgSend(v7, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(JSAStorefrontDidChangeNotification, 0);

  v9 = objc_msgSend(v7, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(JSABridgeDidReloadNotification, 0);

  v10 = sub_1DFEFC();
  Publishers.Merge.init(_:_:)(v4, v3, v6, v6, v10, v10);
  v11 = swift_allocObject(&unk_2F32F0, 24, 7);
  swift_weakInit(v11 + 16, v5);
  v12 = sub_67060(&qword_3299D8, &qword_3299B8, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
  v13 = Publisher<>.sink(receiveValue:)(sub_1E07AC, v11, v2, v12);
  swift_release(v11);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v2);
  *(_QWORD *)(v0 + 40) = type metadata accessor for AnyCancellable(0);
  *(_QWORD *)(v0 + 48) = &protocol witness table for AnyCancellable;
  swift_release(v16);
  *(_QWORD *)(v0 + 16) = v13;
  swift_beginAccess(v5 + 120, v0 + 56, 33, 0);
  sub_1E07B4(v0 + 16, v5 + 120);
  swift_endAccess(v0 + 56);
  swift_task_dealloc(v17);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1DFDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_329B04);
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = sub_7BFF8;
  v7[4] = 0;
  v7[5] = a4;
  v7[3] = a1;
  return swift_task_switch(sub_1DFF84, 0, 0);
}

uint64_t sub_1DFE40()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1DFE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_3299C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_7BFF8;
  v6 = (_QWORD *)swift_task_alloc(dword_329B04);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_7BFF8;
  v6[4] = 0;
  v6[5] = v4;
  v6[3] = a1;
  return swift_task_switch(sub_1DFF84, 0, 0);
}

unint64_t sub_1DFEFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3299D0;
  if (!qword_3299D0)
  {
    v1 = type metadata accessor for NSNotificationCenter.Publisher(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSNotificationCenter.Publisher, v1);
    atomic_store(result, (unint64_t *)&qword_3299D0);
  }
  return result;
}

uint64_t sub_1DFF44()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1DFF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch(sub_1DFF84, 0, 0);
}

uint64_t sub_1DFF84()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;

  v1 = (void *)v0[4];
  if (v1)
  {
    v0[9] = v1;
    v2 = type metadata accessor for BooksLocalizerFactory(0);
    swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
    v0[10] = BooksLocalizerFactory.init(package:)(v1);
    v10 = (char *)&async function pointer to dispatch thunk of BooksLocalizerFactory.storeLocalizer(asPartOf:)
        + async function pointer to dispatch thunk of BooksLocalizerFactory.storeLocalizer(asPartOf:);
    v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of BooksLocalizerFactory.storeLocalizer(asPartOf:)
                                    + 1));
    v0[11] = v3;
    *v3 = v0;
    v3[1] = sub_1E022C;
    return ((uint64_t (*)(_QWORD, _QWORD))v10)(v0[3], v0[5]);
  }
  else
  {
    v5 = sub_5C154(&qword_329B08);
    v6 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
    v7 = objc_msgSend(v6, "packagePromise");

    v0[6] = Promise<A>.init(_:)(v7);
    v8 = sub_67060(&qword_329B10, &qword_329B08, (uint64_t)&protocol conformance descriptor for Promise<A>);
    v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[7] = v9;
    *v9 = v0;
    v9[1] = sub_1E0104;
    return dispatch thunk of Future.then()(v0 + 2, v5, v8);
  }
}

uint64_t sub_1E0104()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v3 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v2 + 16);
  return swift_task_switch(sub_1E0188, 0, 0);
}

uint64_t sub_1E0188()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  char *v7;

  v1 = (void *)v0[4];
  v2 = (void *)v0[8];
  v0[9] = v2;
  v3 = type metadata accessor for BooksLocalizerFactory(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = v1;
  v0[10] = BooksLocalizerFactory.init(package:)(v2);
  v7 = (char *)&async function pointer to dispatch thunk of BooksLocalizerFactory.storeLocalizer(asPartOf:)
     + async function pointer to dispatch thunk of BooksLocalizerFactory.storeLocalizer(asPartOf:);
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of BooksLocalizerFactory.storeLocalizer(asPartOf:)
                                  + 1));
  v0[11] = v5;
  *v5 = v0;
  v5[1] = sub_1E022C;
  return ((uint64_t (*)(_QWORD, _QWORD))v7)(v0[3], v0[5]);
}

uint64_t sub_1E022C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1E02CC;
  else
    v3 = sub_1E0290;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1E0290()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E02CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E0308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[5];
  __int128 v57;
  __int128 v58;
  char v59[32];

  v4 = sub_5C154(&qword_329740);
  __chkstk_darwin(v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Notification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v59, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
    return result;
  v16 = result;
  v17 = Notification.userInfo.getter();
  v54 = v7;
  v55 = v12;
  if (v17)
  {
    v18 = v17;
    *(_QWORD *)&v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(JSABridgeNotificationPackageKey);
    *((_QWORD *)&v57 + 1) = v19;
    AnyHashable.init<A>(_:)(&v57, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v18 + 16) && (v20 = sub_58318((uint64_t)v56), (v21 & 1) != 0))
    {
      sub_5E1EC(*(_QWORD *)(v18 + 56) + 32 * v20, (uint64_t)&v57);
    }
    else
    {
      v57 = 0u;
      v58 = 0u;
    }
    v22 = a1;
    swift_bridgeObjectRelease(v18);
    sub_5DCEC((uint64_t)v56);
    if (*((_QWORD *)&v58 + 1))
    {
      v23 = type metadata accessor for Package(0);
      if (swift_dynamicCast(v56, &v57, (char *)&type metadata for Any + 8, v23, 6))
        v24 = (void *)v56[0];
      else
        v24 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v22 = a1;
    v57 = 0u;
    v58 = 0u;
  }
  sub_5E09C((uint64_t)&v57, &qword_31F8B0);
  v24 = 0;
LABEL_13:
  static Logger.localization.getter();
  v25 = v22;
  v26 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v25, v54);
  v27 = v24;
  v28 = v14;
  v29 = Logger.logObject.getter(v27);
  v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, (os_log_type_t)v53))
  {
    v48 = v27;
    v49 = v28;
    v50 = v11;
    v51 = v16;
    v52 = v6;
    v30 = swift_slowAlloc(22, -1);
    v47 = swift_slowAlloc(64, -1);
    v56[0] = v47;
    *(_DWORD *)v30 = 136315394;
    v31 = (void *)Notification.name.getter();
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v33 = v24;
    v35 = v34;

    *(_QWORD *)&v57 = sub_57CD8(v32, v35, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v30 + 4, v30 + 12);
    v36 = v35;
    v24 = v33;
    swift_bridgeObjectRelease(v36);
    v37 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v26);
    *(_WORD *)(v30 + 12) = 2080;
    if (v33)
    {
      v27 = v48;
      v38 = Package.nameForJSContext.getter(v37);
      v40 = v39;
    }
    else
    {
      v40 = 0xE300000000000000;
      v38 = 7104878;
      v27 = v48;
    }
    *(_QWORD *)&v57 = sub_57CD8(v38, v40, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease(v40);

    _os_log_impl(&dword_0, v29, (os_log_type_t)v53, "Invalidating Localizer due to notification %s, newPackage: %s", (uint8_t *)v30, 0x16u);
    v42 = v47;
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v41 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v49, v50);
    v16 = v51;
    v6 = v52;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v26);

    v41 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v28, v11);
  }
  static TaskPriority.high.getter(v41);
  v43 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v6, 0, 1, v43);
  v44 = (_QWORD *)swift_allocObject(&unk_2F3340, 48, 7);
  v44[2] = 0;
  v44[3] = 0;
  v44[4] = v16;
  v44[5] = v24;
  v45 = v27;
  swift_retain(v16);
  v46 = sub_1E0844((uint64_t)v6, (uint64_t)&unk_329B20, (uint64_t)v44);
  swift_release(v46);
  swift_release(v16);

  return sub_5E09C((uint64_t)v6, &qword_329740);
}

uint64_t sub_1E07AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1E0308(a1, v1);
}

uint64_t sub_1E07B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3299E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E07FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1E0814, a4, 0);
}

uint64_t sub_1E0814()
{
  uint64_t v0;

  sub_1E09D4(*(void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E0844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v6 = sub_5C154(&qword_329740);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D5400(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_5E09C((uint64_t)v8, &qword_329740);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v18 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
      goto LABEL_3;
  }
  v15 = 0;
  v17 = 0;
LABEL_6:
  v19 = swift_allocObject(&unk_2F3368, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_329898, v19);
}

uint64_t sub_1E09D4(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v3 = *v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_329740);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1[14];
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject(&unk_2F3318, 56, 7);
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a1;
  v13[5] = v11;
  v13[6] = v3;
  v14 = a1;
  swift_retain(v11);
  v15 = sub_16CAF4((uint64_t)v10, (uint64_t)&unk_329AF8, (uint64_t)v13);
  v16 = v1[20];
  v1[20] = v15;
  v17 = swift_release(v16);
  static Logger.localization.getter(v17);
  v18 = v14;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v23 = v22;
    v29 = v22;
    *(_DWORD *)v21 = 136315138;
    if (a1)
    {
      v24 = Package.nameForJSContext.getter(v22);
      v26 = v25;
    }
    else
    {
      v26 = 0xE300000000000000;
      v24 = 7104878;
    }
    v28 = sub_57CD8(v24, v26, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v26);

    _os_log_impl(&dword_0, v19, v20, "Invalidated Localizer, newPackage: %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1E0C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_329B04);
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = sub_64780;
  v9[4] = a4;
  v9[5] = a5;
  v9[3] = a1;
  return swift_task_switch(sub_1DFF84, 0, 0);
}

uint64_t LocalizerManager.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  sub_5E09C(v0 + 120, &qword_3299E0);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t LocalizerManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  sub_5E09C(v0 + 120, &qword_3299E0);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t LocalizerManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for LocalizerManager()
{
  return objc_opt_self(_TtC11BookStoreUI16LocalizerManager);
}

uint64_t method lookup function for LocalizerManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LocalizerManager);
}

uint64_t dispatch thunk of LocalizerManager.localizer.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 160);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_7BFF8;
  return v7(a1);
}

uint64_t dispatch thunk of LocalizerManager.__allocating_init(objectGraph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(v1 + 168);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_A1EE4;
  return v7(a1);
}

uint64_t sub_1E0E38()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1E0E6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_329AF4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_64780;
  v7 = (_QWORD *)swift_task_alloc(dword_329B04);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_64780;
  v7[4] = v4;
  v7[5] = v5;
  v7[3] = a1;
  return swift_task_switch(sub_1DFF84, 0, 0);
}

uint64_t sub_1E0EFC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1E0F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_329B1C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_64780;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1E0814, v2, 0);
}

uint64_t sub_1E0F90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t *sub_1E0FB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for FontConstants(0, v8);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v15 = *(int *)(a3 + 20);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = v16;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v23 = *v17;
      *v16 = *v17;
      swift_retain(v23);
      v20 = v16;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v24 = *(int *)(a3 + 24);
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_5C154(&qword_320BC0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t sub_1E1134(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v4 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v6 = type metadata accessor for FontConstants(0, v5);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v8 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (char *)a1 + *(int *)(a2 + 24);
  v11 = sub_5C154(&qword_320BC0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t *sub_1E1218(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for FontConstants(0, v7);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = v14;
    v19 = v16;
    v20 = 1;
  }
  else
  {
    v21 = *v15;
    *v14 = *v15;
    swift_retain(v21);
    v18 = v14;
    v19 = v16;
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v19, v20);
  v22 = *(int *)(a3 + 24);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = sub_5C154(&qword_320BC0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  return a1;
}

uint64_t *sub_1E136C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_320290);
    v6 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for FontConstants(0, v7);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v6;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v6;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v13 = *(int *)(a3 + 20);
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    sub_5E09C((uint64_t)a1 + v13, (uint64_t *)&unk_32A010);
    v16 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = v14;
      v19 = v16;
      v20 = 1;
    }
    else
    {
      v21 = *v15;
      *v14 = *v15;
      swift_retain(v21);
      v18 = v14;
      v19 = v16;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  v22 = *(int *)(a3 + 24);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = sub_5C154(&qword_320BC0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

char *sub_1E14E8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for FontConstants(0, v7);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
    swift_storeEnumTagMultiPayload(v10, v12, 1);
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5C154(&qword_320BC0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

char *sub_1E1634(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_320290);
    v6 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for FontConstants(0, v7);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    sub_5E09C((uint64_t)&a1[v9], (uint64_t *)&unk_32A010);
    v12 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5C154(&qword_320BC0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_1E17A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E17B4);
}

uint64_t sub_1E17B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_5C154(&qword_320BC8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_5C154(&qword_31F498);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_5C154(&qword_320BC0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1E1858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E1864);
}

uint64_t sub_1E1864(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5C154(&qword_320BC8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5C154(&qword_31F498);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_320BC0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for InfoItemComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_329B88;
  if (!qword_329B88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InfoItemComponent);
  return result;
}

void sub_1E194C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_663E4(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_663E4(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8C2B4(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1E1A0C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0(&qword_329BC8, type metadata accessor for InfoItemComponent, (uint64_t)&unk_265F44);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_1E1A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_320458);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_320460);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for InfoItemComponent(0);
  v14 = sub_5C154(&qword_320BC0);
  ScaledMetric.wrappedValue.getter(&v23, v14);
  v15 = v23;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v10 + 1) = v15;
  v10[16] = 0;
  v17 = sub_5C154(&qword_329BD8);
  sub_1E1C64(a1, v2, (uint64_t)&v10[*(int *)(v17 + 44)]);
  v18 = type metadata accessor for InfoItemComponentModel(0);
  sub_74E34(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, *(_QWORD *)(a1 + *(int *)(v18 + 40)), *(_QWORD *)(a1 + *(int *)(v18 + 40) + 8));
  v19 = sub_5E09C((uint64_t)v10, &qword_320458);
  static AccessibilityChildBehavior.combine.getter(v19);
  v20 = sub_1E39A8();
  View.accessibilityElement(children:)(v7, v11, v20);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_5E09C((uint64_t)v13, &qword_320460);
}

uint64_t sub_1E1C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a1;
  v35 = a2;
  v36 = a3;
  v4 = sub_5C154(&qword_329BF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - v8;
  v10 = type metadata accessor for InfoItemSymbolView(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_5C154(&qword_329BF8);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - v17;
  v19 = a1 + *(int *)(type metadata accessor for InfoItemComponentModel(0) + 28);
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(_BYTE *)(v19 + 16);
  *v12 = swift_getKeyPath(&unk_265FB0);
  v23 = sub_5C154(&qword_320290);
  swift_storeEnumTagMultiPayload(v12, v23, 0);
  v24 = (_QWORD *)((char *)v12 + *(int *)(v10 + 20));
  *v24 = swift_getKeyPath(&unk_265FE0);
  v25 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v37 = 0x4040000000000000;
  sub_884D0(v20, v21);
  v26 = sub_8C30C();
  ScaledMetric.init(wrappedValue:)(&v37, &type metadata for Double, v26);
  v27 = (char *)v12 + *(int *)(v10 + 28);
  *(_QWORD *)v27 = v20;
  *((_QWORD *)v27 + 1) = v21;
  v27[16] = v22;
  v28 = sub_648E0(&qword_329C00, type metadata accessor for InfoItemSymbolView, (uint64_t)&unk_2591DC);
  View.accessibilityHidden(_:)(1, v10, v28);
  sub_1E3A34((uint64_t)v12);
  v29 = sub_66F14((uint64_t)v15, (uint64_t)v18, &qword_329BF8);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v29);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v30 = sub_5C154(&qword_329C08);
  sub_1E1F58(v34, v35, (uint64_t *)&v9[*(int *)(v30 + 44)]);
  sub_5E1A4((uint64_t)v18, (uint64_t)v15, &qword_329BF8);
  sub_5E1A4((uint64_t)v9, (uint64_t)v6, &qword_329BF0);
  v31 = v36;
  sub_5E1A4((uint64_t)v15, v36, &qword_329BF8);
  v32 = sub_5C154(&qword_329C10);
  sub_5E1A4((uint64_t)v6, v31 + *(int *)(v32 + 48), &qword_329BF0);
  sub_5E09C((uint64_t)v9, &qword_329BF0);
  sub_5E09C((uint64_t)v18, &qword_329BF8);
  sub_5E09C((uint64_t)v6, &qword_329BF0);
  return sub_5E09C((uint64_t)v15, &qword_329BF8);
}

double sub_1E1F58@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  double v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t OpaqueTypeConformance2;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  uint64_t KeyPath;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double result;
  void (*v152)(uint64_t, uint64_t);
  void (*v153)(char *, uint64_t);
  uint64_t (*v154)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  unsigned int v156;
  void (*v157)(char *, _QWORD, uint64_t);
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  char v206[8];
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v205 = a2;
  v189 = a1;
  v203 = a3;
  v202 = type metadata accessor for AutomaticHoverEffect(0);
  v186 = *(_QWORD *)(v202 - 8);
  v4 = __chkstk_darwin(v202);
  v185 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for PlainButtonStyle(0, v4);
  v183 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v182 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InfoItemComponentModel(0);
  v172 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v174 = v8;
  v175 = (uint64_t)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for InfoItemComponent(0);
  v169 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v170 = v9;
  v171 = (uint64_t)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_3261F0);
  __chkstk_darwin(v10);
  v173 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_5C154(&qword_329C18);
  v177 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v176 = (char *)&v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_5C154(&qword_329C20);
  v180 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v179 = (char *)&v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_5C154(&qword_329C28);
  v184 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v178 = (char *)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v181 = (char *)&v152 - v16;
  v193 = sub_5C154(&qword_329C30);
  __chkstk_darwin(v193);
  v198 = (uint64_t)&v152 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_329C38);
  __chkstk_darwin(v18);
  v164 = (uint64_t)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_5C154(&qword_329C40);
  __chkstk_darwin(v163);
  v166 = (uint64_t)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_5C154(&qword_329C48);
  __chkstk_darwin(v195);
  v165 = (uint64_t)&v152 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v168 = (uint64_t)&v152 - v23;
  v24 = sub_5C154(&qword_329C50);
  __chkstk_darwin(v24);
  v197 = (uint64_t)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v196 = (char *)&v152 - v27;
  v204 = type metadata accessor for ColorConstants(0);
  v191 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v29 = (char *)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_31F7E8);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v152 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Font.TextStyle(0, v31);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v152 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for FontConstants(0, v36);
  v190 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v41 = (char *)&v152 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = v7;
  v42 = (uint64_t *)(a1 + *(int *)(v7 + 32));
  v43 = v42[1];
  v210 = *v42;
  v211 = v43;
  v44 = sub_668F8();
  swift_bridgeObjectRetain(v43);
  v45 = Text.init<A>(_:)(&v210, &type metadata for String, v44);
  v187 = v46;
  v188 = (char *)v47;
  v49 = v48 & 1;
  sub_77618((uint64_t)v41);
  v50 = *(void (**)(_QWORD))(v35 + 104);
  v156 = enum case for Font.TextStyle.footnote(_:);
  v157 = (void (*)(char *, _QWORD, uint64_t))v50;
  v50(v38);
  v51 = type metadata accessor for Font.Design(0);
  v52 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56);
  v155 = v51;
  v154 = v52;
  v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v52)(v33, 1, 1);
  v54 = static Font.Weight.medium.getter(v53);
  v55 = static Font.system(_:design:weight:)(v38, v33, *(_QWORD *)&v54, 0);
  v162 = v33;
  sub_5E09C((uint64_t)v33, &qword_31F7E8);
  v56 = *(void (**)(char *, uint64_t))(v35 + 8);
  v160 = v38;
  v161 = v34;
  v153 = v56;
  v56(v38, v34);
  v57 = *(void (**)(uint64_t, uint64_t))(v190 + 8);
  v158 = v41;
  v159 = v39;
  v152 = v57;
  v57((uint64_t)v41, v39);
  v58 = v187;
  v59 = (uint64_t)v188;
  v60 = Text.font(_:)(v55, v45, v187, v49, v188);
  v62 = v61;
  v64 = v63;
  v66 = v65 & 1;
  sub_6693C(v45, v58, v49);
  swift_release(v55);
  swift_bridgeObjectRelease(v59);
  v67 = v205;
  v68 = sub_76AA0((uint64_t)v29);
  v69 = ColorConstants.booksSecondaryLabel.getter(v68);
  v70 = *(void (**)(char *, uint64_t))(v191 + 8);
  v188 = v29;
  v70(v29, v204);
  v71 = Text.foregroundColor(_:)(v69, v60, v62, v66, v64);
  v192 = v72;
  LODWORD(v190) = v73;
  v191 = v74;
  v75 = v62;
  v76 = v189;
  sub_6693C(v60, v75, v66);
  swift_release(v69);
  swift_bridgeObjectRelease(v64);
  sub_5E1A4(v76 + 40, (uint64_t)v206, &qword_320B70);
  sub_66F14((uint64_t)v206, (uint64_t)&v207, (uint64_t *)&unk_326210);
  if (v209)
  {
    sub_5DC98(&v207, (uint64_t)&v210);
    v78 = type metadata accessor for ButtonRole(0, v77);
    v79 = v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v173, 1, 1, v78);
    sub_5E0D8((uint64_t)&v210, (uint64_t)&v207);
    v80 = v67;
    v81 = v171;
    sub_5E11C(v80, v171, type metadata accessor for InfoItemComponent);
    v82 = v175;
    sub_5E11C(v76, v175, type metadata accessor for InfoItemComponentModel);
    v83 = *(unsigned __int8 *)(v169 + 80);
    v84 = (v83 + 16) & ~v83;
    v85 = *(unsigned __int8 *)(v172 + 80);
    v86 = (v170 + v85 + v84) & ~v85;
    v87 = swift_allocObject(&unk_2F33A0, v86 + v174, v83 | v85 | 7);
    sub_5E160(v81, v87 + v84, type metadata accessor for InfoItemComponent);
    sub_5E160(v82, v87 + v86, type metadata accessor for InfoItemComponentModel);
    v88 = sub_5C154(&qword_329C80);
    v89 = sub_1E3E60();
    v90 = v176;
    v91 = BooksActionButton.init(role:action:label:)(v79, &v207, sub_1E3DF8, v87, v88, v89);
    v92 = v182;
    PlainButtonStyle.init()(v91);
    v93 = sub_67060(&qword_329C58, &qword_329C18, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v94 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v95 = v179;
    v96 = v194;
    v97 = v199;
    View.buttonStyle<A>(_:)(v92, v194, v199, v93, v94);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v92, v97);
    v98 = (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v90, v96);
    v99 = v185;
    static CustomHoverEffect<>.automatic.getter(v98);
    *(_QWORD *)&v207 = v96;
    *((_QWORD *)&v207 + 1) = v97;
    v208 = v93;
    v209 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v207, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v101 = sub_648E0(&qword_321F80, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    v102 = v178;
    v103 = v200;
    v104 = v202;
    View.hoverEffect<A>(_:isEnabled:)(v99, 1, v200, v202, OpaqueTypeConformance2, v101);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v99, v104);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v95, v103);
    v105 = v71;
    v106 = v184;
    v107 = v181;
    v108 = v201;
    (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v181, v102, v201);
    v109 = v198;
    (*(void (**)(uint64_t, char *, uint64_t))(v106 + 16))(v198, v107, v108);
    swift_storeEnumTagMultiPayload(v109, v193, 0);
    *(_QWORD *)&v207 = v103;
    *((_QWORD *)&v207 + 1) = v104;
    v208 = OpaqueTypeConformance2;
    v209 = v101;
    v110 = swift_getOpaqueTypeConformance2(&v207, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    v111 = sub_1E3A80();
    v112 = (uint64_t)v196;
    _ConditionalContent<>.init(storage:)(v109, v108, v195, v110, v111);
    v113 = *(void (**)(char *, uint64_t))(v106 + 8);
    v71 = v105;
    v113(v107, v108);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v210);
  }
  else
  {
    sub_5E09C((uint64_t)&v207, (uint64_t *)&unk_326210);
    v114 = v76 + *(int *)(v167 + 36);
    v115 = *(_QWORD *)v114;
    v116 = *(_QWORD *)(v114 + 8);
    v117 = *(_BYTE *)(v114 + 16);
    sub_884D8(*(_QWORD *)v114, v116, v117);
    v118 = v164;
    sub_89DC0(v115, v116, v117, v164);
    sub_885A8(v115, v116, v117);
    v119 = (uint64_t)v158;
    sub_77618((uint64_t)v158);
    v120 = v160;
    v121 = v161;
    v157(v160, v156, v161);
    v122 = (uint64_t)v162;
    v123 = v154(v162, 1, 1, v155);
    v124 = static Font.Weight.medium.getter(v123);
    v125 = static Font.system(_:design:weight:)(v120, v122, *(_QWORD *)&v124, 0);
    sub_5E09C(v122, &qword_31F7E8);
    v153(v120, v121);
    v152(v119, v159);
    KeyPath = swift_getKeyPath(&unk_266010);
    v127 = v166;
    sub_5E1A4(v118, v166, &qword_329C38);
    v128 = (uint64_t *)(v127 + *(int *)(v163 + 36));
    *v128 = KeyPath;
    v128[1] = v125;
    sub_5E09C(v118, &qword_329C38);
    v129 = (uint64_t)v188;
    v130 = sub_76AA0((uint64_t)v188);
    v131 = ColorConstants.booksLabel.getter(v130);
    v70((char *)v129, v204);
    v132 = swift_getKeyPath(&unk_266040);
    v133 = v165;
    sub_5E1A4(v127, v165, &qword_329C40);
    v134 = v195;
    v135 = (uint64_t *)(v133 + *(int *)(v195 + 36));
    *v135 = v132;
    v135[1] = v131;
    sub_5E09C(v127, &qword_329C40);
    v136 = v133;
    v137 = v168;
    sub_66F14(v136, v168, &qword_329C48);
    v138 = v198;
    sub_5E1A4(v137, v198, &qword_329C48);
    swift_storeEnumTagMultiPayload(v138, v193, 1);
    v139 = sub_67060(&qword_329C58, &qword_329C18, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v140 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v210 = v194;
    v211 = v199;
    v212 = v139;
    v213 = v140;
    v141 = swift_getOpaqueTypeConformance2(&v210, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v142 = sub_648E0(&qword_321F80, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    v210 = v200;
    v211 = v202;
    v212 = v141;
    v213 = v142;
    v143 = swift_getOpaqueTypeConformance2(&v210, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    v144 = sub_1E3A80();
    v112 = (uint64_t)v196;
    _ConditionalContent<>.init(storage:)(v138, v201, v134, v143, v144);
    sub_5E09C(v137, &qword_329C48);
  }
  v145 = v190 & 1;
  v146 = v197;
  sub_5E1A4(v112, v197, &qword_329C50);
  v147 = v203;
  v148 = v192;
  *v203 = v71;
  v147[1] = v148;
  *((_BYTE *)v147 + 16) = v145;
  v149 = v191;
  v147[3] = v191;
  v150 = sub_5C154(&qword_329C78);
  sub_5E1A4(v146, (uint64_t)v147 + *(int *)(v150 + 48), &qword_329C50);
  sub_7BBCC(v71, v148, v145);
  swift_bridgeObjectRetain(v149);
  sub_5E09C(v112, &qword_329C50);
  sub_5E09C(v146, &qword_329C50);
  sub_6693C(v71, v148, v145);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v149).n128_u64[0];
  return result;
}

uint64_t sub_1E2E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for AccessibilityTraits(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_329C98);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for InfoItemComponent(0);
  v11 = sub_5C154(&qword_320BC0);
  ScaledMetric.wrappedValue.getter(&v19, v11);
  v12 = v19;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v13);
  *((_QWORD *)v10 + 1) = v12;
  v10[16] = 0;
  v14 = sub_5C154(&qword_329CA0);
  v15 = sub_1E3004(a2, a1, (uint64_t)&v10[*(int *)(v14 + 44)]);
  static AccessibilityTraits.isButton.getter(v15);
  v16 = sub_67060(&qword_329C90, &qword_329C98, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityAddTraits(_:)(v7, v8, v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_5E09C((uint64_t)v10, &qword_329C98);
}

uint64_t sub_1E3004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t (*v78)(char *, uint64_t, uint64_t, uint64_t);
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  void (*v81)(char *);
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v86 = a2;
  v99 = a3;
  v93 = sub_5C154(&qword_3205E0);
  __chkstk_darwin(v93);
  v92 = (uint64_t *)((char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  __chkstk_darwin(v5);
  v87 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_5C154(&qword_329CA8);
  __chkstk_darwin(v91);
  v88 = (uint64_t *)((char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v98 = sub_5C154(&qword_329CB0);
  __chkstk_darwin(v98);
  v95 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_5C154(&qword_329CB8);
  __chkstk_darwin(v97);
  v94 = (uint64_t)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v96 = (uint64_t)&v76 - v11;
  v104 = type metadata accessor for ColorConstants(0);
  v85 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v101 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_31F7E8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Font.TextStyle(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = v17;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for FontConstants(0, v20);
  v84 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_329C38);
  __chkstk_darwin(v25);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_5C154(&qword_329C40);
  __chkstk_darwin(v80);
  v29 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_5C154(&qword_329C48);
  __chkstk_darwin(v83);
  v100 = (uint64_t)&v76 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v103 = (uint64_t)&v76 - v32;
  v33 = a1 + *(int *)(type metadata accessor for InfoItemComponentModel(0) + 36);
  v34 = *(_QWORD *)v33;
  v35 = *(_QWORD *)(v33 + 8);
  v36 = *(_BYTE *)(v33 + 16);
  sub_884D8(*(_QWORD *)v33, v35, v36);
  sub_89DC0(v34, v35, v36, (uint64_t)v27);
  sub_885A8(v34, v35, v36);
  v37 = v86;
  sub_77618((uint64_t)v24);
  v82 = enum case for Font.TextStyle.footnote(_:);
  v81 = *(void (**)(char *))(v18 + 104);
  v38 = v19;
  v76 = v19;
  v81(v22);
  v39 = type metadata accessor for Font.Design(0);
  v78 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
  v40 = v78(v16, 1, 1, v39);
  v41 = static Font.Weight.medium.getter(v40);
  v42 = static Font.system(_:design:weight:)(v22, v16, *(_QWORD *)&v41, 0);
  sub_5E09C((uint64_t)v16, &qword_31F7E8);
  v77 = *(void (**)(char *, uint64_t))(v18 + 8);
  v77(v22, v38);
  v79 = *(void (**)(char *, uint64_t))(v84 + 8);
  v79(v24, v102);
  KeyPath = swift_getKeyPath(&unk_266010);
  sub_5E1A4((uint64_t)v27, (uint64_t)v29, &qword_329C38);
  v44 = (uint64_t *)&v29[*(int *)(v80 + 36)];
  *v44 = KeyPath;
  v44[1] = v42;
  sub_5E09C((uint64_t)v27, &qword_329C38);
  v84 = v37 + *(int *)(type metadata accessor for InfoItemComponent(0) + 20);
  v45 = v101;
  v46 = sub_76AA0(v101);
  v47 = ColorConstants.booksLabel.getter(v46);
  v85 = *(_QWORD *)(v85 + 8);
  ((void (*)(uint64_t, uint64_t))v85)(v45, v104);
  v48 = swift_getKeyPath(&unk_266040);
  v49 = v100;
  sub_5E1A4((uint64_t)v29, v100, &qword_329C40);
  v50 = (uint64_t *)(v49 + *(int *)(v83 + 36));
  *v50 = v48;
  v50[1] = v47;
  sub_5E09C((uint64_t)v29, &qword_329C40);
  sub_66F14(v49, v103, &qword_329C48);
  v51 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  sub_77618((uint64_t)v24);
  v52 = v76;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v22, v82, v76);
  v78(v16, 1, 1, v39);
  v53 = static Font.system(_:design:weight:)(v22, v16, 0, 1);
  sub_5E09C((uint64_t)v16, &qword_31F7E8);
  v77(v22, v52);
  v54 = Font.bold()(v53);
  swift_release(v53);
  v79(v24, v102);
  v55 = swift_getKeyPath(&unk_266010);
  v57 = v89;
  v56 = v90;
  v58 = v87;
  (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v87, enum case for Image.Scale.small(_:), v90);
  v59 = swift_getKeyPath(&unk_266070);
  v60 = v92;
  v61 = v56;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))((char *)v92 + *(int *)(v93 + 28), v58, v56);
  *v60 = v59;
  v62 = v88;
  sub_5E1A4((uint64_t)v60, (uint64_t)v88 + *(int *)(v91 + 36), &qword_3205E0);
  *v62 = v51;
  v62[1] = v55;
  v62[2] = v54;
  swift_retain(v51);
  swift_retain(v55);
  swift_retain(v54);
  sub_5E09C((uint64_t)v60, &qword_3205E0);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v61);
  swift_release(v54);
  swift_release(v55);
  swift_release(v51);
  v63 = v101;
  v64 = sub_76AA0(v101);
  v65 = ColorConstants.booksSecondaryLabel.getter(v64);
  ((void (*)(uint64_t, uint64_t))v85)(v63, v104);
  v66 = swift_getKeyPath(&unk_266040);
  v67 = v95;
  sub_5E1A4((uint64_t)v62, v95, &qword_329CA8);
  v68 = (uint64_t *)(v67 + *(int *)(v98 + 36));
  *v68 = v66;
  v68[1] = v65;
  sub_5E09C((uint64_t)v62, &qword_329CA8);
  v69 = v94;
  sub_5E1A4(v67, v94, &qword_329CB0);
  *(_QWORD *)(v69 + *(int *)(v97 + 36)) = 0x3FF0000000000000;
  sub_5E09C(v67, &qword_329CB0);
  v70 = v96;
  sub_66F14(v69, v96, &qword_329CB8);
  v71 = v103;
  v72 = v100;
  sub_5E1A4(v103, v100, &qword_329C48);
  sub_5E1A4(v70, v69, &qword_329CB8);
  v73 = v99;
  sub_5E1A4(v72, v99, &qword_329C48);
  v74 = sub_5C154(&qword_329CC0);
  sub_5E1A4(v69, v73 + *(int *)(v74 + 48), &qword_329CB8);
  sub_5E09C(v70, &qword_329CB8);
  sub_5E09C(v71, &qword_329C48);
  sub_5E09C(v69, &qword_329CB8);
  return sub_5E09C(v72, &qword_329C48);
}

uint64_t sub_1E38A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(v5, (uint64_t)v4, type metadata accessor for InfoItemComponent);
  v6 = sub_648E0(&qword_329BC8, type metadata accessor for InfoItemComponent, (uint64_t)&unk_265F44);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_1E3940()
{
  return sub_648E0(&qword_329BD0, type metadata accessor for InfoItemComponent, (uint64_t)&unk_265EF4);
}

uint64_t sub_1E396C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9C44, 1);
}

uint64_t sub_1E397C()
{
  return sub_648E0(&qword_320050, type metadata accessor for InfoItemComponentModel, (uint64_t)&unk_258FD0);
}

unint64_t sub_1E39A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329BE0;
  if (!qword_329BE0)
  {
    v1 = sub_667D0(&qword_320460);
    sub_67060(&qword_329BE8, &qword_320458, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_329BE0);
  }
  return result;
}

uint64_t sub_1E3A34(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InfoItemSymbolView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1E3A80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329C60;
  if (!qword_329C60)
  {
    v1 = sub_667D0(&qword_329C48);
    sub_1E3B04();
    sub_67060(&qword_31F7C0, &qword_31F7C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_329C60);
  }
  return result;
}

unint64_t sub_1E3B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329C68;
  if (!qword_329C68)
  {
    v1 = sub_667D0(&qword_329C40);
    sub_1E3B88();
    sub_67060(&qword_31F7D0, &qword_31F7D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_329C68);
  }
  return result;
}

unint64_t sub_1E3B88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329C70;
  if (!qword_329C70)
  {
    v1 = sub_667D0(&qword_329C38);
    sub_67060(&qword_320B28, &qword_320B20, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_329C70);
  }
  return result;
}

uint64_t sub_1E3C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for InfoItemComponent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for InfoItemComponentModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v4 + v5 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(v0 + v4);
  v12 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v14 = type metadata accessor for FontConstants(0, v13);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
  }
  else
  {
    swift_release(*v11);
  }
  v15 = v9 & ~v8;
  v16 = (_QWORD *)((char *)v11 + *(int *)(v1 + 20));
  v17 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = (char *)v11 + *(int *)(v1 + 24);
  v20 = sub_5C154(&qword_320BC0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v0 + v15;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v15));
  if (*(_QWORD *)(v0 + v15 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v21 + 40));
  v22 = v21 + v6[6];
  v23 = type metadata accessor for ImpressionMetrics(0);
  v24 = *(_QWORD *)(v23 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  sub_885A0(*(_QWORD *)(v21 + v6[7]), *(_QWORD *)(v21 + v6[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + v6[8] + 8));
  sub_885A8(*(_QWORD *)(v21 + v6[9]), *(_QWORD *)(v21 + v6[9] + 8), *(_BYTE *)(v21 + v6[9] + 16));
  return swift_deallocObject(v0, v15 + v10, v3 | v8 | 7);
}

uint64_t sub_1E3DF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for InfoItemComponent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InfoItemComponentModel(0) - 8) + 80);
  return sub_1E2E98(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

unint64_t sub_1E3E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329C88;
  if (!qword_329C88)
  {
    v1 = sub_667D0(&qword_329C80);
    sub_67060(&qword_329C90, &qword_329C98, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_648E0(&qword_31F710, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_329C88);
  }
  return result;
}

uint64_t sub_1E3F04()
{
  _QWORD v1[2];

  v1[0] = sub_667D0(&qword_320460);
  v1[1] = sub_1E39A8();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

ValueMetadata *_s22LintMetricsEventIntentVMa()
{
  return &_s22LintMetricsEventIntentVN;
}

ValueMetadata *_s20JSMetricsEventLinterVMa()
{
  return &_s20JSMetricsEventLinterVN;
}

void sub_1E3F70(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t inited;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _BYTE v12[56];
  unint64_t v13;

  v6 = sub_5C154(&qword_329CE8);
  inited = swift_initStackObject(v6, v12);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = 0x73646C656966;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = a2;
  swift_bridgeObjectRetain(a2);
  v13 = sub_536B8(inited);
  v8 = a1;
  v9 = sub_5C154(&qword_329CF0);
  v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v13, v9);
  v11 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", v10, v8);
  swift_unknownObjectRelease(v10);

  if (v11)
  {
    a3[3] = sub_119E10();
    a3[4] = &protocol witness table for JSValue;
    *a3 = v11;
  }
  else
  {
    __break(1u);
  }
}

void sub_1E4080(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x8000000000266080;
}

void sub_1E40A0(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  sub_1E3F70(a1, *v2, a2);
}

uint64_t sub_1E40B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v15[2];
  _QWORD v16[5];

  v4 = sub_5C154(&qword_329740);
  __chkstk_darwin(v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_31FE78);
  BaseObjectGraph.inject<A>(_:)(v16, v7, v7);
  sub_5E0D8((uint64_t)v16, (uint64_t)v15);
  v8 = swift_allocObject(&unk_2F34C8, 72, 7);
  sub_5DC98(v15, v8 + 16);
  *(_QWORD *)(v8 + 56) = a1;
  *(_QWORD *)(v8 + 64) = a2;
  sub_5C154(&qword_329CD8);
  swift_bridgeObjectRetain(a1);
  v9 = swift_retain(a2);
  v10 = Promise.__allocating_init()(v9);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject(&unk_2F34F0, 56, 7);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_329CD0;
  v12[5] = v8;
  v12[6] = v10;
  swift_retain(v10);
  v13 = sub_174AF8((uint64_t)v6, (uint64_t)&unk_329CE0, (uint64_t)v12);
  swift_release(v13);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v16);
  return v10;
}

uint64_t sub_1E421C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1E4238, 0, 0);
}

uint64_t sub_1E4238()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  v1 = (_QWORD *)v0[4];
  v2 = v0[5];
  v3 = v1[3];
  v4 = v1[4];
  sub_66898(v1, v3);
  v0[2] = v2;
  v5 = async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1];
  swift_bridgeObjectRetain(v2);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[7] = v6;
  v7 = sub_73540();
  *v6 = v0;
  v6[1] = sub_1E42E4;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0[3], v0 + 2, v0[6], &_s22LintMetricsEventIntentVN, v7, v3, v4);
}

uint64_t sub_1E42E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *(_QWORD *)(*v1 + 40);
  v4 = *v1;
  *(_QWORD *)(v4 + 64) = v0;
  swift_task_dealloc(v2);
  v5 = swift_bridgeObjectRelease(v3);
  if (v0)
    return swift_task_switch(sub_1E435C, 0, 0);
  else
    return (*(uint64_t (**)(__n128))(v4 + 8))(v5);
}

uint64_t sub_1E435C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E4368(uint64_t a1)
{
  uint64_t *v1;

  return sub_1E40B8(a1, *v1);
}

uint64_t sub_1E4370()
{
  _QWORD *v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1E43A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_329CCC);
  v5 = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_64780;
  *(_OWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = v1 + 16;
  return swift_task_switch(sub_1E4238, 0, 0);
}

uint64_t sub_1E4418()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1E444C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_326F54);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_64780;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_326F50
                                                                                     + dword_326F50))(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1E44E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E44EC);
}

uint64_t sub_1E44EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesType(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_320A40);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1E4590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E459C);
}

uint64_t sub_1E459C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesType(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_320A40);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SeriesPageStoreResourceIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_329D50;
  if (!qword_329D50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesPageStoreResourceIntent);
  return result;
}

void sub_1E4678(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_2661C0;
  v2 = type metadata accessor for SeriesType(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_2661D8;
    sub_E0EFC(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

unint64_t sub_1E4710@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __n128 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t result;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v49 = a1;
  v50 = a2;
  v3 = sub_5C154(&qword_320A40);
  v4 = __chkstk_darwin(v3);
  v53 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for MResourceType(0, v4);
  v52 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SeriesType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_323970);
  inited = swift_initStackObject(v12, &v58);
  *(_OWORD *)(inited + 16) = xmmword_25D600;
  *(_QWORD *)(inited + 32) = 0x4449736569726573;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v14 = v2[1];
  *(_QWORD *)(inited + 48) = *v2;
  *(_QWORD *)(inited + 56) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x7954736569726573;
  *(_QWORD *)(inited + 88) = 0xEA00000000006570;
  v51 = type metadata accessor for SeriesPageStoreResourceIntent(0);
  v48 = v2;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for SeriesType.audiobook(_:), v8);
  v15 = sub_1E4B6C();
  swift_bridgeObjectRetain(v14);
  dispatch thunk of RawRepresentable.rawValue.getter(&v56, v8, v15);
  dispatch thunk of RawRepresentable.rawValue.getter(&v54, v8, v15);
  v16 = v57;
  v17 = v55;
  if (v56 == v54 && v57 == v55)
  {
    swift_bridgeObjectRelease_n(v57, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
    type metadata accessor for MAudiobookSeries(0);
    v20 = static MAudiobookSeries.type.getter();
    goto LABEL_7;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, v54, v55, 0);
  swift_bridgeObjectRelease(v16);
  v19 = swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v19);
  if ((v18 & 1) != 0)
    goto LABEL_5;
  type metadata accessor for MBookSeries(0);
  v20 = static MBookSeries.type.getter();
LABEL_7:
  v22 = v49;
  v21 = v50;
  v24 = v47;
  v23 = v48;
  v25 = MResourceType.name.getter(v20);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v24);
  *(_QWORD *)(inited + 96) = v25;
  *(_QWORD *)(inited + 104) = v27;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x7344496D616461;
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  v28 = v51;
  v29 = *(_QWORD *)((char *)v23 + *(int *)(v51 + 24));
  v30 = sub_5C154(&qword_324E58);
  *(_QWORD *)(inited + 144) = v29;
  *(_QWORD *)(inited + 168) = v30;
  *(_QWORD *)(inited + 176) = 0x6564724F74726F73;
  *(_QWORD *)(inited + 184) = 0xE900000000000072;
  v31 = v53;
  sub_1E4BB4((uint64_t)v23 + *(int *)(v28 + 28), v53);
  v32 = type metadata accessor for SeriesListSortOrder(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
  v35 = swift_bridgeObjectRetain(v29);
  if (v34 == 1)
  {
    sub_A4150(v31);
    v36 = (uint64_t *)(inited + 192);
    *(_QWORD *)(inited + 216) = &type metadata for String;
LABEL_11:
    *v36 = 0;
    v41 = 0xE000000000000000;
    goto LABEL_12;
  }
  v37 = SeriesListSortOrder.rawValue.getter(v35);
  v38 = v31;
  v39 = v37;
  v41 = v40;
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v38, v32);
  v36 = (uint64_t *)(inited + 192);
  *(_QWORD *)(inited + 216) = &type metadata for String;
  if (!v41)
    goto LABEL_11;
  *v36 = v39;
LABEL_12:
  *(_QWORD *)(inited + 200) = v41;
  v56 = sub_52E00(inited);
  v42 = v22;
  v43 = sub_5C154(&qword_320660);
  v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v56, v43);
  v45 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", v44, v42);
  swift_unknownObjectRelease(v44);

  v21[3] = sub_5C154(&qword_323810);
  result = sub_E0584();
  v21[4] = result;
  *v21 = v45;
  return result;
}

void sub_1E4B38(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x8000000000266180;
}

unint64_t sub_1E4B58@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1E4710(a1, a2);
}

unint64_t sub_1E4B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323978;
  if (!qword_323978)
  {
    v1 = type metadata accessor for SeriesType(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesType, v1);
    atomic_store(result, (unint64_t *)&qword_323978);
  }
  return result;
}

uint64_t sub_1E4BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for SeriesListShelf(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t destroy for SeriesListShelf(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for SeriesListShelf(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for SeriesListShelf(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for SeriesListShelf()
{
  return &type metadata for SeriesListShelf;
}

uint64_t sub_1E4CFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x737465737361;
  else
    return 0xD000000000000013;
}

uint64_t sub_1E4D38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1E51D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1E4D5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E4FE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E4D84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E4FE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1E4DAC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *result;
  uint64_t v5;

  result = sub_1E4DD4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void *sub_1E4DD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v18;
  uint64_t v19;
  char v20;
  void *v21;

  v3 = sub_5C154(&qword_329D90);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MSeries(0);
  v8 = (void *)_MResourceDecoder_OrNil.init(wrappedValue:)(0, v7);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v11 = sub_1E4FE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesListShelf.CodingKeys, &type metadata for SeriesListShelf.CodingKeys, v11, v9, v10);
  if (v1)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);

  }
  else
  {
    v12 = sub_5C154(&qword_321BC8);
    v20 = 0;
    v13 = sub_67060((unint64_t *)&qword_321BD0, &qword_321BC8, (uint64_t)&protocol conformance descriptor for _MResourceDecoder_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v12, &v20, v3, v12, v13);

    v8 = v21;
    v14 = sub_5C154(&qword_323998);
    v20 = 1;
    v15 = sub_67060(&qword_3239A0, &qword_323998, (uint64_t)&protocol conformance descriptor for _MResourceDecoder_Many<A>);
    v16 = v8;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v14, &v20, v3, v14, v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v18 = v21;
    swift_bridgeObjectRetain(v21);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    swift_bridgeObjectRelease(v18);

  }
  return v8;
}

unint64_t sub_1E4FE8()
{
  unint64_t result;

  result = qword_329D98;
  if (!qword_329D98)
  {
    result = swift_getWitnessTable(&unk_266374, &type metadata for SeriesListShelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_329D98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeriesListShelf.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1E5078 + 4 * byte_266195[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1E50AC + 4 * byte_266190[v4]))();
}

uint64_t sub_1E50AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E50B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E50BCLL);
  return result;
}

uint64_t sub_1E50C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E50D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1E50D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E50DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesListShelf.CodingKeys()
{
  return &type metadata for SeriesListShelf.CodingKeys;
}

unint64_t sub_1E50FC()
{
  unint64_t result;

  result = qword_329DA0;
  if (!qword_329DA0)
  {
    result = swift_getWitnessTable(&unk_26634C, &type metadata for SeriesListShelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_329DA0);
  }
  return result;
}

unint64_t sub_1E5144()
{
  unint64_t result;

  result = qword_329DA8;
  if (!qword_329DA8)
  {
    result = swift_getWitnessTable(&unk_2662BC, &type metadata for SeriesListShelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_329DA8);
  }
  return result;
}

unint64_t sub_1E518C()
{
  unint64_t result;

  result = qword_329DB0;
  if (!qword_329DB0)
  {
    result = swift_getWitnessTable(&unk_2662E4, &type metadata for SeriesListShelf.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_329DB0);
  }
  return result;
}

uint64_t sub_1E51D0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x8000000000270B10;
    if (a2 == 0x8000000000270B10)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000270B10, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x737465737361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x737465737361, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1E52B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_2663D0);
  v6[0] = v1;
  v4 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 16, v6, 0, 0);
  return sub_5E1A4(v1 + 16, a1, &qword_329E08);
}

uint64_t sub_1E5368@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2663D0);
  v7[0] = v3;
  v5 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 16, v7, 0, 0);
  return sub_5E1A4(v3 + 16, a2, &qword_329E08);
}

uint64_t sub_1E5418(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_5E1A4(a1, (uint64_t)v9, &qword_329E08);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2663D0);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1EA258, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_5E09C((uint64_t)v9, &qword_329E08);
}

uint64_t sub_1E54E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 33, 0);
  sub_1EA048(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1E5540()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2663F8);
  v4 = v0;
  v2 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1E55C8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2663F8);
  v8 = v3;
  v5 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 56);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_1E5658(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2663F8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_165F60, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_1E5710()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_266420);
  v4 = v0;
  v2 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + 64);
}

__n128 sub_1E5798@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  uint64_t KeyPath;
  uint64_t v5;
  unsigned __int8 v6;
  __n128 result;
  __n128 *v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_266420);
  v8 = v3;
  v5 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3[5].n128_u8[0];
  result = v3[4];
  *a2 = result;
  a2[1].n128_u8[0] = v6;
  return result;
}

uint64_t sub_1E582C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v9[5];
  char v10;
  uint64_t v11;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *a2;
  KeyPath = swift_getKeyPath(&unk_266420);
  v9[2] = v5;
  v9[3] = v2;
  v9[4] = v3;
  v10 = v4;
  v11 = v5;
  v7 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, KeyPath, sub_1EA034, v9, (char *)&type metadata for () + 8, v7);
  return swift_release(KeyPath);
}

uint64_t sub_1E58E4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_5E09C((uint64_t)(v0 + 2), &qword_329E08);
  swift_release(v0[7]);
  v1 = (char *)v0
     + OBJC_IVAR____TtC11BookStoreUIP33_74585184CCE4B4E33BC602469FA5DD4524HostedComponentViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t HostedComponentView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  _QWORD v69[5];
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v67 = a1;
  v2 = sub_5C154(&qword_329DC0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_5C154(&qword_329DC8);
  __chkstk_darwin(v66);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5C154(&qword_329DD0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_5C154(&qword_329DD8);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_5C154(&qword_329DE0);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v56 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_329DE8);
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  __chkstk_darwin(v13);
  v61 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_5C154(&qword_329DF0);
  __chkstk_darwin(v65);
  v59 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v64 = (uint64_t)&v51 - v17;
  v18 = *v1;
  KeyPath = swift_getKeyPath(&unk_2663D0);
  v68[0] = v18;
  v20 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v68, KeyPath, v20);
  swift_release(KeyPath);
  swift_beginAccess(v18 + 16, v68, 0, 0);
  sub_5E1A4(v18 + 16, (uint64_t)&v70, &qword_329E08);
  if (!*((_QWORD *)&v71 + 1))
  {
    sub_5E09C((uint64_t)&v70, &qword_329E08);
    goto LABEL_7;
  }
  sub_5DC98(&v70, (uint64_t)v69);
  v21 = swift_getKeyPath(&unk_2663F8);
  *(_QWORD *)&v70 = v18;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v70, v21, v20);
  swift_release(v21);
  v22 = *(_QWORD *)(v18 + 56);
  if (!v22)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v69);
    goto LABEL_7;
  }
  v52 = v2;
  v23 = swift_getKeyPath(&unk_266420);
  *(_QWORD *)&v70 = v18;
  swift_retain(v22);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v70, v23, v20);
  swift_release(v23);
  if ((*(_BYTE *)(v18 + 80) & 1) != 0)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v69);
    swift_release(v22);
    v2 = v52;
LABEL_7:
    v24 = swift_allocObject(&unk_2F3788, 32, 7);
    *(_QWORD *)(v24 + 16) = 0xD000000000000020;
    *(_QWORD *)(v24 + 24) = 0x80000000002742D0;
    BooksFailureView.init(message:)(sub_1E889C, v24, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v2);
    swift_storeEnumTagMultiPayload(v7, v66, 1);
    v25 = sub_1E88A4();
    v26 = sub_67060(&qword_329E20, &qword_329DC0, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
    _ConditionalContent<>.init(storage:)(v7, v65, v2, v25, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v28 = *(_QWORD *)(v18 + 64);
  v29 = *(_QWORD *)(v18 + 72);
  sub_5E0D8((uint64_t)v69, (uint64_t)&v70);
  v30 = sub_F0B00();
  ComponentView.init(_:content:)(&v70, sub_1E600C, 0, &type metadata for _ComponentContentByType, v30);
  v31 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
  v32 = v54;
  View.localizer(from:)(v22, v54, v31);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v32);
  *(_QWORD *)&v70 = v32;
  *((_QWORD *)&v70 + 1) = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.localizer(from:)>>, 1);
  v34 = v56;
  v35 = v57;
  View.imageResourceProvider(from:)(v22, v57, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v35);
  *(_QWORD *)&v70 = v35;
  *((_QWORD *)&v70 + 1) = OpaqueTypeConformance2;
  v36 = swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 1);
  v37 = v61;
  v38 = v60;
  View.profileRestrictions(from:)(v22, v60, v36);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v34, v38);
  v40 = static Alignment.center.getter(v39);
  _FrameLayout.init(width:height:alignment:)(&v70, v28, 0, v29, 0, v40, v41);
  v43 = v62;
  v42 = v63;
  v44 = (uint64_t)v59;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v37, v63);
  v45 = v65;
  v46 = (_OWORD *)(v44 + *(int *)(v65 + 36));
  v47 = v71;
  *v46 = v70;
  v46[1] = v47;
  v46[2] = v72;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v42);
  v48 = v64;
  sub_1E89C0(v44, v64);
  sub_5E1A4(v48, (uint64_t)v7, &qword_329DF0);
  swift_storeEnumTagMultiPayload(v7, v66, 0);
  v49 = sub_1E88A4();
  v50 = sub_67060(&qword_329E20, &qword_329DC0, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
  _ConditionalContent<>.init(storage:)(v7, v45, v52, v49, v50);
  swift_release(v22);
  sub_5E09C(v48, &qword_329DF0);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v69);
}

uint64_t type metadata accessor for HostedComponentViewModel(uint64_t a1)
{
  return sub_64960(a1, qword_329EC0, (uint64_t)&nominal type descriptor for HostedComponentViewModel);
}

uint64_t sub_1E600C@<X0>(uint64_t *a1@<X8>)
{
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v2 = (int *)type metadata accessor for ReviewBrickComponent(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (char *)&v15 - v6;
  *v4 = swift_getKeyPath(&unk_2665F0);
  v8 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v4, v8, 0);
  v9 = (char *)v4 + v2[5];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_266620);
  v9[8] = 0;
  v10 = (_QWORD *)((char *)v4 + v2[6]);
  *v10 = swift_getKeyPath(&unk_266650);
  v11 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  v12 = (char *)v4 + v2[7];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_266680);
  v12[8] = 0;
  sub_5E160((uint64_t)v4, (uint64_t)v7, type metadata accessor for ReviewBrickComponent);
  v13 = sub_1E7EAC((uint64_t)v7, (uint64_t)&_swiftEmptyDictionarySingleton, (uint64_t (*)(_QWORD, __n128))type metadata accessor for ReviewBrickComponentModel, type metadata accessor for ReviewBrickComponent, &qword_32A020, (uint64_t)&unk_264170);
  result = sub_1EA0D4((uint64_t)v7);
  *a1 = v13;
  return result;
}

void sub_1E6180()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000000026EFD0, "BookStoreUI/BooksUIComponentHostingController.swift", 51, 2, 101, 0);
  __break(1u);
}

void BooksUIComponentHostingController.init(rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.BooksUIComponentHostingController", 45, "init(rootView:)", 15, 0);
  __break(1u);
}

void BooksUIComponentHostingController.init(coder:rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.BooksUIComponentHostingController", 45, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_1E6230()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + qword_329F60));
}

uint64_t sub_1E6240(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + qword_329F60));
}

uint64_t BooksUIComponentHostingController.update(rawComponentModel:size:feedControllerHost:)(uint64_t a1, double a2, double a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = sub_5C154(&qword_329740);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = swift_allocObject(&unk_2F37B0, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16);
  type metadata accessor for MainActor(0);
  swift_retain(v11);
  swift_bridgeObjectRetain(a1);
  v12 = v3;
  v13 = static MainActor.shared.getter(v12);
  v14 = swift_allocObject(&unk_2F37D8, 72, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v14 + 32) = v11;
  *(_QWORD *)(v14 + 40) = a1;
  *(_QWORD *)(v14 + 48) = v12;
  *(double *)(v14 + 56) = a2;
  *(double *)(v14 + 64) = a3;
  swift_release(v11);
  v15 = sub_1D979C((uint64_t)v9, (uint64_t)&unk_329E90, v14);
  return swift_release(v15);
}

uint64_t sub_1E6394(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(double *)(v8 + 136) = a1;
  *(double *)(v8 + 144) = a2;
  *(_QWORD *)(v8 + 120) = a7;
  *(_QWORD *)(v8 + 128) = a8;
  *(_QWORD *)(v8 + 112) = a6;
  v9 = type metadata accessor for CodeAnyComponentModel(0);
  *(_QWORD *)(v8 + 152) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 160) = v10;
  *(_QWORD *)(v8 + 168) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for JSONContext(0, v11);
  *(_QWORD *)(v8 + 176) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 184) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 192) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 200) = swift_task_alloc(v14);
  v15 = type metadata accessor for JSONObject(0);
  *(_QWORD *)(v8 + 208) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 216) = v16;
  *(_QWORD *)(v8 + 224) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 232) = static MainActor.shared.getter(v17);
  v18 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 240) = v18;
  *(_QWORD *)(v8 + 248) = v19;
  return swift_task_switch(sub_1E6490, v18, v19);
}

uint64_t sub_1E6490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v1 = *(_QWORD *)(v0 + 112) + 16;
  swift_beginAccess(v1, v0 + 56, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 256) = Strong;
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_opt_self(UIViewController);
    if (swift_dynamicCastObjCClass(v3, v4))
    {
      v5 = *(_QWORD *)(v0 + 120);
      v20[3] = sub_5C154(&qword_329FF8);
      v20[0] = v5;
      swift_bridgeObjectRetain(v5);
      JSONObject.init(wrapping:)(v20);
      v11 = UIViewController.jetActionHandlerInContext.getter();
      v13 = v12;
      ObjectType = swift_getObjectType();
      *(_QWORD *)(v0 + 264) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(ObjectType, v13);
      swift_unknownObjectRelease(v11);
      v15 = (_QWORD *)swift_task_alloc(dword_31FE04);
      *(_QWORD *)(v0 + 272) = v15;
      *v15 = v0;
      v15[1] = sub_1E6864;
      return BaseObjectGraph.withSyncDependenciesForSwiftUI.getter();
    }
    swift_unknownObjectRelease(v3);
  }
  swift_release(*(_QWORD *)(v0 + 232));
  if (qword_31E568 != -1)
    swift_once(&qword_31E568, sub_126558);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_5240C(v6, (uint64_t)qword_324FE0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "Failed to get UIViewController to retrieve object graph", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v17 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E6864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 272);
  v5 = *(_QWORD **)v2;
  v5[35] = a1;
  v5[36] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1E6E44, v5[30], v5[31]);
  swift_release(v5[33]);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v5[37] = v7;
  *v7 = v5;
  v7[1] = sub_1E6918;
  return BaseObjectGraph.inject<A>(_:)(v5[25], v5[22], v5[22]);
}

uint64_t sub_1E6918()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1E706C;
  else
    v4 = sub_1E6978;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 240), *(_QWORD *)(v2 + 248));
}

uint64_t sub_1E6978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  v7 = Dictionary<>.init(jsonContext:)(v3);
  v8 = sub_648E0(&qword_32A008, (uint64_t (*)(uint64_t))&type metadata accessor for CodeAnyComponentModel, (uint64_t)&protocol conformance descriptor for CodeAnyComponentModel);
  JSONObject.decode<A>(_:withUserInfo:)(v6, v7, v6, v8);
  if (v1)
  {
    v9 = *(_QWORD *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 184);
    v13 = swift_bridgeObjectRelease(v7);
    (*(void (**)(uint64_t, uint64_t, __n128))(v12 + 8))(v10, v11, v13);
    swift_release(v9);
    if (qword_31E568 != -1)
      swift_once(&qword_31E568, sub_126558);
    v14 = type metadata accessor for Logger(0);
    sub_5240C(v14, (uint64_t)qword_324FE0);
    swift_errorRetain(v1);
    v15 = swift_errorRetain(v1);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 256);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      swift_errorRetain(v1);
      v22 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 80) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v20 + 4, v20 + 12);
      *v21 = v22;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl(&dword_0, v16, v17, "Failed to apply update to view model with error: %@", v20, 0xCu);
      v23 = sub_5C154(&qword_32A000);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
      swift_unknownObjectRelease(v19);

    }
    else
    {
      swift_unknownObjectRelease(*(_QWORD *)(v0 + 256));

      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
    v37 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 224);
    v38 = *(_QWORD *)(v0 + 208);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  }
  else
  {
    v51 = *(_QWORD *)(v0 + 216);
    v52 = *(_QWORD *)(v0 + 208);
    v53 = *(_QWORD *)(v0 + 224);
    v48 = *(_QWORD *)(v0 + 184);
    v49 = *(_QWORD *)(v0 + 176);
    v50 = *(_QWORD *)(v0 + 200);
    v43 = *(_QWORD *)(v0 + 280);
    v44 = *(_QWORD *)(v0 + 168);
    v45 = *(_QWORD *)(v0 + 256);
    v46 = *(_QWORD *)(v0 + 160);
    v47 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 128);
    v27 = swift_bridgeObjectRelease(v7);
    v28 = *(_QWORD *)(v26 + qword_329F60);
    CodeAnyComponentModel.wrappedValue.getter(v27);
    KeyPath = swift_getKeyPath(&unk_2663D0);
    v30 = swift_task_alloc(32);
    *(_QWORD *)(v30 + 16) = v28;
    *(_QWORD *)(v30 + 24) = v0 + 16;
    *(_QWORD *)(v0 + 88) = v28;
    v31 = sub_648E0(&qword_329E00, type metadata accessor for HostedComponentViewModel, (uint64_t)&unk_2665D0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 88, KeyPath, sub_1EA01C, v30, (char *)&type metadata for () + 8, v31);
    swift_release(KeyPath);
    swift_task_dealloc(v30);
    sub_5E09C(v0 + 16, &qword_329E08);
    v32 = swift_getKeyPath(&unk_2663F8);
    v33 = swift_task_alloc(32);
    *(_QWORD *)(v33 + 16) = v28;
    *(_QWORD *)(v33 + 24) = v43;
    *(_QWORD *)(v0 + 96) = v28;
    swift_retain(v43);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 96, v32, sub_165F60, v33, (char *)&type metadata for () + 8, v31);
    swift_release(v43);
    swift_release(v32);
    swift_task_dealloc(v33);
    v34 = swift_getKeyPath(&unk_266420);
    v35 = swift_task_alloc(48);
    *(_QWORD *)(v35 + 16) = v28;
    *(_QWORD *)(v35 + 24) = v25;
    *(_QWORD *)(v35 + 32) = v24;
    *(_BYTE *)(v35 + 40) = 0;
    *(_QWORD *)(v0 + 104) = v28;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 104, v34, sub_1EA034, v35, (char *)&type metadata for () + 8, v31);
    swift_release(v34);
    swift_unknownObjectRelease(v45);
    swift_release(v43);
    swift_task_dealloc(v35);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v47);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v49);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v52);
  }
  v39 = *(_QWORD *)(v0 + 192);
  v40 = *(_QWORD *)(v0 + 200);
  v41 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E6E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 264);
  swift_release(*(_QWORD *)(v0 + 232));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 288);
  if (qword_31E568 != -1)
    swift_once(&qword_31E568, sub_126558);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FE0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 256);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v2);
    v11 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 80) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl(&dword_0, v5, v6, "Failed to apply update to view model with error: %@", v9, 0xCu);
    v12 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    swift_unknownObjectRelease(v8);

  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 256));

    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v14 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 208);
  swift_errorRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E706C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 280));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 304);
  if (qword_31E568 != -1)
    swift_once(&qword_31E568, sub_126558);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_324FE0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 256);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v2);
    v11 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 80) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl(&dword_0, v5, v6, "Failed to apply update to view model with error: %@", v9, 0xCu);
    v12 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    swift_unknownObjectRelease(v8);

  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 256));

    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v14 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 208);
  swift_errorRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E7294(void *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v11 = sub_5C154(&qword_329740);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a5, &type metadata for String, &type metadata for AnyHashable, &protocol witness table for String);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  v16 = swift_allocObject(&unk_2F37B0, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16);
  type metadata accessor for MainActor(0);
  v17 = a1;
  swift_unknownObjectRetain(a6);
  swift_retain(v16);
  swift_bridgeObjectRetain(v14);
  v19 = static MainActor.shared.getter(v18);
  v20 = swift_allocObject(&unk_2F3840, 72, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v20 + 32) = v16;
  *(_QWORD *)(v20 + 40) = v14;
  *(_QWORD *)(v20 + 48) = v17;
  *(double *)(v20 + 56) = a2;
  *(double *)(v20 + 64) = a3;
  swift_release(v16);
  v21 = sub_1D979C((uint64_t)v13, (uint64_t)&unk_329FF0, v20);
  swift_unknownObjectRelease(a6);

  swift_bridgeObjectRelease(v14);
  return swift_release(v21);
}

id BooksUIComponentHostingControllerFactory.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BooksUIComponentHostingControllerFactory();
  return objc_msgSendSuper2(&v2, "init");
}

id BooksUIComponentHostingControllerFactory.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BooksUIComponentHostingControllerFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1E74E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DynamicTypeSize.isAccessibilitySize.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1E7510(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  __int128 v25;
  ValueMetadata *v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  char v31;
  _OWORD v32[2];
  char v33;

  v4 = type metadata accessor for OpaqueMetatype(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContentUnavailableComponentModel(0);
  v9 = swift_bridgeObjectRetain(a2);
  OpaqueMetatype.init(_:)(v8, v9);
  v26 = &type metadata for ContentUnavailableComponent;
  v27 = sub_1A9C6C();
  v10 = swift_allocObject(&unk_2F3868, 49, 7);
  *(_QWORD *)&v25 = v10;
  v11 = a1[1];
  v30 = *a1;
  v31 = *((_BYTE *)a1 + 16);
  v28 = *((_QWORD *)a1 + 3);
  v29 = *((_BYTE *)a1 + 32);
  v12 = v29;
  *(_OWORD *)(v10 + 16) = v30;
  *(_OWORD *)(v10 + 32) = v11;
  *(_BYTE *)(v10 + 48) = v12;
  sub_5DC98(&v25, (uint64_t)v24);
  sub_1AB660((uint64_t)&v30);
  sub_1AB690(&v28);
  LOBYTE(a1) = swift_isUniquelyReferenced_nonNull_native(a2);
  v23 = a2;
  v13 = sub_7EEDC((uint64_t)v24, v24[3]);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v17 + 16))(v16, v14);
  v18 = *((_OWORD *)v16 + 1);
  v32[0] = *(_OWORD *)v16;
  v32[1] = v18;
  v33 = v16[32];
  sub_1E8ACC((uint64_t)v32, (uint64_t)v7, (char)a1, &v23);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v24);
  v19 = v23;
  v20 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v20);
  return v19;
}

uint64_t sub_1E76C8(void *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  __int128 v24;
  ValueMetadata *v25;
  unint64_t v26;

  v6 = type metadata accessor for OpaqueMetatype(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RecommendationItemComponentModel(0);
  v11 = swift_bridgeObjectRetain(a3);
  OpaqueMetatype.init(_:)(v10, v11);
  v25 = &type metadata for RecommendationItemComponent;
  v26 = sub_1EA19C();
  *(_QWORD *)&v24 = a1;
  a2 &= 1u;
  BYTE8(v24) = a2;
  sub_5DC98(&v24, (uint64_t)v23);
  sub_AAFF4(a1, a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a3);
  v22 = a3;
  v13 = sub_7EEDC((uint64_t)v23, v23[3]);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v17 + 16))(v16, v14);
  sub_1E8CE4(*(_QWORD *)v16, v16[8], (uint64_t)v9, isUniquelyReferenced_nonNull_native, &v22);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  v18 = v22;
  v19 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v19);
  return v18;
}

uint64_t sub_1E783C(void *a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __n128 v26;
  _BYTE v28[16];
  char v29;
  uint64_t v30;
  _QWORD v31[5];
  __int128 v32;
  ValueMetadata *v33;
  unint64_t v34;

  v10 = type metadata accessor for OpaqueMetatype(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for ListItemComponentModel(0);
  v15 = swift_bridgeObjectRetain(a5);
  OpaqueMetatype.init(_:)(v14, v15);
  v33 = &type metadata for ListItemComponent;
  v34 = sub_1C4B88();
  v16 = swift_allocObject(&unk_2F3890, 41, 7);
  *(_QWORD *)&v32 = v16;
  *(_QWORD *)(v16 + 16) = a1;
  a2 &= 1u;
  *(_BYTE *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  a4 &= 1u;
  *(_BYTE *)(v16 + 40) = a4;
  sub_5DC98(&v32, (uint64_t)v31);
  sub_AAFF4(a1, a2);
  sub_64DD8(a3, a4);
  LOBYTE(a3) = swift_isUniquelyReferenced_nonNull_native(a5);
  v30 = a5;
  v17 = sub_7EEDC((uint64_t)v31, v31[3]);
  v18 = __chkstk_darwin(v17);
  v20 = &v28[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, __n128))(v21 + 16))(v20, v18);
  v22 = *(_QWORD *)v20;
  v23 = *((_QWORD *)v20 + 2);
  v24 = v20[24];
  v29 = v20[8];
  v28[8] = v24;
  sub_1E8ED8(v22, v29, v23, v24, (uint64_t)v13, a3, &v30);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v31);
  v25 = v30;
  v26 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v11 + 8))(v13, v10, v26);
  return v25;
}

uint64_t sub_1E7A04(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for TextComponentModel, type metadata accessor for TextComponent, (unint64_t *)&unk_32A080, (uint64_t)&unk_263E84);
}

uint64_t sub_1E7A28(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for SheetHeaderComponentModel, type metadata accessor for SheetHeaderComponent, &qword_328910, (uint64_t)&unk_264408);
}

uint64_t sub_1E7A4C(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for SeriesRoomHeaderComponentModel, type metadata accessor for SeriesRoomHeaderComponent, (unint64_t *)&unk_32A090, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponent);
}

uint64_t sub_1E7A70(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  id v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  __int128 v24;
  ValueMetadata *v25;
  unint64_t v26;

  v6 = type metadata accessor for OpaqueMetatype(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeriesEntityCardComponentModel(0);
  v11 = swift_bridgeObjectRetain(a3);
  OpaqueMetatype.init(_:)(v10, v11);
  v25 = &type metadata for SeriesEntityCardComponent;
  v26 = sub_ACA48();
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  sub_5DC98(&v24, (uint64_t)v23);
  v12 = a1;
  LOBYTE(a2) = swift_isUniquelyReferenced_nonNull_native(a3);
  v22 = a3;
  v13 = sub_7EEDC((uint64_t)v23, v23[3]);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v17 + 16))(v16, v14);
  sub_1E9328(*v16, v16[1], (uint64_t)v9, a2, &v22);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  v18 = v22;
  v19 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v19);
  return v18;
}

uint64_t sub_1E7BD0(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for ReviewBrickComponentModel, type metadata accessor for ReviewBrickComponent, &qword_32A020, (uint64_t)&unk_264170);
}

uint64_t sub_1E7BF4(uint64_t a1)
{
  return sub_1E7D34(a1, (uint64_t (*)(_QWORD, __n128))type metadata accessor for RatingSummaryComponentModel, (uint64_t)&type metadata for RatingSummaryComponent, (uint64_t (*)(void))sub_64818);
}

uint64_t sub_1E7C10(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for InfoItemComponentModel, type metadata accessor for InfoItemComponent, &qword_329BC8, (uint64_t)&unk_265F44);
}

uint64_t sub_1E7C34(uint64_t a1)
{
  return sub_1E7D34(a1, (uint64_t (*)(_QWORD, __n128))type metadata accessor for EmptyComponentModel, (uint64_t)&type metadata for EmptyComponent, (uint64_t (*)(void))sub_1EA158);
}

uint64_t sub_1E7C50(uint64_t a1)
{
  return sub_1E7D34(a1, (uint64_t (*)(_QWORD, __n128))type metadata accessor for DividerComponentModel, (uint64_t)&type metadata for DividerComponent, (uint64_t (*)(void))sub_184C00);
}

uint64_t sub_1E7C6C(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for DescriptionHeaderComponentModel, type metadata accessor for DescriptionHeaderComponent, &qword_3232F8, (uint64_t)&unk_25D18C);
}

uint64_t sub_1E7C90(uint64_t a1)
{
  return sub_1E7D34(a1, (uint64_t (*)(_QWORD, __n128))type metadata accessor for ShelfHeaderComponentModel, (uint64_t)&type metadata for ShelfHeaderComponent, (uint64_t (*)(void))sub_1EA214);
}

uint64_t sub_1E7CAC(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for SeriesRoomListHeaderComponentModel, type metadata accessor for SeriesRoomListHeaderComponent, (unint64_t *)&unk_32A070, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderComponent);
}

uint64_t sub_1E7CD0(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for ReviewsHeaderComponentModel, type metadata accessor for ReviewsHeaderComponent, (unint64_t *)&unk_32A0C0, (uint64_t)&unk_269668);
}

uint64_t sub_1E7CF4(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for DefaultHeaderComponentModel, type metadata accessor for DefaultHeaderComponent, &qword_325DC0, (uint64_t)&unk_260B50);
}

uint64_t sub_1E7D18(uint64_t a1)
{
  return sub_1E7D34(a1, (uint64_t (*)(_QWORD, __n128))type metadata accessor for SeeAllFooterComponentModel, (uint64_t)&type metadata for SeeAllFooterComponent, (uint64_t (*)(void))sub_175760);
}

uint64_t sub_1E7D34(uint64_t a1, uint64_t (*a2)(_QWORD, __n128), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v8 = type metadata accessor for OpaqueMetatype(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2(0, v10);
  v14 = swift_bridgeObjectRetain(a1);
  v15 = OpaqueMetatype.init(_:)(v13, v14);
  v26 = a3;
  v27 = ((uint64_t (*)(uint64_t))a4)(v15);
  sub_5DC98(&v25, (uint64_t)v24);
  LOBYTE(v13) = swift_isUniquelyReferenced_nonNull_native(a1);
  v23 = a1;
  v16 = sub_7EEDC((uint64_t)v24, v24[3]);
  v17 = __chkstk_darwin(v16);
  (*(void (**)(__n128))(v18 + 16))(v17);
  sub_1E9510((uint64_t)v12, v13, &v23, a3, a4);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v24);
  v19 = v23;
  v20 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v12, v8, v20);
  return v19;
}

uint64_t sub_1E7E88(uint64_t a1, uint64_t a2)
{
  return sub_1E7EAC(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for DefaultFooterComponentModel, type metadata accessor for DefaultFooterComponent, &qword_32A050, (uint64_t)&unk_25D0B8);
}

uint64_t sub_1E7EAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, __n128), uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v12 = type metadata accessor for OpaqueMetatype(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a3(0, v14);
  v18 = swift_bridgeObjectRetain(a2);
  OpaqueMetatype.init(_:)(v17, v18);
  v32 = a4(0);
  v33 = sub_648E0(a5, a4, a6);
  v19 = sub_668BC(&v31);
  sub_5E11C(a1, (uint64_t)v19, a4);
  sub_5DC98(&v31, (uint64_t)v30);
  LOBYTE(v17) = swift_isUniquelyReferenced_nonNull_native(a2);
  v29 = a2;
  v20 = sub_7EEDC((uint64_t)v30, v30[3]);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v24 + 16))(v23, v21);
  sub_1E910C((uint64_t)v23, (uint64_t)v16, v17, &v29, a4, a5, a6);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v30);
  v25 = v29;
  v26 = swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v16, v12, v26);
  return v25;
}

unint64_t sub_1E8048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for OpaqueMetatype(0);
  v6 = sub_648E0(&qword_32A030, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetatype, (uint64_t)&protocol conformance descriptor for OpaqueMetatype);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1E86D0(a1, v7);
}

void *sub_1E80B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  const void *v26;
  __int128 v27[2];

  v1 = v0;
  v2 = type metadata accessor for OpaqueMetatype(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5C154(&qword_32A028);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_29:
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  v25 = v1;
  v26 = (const void *)(v6 + 64);
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, v26, 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v21 >= v16)
      goto LABEL_27;
    v22 = *((_QWORD *)v26 + v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_27;
      v22 = *((_QWORD *)v26 + v12);
      if (!v22)
      {
        v12 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_27;
        v22 = *((_QWORD *)v26 + v12);
        if (!v22)
        {
          v12 = v21 + 3;
          if (v21 + 3 >= v16)
          {
LABEL_27:
            result = (void *)swift_release(v6);
            v1 = v25;
            goto LABEL_29;
          }
          v22 = *((_QWORD *)v26 + v12);
          v23 = v21 + 3;
          if (!v22)
            break;
        }
      }
    }
LABEL_26:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 40 * v18;
    sub_5E0D8(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = (void *)sub_5DC98(v27, *(_QWORD *)(v8 + 56) + v20);
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_27;
    v22 = *((_QWORD *)v26 + v12);
    ++v23;
    if (v22)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1E8310(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  int64_t v41;
  int v42;
  __int128 v43[2];

  v3 = v2;
  v6 = type metadata accessor for OpaqueMetatype(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_32A028);
  v42 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_42;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v39 = v2;
  v40 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_25;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      goto LABEL_37;
    v24 = v40[v23];
    ++v19;
    if (!v24)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_37;
      v24 = v40[v19];
      if (!v24)
      {
        v19 = v23 + 2;
        if (v23 + 2 >= v41)
          goto LABEL_37;
        v24 = v40[v19];
        if (!v24)
          break;
      }
    }
LABEL_24:
    v16 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v7 + 72);
    v27 = *(_QWORD *)(v10 + 48) + v26 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v27, v6);
      sub_5DC98((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v22), (uint64_t)v43);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v27, v6);
      sub_5E0D8(*(_QWORD *)(v10 + 56) + 40 * v22, (uint64_t)v43);
    }
    v28 = *(_QWORD *)(v12 + 40);
    v29 = sub_648E0(&qword_32A030, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetatype, (uint64_t)&protocol conformance descriptor for OpaqueMetatype);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v6, v29);
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v26 * v20, v9, v6);
    result = sub_5DC98(v43, *(_QWORD *)(v12 + 56) + 40 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  v19 = v23 + 3;
  if (v23 + 3 < v41)
  {
    v24 = v40[v19];
    v25 = v23 + 3;
    if (!v24)
    {
      while (1)
      {
        v19 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_44;
        if (v19 >= v41)
          goto LABEL_37;
        v24 = v40[v19];
        ++v25;
        if (v24)
          goto LABEL_24;
      }
    }
    goto LABEL_24;
  }
LABEL_37:
  swift_release(v10);
  v3 = v39;
  if ((v42 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v10 + 32);
    if (v37 >= 64)
      bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v40 = -1 << v37;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

unint64_t sub_1E86D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v19 = a1;
  v5 = type metadata accessor for OpaqueMetatype(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      v15 = sub_648E0(&qword_32A038, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetatype, (uint64_t)&protocol conformance descriptor for OpaqueMetatype);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v19, v5, v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_1E8810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v5 = sub_668F8();
  swift_bridgeObjectRetain(a2);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8 & 1;
  *(_QWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_1E8878()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1E889C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E8810(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1E88A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_329E10;
  if (!qword_329E10)
  {
    v1 = sub_667D0(&qword_329DF0);
    v2 = sub_667D0(&qword_329DE0);
    v3 = sub_667D0(&qword_329DD8);
    v6 = sub_667D0(&qword_329DD0);
    v7 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.localizer(from:)>>, 1);
    v6 = v3;
    v7 = OpaqueTypeConformance2;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 1);
    v6 = v2;
    v7 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_329E10);
  }
  return result;
}

uint64_t sub_1E89C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_329DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E8A08()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1E8A30(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  _QWORD *v11;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_329E8C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_7BFF8;
  return sub_1E6394(v9, v10, a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1E8ACC(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  ValueMetadata *v35;
  unint64_t v36;
  _OWORD v37[2];
  char v38;

  v8 = type metadata accessor for OpaqueMetatype(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = &type metadata for ContentUnavailableComponent;
  v36 = sub_1A9C6C();
  v12 = swift_allocObject(&unk_2F3868, 49, 7);
  *(_QWORD *)&v34 = v12;
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 32) = v13;
  *(_BYTE *)(v12 + 48) = *(_BYTE *)(a1 + 32);
  v14 = (_QWORD *)*a4;
  v16 = sub_1E8048(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = (_QWORD *)*a4;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 40 * v16);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
      return sub_5DC98(&v34, (uint64_t)v23);
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_1E80B4();
    goto LABEL_7;
  }
  sub_1E8310(v19, a3 & 1);
  v25 = sub_1E8048(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v16 = v25;
  v22 = (_QWORD *)*a4;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v27 = sub_7EEDC((uint64_t)&v34, (uint64_t)v35);
  __chkstk_darwin(v27);
  v29 = (char *)&v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v30 + 16))((uint64_t)v29, v31);
  v32 = *((_OWORD *)v29 + 1);
  v37[0] = *(_OWORD *)v29;
  v37[1] = v32;
  v38 = v29[32];
  sub_1E96F0(v16, (uint64_t)v11, (uint64_t)v37, v22);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v34);
}

uint64_t sub_1E8CE4(uint64_t a1, char a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  ValueMetadata *v34;
  unint64_t v35;

  v10 = type metadata accessor for OpaqueMetatype(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = &type metadata for RecommendationItemComponent;
  v35 = sub_1EA19C();
  *(_QWORD *)&v33 = a1;
  BYTE8(v33) = a2 & 1;
  v14 = (_QWORD *)*a5;
  v16 = sub_1E8048(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = (_QWORD *)*a5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 40 * v16);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
      return sub_5DC98(&v33, (uint64_t)v23);
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1E80B4();
    goto LABEL_7;
  }
  sub_1E8310(v19, a4 & 1);
  v25 = sub_1E8048(a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v25;
  v22 = (_QWORD *)*a5;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v27 = sub_7EEDC((uint64_t)&v33, (uint64_t)v34);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v31 + 16))(v30, v28);
  sub_1E97D0(v16, (uint64_t)v13, *(_QWORD *)v30, v30[8], v22);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v33);
}

uint64_t sub_1E8ED8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t result;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BYTE v40[16];
  char v41;
  __int128 v42;
  ValueMetadata *v43;
  unint64_t v44;

  v14 = type metadata accessor for OpaqueMetatype(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v40[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v43 = &type metadata for ListItemComponent;
  v44 = sub_1C4B88();
  v18 = swift_allocObject(&unk_2F3890, 41, 7);
  *(_QWORD *)&v42 = v18;
  *(_QWORD *)(v18 + 16) = a1;
  *(_BYTE *)(v18 + 24) = a2 & 1;
  *(_QWORD *)(v18 + 32) = a3;
  *(_BYTE *)(v18 + 40) = a4 & 1;
  v19 = (_QWORD *)*a7;
  v21 = sub_1E8048(a5);
  v22 = v19[2];
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
    goto LABEL_14;
  }
  v25 = v20;
  v26 = v19[3];
  if (v26 >= v24 && (a6 & 1) != 0)
  {
LABEL_7:
    v27 = (_QWORD *)*a7;
    if ((v25 & 1) != 0)
    {
LABEL_8:
      v28 = (_QWORD *)(v27[7] + 40 * v21);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v28);
      return sub_5DC98(&v42, (uint64_t)v28);
    }
    goto LABEL_11;
  }
  if (v26 >= v24 && (a6 & 1) == 0)
  {
    sub_1E80B4();
    goto LABEL_7;
  }
  sub_1E8310(v24, a6 & 1);
  v30 = sub_1E8048(a5);
  if ((v25 & 1) != (v31 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
    __break(1u);
    return result;
  }
  v21 = v30;
  v27 = (_QWORD *)*a7;
  if ((v25 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v17, a5, v14);
  v32 = sub_7EEDC((uint64_t)&v42, (uint64_t)v43);
  __chkstk_darwin(v32);
  v34 = &v40[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t, uint64_t))(v35 + 16))((uint64_t)v34, v36);
  v37 = *(_QWORD *)v34;
  v38 = *((_QWORD *)v34 + 2);
  v39 = v34[24];
  v41 = v34[8];
  v40[8] = v39;
  sub_1E98A0(v21, (uint64_t)v17, v37, v41, v38, v39, v27);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v42);
}

uint64_t sub_1E910C(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t result;
  unint64_t v31;
  char v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v14 = type metadata accessor for OpaqueMetatype(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = ((uint64_t (*)(_QWORD, __n128))a5)(0, v16);
  v39 = a6;
  v40 = a7;
  v43 = sub_648E0(a6, a5, a7);
  v19 = sub_668BC(&v41);
  sub_5E160(a1, (uint64_t)v19, a5);
  v20 = (_QWORD *)*a4;
  v22 = sub_1E8048(a2);
  v23 = v20[2];
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
    goto LABEL_14;
  }
  v26 = v21;
  v27 = v20[3];
  if (v27 >= v25 && (a3 & 1) != 0)
  {
LABEL_7:
    v28 = (_QWORD *)*a4;
    if ((v26 & 1) != 0)
    {
LABEL_8:
      v29 = (_QWORD *)(v28[7] + 40 * v22);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v29);
      return sub_5DC98(&v41, (uint64_t)v29);
    }
    goto LABEL_11;
  }
  if (v27 >= v25 && (a3 & 1) == 0)
  {
    sub_1E80B4();
    goto LABEL_7;
  }
  sub_1E8310(v25, a3 & 1);
  v31 = sub_1E8048(a2);
  if ((v26 & 1) != (v32 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
    __break(1u);
    return result;
  }
  v22 = v31;
  v28 = (_QWORD *)*a4;
  if ((v26 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2, v14);
  v33 = sub_7EEDC((uint64_t)&v41, v42);
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v38 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v37 + 16))(v36, v34);
  sub_1E9B18(v22, (uint64_t)v18, (uint64_t)v36, v28, a5, v39, v40);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v41);
}

uint64_t sub_1E9328(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  ValueMetadata *v34;
  unint64_t v35;

  v10 = type metadata accessor for OpaqueMetatype(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = &type metadata for SeriesEntityCardComponent;
  v35 = sub_ACA48();
  *(_QWORD *)&v33 = a1;
  *((_QWORD *)&v33 + 1) = a2;
  v14 = (_QWORD *)*a5;
  v16 = sub_1E8048(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = (_QWORD *)*a5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 40 * v16);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
      return sub_5DC98(&v33, (uint64_t)v23);
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1E80B4();
    goto LABEL_7;
  }
  sub_1E8310(v19, a4 & 1);
  v25 = sub_1E8048(a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v25;
  v22 = (_QWORD *)*a5;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v27 = sub_7EEDC((uint64_t)&v33, (uint64_t)v34);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t))(v30 + 16))(v29, v31);
  sub_1E99A4(v16, (uint64_t)v13, *v29, v29[1], v22);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v33);
}

uint64_t sub_1E9510(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v10 = type metadata accessor for OpaqueMetatype(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a4;
  v31 = a5;
  v34 = ((uint64_t (*)(__n128))a5)(v12);
  v15 = (_QWORD *)*a3;
  v17 = sub_1E8048(a1);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= v20 && (a2 & 1) != 0)
  {
LABEL_7:
    v23 = (_QWORD *)*a3;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = (_QWORD *)(v23[7] + 40 * v17);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v24);
      return sub_5DC98(&v32, (uint64_t)v24);
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a2 & 1) == 0)
  {
    sub_1E80B4();
    goto LABEL_7;
  }
  sub_1E8310(v20, a2 & 1);
  v26 = sub_1E8048(a1);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v17 = v26;
  v23 = (_QWORD *)*a3;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
  v28 = sub_7EEDC((uint64_t)&v32, v33);
  v29 = __chkstk_darwin(v28);
  (*(void (**)(__n128))(v30 + 16))(v29);
  sub_1E9A6C(v17, (uint64_t)v14, v23, a4, v31);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32);
}

uint64_t sub_1E96F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  ValueMetadata *v17;
  unint64_t v18;

  v17 = &type metadata for ContentUnavailableComponent;
  v18 = sub_1A9C6C();
  v8 = swift_allocObject(&unk_2F3868, 49, 7);
  *(_QWORD *)&v16 = v8;
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(a3 + 32);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for OpaqueMetatype(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  result = sub_5DC98(&v16, a4[7] + 40 * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_1E97D0(unint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  ValueMetadata *v17;
  unint64_t v18;

  v17 = &type metadata for RecommendationItemComponent;
  v18 = sub_1EA19C();
  *(_QWORD *)&v16 = a3;
  BYTE8(v16) = a4 & 1;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for OpaqueMetatype(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  result = sub_5DC98(&v16, a5[7] + 40 * a1);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

uint64_t sub_1E98A0(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  ValueMetadata *v22;
  unint64_t v23;

  v22 = &type metadata for ListItemComponent;
  v23 = sub_1C4B88();
  v14 = swift_allocObject(&unk_2F3890, 41, 7);
  *(_QWORD *)&v21 = v14;
  *(_QWORD *)(v14 + 16) = a3;
  *(_BYTE *)(v14 + 24) = a4 & 1;
  *(_QWORD *)(v14 + 32) = a5;
  *(_BYTE *)(v14 + 40) = a6 & 1;
  a7[(a1 >> 6) + 8] |= 1 << a1;
  v15 = a7[6];
  v16 = type metadata accessor for OpaqueMetatype(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a1, a2, v16);
  result = sub_5DC98(&v21, a7[7] + 40 * a1);
  v18 = a7[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a7[2] = v20;
  return result;
}

uint64_t sub_1E99A4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  ValueMetadata *v17;
  unint64_t v18;

  v17 = &type metadata for SeriesEntityCardComponent;
  v18 = sub_ACA48();
  *(_QWORD *)&v16 = a3;
  *((_QWORD *)&v16 + 1) = a4;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for OpaqueMetatype(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  result = sub_5DC98(&v16, a5[7] + 40 * a1);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

uint64_t sub_1E9A6C(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a4;
  v16 = a5();
  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a3[6];
  v9 = type metadata accessor for OpaqueMetatype(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_5DC98(&v14, a3[7] + 40 * a1);
  v11 = a3[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a3[2] = v13;
  return result;
}

uint64_t sub_1E9B18(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a5(0);
  v23 = sub_648E0(a6, a5, a7);
  v14 = sub_668BC(&v21);
  sub_5E160(a3, (uint64_t)v14, a5);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v15 = a4[6];
  v16 = type metadata accessor for OpaqueMetatype(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a1, a2, v16);
  result = sub_5DC98(&v21, a4[7] + 40 * a1);
  v18 = a4[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a4[2] = v20;
  return result;
}

id _s11BookStoreUI40BooksUIComponentHostingControllerFactoryC6createAA09BSUIBooksefG0_So06UIViewG0CXcyFZ_0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  id result;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;

  v0 = objc_allocWithZone((Class)type metadata accessor for BooksUIComponentHostingController(0));
  v1 = type metadata accessor for HostedComponentViewModel(0);
  v2 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_BYTE *)(v2 + 80) = 1;
  v3 = (char *)v0;
  ObservationRegistrar.init()(v3);
  v4 = qword_329F60;
  *(_QWORD *)&v3[qword_329F60] = v2;

  v11 = *(_QWORD *)&v3[v4];
  swift_retain(v11);
  v5 = (id)UIHostingController.init(rootView:)(&v11);
  result = objc_msgSend(v5, "view");
  if (result)
  {
    v7 = result;
    v8 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v7, "setBackgroundColor:", v8);

    result = objc_msgSend(v5, "view");
    if (result)
    {
      v9 = result;
      objc_msgSend(result, "setUserInteractionEnabled:", 0);

      v10 = v5;
      UIHostingController.safeAreaRegions.setter(0);

      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BooksUIComponentHostingControllerFactory()
{
  return objc_opt_self(BSUIBooksUIComponentHostingControllerFactory);
}

uint64_t sub_1E9D90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of HostedComponentView.body>>, 1);
}

uint64_t sub_1E9DA0()
{
  return type metadata accessor for HostedComponentViewModel(0);
}

uint64_t sub_1E9DA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "(";
  v4[1] = &unk_266508;
  v4[2] = &unk_266520;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HostedComponentView()
{
  return &type metadata for HostedComponentView;
}

uint64_t type metadata accessor for BooksUIComponentHostingController(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_329F68, (uint64_t)&nominal type descriptor for BooksUIComponentHostingController);
}

uint64_t sub_1E9E58(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + class metadata base offset for BooksUIComponentHostingController);
}

uint64_t method lookup function for BooksUIComponentHostingController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BooksUIComponentHostingController);
}

uint64_t sub_1E9EB0()
{
  return type metadata accessor for BooksUIComponentHostingController(0);
}

unint64_t sub_1E9EBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_329FE0;
  if (!qword_329FE0)
  {
    v1 = sub_667D0(&qword_329FE8);
    sub_1E88A4();
    sub_67060(&qword_329E20, &qword_329DC0, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_329FE0);
  }
  return result;
}

uint64_t sub_1E9F44()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1E9F80(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  _QWORD *v11;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_329E8C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_64780;
  return sub_1E6394(v9, v10, a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1EA01C()
{
  uint64_t v0;

  return sub_1E54E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1EA034()
{
  double result;

  *(_QWORD *)&result = sub_1EA110().n128_u64[0];
  return result;
}

uint64_t sub_1EA048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_329E08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1EA0A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DynamicTypeSize.isAccessibilitySize.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1EA0D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReviewBrickComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 sub_1EA110()
{
  uint64_t v0;
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v1 = *(__n128 **)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 40);
  result = *(__n128 *)(v0 + 24);
  v1[4] = result;
  v1[5].n128_u8[0] = v2;
  return result;
}

uint64_t sub_1EA128()
{
  uint64_t v0;

  sub_79528(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

unint64_t sub_1EA158()
{
  unint64_t result;

  result = qword_32A048;
  if (!qword_32A048)
  {
    result = swift_getWitnessTable(&unk_26937C, &type metadata for EmptyComponent);
    atomic_store(result, (unint64_t *)&qword_32A048);
  }
  return result;
}

unint64_t sub_1EA19C()
{
  unint64_t result;

  result = qword_32A058;
  if (!qword_32A058)
  {
    result = swift_getWitnessTable(&unk_26695C, &type metadata for RecommendationItemComponent);
    atomic_store(result, (unint64_t *)&qword_32A058);
  }
  return result;
}

uint64_t sub_1EA1E0()
{
  uint64_t v0;

  sub_794D8(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  sub_64FFC(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 41, 7);
}

unint64_t sub_1EA214()
{
  unint64_t result;

  result = qword_32A068;
  if (!qword_32A068)
  {
    result = swift_getWitnessTable(&unk_2683A8, &type metadata for ShelfHeaderComponent);
    atomic_store(result, (unint64_t *)&qword_32A068);
  }
  return result;
}

uint64_t sub_1EA258()
{
  return sub_1EA01C();
}

uint64_t sub_1EA26C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = (_OWORD *)(v4 + 40);
    v9 = a2 + 5;
    v10 = a2[8];
    if (v10)
    {
      v11 = a2[9];
      *(_QWORD *)(v4 + 64) = v10;
      *(_QWORD *)(v4 + 72) = v11;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *v8 = *v9;
      *(_OWORD *)(v4 + 56) = v13;
      *(_QWORD *)(v4 + 72) = a2[9];
    }
    v14 = a3[6];
    v15 = (void *)(v4 + v14);
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ImpressionMetrics(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_5C154(&qword_31F480);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = a3[7];
    v21 = v4 + v20;
    v22 = (uint64_t)a2 + v20;
    v23 = sub_5C154(&qword_322C98);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[8];
    v25 = a3[9];
    v26 = (_QWORD *)(v4 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (_QWORD *)(v4 + v25);
    v30 = (uint64_t *)((char *)a2 + v25);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v31);
  }
  return v4;
}

double sub_1EA414(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double result;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  if (a1[8])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 5);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (char *)a1 + a2[7];
  v8 = sub_5C154(&qword_322C98);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1EA4DC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = a3[6];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_5C154(&qword_31F480);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_5C154(&qword_322C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = a3[8];
  v23 = a3[9];
  v24 = (_QWORD *)(a1 + v22);
  v25 = (_QWORD *)(a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = (_QWORD *)(a1 + v23);
  v28 = (_QWORD *)(a2 + v23);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  return a1;
}

uint64_t sub_1EA650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      sub_65938((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
    goto LABEL_8;
  }
  v7 = *(_OWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v8;
LABEL_8:
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for ImpressionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_13;
  }
  if (v16)
  {
LABEL_13:
    v17 = sub_5C154(&qword_31F480);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_14:
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_5C154(&qword_322C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_1EA854(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 56) = v7;
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_5C154(&qword_322C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  return a1;
}

uint64_t sub_1EA984(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_8;
  }
  if (v15)
  {
LABEL_8:
    v16 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_9:
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_5C154(&qword_322C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_1EAB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1EAB44);
}

uint64_t sub_1EAB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F480);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_5C154(&qword_322C98);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1EABEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1EABF8);
}

uint64_t sub_1EABF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F480);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_5C154(&qword_322C98);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SheetHeaderComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_32A128;
  if (!qword_32A128)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SheetHeaderComponentModel);
  return result;
}

void sub_1EACD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = "(";
  v6[1] = &unk_266718;
  sub_8C25C(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_8C25C(319, (unint64_t *)&unk_32A138, (uint64_t (*)(uint64_t))&type metadata accessor for MAsset, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for MResourceDecoder);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_266730;
      v6[5] = &unk_266730;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_1EADAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v37 = a1;
  v2 = type metadata accessor for SheetHeaderComponentModel(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CoverViewModel.Style(0, v3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_322C98);
  v11 = (void *)MResourceDecoder.wrappedValue.getter(v10);
  static ContentInfoUtilities.assetInfo(storeAsset:)(&v38, v11, v12);

  if (v39)
  {
    sub_5DC98(&v38, (uint64_t)&v40);
    v13 = v42;
    v14 = v43;
    sub_66898(&v40, v42);
    v15 = AssetInfo.coverAspectRatio.getter(v13, v14) * 80.0;
    sub_5E0D8((uint64_t)&v40, (uint64_t)v9);
    *((double *)v9 + 5) = v15;
    *((_QWORD *)v9 + 6) = 0x4054000000000000;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for CoverViewModel.Style.image(_:), v6);
    CoverViewModel.init(style:)(v9);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v40);
  }
  else
  {
    v36 = v7;
    sub_5E09C((uint64_t)&v38, &qword_320940);
    if (qword_31E668 != -1)
      swift_once(&qword_31E668, sub_126DA4);
    v17 = type metadata accessor for Logger(0);
    sub_5240C(v17, (uint64_t)qword_3252C8);
    v18 = sub_1EB824(v1, (uint64_t)v5);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (uint64_t *)swift_slowAlloc(8, -1);
      v35 = v6;
      *(_DWORD *)v21 = 138543362;
      v33 = v21 + 4;
      v22 = MResourceDecoder.wrappedValue.getter(v10);
      v40 = v22;
      v6 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v33, v21 + 12);
      v23 = v34;
      *v34 = v22;
      sub_1EB868((uint64_t)v5);
      _os_log_impl(&dword_0, v19, v20, "Failed to convert store asset to assetInfo: %{public}@", v21, 0xCu);
      v24 = sub_5C154(&qword_32A000);
      swift_arrayDestroy(v23, 1, v24);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      sub_1EB868((uint64_t)v5);
    }

    v25 = (void *)MResourceDecoder.wrappedValue.getter(v10);
    v26 = type metadata accessor for MAudiobook(0);
    v27 = swift_dynamicCastClass(v25, v26);

    v28 = v36;
    if (v27)
    {
      *(_QWORD *)v9 = 0x4054000000000000;
      v29 = (unsigned int *)&enum case for CoverViewModel.Style.placeholderAudiobook(_:);
    }
    else
    {
      v30 = (void *)MResourceDecoder.wrappedValue.getter(v10);
      v31 = objc_msgSend(v30, "pagesAreRTL");

      *(_QWORD *)v9 = 0x4054000000000000;
      v9[8] = v31;
      v29 = (unsigned int *)&enum case for CoverViewModel.Style.placeholderBook(_:);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v9, *v29, v6);
    return CoverViewModel.init(style:)(v9);
  }
}

void sub_1EB140(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v45 = a2;
  v3 = sub_5C154(&qword_322C98);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  __chkstk_darwin(v3);
  v5 = (_QWORD **)((char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_5C154(&qword_32A180);
  v9 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SheetHeaderComponentModel(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v14 + 40;
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  sub_8B354((uint64_t)&v57, (uint64_t)&v54);
  v15 = v55;
  *(_OWORD *)(v14 + 40) = v54;
  *(_OWORD *)(v14 + 56) = v15;
  *((_QWORD *)v14 + 9) = v56;
  sub_5E09C((uint64_t)&v57, (uint64_t *)&unk_326210);
  v51 = v12;
  v16 = (uint64_t)&v14[*(int *)(v12 + 24)];
  v17 = type metadata accessor for ImpressionMetrics(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v52 = v16;
  v18(v16, 1, 1, v17);
  v19 = a1[3];
  v20 = a1[4];
  v50 = a1;
  sub_66898(a1, v19);
  v21 = sub_1EB8A4();
  v46 = v11;
  v22 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SheetHeaderComponentModel.CodingKeys, &type metadata for SheetHeaderComponentModel.CodingKeys, v21, v19, v20);
  if (v22)
  {
    v26 = v52;
    v27 = (uint64_t)v53;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v50);
    sub_5E09C(v27, &qword_320B70);
    sub_5E09C(v26, &qword_31F480);
  }
  else
  {
    v44 = v5;
    v60 = v9;
    v23 = sub_5C154(&qword_320B78);
    LOBYTE(v54) = 0;
    v24 = sub_67060((unint64_t *)&qword_320B90, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    v25 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, v23, &v54, v47, v23, v24);
    v28 = v58;
    *(_OWORD *)v14 = v57;
    *((_OWORD *)v14 + 1) = v28;
    *((_QWORD *)v14 + 4) = v59;
    v29 = sub_5C154(&qword_320B70);
    LOBYTE(v54) = 1;
    v30 = sub_67060(&qword_320B98, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, v29, &v54, v25, v29, v30);
    sub_8B3E0((uint64_t)&v57, (uint64_t)v53, &qword_320B70);
    LOBYTE(v57) = 2;
    v31 = sub_648E0(&qword_320BA0, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, &v57, v25, v17, v31);
    sub_8B3E0((uint64_t)v8, v52, &qword_31F480);
    LOBYTE(v57) = 3;
    v32 = sub_67060((unint64_t *)&qword_322CB8, &qword_322C98, (uint64_t)&protocol conformance descriptor for MResourceDecoder<A>);
    v33 = v44;
    v34 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v44, v49, &v57, v47, v49, v32);
    v35 = v33;
    v36 = v51;
    (*(void (**)(char *, _QWORD *, uint64_t))(v48 + 32))(&v14[*(int *)(v51 + 28)], v35, v34);
    LOBYTE(v57) = 4;
    v37 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v47);
    v38 = (uint64_t *)&v14[*(int *)(v36 + 32)];
    *v38 = v37;
    v38[1] = v39;
    LOBYTE(v57) = 5;
    v40 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v47);
    v42 = v41;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v47);
    v43 = (uint64_t *)&v14[*(int *)(v36 + 36)];
    *v43 = v40;
    v43[1] = v42;
    sub_1EB824((uint64_t)v14, v45);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v50);
    sub_1EB868((uint64_t)v14);
  }
}

uint64_t sub_1EB6CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1EB6F0 + 4 * byte_2666D0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_1EB6F0()
{
  return 0x6575676573;
}

unint64_t sub_1EB704()
{
  return 0xD000000000000011;
}

uint64_t sub_1EB720()
{
  return 0x7365527465737361;
}

uint64_t sub_1EB744()
{
  return 0x656C746974;
}

uint64_t sub_1EB758()
{
  return 0x656C746974627573;
}

uint64_t sub_1EB770@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1EBA8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1EB794(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EB8A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1EB7BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EB8A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1EB7E4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1EB140(a1, a2);
}

uint64_t sub_1EB7F8()
{
  return sub_648E0(&qword_32A178, type metadata accessor for SheetHeaderComponentModel, (uint64_t)&unk_266748);
}

uint64_t sub_1EB824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SheetHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1EB868(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SheetHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1EB8A4()
{
  unint64_t result;

  result = qword_32A188;
  if (!qword_32A188)
  {
    result = swift_getWitnessTable(&unk_26689C, &type metadata for SheetHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A188);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SheetHeaderComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1EB934 + 4 * byte_2666DB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1EB968 + 4 * byte_2666D6[v4]))();
}

uint64_t sub_1EB968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EB970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1EB978);
  return result;
}

uint64_t sub_1EB984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1EB98CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1EB990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EB998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SheetHeaderComponentModel.CodingKeys()
{
  return &type metadata for SheetHeaderComponentModel.CodingKeys;
}

unint64_t sub_1EB9B8()
{
  unint64_t result;

  result = qword_32A190;
  if (!qword_32A190)
  {
    result = swift_getWitnessTable(&unk_266874, &type metadata for SheetHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A190);
  }
  return result;
}

unint64_t sub_1EBA00()
{
  unint64_t result;

  result = qword_32A198;
  if (!qword_32A198)
  {
    result = swift_getWitnessTable(&unk_2667E4, &type metadata for SheetHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A198);
  }
  return result;
}

unint64_t sub_1EBA48()
{
  unint64_t result;

  result = qword_32A1A0;
  if (!qword_32A1A0)
  {
    result = swift_getWitnessTable(&unk_26680C, &type metadata for SheetHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A1A0);
  }
  return result;
}

uint64_t sub_1EBA8C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x800000000026D790;
    if (a2 == 0x800000000026D790)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x7365527465737361 && a2 == 0xED0000656372756FLL)
  {
    v9 = 0xED0000656372756FLL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365527465737361, 0xED0000656372756FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RecommendationItemComponent(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_AAFF4(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for RecommendationItemComponent(uint64_t a1)
{
  sub_794D8(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for RecommendationItemComponent(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_AAFF4(*(id *)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_794D8(v5, v6);
  return a1;
}

uint64_t assignWithTake for RecommendationItemComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_794D8(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommendationItemComponent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendationItemComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendationItemComponent()
{
  return &type metadata for RecommendationItemComponent;
}

uint64_t sub_1EBE7C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1EA19C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_1EBEBC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t KeyPath;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  __n128 v59;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  id v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v68 = a3;
  v67 = a2;
  v61[1] = a1;
  v77 = a4;
  v76 = sub_5C154(&qword_32A1B0);
  v5 = __chkstk_darwin(v76);
  v74 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for DataStackID(0, v5);
  v73 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v72 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_32A1B8);
  __chkstk_darwin(v8);
  v66 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContextAssetInfoAnalytics(0);
  __chkstk_darwin(v10);
  v65 = (uint64_t)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_32A1C0);
  __chkstk_darwin(v12);
  v14 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_32A1C8);
  __chkstk_darwin(v15);
  v17 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_5C154(&qword_32A1D0);
  __chkstk_darwin(v62);
  v19 = (char *)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_5C154(&qword_32A1D8);
  __chkstk_darwin(v63);
  v21 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_5C154(&qword_32A1E0);
  __chkstk_darwin(v64);
  v23 = (char *)v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5C154(&qword_32A1E8);
  __chkstk_darwin(v24);
  v26 = (char *)v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5C154(&qword_32A1F0);
  v70 = *(_QWORD *)(v27 - 8);
  v71 = v27;
  __chkstk_darwin(v27);
  v69 = (char *)v61 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1EC5A8(a1, (uint64_t)v14);
  v30 = static HorizontalAlignment.listRowSeparatorLeading.getter(v29);
  sub_5E1A4((uint64_t)v14, (uint64_t)v17, &qword_32A1C0);
  v31 = (uint64_t *)&v17[*(int *)(v15 + 36)];
  *v31 = v30;
  v31[1] = (uint64_t)sub_1ED5CC;
  v32 = (uint64_t)v26;
  v31[2] = 0;
  sub_5E09C((uint64_t)v14, &qword_32A1C0);
  KeyPath = swift_getKeyPath(&unk_2669C8);
  sub_5E1A4((uint64_t)v17, (uint64_t)v19, &qword_32A1C8);
  v34 = &v19[*(int *)(v62 + 36)];
  *(_QWORD *)v34 = KeyPath;
  v34[8] = 1;
  sub_5E09C((uint64_t)v17, &qword_32A1C8);
  v35 = swift_getKeyPath(&unk_2669F8);
  sub_5E1A4((uint64_t)v19, (uint64_t)v21, &qword_32A1D0);
  v36 = &v21[*(int *)(v63 + 36)];
  *(_QWORD *)v36 = v35;
  v36[8] = 1;
  sub_5E09C((uint64_t)v19, &qword_32A1D0);
  v37 = swift_getKeyPath(&unk_266A28);
  v38 = v65;
  sub_C56E8(v65);
  v39 = (uint64_t *)&v23[*(int *)(v64 + 36)];
  v40 = sub_5C154(&qword_32A1F8);
  sub_AC784(v38, (uint64_t)v39 + *(int *)(v40 + 28));
  *v39 = v37;
  sub_5E1A4((uint64_t)v21, (uint64_t)v23, &qword_32A1D8);
  sub_14DB48(v38);
  sub_5E09C((uint64_t)v21, &qword_32A1D8);
  sub_5E1A4((uint64_t)v23, v32, &qword_32A1E0);
  *(_BYTE *)(v32 + *(int *)(v24 + 36)) = 0;
  v41 = (uint64_t)v23;
  v42 = (uint64_t)v66;
  sub_5E09C(v41, &qword_32A1E0);
  v43 = sub_5C154(&qword_321F20);
  v44 = swift_allocObject(v43, 128, 7);
  *(_OWORD *)(v44 + 16) = xmmword_255F00;
  type metadata accessor for RecommendationItemComponentModel(0);
  LOBYTE(v39) = v68 & 1;
  v45 = v67;
  sub_AAFF4(v67, v68 & 1);
  v46 = (void *)sub_77EB0(v45, (char)v39);
  sub_794D8(v45, (char)v39);
  *(_QWORD *)(v44 + 56) = type metadata accessor for ContentData(0);
  *(_QWORD *)(v44 + 64) = sub_648E0(&qword_326250, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  *(_QWORD *)(v44 + 72) = sub_648E0(&qword_326258, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  sub_668BC((_QWORD *)(v44 + 32));
  ListItemViewModel.contentData(with:)(v46);

  sub_C5834(v42);
  v47 = type metadata accessor for SuggestionData(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v42, 1, v47) == 1)
  {
    sub_5E09C(v42, &qword_32A1B8);
    *(_OWORD *)(v44 + 80) = 0u;
    *(_OWORD *)(v44 + 96) = 0u;
    *(_OWORD *)(v44 + 112) = 0u;
  }
  else
  {
    *(_QWORD *)(v44 + 104) = v47;
    *(_QWORD *)(v44 + 112) = sub_648E0(&qword_32A298, (uint64_t (*)(uint64_t))&type metadata accessor for SuggestionData, (uint64_t)&protocol conformance descriptor for SuggestionData);
    *(_QWORD *)(v44 + 120) = sub_648E0(&qword_32A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for SuggestionData, (uint64_t)&protocol conformance descriptor for SuggestionData);
    v49 = sub_668BC((_QWORD *)(v44 + 80));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v48 + 32))(v49, v42, v47);
  }
  v50 = type metadata accessor for ContentExposureEvent(0);
  v51 = ListItemViewModel.assetID.getter();
  v52 = v72;
  DataStackID.init(stringLiteral:)(v51, v53);
  v54 = sub_1ED6E0();
  v55 = sub_648E0(&qword_328F50, (uint64_t (*)(uint64_t))&type metadata accessor for ContentExposureEvent, (uint64_t)&protocol conformance descriptor for ContentExposureEvent);
  v56 = (uint64_t)v74;
  View.emitAppAnalyticsExposureEvent<A>(_:)(v50, v24, v50, v54, v55);
  v57 = sub_1EDB58();
  v58 = v69;
  View.appAnalyticsData(_:for:)(v44, v52, v76, v57);
  sub_5E09C(v56, &qword_32A1B0);
  v59 = swift_bridgeObjectRelease(v44);
  (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v52, v75, v59);
  sub_5E09C(v32, &qword_32A1E8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v70 + 32))(v77, v58, v71);
}

uint64_t sub_1EC5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  char *v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = a2;
  v3 = type metadata accessor for ListItemViewModel(0);
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  __chkstk_darwin(v3);
  v53 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_32A278);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_32A268);
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_32A258);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_32A248);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v17);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v18 = sub_5C154(&qword_32A2A8);
  sub_1EC988(a1, (uint64_t)&v7[*(int *)(v18 + 44)]);
  KeyPath = swift_getKeyPath(&unk_266A58);
  sub_5E1A4((uint64_t)v7, (uint64_t)v10, &qword_32A278);
  v20 = &v10[*(int *)(v8 + 36)];
  *(_QWORD *)v20 = KeyPath;
  v20[8] = 0;
  sub_5E09C((uint64_t)v7, &qword_32A278);
  LOBYTE(v8) = static Edge.Set.horizontal.getter(v21);
  v22 = EdgeInsets.init(_all:)(35.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_5E1A4((uint64_t)v10, (uint64_t)v13, &qword_32A268);
  v29 = &v13[*(int *)(v11 + 36)];
  *v29 = v8;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = sub_5E09C((uint64_t)v10, &qword_32A268);
  LOBYTE(v11) = static Edge.Set.vertical.getter(v30);
  v31 = EdgeInsets.init(_all:)(20.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_5E1A4((uint64_t)v13, (uint64_t)v16, &qword_32A258);
  v38 = &v16[*(int *)(v14 + 36)];
  *v38 = v11;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  sub_5E09C((uint64_t)v13, &qword_32A258);
  v39 = type metadata accessor for RecommendationItemComponentModel(0);
  v41 = v53;
  v40 = v54;
  v42 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, a1 + *(int *)(v39 + 28), v55);
  v43 = sub_5C154(&qword_32A238);
  v44 = v56;
  v45 = v56 + *(int *)(v43 + 36);
  *(_QWORD *)v45 = swift_getKeyPath(&unk_266A88);
  *(_BYTE *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = swift_getKeyPath(&unk_266AB8);
  *(_BYTE *)(v45 + 24) = 0;
  *(_QWORD *)(v45 + 32) = swift_getKeyPath(&unk_266AE8);
  *(_BYTE *)(v45 + 40) = 0;
  v46 = type metadata accessor for ProfileRestrictions(0);
  v47 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)(v45 + 48) = EnvironmentObject.init()(v46, v47);
  *(_QWORD *)(v45 + 56) = v48;
  *(_QWORD *)(v45 + 64) = swift_getKeyPath(&unk_2669C8);
  *(_BYTE *)(v45 + 72) = 0;
  v49 = type metadata accessor for SwipeActionsViewModifier(0);
  v50 = (_QWORD *)(v45 + *(int *)(v49 + 36));
  *v50 = swift_getKeyPath(&unk_266A28);
  v51 = sub_5C154(&qword_3202D0);
  swift_storeEnumTagMultiPayload(v50, v51, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v45 + *(int *)(v49 + 40), v41, v42);
  return sub_66F14((uint64_t)v16, v44, &qword_32A248);
}

uint64_t sub_1EC988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _OWORD v60[4];
  uint64_t v61;

  v50 = a2;
  v3 = type metadata accessor for ListItemViewModel(0);
  v53 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ListItemView(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v49 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - v10;
  v12 = sub_5C154(&qword_32A2B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_5C154(&qword_32A2B8);
  v15 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_32A2C0);
  __chkstk_darwin(v18);
  v52 = (uint64_t)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v54 = (uint64_t)&v46 - v21;
  v22 = type metadata accessor for RecommendationItemComponentModel(0);
  sub_5E1A4(a1 + *(int *)(v22 + 32), (uint64_t)&v55, &qword_322CB0);
  if (*((_QWORD *)&v55 + 1))
  {
    v60[2] = v57;
    v60[3] = v58;
    v61 = v59;
    v60[0] = v55;
    v60[1] = v56;
    *(_QWORD *)v14 = static VerticalAlignment.top.getter(v56);
    *((_QWORD *)v14 + 1) = 0;
    v14[16] = 1;
    v23 = sub_5C154(&qword_32A2D0);
    v24 = sub_1ECDD8(v60, &v14[*(int *)(v23 + 44)]);
    v25 = static Edge.Set.bottom.getter(v24);
    v48 = v5;
    v46 = v15;
    v26 = v25;
    v27 = EdgeInsets.init(_all:)(2.0);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    sub_5E1A4((uint64_t)v14, (uint64_t)v17, &qword_32A2B0);
    v47 = v22;
    v34 = v51;
    v35 = &v17[*(int *)(v51 + 36)];
    *v35 = v26;
    v5 = v48;
    *((double *)v35 + 1) = v27;
    *((_QWORD *)v35 + 2) = v29;
    *((_QWORD *)v35 + 3) = v31;
    *((_QWORD *)v35 + 4) = v33;
    v35[40] = 0;
    sub_5E09C((uint64_t)v14, &qword_32A2B0);
    v36 = v54;
    sub_66F14((uint64_t)v17, v54, &qword_32A2B8);
    v37 = v34;
    v22 = v47;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v36, 0, 1, v37);
    sub_C46E4(v60);
  }
  else
  {
    sub_5E09C((uint64_t)&v55, &qword_322CB0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v54, 1, 1, v51);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v5, a1 + *(int *)(v22 + 28), v3);
  ListItemView.init(_:contextActionMenuView:)(v5, sub_18A50C, 0);
  v38 = v54;
  v39 = v52;
  sub_5E1A4(v54, v52, &qword_32A2C0);
  v40 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v41 = v49;
  v40(v49, v11, v6);
  v42 = v50;
  sub_5E1A4(v39, v50, &qword_32A2C0);
  v43 = sub_5C154(&qword_32A2C8);
  v40((char *)(v42 + *(int *)(v43 + 48)), v41, v6);
  v44 = *(void (**)(char *, uint64_t))(v7 + 8);
  v44(v11, v6);
  sub_5E09C(v38, &qword_32A2C0);
  v44(v41, v6);
  return sub_5E09C(v39, &qword_32A2C0);
}

uint64_t sub_1ECDD8@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  char v72;
  _BYTE v73[24];
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char v79;

  v69 = a2;
  v65 = sub_5C154(&qword_32A2D8);
  __chkstk_darwin(v65);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_5C154(&qword_32A2E0);
  v68 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v67 = (char *)&v61 - v9;
  v10 = type metadata accessor for SingleThumbnailStyle(0, v8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ListItemThumbnailStyle(0, v12);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ListItemThumbnailViewModel(0, v16);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for ListItemThumbnailView(0, v20);
  v70 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v66 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v61 - v26;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v11 + 104))(v14, enum case for SingleThumbnailStyle.extraSmall(_:), v10, v25);
  static ListItemThumbnailStyle.single(_:_:)(a1 + 4, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  ListItemThumbnailViewModel.init(style:)(v18);
  v64 = v27;
  v28 = ListItemThumbnailView.init(_:)(v22);
  v29 = static HorizontalAlignment.leading.getter(v28);
  sub_1ED280(a1, (uint64_t)&v71);
  v30 = v72;
  v31 = *(_QWORD *)v73;
  v32 = v74;
  v33 = v76;
  v34 = v77;
  v35 = v75;
  v36 = v71;
  v37 = *(_OWORD *)&v73[8];
  v71 = (unint64_t)v29;
  v72 = 1;
  *(_OWORD *)v73 = v36;
  v73[16] = v30;
  v74 = v31;
  v75 = v37;
  LOBYTE(v76) = v32;
  v77 = v35;
  v78 = v33;
  v79 = v34;
  v38 = enum case for DynamicTypeSize.xxxLarge(_:);
  v39 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v4, v38, v39);
  v40 = sub_648E0(&qword_32A2E8, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v4, v4, v39, v40);
  if ((result & 1) != 0)
  {
    v42 = sub_5C154(&qword_32A2F0);
    v43 = sub_67060(&qword_32A2F8, &qword_32A2F0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_67060(&qword_32A300, &qword_32A2D8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v4, v42, v65, v43);
    sub_5E09C((uint64_t)v4, &qword_32A2D8);
    v44 = v74;
    v45 = v75;
    v46 = v76;
    v47 = v77;
    sub_6693C(*(uint64_t *)v73, *(uint64_t *)&v73[8], v73[16]);
    swift_bridgeObjectRelease(v44);
    sub_6693C(v45, *((uint64_t *)&v45 + 1), v46);
    swift_release(*((_QWORD *)&v47 + 1));
    v48 = swift_bridgeObjectRelease(v47);
    v50 = v67;
    v49 = v68;
    v51 = v62;
    (*(void (**)(char *, char *, uint64_t, __n128))(v68 + 32))(v67, v6, v62, v48);
    v52 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
    v53 = v66;
    v54 = v64;
    v55 = v63;
    v52(v66, v64, v63);
    v56 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v56(v6, v50, v51);
    v57 = v69;
    v52(v69, v53, v55);
    v58 = sub_5C154(&qword_32A308);
    v56(&v57[*(int *)(v58 + 48)], v6, v51);
    v59 = *(void (**)(char *, uint64_t))(v49 + 8);
    v59(v50, v51);
    v60 = *(void (**)(char *, uint64_t))(v70 + 8);
    v60(v54, v55);
    v59(v6, v51);
    return ((uint64_t (*)(char *, uint64_t))v60)(v53, v55);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1ED280@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t KeyPath;
  double result;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v3 = a1[3];
  v75 = a1[2];
  v76 = v3;
  v70 = sub_668F8();
  swift_bridgeObjectRetain(v3);
  v4 = Text.init<A>(_:)(&v75, &type metadata for String, v70);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = static Font.caption.getter(v4, v5);
  v12 = Text.font(_:)(v11, v4, v6, v10, v8);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release(v11);
  v19 = v16 & 1;
  sub_6693C(v4, v6, v10);
  swift_bridgeObjectRelease(v8);
  v21 = static Font.Weight.medium.getter(v20);
  v22 = Text.fontWeight(_:)(*(_QWORD *)&v21, 0, v12, v14, v19, v18);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  sub_6693C(v12, v14, v19);
  swift_bridgeObjectRelease(v18);
  v30 = static Color.secondary.getter(v29);
  v31 = Text.foregroundColor(_:)(v30, v22, v24, v28, v26);
  v72 = v32;
  v73 = v31;
  LOBYTE(v10) = v33;
  v74 = v34;
  swift_release(v30);
  v71 = v10 & 1;
  sub_6693C(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  v35 = a1[7];
  v36 = a1[8];
  sub_66898(a1 + 4, v35);
  v75 = AssetInfo.title.getter(v35, v36);
  v76 = v37;
  v38 = Text.init<A>(_:)(&v75, &type metadata for String, v70);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = static Font.caption.getter(v38, v39);
  v46 = Text.font(_:)(v45, v38, v40, v44, v42);
  v48 = v47;
  LOBYTE(v12) = v49;
  v51 = v50;
  swift_release(v45);
  LOBYTE(v45) = v12 & 1;
  sub_6693C(v38, v40, v44);
  swift_bridgeObjectRelease(v42);
  v52 = Text.bold()(v46, v48, v12 & 1, v51);
  v54 = v53;
  v56 = v55;
  v58 = v57 & 1;
  sub_6693C(v46, v48, v45);
  swift_bridgeObjectRelease(v51);
  v60 = static Color.primary.getter(v59);
  v61 = Text.foregroundColor(_:)(v60, v52, v54, v58, v56);
  v63 = v62;
  LOBYTE(v48) = v64;
  v66 = v65;
  swift_release(v60);
  sub_6693C(v52, v54, v58);
  swift_bridgeObjectRelease(v56);
  KeyPath = swift_getKeyPath(&unk_266B18);
  LOBYTE(v75) = v71;
  *(_QWORD *)a2 = v73;
  *(_QWORD *)(a2 + 8) = v72;
  *(_BYTE *)(a2 + 16) = v71;
  *(_QWORD *)(a2 + 24) = v74;
  *(_QWORD *)(a2 + 32) = v61;
  *(_QWORD *)(a2 + 40) = v63;
  *(_BYTE *)(a2 + 48) = v48 & 1;
  *(_QWORD *)(a2 + 56) = v66;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_QWORD *)(a2 + 72) = 2;
  *(_BYTE *)(a2 + 80) = 0;
  sub_7BBCC(v73, v72, v71);
  swift_bridgeObjectRetain(v74);
  sub_7BBCC(v61, v63, v48 & 1);
  swift_bridgeObjectRetain(v66);
  swift_retain(KeyPath);
  sub_6693C(v61, v63, v48 & 1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v66);
  sub_6693C(v73, v72, v75);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v74).n128_u64[0];
  return result;
}

double sub_1ED5CC()
{
  return 35.0;
}

uint64_t sub_1ED5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1EBEBC(a1, *(void **)v2, *(unsigned __int8 *)(v2 + 8), a2);
}

uint64_t sub_1ED5E8(uint64_t a1)
{
  uint64_t v1;
  char v3;
  unint64_t v4;
  id v6;
  char v7;

  v3 = *(_BYTE *)(v1 + 8);
  v6 = *(id *)v1;
  v7 = v3;
  sub_AAFF4(v6, v3);
  v4 = sub_1EA19C();
  return _ComponentBody.init(_:)(&v6, a1, v4);
}

unint64_t sub_1ED648()
{
  unint64_t result;

  result = qword_32A1A8;
  if (!qword_32A1A8)
  {
    result = swift_getWitnessTable(&unk_26690C, &type metadata for RecommendationItemComponent);
    atomic_store(result, (unint64_t *)&qword_32A1A8);
  }
  return result;
}

uint64_t sub_1ED68C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B9EAC, 1);
}

uint64_t sub_1ED69C()
{
  return sub_648E0(&qword_320068, type metadata accessor for RecommendationItemComponentModel, (uint64_t)&unk_25CC18);
}

unint64_t sub_1ED6E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A200;
  if (!qword_32A200)
  {
    v1 = sub_667D0(&qword_32A1E8);
    sub_1ED764();
    sub_67060(&qword_328F40, &qword_328F48, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A200);
  }
  return result;
}

unint64_t sub_1ED764()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A208;
  if (!qword_32A208)
  {
    v1 = sub_667D0(&qword_32A1E0);
    sub_1ED7E8();
    sub_67060(&qword_32A288, &qword_32A1F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A208);
  }
  return result;
}

unint64_t sub_1ED7E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A210;
  if (!qword_32A210)
  {
    v1 = sub_667D0(&qword_32A1D8);
    sub_1ED86C();
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A210);
  }
  return result;
}

unint64_t sub_1ED86C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A218;
  if (!qword_32A218)
  {
    v1 = sub_667D0(&qword_32A1D0);
    sub_1ED8F0();
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A218);
  }
  return result;
}

unint64_t sub_1ED8F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A220;
  if (!qword_32A220)
  {
    v1 = sub_667D0(&qword_32A1C8);
    sub_1ED95C();
    sub_1EDB14();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A220);
  }
  return result;
}

unint64_t sub_1ED95C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A228;
  if (!qword_32A228)
  {
    v1 = sub_667D0(&qword_32A1C0);
    sub_1ED9C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_32A228);
  }
  return result;
}

unint64_t sub_1ED9C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A230;
  if (!qword_32A230)
  {
    v1 = sub_667D0(&qword_32A238);
    sub_D643C(&qword_32A240, &qword_32A248, (void (*)(void))sub_1EDA5C);
    sub_648E0(&qword_3290D0, type metadata accessor for SwipeActionsViewModifier, (uint64_t)&protocol conformance descriptor for SwipeActionsViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A230);
  }
  return result;
}

uint64_t sub_1EDA5C()
{
  return sub_D643C(&qword_32A250, &qword_32A258, (void (*)(void))sub_1EDA78);
}

unint64_t sub_1EDA78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A260;
  if (!qword_32A260)
  {
    v1 = sub_667D0(&qword_32A268);
    sub_67060(&qword_32A270, &qword_32A278, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A260);
  }
  return result;
}

unint64_t sub_1EDB14()
{
  unint64_t result;

  result = qword_32A280;
  if (!qword_32A280)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AlignmentWritingModifier, &type metadata for _AlignmentWritingModifier);
    atomic_store(result, (unint64_t *)&qword_32A280);
  }
  return result;
}

unint64_t sub_1EDB58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_32A290;
  if (!qword_32A290)
  {
    v1 = sub_667D0(&qword_32A1B0);
    v2[0] = sub_667D0(&qword_32A1E8);
    v2[1] = type metadata accessor for ContentExposureEvent(255);
    v2[2] = sub_1ED6E0();
    v2[3] = sub_648E0(&qword_328F50, (uint64_t (*)(uint64_t))&type metadata accessor for ContentExposureEvent, (uint64_t)&protocol conformance descriptor for ContentExposureEvent);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.emitAppAnalyticsExposureEvent<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_32A290);
  }
  return result;
}

uint64_t sub_1EDC4C()
{
  _QWORD v1[2];

  v1[0] = sub_667D0(&qword_32A1B0);
  v1[1] = sub_1EDB58();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
}

void sub_1EDC9C(void *a1)
{
  void *v1;
  unsigned __int8 v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[5];
  uint64_t v11;

  v3 = objc_msgSend(a1, "toBool");
  v4 = objc_msgSend(a1, "context");
  v5 = swift_allocObject(&unk_2F3BE8, 25, 7);
  *(_QWORD *)(v5 + 16) = v1;
  *(_BYTE *)(v5 + 24) = v3;
  v10[4] = sub_1EEAB8;
  v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_156574;
  v10[3] = &unk_2F3C00;
  v6 = _Block_copy(v10);
  v7 = v11;
  v8 = v1;
  swift_release(v7);
  v9 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithNewPromiseInContext:fromExecutor:", v4, v6);

  _Block_release(v6);
  if (!v9)
    __break(1u);
}

uint64_t sub_1EDDA8(void *a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = sub_5C154(&qword_329740);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = a1;
  v12 = a3;
  v13 = static MainActor.shared.getter(v12);
  v14 = swift_allocObject(&unk_2F3C38, 56, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v14 + 32) = v12;
  *(_BYTE *)(v14 + 40) = a4;
  *(_QWORD *)(v14 + 48) = a1;
  v15 = sub_1D979C((uint64_t)v9, (uint64_t)&unk_32A318, v14);
  return swift_release(v15);
}

uint64_t sub_1EDEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + 1464) = a6;
  *(_BYTE *)(v6 + 1372) = a5;
  *(_QWORD *)(v6 + 1416) = a4;
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 1512) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  *(_QWORD *)(v6 + 1560) = v8;
  *(_QWORD *)(v6 + 1608) = v9;
  return swift_task_switch(sub_1EDF1C, v8, v9);
}

uint64_t sub_1EDF1C()
{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t inited;

  v1 = *(_BYTE *)(v0 + 1372);
  v2 = *(void **)(v0 + 1416);
  v3 = swift_allocObject(&unk_2F3C60, 25, 7);
  *(_QWORD *)(v0 + 1616) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 24) = v1;
  v4 = v2;
  swift_retain(v3);
  swift_asyncLet_begin(v0 + 656, 0, &type metadata for Bool, &unk_32A328, v3, v0 + 1371);
  v5 = swift_allocObject(&unk_2F3C88, 25, 7);
  *(_QWORD *)(v0 + 1624) = v5;
  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 24) = v1;
  v6 = v4;
  swift_retain(v5);
  swift_asyncLet_begin(v0 + 16, 0, &type metadata for Bool, &unk_32A338, v5, v0 + 1370);
  v7 = sub_5C154(&qword_32A340);
  inited = swift_initStackObject(v7, v0 + 1336);
  *(_QWORD *)(v0 + 1632) = inited;
  *(_OWORD *)(inited + 16) = xmmword_255F00;
  return swift_asyncLet_get(v0 + 656, v0 + 1371, sub_1EE068, v0 + 1376);
}

uint64_t sub_1EE068()
{
  uint64_t v0;

  return swift_task_switch(sub_1EE07C, *(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1608));
}

uint64_t sub_1EE07C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 1632) + 32) = *(_BYTE *)(v0 + 1371);
  return swift_asyncLet_get(v0 + 16, v0 + 1370, sub_1EE0A0, v0 + 1520);
}

uint64_t sub_1EE0A0()
{
  uint64_t v0;

  return swift_task_switch(sub_1EE0B4, *(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1608));
}

uint64_t sub_1EE0B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::Int v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::OpaquePointer_optional v17;

  v1 = *(_QWORD *)(v0 + 1632);
  v2 = *(_QWORD *)(v0 + 1464);
  *(_BYTE *)(v1 + 33) = *(_BYTE *)(v0 + 1370);
  v3 = sub_DF9BC(1, v1);
  swift_setDeallocating(v1);
  if (v2)
  {
    v4 = *(void **)(v0 + 1464);
    v5 = (void *)objc_opt_self(JSABridge);
    v6 = v4;
    v7 = objc_msgSend(v5, "sharedInstance");
    v8 = sub_5C154(&qword_31EFF0);
    v9 = swift_allocObject(v8, 64, 7);
    *(_OWORD *)(v9 + 16) = xmmword_258070;
    *(_QWORD *)(v9 + 56) = &type metadata for Bool;
    *(_BYTE *)(v9 + 32) = v3 & 1;
    v10._countAndFlagsBits = 0x80000000002744F0;
    v17.value._rawValue = (void *)v9;
    v17.is_nil = -100;
    v10._object = &dword_1C;
    JSABridge.enqueueValueCall(_:arguments:f:l:)((JSValue)v6, v17, v10, v11);
    swift_bridgeObjectRelease(v9);

    v12 = sub_1EE204;
    v13 = v0 + 16;
    v14 = v0 + 1370;
    v15 = v0 + 1424;
  }
  else
  {
    v15 = v0 + 1568;
    v12 = sub_1EE280;
    v13 = v0 + 16;
    v14 = v0 + 1370;
  }
  return swift_asyncLet_finish(v13, v14, v12, v15);
}

uint64_t sub_1EE204()
{
  uint64_t v0;

  return swift_task_switch(sub_1EE218, *(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1608));
}

uint64_t sub_1EE218()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1624));
  return swift_asyncLet_finish(v0 + 656, v0 + 1371, sub_1EE26C, v0 + 1296);
}

uint64_t sub_1EE26C()
{
  uint64_t v0;

  return swift_task_switch(sub_1EEFE8, *(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1608));
}

uint64_t sub_1EE280()
{
  uint64_t v0;

  return swift_task_switch(sub_1EE294, *(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1608));
}

uint64_t sub_1EE294()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1624));
  return swift_asyncLet_finish(v0 + 656, v0 + 1371, sub_1EE2E8, v0 + 1472);
}

uint64_t sub_1EE2E8()
{
  uint64_t v0;

  return swift_task_switch(sub_1EE2FC, *(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1608));
}

uint64_t sub_1EE2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 1624);
  v2 = *(_QWORD *)(v0 + 1616);
  swift_release(*(_QWORD *)(v0 + 1512));
  swift_release_n(v2, 2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1EE348(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc(dword_32A35C);
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_1EE3A0;
  return sub_1EE3FC(a3);
}

uint64_t sub_1EE3A0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1EEFE4, 0, 0);
}

uint64_t sub_1EE3FC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 88) = a1;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 32) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = v5;
  return swift_task_switch(sub_1EE470, v4, v5);
}

uint64_t sub_1EE470()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = objc_msgSend(*(id *)(v0 + 16), "navigationController");
  if (v1
    && (v2 = v1,
        v3 = objc_msgSend(v1, "presentedViewController"),
        *(_QWORD *)(v0 + 56) = v3,
        v2,
        v3))
  {
    v4 = objc_opt_self(BCCardStackViewController);
    v5 = swift_dynamicCastObjCClass(v3, v4);
    if (v5)
    {
      v6 = v5;
      v7 = *(_BYTE *)(v0 + 88);
      v8 = static MainActor.shared.getter(v5);
      *(_QWORD *)(v0 + 64) = v8;
      v9 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 72) = v9;
      *(_QWORD *)(v9 + 16) = v6;
      *(_BYTE *)(v9 + 24) = v7;
      v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 80) = v10;
      *v10 = v0;
      v10[1] = sub_1EE5C0;
      return withCheckedContinuation<A>(isolation:function:_:)(v10, v8, &protocol witness table for MainActor, 0xD000000000000017, 0x80000000002745B0, sub_1EEF58, v9, (char *)&type metadata for () + 8);
    }
    swift_release(*(_QWORD *)(v0 + 32));

  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 32));
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1EE5C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1EE628, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1EE628()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);

  swift_release(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1EE668(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc(dword_32A34C);
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_1EE6C0;
  return sub_1EE734(a3);
}

uint64_t sub_1EE6C0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1EE71C, 0, 0);
}

uint64_t sub_1EE71C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1EE734(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 96) = a1;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 32) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = v5;
  return swift_task_switch(sub_1EE7A8, v4, v5);
}

uint64_t sub_1EE7A8()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = objc_msgSend(*(id *)(v0 + 16), "navigationController");
  *(_QWORD *)(v0 + 56) = v1;
  if (!v1)
  {
    swift_release(*(_QWORD *)(v0 + 32));
LABEL_10:
    v15 = 0;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "viewControllers");
  v4 = sub_1750A4();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v17 = v5;
    else
      v17 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
  }
  *(_QWORD *)&v7 = swift_bridgeObjectRelease(v5).n128_u64[0];
  if (v6 < 2)
  {
    swift_release(*(_QWORD *)(v0 + 32));

    goto LABEL_10;
  }
  v8 = *(unsigned __int8 *)(v0 + 96);

  if (v8 == 1)
  {
    v9 = objc_msgSend(v2, "transitionCoordinator");
    *(_QWORD *)(v0 + 64) = v9;
    if (v9)
    {
      v10 = v9;
      v11 = static MainActor.shared.getter(v9);
      *(_QWORD *)(v0 + 72) = v11;
      v12 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 80) = v12;
      *(_QWORD *)(v12 + 16) = v10;
      v13 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 88) = v13;
      *v13 = v0;
      v13[1] = sub_1EE998;
      return withCheckedContinuation<A>(isolation:function:_:)(v13, v11, &protocol witness table for MainActor, 0xD000000000000016, 0x8000000000274590, sub_1EEF0C, v12, (char *)&type metadata for () + 8);
    }
  }
  v16 = *(_QWORD *)(v0 + 32);

  swift_release(v16);
  v15 = 1;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
}

uint64_t sub_1EE998()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1EEA00, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1EEA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);

  swift_unknownObjectRelease(v1);
  swift_release(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

id sub_1EEA48(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;

  v4 = a3;
  v5 = a1;
  sub_1EDC9C(v4);
  v7 = v6;

  return v7;
}

uint64_t sub_1EEA94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1EEAB8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1EDDA8(a1, a2, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_1EEAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1EEAD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1EEADC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1EEB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc(dword_32A314);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_64780;
  return sub_1EDEA4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1EEB94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *(_BYTE *)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_32A324);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_7BFF8;
  v5[2] = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_32A35C);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_1EE3A0;
  return sub_1EE3FC(v4);
}

uint64_t sub_1EEC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *(_BYTE *)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_32A334);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_64780;
  v5[2] = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_32A34C);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_1EE6C0;
  return sub_1EE734(v4);
}

void sub_1EEC9C(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v6 = sub_5C154(&qword_32A350);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_2F3D00, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1EEF18;
  v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_69F04;
  aBlock[3] = &unk_2F3D18;
  v13 = _Block_copy(aBlock);
  swift_release(v15);
  objc_msgSend(a2, "popAllCardsAnimated:prefersCrossfade:completion:", a3 & 1, 1, v13);
  _Block_release(v13);
}

void sub_1EEDD8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v4 = sub_5C154(&qword_32A350);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_2F3CB0, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1EEF18;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_69564;
  aBlock[3] = &unk_2F3CC8;
  v11 = _Block_copy(aBlock);
  swift_release(v13);
  objc_msgSend(a2, "animateAlongsideTransition:completion:", 0, v11);
  _Block_release(v11);
}

void sub_1EEF0C(uint64_t a1)
{
  uint64_t v1;

  sub_1EEDD8(a1, *(void **)(v1 + 16));
}

uint64_t sub_1EEF18()
{
  uint64_t v0;

  v0 = sub_5C154(&qword_32A350);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

void sub_1EEF58(uint64_t a1)
{
  uint64_t v1;

  sub_1EEC9C(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_1EEF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_5C154(&qword_32A350);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1EEFEC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5DD20(v0, qword_32A360);
  sub_5240C(v0, (uint64_t)qword_32A360);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000000026DEA0, 0x776F646E6957, 0xE600000000000000);
}

void sub_1EF05C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  NSString *v5;
  Class v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  void *v13;
  id v14;
  objc_super v15;

  v2 = v1;
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for Window();
  objc_msgSendSuper2(&v15, "didAddSubview:", a1);
  ObjectType = swift_getObjectType();
  v5 = (NSString *)String._bridgeToObjectiveC()();
  v6 = NSClassFromString(v5);

  if (v6
    && ObjectType == swift_getObjCClassMetadata(v6)
    && *((_BYTE *)v2 + OBJC_IVAR___BSUIWindow_swiftUIContextMenuWorkaroundEnabled) == 1)
  {
    if (qword_31E728 != -1)
      swift_once(&qword_31E728, sub_1EEFEC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_5240C(v7, (uint64_t)qword_32A360);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_0, v9, v10, "Applying workaround for rdar://103969525. Window is becoming non-interactive", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = objc_msgSend(v2, "rootViewController");
    if (v12)
    {
      v13 = v12;
      v14 = objc_msgSend(v12, "view");

      if (v14)
      {
        objc_msgSend(v14, "setUserInteractionEnabled:", 0);

      }
    }
  }
}

uint64_t type metadata accessor for Window()
{
  return objc_opt_self(BSUIWindow);
}

void sub_1EF280(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  NSString *v5;
  Class v6;
  id v7;
  void *v8;
  id v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  id v18;
  objc_super v19;

  v2 = v1;
  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for Window();
  objc_msgSendSuper2(&v19, "willRemoveSubview:", a1);
  ObjectType = swift_getObjectType();
  v5 = (NSString *)String._bridgeToObjectiveC()();
  v6 = NSClassFromString(v5);

  if (v6)
  {
    if (ObjectType == swift_getObjCClassMetadata(v6))
    {
      v7 = objc_msgSend(v2, "rootViewController");
      if (v7)
      {
        v8 = v7;
        v9 = objc_msgSend(v7, "view");

        if (v9)
        {
          v10 = objc_msgSend(v9, "isUserInteractionEnabled");

          if ((v10 & 1) == 0)
          {
            if (qword_31E728 != -1)
              swift_once(&qword_31E728, sub_1EEFEC);
            v11 = type metadata accessor for Logger(0);
            v12 = sub_5240C(v11, (uint64_t)qword_32A360);
            v13 = Logger.logObject.getter(v12);
            v14 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v13, v14))
            {
              v15 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v15 = 0;
              _os_log_impl(&dword_0, v13, v14, "Disabling workaround for rdar://103969525. Window is becoming interactive", v15, 2u);
              swift_slowDealloc(v15, -1, -1);
            }

            v16 = objc_msgSend(v2, "rootViewController");
            if (v16)
            {
              v17 = v16;
              v18 = objc_msgSend(v16, "view");

              if (v18)
              {
                objc_msgSend(v18, "setUserInteractionEnabled:", 1);

              }
            }
          }
        }
      }
    }
  }
}

id Window.__allocating_init(windowScene:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithWindowScene:", a1);

  return v3;
}

id Window.init(windowScene:)(void *a1)
{
  _BYTE *v1;
  id v3;
  objc_super v5;

  v1[OBJC_IVAR___BSUIWindow_swiftUIContextMenuWorkaroundEnabled] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for Window();
  v3 = objc_msgSendSuper2(&v5, "initWithWindowScene:", a1);

  return v3;
}

id Window.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  objc_super v10;

  v4[OBJC_IVAR___BSUIWindow_swiftUIContextMenuWorkaroundEnabled] = 0;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for Window();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id Window.init(coder:)(void *a1)
{
  _BYTE *v1;
  id v3;
  objc_super v5;

  v1[OBJC_IVAR___BSUIWindow_swiftUIContextMenuWorkaroundEnabled] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for Window();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id Window.__allocating_init(contentRect:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithContentRect:", a1, a2, a3, a4);
}

id Window.init(contentRect:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  objc_super v10;

  v4[OBJC_IVAR___BSUIWindow_swiftUIContextMenuWorkaroundEnabled] = 0;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for Window();
  return objc_msgSendSuper2(&v10, "initWithContentRect:", a1, a2, a3, a4);
}

id Window.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Window();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t method lookup function for Window(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Window);
}

uint64_t sub_1EF8B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isCompact.getter();
  *a1 = result & 1;
  return result;
}

uint64_t View.applyPageMargin(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;

  KeyPath = swift_getKeyPath(&unk_266B70);
  v7 = swift_getKeyPath(&unk_266B98);
  v8 = swift_getKeyPath(&unk_266BC8);
  v10 = KeyPath;
  v11 = 0;
  v12 = v7;
  v13 = 0;
  v14 = v8;
  v15 = 0;
  v16 = a1;
  View.modifier<A>(_:)(&v10, a2, &type metadata for PageMarginViewModifier, a3);
  sub_64FFC(KeyPath, 0);
  sub_64FFC(v7, 0);
  return sub_64FFC(v8, 0);
}

uint64_t sub_1EF9B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInModal.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1EF9E0(unsigned __int8 *a1)
{
  return EnvironmentValues.isInModal.setter(*a1);
}

uint64_t sub_1EFA04@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_7F1C8();
  result = EnvironmentValues.subscript.getter(&type metadata for PageMarginConfigurationKey, &type metadata for PageMarginConfigurationKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1EFA50@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_7F1C8();
  result = EnvironmentValues.subscript.getter(&type metadata for PageMarginConfigurationKey, &type metadata for PageMarginConfigurationKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1EFA9C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_7F1C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PageMarginConfigurationKey, &type metadata for PageMarginConfigurationKey, v1);
}

uint64_t sub_1EFAE4(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_7F1C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PageMarginConfigurationKey, &type metadata for PageMarginConfigurationKey, v1);
}

uint64_t sub_1EFB2C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isCompact.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1EFB58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInModal.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1EFB84(unsigned __int8 *a1)
{
  return EnvironmentValues.isInModal.setter(*a1);
}

double sub_1EFBA8()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  double v11;
  char v13;

  v1 = 0.0;
  if (*(_BYTE *)(v0 + 41) == 1)
  {
    v2 = *(_QWORD *)v0;
    v3 = *(_BYTE *)(v0 + 8);
    v4 = *(_QWORD *)(v0 + 16);
    v5 = *(_BYTE *)(v0 + 24);
    v6 = *(_QWORD *)(v0 + 32);
    v7 = *(_BYTE *)(v0 + 40);
    sub_64DD8(*(_QWORD *)v0, v3);
    sub_64DD8(v4, v5);
    sub_64DD8(v6, v7);
    sub_64DD8(v2, v3);
    sub_7864C(v2, v3, &v13);
    sub_64FFC(v2, v3);
    sub_64FFC(v2, v3);
    sub_64FFC(v4, v5);
    sub_64FFC(v6, v7);
    v8 = v13;
    if (v13 != 2)
    {
      sub_64DD8(v2, v3);
      sub_64DD8(v4, v5);
      sub_64DD8(v6, v7);
      sub_64DD8(v4, v5);
      v9 = sub_768E8(v4, v5);
      sub_64FFC(v4, v5);
      sub_64DD8(v6, v7);
      v10 = sub_768E8(v6, v7);
      sub_64FFC(v6, v7);
      sub_64FFC(v2, v3);
      sub_64FFC(v4, v5);
      sub_64FFC(v6, v7);
      if ((v10 & 1) != 0)
      {
        return 32.0;
      }
      else
      {
        v11 = 32.0;
        if ((v8 & 1) != 0)
          v11 = 16.0;
        if ((v9 & 1) != 0)
          return v11;
        else
          return 40.0;
      }
    }
  }
  return v1;
}

uint64_t PageMarginViewModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;

  v36 = a1;
  v39 = a2;
  v35 = sub_5C154(&qword_32A3A8);
  __chkstk_darwin(v35);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5C154(&qword_32A3B0);
  *(_QWORD *)&v5 = __chkstk_darwin(v38).n128_u64[0];
  v37 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v2;
  v8 = *(_BYTE *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 16);
  v10 = *(_BYTE *)(v2 + 24);
  v11 = *(_QWORD *)(v2 + 32);
  v12 = *(_BYTE *)(v2 + 40);
  v13 = *(_BYTE *)(v2 + 41);
  v14 = static Edge.Set.horizontal.getter(v5);
  v40 = v7;
  v41 = v8;
  v33 = v9;
  v34 = v11;
  v42 = v9;
  v43 = v10;
  v44 = v11;
  v45 = v12;
  v46 = v13;
  v15 = sub_1EFBA8();
  v16 = EdgeInsets.init(_all:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = sub_5C154(&qword_32A3B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v4, v36, v23);
  v24 = &v4[*(int *)(v35 + 36)];
  *v24 = v14;
  *((double *)v24 + 1) = v16;
  *((_QWORD *)v24 + 2) = v18;
  *((_QWORD *)v24 + 3) = v20;
  *((_QWORD *)v24 + 4) = v22;
  v24[40] = 0;
  KeyPath = swift_getKeyPath(&unk_266B70);
  if ((v13 & 1) != 0)
  {
    v26 = 2;
  }
  else
  {
    sub_64DD8(v7, v8);
    v27 = v33;
    sub_64DD8(v33, v10);
    v28 = v34;
    sub_64DD8(v34, v12);
    sub_64DD8(v7, v8);
    sub_7864C(v7, v8, &v40);
    sub_64FFC(v7, v8);
    sub_64FFC(v7, v8);
    sub_64FFC(v27, v10);
    sub_64FFC(v28, v12);
    v26 = v40;
  }
  v29 = v37;
  sub_1EFFB4((uint64_t)v4, v37);
  v30 = v29 + *(int *)(v38 + 36);
  *(_QWORD *)v30 = KeyPath;
  *(_BYTE *)(v30 + 8) = v26;
  sub_1EFFFC((uint64_t)v4);
  return sub_1F003C(v29, v39);
}

uint64_t sub_1EFFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_32A3A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1EFFFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_32A3A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1F003C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_32A3B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1F0084(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of PageMarginViewModifier.body(content:)>>, 1);
}

uint64_t destroy for PageMarginViewModifier(uint64_t a1)
{
  sub_64FFC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_64FFC(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return sub_64FFC(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for PageMarginViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_64DD8(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_64DD8(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  sub_64DD8(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t assignWithCopy for PageMarginViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_64DD8(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_64FFC(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_64DD8(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  sub_64FFC(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  sub_64DD8(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  sub_64FFC(v14, v15);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for PageMarginViewModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PageMarginViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_64FFC(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  sub_64FFC(v9, v10);
  v11 = *((_BYTE *)a2 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v11;
  sub_64FFC(v12, v13);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageMarginViewModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PageMarginViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PageMarginViewModifier()
{
  return &type metadata for PageMarginViewModifier;
}

unint64_t sub_1F0344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A3C0;
  if (!qword_32A3C0)
  {
    v1 = sub_667D0(&qword_32A3B0);
    sub_1F03C8();
    sub_67060(&qword_328B20, &qword_328B28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A3C0);
  }
  return result;
}

unint64_t sub_1F03C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A3C8;
  if (!qword_32A3C8)
  {
    v1 = sub_667D0(&qword_32A3A8);
    sub_67060(&qword_32A3D0, &qword_32A3B8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32A3C8);
  }
  return result;
}

uint64_t sub_1F044C(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for PageMarginViewModifier);
  sub_E5E48();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

uint64_t storeEnumTagSinglePayload for BooksPagePreloadStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1F04EC + 4 * byte_266C75[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1F0520 + 4 * asc_266C70[v4]))();
}

uint64_t sub_1F0520(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F0528(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1F0530);
  return result;
}

uint64_t sub_1F053C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1F0544);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1F0548(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F0550(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksPagePreloadStatus()
{
  return &type metadata for BooksPagePreloadStatus;
}

unint64_t sub_1F0570()
{
  unint64_t result;

  result = qword_32A3D8;
  if (!qword_32A3D8)
  {
    result = swift_getWitnessTable(&unk_266CE8, &type metadata for BooksPagePreloadStatus);
    atomic_store(result, &qword_32A3D8);
  }
  return result;
}

void sub_1F05B4(char *a1)
{
  sub_196C84(*a1);
}

void sub_1F05C0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1F0604()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C6269736976, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1F0680()
{
  __asm { BR              X10 }
}

uint64_t sub_1F06B4(uint64_t a1)
{
  String.hash(into:)(a1, 0x656C6269736976, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1F071C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1F075C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C6269736976, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1F07D8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1F09C4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1F0804()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1F082C + 4 * byte_266C86[*v0]))();
}

void sub_1F082C(_QWORD *a1@<X8>)
{
  *a1 = 0x656C6269736976;
  a1[1] = 0xE700000000000000;
}

void sub_1F0848(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616974726170;
  a1[1] = 0xE700000000000000;
}

void sub_1F0864(_QWORD *a1@<X8>)
{
  *a1 = 0x73756F6976657270;
  a1[1] = 0xEF6E776F6853796CLL;
}

uint64_t sub_1F088C(uint64_t a1)
{
  return sub_1F08EC(a1, qword_346048, (uint64_t)"primaryDataJSCall", 17);
}

uint64_t sub_1F08A4(uint64_t a1)
{
  return sub_1F08EC(a1, qword_346060, (uint64_t)"primaryDataParse", 16);
}

uint64_t sub_1F08BC(uint64_t a1)
{
  return sub_1F08EC(a1, qword_346078, (uint64_t)"modelConstruction", 17);
}

uint64_t sub_1F08D4(uint64_t a1)
{
  return sub_1F08EC(a1, qword_346090, (uint64_t)"modelRender", 11);
}

uint64_t sub_1F08EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_5C154(&qword_323800);
  sub_5DD20(v7, a2);
  sub_5240C(v7, (uint64_t)a2);
  return PageRenderField<>.init(intervalWithBaseName:)(a3, a4, 2);
}

uint64_t sub_1F0950()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_5C154(&qword_3237D8);
  sub_5DD20(v0, qword_3460A8);
  sub_5240C(v0, (uint64_t)qword_3460A8);
  v1 = sub_E0540();
  return PageRenderField<>.init(enum:withName:)(&type metadata for BooksPagePreloadStatus, "preloadStatus", 13, 2, &type metadata for BooksPagePreloadStatus, v1);
}

unint64_t sub_1F09C4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6418, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

int *SnapshotImageItem.init(content:size:timeout:objectGraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v17;
  int *result;
  double *v19;
  _QWORD *v20;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  result = (int *)type metadata accessor for SnapshotImageItem(0, a5, a6, v17);
  v19 = (double *)(a7 + result[9]);
  *v19 = a8;
  v19[1] = a9;
  v20 = (_QWORD *)(a7 + result[10]);
  *v20 = a2;
  v20[1] = a3;
  *(_QWORD *)(a7 + result[11]) = a4;
  return result;
}

uint64_t type metadata accessor for SnapshotImageItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotImageItem);
}

uint64_t sub_1F0AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  char *v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  v34 = *(_QWORD *)(a1 + 16);
  v35 = v3;
  v4 = v34;
  v28 = v3;
  v29 = v34;
  v5 = v3;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v34, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 0);
  v32 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v8 = (char *)&v25 - v7;
  v34 = v4;
  v35 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 1);
  v34 = OpaqueTypeMetadata2;
  v35 = OpaqueTypeConformance2;
  v10 = OpaqueTypeConformance2;
  v26 = OpaqueTypeConformance2;
  v11 = swift_getOpaqueTypeMetadata2(0, &v34, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 0);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - v12;
  v34 = OpaqueTypeMetadata2;
  v35 = v10;
  v27 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 1);
  v34 = v11;
  v35 = v27;
  v14 = swift_getOpaqueTypeMetadata2(0, &v34, &opaque type descriptor for <<opaque return type of View.localizer(_:)>>, 0);
  v30 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v25 - v18;
  v20 = *v2;
  View.imageResourceProvider(from:)(*v2, v29, v28);
  View.profileRestrictions(from:)(v20, OpaqueTypeMetadata2, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, OpaqueTypeMetadata2);
  v21 = sub_5C154(&qword_31FE28);
  BaseObjectGraph.inject<A>(_:)(&v34, v21, v21);
  v22 = v27;
  View.localizer(_:)(&v34, v11, v27);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v34);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  v34 = v11;
  v35 = v22;
  swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.localizer(_:)>>, 1);
  sub_12D864((uint64_t)v16, v14, (uint64_t)v19);
  v23 = *(void (**)(char *, uint64_t))(v30 + 8);
  v23(v16, v14);
  sub_12AA38((uint64_t)v19, v14, v33);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v14);
}

uint64_t sub_1F0D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for ContinuousClock(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v3[8] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v3[9] = v7;
  v3[10] = v8;
  return swift_task_switch(sub_1F0DE8, v7, v8);
}

uint64_t sub_1F0DE8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char *v4;

  ContinuousClock.init()();
  v4 = (char *)&dword_32A4A0 + dword_32A4A0;
  v2 = (_QWORD *)swift_task_alloc(unk_32A4A4);
  v1[11] = v2;
  *v2 = v1;
  v2[1] = sub_1F0E74;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))v4)(v1[2], v1[3], 0, 0, 1);
}

uint64_t sub_1F0E74()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 88));
  v4 = v2[6];
  v3 = v2[7];
  v5 = v2[5];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = v2[9];
    v7 = v2[10];
    v8 = sub_1F3330;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 8))(v2[7], v2[5]);
    v6 = v2[9];
    v7 = v2[10];
    v8 = sub_1F0F14;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_1F0F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_release(*(_QWORD *)(v0 + 64));
  v3 = ImageRenderer.uiImage.getter(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t static SnapshotImageItem.transferRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v6 = type metadata accessor for UTType(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SnapshotImageItem(255, a1, a2, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SnapshotImageItem<A>, v10);
  v12 = type metadata accessor for DataRepresentation(0, v10, WitnessTable);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v24 - v18;
  static UTType.jpeg.getter(v17);
  v20 = swift_allocObject(&unk_2F3F10, 32, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  DataRepresentation.init(exportedContentType:exporting:)(v8, &unk_32A3E8, v20, v10, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for DataRepresentation<A>, v12);
  v21 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v21(v19, v15, v12);
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v15, v12);
  v21(a3, v19, v12);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, v12);
}

uint64_t sub_1F10EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_32A474);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1F1150;
  return sub_1F12A4(a1, a2, a3);
}

uint64_t sub_1F1150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    v8 = a1;
    v9 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t sub_1F11B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1F11C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_32A3E4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1F1244;
  v7 = (_QWORD *)swift_task_alloc(dword_32A474);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_1F1150;
  return sub_1F12A4(a1, v5, v4);
}

uint64_t sub_1F1244(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_1F12A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[6] = v4;
  v3[7] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[8] = v5;
  v3[9] = v6;
  return swift_task_switch(sub_1F1318, v5, v6);
}

uint64_t sub_1F1318(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v8;

  v2 = *(_QWORD *)(v1 + 24);
  v8 = *(_OWORD *)(v1 + 32);
  v3 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 80) = v3;
  v4 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 88) = v4;
  *(_OWORD *)(v4 + 16) = v8;
  *(_QWORD *)(v4 + 32) = v2;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 96) = v5;
  v6 = sub_5C154(&qword_321CC8);
  *v5 = v1;
  v5[1] = sub_1F13F4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, v3, &protocol witness table for MainActor, 0xD000000000000016, 0x80000000002746F0, sub_1F2310, v4, v6);
}

uint64_t sub_1F13F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_1F15A0;
  }
  else
  {
    v7 = v2[11];
    swift_release(v2[10]);
    swift_task_dealloc(v7);
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_1F1468;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1F1468()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSData *v3;
  uint64_t v4;
  NSData *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  _BYTE *v17;

  swift_release(*(_QWORD *)(v0 + 56));
  v2 = *(void **)(v0 + 16);
  if (v2)
  {
    v3 = UIImageJPEGRepresentation(*(UIImage **)(v0 + 16), 1.0);
    if (v3)
    {
      v5 = v3;
      v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
    }
    v14 = type metadata accessor for SnapshotImageItem.SnapshotImageItemError(0, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v4);
    WitnessTable = swift_getWitnessTable(&unk_266F00, v14);
    v16 = swift_allocError(v14, WitnessTable, 0, 0);
    *v17 = 0;
    swift_willThrow(v16);

  }
  else
  {
    v10 = type metadata accessor for SnapshotImageItem.SnapshotImageItemError(0, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1);
    v11 = swift_getWitnessTable(&unk_266F00, v10);
    v12 = swift_allocError(v10, v11, 0, 0);
    *v13 = 1;
    swift_willThrow(v12);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1F15A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1F15E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a3;
  v34 = a4;
  v32 = a1;
  v7 = sub_5C154(&qword_32A478);
  v8 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SnapshotImageItem(0, a3, a4, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = sub_5C154(&qword_329740);
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, v7);
  v21 = type metadata accessor for MainActor(0);
  v22 = static MainActor.shared.getter(v21);
  v23 = *(unsigned __int8 *)(v13 + 80);
  v24 = (v23 + 48) & ~v23;
  v25 = *(unsigned __int8 *)(v8 + 80);
  v26 = (v14 + v25 + v24) & ~v25;
  v27 = (char *)swift_allocObject(&unk_2F3F90, v26 + v9, v23 | v25 | 7);
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = &protocol witness table for MainActor;
  v28 = v34;
  *((_QWORD *)v27 + 4) = v33;
  *((_QWORD *)v27 + 5) = v28;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v27[v24], v16, v12);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v27[v26], v10, v31);
  v29 = sub_1D979C((uint64_t)v19, (uint64_t)&unk_32A488, (uint64_t)v27);
  return swift_release(v29);
}

uint64_t sub_1F17E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v8 = type metadata accessor for MainActor(0);
  v7[8] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v7[9] = v9;
  v7[10] = v10;
  return swift_task_switch(sub_1F1854, v9, v10);
}

uint64_t sub_1F1854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;

  v5 = v4[4];
  v6 = type metadata accessor for SnapshotImageItem(0, v4[6], v4[7], a4);
  v4[11] = v6;
  v7 = (double *)(v5 + *(int *)(v6 + 36));
  v8 = *v7;
  v9 = v7[1];
  v10 = *(_QWORD *)(v5 + *(int *)(v6 + 44));
  v11 = dword_32A494;
  swift_retain(v10);
  v12 = (uint64_t **)swift_task_alloc(v11);
  v4[12] = (uint64_t)v12;
  *v12 = v4;
  v12[1] = (uint64_t *)sub_1F18EC;
  return sub_1F277C(v4[4], v10, v4[6], v4[7], v8, v9);
}

uint64_t sub_1F18EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  *(_QWORD *)(*(_QWORD *)v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[9];
    v7 = v4[10];
    v8 = sub_1F1A8C;
  }
  else
  {
    v4[14] = a1;
    v6 = v4[9];
    v7 = v4[10];
    v8 = sub_1F1960;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_1F1960()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)(v0[4] + *(int *)(v0[11] + 40));
  v3 = *v1;
  v2 = v1[1];
  v4 = (_QWORD *)swift_task_alloc(dword_32A49C);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_1F19C8;
  return sub_1F0D50(v3, v2, v0[14]);
}

uint64_t sub_1F19C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_1F1A20, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_1F1A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 24) = v1;
  v3 = sub_5C154(&qword_32A478);
  CheckedContinuation.resume(returning:)(v0 + 24, v3);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1F1A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_5C154(&qword_32A478);
  CheckedContinuation.resume(throwing:)(v0 + 16, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1F1AEC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of static SnapshotImageItem.transferRepresentation>>, 1);
}

BOOL sub_1F1B20(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1F1B30(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int sub_1F1B54(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_1F1B98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1F1B20(*a1, *a2);
}

Swift::Int sub_1F1BA4()
{
  char *v0;

  return sub_1F1B54(*v0);
}

void sub_1F1BAC(uint64_t a1)
{
  char *v1;

  sub_1F1B30(a1, *v1);
}

Swift::Int sub_1F1BB4(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_1F1B30((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_1F1BF0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return static SnapshotImageItem.transferRepresentation.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_1F1BFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_266DC8;
    v4[2] = &unk_266DC8;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1F1C80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t *v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v9 = *v10;
    v11 = (_OWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v13 = (uint64_t *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8);
    v14 = *v13;
    *(_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8) = *v13;
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_1F1D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return swift_release(*(_QWORD *)((((((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)
                                  + 23) & 0xFFFFFFFFFFFFF8));
}

uint64_t sub_1F1DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (uint64_t *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  v12 = *v11;
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *v11;
  swift_retain(v12);
  return a1;
}

uint64_t sub_1F1E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (uint64_t *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = (uint64_t *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  v13 = *v12;
  v14 = *v11;
  *v11 = *v12;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_1F1EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1F1F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (uint64_t *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  *v11 = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release(v12);
  return a1;
}

uint64_t sub_1F1FFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1F2088 + 4 * byte_266D50[v10]))();
  }
}

void sub_1F211C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1F2220()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1F22A4);
}

void sub_1F2228(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1F2230);
  JUMPOUT(0x1F22A4);
}

void sub_1F2280()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1F22A4);
}

void sub_1F2288()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1F22A4);
}

uint64_t sub_1F2290(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1F22A4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1F22A0);
    JUMPOUT(0x1F229CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_1F22BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;

  v4 = type metadata accessor for SnapshotImageItem(255, *a1, a1[1], a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SnapshotImageItem<A>, v4);
  v6 = type metadata accessor for DataRepresentation(255, v4, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for DataRepresentation<A>, v6);
}

uint64_t sub_1F2310(uint64_t a1)
{
  uint64_t *v1;

  return sub_1F15E8(a1, v1[4], v1[2], v1[3]);
}

uint64_t type metadata accessor for SnapshotImageItem.SnapshotImageItemError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotImageItem.SnapshotImageItemError);
}

uint64_t sub_1F2328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  v5 = *((_QWORD *)v4 + 4);
  v6 = type metadata accessor for SnapshotImageItem(0, v5, *((_QWORD *)v4 + 5), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 48) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = sub_5C154(&qword_32A478);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v10 + v13) & ~v13;
  v15 = v14 + *(_QWORD *)(v12 + 64);
  v16 = v8 | v13 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v17 = &v4[v9];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v17, v5);
  swift_release(*(_QWORD *)&v17[*(int *)(v6 + 44)]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(&v4[v14], v11);
  return swift_deallocObject(v4, v15, v16);
}

uint64_t sub_1F2404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for SnapshotImageItem(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(sub_5C154(&qword_32A478) - 8) + 80);
  v13 = v10 + v11 + v12;
  v14 = v4[2];
  v15 = v4[3];
  v16 = (uint64_t)v4 + v10;
  v17 = (uint64_t)v4 + (v13 & ~v12);
  v18 = (_QWORD *)swift_task_alloc(dword_32A484);
  *(_QWORD *)(v5 + 16) = v18;
  *v18 = v5;
  v18[1] = sub_64780;
  return sub_1F17E4(a1, v14, v15, v16, v17, v7, v8);
}

uint64_t sub_1F24D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1F257C, 0, 0);
}

uint64_t sub_1F257C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_648E0(&qword_326D00, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_648E0(qword_32A4A8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1F2694;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1F2694()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_1F2740, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1F2740()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1F277C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  *(_QWORD *)(v6 + 48) = a3;
  *(_QWORD *)(v6 + 56) = a4;
  *(_QWORD *)(v6 + 40) = a2;
  *(double *)(v6 + 24) = a5;
  *(double *)(v6 + 32) = a6;
  *(_QWORD *)(v6 + 16) = a1;
  v9 = *(_QWORD *)(a3 - 8);
  *(_QWORD *)(v6 + 64) = v9;
  *(_QWORD *)(v6 + 72) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SnapshotDependencyView(0, a3, a4, v10);
  *(_QWORD *)(v6 + 80) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 88) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 96) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 104) = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 112) = v14;
  *(_QWORD *)(v6 + 120) = static MainActor.shared.getter(v14);
  v15 = (_QWORD *)swift_task_alloc(dword_31FE04);
  *(_QWORD *)(v6 + 128) = v15;
  *v15 = v6;
  v15[1] = sub_1F2860;
  return BaseObjectGraph.withSyncDependenciesForSwiftUI.getter();
}

uint64_t sub_1F2860(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 112);
  if (v1)
  {
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v8;
    v10 = sub_1F2AB8;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v11;
    v10 = sub_1F2904;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_1F2904()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  id v14;
  double v15;
  double v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(char **)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD *)(v0 + 32);
  v21 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 16);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v9, v8);
  *(_QWORD *)v2 = v1;
  v11 = type metadata accessor for SnapshotDependencyView(0, v8, v7, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(&v2[*(int *)(v11 + 36)], v6, v8);
  WitnessTable = swift_getWitnessTable(&unk_266EB0, v4);
  type metadata accessor for ImageRenderer(0, v4, WitnessTable);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v18, v2, v4);
  v13 = ImageRenderer.__allocating_init(content:)(v18);
  swift_retain(v13);
  ImageRenderer.proposedSize.setter(v19, 0, v20, 0);
  v14 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v14, "scale");
  v16 = v15;

  ImageRenderer.scale.setter(v16);
  ImageRenderer.isOpaque.setter(1);
  swift_release(v21);
  swift_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v18);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t sub_1F2AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for SnapshotDependencyView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotDependencyView);
}

uint64_t sub_1F2B2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1F2BA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_1F2C64(_QWORD *a1, uint64_t a2)
{
  swift_release(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t *sub_1F2CA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_1F2D18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_1F2D88(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_1F2DD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1F2E40(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1F2F14 + 4 * byte_266D5F[(v9 - 1)]))();
}

void sub_1F2F84(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_4;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &dword_0 + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1F3178(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1F31C4 + 4 * byte_266D72[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1F31F8 + 4 * byte_266D6D[v4]))();
}

uint64_t sub_1F31F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F3200(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1F3208);
  return result;
}

uint64_t sub_1F3214(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1F321CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1F3220(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F3228(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F3234(uint64_t a1)
{
  return swift_getWitnessTable(&unk_266E88, a1);
}

uint64_t sub_1F3244(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_2BA0DC, 1);
}

uint64_t sub_1F3278(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v8 = *a1;
  v1 = v8;
  v9 = v2;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v8, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 0);
  v8 = v1;
  v9 = v2;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 1);
  v8 = OpaqueTypeMetadata2;
  v9 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeMetadata2(255, &v8, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 0);
  v8 = OpaqueTypeMetadata2;
  v9 = OpaqueTypeConformance2;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 1);
  v8 = v5;
  v9 = v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.localizer(_:)>>, 1);
}

uint64_t sub_1F3334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 72);
}

uint64_t sub_1F333C(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_266F88;
  v6[1] = &unk_266FA0;
  result = swift_checkMetadataState(319, a1[2]);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, a1[3]);
    if (v4 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      result = swift_checkMetadataState(319, a1[4]);
      if (v5 <= 0x3F)
      {
        v6[4] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 0, 5, v6, a1 + 8);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1F33FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = a3[2];
  v4 = a3[3];
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = a3[4];
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v8 + 64) + v13;
  v15 = ((v14 + ((v10 + ((v7 + 33) & ~v7)) & ~v9)) & ~v13) + *(_QWORD *)(v12 + 64);
  v16 = v9 | v7 | v13;
  v17 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v12 + 80)) & 0x100000;
  v18 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v16 > 7 || v17 != 0 || v15 > 0x18)
  {
    a1 = v18 + ((v16 & 0xF8 ^ 0x1F8) & (v16 + 16));
    swift_retain(v18);
  }
  else
  {
    v31 = v4;
    v33 = ~v9;
    v34 = v11;
    v35 = ~v13;
    v21 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v21;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v22 = a1 & 0xFFFFFFFFFFFFFFF8;
    v23 = a2 & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v25 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    v29 = v5;
    v30 = v10;
    v32 = v14;
    swift_retain(v18);
    swift_retain(v21);
    sub_64DD8(v24, v25);
    *(_QWORD *)(v22 + 24) = v24;
    *(_BYTE *)(v22 + 32) = v25;
    v26 = (v23 + v7 + 33) & ~v7;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 33) & ~v7, v26, v29);
    v27 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 33) & ~v7) + v30) & v33;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v27, (v26 + v30) & v33, v31);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16))((v27 + v32) & v35, (((v26 + v30) & v33) + v32) & v35, v34);
  }
  return a1;
}

uint64_t sub_1F35C4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = (unint64_t)a1;
  swift_release(*a1);
  swift_release(*(_QWORD *)(v3 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  sub_64FFC(*(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32));
  v4 = *(_QWORD *)(a2[2] - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a2[3] - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v8
                                                                                       + *(_QWORD *)(v7 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

uint64_t sub_1F3678(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  swift_retain(v5);
  swift_retain(v6);
  sub_64DD8(v9, v10);
  *(_QWORD *)(v7 + 24) = v9;
  *(_BYTE *)(v7 + 32) = v10;
  v11 = *(_QWORD *)(a3[2] - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 33 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  v14 = (v12 + 33 + v8) & ~v12;
  (*(void (**)(unint64_t, uint64_t))(v11 + 16))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = *(_QWORD *)(a3[3] - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v15 + v17;
  v19 = (v18 + v13) & ~v17;
  v20 = (v18 + v14) & ~v17;
  (*(void (**)(unint64_t, uint64_t))(v16 + 16))(v19, v20);
  v21 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 16))((*(_QWORD *)(v16 + 64) + *(unsigned __int8 *)(v21 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (*(_QWORD *)(v16 + 64) + *(unsigned __int8 *)(v21 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

uint64_t sub_1F3784(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  LOBYTE(v9) = *(_BYTE *)(v11 + 32);
  sub_64DD8(v12, v9);
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v14 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_QWORD *)(v10 + 24) = v12;
  *(_BYTE *)(v10 + 32) = v9;
  sub_64FFC(v13, v14);
  v15 = *(_QWORD *)(a3[2] - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 33 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  v18 = (v16 + 33 + v11) & ~v16;
  (*(void (**)(unint64_t, uint64_t))(v15 + 24))(v17, v18);
  v19 = *(_QWORD *)(a3[3] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = *(_QWORD *)(v15 + 64) + v20;
  v22 = (v21 + v17) & ~v20;
  v23 = (v21 + v18) & ~v20;
  (*(void (**)(unint64_t, uint64_t))(v19 + 24))(v22, v23);
  v24 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 24))((*(_QWORD *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), (*(_QWORD *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t sub_1F38BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_BYTE *)(v5 + 32) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_QWORD *)(v5 + 24) = v6;
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 33 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  v10 = (v8 + 33 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(a3[3] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(v15, v16);
  v17 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))((*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t sub_1F39A8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v12 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_BYTE *)(v8 + 32) = v10;
  sub_64FFC(v11, v12);
  v13 = *(_QWORD *)(a3[2] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 33 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v14;
  v16 = (v14 + 33 + v9) & ~v14;
  (*(void (**)(unint64_t, uint64_t))(v13 + 40))(v15, v16);
  v17 = *(_QWORD *)(a3[3] - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = *(_QWORD *)(v13 + 64) + v18;
  v20 = (v19 + v15) & ~v18;
  v21 = (v19 + v16) & ~v18;
  (*(void (**)(unint64_t, uint64_t))(v17 + 40))(v20, v21);
  v22 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 40))((*(_QWORD *)(v17 + 64) + *(unsigned __int8 *)(v22 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (*(_QWORD *)(v17 + 64) + *(unsigned __int8 *)(v22 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

uint64_t sub_1F3ABC(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = *(_DWORD *)(v7 + 84);
  v12 = a3[4];
  v13 = *(_QWORD *)(v12 - 8);
  if (v11 <= *(_DWORD *)(v13 + 84))
    v14 = *(_DWORD *)(v13 + 84);
  else
    v14 = v11;
  if (v14 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = v14;
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = *(_QWORD *)(v7 + 64);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(unsigned __int8 *)(v13 + 80);
  v20 = *(_QWORD *)(v9 + 64) + v19;
  v21 = a2 - v15;
  if (a2 <= v15)
    goto LABEL_30;
  v22 = ((v20 + ((v17 + v18 + ((v16 + 33) & ~v16)) & ~v18)) & ~v19) + *(_QWORD *)(v13 + 64);
  v23 = 8 * v22;
  if (v22 <= 3)
  {
    v26 = ((v21 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v26))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v26 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v26 < 2)
    {
LABEL_30:
      if ((v14 & 0x80000000) != 0)
      {
        v30 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v16 + 33) & ~v16;
        if (v8 == v15)
        {
          return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v7 + 48))(v30, *(unsigned int *)(v7 + 84), v6);
        }
        else
        {
          v31 = (v30 + v17 + v18) & ~v18;
          if ((_DWORD)v10 == v15)
            return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v31, v10, v5);
          else
            return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v13 + 48))((v20 + v31) & ~v19, *(unsigned int *)(v13 + 84), v12);
        }
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 8);
        if (v29 >= 0xFFFFFFFF)
          LODWORD(v29) = -1;
        return (v29 + 1);
      }
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_30;
LABEL_21:
  v27 = (v24 - 1) << v23;
  if (v22 > 3)
    v27 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v28 = ((v20 + ((v17 + v18 + ((v16 + 33) & ~(_DWORD)v16)) & ~(_DWORD)v18)) & ~(_DWORD)v19) + *(_DWORD *)(v13 + 64);
    else
      v28 = 4;
    __asm { BR              X11 }
  }
  return v15 + v27 + 1;
}

void sub_1F3CC0(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (v7 <= *(_DWORD *)(v8 + 84))
    v9 = *(_DWORD *)(v8 + 84);
  else
    v9 = v7;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = ((*(_QWORD *)(v6 + 64)
        + *(unsigned __int8 *)(v8 + 80)
        + ((*(_QWORD *)(v5 + 64)
          + *(unsigned __int8 *)(v6 + 80)
          + ((*(unsigned __int8 *)(v5 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 > v10)
  {
    if (v11 <= 3)
    {
      v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v14))
      {
        v12 = &dword_4;
      }
      else
      {
        v12 = v14 > 1;
        if (v14 >= 0x100)
          v12 = 2;
      }
    }
    else
    {
      v12 = &dword_0 + 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X24 }
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarLayoutView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for CardAuxiliaryNavigationBarLayoutView);
}

uint64_t sub_1F3F74(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[2];
  v4[0] = a2[1];
  v4[1] = v2;
  v4[2] = a2[3];
  return swift_getOpaqueTypeConformance2(v4, &unk_2BA1A4, 1);
}

uint64_t sub_1F3FB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t WitnessTable;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v34 = a2;
  v3 = sub_667D0(&qword_32A630);
  v4 = a1[2];
  v5 = sub_667D0(&qword_32A638);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  v7 = a1[3];
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _PaddingLayout);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _OpacityEffect);
  v10 = sub_667D0(&qword_32A640);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  v12 = type metadata accessor for ModifiedContent(255, v11, v5);
  v13 = a1[4];
  v14 = type metadata accessor for ModifiedContent(255, v13, v5);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v6, v12, v14, 0, 0);
  v31 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v16 = sub_67060(&qword_32A648, &qword_32A630, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  v17 = type metadata accessor for _VariadicView.Tree(0, v3, v31, v16);
  v32 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v31 - v21;
  v23 = a1[5];
  v24 = a1[6];
  v25 = a1[7];
  v26 = (_QWORD *)swift_allocObject(&unk_2F4198, 64, 7);
  v26[2] = v4;
  v26[3] = v7;
  v26[4] = v13;
  v26[5] = v23;
  v26[6] = v24;
  v26[7] = v25;
  v36 = v4;
  v37 = v7;
  v38 = v13;
  v39 = v23;
  v40 = v24;
  v41 = v25;
  v42 = v33;
  sub_1F425C((uint64_t)sub_1F4D4C, (uint64_t)v35, v4, v7, v13, (uint64_t)v19);
  swift_release(v26);
  v27 = sub_67060(&qword_32A650, &qword_32A630, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v31);
  v43 = v27;
  v44 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v17);
  sub_12D864((uint64_t)v19, v17, (uint64_t)v22);
  v29 = *(void (**)(char *, uint64_t))(v32 + 8);
  v29(v19, v17);
  sub_12AA38((uint64_t)v22, v17, v34);
  return ((uint64_t (*)(char *, uint64_t))v29)(v22, v17);
}

uint64_t sub_1F425C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata3;
  uint64_t v21;
  unint64_t v22;
  uint64_t WitnessTable;

  v12 = sub_667D0(&qword_32A638);
  v13 = type metadata accessor for ModifiedContent(255, a3, v12);
  v14 = type metadata accessor for ModifiedContent(255, a4, &type metadata for _PaddingLayout);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _OpacityEffect);
  v16 = sub_667D0(&qword_32A640);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = type metadata accessor for ModifiedContent(255, v17, v12);
  v19 = type metadata accessor for ModifiedContent(255, a5, v12);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v13, v18, v19, 0, 0);
  v21 = type metadata accessor for TupleView(0, TupleTypeMetadata3);
  v22 = sub_1F51E4();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  return sub_1F439C(a1, a2, (uint64_t)&type metadata for CardAuxiliaryNavigationBarLayout, v21, v22, WitnessTable, a6);
}

uint64_t sub_1F439C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t WitnessTable;
  _QWORD v26[2];
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = v7;
  v26[0] = a6;
  v26[1] = a7;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = __chkstk_darwin(a1);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for _LayoutRoot(0, v18, v19, v15);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, v8, a3, v21);
  _LayoutRoot.init(_:)(v17, a3, a5);
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = v26[0];
  v32 = a1;
  v33 = a2;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _LayoutRoot<A>, v20);
  return _VariadicView.Tree.init(_:content:)(v23, sub_1F5300, v27, v20, a4, WitnessTable);
}

uint64_t sub_1F44CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, double (*a5)(_QWORD, _QWORD)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  double (*v40)(_QWORD, _QWORD);
  double v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  __n128 v48;
  double v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t (*v82)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t WitnessTable;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double (*v102)(_QWORD, _QWORD);
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[15];
  uint64_t v119;
  char *v120;
  uint64_t v121;
  double (*v122)(_QWORD, _QWORD);
  uint64_t v123;
  uint64_t v124;

  v114 = a7;
  v84 = a6;
  v102 = a5;
  v110 = a8;
  v13 = sub_667D0(&qword_32A638);
  v98 = a4;
  v108 = type metadata accessor for ModifiedContent(0, a4, v13);
  v109 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v106 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v107 = (uint64_t)&v84 - v16;
  v17 = a3;
  v85 = a3;
  v18 = type metadata accessor for ModifiedContent(0, a3, &type metadata for _PaddingLayout);
  v95 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v86 = (char *)&v84 - v19;
  v20 = type metadata accessor for ModifiedContent(0, v18, &type metadata for _OpacityEffect);
  v21 = *(_QWORD *)(v20 - 8);
  v90 = v20;
  v101 = v21;
  __chkstk_darwin(v20);
  v91 = (char *)&v84 - v22;
  v23 = sub_667D0(&qword_32A640);
  v24 = type metadata accessor for ModifiedContent(0, v20, v23);
  v103 = *(_QWORD *)(v24 - 8);
  v99 = v24;
  __chkstk_darwin(v24);
  v94 = (char *)&v84 - v25;
  v112 = type metadata accessor for ModifiedContent(0, v26, v13);
  v104 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v105 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v96 = (char *)&v84 - v29;
  __chkstk_darwin(v30);
  v100 = (uint64_t)&v84 - v31;
  v32 = a2;
  v33 = type metadata accessor for ModifiedContent(0, a2, v13);
  v92 = *(_QWORD *)(v33 - 8);
  v34 = v92;
  __chkstk_darwin(v33);
  v36 = (char *)&v84 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&v84 - v38;
  v113 = (char *)&v84 - v38;
  v119 = v32;
  v120 = v17;
  v40 = v102;
  v121 = a4;
  v122 = v102;
  v123 = a6;
  v124 = v114;
  v87 = type metadata accessor for CardAuxiliaryNavigationBarLayoutView(0, (uint64_t)&v119);
  LOBYTE(v119) = 0;
  v89 = sub_1F5190();
  View.layoutValue<A>(key:value:)(&type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, &v119, v32, &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, v40, v89);
  v88 = sub_67060(&qword_32A658, &qword_32A638, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v118[13] = v40;
  v118[14] = v88;
  v93 = v33;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  v111 = v36;
  sub_12D864((uint64_t)v36, v33, (uint64_t)v39);
  v102 = *(double (**)(_QWORD, _QWORD))(v34 + 8);
  v41 = v102(v36, v33);
  v42 = static Edge.Set.horizontal.getter(v41);
  v43 = v86;
  v44 = v84;
  View.padding(_:_:)(v42, 0x4020000000000000, 0, v85, v84);
  v45 = *(char **)(a1 + 8);
  v46 = *(_BYTE *)(a1 + 16);
  v119 = *(_QWORD *)a1;
  v120 = v45;
  LOBYTE(v121) = v46;
  v47 = sub_5C154(&qword_3249B8);
  Binding.wrappedValue.getter(v47, v48);
  if (LOBYTE(v118[0]))
    v49 = 1.0;
  else
    v49 = 0.0;
  v118[11] = v44;
  v118[12] = &protocol witness table for _PaddingLayout;
  v50 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v51 = v91;
  View.opacity(_:)(v18, v50, v49);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v43, v18);
  v53 = static Animation.easeInOut(duration:)(v52, 0.15);
  v54 = *(char **)(a1 + 8);
  v55 = *(_BYTE *)(a1 + 16);
  v119 = *(_QWORD *)a1;
  v120 = v54;
  LOBYTE(v121) = v55;
  Binding.wrappedValue.getter(v47, v56);
  LOBYTE(v119) = v118[0];
  v118[9] = v50;
  v118[10] = &protocol witness table for _OpacityEffect;
  v57 = v90;
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v90);
  v59 = v94;
  View.animation<A>(_:value:)(v53, &v119, v57, &type metadata for Bool, v58, &protocol witness table for Bool);
  swift_release(v53);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v51, v57);
  v60 = sub_67060(&qword_32A660, &qword_32A640, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v118[7] = v58;
  v118[8] = v60;
  v61 = v99;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v99);
  LOBYTE(v119) = 1;
  v63 = (uint64_t)v96;
  v64 = v89;
  View.layoutValue<A>(key:value:)(&type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, &v119, v61, &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, v62, v89);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v59, v61);
  v65 = v88;
  v118[5] = v62;
  v118[6] = v88;
  v66 = v112;
  v101 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v112);
  v67 = v100;
  sub_12D864(v63, v66, v100);
  v68 = v104;
  v103 = *(_QWORD *)(v104 + 8);
  ((void (*)(uint64_t, uint64_t))v103)(v63, v66);
  LOBYTE(v119) = 2;
  v69 = (uint64_t)v106;
  v70 = v114;
  View.layoutValue<A>(key:value:)(&type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, &v119, v98, &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, v114, v64);
  v118[3] = v70;
  v118[4] = v65;
  v71 = v108;
  v72 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v108);
  v73 = v107;
  sub_12D864(v69, v71, v107);
  v74 = v109;
  v75 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
  v75(v69, v71);
  v76 = (uint64_t)v111;
  v77 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v111, v113, v93);
  v119 = v76;
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  v79 = v105;
  v80 = v112;
  v78(v105, v67, v112);
  v120 = v79;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v69, v73, v71);
  v121 = v69;
  v118[0] = v77;
  v118[1] = v80;
  v118[2] = v71;
  v115 = WitnessTable;
  v116 = v101;
  v117 = v72;
  sub_21D5C4(&v119, 3uLL, (uint64_t)v118);
  v75(v73, v71);
  v81 = (void (*)(char *, uint64_t))v103;
  ((void (*)(uint64_t, uint64_t))v103)(v67, v80);
  v82 = (uint64_t (*)(char *, uint64_t))v102;
  v102(v113, v77);
  v75(v69, v71);
  v81(v79, v80);
  return v82(v111, v77);
}

uint64_t sub_1F4D4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1F44CC(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(double (**)(_QWORD, _QWORD))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), a1);
}

uint64_t sub_1F4D60@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(unsigned __int8 *, _QWORD);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  char *v34;
  uint64_t v35;
  char *v36;
  unsigned __int8 v37[32];

  v32 = a1;
  v31 = a2;
  v3 = type metadata accessor for LayoutSubview(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v36 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_32A680);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LayoutSubviews(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_32A688);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v10;
  v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v33(v12, v2, v9, v14);
  v17 = sub_1F5FD4(&qword_32A690, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  v34 = v12;
  dispatch thunk of Sequence.makeIterator()(v9, v17);
  v18 = &v16[*(int *)(v13 + 36)];
  v19 = sub_1F5FD4(&qword_32A698, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  v20 = *(_QWORD *)v18;
  dispatch thunk of Collection.endIndex.getter(v37, v9, v19);
  if (v20 == *(_QWORD *)v37)
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_3:
    v21(v8, 1, 1, v3);
  }
  else
  {
    v32 = v32;
    while (1)
    {
      v26 = (void (*)(unsigned __int8 *, _QWORD))dispatch thunk of Collection.subscript.read(v37, v18, v9, v19);
      (*(void (**)(char *))(v4 + 16))(v8);
      v26(v37, 0);
      v27 = v34;
      ((void (*)(char *, char *, uint64_t))v33)(v34, v16, v9);
      dispatch thunk of Collection.formIndex(after:)(v18, v9, v19);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v9);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v21(v8, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
        break;
      v28 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v28(v36, v8, v3);
      v29 = sub_1F5190();
      LayoutSubview.subscript.getter(v37, &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey, v29);
      if (v37[0] != 3 && v37[0] == v32)
      {
        sub_5E09C((uint64_t)v16, &qword_32A688);
        v30 = v31;
        v28(v31, v36, v3);
        v22 = v30;
        v23 = 0;
        return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v22, v23, 1, v3);
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v36, v3);
      v25 = *(_QWORD *)v18;
      dispatch thunk of Collection.endIndex.getter(v37, v9, v19);
      if (v25 == *(_QWORD *)v37)
        goto LABEL_3;
    }
  }
  sub_5E09C((uint64_t)v16, &qword_32A688);
  v22 = v31;
  v23 = 1;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v22, v23, 1, v3);
}

double sub_1F50CC(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 10.0;
  return result;
}

uint64_t sub_1F50EC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return sub_1F5B08(a1, a2, a3, a4);
}

uint64_t sub_1F50F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1F5150(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1F5124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1F5150(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1F5150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

unint64_t sub_1F5190()
{
  unint64_t result;

  result = qword_32A668;
  if (!qword_32A668)
  {
    result = swift_getWitnessTable(&unk_26712C, &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey);
    atomic_store(result, (unint64_t *)&qword_32A668);
  }
  return result;
}

uint64_t sub_1F51D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

unint64_t sub_1F51E4()
{
  unint64_t result;

  result = qword_32A670;
  if (!qword_32A670)
  {
    result = swift_getWitnessTable(&unk_2670B4, &type metadata for CardAuxiliaryNavigationBarLayout);
    atomic_store(result, (unint64_t *)&qword_32A670);
  }
  return result;
}

uint64_t sub_1F5228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void (*v12)(__n128);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v15 - v10;
  v12(v9);
  sub_12D864((uint64_t)v7, a2, (uint64_t)v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, a2);
  sub_12AA38((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_1F5300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1F5228(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for CardAuxiliaryNavigationBarLayout.LayoutPositionKey()
{
  return &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPositionKey;
}

ValueMetadata *type metadata accessor for CardAuxiliaryNavigationBarLayout()
{
  return &type metadata for CardAuxiliaryNavigationBarLayout;
}

uint64_t sub_1F5330(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata3;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = sub_667D0(&qword_32A630);
  v5 = sub_667D0(&qword_32A638);
  v6 = type metadata accessor for ModifiedContent(255, v1, v5);
  v7 = type metadata accessor for ModifiedContent(255, v2, &type metadata for _PaddingLayout);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _OpacityEffect);
  v9 = sub_667D0(&qword_32A640);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, v5);
  v12 = type metadata accessor for ModifiedContent(255, v3, v5);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v6, v11, v12, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v15 = sub_67060(&qword_32A648, &qword_32A630, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  v16 = type metadata accessor for _VariadicView.Tree(255, v4, v14, v15);
  sub_67060(&qword_32A650, &qword_32A630, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v16);
}

unint64_t sub_1F54B0()
{
  unint64_t result;

  result = qword_32A678;
  if (!qword_32A678)
  {
    result = swift_getWitnessTable(&unk_267064, &type metadata for CardAuxiliaryNavigationBarLayout);
    atomic_store(result, (unint64_t *)&qword_32A678);
  }
  return result;
}

uint64_t sub_1F54F4(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  double v26;
  uint64_t v27;
  char v28;
  char v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char v36;
  char v37;
  double v38;
  double MidY;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  CGFloat MidX;
  double v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  double v57;
  double v58;
  double v59;
  CGFloat v60;
  double v61;
  double v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat MaxX;
  double v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  CGFloat v78;
  double v79;
  double v80;
  CGFloat v81;
  double v82;
  CGFloat v83;
  double v84;
  double v85;
  double v87;
  double v88;
  CGFloat Width;
  double v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  double v98;
  CGFloat v99;
  double v100;
  double v101;
  double v102;
  CGFloat v104;
  CGFloat v105;
  CGFloat v106;
  double v107;
  double v108;
  CGFloat v109;
  double v110;
  double v111;
  double v112;
  double MinX;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;

  v13 = sub_5C154(&qword_32A680);
  __chkstk_darwin(v13);
  v15 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v104 - v17;
  sub_1F5F8C(a6, (uint64_t)&v104 - v17);
  v19 = type metadata accessor for LayoutSubview(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19) == 1)
  {
    v22 = sub_5E09C((uint64_t)v18, &qword_32A680);
    v110 = 0.0;
    v111 = 0.0;
  }
  else
  {
    v23 = ((uint64_t (*)(void))static ProposedViewSize.unspecified.getter)();
    v115 = v24 & 1;
    v114 = v25 & 1;
    v110 = LayoutSubview.sizeThatFits(_:)(v23);
    v111 = v26;
    v22 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  }
  v27 = static ProposedViewSize.unspecified.getter(v22);
  v123 = v28 & 1;
  v122 = v29 & 1;
  v30 = LayoutSubview.sizeThatFits(_:)(v27);
  v32 = v31;
  sub_1F5F8C(a7, (uint64_t)v15);
  v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v21)(v15, 1, v19);
  v112 = v30;
  v108 = v32;
  if ((_DWORD)v33 == 1)
  {
    sub_5E09C((uint64_t)v15, &qword_32A680);
    v107 = 0.0;
    v34 = 0.0;
  }
  else
  {
    v35 = static ProposedViewSize.unspecified.getter(v33);
    v117 = v36 & 1;
    v116 = v37 & 1;
    v34 = LayoutSubview.sizeThatFits(_:)(v35);
    v107 = v38;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
  }
  v124.origin.x = a1;
  v124.origin.y = a2;
  v124.size.width = a3;
  v124.size.height = a4;
  MinX = CGRectGetMinX(v124);
  v125.origin.x = a1;
  v125.origin.y = a2;
  v125.size.width = a3;
  v125.size.height = a4;
  MidY = CGRectGetMidY(v125);
  v126.origin.x = a1;
  v126.origin.y = a2;
  v126.size.width = a3;
  v126.size.height = a4;
  v40 = CGRectGetMinX(v126);
  v127.origin.x = a1;
  v127.origin.y = a2;
  v127.size.width = a3;
  v127.size.height = a4;
  v41 = v40 + CGRectGetWidth(v127) - v34;
  v128.origin.x = a1;
  v128.origin.y = a2;
  v128.size.width = a3;
  v128.size.height = a4;
  v42 = CGRectGetMidY(v128);
  v110 = CGRectMakeWithOriginSize(MinX, MidY, v110, v111);
  v105 = v43;
  v104 = v44;
  v109 = v45;
  v111 = CGRectMakeWithOriginSize(v41, v42, v34, v107);
  v47 = v46;
  v49 = v48;
  MinX = v50;
  v129.origin.x = a1;
  v129.origin.y = a2;
  v129.size.width = a3;
  v129.size.height = a4;
  MidX = CGRectGetMidX(v129);
  v52 = v112;
  v53 = MidX + v112 * -0.5;
  v130.origin.x = a1;
  v54 = v49;
  v55 = v47;
  v130.origin.y = a2;
  v56 = v111;
  v130.size.width = a3;
  v130.size.height = a4;
  v57 = CGRectGetMidY(v130);
  v58 = CGRectMakeWithOriginSize(v53, v57, v52, v108);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  v131.origin.x = v56;
  v131.origin.y = v55;
  v131.size.width = v54;
  v131.size.height = MinX;
  v65 = CGRectGetMinX(v131);
  v132.origin.x = v58;
  v132.origin.y = v60;
  v132.size.width = v62;
  v132.size.height = v64;
  MaxX = CGRectGetMaxX(v132);
  v107 = v55;
  v106 = v54;
  v112 = v64;
  if (v65 < MaxX)
  {
    v133.origin.x = v58;
    v133.origin.y = v60;
    v133.size.width = v62;
    v133.size.height = v64;
    v67 = CGRectGetMaxX(v133);
    v134.origin.x = v56;
    v134.origin.y = v55;
    v134.size.width = v54;
    v134.size.height = MinX;
    v58 = v58 - (v67 - CGRectGetMinX(v134));
  }
  v69 = v109;
  v68 = v110;
  v70 = v104;
  v71 = v105;
  v135.origin.x = v110;
  v135.origin.y = v105;
  v135.size.width = v104;
  v135.size.height = v109;
  v72 = CGRectGetMaxX(v135);
  v136.origin.x = v58;
  v136.origin.y = v60;
  v136.size.width = v62;
  v136.size.height = v112;
  if (CGRectGetMinX(v136) < v72)
  {
    v137.origin.x = v68;
    v137.origin.y = v71;
    v137.size.width = v70;
    v137.size.height = v69;
    v73 = CGRectGetMaxX(v137);
    v138.origin.x = v58;
    v138.origin.y = v60;
    v138.size.width = v62;
    v138.size.height = v112;
    v58 = v58 + v73 - CGRectGetMinX(v138);
  }
  v139.origin.x = v68;
  v139.origin.y = v71;
  v139.size.width = v70;
  v139.size.height = v69;
  v74 = CGRectGetMaxX(v139);
  v140.origin.x = v58;
  v140.origin.y = v60;
  v140.size.width = v62;
  v75 = v112;
  v140.size.height = v112;
  v76 = v74 - CGRectGetMinX(v140);
  v77 = v75;
  v78 = v70;
  if (v76 > 0.0)
    v79 = v76;
  else
    v79 = 0.0;
  v80 = v58;
  v108 = v60;
  v81 = v60;
  v82 = v62;
  v83 = v77;
  v84 = CGRectGetMaxX(*(CGRect *)(&v77 - 3));
  v141.origin.x = v111;
  v141.origin.y = v107;
  v141.size.width = v106;
  v141.size.height = MinX;
  v85 = v84 - CGRectGetMinX(v141);
  if (v85 <= 0.0)
    v85 = 0.0;
  if ((*(_QWORD *)&v79 & 0x7FFFFFFFFFFFFFFFLL) != 0 || (*(_QWORD *)&v85 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v87 = v62 - (v79 + v85);
    if (v87 > 0.0)
      v62 = v87;
    else
      v62 = 0.0;
    v142.size.height = v109;
    v142.origin.x = v110;
    v142.origin.y = v71;
    v142.size.width = v78;
    v58 = CGRectGetMaxX(v142);
  }
  v143.origin.x = v58;
  v88 = v108;
  v143.origin.y = v108;
  v143.size.width = v62;
  v143.size.height = v83;
  Width = CGRectGetWidth(v143);
  v144.origin.x = v58;
  v144.origin.y = v88;
  v144.size.width = v62;
  v144.size.height = v83;
  CGRectGetHeight(v144);
  v121 = 0;
  v120 = 0;
  v90 = LayoutSubview.sizeThatFits(_:)(*(_QWORD *)&Width);
  v92 = v91;
  v145.origin.x = v58;
  v145.origin.y = v88;
  v145.size.width = v62;
  v145.size.height = v83;
  if (v90 != CGRectGetWidth(v145))
  {
    v146.origin.x = v111;
    v146.origin.y = v107;
    v146.size.width = v106;
    v146.size.height = MinX;
    v93 = CGRectGetMinX(v146);
    v95 = v109;
    v94 = v110;
    v147.origin.x = v110;
    v96 = v105;
    v147.origin.y = v105;
    v97 = v104;
    v147.size.width = v104;
    v147.size.height = v109;
    v98 = v93 - CGRectGetMaxX(v147);
    v148.origin.x = v94;
    v148.origin.y = v96;
    v148.size.width = v97;
    v148.size.height = v95;
    v99 = CGRectGetMaxX(v148);
    v100 = v98 - v90;
    v88 = v108;
    v58 = v99 + v100 * 0.5;
  }
  v101 = static UnitPoint.leading.getter();
  v119 = 0;
  v118 = 0;
  return LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v90, 0, v92, 0, v58, v88, v101, v102);
}

uint64_t sub_1F5B08(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double MinX;
  double MidY;
  double v44;
  double v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  char *v60;
  uint64_t v61;
  char *v63;
  char *v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;

  v8 = type metadata accessor for LayoutSubview(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v64 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v63 = (char *)&v63 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v63 - v14;
  v16 = sub_5C154(&qword_32A680);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v63 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v63 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v63 - v29;
  __chkstk_darwin(v31);
  v33 = (char *)&v63 - v32;
  sub_1F4D60(0, (char *)&v63 - v32);
  sub_1F4D60(1, v30);
  sub_1F4D60(2, v27);
  sub_1F5F8C((uint64_t)v33, (uint64_t)v24);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v34(v24, 1, v8) == 1)
  {
    sub_5E09C((uint64_t)v24, &qword_32A680);
  }
  else
  {
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v15, v24, v8);
    v36 = static ProposedViewSize.unspecified.getter(v35);
    v68 = v37 & 1;
    v67 = v38 & 1;
    v39 = LayoutSubview.sizeThatFits(_:)(v36);
    v41 = v40;
    v73.origin.x = a1;
    v73.origin.y = a2;
    v73.size.width = a3;
    v73.size.height = a4;
    MinX = CGRectGetMinX(v73);
    v74.origin.x = a1;
    v74.origin.y = a2;
    v74.size.width = a3;
    v74.size.height = a4;
    MidY = CGRectGetMidY(v74);
    v44 = static UnitPoint.leading.getter();
    v66 = 0;
    v65 = 0;
    LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v39, 0, v41, 0, MinX, MidY, v44, v45);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  }
  sub_1F5F8C((uint64_t)v27, (uint64_t)v21);
  if (v34(v21, 1, v8) == 1)
  {
    sub_5E09C((uint64_t)v21, &qword_32A680);
  }
  else
  {
    v46 = v34;
    v47 = v63;
    v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v63, v21, v8);
    v49 = static ProposedViewSize.unspecified.getter(v48);
    v72 = v50 & 1;
    v71 = v51 & 1;
    v52 = LayoutSubview.sizeThatFits(_:)(v49);
    v54 = v53;
    v75.origin.x = a1;
    v75.origin.y = a2;
    v75.size.width = a3;
    v75.size.height = a4;
    v55 = CGRectGetMinX(v75);
    v76.origin.x = a1;
    v76.origin.y = a2;
    v76.size.width = a3;
    v76.size.height = a4;
    v56 = v55 + CGRectGetWidth(v76) - v52;
    v77.origin.x = a1;
    v77.origin.y = a2;
    v77.size.width = a3;
    v77.size.height = a4;
    v57 = CGRectGetMidY(v77);
    v58 = static UnitPoint.leading.getter();
    v70 = 0;
    v69 = 0;
    LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v52, 0, v54, 0, v56, v57, v58, v59);
    v60 = v47;
    v34 = v46;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v60, v8);
  }
  sub_1F5F8C((uint64_t)v30, (uint64_t)v18);
  if (v34(v18, 1, v8) == 1)
  {
    sub_5E09C((uint64_t)v27, &qword_32A680);
    v27 = v30;
    v30 = v33;
  }
  else
  {
    v61 = (uint64_t)v64;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v64, v18, v8);
    sub_1F54F4(a1, a2, a3, a4, v61, (uint64_t)v33, (uint64_t)v27);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v61, v8);
    v18 = v33;
  }
  sub_5E09C((uint64_t)v27, &qword_32A680);
  sub_5E09C((uint64_t)v30, &qword_32A680);
  return sub_5E09C((uint64_t)v18, &qword_32A680);
}

uint64_t sub_1F5F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_32A680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1F5FD4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CardAuxiliaryNavigationBarLayout.LayoutPosition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1F6060 + 4 * byte_266F53[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1F6094 + 4 * byte_266F4E[v4]))();
}

uint64_t sub_1F6094(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F609C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1F60A4);
  return result;
}

uint64_t sub_1F60B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1F60B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1F60BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F60C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CardAuxiliaryNavigationBarLayout.LayoutPosition()
{
  return &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPosition;
}

unint64_t sub_1F60E4()
{
  unint64_t result;

  result = qword_32A6A0;
  if (!qword_32A6A0)
  {
    result = swift_getWitnessTable(&unk_2671AC, &type metadata for CardAuxiliaryNavigationBarLayout.LayoutPosition);
    atomic_store(result, (unint64_t *)&qword_32A6A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for WelcomeFrameFactory()
{
  return &type metadata for WelcomeFrameFactory;
}

uint64_t sub_1F6138()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;

  v1 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_320EF0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for YIRSourceData(0, v5);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WelcomeFrameViewModel(0, v13);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v0;
  v20 = sub_5C154(&qword_31F108);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_258070;
  v35 = (_QWORD *)(v21 + 32);
  static Locale.autoupdatingCurrent.getter(v21);
  v22 = sub_1861F0(v19, v15);
  v34 = v23;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v24 = enum case for FrameName.getStarted(_:);
  v25 = type metadata accessor for FrameName(0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v7, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v7, 0, 1, v25);
  v27 = type metadata accessor for ReaderType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v3, 1, 1, v27);
  v33 = 1;
  v32 = 1;
  v31 = 1;
  v30 = 1;
  v29 = 1;
  YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v7, v3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, v29, 0, v30, 0,
    v31,
    0,
    v32,
    0,
    v33);
  WelcomeFrameViewModel.init(year:localizedYear:exposureData:)(v19, v22, v34, v10);
  *(_QWORD *)(v21 + 56) = type metadata accessor for WelcomeFrame(0);
  *(_QWORD *)(v21 + 64) = sub_1F6404();
  sub_668BC(v35);
  WelcomeFrame.init(model:)(v18);
  return v21;
}

unint64_t sub_1F6404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A6A8;
  if (!qword_32A6A8)
  {
    v1 = type metadata accessor for WelcomeFrame(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WelcomeFrame, v1);
    atomic_store(result, (unint64_t *)&qword_32A6A8);
  }
  return result;
}

id ContextMenuAssetPropertyProvider.__allocating_init(assetInfo:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;
  id v4;
  objc_super v6;

  v3 = objc_allocWithZone(v1);
  sub_5E0D8((uint64_t)a1, (uint64_t)v3 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo);
  v6.receiver = v3;
  v6.super_class = v1;
  v4 = objc_msgSendSuper2(&v6, "init");
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return v4;
}

id ContextMenuAssetPropertyProvider.init(assetInfo:)(_QWORD *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  sub_5E0D8((uint64_t)a1, (uint64_t)v1 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ContextMenuAssetPropertyProvider();
  v3 = objc_msgSendSuper2(&v5, "init");
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return v3;
}

uint64_t type metadata accessor for ContextMenuAssetPropertyProvider()
{
  return objc_opt_self(BSUIContextMenuAssetPropertyProvider);
}

uint64_t sub_1F65C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 32);
  sub_66898((_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1F663C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 32);
  sub_66898((_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo), v1);
  return qword_267280[(*(char (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2)];
}

uint64_t sub_1F6704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 32);
  sub_66898((_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 152))(v1, v2) & 1;
}

BOOL sub_1F67D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo + 32);
  sub_66898((_QWORD *)(v0 + OBJC_IVAR___BSUIContextMenuAssetPropertyProvider_assetInfo), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 288))(v1, v2);
  v4 = v3;
  if (v3)
    swift_bridgeObjectRelease(v3);
  return v4 != 0;
}

void ContextMenuAssetPropertyProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.ContextMenuAssetPropertyProvider", 44, "init()", 6, 0);
  __break(1u);
}

id ContextMenuAssetPropertyProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextMenuAssetPropertyProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t method lookup function for ContextMenuAssetPropertyProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContextMenuAssetPropertyProvider);
}

uint64_t dispatch thunk of ContextMenuAssetPropertyProvider.assetID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_20.nsects + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContextMenuAssetPropertyProvider.assetType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContextMenuAssetPropertyProvider.isOwned.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of SwiftUIContextMenuProviding.contextMenuActionItems(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of SwiftUIContextMenuProviding.computeSwipeActionItems(with:for:swipeActionType:assetID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t sub_1F693C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v2 = sub_5C154(&qword_324BC8);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SeriesEntityCardComponentModel(0);
  v5 = sub_5C154(&qword_321EE0);
  v6 = (void *)MResourceDecoder.wrappedValue.getter(v5);
  static ContentInfoUtilities.seriesInfo(storeSeries:)(&v12);

  if (v13)
  {
    sub_5DC98(&v12, (uint64_t)v14);
    v7 = v15;
    v8 = v16;
    sub_66898(v14, v15);
    SeriesInfo.authorInfo.getter(v7, v8);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v14);
  }
  else
  {
    sub_5E09C((uint64_t)&v12, &qword_320918);
    v10 = type metadata accessor for SeriesArtistInfo(0, v9);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  }
  sub_1F90E0((uint64_t)v4, a1);
  return sub_5E09C((uint64_t)v4, &qword_324BC8);
}

uint64_t sub_1F6A68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for ContentKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SeriesEntityCardComponentModel(0);
  v6 = sub_5C154(&qword_321EE0);
  v7 = (void *)MResourceDecoder.wrappedValue.getter(v6);
  static ContentInfoUtilities.seriesInfo(storeSeries:)(&v25);

  if (v26)
  {
    sub_5DC98(&v25, (uint64_t)v27);
    v8 = v28;
    v9 = v29;
    sub_66898(v27, v28);
    dispatch thunk of SeriesInfo.contentKind.getter(v8, v9);
    v10 = v28;
    v11 = v29;
    sub_66898(v27, v28);
    v12 = SeriesInfo.assetCount.getter(v10, v11);
    LOBYTE(v9) = v13 & 1;
    v14 = v28;
    v15 = v29;
    sub_66898(v27, v28);
    v16 = SeriesInfo.assetMinimumCount.getter(v14, v15);
    v18 = v17 & 1;
    v19 = v28;
    v20 = v29;
    sub_66898(v27, v28);
    v21 = ContentInfo.genres.getter(v19, *(_QWORD *)(v20 + 8));
    sub_12EFD0((uint64_t)v5, v12, v9, v16, v18, v21, a1);
    v22 = swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v22);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v27);
  }
  else
  {
    sub_5E09C((uint64_t)&v25, &qword_320918);
    v24 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 1, 1, v24);
  }
}

void sub_1F6C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __n128 v5;
  id i;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v1 = v0;
  type metadata accessor for SeriesEntityCardComponentModel(0);
  v2 = sub_5C154(&qword_321EE0);
  v3 = (void *)MResourceDecoder.wrappedValue.getter(v2);
  v4 = MSeries.assets.getter();

  if (!v4)
    goto LABEL_13;
  if (!((unint64_t)v4 >> 62))
  {
    if (*(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
      goto LABEL_4;
    goto LABEL_12;
  }
  if (v4 >= 0)
    v9 = v4 & 0xFFFFFFFFFFFFFF8;
  else
    v9 = v4;
  swift_bridgeObjectRetain(v4);
  v10 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(v4);
  if (!v10)
  {
LABEL_12:
    v5 = swift_bridgeObjectRelease(v4);
LABEL_13:
    v8 = static LocaleLanguageDirection.isRTL.getter(v5);
    goto LABEL_14;
  }
LABEL_4:
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_27;
  if (*(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
  {
    for (i = *(id *)(v4 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4))
    {
      v7 = i;
      v8 = objc_msgSend(i, "pagesAreRTL", swift_bridgeObjectRelease(v4).n128_f64[0]);

LABEL_14:
      v11 = (void *)MResourceDecoder.wrappedValue.getter(v2);
      v12 = MSeries.contentsForArtwork.getter();

      if (v12)
      {
        v27 = v12;
        v13 = sub_5C154(&qword_328498);
        v14 = sub_67060(&qword_3284A0, &qword_328498, (uint64_t)&protocol conformance descriptor for [A]);
        v15 = Collection.isNotEmpty.getter(v13, v14);
        if ((v15 & 1) != 0)
        {
          __chkstk_darwin(v15);
          v24 = v1;
          v25 = 0x4068000000000000;
          v26 = v8 & 1;
          sub_150DD0((void (*)(id *))sub_1F8B24, (uint64_t)v23, v12);
          swift_bridgeObjectRelease(v12);
          return;
        }
        swift_bridgeObjectRelease(v12);
      }
      v4 = MResourceDecoder.wrappedValue.getter(v2);
      v16 = MSeries.itemCountForDisplay.getter();
      v2 = v17;

      v19 = v16 >= 3 ? 3 : v16;
      v20 = (v2 & 1) != 0 ? 3 : v19;
      if ((v20 & 0x8000000000000000) == 0)
        break;
      __break(1u);
LABEL_27:
      ;
    }
    v21 = __chkstk_darwin(v18);
    v24 = v1;
    v25 = 0x4068000000000000;
    v26 = v8 & 1;
    sub_1DD820((void (*)(uint64_t *))sub_1F8B00, (uint64_t)v23, 0, v22, v21);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1F6EA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v54 = a2;
  v56 = sub_5C154(&qword_321EB8);
  __chkstk_darwin(v56);
  v55 = (uint64_t *)((char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_5C154(&qword_321EE0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = sub_5C154(&qword_32A7F8);
  v10 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SeriesEntityCardComponentModel(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v15[*(int *)(v16 + 28)];
  v71 = 0;
  v69 = 0u;
  v70 = 0u;
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  sub_8B354((uint64_t)&v69, (uint64_t)&v66);
  v18 = v67;
  *(_OWORD *)v17 = v66;
  *((_OWORD *)v17 + 1) = v18;
  v65 = (uint64_t)v17;
  *((_QWORD *)v17 + 4) = v68;
  sub_5E09C((uint64_t)&v69, (uint64_t *)&unk_326210);
  v19 = (uint64_t)&v15[*(int *)(v13 + 32)];
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v62 = v19;
  v21(v19, 1, 1, v20);
  v64 = v13;
  v22 = *(int *)(v13 + 36);
  v23 = v15;
  v24 = (uint64_t)&v15[v22];
  v25 = type metadata accessor for ExposureData(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v61 = v24;
  v26(v24, 1, 1, v25);
  v28 = a1[3];
  v27 = a1[4];
  v63 = a1;
  sub_66898(a1, v28);
  v29 = sub_1F8B44();
  v58 = v12;
  v30 = v72;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesEntityCardComponentModel.CodingKeys, &type metadata for SeriesEntityCardComponentModel.CodingKeys, v29, v28, v27);
  if (v30)
  {
    v36 = v62;
    v37 = v61;
    v38 = v65;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v63);
    sub_5E09C(v38, &qword_320B70);
    sub_5E09C(v36, &qword_321EA8);
    return sub_5E09C(v37, &qword_321EB8);
  }
  else
  {
    v52 = v4;
    v53 = v6;
    v72 = v10;
    v31 = v56;
    v32 = v57;
    LOBYTE(v69) = 0;
    *v23 = KeyedDecodingContainer.decode(_:forKey:)(&v69, v57) & 1;
    LOBYTE(v69) = 1;
    v33 = sub_67060(&qword_32A808, &qword_321EE0, (uint64_t)&protocol conformance descriptor for MResourceDecoder<A>);
    v34 = v9;
    v35 = v60;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v9, v60, &v69, v32, v60, v33);
    v39 = v64;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v59 + 32))(&v23[*(int *)(v64 + 20)], v34, v35);
    v40 = sub_5C154(&qword_320B78);
    LOBYTE(v66) = 2;
    v41 = sub_67060((unint64_t *)&qword_320B90, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v69, v40, &v66, v32, v40, v41);
    v42 = v65;
    v43 = &v23[*(int *)(v39 + 24)];
    v44 = v70;
    *(_OWORD *)v43 = v69;
    *((_OWORD *)v43 + 1) = v44;
    *((_QWORD *)v43 + 4) = v71;
    v45 = sub_5C154(&qword_320B70);
    LOBYTE(v66) = 3;
    v46 = sub_67060(&qword_320B98, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v69, v45, &v66, v32, v45, v46);
    sub_8B3E0((uint64_t)&v69, v42, &qword_320B70);
    LOBYTE(v69) = 4;
    v47 = sub_13E54C((unint64_t *)&qword_322038, &qword_321EA8, (void (*)(void))sub_19B718);
    v48 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v53, v52, &v69, v32, v52, v47);
    sub_8B3E0((uint64_t)v48, v62, &qword_321EA8);
    LOBYTE(v69) = 5;
    v49 = sub_13E54C(&qword_32A810, &qword_321EB8, (void (*)(void))sub_1F8B88);
    v50 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v31, &v69, v32, v31, v49);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v32);
    sub_8B3E0((uint64_t)v50, v61, &qword_321EB8);
    sub_1F8C04((uint64_t)v23, v54);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v63);
    return sub_1F8C48((uint64_t)v23);
  }
}

uint64_t sub_1F74DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1F7518 + 4 * byte_2672C0[*v0]))(0x756F44776F6C6C61, 0xEF65646957656C62);
}

uint64_t sub_1F7518()
{
  return 0x6552736569726573;
}

uint64_t sub_1F753C()
{
  return 25705;
}

uint64_t sub_1F7548()
{
  return 0x6575676573;
}

unint64_t sub_1F755C()
{
  return 0xD000000000000011;
}

uint64_t sub_1F7578()
{
  return 0x657275736F707865;
}

uint64_t sub_1F7598@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1F8E28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1F75BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F8B44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1F75E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1F8B44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1F760C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_8B3E0(a1, v2 + *(int *)(a2 + 28), (uint64_t *)&unk_326210);
}

Swift::Void (__swiftcall *sub_1F7630())()
{
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_1F7644@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1F6EA4(a1, a2);
}

uint64_t sub_1F7658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 24), a2, &qword_320B78);
}

uint64_t sub_1F7680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[40];

  sub_5E1A4(v2 + *(int *)(a1 + 28), (uint64_t)v5, &qword_320B70);
  return sub_66F14((uint64_t)v5, a2, (uint64_t *)&unk_326210);
}

uint64_t sub_1F76D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(v2 + *(int *)(a1 + 32), (uint64_t)v7, &qword_321EA8);
  return sub_66F14((uint64_t)v7, a2, &qword_31F480);
}

uint64_t sub_1F7768@<X0>(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  double v7;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  NSObject **v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  __n128 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v7 = a5.n128_f64[0];
  v11 = type metadata accessor for CoverViewModel.Style(0, a5);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  static ContentInfoUtilities.assetInfo(storeAsset:)(&v48, v16, v13);
  if (v49)
  {
    sub_5DC98(&v48, (uint64_t)&v50);
    v17 = v52;
    v18 = v53;
    sub_66898(&v50, v52);
    v19 = AssetInfo.coverAspectRatio.getter(v17, v18) * v7;
    sub_5E0D8((uint64_t)&v50, (uint64_t)v15);
    *((double *)v15 + 5) = v19;
    *((double *)v15 + 6) = v7;
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for CoverViewModel.Style.image(_:), v11);
    CoverViewModel.init(style:)(v15);
    v21 = type metadata accessor for CoverViewModel(0, v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a4, 0, 1, v21);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v50);
  }
  else
  {
    v54 = a2;
    sub_5E09C((uint64_t)&v48, &qword_320940);
    if (qword_31E638 != -1)
      swift_once(&qword_31E638, sub_126C24);
    v47 = a3;
    v23 = type metadata accessor for Logger(0);
    sub_5240C(v23, (uint64_t)qword_325238);
    v24 = v16;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v44 = v11;
      v28 = (uint8_t *)v27;
      v29 = (NSObject **)swift_slowAlloc(8, -1);
      v42 = v28;
      v43 = v12;
      *(_DWORD *)v28 = 138412290;
      v46 = v5;
      v50 = v24;
      v30 = v24;
      v45 = a4;
      v31 = v30;
      v12 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v28 + 4, v28 + 12);
      *v29 = v24;

      a4 = v45;
      v32 = v26;
      v33 = v42;
      _os_log_impl(&dword_0, v25, v32, "Failed to convert store asset to assetInfo: %@", v42, 0xCu);
      v34 = sub_5C154(&qword_32A000);
      swift_arrayDestroy(v29, 1, v34);
      swift_slowDealloc(v29, -1, -1);
      v11 = v44;
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {

      v25 = v24;
    }

    type metadata accessor for SeriesEntityCardComponentModel(0);
    v35 = sub_5C154(&qword_321EE0);
    v36 = (void *)MResourceDecoder.wrappedValue.getter(v35);
    v37 = type metadata accessor for MAudiobookSeries(0);
    v38 = swift_dynamicCastClass(v36, v37);

    *(double *)v15 = v7;
    if (v38)
    {
      v39 = (unsigned int *)&enum case for CoverViewModel.Style.placeholderAudiobook(_:);
    }
    else
    {
      v15[8] = v47 & 1;
      v39 = (unsigned int *)&enum case for CoverViewModel.Style.placeholderBook(_:);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, *v39, v11);
    CoverViewModel.init(style:)(v15);
    v41 = type metadata accessor for CoverViewModel(0, v40);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(a4, 0, 1, v41);
  }
}

uint64_t sub_1F7AF4(__n128 a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v16;

  v5 = a1.n128_u64[0];
  v6 = type metadata accessor for CoverViewModel.Style(0, a1);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SeriesEntityCardComponentModel(0);
  v10 = sub_5C154(&qword_321EE0);
  v11 = (void *)MResourceDecoder.wrappedValue.getter(v10);
  v12 = type metadata accessor for MAudiobookSeries(0);
  v13 = swift_dynamicCastClass(v11, v12);

  *(_QWORD *)v9 = v5;
  if (v13)
  {
    v14 = (unsigned int *)&enum case for CoverViewModel.Style.placeholderAudiobook(_:);
  }
  else
  {
    v9[8] = a4 & 1;
    v14 = (unsigned int *)&enum case for CoverViewModel.Style.placeholderBook(_:);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *v14, v6);
  return CoverViewModel.init(style:)(v9);
}

uint64_t *sub_1F7C0C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_5C154(&qword_321EE0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)v4 + v11 + 24) = v12;
    (**(void (***)(void))(v12 - 8))();
    v13 = a3[7];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = *(uint64_t *)((char *)a2 + v13 + 24);
    if (v16)
    {
      v17 = *((_QWORD *)v15 + 4);
      *((_QWORD *)v14 + 3) = v16;
      *((_QWORD *)v14 + 4) = v17;
      (**(void (***)(void))(v16 - 8))();
    }
    else
    {
      v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v19;
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    }
    v20 = a3[8];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for ImpressionMetrics(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_5C154(&qword_31F480);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = a3[9];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for ExposureData(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_5C154(&qword_321EC0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
  }
  return v4;
}

uint64_t sub_1F7E18(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = a1 + a2[5];
  v5 = sub_5C154(&qword_321EE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + a2[6]));
  v6 = (_QWORD *)(a1 + a2[7]);
  if (v6[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v6);
  v7 = a1 + a2[8];
  v8 = type metadata accessor for ImpressionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = a1 + a2[9];
  v11 = type metadata accessor for ExposureData(0);
  v12 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  return result;
}

_BYTE *sub_1F7F20(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_5C154(&qword_321EE0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(_OWORD *)&a2[v10 + 24];
  *(_OWORD *)&a1[v10 + 24] = v11;
  (**(void (***)(void))(v11 - 8))();
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a2[v12 + 24];
  if (v15)
  {
    v16 = *((_QWORD *)v14 + 4);
    *((_QWORD *)v13 + 3) = v15;
    *((_QWORD *)v13 + 4) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  }
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_5C154(&qword_31F480);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for ExposureData(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_5C154(&qword_321EC0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  return a1;
}

_BYTE *sub_1F8100(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_BYTE *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_BYTE *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_5C154(&qword_321EE0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  sub_65938(&a1[a3[6]], &a2[a3[6]]);
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(_QWORD *)&a2[v10 + 24];
  if (*(_QWORD *)&a1[v10 + 24])
  {
    if (v13)
    {
      sub_65938(v11, v12);
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v11);
  }
  else if (v13)
  {
    *((_QWORD *)v11 + 3) = v13;
    *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
    (**(void (***)(_BYTE *, _BYTE *))(v13 - 8))(v11, v12);
    goto LABEL_8;
  }
  v14 = *(_OWORD *)v12;
  v15 = *((_OWORD *)v12 + 1);
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  *(_OWORD *)v11 = v14;
  *((_OWORD *)v11 + 1) = v15;
LABEL_8:
  v16 = a3[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v23)
  {
    (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v17, v19);
LABEL_13:
    v24 = sub_5C154(&qword_31F480);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_14:
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for ExposureData(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 24))(v26, v27, v28);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v26, v28);
    goto LABEL_19;
  }
  if (v32)
  {
LABEL_19:
    v33 = sub_5C154(&qword_321EC0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 16))(v26, v27, v28);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  return a1;
}

_BYTE *sub_1F838C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_5C154(&qword_321EE0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = *(_OWORD *)v13;
  v15 = *((_OWORD *)v13 + 1);
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  *(_OWORD *)v12 = v14;
  *((_OWORD *)v12 + 1) = v15;
  v16 = &a1[v11];
  v17 = &a2[v11];
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for ImpressionMetrics(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_5C154(&qword_31F480);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for ExposureData(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = sub_5C154(&qword_321EC0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

_BYTE *sub_1F8540(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_BYTE *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_5C154(&qword_321EE0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&a1[v10]);
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (*(_QWORD *)&a1[v14 + 24])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v15);
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v25)
  {
    (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v19, v21);
LABEL_8:
    v26 = sub_5C154(&qword_31F480);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_9:
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for ExposureData(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 40))(v28, v29, v30);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v28, v30);
    goto LABEL_14;
  }
  if (v34)
  {
LABEL_14:
    v35 = sub_5C154(&qword_321EC0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 32))(v28, v29, v30);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  return a1;
}

uint64_t sub_1F87A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1F87AC);
}

uint64_t sub_1F87AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = sub_5C154(&qword_321EE0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_5C154(&qword_321EA8);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[8];
    }
    else
    {
      v8 = sub_5C154(&qword_321EB8);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[9];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 24);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1F8884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1F8890);
}

uint64_t sub_1F8890(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_5C154(&qword_321EE0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 24) = (a2 - 1);
      return result;
    }
    v12 = sub_5C154(&qword_321EA8);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[8];
    }
    else
    {
      v10 = sub_5C154(&qword_321EB8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[9];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for SeriesEntityCardComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_32A798;
  if (!qword_32A798)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesEntityCardComponentModel);
  return result;
}

void sub_1F89A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v8[0] = &unk_267320;
  sub_8C25C(319, &qword_32A7A8, (uint64_t (*)(uint64_t))&type metadata accessor for MSeries, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for MResourceDecoder);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_267338;
    v8[3] = &unk_267350;
    sub_8C25C(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_8C25C(319, (unint64_t *)&unk_32A7B0, (uint64_t (*)(uint64_t))&type metadata accessor for ExposureData, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1F8AA8()
{
  return sub_648E0(&qword_320088, type metadata accessor for SeriesEntityCardComponentModel, (uint64_t)&unk_2673F0);
}

uint64_t sub_1F8AD4()
{
  return sub_648E0(&qword_32A7F0, type metadata accessor for SeriesEntityCardComponentModel, (uint64_t)&unk_267368);
}

uint64_t sub_1F8B00(uint64_t a1, __n128 a2)
{
  uint64_t v2;

  a2.n128_u64[0] = *(_QWORD *)(v2 + 24);
  return sub_1F7AF4(a2, a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 32));
}

uint64_t sub_1F8B24@<X0>(void **a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;

  a3.n128_u64[0] = *(_QWORD *)(v3 + 24);
  return sub_1F7768(a1, *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 32), a2, a3);
}

unint64_t sub_1F8B44()
{
  unint64_t result;

  result = qword_32A800;
  if (!qword_32A800)
  {
    result = swift_getWitnessTable(&unk_2674F4, &type metadata for SeriesEntityCardComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A800);
  }
  return result;
}

unint64_t sub_1F8B88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32A818;
  if (!qword_32A818)
  {
    v1 = sub_667D0(&qword_321EC0);
    sub_648E0(&qword_32A820, (uint64_t (*)(uint64_t))&type metadata accessor for ExposureData, (uint64_t)&protocol conformance descriptor for ExposureData);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_32A818);
  }
  return result;
}

uint64_t sub_1F8C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesEntityCardComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1F8C48(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeriesEntityCardComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SeriesEntityCardComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1F8CD0 + 4 * byte_2672CB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1F8D04 + 4 * byte_2672C6[v4]))();
}

uint64_t sub_1F8D04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F8D0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1F8D14);
  return result;
}

uint64_t sub_1F8D20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1F8D28);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1F8D2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F8D34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesEntityCardComponentModel.CodingKeys()
{
  return &type metadata for SeriesEntityCardComponentModel.CodingKeys;
}

unint64_t sub_1F8D54()
{
  unint64_t result;

  result = qword_32A828;
  if (!qword_32A828)
  {
    result = swift_getWitnessTable(&unk_2674CC, &type metadata for SeriesEntityCardComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A828);
  }
  return result;
}

unint64_t sub_1F8D9C()
{
  unint64_t result;

  result = qword_32A830;
  if (!qword_32A830)
  {
    result = swift_getWitnessTable(&unk_26743C, &type metadata for SeriesEntityCardComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A830);
  }
  return result;
}

unint64_t sub_1F8DE4()
{
  unint64_t result;

  result = qword_32A838;
  if (!qword_32A838)
  {
    result = swift_getWitnessTable(&unk_267464, &type metadata for SeriesEntityCardComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32A838);
  }
  return result;
}

uint64_t sub_1F8E28(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x756F44776F6C6C61 && a2 == 0xEF65646957656C62)
  {
    v5 = 0xEF65646957656C62;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F44776F6C6C61, 0xEF65646957656C62, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6552736569726573 && a2 == 0xEE00656372756F73)
  {
    v7 = 0xEE00656372756F73;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552736569726573, 0xEE00656372756F73, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x800000000026D790;
    if (a2 == 0x800000000026D790)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease(0xEC00000061746144);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xEC00000061746144, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1F90E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __n128 v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t inited;
  unint64_t v68;
  char *v69;
  __n128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  __n128 v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *);
  char *v104;
  char *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  __n128 v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  __n128 v151;
  char *v152;
  __n128 v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  void (*v164)(char *, uint64_t);
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  __n128 v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  __n128 v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  __n128 v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  __n128 v198;
  __n128 v199;
  uint64_t v200;
  void (*v201)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232[104];

  v224 = a2;
  v3 = sub_5C154(&qword_3256B8);
  __chkstk_darwin(v3);
  v211 = (char *)&v208 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v212 = (char *)&v208 - v6;
  v220 = type metadata accessor for LocalizerLookupStrategy(0);
  v218 = *(_QWORD *)(v220 - 8);
  v7 = __chkstk_darwin(v220);
  v219 = (char *)&v208 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizerDefaultValue(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  v221 = v9;
  v222 = v10;
  __chkstk_darwin(v9);
  v214 = (char *)&v208 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v223 = (char *)&v208 - v14;
  v15 = type metadata accessor for SeriesArtistInfo.ArtistType(0, v13);
  v216 = *(_QWORD *)(v15 - 8);
  v217 = v15;
  __chkstk_darwin(v15);
  v210 = (char *)&v208 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v213 = (char *)&v208 - v18;
  __chkstk_darwin(v19);
  v215 = (char *)&v208 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v208 - v22;
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v208 - v26;
  v28 = type metadata accessor for SeriesArtistInfo.ArtistPlurality(0, v25);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v208 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_324BC8);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v208 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for SeriesArtistInfo(0, v33);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v39 = (char *)&v208 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a1;
  v42 = v41;
  sub_1FA524(v40, (uint64_t)v35);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v37 + 48))(v35, 1, v42) != 1)
  {
    v209 = v37;
    v47 = (*(uint64_t (**)(char *, char *, char *))(v37 + 32))(v39, v35, v42);
    SeriesArtistInfo.artistPlurality.getter(v47);
    v48 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v31, v28);
    if ((_DWORD)v48 == enum case for SeriesArtistInfo.ArtistPlurality.variousArtists(_:))
    {
      SeriesArtistInfo.artistType.getter(v48);
      v49 = (*(uint64_t (**)(char *, unint64_t))(v216 + 88))(v27, v217);
      if (v49 == enum case for SeriesArtistInfo.ArtistType.author(_:))
      {
        v51 = v223;
        LocalizerDefaultValue.init(stringLiteral:)("Multiple Authors", 16, 2, v50);
        v53 = v218;
        v52 = v219;
        v54 = v220;
        (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
        v55 = v224;
        static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001CLL, 0x8000000000274D40, 0, v51, v52);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
        (*(void (**)(char *, uint64_t))(v222 + 8))(v51, v221);
        (*(void (**)(char *, char *))(v209 + 8))(v39, v42);
LABEL_14:
        v43 = type metadata accessor for LocalizerRequest(0);
        v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
        v45 = v55;
LABEL_15:
        v46 = 0;
        return v44(v45, v46, 1, v43);
      }
      v55 = v224;
      v74 = v209;
      if (v49 == enum case for SeriesArtistInfo.ArtistType.narrator(_:))
      {
        v75 = v223;
        LocalizerDefaultValue.init(stringLiteral:)("Multiple Narrators", 18, 2, v50);
        v77 = v218;
        v76 = v219;
        v78 = v220;
        (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
        static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001ELL, 0x8000000000274D00, 0, v75, v76);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
        (*(void (**)(char *, uint64_t))(v222 + 8))(v75, v221);
        (*(void (**)(char *, char *))(v74 + 8))(v39, v42);
        goto LABEL_14;
      }
      goto LABEL_75;
    }
    if ((_DWORD)v48 == enum case for SeriesArtistInfo.ArtistPlurality.oneArtist(_:))
    {
      v56 = v42;
      v57 = v39;
      v58 = (_QWORD *)SeriesArtistInfo.names.getter(v48);
      v59 = v224;
      v60 = v209;
      if (v58)
      {
        v61 = v58;
        if (v58[2])
        {
          v63 = v58[4];
          v62 = v58[5];
          swift_bridgeObjectRetain(v62);
          v64 = swift_bridgeObjectRelease(v61);
          SeriesArtistInfo.artistType.getter(v64);
          v65 = (*(uint64_t (**)(char *, unint64_t))(v216 + 88))(v23, v217);
          if (v65 == enum case for SeriesArtistInfo.ArtistType.author(_:))
          {
            v66 = sub_5C154(&qword_3206C0);
            inited = swift_initStackObject(v66, &v225);
            *(_OWORD *)(inited + 16) = xmmword_258070;
            *(_QWORD *)(inited + 32) = 0x747369747261;
            *(_QWORD *)(inited + 40) = 0xE600000000000000;
            *(_QWORD *)(inited + 48) = v63;
            *(_QWORD *)(inited + 56) = v62;
            v68 = sub_52A70(inited);
            v69 = v223;
            LocalizerDefaultValue.init(stringLiteral:)("⁨@@artist@@⁩", 16, 0, v70);
            v72 = v218;
            v71 = v219;
            v73 = v220;
            (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
            static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000016, 0x8000000000274CC0, v68, v69, v71);
            swift_bridgeObjectRelease(v68);
            (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v73);
            (*(void (**)(char *, uint64_t))(v222 + 8))(v69, v221);
            (*(void (**)(char *, char *))(v60 + 8))(v39, v56);
          }
          else
          {
            if (v65 != enum case for SeriesArtistInfo.ArtistType.narrator(_:))
            {
              v207 = 47;
              goto LABEL_76;
            }
            v167 = sub_5C154(&qword_3206C0);
            v168 = swift_initStackObject(v167, &v226);
            *(_OWORD *)(v168 + 16) = xmmword_258070;
            *(_QWORD *)(v168 + 32) = 0x7472417473726966;
            *(_QWORD *)(v168 + 40) = 0xEB00000000747369;
            *(_QWORD *)(v168 + 48) = v63;
            *(_QWORD *)(v168 + 56) = v62;
            v169 = sub_52A70(v168);
            v170 = v223;
            LocalizerDefaultValue.init(stringLiteral:)("Narrated by ⁨@@firstArtist@@⁩", 33, 0, v171);
            v172 = v218;
            v173 = v219;
            v174 = v220;
            (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
            static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000020, 0x8000000000274C60, v169, v170, v173);
            swift_bridgeObjectRelease(v169);
            (*(void (**)(char *, uint64_t))(v172 + 8))(v173, v174);
            (*(void (**)(char *, uint64_t))(v222 + 8))(v170, v221);
            (*(void (**)(char *, char *))(v60 + 8))(v57, v56);
          }
          v43 = type metadata accessor for LocalizerRequest(0);
          v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
          v45 = v59;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v58);
      }
      (*(void (**)(char *, char *))(v60 + 8))(v39, v56);
LABEL_44:
      v43 = type metadata accessor for LocalizerRequest(0);
      v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
      v45 = v59;
      goto LABEL_3;
    }
    if ((_DWORD)v48 == enum case for SeriesArtistInfo.ArtistPlurality.twoArtists(_:))
    {
      v80 = v42;
      v81 = (_QWORD *)SeriesArtistInfo.names.getter(v48);
      v82 = v224;
      if (v81)
      {
        v83 = v81;
        if (v81[2])
        {
          v85 = v81[4];
          v84 = v81[5];
          swift_bridgeObjectRetain(v84);
          v86 = swift_bridgeObjectRelease(v83);
          v87 = (_QWORD *)SeriesArtistInfo.names.getter(v86);
          if (v87)
          {
            v88 = v87;
            v208 = v39;
            if (v87[2] >= 2uLL)
            {
              v90 = v87[6];
              v89 = v87[7];
              swift_bridgeObjectRetain(v89);
              v91 = swift_bridgeObjectRelease(v88);
              v92 = v215;
              v93 = v208;
              SeriesArtistInfo.artistType.getter(v91);
              v94 = (*(uint64_t (**)(char *, unint64_t))(v216 + 88))(v92, v217);
              if (v94 == enum case for SeriesArtistInfo.ArtistType.author(_:))
              {
                v95 = sub_5C154(&qword_3206C0);
                v96 = swift_initStackObject(v95, &v227);
                *(_OWORD *)(v96 + 16) = xmmword_255F00;
                *(_QWORD *)(v96 + 32) = 0x7472417473726966;
                *(_QWORD *)(v96 + 40) = 0xEB00000000747369;
                *(_QWORD *)(v96 + 48) = v85;
                *(_QWORD *)(v96 + 56) = v84;
                strcpy((char *)(v96 + 64), "secondArtist");
                *(_BYTE *)(v96 + 77) = 0;
                *(_WORD *)(v96 + 78) = -5120;
                *(_QWORD *)(v96 + 80) = v90;
                *(_QWORD *)(v96 + 88) = v89;
                v97 = sub_52A70(v96);
                v98 = v223;
                LocalizerDefaultValue.init(stringLiteral:)("⁨@@firstArtist@@⁩ & ⁨@@secondArtist@@⁩", 46, 0, v99);
                v101 = v218;
                v100 = v219;
                v102 = v220;
                (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
                static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000017, 0x8000000000274C10, v97, v98, v100);
                swift_bridgeObjectRelease(v97);
                (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v102);
                (*(void (**)(char *, uint64_t))(v222 + 8))(v98, v221);
                v103 = *(void (**)(char *, char *))(v209 + 8);
                v104 = v93;
              }
              else
              {
                if (v94 != enum case for SeriesArtistInfo.ArtistType.narrator(_:))
                {
                  v207 = 62;
                  goto LABEL_76;
                }
                v176 = sub_5C154(&qword_3206C0);
                v177 = swift_initStackObject(v176, &v228);
                *(_OWORD *)(v177 + 16) = xmmword_255F00;
                *(_QWORD *)(v177 + 32) = 0x7472417473726966;
                *(_QWORD *)(v177 + 40) = 0xEB00000000747369;
                *(_QWORD *)(v177 + 48) = v85;
                *(_QWORD *)(v177 + 56) = v84;
                strcpy((char *)(v177 + 64), "secondArtist");
                *(_BYTE *)(v177 + 77) = 0;
                *(_WORD *)(v177 + 78) = -5120;
                *(_QWORD *)(v177 + 80) = v90;
                *(_QWORD *)(v177 + 88) = v89;
                v178 = sub_52A70(v177);
                v179 = v223;
                LocalizerDefaultValue.init(stringLiteral:)("Narrated by ⁨@@firstArtist@@⁩ & ⁨@@secondArtist@@⁩", 58, 0, v180);
                v182 = v218;
                v181 = v219;
                v183 = v220;
                (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
                static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000021, 0x8000000000274BA0, v178, v179, v181);
                swift_bridgeObjectRelease(v178);
                (*(void (**)(char *, uint64_t))(v182 + 8))(v181, v183);
                (*(void (**)(char *, uint64_t))(v222 + 8))(v179, v221);
                v104 = v208;
                v103 = *(void (**)(char *, char *))(v209 + 8);
              }
              v103(v104, v80);
LABEL_55:
              v43 = type metadata accessor for LocalizerRequest(0);
              v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
              v45 = v82;
              goto LABEL_15;
            }
            __break(1u);
            goto LABEL_71;
          }
          (*(void (**)(char *, char *))(v209 + 8))(v39, v80);
          v175 = v84;
          goto LABEL_51;
        }
        swift_bridgeObjectRelease(v81);
      }
      (*(void (**)(char *, char *))(v209 + 8))(v39, v80);
LABEL_61:
      v43 = type metadata accessor for LocalizerRequest(0);
      v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
      v45 = v82;
      goto LABEL_3;
    }
    if ((_DWORD)v48 == enum case for SeriesArtistInfo.ArtistPlurality.threeArtists(_:))
    {
      v105 = v42;
      v106 = (_QWORD *)SeriesArtistInfo.names.getter(v48);
      v59 = v224;
      if (v106)
      {
        v107 = v106;
        if (v106[2])
        {
          v109 = v106[4];
          v108 = v106[5];
          swift_bridgeObjectRetain(v108);
          v110 = swift_bridgeObjectRelease(v107);
          v111 = (_QWORD *)SeriesArtistInfo.names.getter(v110);
          if (v111)
          {
            v112 = v111;
            if (v111[2] < 2uLL)
            {
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            v114 = v111[6];
            v113 = v111[7];
            swift_bridgeObjectRetain(v113);
            v115 = swift_bridgeObjectRelease(v112);
            v116 = (_QWORD *)SeriesArtistInfo.names.getter(v115);
            if (v116)
            {
              v117 = v116;
              v208 = v39;
              if (v116[2] >= 3uLL)
              {
                v118 = v116[8];
                v119 = v116[9];
                swift_bridgeObjectRetain(v119);
                v120 = swift_bridgeObjectRelease(v117);
                v121 = v213;
                v122 = v208;
                SeriesArtistInfo.artistType.getter(v120);
                v123 = (*(uint64_t (**)(char *, unint64_t))(v216 + 88))(v121, v217);
                if (v123 == enum case for SeriesArtistInfo.ArtistType.author(_:))
                {
                  v124 = sub_5C154(&qword_3206C0);
                  v125 = swift_initStackObject(v124, &v229);
                  *(_OWORD *)(v125 + 16) = xmmword_2584B0;
                  *(_QWORD *)(v125 + 32) = 0x7472417473726966;
                  *(_QWORD *)(v125 + 40) = 0xEB00000000747369;
                  *(_QWORD *)(v125 + 48) = v109;
                  *(_QWORD *)(v125 + 56) = v108;
                  strcpy((char *)(v125 + 64), "secondArtist");
                  *(_BYTE *)(v125 + 77) = 0;
                  *(_WORD *)(v125 + 78) = -5120;
                  *(_QWORD *)(v125 + 80) = v114;
                  *(_QWORD *)(v125 + 88) = v113;
                  *(_QWORD *)(v125 + 96) = 0x7472416472696874;
                  *(_QWORD *)(v125 + 104) = 0xEB00000000747369;
                  *(_QWORD *)(v125 + 112) = v118;
                  *(_QWORD *)(v125 + 120) = v119;
                  v126 = sub_52A70(v125);
                  v127 = v223;
                  LocalizerDefaultValue.init(stringLiteral:)("⁨@@firstArtist@@⁩, ⁨@@secondArtist@@⁩ & ⁨@@thirdArtist@@⁩", 69, 0, v128);
                  v130 = v218;
                  v129 = v219;
                  v131 = v220;
                  (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
                  v132 = v224;
                  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000019, 0x8000000000274B30, v126, v127, v129);
                  swift_bridgeObjectRelease(v126);
                  (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v131);
                  (*(void (**)(char *, uint64_t))(v222 + 8))(v127, v221);
                  (*(void (**)(char *, char *))(v209 + 8))(v122, v105);
                  v43 = type metadata accessor for LocalizerRequest(0);
                  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
                  v45 = v132;
                  goto LABEL_15;
                }
                if (v123 == enum case for SeriesArtistInfo.ArtistType.narrator(_:))
                {
                  v185 = sub_5C154(&qword_3206C0);
                  v186 = swift_initStackObject(v185, &v230);
                  *(_OWORD *)(v186 + 16) = xmmword_2584B0;
                  *(_QWORD *)(v186 + 32) = 0x7472417473726966;
                  *(_QWORD *)(v186 + 40) = 0xEB00000000747369;
                  *(_QWORD *)(v186 + 48) = v109;
                  *(_QWORD *)(v186 + 56) = v108;
                  strcpy((char *)(v186 + 64), "secondArtist");
                  *(_BYTE *)(v186 + 77) = 0;
                  *(_WORD *)(v186 + 78) = -5120;
                  *(_QWORD *)(v186 + 80) = v114;
                  *(_QWORD *)(v186 + 88) = v113;
                  *(_QWORD *)(v186 + 96) = 0x7472416472696874;
                  *(_QWORD *)(v186 + 104) = 0xEB00000000747369;
                  *(_QWORD *)(v186 + 112) = v118;
                  *(_QWORD *)(v186 + 120) = v119;
                  v187 = sub_52A70(v186);
                  v188 = v223;
                  LocalizerDefaultValue.init(stringLiteral:)("Narrated by ⁨@@firstArtist@@⁩, ⁨@@secondArtist@@⁩ & ⁨@@thirdArtist@@⁩", 81, 0, v189);
                  v191 = v218;
                  v190 = v219;
                  v192 = v220;
                  (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
                  v193 = v224;
                  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000023, 0x8000000000274AA0, v187, v188, v190);
                  swift_bridgeObjectRelease(v187);
                  (*(void (**)(char *, uint64_t))(v191 + 8))(v190, v192);
                  (*(void (**)(char *, uint64_t))(v222 + 8))(v188, v221);
                  (*(void (**)(char *, char *))(v209 + 8))(v208, v105);
                  v43 = type metadata accessor for LocalizerRequest(0);
                  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
                  v45 = v193;
                  goto LABEL_15;
                }
                v207 = 78;
LABEL_76:
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000049, 0x80000000002748A0, "BookStoreUI/Localizable+SeriesArtist.swift", 42, 2, v207, 0);
                while (1)
                {
                  __break(1u);
LABEL_78:
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000004ELL, 0x8000000000274850, "BookStoreUI/Localizable+SeriesArtist.swift", 42, 2, 105, 0);
                }
              }
              goto LABEL_72;
            }
            (*(void (**)(char *, char *))(v209 + 8))(v39, v105);
            swift_bridgeObjectRelease(v108);
            v184 = v113;
          }
          else
          {
            (*(void (**)(char *, char *))(v209 + 8))(v39, v105);
            v184 = v108;
          }
          swift_bridgeObjectRelease(v184);
          goto LABEL_44;
        }
        swift_bridgeObjectRelease(v106);
      }
      (*(void (**)(char *, char *))(v209 + 8))(v39, v105);
      goto LABEL_44;
    }
    v82 = v224;
    if ((_DWORD)v48 != enum case for SeriesArtistInfo.ArtistPlurality.fourOrMoreArtists(_:))
      goto LABEL_78;
    v133 = SeriesArtistInfo.totalArtistCount.getter();
    if ((v134 & 1) == 0)
    {
      v135 = v133;
      v136 = (_QWORD *)((uint64_t (*)(void))SeriesArtistInfo.names.getter)();
      if (v136)
      {
        v137 = v136;
        if (v136[2])
        {
          v215 = v42;
          v139 = v136[4];
          v138 = v136[5];
          swift_bridgeObjectRetain(v138);
          v140 = swift_bridgeObjectRelease(v137);
          v141 = (_QWORD *)SeriesArtistInfo.names.getter(v140);
          if (v141)
          {
            v142 = v141;
            v208 = v39;
            if (v141[2] >= 2uLL)
            {
              v144 = v141[6];
              v143 = v141[7];
              swift_bridgeObjectRetain(v143);
              v145 = swift_bridgeObjectRelease(v142);
              v146 = v135 - 2;
              if (!__OFSUB__(v135, 2))
              {
                v147 = v210;
                SeriesArtistInfo.artistType.getter(v145);
                v148 = (*(uint64_t (**)(char *, unint64_t))(v216 + 88))(v147, v217);
                if (v148 == enum case for SeriesArtistInfo.ArtistType.author(_:))
                {
                  v149 = sub_5C154(&qword_3206C0);
                  v150 = swift_initStackObject(v149, &v231);
                  *(_OWORD *)(v150 + 16) = xmmword_255F00;
                  *(_QWORD *)(v150 + 32) = 0x7472417473726966;
                  *(_QWORD *)(v150 + 40) = 0xEB00000000747369;
                  *(_QWORD *)(v150 + 48) = v139;
                  *(_QWORD *)(v150 + 56) = v138;
                  strcpy((char *)(v150 + 64), "secondArtist");
                  *(_BYTE *)(v150 + 77) = 0;
                  *(_WORD *)(v150 + 78) = -5120;
                  *(_QWORD *)(v150 + 80) = v144;
                  *(_QWORD *)(v150 + 88) = v143;
                  v217 = sub_52A70(v150);
                  LocalizerDefaultValue.init(stringLiteral:)("⁨@@firstArtist@@⁩, ⁨@@secondArtist@@⁩ & ⁨@@count@@ others⁩", 70, 0, v151);
                  v152 = v214;
                  LocalizerDefaultValue.init(stringLiteral:)("⁨@@firstArtist@@⁩, ⁨@@secondArtist@@⁩ & ⁨@@count@@ other⁩", 69, 0, v153);
                  v154 = v221;
                  v155 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v222 + 56);
                  v156 = (uint64_t)v212;
                  v155(v212, 1, 1, v221);
                  v157 = (uint64_t)v211;
                  v155(v211, 1, 1, v154);
                  v158 = v146;
                  v159 = v218;
                  v160 = v219;
                  v161 = v220;
                  (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
                  v162 = v158;
                  v163 = v217;
                  static LocalizerRequest.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v162, 0xD00000000000001ELL, 0x80000000002749E0, v217, v223, v152, v156, v157, 0, 0, v160);
                  swift_bridgeObjectRelease(v163);
                  (*(void (**)(char *, uint64_t))(v159 + 8))(v160, v161);
                  sub_5E09C(v157, &qword_3256B8);
                  sub_5E09C(v156, &qword_3256B8);
                  v164 = *(void (**)(char *, uint64_t))(v222 + 8);
                  v164(v152, v154);
                  v165 = v223;
                  v166 = v154;
                }
                else
                {
                  v217 = v146;
                  if (v148 != enum case for SeriesArtistInfo.ArtistType.narrator(_:))
                  {
                    v207 = 102;
                    goto LABEL_76;
                  }
                  v194 = sub_5C154(&qword_3206C0);
                  v195 = swift_initStackObject(v194, v232);
                  *(_OWORD *)(v195 + 16) = xmmword_255F00;
                  *(_QWORD *)(v195 + 32) = 0x7472417473726966;
                  *(_QWORD *)(v195 + 40) = 0xEB00000000747369;
                  *(_QWORD *)(v195 + 48) = v139;
                  *(_QWORD *)(v195 + 56) = v138;
                  strcpy((char *)(v195 + 64), "secondArtist");
                  *(_BYTE *)(v195 + 77) = 0;
                  *(_WORD *)(v195 + 78) = -5120;
                  *(_QWORD *)(v195 + 80) = v144;
                  *(_QWORD *)(v195 + 88) = v143;
                  v196 = sub_52A70(v195);
                  v197 = v223;
                  LocalizerDefaultValue.init(stringLiteral:)("Narrated by ⁨@@firstArtist@@⁩, ⁨@@secondArtist@@⁩ & ⁨@@count@@ others⁩", 82, 0, v198);
                  LocalizerDefaultValue.init(stringLiteral:)("Narrated by ⁨@@firstArtist@@⁩, ⁨@@secondArtist@@⁩ & ⁨@@count@@ other⁩", 81, 0, v199);
                  v200 = v221;
                  v201 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v222 + 56);
                  v202 = (uint64_t)v212;
                  v201(v212, 1, 1, v221);
                  v203 = (uint64_t)v211;
                  v201(v211, 1, 1, v200);
                  v204 = v218;
                  v205 = v219;
                  v206 = v220;
                  (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v219, enum case for LocalizerLookupStrategy.default(_:), v220);
                  static LocalizerRequest.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v217, 0xD000000000000028, 0x80000000002748F0, v196, v197, v214, v202, v203, 0, 0, v205);
                  swift_bridgeObjectRelease(v196);
                  (*(void (**)(char *, uint64_t))(v204 + 8))(v205, v206);
                  sub_5E09C(v203, &qword_3256B8);
                  sub_5E09C(v202, &qword_3256B8);
                  v164 = *(void (**)(char *, uint64_t))(v222 + 8);
                  v164(v214, v200);
                  v165 = v197;
                  v166 = v200;
                }
                v164(v165, v166);
                (*(void (**)(char *, char *))(v209 + 8))(v208, v215);
                goto LABEL_55;
              }
LABEL_74:
              __break(1u);
LABEL_75:
              v207 = 32;
              goto LABEL_76;
            }
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          (*(void (**)(char *, char *))(v209 + 8))(v39, v215);
          v175 = v138;
LABEL_51:
          swift_bridgeObjectRelease(v175);
          goto LABEL_61;
        }
        swift_bridgeObjectRelease(v136);
      }
    }
    (*(void (**)(char *, char *))(v209 + 8))(v39, v42);
    goto LABEL_61;
  }
  sub_5E09C((uint64_t)v35, &qword_324BC8);
  v43 = type metadata accessor for LocalizerRequest(0);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
  v45 = v224;
LABEL_3:
  v46 = 1;
  return v44(v45, v46, 1, v43);
}

uint64_t sub_1FA524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_324BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1FA56C()
{
  return EnvironmentValues.fonts.getter();
}

uint64_t sub_1FA58C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t KeyPath;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t OpaqueTypeConformance2;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  __n128 v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[3];
  __int128 v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[2];
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;

  v3 = v2;
  v111 = a1;
  v107 = type metadata accessor for PlainButtonStyle(0, a2);
  v108 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_32A8D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v94 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v91 - v9;
  v11 = (int *)sub_5C154(&qword_32A990);
  __chkstk_darwin(v11);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v91 - v15;
  v96 = sub_5C154(&qword_32A998);
  v98 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v92 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_5C154(&qword_32A9A0);
  v102 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v95 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5C154(&qword_32A9A8);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v97 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_5C154(&qword_32A9B0);
  __chkstk_darwin(v101);
  v99 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_5C154(&qword_32A9B8);
  __chkstk_darwin(v106);
  v93 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5C154(&qword_32A9C0);
  v22 = __chkstk_darwin(v109);
  v110 = (uint64_t)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = v5;
  Bindable.projectedValue.getter(v5, v22);
  KeyPath = swift_getKeyPath(&unk_267730);
  Bindable<A>.subscript.getter(v118, KeyPath, v5);
  swift_release(KeyPath);
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v10, v5);
  v26 = v118[0];
  v27 = v118[1];
  v28 = v119;
  *((_QWORD *)v13 + 3) = swift_getKeyPath(&unk_267580);
  v13[32] = 0;
  *(_QWORD *)v13 = v26;
  *((_QWORD *)v13 + 1) = v27;
  v13[16] = v28;
  v29 = (uint64_t)&v13[v11[19]];
  swift_retain(v26);
  swift_retain(v27);
  sub_1FB458(v29);
  sub_1FAE98((uint64_t)&v13[v11[18]]);
  v30 = (uint64_t)&v13[v11[20]];
  v91 = v3;
  sub_1FBDB8(v30);
  swift_release(v27);
  swift_release(v26);
  sub_66F14((uint64_t)v13, (uint64_t)v16, &qword_32A990);
  v31 = sub_67060(&qword_32A9C8, &qword_32A990, (uint64_t)&unk_266FC8);
  v32 = v92;
  View.useDarkColorSchemeWhenInVibrantContext(isEnabled:)(1, v11, v31);
  sub_5E09C((uint64_t)v16, &qword_32A990);
  v33 = swift_getKeyPath(&unk_267758);
  v34 = v94;
  v35 = v112;
  Bindable.projectedValue.getter(v112, v36);
  v37 = swift_getKeyPath(&unk_267788);
  Bindable<A>.subscript.getter(&v120, v37, v35);
  swift_release(v37);
  v25(v34, v35);
  v38 = v120;
  v114 = v120;
  v115 = v121;
  v113[0] = v11;
  v113[1] = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v113, &opaque type descriptor for <<opaque return type of View.useDarkColorSchemeWhenInVibrantContext(isEnabled:)>>, 1);
  v40 = v95;
  v41 = v96;
  View.environment<A>(_:binding:)(v33, &v114, v96, OpaqueTypeConformance2);
  swift_release(*((_QWORD *)&v38 + 1));
  v42 = v33;
  v43 = (uint64_t)v93;
  swift_release(v42);
  swift_release(v38);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v32, v41);
  v45 = v105;
  PlainButtonStyle.init()(v44);
  *(_QWORD *)&v120 = v41;
  *((_QWORD *)&v120 + 1) = &type metadata for Bool;
  *(_QWORD *)&v121 = OpaqueTypeConformance2;
  v46 = swift_getOpaqueTypeConformance2(&v120, &opaque type descriptor for <<opaque return type of View.environment<A>(_:binding:)>>, 1);
  v47 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v48 = v97;
  v49 = v100;
  v50 = v107;
  View.buttonStyle<A>(_:)(v45, v100, v107, v46, v47);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v45, v50);
  v51 = (*(double (**)(char *, uint64_t))(v102 + 8))(v40, v49);
  LOBYTE(v46) = static Edge.Set.horizontal.getter(v51);
  v53 = sub_1FBFA8(v52);
  v54 = EdgeInsets.init(_all:)(v53);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v61 = v103;
  v62 = (uint64_t)v99;
  v63 = v104;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v99, v48, v104);
  v64 = v62 + *(int *)(v101 + 36);
  *(_BYTE *)v64 = v46;
  *(double *)(v64 + 8) = v54;
  *(_QWORD *)(v64 + 16) = v56;
  *(_QWORD *)(v64 + 24) = v58;
  *(_QWORD *)(v64 + 32) = v60;
  *(_BYTE *)(v64 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v48, v63);
  Bindable.wrappedValue.getter(&v120);
  v65 = v120;
  v66 = swift_getKeyPath(&unk_2677B0);
  *(_QWORD *)&v120 = v65;
  v67 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v120, v66, v67);
  swift_release(v66);
  v68 = *(_QWORD *)(v65 + 88);
  v69 = swift_release(v65);
  v70 = static Alignment.center.getter(v69);
  _FrameLayout.init(width:height:alignment:)(&v120, 0, 1, v68, 0, v70, v71);
  sub_5E1A4(v62, v43, &qword_32A9B0);
  v72 = (_OWORD *)(v43 + *(int *)(v106 + 36));
  v73 = v121;
  *v72 = v120;
  v72[1] = v73;
  v72[2] = v122;
  v74 = sub_5E09C(v62, &qword_32A9B0);
  v75 = static Animation.default.getter(v74);
  Bindable.wrappedValue.getter(&v114);
  v76 = v114;
  v77 = swift_getKeyPath(&unk_2677D8);
  *(_QWORD *)&v114 = v76;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v114, v77, v67);
  swift_release(v77);
  swift_beginAccess(v76 + 32, v113, 0, 0);
  sub_5E1A4(v76 + 32, (uint64_t)&v114, &qword_320940);
  swift_release(v76);
  v78 = v116;
  if (v116)
  {
    v79 = v117;
    v80 = sub_66898(&v114, v116);
    v81 = *(_QWORD *)(v78 - 8);
    v82 = __chkstk_darwin(v80);
    v84 = (char *)&v91 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v81 + 16))(v84, v82);
    sub_5E09C((uint64_t)&v114, &qword_320940);
    v85 = ContentInfo.id.getter(v78, *(_QWORD *)(v79 + 8));
    v87 = v86;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v84, v78);
  }
  else
  {
    sub_5E09C((uint64_t)&v114, &qword_320940);
    v85 = 0;
    v87 = 0;
  }
  v88 = v110;
  sub_5E1A4(v43, v110, &qword_32A9B8);
  v89 = (uint64_t *)(v88 + *(int *)(v109 + 36));
  *v89 = v75;
  v89[1] = v85;
  v89[2] = v87;
  sub_5E09C(v43, &qword_32A9B8);
  return sub_66F14(v88, v111, &qword_32A9C0);
}

uint64_t sub_1FAE98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65[16];
  uint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  void *v70;

  v64 = a1;
  v60 = type metadata accessor for CardAuxiliaryNavigationBarView(0);
  __chkstk_darwin(v60);
  v58 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for AutomationSemantics(0);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v57 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_3261F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_32A9D0);
  v52 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_32A9D8);
  v53 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5C154(&qword_32A9E0);
  v55 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_5C154(&qword_32A9E8);
  v59 = *(_QWORD *)(v62 - 8);
  v17 = __chkstk_darwin(v62);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ButtonRole(0, v17);
  v21.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  static ActionMetrics.notInstrumented.getter(v21);
  v23 = static Models.FlowBackAction.Dismissal.cardSetCloseTappedDismiss.getter(v22);
  v25 = v24;
  *((_QWORD *)&v69 + 1) = type metadata accessor for Models.FlowBackAction(0);
  v70 = &protocol witness table for Models.FlowBackAction;
  sub_668BC(&v68);
  Models.FlowBackAction.init(actionMetrics:dismissal:)(v5, v23, v25);
  v26 = type metadata accessor for BooksToolbarIconView(0);
  v27 = sub_648E0(&qword_32A9F0, (uint64_t (*)(uint64_t))&type metadata accessor for BooksToolbarIconView, (uint64_t)&protocol conformance descriptor for BooksToolbarIconView);
  ActionButton.init(role:action:label:)(v8, &v68, sub_1FC0FC, 0, v26, v27);
  v28 = sub_5C154(&qword_327BA8);
  v29 = sub_67060(&qword_32A9F8, &qword_32A9D0, (uint64_t)&protocol conformance descriptor for ActionButton<A>);
  v30 = sub_67060(&qword_327BB0, &qword_327BA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1FC108, 0, v9, v28, v29, v30);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v9);
  v31 = v56;
  v66 = v56;
  *(_QWORD *)&v68 = v9;
  *((_QWORD *)&v68 + 1) = v28;
  *(_QWORD *)&v69 = v29;
  *((_QWORD *)&v69 + 1) = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  v33 = sub_201798();
  View.contextMenu<A>(menuItems:)(sub_201790, v65, v12, &type metadata for CardAuxiliaryNavigationBarView.CloseButtonContextMenu, OpaqueTypeConformance2, v33);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v12);
  v68 = 0u;
  v69 = 0u;
  memset(v67, 0, sizeof(v67));
  v34 = v57;
  static AutomationSemantics.productPage(elementName:id:parentId:)(0x74754265736F6C63, 0xEB000000006E6F74, &v68, v67);
  sub_5E09C((uint64_t)v67, &qword_31F8B0);
  sub_5E09C((uint64_t)&v68, &qword_31F8B0);
  *(_QWORD *)&v68 = v12;
  *((_QWORD *)&v68 + 1) = &type metadata for CardAuxiliaryNavigationBarView.CloseButtonContextMenu;
  v35 = v60;
  *(_QWORD *)&v69 = OpaqueTypeConformance2;
  *((_QWORD *)&v69 + 1) = v33;
  v36 = (uint64_t)v58;
  v37 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.contextMenu<A>(menuItems:)>>, 1);
  v38 = v54;
  View.automationSemantics(_:)(v34, v54, v37);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v63);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v16, v38);
  v39 = v31 + *(int *)(v35 + 36);
  v40 = *(_BYTE *)v39;
  v41 = *(_QWORD *)(v39 + 8);
  LOBYTE(v68) = v40;
  *((_QWORD *)&v68 + 1) = v41;
  v42 = sub_5C154(&qword_325B50);
  State.wrappedValue.getter(v67, v42);
  LOBYTE(v11) = v67[0];
  sub_5E11C(v31, v36, type metadata accessor for CardAuxiliaryNavigationBarView);
  if ((v11 & 1) != 0)
  {
    sub_6685C(v36, type metadata accessor for CardAuxiliaryNavigationBarView);
    v43 = 0;
  }
  else
  {
    v44 = v36 + *(int *)(v35 + 40);
    v45 = *(_BYTE *)v44;
    v46 = *(_QWORD *)(v44 + 8);
    LOBYTE(v68) = v45;
    *((_QWORD *)&v68 + 1) = v46;
    State.wrappedValue.getter(v67, v42);
    sub_6685C(v36, type metadata accessor for CardAuxiliaryNavigationBarView);
    v43 = LOBYTE(v67[0]) ^ 1;
  }
  v47 = v59;
  v48 = v64;
  v49 = v62;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v64, v19, v62);
  *(_BYTE *)(v48 + *(int *)(sub_5C154(&qword_32AA08) + 36)) = v43 & 1;
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v19, v49);
}

uint64_t sub_1FB458@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t);
  char *v52;
  char *v53;
  uint64_t result;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t OpaqueTypeConformance2;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v109 = a1;
  v94 = type metadata accessor for AccessibilityTraits(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_5C154(&qword_31F5F8);
  __chkstk_darwin(v89);
  v90 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v87 = (char *)&v79 - v5;
  v6 = type metadata accessor for DynamicTypeSize(0);
  v112 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v108 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v107 = (char *)&v79 - v9;
  v91 = sub_5C154(&qword_31F600);
  __chkstk_darwin(v91);
  v86 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v88 = (uint64_t)&v79 - v12;
  v105 = type metadata accessor for ColorConstants(0);
  v104 = *(_QWORD *)(v105 - 8);
  v13 = __chkstk_darwin(v105);
  v103 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for FontConstants.Navigation(0, v13);
  v101 = *(_QWORD *)(v102 - 8);
  v15 = __chkstk_darwin(v102);
  v100 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for FontConstants(0, v15);
  v96 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for LocalizedText(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_5C154(&qword_325B38);
  __chkstk_darwin(v95);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_5C154(&qword_32AA10);
  __chkstk_darwin(v111);
  v110 = (uint64_t)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_5C154(&qword_32AA18);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v83 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5C154(&qword_32AA20);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v82 = (char *)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5C154(&qword_32A8D8);
  v106 = v1;
  Bindable.wrappedValue.getter(&v114);
  v31 = v114;
  KeyPath = swift_getKeyPath(&unk_2677D8);
  v113 = v31;
  v33 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v113, KeyPath, v33);
  swift_release(KeyPath);
  swift_beginAccess(v31 + 32, &v113, 0, 0);
  sub_5E1A4(v31 + 32, (uint64_t)&v114, &qword_320940);
  swift_release(v31);
  if (v116)
  {
    v80 = v29;
    v81 = v28;
    sub_5DC98(&v114, (uint64_t)&v117);
    v34 = v118;
    v35 = v119;
    sub_66898(&v117, v118);
    v36 = AssetInfo.title.getter(v34, v35);
    v38 = v37;
    static LocalizerRequest.verbatim(_:)(v36);
    swift_bridgeObjectRelease(v38);
    LocalizedText.init(_:)(v21);
    type metadata accessor for CardAuxiliaryNavigationBarView(0);
    v39 = sub_77618((uint64_t)v18);
    v40 = v100;
    FontConstants.navigation.getter(v39);
    v41 = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v18, v98);
    v42 = FontConstants.Navigation.title.getter(v41);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v40, v102);
    v43 = swift_getKeyPath(&unk_267808);
    v44 = v97;
    v45 = v99;
    (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v25, v23, v99);
    v46 = (uint64_t *)&v25[*(int *)(v95 + 36)];
    *v46 = v43;
    v46[1] = v42;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v23, v45);
    v47 = v103;
    v48 = sub_76AA0(v103);
    v49 = ColorConstants.booksLabel.getter(v48);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v47, v105);
    v50 = v110;
    sub_5E1A4((uint64_t)v25, v110, &qword_325B38);
    *(_QWORD *)(v50 + *(int *)(v111 + 36)) = v49;
    sub_5E09C((uint64_t)v25, &qword_325B38);
    v51 = *(void (**)(char *, _QWORD, uint64_t))(v112 + 104);
    v52 = v107;
    v51(v107, enum case for DynamicTypeSize.xSmall(_:), v6);
    v53 = v108;
    v51(v108, enum case for DynamicTypeSize.xLarge(_:), v6);
    sub_648E0(&qword_31F610, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    result = dispatch thunk of static Comparable.<= infix(_:_:)(v52, v53, v6);
    if ((result & 1) != 0)
    {
      v55 = v89;
      v56 = v87;
      v57 = &v87[*(int *)(v89 + 48)];
      v58 = v112;
      v59 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
      v59(v87, v52, v6);
      v59(v57, v53, v6);
      v60 = v90;
      v61 = &v90[*(int *)(v55 + 48)];
      v62 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v62(v90, v56, v6);
      v62(v61, v57, v6);
      v63 = (uint64_t)v86;
      v59(v86, v60, v6);
      v64 = *(void (**)(char *, uint64_t))(v58 + 8);
      v64(v61, v6);
      v65 = &v60[*(int *)(v55 + 48)];
      v59(v60, v56, v6);
      v59(v65, v57, v6);
      v66 = v91;
      v59((char *)(v63 + *(int *)(v91 + 36)), v65, v6);
      v64(v60, v6);
      v67 = v88;
      sub_66F14(v63, v88, &qword_31F600);
      v68 = sub_201808();
      v69 = sub_67060(&qword_31F620, &qword_31F600, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
      v70 = v83;
      v71 = v110;
      v72 = v111;
      View.dynamicTypeSize<A>(_:)(v67, v111, v66, v68);
      sub_5E09C(v67, &qword_31F600);
      v73 = sub_5E09C(v71, &qword_32AA10);
      v74 = v92;
      static AccessibilityTraits.isHeader.getter(v73);
      *(_QWORD *)&v114 = v72;
      *((_QWORD *)&v114 + 1) = v66;
      v115 = v68;
      v116 = v69;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v114, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
      v76 = (uint64_t)v82;
      v77 = v85;
      View.accessibilityAddTraits(_:)(v74, v85, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v74, v94);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v70, v77);
      v78 = v109;
      sub_66F14(v76, v109, &qword_32AA20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v78, 0, 1, v81);
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v117);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_5E09C((uint64_t)&v114, &qword_320940);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v109, 1, 1, v28);
  }
  return result;
}

uint64_t sub_1FBDB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  sub_5C154(&qword_32A8D8);
  Bindable.wrappedValue.getter(&v23);
  v2 = v23;
  type metadata accessor for CardAuxiliaryNavigationBarView(0);
  v3 = sub_5C154(&qword_325B50);
  State.projectedValue.getter(&v23, v3);
  v4 = v23;
  v5 = v24;
  v6 = v25;
  State.projectedValue.getter(&v23, v3);
  v7 = v23;
  v8 = v24;
  LOBYTE(v3) = v25;
  v9 = type metadata accessor for CardAuxiliaryNavigationBarViewModel(0);
  v10 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  Bindable<A>.init(wrappedValue:)(v2, v9, v10);
  v11 = (int *)type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView(0);
  v12 = a1 + v11[5];
  *(_QWORD *)v12 = v4;
  *(_QWORD *)(v12 + 8) = v5;
  *(_BYTE *)(v12 + 16) = v6;
  v13 = a1 + v11[6];
  *(_QWORD *)v13 = v7;
  *(_QWORD *)(v13 + 8) = v8;
  *(_BYTE *)(v13 + 16) = v3;
  v14 = (_QWORD *)(a1 + v11[7]);
  *v14 = swift_getKeyPath(&unk_267550);
  v15 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = a1 + v11[8];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_267838);
  *(_BYTE *)(v16 + 8) = 0;
  v17 = a1 + v11[9];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_267868);
  *(_BYTE *)(v17 + 40) = 0;
  v18 = (uint64_t *)(a1 + v11[10]);
  v19 = type metadata accessor for ProfileRestrictions(0);
  v20 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = EnvironmentObject.init()(v19, v20);
  *v18 = result;
  v18[1] = v22;
  return result;
}

double sub_1FBFA8(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v18;
  uint64_t v19;

  v19 = type metadata accessor for SizeConstants.Spacing(0, a1);
  v2 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1 + *(int *)(type metadata accessor for CardAuxiliaryNavigationBarView(0) + 24);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  sub_64DD8(*(_QWORD *)v9, v11);
  v12 = sub_768E8(v10, v11);
  sub_64FFC(v10, v11);
  v13 = sub_76D64((uint64_t)v8);
  SizeConstants.spacing.getter(v13);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v12 & 1) != 0)
    v15 = SizeConstants.Spacing.l.getter(v14);
  else
    v15 = SizeConstants.Spacing.xl.getter(v14);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v19);
  return v16;
}

uint64_t sub_1FC0FC()
{
  return sub_1FF2AC(&enum case for SymbolImage.Kind.xmark(_:));
}

uint64_t sub_1FC108@<X0>(char *a1@<X8>)
{
  return sub_1FF338(&enum case for SymbolImage.Kind.xmark(_:), a1);
}

uint64_t sub_1FC114@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_5C154(&qword_32A8D8);
  Bindable.wrappedValue.getter(&v6);
  v2 = v6;
  Strong = swift_unknownObjectWeakLoadStrong(v6 + 96);
  swift_release(v2);
  v4 = swift_allocObject(&unk_2F45E8, 24, 7);
  swift_unknownObjectWeakInit(v4 + 16);
  result = swift_unknownObjectRelease(Strong);
  *a1 = sub_D7C24;
  a1[1] = (uint64_t (*)())v4;
  return result;
}

_QWORD *sub_1FC1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for CardAuxiliaryNavigationBarViewModel(0);
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  Bindable<A>.init(wrappedValue:)(a1, v4, v5);
  v6 = (int *)type metadata accessor for CardAuxiliaryNavigationBarView(0);
  v7 = (_QWORD *)(a2 + v6[5]);
  *v7 = swift_getKeyPath(&unk_267550);
  v8 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  v9 = a2 + v6[6];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_267580);
  *(_BYTE *)(v9 + 8) = 0;
  v10 = (_QWORD *)(a2 + v6[7]);
  *v10 = swift_getKeyPath(&unk_2675B0);
  v11 = sub_5C154(&qword_320290);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  v12 = (_QWORD *)(a2 + v6[8]);
  *v12 = swift_getKeyPath(&unk_2675E0);
  v13 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  v14 = a2 + v6[9];
  v19 = 0;
  State.init(wrappedValue:)(&v20, &v19, &type metadata for Bool);
  v15 = v21;
  *(_BYTE *)v14 = v20;
  *(_QWORD *)(v14 + 8) = v15;
  v16 = a2 + v6[10];
  v19 = 0;
  result = State.init(wrappedValue:)(&v20, &v19, &type metadata for Bool);
  v18 = v21;
  *(_BYTE *)v16 = v20;
  *(_QWORD *)(v16 + 8) = v18;
  return result;
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarView(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_32A938, (uint64_t)&nominal type descriptor for CardAuxiliaryNavigationBarView);
}

uint64_t sub_1FC354()
{
  return EnvironmentValues.fonts.getter();
}

uint64_t sub_1FC378@<X0>(uint64_t (*a1)(__n128)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;

  v33 = a3;
  v5 = sub_5C154(&qword_32AB68);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - v9;
  v11 = sub_5C154(&qword_326D40);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v32 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v31 - v16;
  v18 = (void *)a1(v15);
  v34 = v7;
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, "auxiliaryNavigationBarViewControllerCanCloseAsset");
    swift_unknownObjectRelease(v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_allocObject(&unk_2F4690, 32, 7);
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  __chkstk_darwin(v21);
  *((_BYTE *)&v31 - 32) = v20;
  *(&v31 - 3) = (uint64_t)a1;
  *(&v31 - 2) = a2;
  swift_retain(a2);
  Button.init(action:label:)(sub_202960, v21, sub_20296C, &v31 - 6, &type metadata for Text);
  if (v20)
  {
    v22 = swift_allocObject(&unk_2F46B8, 32, 7);
    *(_QWORD *)(v22 + 16) = a1;
    *(_QWORD *)(v22 + 24) = a2;
    __chkstk_darwin(v22);
    *(&v31 - 2) = (uint64_t)a1;
    *(&v31 - 1) = a2;
    swift_retain(a2);
    Button.init(action:label:)(sub_202978, v22, sub_2029C8, &v31 - 4, &type metadata for Text);
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  v25 = v33;
  v24 = (uint64_t)v34;
  v26 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v23, 1, v11);
  v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v27(v26, v17, v11);
  sub_5E1A4((uint64_t)v10, v24, &qword_32AB68);
  v27(v25, v26, v11);
  v28 = sub_5C154(&qword_32AB70);
  sub_5E1A4(v24, (uint64_t)&v25[*(int *)(v28 + 48)], &qword_32AB68);
  sub_5E09C((uint64_t)v10, &qword_32AB68);
  v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v17, v11);
  sub_5E09C(v24, &qword_32AB68);
  return ((uint64_t (*)(char *, uint64_t))v29)(v26, v11);
}

void sub_1FC65C(char a1@<W0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & 1) == 0
    && (v4 = (void *)a2()) != 0
    && (v5 = v4,
        v6 = objc_msgSend(v4, "stringForReturnToRootBarItem"),
        swift_unknownObjectRelease(v5),
        v6))
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

  }
  else
  {
    v7 = sub_17EB50();
    v9 = v10;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = _swiftEmptyArrayStorage;
}

uint64_t sub_1FC72C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1FC378(*(uint64_t (**)(__n128))v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_1FC734@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  char *v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[3];

  v84 = a2;
  v77 = type metadata accessor for UnevenRoundedRectangle(0);
  __chkstk_darwin(v77);
  v4 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorConstants(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ProgressiveBlurMaterial(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5C154(&qword_32AA50);
  __chkstk_darwin(v75);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_5C154(&qword_32AA58);
  __chkstk_darwin(v76);
  v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_5C154(&qword_32AA60);
  __chkstk_darwin(v78);
  v80 = (uint64_t)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_5C154(&qword_32AA68);
  __chkstk_darwin(v79);
  v83 = (uint64_t)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5C154(&qword_32AA70);
  v20 = __chkstk_darwin(v81);
  v82 = (uint64_t)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((_BYTE *)a1 + 8) == 1)
  {
    v22 = static Color.clear.getter(v20);
    v23 = v22;
  }
  else
  {
    type metadata accessor for CardAuxiliaryNavigationBarView.BackgroundViewModifier(0);
    v74 = v15;
    v24 = sub_76AA0((uint64_t)v9);
    v25 = ColorConstants.booksBackground.getter(v24);
    v26 = v6;
    v27 = v25;
    v15 = v74;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v5);
    v23 = Color.opacity(_:)(0.65);
    v22 = swift_release(v27);
  }
  v28 = static UnitPoint.top.getter(v22);
  v30 = v29;
  v32 = static UnitPoint.bottom.getter(v31);
  v34 = ProgressiveBlurMaterial.init(blurRadius:saturationAmount:fillColor:start:end:fadeOffset:)(v23, 24.0, 1.0, v28, v30, v32, v33, 0.5);
  v35 = static Animation.easeInOut(duration:)(v34, 0.2);
  v36 = *((_BYTE *)a1 + 8);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v10);
  v37 = &v15[*(int *)(v75 + 36)];
  *(_QWORD *)v37 = v35;
  v37[8] = v36;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v38 = *a1;
  KeyPath = swift_getKeyPath(&unk_2678A0);
  *(_QWORD *)&v86[0] = v38;
  v40 = sub_648E0((unint64_t *)&qword_322200, type metadata accessor for CardAuxiliaryNavigationBarBackgroundViewModel, (uint64_t)&unk_25BA9C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, KeyPath, v40);
  swift_release(KeyPath);
  v41 = *(double *)(v38 + 48);
  v42 = *a1;
  v43 = swift_getKeyPath(&unk_2678A0);
  *(_QWORD *)&v86[0] = v42;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v43, v40);
  swift_release(v43);
  v44 = *(double *)(v42 + 48);
  v45 = &v4[*(int *)(v77 + 20)];
  v46 = enum case for RoundedCornerStyle.continuous(_:);
  v48 = type metadata accessor for RoundedCornerStyle(0, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v45, v46, v48);
  *(double *)v4 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v41, v44, 0.0, 0.0);
  *((_QWORD *)v4 + 1) = v49;
  *((_QWORD *)v4 + 2) = v50;
  *((_QWORD *)v4 + 3) = v51;
  v52 = (uint64_t)&v17[*(int *)(v76 + 36)];
  sub_5E11C((uint64_t)v4, v52, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  *(_WORD *)(v52 + *(int *)(sub_5C154(&qword_32AA78) + 36)) = 256;
  sub_5E1A4((uint64_t)v15, (uint64_t)v17, &qword_32AA50);
  sub_6685C((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  sub_5E09C((uint64_t)v15, &qword_32AA50);
  v53 = *a1;
  v54 = swift_getKeyPath(&unk_2678A0);
  *(_QWORD *)&v86[0] = v53;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v54, v40);
  swift_release(v54);
  v55 = *(_QWORD *)(v53 + 40);
  v56 = v80;
  sub_5E1A4((uint64_t)v17, v80, &qword_32AA58);
  *(_QWORD *)(v56 + *(int *)(v78 + 36)) = v55;
  sub_5E09C((uint64_t)v17, &qword_32AA58);
  v57 = *a1;
  v58 = swift_getKeyPath(&unk_2678A0);
  *(_QWORD *)&v86[0] = v57;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v58, v40);
  v59 = swift_release(v58);
  v60 = *(_QWORD *)(v57 + 16);
  v61 = static Alignment.center.getter(v59);
  _FrameLayout.init(width:height:alignment:)(v86, 0, 1, v60, 0, v61, v62);
  v63 = v83;
  sub_5E1A4(v56, v83, &qword_32AA60);
  v64 = (_OWORD *)(v63 + *(int *)(v79 + 36));
  v65 = v86[1];
  *v64 = v86[0];
  v64[1] = v65;
  v64[2] = v86[2];
  sub_5E09C(v56, &qword_32AA60);
  v66 = *a1;
  v67 = swift_getKeyPath(&unk_2678A0);
  v85 = v66;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v67, v40);
  swift_release(v67);
  v68 = *(_QWORD *)(v66 + 24);
  v69 = *(_QWORD *)(v66 + 32);
  v70 = v82;
  sub_5E1A4(v63, v82, &qword_32AA68);
  v71 = (_QWORD *)(v70 + *(int *)(v81 + 36));
  *v71 = v68;
  v71[1] = v69;
  sub_5E09C(v63, &qword_32AA68);
  return sub_66F14(v70, v84, &qword_32AA70);
}

uint64_t sub_1FCD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v5 = static Alignment.center.getter(a1);
  v7 = v6;
  v8 = a2 + *(int *)(sub_5C154(&qword_32AA38) + 36);
  sub_1FC734(v2, v8);
  v9 = (uint64_t *)(v8 + *(int *)(sub_5C154(&qword_32AA40) + 36));
  *v9 = v5;
  v9[1] = v7;
  v10 = sub_5C154(&qword_32AA48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, a1, v10);
}

uint64_t sub_1FCDFC@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t OpaqueTypeConformance2;
  uint64_t v88;
  __n128 v89;
  void (*v90)(char *, uint64_t, __n128);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;

  v222 = a1;
  v2 = sub_5C154(&qword_325578);
  __chkstk_darwin(v2);
  v213 = (char *)&v174 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for MetricsPipeline(0);
  v211 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v210 = (uint64_t *)((char *)&v174 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_5C154(&qword_3237B8);
  __chkstk_darwin(v5);
  v205 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = type metadata accessor for Metrics.NavigationType(0);
  v203 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v202 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for PageMetrics(0);
  v207 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v206 = (char *)&v174 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_3202B0);
  __chkstk_darwin(v9);
  v209 = (uint64_t)&v174 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView(0);
  __chkstk_darwin(v220);
  v199 = (uint64_t)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for Image.Scale(0);
  v195 = *(_QWORD *)(v196 - 8);
  v12 = __chkstk_darwin(v196);
  v194 = (char *)&v174 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for SectionData.ComponentContained(0, v12);
  v185 = *(_QWORD *)(v186 - 8);
  v14 = __chkstk_darwin(v186);
  v188 = (char *)&v174 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for SectionType(0, v14);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v184 = (char *)&v174 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v17);
  v192 = (uint64_t)&v174 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  *(_QWORD *)&v218 = (char *)&v174 - v21;
  v226 = type metadata accessor for DataStackID(0, v20);
  v181 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v225 = (char *)&v174 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v221 = (char *)&v174 - v24;
  v25 = sub_5C154((uint64_t *)&unk_3260F0);
  __chkstk_darwin(v25);
  v180 = (uint64_t)&v174 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v27);
  v229 = (uint64_t)&v174 - v29;
  v219 = type metadata accessor for SizeConstants.Spacing(0, v28);
  v215 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v31 = (char *)&v174 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for SizeConstants(0);
  v32 = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v34 = (char *)&v174 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_5C154(&qword_32AB78);
  __chkstk_darwin(v217);
  v36 = (double *)((char *)&v174 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v223 = sub_5C154(&qword_32AB80);
  v176 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v216 = (char *)&v174 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_5C154(&qword_32AB88);
  v187 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v224 = (char *)&v174 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_5C154(&qword_32AB90);
  v191 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v189 = (char *)&v174 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_5C154(&qword_32AB98);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v193 = (char *)&v174 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = sub_5C154(&qword_32ABA0);
  __chkstk_darwin(v227);
  v228 = (char *)&v174 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_5C154(&qword_32ABA8);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v201 = (char *)&v174 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v200 = (char *)&v174 - v46;
  v198 = sub_5C154(&qword_32A8D8);
  v47 = v1;
  Bindable.wrappedValue.getter(&v231);
  v48 = v231;
  KeyPath = swift_getKeyPath(&unk_2677D8);
  v230 = v48;
  v197 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v230, KeyPath, v197);
  swift_release(KeyPath);
  swift_beginAccess(v48 + 32, &v230, 0, 0);
  sub_5E1A4(v48 + 32, (uint64_t)&v231, &qword_320940);
  swift_release(v48);
  if (!v232)
  {
    sub_5E09C((uint64_t)&v231, &qword_320940);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v222, 1, 1, v42);
  }
  v174 = v43;
  v175 = v42;
  sub_5DC98(&v231, (uint64_t)&v233);
  v50 = v220;
  v51 = sub_76D64((uint64_t)v34);
  SizeConstants.spacing.getter(v51);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v214);
  v53 = SizeConstants.Spacing.xl.getter(v52);
  v54.n128_f64[0] = (*(double (**)(char *, uint64_t))(v215 + 8))(v31, v219);
  *(_QWORD *)v36 = static VerticalAlignment.center.getter(v54);
  v36[1] = v53;
  *((_BYTE *)v36 + 16) = 0;
  v55 = sub_5C154(&qword_32ABB0);
  sub_1FE25C((uint64_t)&v233, v1, (char *)v36 + *(int *)(v55 + 44));
  v56 = v234;
  v57 = v235;
  sub_66898(&v233, v234);
  v58 = ContentInfo.id.getter(v56, *(_QWORD *)(v57 + 8));
  v60 = v59;
  sub_789DC((uint64_t)&v231);
  v61 = sub_67060(&qword_32ABB8, &qword_32AB78, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v62 = v216;
  v63 = v217;
  v215 = v61;
  View.observeLibraryAssetState(for:libraryAssetStateObserverProvider:)(v58, v60, &v231, v217, v61);
  swift_bridgeObjectRelease(v60);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v231);
  sub_5E09C((uint64_t)v36, &qword_32AB78);
  v64 = v1 + *(int *)(v50 + 32);
  v65 = *(id *)v64;
  v66 = *(_BYTE *)(v64 + 8);
  sub_AAFF4(*(id *)v64, v66);
  v67 = (void *)sub_77EB0(v65, v66);
  sub_794D8(v65, v66);

  v219 = v47;
  v68 = v63;
  if (v67)
  {
    sub_5E0D8((uint64_t)&v233, (uint64_t)&v231);
    sub_AAFF4(v65, v66);
    v69 = sub_77EB0(v65, v66);
    sub_794D8(v65, v66);
    v71 = v218;
    v72 = v221;
    v73 = v229;
    if (!v69)
    {
      __break(1u);
      goto LABEL_25;
    }
    ContentData.init(from:with:)(&v231, v69);
    v74 = type metadata accessor for ContentData(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v73, 0, 1, v74);
  }
  else
  {
    v74 = type metadata accessor for ContentData(0);
    v73 = v229;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v229, 1, 1, v74);
    v71 = v218;
    v72 = v221;
  }
  v76 = v234;
  v77 = v235;
  sub_66898(&v233, v234);
  v78 = ContentInfo.id.getter(v76, *(_QWORD *)(v77 + 8));
  DataStackID.init(stringLiteral:)(v78, v79);
  v80 = sub_5C154(&qword_321F20);
  v81 = swift_allocObject(v80, 80, 7);
  v218 = xmmword_258070;
  *(_OWORD *)(v81 + 16) = xmmword_258070;
  v82 = (_QWORD *)(v81 + 32);
  v83 = v180;
  sub_5E1A4(v73, v180, (uint64_t *)&unk_3260F0);
  type metadata accessor for ContentData(0);
  v84 = *(_QWORD *)(v74 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v83, 1, v74) == 1)
  {
    sub_5E09C(v83, (uint64_t *)&unk_3260F0);
    *(_OWORD *)v82 = 0u;
    *(_OWORD *)(v81 + 48) = 0u;
    *(_OWORD *)(v81 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v81 + 56) = v74;
    *(_QWORD *)(v81 + 64) = sub_648E0(&qword_326250, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
    *(_QWORD *)(v81 + 72) = sub_648E0(&qword_326258, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
    v85 = sub_668BC(v82);
    v72 = v221;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v84 + 32))(v85, v83, v74);
  }
  v86 = v176;
  *(_QWORD *)&v231 = v68;
  *((_QWORD *)&v231 + 1) = v215;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v231, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetState(for:libraryAssetStateObserverProvider:)>>, 1);
  v88 = v223;
  View.appAnalyticsData(_:for:)(v81, v72, v223, OpaqueTypeConformance2);
  v89 = swift_bridgeObjectRelease(v81);
  v90 = *(void (**)(char *, uint64_t, __n128))(v181 + 8);
  v90(v72, v226, v89);
  sub_5E09C(v229, (uint64_t *)&unk_3260F0);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v62, v88);
  v91 = v234;
  v92 = v235;
  sub_66898(&v233, v234);
  v93 = AssetInfo.title.getter(v91, v92);
  v95 = v94;
  v96 = v184;
  (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v184, enum case for SectionType.unknown(_:), v183);
  v97 = v188;
  (*(void (**)(char *, _QWORD, uint64_t))(v185 + 104))(v188, enum case for SectionData.ComponentContained.unknown(_:), v186);
  SectionData.init(sectionID:name:sectionType:componentContained:exposureIndex:)(0x7261622D76616ELL, 0xE700000000000000, v93, v95, v96, v97, 0);
  v98 = type metadata accessor for SectionData(0);
  v99 = *(_QWORD *)(v98 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v99 + 56))(v71, 0, 1, v98);
  v100 = v234;
  v101 = v235;
  sub_66898(&v233, v234);
  v102 = ContentInfo.id.getter(v100, *(_QWORD *)(v101 + 8));
  DataStackID.init(stringLiteral:)(v102, v103);
  v104 = swift_allocObject(v80, 80, 7);
  *(_OWORD *)(v104 + 16) = v218;
  v105 = (_QWORD *)(v104 + 32);
  v106 = v192;
  sub_5E1A4(v71, v192, (uint64_t *)&unk_326100);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v106, 1, v98) == 1)
  {
    sub_5E09C(v106, (uint64_t *)&unk_326100);
    *(_OWORD *)v105 = 0u;
    *(_OWORD *)(v104 + 48) = 0u;
    *(_OWORD *)(v104 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v104 + 56) = v98;
    *(_QWORD *)(v104 + 64) = sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    *(_QWORD *)(v104 + 72) = sub_648E0((unint64_t *)&unk_322500, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    v107 = sub_668BC(v105);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v99 + 32))(v107, v106, v98);
  }
  v108 = v177;
  *(_QWORD *)&v231 = v223;
  *((_QWORD *)&v231 + 1) = OpaqueTypeConformance2;
  v109 = swift_getOpaqueTypeConformance2(&v231, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v110 = v189;
  v111 = v224;
  v112 = v225;
  v113 = v190;
  View.appAnalyticsData(_:for:)(v104, v225, v190, v109);
  v114 = swift_bridgeObjectRelease(v104);
  v90(v112, v226, v114);
  sub_5E09C(v71, (uint64_t *)&unk_326100);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v111, v113);
  v115 = v195;
  v116 = v194;
  v117 = v196;
  (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v194, enum case for Image.Scale.medium(_:), v196);
  *(_QWORD *)&v231 = v113;
  *((_QWORD *)&v231 + 1) = v109;
  v118 = swift_getOpaqueTypeConformance2(&v231, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v119 = v193;
  View.symbol(imageScale:)(v116, v108, v118);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
  (*(void (**)(char *, uint64_t))(v191 + 8))(v110, v108);
  v120 = v234;
  v121 = v235;
  sub_66898(&v233, v234);
  LOBYTE(v120) = AssetInfo.isExplicit.getter(v120, v121);
  v122 = v199;
  sub_5E11C(v219, v199, type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView);
  if ((v120 & 1) == 0)
  {
    v125 = 0;
    goto LABEL_17;
  }
  v70 = v122 + *(int *)(v220 + 40);
  if (!*(_QWORD *)v70)
  {
LABEL_25:
    v171 = *(_QWORD *)(v70 + 8);
    v172 = type metadata accessor for ProfileRestrictions(0);
    v173 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
    result = EnvironmentObject.error()(0, v171, v172, v173);
    __break(1u);
    return result;
  }
  v123 = *(id *)v70;
  v124 = dispatch thunk of ProfileRestrictions.isExplicitContentAllowed.getter();

  v125 = v124 ^ 1;
LABEL_17:
  v126 = v179;
  v127 = v178;
  sub_6685C(v122, type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView);
  v128 = swift_getKeyPath(&unk_2679D8);
  v129 = swift_allocObject(&unk_2F46E0, 17, 7);
  *(_BYTE *)(v129 + 16) = v125 & 1;
  v130 = v228;
  (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v228, v119, v126);
  v131 = (uint64_t *)&v130[*(int *)(v227 + 36)];
  *v131 = v128;
  v131[1] = (uint64_t)sub_ADEE8;
  v131[2] = v129;
  (*(void (**)(char *, uint64_t))(v127 + 8))(v119, v126);
  v132 = v234;
  v133 = v235;
  sub_66898(&v233, v234);
  v134 = AssetInfo.supportsUnifiedProductPage.getter(v132, v133);
  if ((v134 & 1) != 0)
    v135 = 0x5064656966696E55;
  else
    v135 = 0x746375646F7250;
  if ((v134 & 1) != 0)
    v136 = 0xEE00746375646F72;
  else
    v136 = 0xE700000000000000;
  v137 = v234;
  v138 = v235;
  sub_66898(&v233, v234);
  v139 = ContentInfo.id.getter(v137, *(_QWORD *)(v138 + 8));
  v141 = v140;
  v142 = v203;
  v143 = v202;
  v144 = v204;
  (*(void (**)(char *, _QWORD, uint64_t))(v203 + 104))(v202, enum case for Metrics.NavigationType.push(_:), v204);
  v145 = type metadata accessor for JSNetworkPerformanceMetrics(0);
  v146 = (uint64_t)v205;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 56))(v205, 1, 1, v145);
  v147 = v206;
  static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(v135, v136, v139, v141, v143, v146, 0, 0);
  swift_bridgeObjectRelease(v136);
  swift_bridgeObjectRelease(v141);
  sub_5E09C(v146, &qword_3237B8);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v143, v144);
  Bindable.wrappedValue.getter(&v231);
  v148 = v231;
  v149 = swift_getKeyPath(&unk_267A08);
  *(_QWORD *)&v231 = v148;
  v150 = v197;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v231, v149, v197);
  swift_release(v149);
  v151 = *(_QWORD *)(v148 + 24);
  swift_retain(v151);
  swift_release(v148);
  v152 = v209;
  sub_1FF6A8(v209);
  swift_release(v151);
  v153 = v207;
  v154 = v208;
  (*(void (**)(char *, uint64_t))(v207 + 8))(v147, v208);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v153 + 56))(v152, 0, 1, v154);
  Bindable.wrappedValue.getter(&v231);
  v155 = v231;
  v156 = swift_getKeyPath(&unk_267A08);
  *(_QWORD *)&v231 = v155;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v231, v156, v150);
  swift_release(v156);
  v157 = *(_QWORD *)(v155 + 24);
  swift_retain(v157);
  swift_release(v155);
  v158 = v210;
  v159 = v212;
  BaseObjectGraph.inject<A>(_:)(v210, v212, v212);
  swift_release(v157);
  type metadata accessor for BasicImpressionsTracker(0);
  v160 = BasicImpressionsTracker.__allocating_init(threshold:)(1.0);
  v161 = type metadata accessor for ClickLocationConfiguration(0);
  v162 = (uint64_t)v213;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v213, 1, 1, v161);
  v163 = sub_202A34();
  v164 = v201;
  v165 = (uint64_t)v228;
  View.pageMetrics(_:pipeline:tracker:clickLocationConfiguration:)(v152, v158, v160, &protocol witness table for BasicImpressionsTracker, v162, v227, v163);
  swift_release(v160);
  sub_5E09C(v162, &qword_325578);
  (*(void (**)(_QWORD *, uint64_t))(v211 + 8))(v158, v159);
  sub_5E09C(v152, &qword_3202B0);
  sub_5E09C(v165, &qword_32ABA0);
  v166 = v174;
  v167 = *(void (**)(char *, char *, uint64_t))(v174 + 32);
  v168 = v200;
  v169 = v175;
  v167(v200, v164, v175);
  v170 = v222;
  v167(v222, v168, v169);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v170, 0, 1, v169);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v233);
}

uint64_t sub_1FE25C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t BubbleTipViewModifier;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t OpaqueTypeConformance2;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  void (*v136)(uint64_t, uint64_t);
  uint64_t v138;
  _QWORD v139[2];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t ToolbarButton;
  char *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  char v194[8];
  _QWORD *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;

  v155 = (_QWORD *)a1;
  v184 = a3;
  v182 = type metadata accessor for LiftHoverEffect(0);
  v178 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v176 = (char *)&v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = v6;
  v156 = v6;
  v164 = v7;
  __chkstk_darwin(v6);
  v165 = v9;
  v166 = (uint64_t)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_5C154(&qword_32ABC8);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_5C154(&qword_32ABD0);
  v172 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v171 = (char *)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_5C154(&qword_32ABD8);
  v175 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v173 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_5C154(&qword_32ABE0);
  v180 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v181 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v179 = (char *)&v142 - v15;
  v16 = type metadata accessor for AutomationSemantics(0);
  v186 = *(_QWORD *)(v16 - 8);
  v187 = v16;
  __chkstk_darwin(v16);
  v185 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_5C154(&qword_32ABE8);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v143 = (char *)&v142 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_5C154(&qword_32ABF0);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_5C154(&qword_32ABF8);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v145 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_321470);
  __chkstk_darwin(v21);
  v150 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for URL(0);
  v153 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v151 = (char *)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for SizeConstants(0);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v159 = (uint64_t)&v142 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_32AC00);
  __chkstk_darwin(v25);
  v167 = (uint64_t)&v142 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v27);
  v193 = (uint64_t)&v142 - v29;
  ToolbarButton = type metadata accessor for WantToReadToolbarButton(0, v28);
  v158 = *(_QWORD *)(ToolbarButton - 8);
  __chkstk_darwin(ToolbarButton);
  v31 = (char *)&v142 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_32AC08);
  v154 = v32;
  __chkstk_darwin(v32);
  v34 = (char *)&v142 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5C154(&qword_32AC10);
  v36 = *(_QWORD **)(v35 - 8);
  v191 = v35;
  v192 = v36;
  __chkstk_darwin(v35);
  v190 = (char *)&v142 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v157 = (char *)&v142 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v142 - v41;
  sub_5E0D8(a1, (uint64_t)&v198);
  WantToReadToolbarButton.init(assetInfo:)(&v198);
  sub_5C154(&qword_32A8D8);
  v188 = a2;
  Bindable.wrappedValue.getter(&v198);
  v43 = v198;
  v44 = a2 + *(int *)(v8 + 24);
  v45 = *(_QWORD *)v44;
  v46 = *(_QWORD *)(v44 + 8);
  LOBYTE(v44) = *(_BYTE *)(v44 + 16);
  *(_QWORD *)&v196 = v45;
  *((_QWORD *)&v196 + 1) = v46;
  LOBYTE(v197) = v44;
  v47 = sub_5C154(&qword_3249B8);
  Binding.projectedValue.getter(v47);
  v48 = v198;
  v49 = v199;
  v50 = &v34[*(int *)(v32 + 36)];
  v51 = type metadata accessor for CardAuxiliaryNavigationBarViewModel(0);
  v52 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  swift_retain(v43);
  swift_retain(v48);
  swift_retain(*((_QWORD *)&v48 + 1));
  Bindable<A>.init(wrappedValue:)(v43, v51, v52);
  BubbleTipViewModifier = type metadata accessor for WantToReadBubbleTipViewModifier(0);
  v54 = &v50[*(int *)(BubbleTipViewModifier + 20)];
  *(_OWORD *)v54 = v48;
  v54[16] = v49;
  v55 = &v50[*(int *)(BubbleTipViewModifier + 24)];
  LOBYTE(v196) = 0;
  State.init(wrappedValue:)(&v198, &v196, &type metadata for Bool);
  v56 = *((_QWORD *)&v198 + 1);
  *v55 = v198;
  *((_QWORD *)v55 + 1) = v56;
  v57 = v158;
  v58 = ToolbarButton;
  (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v34, v31, ToolbarButton);
  swift_release(v43);
  swift_release(*((_QWORD *)&v48 + 1));
  swift_release(v48);
  v59 = v31;
  v60 = v155;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v58);
  v195 = v60;
  v61 = sub_202BD0();
  v62 = sub_202C6C();
  v63 = v157;
  View.contextMenu<A>(menuItems:)(sub_202B94, v194, v154, &_s14WantToReadMenuVN, v61, v62);
  sub_5E09C((uint64_t)v34, &qword_32AC08);
  v64 = (void (*)(char *, char *, uint64_t))v192[4];
  ToolbarButton = (uint64_t)v42;
  v64(v42, v63, v191);
  v65 = v159;
  v66 = sub_76D64(v159);
  LOBYTE(v61) = SizeConstants.isCompact.getter(v66);
  (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v65, v161);
  if ((v61 & 1) == 0)
  {
    v67 = v60[3];
    v68 = v60[4];
    sub_66898(v60, v67);
    v69 = (uint64_t)v150;
    AssetInfo.sharableURL.getter(v67, v68);
    v70 = v152;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v69, 1, v152) != 1)
    {
      v74 = v153;
      v75 = v151;
      (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v151, v69, v70);
      v76 = sub_5C154(&qword_321F48);
      v77 = *(unsigned __int8 *)(v74 + 80);
      v78 = (v77 + 32) & ~v77;
      v79 = swift_allocObject(v76, v78 + *(_QWORD *)(v74 + 72), v77 | 7);
      *(_OWORD *)(v79 + 16) = xmmword_258070;
      (*(void (**)(uint64_t, char *, uint64_t))(v74 + 16))(v79 + v78, v75, v70);
      *(_QWORD *)&v198 = v79;
      v80 = sub_5C154(&qword_321F50);
      v81 = type metadata accessor for BooksToolbarIconView(0);
      v82 = sub_67060(&qword_321F60, &qword_321F50, (uint64_t)&protocol conformance descriptor for [A]);
      v83 = sub_648E0(&qword_32A9F0, (uint64_t (*)(uint64_t))&type metadata accessor for BooksToolbarIconView, (uint64_t)&protocol conformance descriptor for BooksToolbarIconView);
      v138 = v80;
      v84 = v143;
      ShareLink<>.init(items:subject:message:label:)(&v198, 0, 0, 0, 0, 0, 0, 0, 0, sub_1FF2A0, 0, v138, v81, v82, v83);
      v85 = sub_5C154(&qword_327BA8);
      v86 = sub_67060(&qword_32AC50, &qword_32ABE8, (uint64_t)&protocol conformance descriptor for ShareLink<A, B, C, D>);
      v87 = sub_67060(&qword_327BB0, &qword_327BA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v88 = v147;
      v89 = v146;
      View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1FF32C, 0, v146, v85, v86, v87);
      (*(void (**)(char *, uint64_t))(v144 + 8))(v84, v89);
      v198 = 0u;
      v199 = 0u;
      v196 = 0u;
      v197 = 0u;
      v90 = v185;
      static AutomationSemantics.productPage(elementName:id:parentId:)(0x7475426572616873, 0xEB000000006E6F74, &v198, &v196);
      sub_5E09C((uint64_t)&v196, &qword_31F8B0);
      sub_5E09C((uint64_t)&v198, &qword_31F8B0);
      *(_QWORD *)&v198 = v89;
      *((_QWORD *)&v198 + 1) = v85;
      *(_QWORD *)&v199 = v86;
      *((_QWORD *)&v199 + 1) = v87;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v198, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
      v92 = v145;
      v93 = v149;
      View.automationSemantics(_:)(v90, v149, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v186 + 8))(v90, v187);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v88, v93);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v151, v70);
      v73 = v162;
      v72 = v163;
      (*(void (**)(uint64_t, char *, uint64_t))(v162 + 32))(v193, v92, v163);
      v71 = 0;
      goto LABEL_6;
    }
    sub_5E09C(v69, &qword_321470);
  }
  v71 = 1;
  v72 = v163;
  v73 = v162;
LABEL_6:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v193, v71, 1, v72);
  v94 = v60[3];
  v95 = v60[4];
  sub_66898(v60, v94);
  v163 = ContentInfo.id.getter(v94, *(_QWORD *)(v95 + 8));
  v97 = v96;
  v98 = v188;
  v99 = v166;
  sub_5E11C(v188, v166, type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView);
  v100 = *(unsigned __int8 *)(v164 + 80);
  v101 = (v100 + 16) & ~v100;
  v102 = swift_allocObject(&unk_2F4708, v101 + v165, v100 | 7);
  v103 = sub_5E160(v99, v102 + v101, type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView);
  __chkstk_darwin(v103);
  __chkstk_darwin(v104);
  v105 = type metadata accessor for BooksToolbarIconView(0);
  v106 = type metadata accessor for ContextActionMenuView(0);
  v140 = sub_648E0(&qword_32A9F0, (uint64_t (*)(uint64_t))&type metadata accessor for BooksToolbarIconView, (uint64_t)&protocol conformance descriptor for BooksToolbarIconView);
  v141 = sub_648E0(&qword_3265D0, type metadata accessor for ContextActionMenuView, (uint64_t)&protocol conformance descriptor for ContextActionMenuView);
  v139[0] = v105;
  v139[1] = v106;
  v107 = v168;
  v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(char), uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t (*)(), _QWORD *))BooksMenu.init(_:onPresentationChanged:content:label:))(v163, v97, sub_202DF8, v102, sub_202E34, v139, sub_202E88, v139);
  __chkstk_darwin(v108);
  v140 = v98;
  v109 = sub_5C154(&qword_327BA8);
  v110 = sub_67060(&qword_32AC38, &qword_32ABC8, (uint64_t)&protocol conformance descriptor for BooksMenu<A, B>);
  v111 = sub_67060(&qword_327BB0, &qword_327BA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v112 = v171;
  v113 = v170;
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_202E90, v139, v170, v109, v110, v111);
  v114 = (*(uint64_t (**)(char *, uint64_t))(v169 + 8))(v107, v113);
  v115 = v176;
  static CustomHoverEffect<>.lift.getter(v114);
  *(_QWORD *)&v198 = v113;
  *((_QWORD *)&v198 + 1) = v109;
  *(_QWORD *)&v199 = v110;
  *((_QWORD *)&v199 + 1) = v111;
  v116 = swift_getOpaqueTypeConformance2(&v198, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  v117 = sub_648E0(&qword_32AC40, (uint64_t (*)(uint64_t))&type metadata accessor for LiftHoverEffect, (uint64_t)&protocol conformance descriptor for LiftHoverEffect);
  v118 = v173;
  v119 = v174;
  v120 = v182;
  View.hoverEffect<A>(_:isEnabled:)(v115, 1, v174, v182, v116, v117);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v115, v120);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v112, v119);
  v198 = 0u;
  v199 = 0u;
  v196 = 0u;
  v197 = 0u;
  v121 = v185;
  static AutomationSemantics.productPage(elementName:id:parentId:)(0x7474754265726F6DLL, 0xEA00000000006E6FLL, &v198, &v196);
  sub_5E09C((uint64_t)&v196, &qword_31F8B0);
  sub_5E09C((uint64_t)&v198, &qword_31F8B0);
  *(_QWORD *)&v198 = v119;
  *((_QWORD *)&v198 + 1) = v120;
  *(_QWORD *)&v199 = v116;
  *((_QWORD *)&v199 + 1) = v117;
  v122 = swift_getOpaqueTypeConformance2(&v198, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v123 = v181;
  v124 = v177;
  View.automationSemantics(_:)(v121, v177, v122);
  (*(void (**)(char *, uint64_t))(v186 + 8))(v121, v187);
  (*(void (**)(char *, uint64_t))(v175 + 8))(v118, v124);
  v125 = v180;
  v126 = v179;
  v127 = v183;
  (*(void (**)(char *, char *, uint64_t))(v180 + 32))(v179, v123, v183);
  v128 = v191;
  v129 = (void (*)(char *, uint64_t, uint64_t))v192[2];
  v130 = v190;
  v129(v190, ToolbarButton, v191);
  v131 = v167;
  sub_5E1A4(v193, v167, &qword_32AC00);
  v132 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
  v132(v123, v126, v127);
  v133 = v184;
  v129(v184, (uint64_t)v130, v128);
  v134 = sub_5C154(&qword_32AC48);
  sub_5E1A4(v131, (uint64_t)&v133[*(int *)(v134 + 48)], &qword_32AC00);
  v132(&v133[*(int *)(v134 + 64)], v123, v127);
  v135 = *(void (**)(char *, uint64_t))(v125 + 8);
  v135(v126, v127);
  sub_5E09C(v193, &qword_32AC00);
  v136 = (void (*)(uint64_t, uint64_t))v192[1];
  v136(ToolbarButton, v128);
  v135(v123, v127);
  sub_5E09C(v131, &qword_32AC00);
  return ((uint64_t (*)(char *, uint64_t))v136)(v190, v128);
}

uint64_t sub_1FF2A0()
{
  return sub_1FF2AC(&enum case for SymbolImage.Kind.squareAndArrowUp(_:));
}

uint64_t sub_1FF2AC(unsigned int *a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for SymbolImage.Kind(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, __n128))(v6 + 104))(v5, *a1, v3);
  return BooksToolbarIconView.init(kind:)(v5);
}

uint64_t sub_1FF32C@<X0>(char *a1@<X8>)
{
  return sub_1FF338(&enum case for SymbolImage.Kind.squareAndArrowUp(_:), a1);
}

uint64_t sub_1FF338@<X0>(unsigned int *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t, __n128);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;

  v44 = a2;
  v3 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for LocalizedText(0);
  v43 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v40 = (char *)&v39 - v8;
  v9 = type metadata accessor for SymbolImage.Kind(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_327BB8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v39 - v19;
  v21 = *a1;
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v10 + 104);
  v23 = v22(v12, v21, v9, v18);
  SymbolImage.Kind.image.getter(v23);
  v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v12, v9);
  v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v39 = v14;
  v25(v20, v16, v13);
  v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v12, v21, v9);
  SymbolImage.Kind.accessibilityLocalizable.getter(v26);
  v24(v12, v9);
  v27 = v40;
  LocalizedText.init(_:)(v5);
  v28 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v28(v16, v20, v13);
  v29 = v42;
  v30 = v43;
  v31 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v32 = v27;
  v33 = v41;
  v31(v42, v27, v41);
  v34 = v44;
  v28(v44, v16, v13);
  v35 = sub_5C154(&qword_327BC0);
  v31(&v34[*(int *)(v35 + 48)], v29, v33);
  v36 = *(void (**)(char *, uint64_t))(v30 + 8);
  v36(v32, v33);
  v37 = *(void (**)(char *, uint64_t))(v39 + 8);
  v37(v20, v13);
  v36(v29, v33);
  return ((uint64_t (*)(char *, uint64_t))v37)(v16, v13);
}

uint64_t sub_1FF5C4(char a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  LOBYTE(v3) = *((_BYTE *)v3 + 16);
  v9 = v4;
  v10 = v5;
  v11 = (char)v3;
  v8 = a1;
  v6 = sub_5C154(&qword_3249B8);
  return Binding.wrappedValue.setter(&v8, v6);
}

uint64_t sub_1FF62C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for SymbolImage.Kind(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, __n128))(v4 + 104))(v3, enum case for SymbolImage.Kind.ellipsis(_:), v1);
  return BooksToolbarIconView.init(kind:)(v3);
}

uint64_t sub_1FF6A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(id *, _QWORD, __n128);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _QWORD v20[4];
  id v21[4];

  v2 = v1;
  v4 = type metadata accessor for PageMetrics(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_31FE20);
  BaseObjectGraph.inject<A>(_:)(v21, v8, v8);
  v9 = v21[0];
  v10 = objc_msgSend(v21[0], "figaroPageContext");
  swift_unknownObjectRelease(v9);
  if (!v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v2, v4);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v14 = (void (*)(id *, _QWORD, __n128))PageMetrics.pageFields.modify(v21);
  if (*v15)
  {
    v16 = static Metrics.Keys.pageContext.getter();
    v20[3] = &type metadata for String;
    v20[0] = v11;
    v20[1] = v13;
    sub_12A890((uint64_t)v20, v16, v17);
  }
  else
  {
    v18 = swift_bridgeObjectRelease(v13);
  }
  v14(v21, 0, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
}

uint64_t sub_1FF818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t BubbleTipViewModifier;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __n128 v47;
  void *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  _QWORD v79[2];
  char v80;

  v58 = a1;
  v73 = a2;
  BubbleTipViewModifier = type metadata accessor for WantToReadBubbleTipViewModifier(0);
  v62 = *(_QWORD *)(BubbleTipViewModifier - 8);
  __chkstk_darwin(BubbleTipViewModifier);
  v72 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v4;
  __chkstk_darwin(v5);
  v59 = (char *)&v55 - v6;
  v56 = sub_5C154(&qword_32AD10);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5C154(&qword_32AD18);
  v64 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v74 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_32AD20);
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  __chkstk_darwin(v10);
  v69 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_5C154(&qword_32AD28);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v65 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(BubbleTipViewModifier + 20);
  v55 = v2;
  v14 = v2 + v13;
  v15 = *(_QWORD *)(v2 + v13);
  v16 = *(_QWORD *)(v14 + 8);
  v61 = v14;
  LOBYTE(v14) = *(_BYTE *)(v14 + 16);
  v79[0] = v15;
  v79[1] = v16;
  v80 = v14;
  v60 = sub_5C154(&qword_3249B8);
  Binding.projectedValue.getter(v60);
  v18 = v75;
  v17 = v76;
  v19 = v77;
  sub_5C154(&qword_32A8D8);
  Bindable.wrappedValue.getter(&v75);
  v20 = v75;
  KeyPath = swift_getKeyPath(&unk_267AA0);
  v75 = v20;
  v22 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v75, KeyPath, v22);
  swift_release(KeyPath);
  v23 = *(_QWORD *)(v20 + 80);
  swift_retain(v23);
  swift_release(v20);
  v24 = sub_5C154(&qword_32AD30);
  v25 = sub_67060(&qword_32AD38, &qword_32AD30, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.bubbleTip(isPresented:model:preferredArrowEdge:)(v18, v17, v19, v23, 0, v24, v25);
  swift_release(v17);
  swift_release(v23);
  swift_release(v18);
  v75 = v24;
  v76 = (void *)v25;
  v26 = v56;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v75, &opaque type descriptor for <<opaque return type of View.bubbleTip(isPresented:model:preferredArrowEdge:)>>, 1);
  v28 = (uint64_t)v59;
  View.bubbleTipPersistent(_:)(0, v26, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v26);
  v29 = v55;
  Bindable.wrappedValue.getter(&v75);
  v30 = v75;
  v31 = swift_getKeyPath(&unk_267AC8);
  v75 = v30;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v75, v31, v22);
  swift_release(v31);
  v32 = *(_BYTE *)(v30 + 18);
  swift_release(v30);
  sub_5E11C(v29, v28, type metadata accessor for WantToReadBubbleTipViewModifier);
  if ((v32 & 1) != 0)
  {
    sub_6685C(v28, type metadata accessor for WantToReadBubbleTipViewModifier);
LABEL_5:
    v36 = 0;
    goto LABEL_6;
  }
  Bindable.wrappedValue.getter(&v75);
  v33 = v75;
  v34 = swift_getKeyPath(&unk_267AA0);
  v75 = v33;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v75, v34, v22);
  swift_release(v34);
  v35 = *(_QWORD *)(v33 + 80);
  swift_retain(v35);
  swift_release(v33);
  sub_6685C(v28, type metadata accessor for WantToReadBubbleTipViewModifier);
  if (!v35)
    goto LABEL_5;
  swift_release(v35);
  v36 = 1;
LABEL_6:
  LOBYTE(v79[0]) = v36;
  v37 = v72;
  sub_5E11C(v29, v72, type metadata accessor for WantToReadBubbleTipViewModifier);
  v38 = *(unsigned __int8 *)(v62 + 80);
  v39 = (v38 + 16) & ~v38;
  v40 = v39 + v63;
  v41 = v38 | 7;
  v42 = swift_allocObject(&unk_2F4730, v39 + v63, v38 | 7);
  sub_5E160(v37, v42 + v39, type metadata accessor for WantToReadBubbleTipViewModifier);
  v75 = v26;
  v76 = (void *)OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2(&v75, &opaque type descriptor for <<opaque return type of View.bubbleTipPersistent(_:)>>, 1);
  v44 = v69;
  v45 = v67;
  v46 = v74;
  View.onChange<A>(of:initial:_:)(v79, 1, sub_2034EC, v42, v67, &type metadata for Bool, v43, &protocol witness table for Bool);
  swift_release(v42);
  v47.n128_f64[0] = (*(double (**)(char *, uint64_t))(v64 + 8))(v46, v45);
  v48 = *(void **)(v61 + 8);
  v49 = *(_BYTE *)(v61 + 16);
  v75 = *(_QWORD *)v61;
  v76 = v48;
  LOBYTE(v77) = v49;
  Binding.wrappedValue.getter(v60, v47);
  sub_5E11C(v29, v37, type metadata accessor for WantToReadBubbleTipViewModifier);
  v50 = swift_allocObject(&unk_2F4758, v40, v41);
  sub_5E160(v37, v50 + v39, type metadata accessor for WantToReadBubbleTipViewModifier);
  v75 = v45;
  v76 = &type metadata for Bool;
  v77 = v43;
  v78 = &protocol witness table for Bool;
  v51 = swift_getOpaqueTypeConformance2(&v75, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v52 = v65;
  v53 = v71;
  View.onChange<A>(of:initial:_:)(v79, 0, sub_2035E4, v50, v71, &type metadata for Bool, v51, &protocol witness table for Bool);
  swift_release(v50);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v44, v53);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v66 + 32))(v73, v52, v68);
}

uint64_t sub_1FFE80(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t BubbleTipViewModifier;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  BubbleTipViewModifier = type metadata accessor for WantToReadBubbleTipViewModifier(0);
  __chkstk_darwin(BubbleTipViewModifier);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  sub_5E11C(a3, (uint64_t)v7, v8);
  if ((_DWORD)a2 == 1)
  {
    v9 = &v7[*(int *)(BubbleTipViewModifier + 24)];
    v10 = *v9;
    v11 = *((_QWORD *)v9 + 1);
    LOBYTE(v20) = v10;
    v21 = v11;
    v12 = sub_5C154(&qword_325B50);
    State.wrappedValue.getter((uint64_t *)((char *)&v19 + 7), v12);
    sub_6685C((uint64_t)v7, type metadata accessor for WantToReadBubbleTipViewModifier);
    v13 = HIBYTE(v19) ^ 1;
  }
  else
  {
    sub_6685C((uint64_t)v7, type metadata accessor for WantToReadBubbleTipViewModifier);
    v13 = 0;
  }
  v14 = a3 + *(int *)(BubbleTipViewModifier + 20);
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  LOBYTE(v14) = *(_BYTE *)(v14 + 16);
  v20 = v15;
  v21 = v16;
  v22 = v14;
  HIBYTE(v19) = v13 & 1;
  v17 = sub_5C154(&qword_3249B8);
  return Binding.wrappedValue.setter((char *)&v19 + 7, v17);
}

uint64_t sub_1FFFA4(uint64_t a1)
{
  uint64_t v2;
  void *Strong;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t BubbleTipViewModifier;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t result;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned __int8 v23;

  sub_5C154(&qword_32A8D8);
  Bindable.wrappedValue.getter(&v20);
  v2 = v20;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v20 + 96);
  swift_release(v2);
  if (Strong)
  {
    v4 = (uint64_t *)(a1 + *(int *)(type metadata accessor for WantToReadBubbleTipViewModifier(0) + 20));
    v5 = *v4;
    v6 = v4[1];
    LOBYTE(v4) = *((_BYTE *)v4 + 16);
    v20 = v5;
    v21 = v6;
    v22 = (char)v4;
    v7 = sub_5C154(&qword_3249B8);
    Binding.wrappedValue.getter(v7, v8);
    objc_msgSend(Strong, "setIsBubbleTipPresented:", v23);
    swift_unknownObjectRelease(Strong);
  }
  BubbleTipViewModifier = type metadata accessor for WantToReadBubbleTipViewModifier(0);
  v10 = (uint64_t *)(a1 + *(int *)(BubbleTipViewModifier + 20));
  v11 = *v10;
  v12 = v10[1];
  LOBYTE(v10) = *((_BYTE *)v10 + 16);
  v20 = v11;
  v21 = v12;
  v22 = (char)v10;
  v13 = sub_5C154(&qword_3249B8);
  result = Binding.wrappedValue.getter(v13, v14);
  if (v23 == 1)
  {
    v16 = (char *)(a1 + *(int *)(BubbleTipViewModifier + 24));
    v17 = *v16;
    v18 = *((_QWORD *)v16 + 1);
    LOBYTE(v20) = v17;
    v21 = v18;
    v23 = 1;
    v19 = sub_5C154(&qword_325B50);
    return State.wrappedValue.setter(&v23, v19);
  }
  return result;
}

uint64_t sub_2000E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v6 = *(int *)(a3 + 24);
    v7 = (uint64_t *)(a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain(v5);
    v9 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v10 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = v7;
      v12 = v9;
      v13 = 1;
    }
    else
    {
      v14 = *v8;
      *v7 = *v8;
      swift_retain(v14);
      v11 = v7;
      v12 = v9;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_2001C0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for ColorConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_200238(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = *(int *)(a3 + 24);
  v6 = (uint64_t *)(a1 + v5);
  v7 = (uint64_t *)((char *)a2 + v5);
  swift_retain(v4);
  v8 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
    v10 = 1;
  }
  else
  {
    v11 = *v7;
    *v6 = *v7;
    swift_retain(v11);
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v8, v10);
  return a1;
}

uint64_t *sub_2002E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    sub_5E09C((uint64_t)a1 + v8, (uint64_t *)&unk_32A010);
    v11 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  return a1;
}

uint64_t sub_2003C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_200474(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_5E09C((uint64_t)a1 + v7, (uint64_t *)&unk_32A010);
    v10 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_20054C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_200558);
}

uint64_t sub_200558(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F498);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_2005D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2005E4);
}

char *sub_2005E4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_31F498);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarView.BackgroundViewModifier(uint64_t a1)
{
  return sub_64960(a1, qword_32A898, (uint64_t)&nominal type descriptor for CardAuxiliaryNavigationBarView.BackgroundViewModifier);
}

void sub_200670(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_267628;
  sub_8C25C(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t *sub_200708(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5C154(&qword_32A8D8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)v4 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = v9;
      v14 = v11;
      v15 = 1;
    }
    else
    {
      v17 = *v10;
      *v9 = *v10;
      swift_retain(v17);
      v13 = v9;
      v14 = v11;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v18 = a3[6];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    v22 = v20[8];
    sub_64DD8(*(_QWORD *)v20, v22);
    *(_QWORD *)v19 = v21;
    v19[8] = v22;
    v23 = a3[7];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v28 = type metadata accessor for FontConstants(0, v27);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v25, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v25;
      *v24 = *v25;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v29);
    v31 = a3[8];
    v32 = (uint64_t *)((char *)v4 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    v34 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
      v36 = v32;
      v37 = v34;
      v38 = 1;
    }
    else
    {
      v39 = *v33;
      *v32 = *v33;
      swift_retain(v39);
      v36 = v32;
      v37 = v34;
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v36, v37, v38);
    v40 = a3[9];
    v41 = a3[10];
    v42 = (char *)v4 + v40;
    v43 = (char *)a2 + v40;
    *v42 = *v43;
    v44 = *((_QWORD *)v43 + 1);
    *((_QWORD *)v42 + 1) = v44;
    v45 = (char *)v4 + v41;
    v46 = (char *)a2 + v41;
    *v45 = *v46;
    v16 = *((_QWORD *)v46 + 1);
    *((_QWORD *)v45 + 1) = v16;
    swift_retain(v44);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_200960(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + a2[5]);
  v6 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  sub_64FFC(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  v8 = (_QWORD *)(a1 + a2[7]);
  v9 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v11 = type metadata accessor for FontConstants(0, v10);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  }
  else
  {
    swift_release(*v8);
  }
  v12 = (_QWORD *)(a1 + a2[8]);
  v13 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  swift_release(*(_QWORD *)(a1 + a2[9] + 8));
  return swift_release(*(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t sub_200AC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = v8;
    v13 = v10;
    v14 = 1;
  }
  else
  {
    v15 = *v9;
    *v8 = *v9;
    swift_retain(v15);
    v12 = v8;
    v13 = v10;
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v13, v14);
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_64DD8(*(_QWORD *)v18, v20);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  v21 = a3[7];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v26 = type metadata accessor for FontConstants(0, v25);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v22, v23, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v23;
    *v22 = *v23;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v22, v24, v27);
  v29 = a3[8];
  v30 = (uint64_t *)(a1 + v29);
  v31 = (uint64_t *)(a2 + v29);
  v32 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    v33 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
    v34 = v30;
    v35 = v32;
    v36 = 1;
  }
  else
  {
    v37 = *v31;
    *v30 = *v31;
    swift_retain(v37);
    v34 = v30;
    v35 = v32;
    v36 = 0;
  }
  swift_storeEnumTagMultiPayload(v34, v35, v36);
  v38 = a3[9];
  v39 = a3[10];
  v40 = a1 + v38;
  v41 = a2 + v38;
  *(_BYTE *)v40 = *(_BYTE *)v41;
  v42 = *(_QWORD *)(v41 + 8);
  *(_QWORD *)(v40 + 8) = v42;
  v43 = a1 + v39;
  v44 = a2 + v39;
  *(_BYTE *)v43 = *(_BYTE *)v44;
  v45 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)(v43 + 8) = v45;
  swift_retain(v42);
  swift_retain(v45);
  return a1;
}

uint64_t sub_200CF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (uint64_t *)(a1 + v7);
    v9 = (uint64_t *)(a2 + v7);
    sub_5E09C(a1 + v7, &qword_320160);
    v10 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_64DD8(*(_QWORD *)v18, v20);
  v21 = *(_QWORD *)v17;
  v22 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  sub_64FFC(v21, v22);
  if (a1 != a2)
  {
    v23 = a3[7];
    v24 = (uint64_t *)(a1 + v23);
    v25 = (uint64_t *)(a2 + v23);
    sub_5E09C(a1 + v23, &qword_320290);
    v26 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v28 = type metadata accessor for FontConstants(0, v27);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v25, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v25;
      *v24 = *v25;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v29);
    v31 = a3[8];
    v32 = (uint64_t *)(a1 + v31);
    v33 = (uint64_t *)(a2 + v31);
    sub_5E09C(a1 + v31, (uint64_t *)&unk_32A010);
    v34 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
      v36 = v32;
      v37 = v34;
      v38 = 1;
    }
    else
    {
      v39 = *v33;
      *v32 = *v33;
      swift_retain(v39);
      v36 = v32;
      v37 = v34;
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v36, v37, v38);
  }
  v40 = a3[9];
  v41 = a1 + v40;
  v42 = a2 + v40;
  *(_BYTE *)v41 = *(_BYTE *)v42;
  v43 = *(_QWORD *)(v41 + 8);
  v44 = *(_QWORD *)(v42 + 8);
  *(_QWORD *)(v41 + 8) = v44;
  swift_retain(v44);
  swift_release(v43);
  v45 = a3[10];
  v46 = a1 + v45;
  v47 = a2 + v45;
  *(_BYTE *)v46 = *(_BYTE *)v47;
  v48 = *(_QWORD *)(v46 + 8);
  v49 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)(v46 + 8) = v49;
  swift_retain(v49);
  swift_release(v48);
  return a1;
}

uint64_t sub_200F8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for SizeConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = (void *)(a1 + v13);
  v17 = (const void *)(a2 + v13);
  v18 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v20 = type metadata accessor for FontConstants(0, v19);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v21 = a3[8];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for ColorConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v26 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  return a1;
}

uint64_t sub_20117C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_5E09C(a1 + v7, &qword_320160);
    v10 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for SizeConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  LOBYTE(v14) = *((_BYTE *)v14 + 8);
  v16 = *(_QWORD *)v13;
  v17 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = (_BYTE)v14;
  sub_64FFC(v16, v17);
  if (a1 != a2)
  {
    v18 = a3[7];
    v19 = (void *)(a1 + v18);
    v20 = (const void *)(a2 + v18);
    sub_5E09C(a1 + v18, &qword_320290);
    v21 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v23 = type metadata accessor for FontConstants(0, v22);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v19, v20, v23);
      swift_storeEnumTagMultiPayload(v19, v21, 1);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    v24 = a3[8];
    v25 = (void *)(a1 + v24);
    v26 = (const void *)(a2 + v24);
    sub_5E09C(a1 + v24, (uint64_t *)&unk_32A010);
    v27 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload(v25, v27, 1);
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
  }
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_BYTE *)v30 = *(_BYTE *)v31;
  v32 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
  swift_release(v32);
  v33 = a3[10];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  v36 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  swift_release(v36);
  return a1;
}

uint64_t sub_2013F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2013FC);
}

uint64_t sub_2013FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_5C154(&qword_32A8D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5C154(&qword_3201B0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_5C154(&qword_320BC8);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_9;
  }
  v15 = sub_5C154(&qword_31F498);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[9] + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_20150C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_201518);
}

uint64_t sub_201518(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_5C154(&qword_32A8D8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_5C154(&qword_3201B0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_5C154(&qword_320BC8);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_9;
  }
  result = sub_5C154(&qword_31F498);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[9] + 8) = a2;
  return result;
}

void sub_201618(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  sub_8C25C(319, (unint64_t *)&qword_32A948, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Bindable);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      sub_8C25C(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_8C25C(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_267678;
          v10[6] = &unk_267678;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_201748(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BA3BC, 1);
}

uint64_t sub_201758(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BA394, 1);
}

uint64_t sub_201790@<X0>(uint64_t (**a1)()@<X8>)
{
  return sub_1FC114(a1);
}

unint64_t sub_201798()
{
  unint64_t result;

  result = qword_32AA00;
  if (!qword_32AA00)
  {
    result = swift_getWitnessTable(&unk_267988, &type metadata for CardAuxiliaryNavigationBarView.CloseButtonContextMenu);
    atomic_store(result, (unint64_t *)&qword_32AA00);
  }
  return result;
}

uint64_t sub_2017DC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_201808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32AA28;
  if (!qword_32AA28)
  {
    v1 = sub_667D0(&qword_32AA10);
    sub_20188C();
    sub_67060(&qword_328440, &qword_328448, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32AA28);
  }
  return result;
}

unint64_t sub_20188C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32AA30;
  if (!qword_32AA30)
  {
    v1 = sub_667D0(&qword_325B38);
    sub_648E0(&qword_321F70, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    sub_67060(&qword_31F7D0, &qword_31F7D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32AA30);
  }
  return result;
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView(uint64_t a1)
{
  return sub_64960(a1, qword_32AAD8, (uint64_t)&nominal type descriptor for CardAuxiliaryNavigationBarView.TrailingItemsView);
}

_QWORD *sub_201954(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  id v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  id v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_5C154(&qword_32A8D8);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v13;
    v10[16] = v11[16];
    v14 = (char *)a1 + v9;
    v15 = (char *)a2 + v9;
    v16 = *(_QWORD *)v15;
    v17 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v17;
    v14[16] = v15[16];
    v18 = a3[7];
    v19 = (_QWORD *)((char *)a1 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    swift_retain(v12);
    swift_retain(v13);
    swift_retain(v16);
    swift_retain(v17);
    v21 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = 1;
    }
    else
    {
      v25 = *v20;
      *v19 = *v20;
      swift_retain(v25);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v23);
    v26 = a3[8];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(id *)v28;
    v30 = v28[8];
    sub_AAFF4(*(id *)v28, v30);
    *(_QWORD *)v27 = v29;
    v27[8] = v30;
    v31 = a3[9];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = *((_BYTE *)a2 + v31 + 40);
    if ((v34 & 1) != 0)
    {
      v35 = *(_OWORD *)(v33 + 24);
      *(_OWORD *)(v32 + 24) = v35;
      (**(void (***)(char *))(v35 - 8))(v32);
    }
    else
    {
      v36 = *(_QWORD *)v33;
      *(_QWORD *)v32 = *(_QWORD *)v33;
      swift_retain(v36);
    }
    v32[40] = v34;
    v37 = a3[10];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (char *)a2 + v37;
    v41 = *(void **)v39;
    v40 = *((_QWORD *)v39 + 1);
    *v38 = v41;
    v38[1] = v40;
    v42 = v41;
  }
  return a1;
}

void sub_201B2C(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + a2[5]);
  swift_release(*v5);
  swift_release(v5[1]);
  v6 = (_QWORD *)(a1 + a2[6]);
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_794D8(*(id *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  v10 = (_QWORD *)(a1 + a2[9]);
  if ((v10[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v10);
  else
    swift_release(*v10);

}

uint64_t sub_201C30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = (uint64_t *)(a2 + v7);
  v11 = *v10;
  v12 = v10[1];
  *(_QWORD *)v9 = *v10;
  *(_QWORD *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 16) = *((_BYTE *)v10 + 16);
  v13 = a1 + v8;
  v14 = (uint64_t *)(a2 + v8);
  v15 = *v14;
  v16 = v14[1];
  *(_QWORD *)v13 = *v14;
  *(_QWORD *)(v13 + 8) = v16;
  *(_BYTE *)(v13 + 16) = *((_BYTE *)v14 + 16);
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v15);
  swift_retain(v16);
  v20 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(id *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_AAFF4(*(id *)v26, v28);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = (uint64_t *)(a2 + v29);
  v32 = *(_BYTE *)(a2 + v29 + 40);
  if ((v32 & 1) != 0)
  {
    v33 = *(_OWORD *)(v31 + 3);
    *(_OWORD *)(v30 + 24) = v33;
    (**(void (***)(uint64_t))(v33 - 8))(v30);
  }
  else
  {
    v34 = *v31;
    *(_QWORD *)v30 = *v31;
    swift_retain(v34);
  }
  *(_BYTE *)(v30 + 40) = v32;
  v35 = a3[10];
  v36 = (_QWORD *)(a1 + v35);
  v37 = a2 + v35;
  v39 = *(void **)v37;
  v38 = *(_QWORD *)(v37 + 8);
  *v36 = v39;
  v36[1] = v38;
  v40 = v39;
  return a1;
}

uint64_t sub_201DDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  v11 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v12;
  swift_retain(v12);
  swift_release(v13);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  v18 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *(_QWORD *)(v16 + 8);
  v20 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v19;
  swift_retain(v19);
  swift_release(v20);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  if (a1 != a2)
  {
    v21 = a3[7];
    v22 = (uint64_t *)(a1 + v21);
    v23 = (uint64_t *)(a2 + v21);
    sub_5E09C(a1 + v21, &qword_320160);
    v24 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  v28 = a3[8];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(id *)v30;
  v32 = *(_BYTE *)(v30 + 8);
  sub_AAFF4(*(id *)v30, v32);
  v33 = *(void **)v29;
  v34 = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = v32;
  sub_794D8(v33, v34);
  if (a1 != a2)
  {
    v35 = a3[9];
    v36 = a1 + v35;
    v37 = (uint64_t *)(a2 + v35);
    sub_5E09C(a1 + v35, &qword_3202F0);
    if ((v37[5] & 1) != 0)
    {
      v38 = v37[3];
      *(_QWORD *)(v36 + 24) = v38;
      *(_QWORD *)(v36 + 32) = v37[4];
      (**(void (***)(uint64_t, uint64_t *))(v38 - 8))(v36, v37);
      *(_BYTE *)(v36 + 40) = 1;
    }
    else
    {
      v39 = *v37;
      *(_QWORD *)v36 = *v37;
      *(_BYTE *)(v36 + 40) = 0;
      swift_retain(v39);
    }
  }
  v40 = a3[10];
  v41 = (_QWORD *)(a1 + v40);
  v42 = a2 + v40;
  v43 = *(void **)(a1 + v40);
  v44 = *(void **)v42;
  *v41 = *(_QWORD *)v42;
  v45 = v44;

  v41[1] = *(_QWORD *)(v42 + 8);
  return a1;
}

uint64_t sub_202014(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = (__int128 *)(a2 + v7);
  v11 = *v10;
  *(_BYTE *)(v9 + 16) = *((_BYTE *)v10 + 16);
  *(_OWORD *)v9 = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  v14 = a3[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for SizeConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = (_OWORD *)(a1 + v20);
  v24 = (_OWORD *)(a2 + v20);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  *(_OWORD *)((char *)v23 + 25) = *(_OWORD *)((char *)v24 + 25);
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_20215C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v10);
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release(v11);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v15);
  v16 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  swift_release(v16);
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  if (a1 != a2)
  {
    v17 = a3[7];
    v18 = (void *)(a1 + v17);
    v19 = (const void *)(a2 + v17);
    sub_5E09C(a1 + v17, &qword_320160);
    v20 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for SizeConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  LOBYTE(v24) = *((_BYTE *)v24 + 8);
  v26 = *(void **)v23;
  v27 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = (_BYTE)v24;
  sub_794D8(v26, v27);
  if (a1 != a2)
  {
    v28 = a3[9];
    v29 = (_OWORD *)(a2 + v28);
    v30 = (_OWORD *)(a1 + v28);
    sub_5E09C(a1 + v28, &qword_3202F0);
    v31 = v29[1];
    *v30 = *v29;
    v30[1] = v31;
    *(_OWORD *)((char *)v30 + 25) = *(_OWORD *)((char *)v29 + 25);
  }
  v32 = a3[10];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  v35 = *(void **)(a1 + v32);
  *v33 = *v34;

  v33[1] = v34[1];
  return a1;
}

uint64_t sub_202330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_20233C);
}

uint64_t sub_20233C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_5C154(&qword_32A8D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5C154(&qword_3201B0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_2023F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2023FC);
}

uint64_t sub_2023FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5C154(&qword_32A8D8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_5C154(&qword_3201B0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_2024AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_8C25C(319, (unint64_t *)&qword_32A948, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Bindable);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_2678E8;
    v6[2] = &unk_2678E8;
    sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = "\t";
      v6[5] = &unk_267900;
      v6[6] = &unk_267678;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CardAuxiliaryNavigationBarView.CloseButtonContextMenu(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for CardAuxiliaryNavigationBarView.CloseButtonContextMenu(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for CardAuxiliaryNavigationBarView.CloseButtonContextMenu(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for CardAuxiliaryNavigationBarView.CloseButtonContextMenu(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for CardAuxiliaryNavigationBarView.CloseButtonContextMenu()
{
  return &type metadata for CardAuxiliaryNavigationBarView.CloseButtonContextMenu;
}

unint64_t sub_202638()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32AB28;
  if (!qword_32AB28)
  {
    v1 = sub_667D0(&qword_32A9C0);
    sub_2026BC();
    sub_67060(&qword_32AB40, &qword_32AB48, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32AB28);
  }
  return result;
}

unint64_t sub_2026BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32AB30;
  if (!qword_32AB30)
  {
    v1 = sub_667D0(&qword_32A9B8);
    sub_202728();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32AB30);
  }
  return result;
}

unint64_t sub_202728()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  result = qword_32AB38;
  if (!qword_32AB38)
  {
    v1 = sub_667D0(&qword_32A9B0);
    v2 = sub_667D0(&qword_32A9A0);
    v4 = type metadata accessor for PlainButtonStyle(255, v3);
    v5 = sub_667D0(&qword_32A998);
    v9 = sub_667D0(&qword_32A990);
    v10 = (void *)sub_67060(&qword_32A9C8, &qword_32A990, (uint64_t)&unk_266FC8);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.useDarkColorSchemeWhenInVibrantContext(isEnabled:)>>, 1);
    v9 = v5;
    v10 = &type metadata for Bool;
    v11 = OpaqueTypeConformance2;
    v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.environment<A>(_:binding:)>>, 1);
    v8 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v9 = v2;
    v10 = (void *)v4;
    v11 = v7;
    v12 = v8;
    swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32AB38);
  }
  return result;
}

unint64_t sub_202880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32AB50;
  if (!qword_32AB50)
  {
    v1 = sub_667D0(&qword_32AA38);
    sub_67060(&qword_32AB58, &qword_32AA48, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_67060(&qword_32AB60, &qword_32AA40, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32AB50);
  }
  return result;
}

uint64_t sub_20291C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BA43C, 1);
}

uint64_t sub_20292C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BA414, 1);
}

uint64_t sub_20293C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void *sub_202960()
{
  return sub_202984((SEL *)&selRef_auxiliaryNavigationBarViewControllerDidTapCloseAllCards);
}

void sub_20296C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1FC65C(*(_BYTE *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), a1);
}

void *sub_202978()
{
  return sub_202984((SEL *)&selRef_auxiliaryNavigationBarViewControllerDidTapCloseAsset);
}

void *sub_202984(SEL *a1)
{
  uint64_t v1;
  void *result;
  void *v4;

  result = (void *)(*(uint64_t (**)(void))(v1 + 16))();
  if (result)
  {
    v4 = result;
    objc_msgSend(result, *a1);
    return (void *)swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_2029C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_17EB50();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_202A1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_202A34()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_32ABC0;
  if (!qword_32ABC0)
  {
    v1 = sub_667D0(&qword_32ABA0);
    v2 = sub_667D0(&qword_32AB90);
    v3 = sub_667D0(&qword_32AB88);
    v4 = sub_667D0(&qword_32AB80);
    v8 = sub_667D0(&qword_32AB78);
    v9 = sub_67060(&qword_32ABB8, &qword_32AB78, (uint64_t)&protocol conformance descriptor for HStack<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetState(for:libraryAssetStateObserverProvider:)>>, 1);
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
    v8 = v3;
    v9 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
    v8 = v2;
    v9 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.symbol(imageScale:)>>, 1);
    sub_67060(&qword_321F10, &qword_321F18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32ABC0);
  }
  return result;
}

uint64_t type metadata accessor for WantToReadBubbleTipViewModifier(uint64_t a1)
{
  return sub_64960(a1, qword_32ACB0, (uint64_t)&nominal type descriptor for WantToReadBubbleTipViewModifier);
}

uint64_t sub_202B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  sub_5E0D8(*(_QWORD *)(v1 + 16), a1);
  result = swift_getKeyPath(&unk_267868);
  *(_QWORD *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

unint64_t sub_202BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32AC18;
  if (!qword_32AC18)
  {
    v1 = sub_667D0(&qword_32AC08);
    sub_648E0(&qword_32AC20, (uint64_t (*)(uint64_t))&type metadata accessor for WantToReadToolbarButton, (uint64_t)&protocol conformance descriptor for WantToReadToolbarButton);
    sub_648E0(&qword_32AC28, type metadata accessor for WantToReadBubbleTipViewModifier, (uint64_t)&unk_267A50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32AC18);
  }
  return result;
}

unint64_t sub_202C6C()
{
  unint64_t result;

  result = qword_32AC30;
  if (!qword_32AC30)
  {
    result = swift_getWitnessTable(&unk_260BD0, &_s14WantToReadMenuVN);
    atomic_store(result, (unint64_t *)&qword_32AC30);
  }
  return result;
}

uint64_t sub_202CB0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = (int *)type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  v8 = (_QWORD *)(v0 + v4 + v1[5]);
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = (_QWORD *)(v0 + v4 + v1[6]);
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = (_QWORD *)(v0 + v4 + v1[7]);
  v11 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  sub_794D8(*(id *)(v6 + v1[8]), *(_BYTE *)(v6 + v1[8] + 8));
  v13 = (_QWORD *)(v6 + v1[9]);
  if ((v13[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v13);
  else
    swift_release(*v13);

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_202DF8(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CardAuxiliaryNavigationBarView.TrailingItemsView(0)
                                      - 8)
                          + 80);
  return sub_1FF5C4(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_202E34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD v4[3];
  __int128 v5[2];

  sub_5E0D8(*(_QWORD *)(v1 + 16), (uint64_t)v5);
  v4[0] = xmmword_25AF10;
  memset(&v4[1], 0, 32);
  return ContextActionMenuView.init(assetInfo:originatingLocation:)(v5, (uint64_t)v4, a1);
}

uint64_t sub_202E88()
{
  return sub_1FF62C();
}

uint64_t sub_202E90@<X0>(char *a1@<X8>)
{
  return sub_1912E4(a1);
}

uint64_t *sub_202E98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5C154(&qword_32A8D8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v8;
    v11 = (char *)a2 + v8;
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v13;
    v10[16] = v11[16];
    v14 = (char *)v4 + v9;
    v15 = (char *)a2 + v9;
    *v14 = *v15;
    v16 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v14 + 1) = v16;
    swift_retain(v12);
    swift_retain(v13);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_202F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_release(*v5);
  swift_release(v5[1]);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_202FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = (uint64_t *)(a2 + v7);
  v11 = *v10;
  v12 = v10[1];
  *(_QWORD *)v9 = *v10;
  *(_QWORD *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 16) = *((_BYTE *)v10 + 16);
  v13 = a1 + v8;
  v14 = a2 + v8;
  *(_BYTE *)v13 = *(_BYTE *)v14;
  v15 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 8) = v15;
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v15);
  return a1;
}

uint64_t sub_203064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  v11 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v12;
  swift_retain(v12);
  swift_release(v13);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)v15 = *(_BYTE *)v16;
  v17 = *(_QWORD *)(v15 + 8);
  v18 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 8) = v18;
  swift_retain(v18);
  swift_release(v17);
  return a1;
}

uint64_t sub_203130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_2031A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v10);
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release(v11);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)v13 = *(_BYTE *)v14;
  v15 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  swift_release(v15);
  return a1;
}

uint64_t sub_20325C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_203268);
}

uint64_t sub_203268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5C154(&qword_32A8D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2032EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2032F8);
}

uint64_t sub_2032F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5C154(&qword_32A8D8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_203378(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_8C25C(319, (unint64_t *)&qword_32A948, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Bindable);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_2678E8;
    v4[2] = &unk_267678;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_20340C()
{
  return sub_67060(&qword_32ACF0, &qword_32ACF8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

unint64_t sub_20343C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_32AD00;
  if (!qword_32AD00)
  {
    v1 = sub_667D0(&qword_32AD08);
    v2[0] = sub_667D0(&qword_32ABA0);
    v2[1] = sub_202A34();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.pageMetrics(_:pipeline:tracker:clickLocationConfiguration:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_32AD00);
  }
  return result;
}

uint64_t sub_2034C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BA464, 1);
}

uint64_t sub_2034EC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WantToReadBubbleTipViewModifier(0) - 8) + 80);
  return sub_1FFE80(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_20353C()
{
  uint64_t v0;
  uint64_t BubbleTipViewModifier;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  BubbleTipViewModifier = type metadata accessor for WantToReadBubbleTipViewModifier(0);
  v2 = *(_QWORD *)(BubbleTipViewModifier - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)(v7 + *(int *)(BubbleTipViewModifier + 20));
  swift_release(*v9);
  swift_release(v9[1]);
  swift_release(*(_QWORD *)(v7 + *(int *)(BubbleTipViewModifier + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_2035E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WantToReadBubbleTipViewModifier(0) - 8) + 80);
  return sub_1FFFA4(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_203610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v0 = sub_667D0(&qword_32AD20);
  v1 = sub_667D0(&qword_32AD18);
  v2 = sub_667D0(&qword_32AD10);
  v7 = sub_667D0(&qword_32AD30);
  v8 = (void *)sub_67060(&qword_32AD38, &qword_32AD30, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.bubbleTip(isPresented:model:preferredArrowEdge:)>>, 1);
  v7 = v2;
  v8 = (void *)OpaqueTypeConformance2;
  v4 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.bubbleTipPersistent(_:)>>, 1);
  v7 = v1;
  v8 = &type metadata for Bool;
  v9 = v4;
  v10 = &protocol witness table for Bool;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v7 = v0;
  v8 = &type metadata for Bool;
  v9 = v5;
  v10 = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

Swift::Int sub_203720(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000010;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000016;
    else
      v2 = 0xD000000000000014;
    if (a1 == 1)
      v3 = 0x800000000026D840;
    else
      v3 = 0x800000000026D860;
  }
  else
  {
    v3 = 0x800000000026D820;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_2037C8(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000011;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
    {
      v3 = 0x800000000026D7B0;
    }
    else
    {
      v2 = 0x6575676573;
      v3 = 0xE500000000000000;
    }
  }
  else
  {
    v3 = 0x800000000026D790;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_203868(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0xD000000000000010;
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000016;
    else
      v3 = 0xD000000000000014;
    if (a2 == 1)
      v4 = 0x800000000026D840;
    else
      v4 = 0x800000000026D860;
  }
  else
  {
    v4 = 0x800000000026D820;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_2038E8(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000011;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
    {
      v4 = 0x800000000026D7B0;
    }
    else
    {
      v3 = 0x6575676573;
      v4 = 0xE500000000000000;
    }
  }
  else
  {
    v4 = 0x800000000026D790;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_203984(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000010;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000016;
    else
      v3 = 0xD000000000000014;
    if (a2 == 1)
      v4 = 0x800000000026D840;
    else
      v4 = 0x800000000026D860;
  }
  else
  {
    v4 = 0x800000000026D820;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_203A28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[6];

  v62 = a7;
  v63 = a6;
  v64 = a5;
  v65 = a4;
  v66 = a3;
  v68 = a1;
  v69 = a8;
  v9 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v9);
  v67 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for ListItemViewModel(0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v57 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for ImpressionMetrics(0);
  v58 = *(_QWORD *)(v60 - 8);
  v12 = __chkstk_darwin(v60);
  v54 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Metrics.ImpressionType(0, v12);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Metrics.IdType(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Metrics.Impression(0, v20);
  v55 = *(_QWORD *)(v23 - 8);
  v56 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a2[3];
  v27 = a2[4];
  sub_66898(a2, v26);
  v53 = AssetInfo.author.getter(v26, v27);
  v52 = v28;
  v29 = a2[3];
  v30 = a2[4];
  sub_66898(a2, v29);
  v51 = ContentInfo.id.getter(v29, *(_QWORD *)(v30 + 8));
  v32 = v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for Metrics.IdType.itsId(_:), v18);
  v33 = a2[3];
  v34 = a2[4];
  sub_66898(a2, v33);
  v35 = AssetInfo.supportsUnifiedProductPage.getter(v33, v34);
  v36 = (unsigned int *)&enum case for Metrics.ImpressionType.uppLockup(_:);
  if ((v35 & 1) == 0)
    v36 = (unsigned int *)&enum case for Metrics.ImpressionType.lockup(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *v36, v14);
  v37 = a2[3];
  v38 = a2[4];
  sub_66898(a2, v37);
  v39 = AssetInfo.title.getter(v37, v38);
  Metrics.Impression.init(artistName:id:idType:impressionIndex:impressionType:isSG:kind:name:narratorName:parentId:)(v53, v52, v51, v32, v22, v66, v17, 0, v65, v64, v39, v40, 0, 0, v63, v62);
  v41 = v54;
  static Metrics.createImpressionMetrics(impression:)(v25);
  v42 = v59;
  v43 = (uint64_t)v57;
  v44 = v68;
  v45 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v68, v61);
  sub_5E0D8((uint64_t)a2, (uint64_t)v70);
  v46 = v58;
  v47 = (uint64_t)v67;
  v48 = v60;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v67, v41, v60);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v48);
  ListItemComponentModel.init(listItemViewModel:assetInfo:impressionMetrics:)(v43, v70, v47, v69);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v45);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v48);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v56);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a2);
}

uint64_t ListItemComponentModel.allowedUTTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_5C154(&qword_328F58);
  v1 = *(_QWORD *)(type metadata accessor for UTType(0) - 8);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 6 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_261680;
  v3 = static UTType.png.getter();
  v4 = static UTType.url.getter(v3);
  v5 = static UTType.text.getter(v4);
  v6 = static UTType.html.getter(v5);
  v7 = static UTType.utf8PlainText.getter(v6);
  static UTType.pdf.getter(v7);
  return v2;
}

id ListItemComponentModel.dragProvider.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSURL *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  id v44;
  id result;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;

  v0 = sub_5C154(&qword_321470);
  __chkstk_darwin(v0);
  v2 = (char *)&v53 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend(objc_allocWithZone((Class)BCAssetDragInfo), "init");
  type metadata accessor for ListItemComponentModel(0);
  ListItemViewModel.assetID.getter();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setAssetID:", v6, swift_bridgeObjectRelease(v5).n128_f64[0]);

  ListItemViewModel.author.getter();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0]);

  ListItemViewModel.title.getter();
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setTitle:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  ListItemViewModel.assetInfo.getter(v60);
  v13 = v61;
  v14 = v62;
  sub_66898(v60, v61);
  AssetInfo.sharableURL.getter(v13, v14);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v2, 1, v15) != 1)
  {
    URL._bridgeToObjectiveC()(v17);
    v18 = v19;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v2, v15);
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v60);
  objc_msgSend(v3, "setStoreURL:", v18);

  ListItemViewModel.assetInfo.getter(v60);
  v20 = v61;
  v21 = v62;
  sub_66898(v60, v61);
  v22 = ContentInfo.storeData.getter(v20, *(_QWORD *)(v21 + 8));
  v23 = (NSString)v22;
  if (v22)
  {
    MResource.id.getter(v22);
    v25 = v24;

    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v60);
    v23 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v26 = swift_bridgeObjectRelease(v25).n128_u64[0];
  }
  else
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v60);
  }
  objc_msgSend(v3, "setStoreID:", v23, v26);

  ListItemViewModel.assetInfo.getter(v60);
  v27 = v61;
  v28 = v62;
  sub_66898(v60, v61);
  LOBYTE(v27) = AssetInfo.isInSamples.getter(v27, v28);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v60);
  objc_msgSend(v3, "setIsSample:", v27 & 1);
  ListItemViewModel.assetInfo.getter(v60);
  v29 = v61;
  v30 = v62;
  sub_66898(v60, v61);
  v31 = dispatch thunk of AssetInfo.assetType.getter(v29, v30);
  if (!v31)
    goto LABEL_13;
  if (v31 == 1 && (v32 = objc_msgSend(v3, "storeID")) != 0)
  {

    v33 = objc_msgSend(v3, "assetID");
    if (!v33)
      goto LABEL_13;

    if ((objc_msgSend(v3, "isSample") & 1) != 0)
      goto LABEL_13;
    ListItemViewModel.assetInfo.getter(v56);
    v35 = v57;
    v34 = v58;
    sub_66898(v56, v57);
    v54 = v34;
    v36 = *(_QWORD *)(v34 + 8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v36);
    v38 = type metadata accessor for Optional(0, AssociatedTypeWitness);
    v55 = &v53;
    v39 = *(_QWORD *)(v38 - 8);
    __chkstk_darwin(v38);
    v41 = (char *)&v53 - v40;
    ContentInfo.libraryData.getter(v35, v36);
    v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v41, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v56);
LABEL_13:
      v43 = 0;
      goto LABEL_15;
    }
    v59[3] = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v54, v35, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
    v59[4] = AssociatedConformanceWitness;
    sub_668BC(v59);
    (*(void (**)(void))(v42 + 32))();
    v43 = dispatch thunk of LibraryAssetInfo.isPreorder.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v59);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v56);
  }
  else
  {
    v43 = 1;
  }
LABEL_15:
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v60);
  v44 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  objc_msgSend((id)objc_opt_self(BCDragRepresentationFactory), "registerRepresentationsFromAssetDragInfo:withProvider:canDragToNewCanvas:", v3, v44, v43 & 1);
  result = objc_msgSend(v3, "assetID");
  if (result)
  {
    v46 = result;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v49 = v48;

    v50 = objc_allocWithZone((Class)type metadata accessor for SwiftUIDragItem(0));
    v51 = (void *)SwiftUIDragItem.init(assetID:)(v47, v49);
    objc_msgSend(v44, "registerObject:visibility:", v51, 3);

    return v44;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ListItemComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_32ADC8;
  if (!qword_32ADC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemComponentModel);
  return result;
}

uint64_t ListItemComponentModel.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E1A4(v1, a1, &qword_31F480);
}

uint64_t ListItemComponentModel.impressionMetrics.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_8B3E0(a1, v1, &qword_31F480);
}

uint64_t ListItemComponentModel.listItemViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListItemComponentModel(0) + 20);
  v4 = type metadata accessor for ListItemViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ListItemComponentModel.segue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ListItemComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 24), a1, (uint64_t *)&unk_326210);
}

uint64_t ListItemComponentModel.segue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ListItemComponentModel(0);
  return sub_8B3E0(a1, v1 + *(int *)(v3 + 24), (uint64_t *)&unk_326210);
}

Swift::Void (__swiftcall *ListItemComponentModel.segue.modify())()
{
  type metadata accessor for ListItemComponentModel(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t ListItemComponentModel.contextMenu.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ListItemComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 28), a1, &qword_322C80);
}

uint64_t ListItemComponentModel.contextMenu.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ListItemComponentModel(0);
  return sub_8B3E0(a1, v1 + *(int *)(v3 + 28), &qword_322C80);
}

Swift::Void (__swiftcall *ListItemComponentModel.contextMenu.modify())()
{
  type metadata accessor for ListItemComponentModel(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t ListItemComponentModel.id.getter()
{
  uint64_t v0;
  _QWORD v2[2];

  type metadata accessor for ListItemComponentModel(0);
  v2[0] = ListItemViewModel.assetID.getter();
  v2[1] = v0;
  return AnyHashable.init<A>(_:)(v2, &type metadata for String, &protocol witness table for String);
}

uint64_t ListItemComponentModel.assetIDToObserveState.getter()
{
  type metadata accessor for ListItemComponentModel(0);
  return ListItemViewModel.assetID.getter();
}

uint64_t ListItemComponentModel.init(listItemViewModel:assetInfo:impressionMetrics:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];

  v40 = a2;
  v7 = type metadata accessor for MediaArtwork(0);
  __chkstk_darwin(v7);
  v39 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_322C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 1, 1, v12);
  v13 = (int *)type metadata accessor for ListItemComponentModel(0);
  v14 = a4 + v13[6];
  *(_QWORD *)(v14 + 32) = 0;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  v38 = a4 + v13[7];
  v15 = v38;
  v16 = type metadata accessor for Models.Menu(0);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v37(v15, 1, 1, v16);
  v17 = a4 + v13[5];
  v18 = type metadata accessor for ListItemViewModel(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v36 = a1;
  v21 = v20(v17, a1, v18);
  ListItemViewModel.actionForListItem()(v41, v21);
  v22 = v42;
  v23 = v43;
  v24 = sub_66898(v41, v42);
  v44[3] = v22;
  v44[4] = *(_QWORD *)(v23 + 8);
  v25 = sub_668BC(v44);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v25, v24, v22);
  sub_8B3E0((uint64_t)v44, v14, (uint64_t *)&unk_326210);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v41);
  sub_2049A8(a3, a4);
  v26 = sub_5C154(&qword_322D08);
  v27 = *(_QWORD *)(type metadata accessor for Models.Menu.Child(0) - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v26, v29 + *(_QWORD *)(v27 + 72), v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_258070;
  v31 = (_QWORD *)(v30 + v29);
  *v31 = 0xD00000000000002DLL;
  v31[1] = 0x8000000000274020;
  v32 = (*(uint64_t (**)(void))(v27 + 104))();
  v33 = v39;
  MediaArtwork.init()(v32);
  Models.Menu.init(id:title:icon:children:)(0xD000000000000025, 0x8000000000274DA0, 0x20747865746E6F43, 0xEC000000756E654DLL, v33, v30);
  sub_5E09C(a3, &qword_31F480);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v40);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v36, v18);
  v37((uint64_t)v11, 0, 1, v16);
  return sub_8B3E0((uint64_t)v11, v38, &qword_322C80);
}

uint64_t sub_2049A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_31F480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_2049F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_8B3E0(a1, v2 + *(int *)(a2 + 24), (uint64_t *)&unk_326210);
}

Swift::Void (__swiftcall *sub_204A14())()
{
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_204A28()
{
  return ListItemViewModel.assetID.getter();
}

uint64_t sub_204A4C()
{
  uint64_t v0;
  _QWORD v2[2];

  v2[0] = ListItemViewModel.assetID.getter();
  v2[1] = v0;
  return AnyHashable.init<A>(_:)(v2, &type metadata for String, &protocol witness table for String);
}

uint64_t sub_204A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 24), a2, (uint64_t *)&unk_326210);
}

uint64_t sub_204AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 28), a2, &qword_322C80);
}

uint64_t sub_204AEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_648E0(&qword_32AE20, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
  return LibraryAssetStateRequiring.assetIDsToObserveState.getter(a1, v2);
}

uint64_t sub_204B2C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_196B90(*a1, *a2);
}

Swift::Int sub_204B38()
{
  char *v0;

  return sub_2037C8(*v0);
}

uint64_t sub_204B40(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0x800000000026D7B0;
  v3 = 0x6575676573;
  if (*v1 == 1)
    v3 = 0xD000000000000011;
  else
    v2 = 0xE500000000000000;
  if (*v1)
    v4 = v3;
  else
    v4 = 0xD000000000000011;
  if (*v1)
    v5 = v2;
  else
    v5 = 0x800000000026D790;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_204BB8(uint64_t a1)
{
  char *v1;

  return sub_2038E8(a1, *v1);
}

unint64_t sub_204BC0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_2067FC(*a1);
  *a2 = result;
  return result;
}

void sub_204BEC(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x800000000026D790;
  v4 = 0x800000000026D7B0;
  v5 = 0xD000000000000011;
  if (v2 != 1)
  {
    v5 = 0x6575676573;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000011;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_204C50()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6575676573;
  if (*v0 == 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

unint64_t sub_204CA8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_2067FC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_204CCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_205580();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_204CF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_205580();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListItemComponentModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  _OWORD v98[2];
  uint64_t v99;
  char v100;

  v79 = a2;
  v3 = type metadata accessor for MediaArtwork(0);
  __chkstk_darwin(v3);
  v80 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_322C80);
  __chkstk_darwin(v5);
  v81 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_328018);
  __chkstk_darwin(v7);
  v83 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v9);
  v78 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_322C88);
  __chkstk_darwin(v11);
  v85 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_322C90);
  __chkstk_darwin(v13);
  v82 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ListItemViewModel(0);
  v91 = *(_QWORD *)(v15 - 8);
  v92 = v15;
  v16 = __chkstk_darwin(v15);
  v86 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for CodeListItemViewModel(0, v16);
  v84 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v87 = (uint64_t *)((char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = sub_5C154(&qword_32AD40);
  v19 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ListItemComponentModel(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ImpressionMetrics(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v24, 1, 1, v25);
  v27 = (uint64_t)&v24[*(int *)(v22 + 24)];
  *(_QWORD *)(v27 + 32) = 0;
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)(v27 + 16) = 0u;
  v93 = (char *)v27;
  v90 = v22;
  v28 = *(int *)(v22 + 28);
  v96 = v24;
  v29 = (uint64_t)&v24[v28];
  v30 = type metadata accessor for Models.Menu(0);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v94 = v29;
  v31(v29, 1, 1, v30);
  v32 = a1[3];
  v33 = a1[4];
  v95 = a1;
  sub_66898(a1, v32);
  v34 = sub_205580();
  v35 = v97;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListItemComponentModel.CodingKeys, &type metadata for ListItemComponentModel.CodingKeys, v34, v32, v33);
  if (v35)
  {
    v43 = v94;
    v44 = (uint64_t)v96;
    v45 = (uint64_t)v93;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v95);
    sub_5E09C(v44, &qword_31F480);
    sub_5E09C(v45, (uint64_t *)&unk_326210);
    return sub_5E09C(v43, &qword_322C80);
  }
  v36 = v86;
  v75 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26;
  v76 = v25;
  v77 = v31;
  v97 = v30;
  v37 = v19;
  LOBYTE(v98[0]) = 1;
  v38 = sub_648E0(&qword_32AD50, (uint64_t (*)(uint64_t))&type metadata accessor for CodeListItemViewModel, (uint64_t)&protocol conformance descriptor for CodeListItemViewModel);
  v40 = v87;
  v39 = v88;
  v41 = v89;
  v42 = KeyedDecodingContainer.decode<A>(_:forKey:)(v87, v88, v98, v89, v88, v38);
  CodeListItemViewModel.wrappedValue.getter(v42);
  (*(void (**)(_QWORD *, uint64_t))(v84 + 8))(v40, v39);
  v47 = (uint64_t)v96;
  (*(void (**)(char *, char *, uint64_t))(v91 + 32))(&v96[*(int *)(v90 + 20)], v36, v92);
  v48 = sub_5C154(&qword_322CF0);
  v100 = 2;
  v49 = sub_13E54C(&qword_322CF8, &qword_322CF0, (void (*)(void))sub_C3A84);
  v50 = (uint64_t)v85;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, &v100, v41, v48, v49);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v50, 1, v48) == 1)
  {
    v51 = &qword_322C88;
    v52 = v50;
  }
  else
  {
    v53 = v82;
    sub_5E1A4(v50, v82, &qword_322C90);
    sub_5E09C(v50, &qword_322CF0);
    v54 = type metadata accessor for CodeAnyActionModel(0);
    v55 = *(_QWORD *)(v54 - 8);
    v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54);
    if ((_DWORD)v56 != 1)
    {
      CodeAnyActionModel.wrappedValue.getter(v56);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
      goto LABEL_10;
    }
    v51 = &qword_322C90;
    v52 = v53;
  }
  sub_5E09C(v52, v51);
  v99 = 0;
  memset(v98, 0, sizeof(v98));
LABEL_10:
  v57 = v37;
  v58 = (uint64_t)v83;
  sub_8B3E0((uint64_t)v98, (uint64_t)v93, (uint64_t *)&unk_326210);
  v59 = sub_5C154(&qword_321EA8);
  LOBYTE(v98[0]) = 0;
  v60 = sub_13E54C((unint64_t *)&qword_322038, &qword_321EA8, (void (*)(void))sub_19B718);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v59, v98, v41, v59, v60);
  v93 = v21;
  v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v58, 1, v59);
  v62 = (uint64_t)v81;
  v63 = v78;
  if (v61 == 1)
  {
    sub_5E09C(v58, &qword_328018);
    v75(v63, 1, 1, v76);
  }
  else
  {
    sub_5E1A4(v58, v78, &qword_31F480);
    sub_5E09C(v58, &qword_321EA8);
  }
  sub_8B3E0(v63, v47, &qword_31F480);
  v64 = sub_5C154(&qword_322D08);
  v65 = v57;
  v66 = *(_QWORD *)(type metadata accessor for Models.Menu.Child(0) - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = v41;
  v69 = (v67 + 32) & ~v67;
  v70 = swift_allocObject(v64, v69 + *(_QWORD *)(v66 + 72), v67 | 7);
  *(_OWORD *)(v70 + 16) = xmmword_258070;
  v71 = (_QWORD *)(v70 + v69);
  *v71 = 0xD00000000000002DLL;
  v71[1] = 0x8000000000274020;
  v72 = (*(uint64_t (**)(void))(v66 + 104))();
  v73 = v80;
  MediaArtwork.init()(v72);
  Models.Menu.init(id:title:icon:children:)(0xD000000000000025, 0x8000000000274DA0, 0x20747865746E6F43, 0xEC000000756E654DLL, v73, v70);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v93, v68);
  v77(v62, 0, 1, v97);
  sub_8B3E0(v62, v94, &qword_322C80);
  sub_2055C4(v47, v79);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v95);
  return sub_205608(v47);
}

unint64_t sub_205580()
{
  unint64_t result;

  result = qword_32AD48;
  if (!qword_32AD48)
  {
    result = swift_getWitnessTable(&unk_267E0C, &type metadata for ListItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32AD48);
  }
  return result;
}

uint64_t sub_2055C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListItemComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_205608(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ListItemComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_205644@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ListItemComponentModel.init(from:)(a1, a2);
}

double ListItemComponentModel.cardInfo.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for ListItemComponentModel(0);
  return ListItemViewModel.cardInfo.getter(v0);
}

uint64_t sub_20568C()
{
  return ListItemViewModel.cardInfo.getter();
}

void ListItemComponentModel.dropExited(info:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  Class isa;
  _BYTE v19[152];

  type metadata accessor for EventReporter(0);
  v0 = (void *)static EventReporter.shared.getter();
  v1 = sub_5C154(&qword_31EF50);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_258070;
  type metadata accessor for ListItemComponentModel(0);
  *(_QWORD *)(v2 + 32) = ListItemViewModel.title.getter();
  *(_QWORD *)(v2 + 40) = v3;
  dispatch thunk of EventReporter.emitDragDropEvent(with:)(v2);

  swift_bridgeObjectRelease(v2);
  v4 = sub_5C154(&qword_32AD58);
  inited = swift_initStackObject(v4, v19);
  *(_OWORD *)(inited + 16) = xmmword_2584B0;
  v6 = (void *)JSARecordKeyEventType;
  *(_QWORD *)(inited + 32) = JSARecordKeyEventType;
  v7 = (void *)JSARecordEventTypeDragAndDrop;
  type metadata accessor for FigaroEventType(0);
  *(_QWORD *)(inited + 40) = v7;
  v8 = (void *)JSARecordKeyResult;
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 72) = v8;
  *(_QWORD *)(inited + 80) = 2037411683;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  v10 = (void *)JSARecordKeyItems;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 112) = v10;
  v11 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_258070;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  *(_QWORD *)(v11 + 32) = ListItemViewModel.assetID.getter(v10);
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(inited + 144) = sub_5C154(&qword_31F730);
  *(_QWORD *)(inited + 120) = v11;
  v16 = sub_537D0(inited);
  v17 = (void *)objc_opt_self(JSAApplication);
  type metadata accessor for FigaroKey(0);
  sub_648E0(&qword_3261C0, (uint64_t (*)(uint64_t))type metadata accessor for FigaroKey, (uint64_t)&unk_257118);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, "recordNativeEvent:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

}

uint64_t sub_2058B8()
{
  return sub_648E0(&qword_320058, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
}

uint64_t sub_2058E4(uint64_t a1)
{
  uint64_t result;

  result = sub_648E0(&qword_320058, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_205920()
{
  return sub_648E0(&qword_32AD60, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
}

uint64_t sub_20594C()
{
  return sub_648E0(&qword_32AD68, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
}

uint64_t *initializeBufferWithCopyOfBuffer for ListItemComponentModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for ImpressionMetrics(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5C154(&qword_31F480);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ListItemViewModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(uint64_t *)((char *)a2 + v15 + 24);
    if (v18)
    {
      v19 = *((_QWORD *)v17 + 4);
      *((_QWORD *)v16 + 3) = v18;
      *((_QWORD *)v16 + 4) = v19;
      (**(void (***)(void))(v18 - 8))();
    }
    else
    {
      v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v20;
      *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
    }
    v21 = a3[7];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for Models.Menu(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_5C154(&qword_322C80);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
  }
  return a1;
}

uint64_t destroy for ListItemComponentModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for ImpressionMetrics(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (_QWORD *)(a1 + a2[6]);
  if (v8[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v8);
  v9 = a1 + a2[7];
  v10 = type metadata accessor for Models.Menu(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

char *initializeWithCopy for ListItemComponentModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)&a2[v13 + 24];
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for Models.Menu(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_5C154(&qword_322C80);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

char *assignWithCopy for ListItemComponentModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)&a2[v16 + 24];
  if (*(_QWORD *)&a1[v16 + 24])
  {
    if (v19)
    {
      sub_65938(v17, v18);
      goto LABEL_14;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v17);
  }
  else if (v19)
  {
    *((_QWORD *)v17 + 3) = v19;
    *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    (**(void (***)(char *, char *))(v19 - 8))(v17, v18);
    goto LABEL_14;
  }
  v20 = *(_OWORD *)v18;
  v21 = *((_OWORD *)v18 + 1);
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  *(_OWORD *)v17 = v20;
  *((_OWORD *)v17 + 1) = v21;
LABEL_14:
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for Models.Menu(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_19;
  }
  if (v29)
  {
LABEL_19:
    v30 = sub_5C154(&qword_322C80);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

char *initializeWithTake for ListItemComponentModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  v18 = &a1[v14];
  v19 = &a2[v14];
  v20 = type metadata accessor for Models.Menu(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_5C154(&qword_322C80);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

char *assignWithTake for ListItemComponentModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;

  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5C154(&qword_31F480);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  if (*(_QWORD *)&a1[v16 + 24])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v17);
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for Models.Menu(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_14;
  }
  if (v27)
  {
LABEL_14:
    v28 = sub_5C154(&qword_322C80);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemComponentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2063CC);
}

uint64_t sub_2063CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = sub_5C154(&qword_31F480);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for ListItemViewModel(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = sub_5C154(&qword_322C80);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[6] + 24);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemComponentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2064BC);
}

uint64_t sub_2064BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5C154(&qword_31F480);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for ListItemViewModel(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[6] + 24) = a2;
        return result;
      }
      v10 = sub_5C154(&qword_322C80);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_206590(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_C1800(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ListItemViewModel(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "(";
      sub_C1800(319, (unint64_t *)&unk_322D78, (uint64_t (*)(uint64_t))&type metadata accessor for Models.Menu);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for ListItemComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2066A4 + 4 * byte_267AF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2066D8 + 4 * byte_267AF0[v4]))();
}

uint64_t sub_2066D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2066E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2066E8);
  return result;
}

uint64_t sub_2066F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2066FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_206700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_206708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListItemComponentModel.CodingKeys()
{
  return &type metadata for ListItemComponentModel.CodingKeys;
}

unint64_t sub_206728()
{
  unint64_t result;

  result = qword_32AE08;
  if (!qword_32AE08)
  {
    result = swift_getWitnessTable(&unk_267DE4, &type metadata for ListItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32AE08);
  }
  return result;
}

unint64_t sub_206770()
{
  unint64_t result;

  result = qword_32AE10;
  if (!qword_32AE10)
  {
    result = swift_getWitnessTable(&unk_267D1C, &type metadata for ListItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32AE10);
  }
  return result;
}

unint64_t sub_2067B8()
{
  unint64_t result;

  result = qword_32AE18;
  if (!qword_32AE18)
  {
    result = swift_getWitnessTable(&unk_267D44, &type metadata for ListItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32AE18);
  }
  return result;
}

unint64_t sub_2067FC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6498, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t PageLifecycleHandler.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = swift_allocObject(v0, 24, 7);
  v2 = type metadata accessor for Page.LifecycleInfo();
  v3 = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v1 + 16) = v3;
  return v1;
}

uint64_t PageLifecycleHandler.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Page.LifecycleInfo();
  v2 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v2 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

unint64_t sub_2068D0(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47[2];
  _QWORD v48[6];

  v46 = a6;
  v43 = a5;
  v39 = a3;
  v40 = a4;
  v9 = type metadata accessor for ScenePhase(0);
  v41 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v42 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_320658);
  v45 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_31FE40);
  v44 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_5C154(&qword_31F128);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  v22 = *(_QWORD *)(v6 + 16);
  Date.init()(v18);
  v23 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v20, 0, 1, v23);
  swift_beginAccess(v22 + 16, v48, 33, 0);
  sub_12A5A0((uint64_t)v20, v21);
  result = swift_endAccess(v48);
  if (*(_QWORD *)(a2 + 16))
  {
    result = sub_583A4(v21);
    if ((v25 & 1) != 0)
    {
      sub_5E0D8(*(_QWORD *)(a2 + 56) + 40 * result, (uint64_t)v47);
      sub_5DC98(v47, (uint64_t)v48);
      BaseObjectGraph.inject<A>(_:)(v16, v14, v14);
      (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v13, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v11);
      v26 = sub_5C154(&qword_31F010);
      v27 = *(_QWORD *)(type metadata accessor for Dependency(0) - 8);
      v38 = v11;
      v28 = swift_allocObject(v26, ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ 4 * *(_QWORD *)(v27 + 72), *(unsigned __int8 *)(v27 + 80) | 7);
      *(_OWORD *)(v28 + 16) = xmmword_25D600;
      v29 = type metadata accessor for Page.LifecycleInfo();
      *(_QWORD *)&v47[0] = v22;
      swift_retain(v22);
      Dependency.init<A>(satisfying:with:)(v29, v47, v29);
      v30 = type metadata accessor for BATracker(0);
      *(_QWORD *)&v47[0] = v39;
      v31 = v39;
      Dependency.init<A>(satisfying:with:)(v30, v47, v30);
      v32 = sub_5C154(&qword_324D78);
      *(_QWORD *)&v47[0] = v40;
      swift_retain(v40);
      Dependency.init<A>(satisfying:with:)(v32, v47, v32);
      v33 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v43, v9);
      Dependency.init<A>(satisfying:with:)(v9, v33, v9);
      *(_QWORD *)&v47[0] = v28;
      v34 = sub_5C154((uint64_t *)&unk_31FEC0);
      v35 = sub_7D48C();
      v36 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(v47, v34, v35);
      swift_bridgeObjectRelease(v28);
      v37 = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v48, v13, v36, v14);
      swift_release(v37);
      swift_release(v36);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v38);
      (*(void (**)(_QWORD *, uint64_t))(v44 + 8))(v16, v14);
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v48);
    }
  }
  return result;
}

uint64_t PageLifecycleHandler.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t PageLifecycleHandler.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for PageLifecycleHandler()
{
  return objc_opt_self(_TtC11BookStoreUI20PageLifecycleHandler);
}

uint64_t method lookup function for PageLifecycleHandler(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PageLifecycleHandler);
}

BOOL sub_206CFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_206D10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_206D24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_206D38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void sub_206D4C()
{
  off_32AED0 = (int *)&off_2E6EE8;
}

void sub_206D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;

  v1 = type metadata accessor for GenreInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return;
  v7 = v5 + 32;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  v8 = 0;
  v9 = 0.0;
  v39 = v6;
  v40 = v5;
  v42 = v1;
  v38 = v5 + 32;
  while (1)
  {
    if (v8 >= *(_QWORD *)(v5 + 16))
      goto LABEL_43;
    sub_5E0D8(v7 + 40 * v8, (uint64_t)v45);
    v11 = v46;
    v10 = v47;
    sub_66898(v45, v46);
    v12 = ContentInfo.genres.getter(v11, *(_QWORD *)(v10 + 8));
    if (!v12)
      goto LABEL_4;
    v13 = v12;
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
      break;
    swift_bridgeObjectRelease(v12);
LABEL_4:
    ++v8;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v45);
    if (v8 == v6)
    {
      swift_bridgeObjectRelease(v5);
      return;
    }
  }
  v41 = v8;
  v15 = 0;
  v16 = v12 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v43 = v16;
  v44 = v14;
  while (1)
  {
    if (v15 >= *(_QWORD *)(v13 + 16))
    {
      __break(1u);
      goto LABEL_42;
    }
    v17 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, v16 + *(_QWORD *)(v2 + 72) * v15, v1);
    GenreInfo.parentId.getter(v17);
    v19 = v18;
    v20 = swift_bridgeObjectRelease(v18);
    if (v19)
    {
      v21 = GenreInfo.id.getter(v20);
      if (v22)
        break;
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
LABEL_10:
    if (++v15 == v14)
    {
      swift_bridgeObjectRelease(v13);
      goto LABEL_38;
    }
  }
  v23 = v21;
  v24 = v22;
  if (qword_31E758 != -1)
    swift_once(&qword_31E758, sub_206D4C);
  v25 = off_32AED0;
  v26 = *(_QWORD *)((char *)&dword_10 + (_QWORD)off_32AED0);
  if (!v26)
    goto LABEL_35;
  v27 = *(_QWORD *)((char *)&stru_20.cmd + (_QWORD)off_32AED0);
  v28 = *(_QWORD *)&stru_20.segname[(_QWORD)off_32AED0];
  v29 = v27 == v23 && v24 == v28;
  if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v23, v24, 0) & 1) != 0)
  {
LABEL_36:
    v1 = v42;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v42);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v24);
    v9 = v9 + 1.0;
LABEL_38:
    v6 = v39;
    v5 = v40;
    v7 = v38;
    v8 = v41;
    goto LABEL_4;
  }
  if (v26 == 1)
    goto LABEL_35;
  v30 = *(_QWORD *)&stru_20.segname[(_QWORD)v25 + 8];
  v31 = *(_QWORD *)&stru_20.segname[(_QWORD)v25 + 16];
  if (v30 == v23 && v24 == v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v23, v24, 0) & 1) != 0)
    goto LABEL_36;
  if (v26 == 2)
  {
LABEL_35:
    v1 = v42;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v42);
    swift_bridgeObjectRelease(v24);
    v16 = v43;
    v14 = v44;
    goto LABEL_10;
  }
  v32 = (uint64_t *)(v25 + 18);
  v33 = 2;
  while (1)
  {
    v34 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    v35 = *(v32 - 1);
    v36 = *v32;
    v37 = v35 == v23 && v24 == v36;
    if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v23, v24, 0) & 1) != 0)
      goto LABEL_36;
    v32 += 2;
    ++v33;
    if (v34 == v26)
      goto LABEL_35;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t sub_207084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(v1);
  v3 = sub_2076D0(v2);
  swift_bridgeObjectRelease(v1);
  result = swift_release(v3);
  v5 = 0;
  v6 = 0;
  v7 = v1 + 64;
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v13 = v12 | (v6 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v13);
    v15 = __OFADD__(v5, v14);
    v5 += v14;
    if (v15)
    {
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
  }
  v16 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_23;
  if (v16 >= v11)
    return result;
  v17 = *(_QWORD *)(v7 + 8 * v16);
  ++v6;
  if (v17)
    goto LABEL_20;
  v6 = v16 + 1;
  if (v16 + 1 >= v11)
    return result;
  v17 = *(_QWORD *)(v7 + 8 * v6);
  if (v17)
    goto LABEL_20;
  v6 = v16 + 2;
  if (v16 + 2 >= v11)
    return result;
  v17 = *(_QWORD *)(v7 + 8 * v6);
  if (v17)
  {
LABEL_20:
    v10 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_5;
  }
  v18 = v16 + 3;
  if (v18 >= v11)
    return result;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v11)
      return result;
    v17 = *(_QWORD *)(v7 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_2071F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11[2];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = _swiftEmptyArrayStorage;
  v15 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  if (v3)
  {
    v4 = 0;
    v5 = v1 + 32;
    v6 = _swiftEmptyArrayStorage;
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      sub_5E0D8(v5, (uint64_t)&v12);
      v7 = v13;
      v8 = v14;
      sub_66898(&v12, v13);
      if ((AssetInfo.isPartOfSeries.getter(v7, v8) & 1) != 0)
      {
        sub_5DC98(&v12, (uint64_t)v11);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          sub_20C858(0, v6[2] + 1, 1);
        v6 = v15;
        v10 = v15[2];
        v9 = v15[3];
        if (v10 >= v9 >> 1)
        {
          sub_20C858(v9 > 1, v10 + 1, 1);
          v6 = v15;
        }
        v6[2] = v10 + 1;
        sub_5DC98(v11, (uint64_t)&v6[5 * v10 + 4]);
      }
      else
      {
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v12);
      }
      ++v4;
      v5 += 40;
      if (v3 == v4)
      {
        v2 = v15;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(v1);
    swift_release(v2);
  }
}

uint64_t sub_207378(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  void *v30;
  __n128 v31;
  uint64_t v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a1;
  v6 = type metadata accessor for DateComponents(0, a4);
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Calendar(0, v7);
  v10 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssetInfo.releaseDate.getter(a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_12EE3C((uint64_t)v15);
    return 0;
  }
  v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  static Calendar.gregorian.getter(v20);
  v21 = sub_5C154(&qword_327228);
  v23 = type metadata accessor for Calendar.Component(0, v22);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(v21, v26 + *(_QWORD *)(v24 + 72), v25 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_258070;
  v28 = v27 + v26;
  v29.n128_f64[0] = (*(double (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v28, enum case for Calendar.Component.year(_:), v23);
  v30 = sub_17E280(v27, v29);
  swift_setDeallocating(v27);
  swift_arrayDestroy(v28, 1, v23);
  swift_deallocClassInstance(v27, 32, 7);
  Calendar.dateComponents(_:from:)(v30, v19);
  v31 = swift_bridgeObjectRelease(v30);
  v32 = DateComponents.year.getter(v31);
  LOBYTE(v23) = v33;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v38);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v36);
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((v23 & 1) != 0)
    return 0;
  if (v32 == v35)
    return 1;
  if (!__OFSUB__(v35, 1))
    return v32 == v35 - 1;
  __break(1u);
  return result;
}

void *sub_20762C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *result;
  void *v5;
  double v6;
  double v7;
  void *v8;
  id v9;

  v3 = *(_QWORD *)(a2 + 8);
  result = (void *)ContentInfo.storeData.getter(a1, v3);
  if (result)
  {
    v5 = result;
    objc_msgSend(result, "averageRating");
    v7 = v6;

    result = (void *)ContentInfo.storeData.getter(a1, v3);
    if (result)
    {
      v8 = result;
      v9 = objc_msgSend(result, "ratingCount");

      if (v7 * 5.0 >= 4.2)
        return (void *)((unint64_t)v9 > 9);
      else
        return 0;
    }
  }
  return result;
}

unint64_t *sub_2076D0(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  uint64_t v11;

  v2 = (unint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_207820((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_207820((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

unint64_t *sub_207820(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_5989C(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_5989C(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_5989C(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12) == 1)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_5989C(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_5989C(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_5989C(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_20796C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  void (*v7)(_QWORD *@<X8>);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t (*v52)(char *, unint64_t, uint64_t);
  _QWORD *v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v2 = type metadata accessor for GenreInfo(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)sub_53348((uint64_t)_swiftEmptyArrayStorage);
  v46 = *(_QWORD *)(a1 + 16);
  if (!v46)
  {
    v7 = 0;
    goto LABEL_29;
  }
  v44 = a1;
  v45 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = 0;
  v49 = v3;
  v50 = v5;
  while (1)
  {
    sub_5E0D8(v45 + 40 * v8, (uint64_t)v54);
    v9 = v55;
    v10 = v56;
    sub_66898(v54, v55);
    v11 = ContentInfo.genres.getter(v9, *(_QWORD *)(v10 + 8));
    if (!v11)
      goto LABEL_4;
    v47 = v11;
    v48 = v8;
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
      break;
LABEL_3:
    swift_bridgeObjectRelease(v47);
    v8 = v48;
LABEL_4:
    ++v8;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v54);
    if (v8 == v46)
    {
      swift_bridgeObjectRelease(v44);
LABEL_29:
      sub_6C2DC((uint64_t)v7, 0);
      return (uint64_t)v6;
    }
  }
  v13 = v11 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v14 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v51 = *(_QWORD *)(v3 + 72);
  v52 = v14;
  for (i = v14(v5, v13, v2); ; i = v52(v5, v13, v2))
  {
    GenreInfo.parentId.getter(i);
    v22 = v21;
    v20 = swift_bridgeObjectRelease(v21);
    if (!v22)
      goto LABEL_11;
    v23 = GenreInfo.id.getter(v20);
    if (!v24)
      goto LABEL_11;
    v25 = v23;
    v26 = v24;
    v27 = v2;
    sub_6C2DC((uint64_t)v7, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v53 = v6;
    v29 = v25;
    v31 = sub_582B4(v25, v26);
    v32 = v6[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      break;
    v35 = v30;
    if (v6[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_5AF8C();
    }
    else
    {
      sub_13B53C(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_582B4(v29, v26);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_33;
      v31 = v36;
    }
    v2 = v27;
    v6 = v53;
    swift_bridgeObjectRelease(0x8000000000000000);
    v3 = v49;
    if ((v35 & 1) != 0)
    {
      swift_bridgeObjectRetain(v6);
      v5 = v50;
    }
    else
    {
      v6[(v31 >> 6) + 8] |= 1 << v31;
      v38 = (uint64_t *)(v6[6] + 16 * v31);
      *v38 = v29;
      v38[1] = v26;
      *(_QWORD *)(v6[7] + 8 * v31) = 0;
      v39 = v6[2];
      v40 = v39 + 1;
      v41 = __OFADD__(v39, 1);
      swift_bridgeObjectRetain(v6);
      v5 = v50;
      if (v41)
        goto LABEL_32;
      v6[2] = v40;
      swift_bridgeObjectRetain(v26);
    }
    v16 = v6[7];
    swift_bridgeObjectRelease(v6);
    v17 = *(_QWORD *)(v16 + 8 * v31);
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_31;
    *(_QWORD *)(v16 + 8 * v31) = v19;
    v20 = swift_bridgeObjectRelease(v26);
    v7 = sub_9E000;
LABEL_11:
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v20);
    v13 += v51;
    if (!--v12)
      goto LABEL_3;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t destroy for ReaderTypeDataProvider(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for ReaderTypeDataProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for ReaderTypeDataProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for ReaderTypeDataProvider(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ReaderTypeDataProvider()
{
  return &type metadata for ReaderTypeDataProvider;
}

uint64_t storeEnumTagSinglePayload for DataProviderReaderType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_207E74 + 4 * byte_267EA5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_207EA8 + 4 * byte_267EA0[v4]))();
}

uint64_t sub_207EA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_207EB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x207EB8);
  return result;
}

uint64_t sub_207EC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x207ECCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_207ED0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_207ED8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataProviderReaderType()
{
  return &type metadata for DataProviderReaderType;
}

unint64_t sub_207EF8()
{
  unint64_t result;

  result = qword_32AED8;
  if (!qword_32AED8)
  {
    result = swift_getWitnessTable(&unk_267FA0, &type metadata for DataProviderReaderType);
    atomic_store(result, (unint64_t *)&qword_32AED8);
  }
  return result;
}

double sub_207F3C()
{
  double result;

  qword_32AF00 = 0;
  result = 0.0;
  xmmword_32AEE0 = 0u;
  *(_OWORD *)algn_32AEF0 = 0u;
  return result;
}

uint64_t sub_207F54@<X0>(uint64_t a1@<X8>)
{
  if (qword_31E760 != -1)
    swift_once(&qword_31E760, sub_207F3C);
  return sub_208028((uint64_t)&xmmword_32AEE0, a1);
}

uint64_t EnvironmentValues.contextActionIconProvider.getter()
{
  unint64_t v0;

  v0 = sub_1594A0();
  return EnvironmentValues.subscript.getter(&type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v0);
}

uint64_t EnvironmentValues.contextActionIconProvider.setter(uint64_t a1)
{
  unint64_t v2;
  _BYTE v4[40];

  sub_208028(a1, (uint64_t)v4);
  v2 = sub_1594A0();
  EnvironmentValues.subscript.setter(v4, &type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v2);
  return sub_208070(a1);
}

uint64_t sub_208028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3202A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_208070(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_3202A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*EnvironmentValues.contextActionIconProvider.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  v4 = sub_1594A0();
  v3[16] = v4;
  EnvironmentValues.subscript.getter(&type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v4);
  return sub_208114;
}

void sub_208114(uint64_t *a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)*a1;
  v3 = *a1 + 40;
  v4 = *(_QWORD *)(*a1 + 128);
  if ((a2 & 1) != 0)
  {
    sub_208028(*a1, v3);
    sub_208028(v3, (uint64_t)(v2 + 80));
    EnvironmentValues.subscript.setter(v2 + 80, &type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v4);
    sub_208070(v3);
  }
  else
  {
    sub_208028(*a1, v3);
    EnvironmentValues.subscript.setter(v3, &type metadata for ContextActionIconProvidingKey, &type metadata for ContextActionIconProvidingKey, v4);
  }
  sub_208070((uint64_t)v2);
  free(v2);
}

uint64_t dispatch thunk of ContextActionIconProviding.coverImages(actionItems:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 32);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_9431C;
  return v10(a1, a2, a3);
}

ValueMetadata *type metadata accessor for ContextActionIconProvidingKey()
{
  return &type metadata for ContextActionIconProvidingKey;
}

uint64_t SeriesRoomHeaderComponentModel.segue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 52), a1, (uint64_t *)&unk_326210);
}

uint64_t type metadata accessor for SeriesRoomHeaderComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_32AFA0;
  if (!qword_32AFA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesRoomHeaderComponentModel);
  return result;
}

uint64_t SeriesRoomHeaderComponentModel.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 56), a1, &qword_31F480);
}

uint64_t SeriesRoomHeaderComponentModel.id.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[2];

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  swift_bridgeObjectRetain(v1);
  return AnyHashable.init<A>(_:)(v3, &type metadata for String, &protocol witness table for String);
}

uint64_t SeriesRoomHeaderComponentModel.init(series:quickActionButtonViewModel:impressionMetrics:localizerForAnalytics:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t AssociatedTypeWitness;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t);
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  int *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v129)(char *, uint64_t, uint64_t);
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  char v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t result;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char v185;
  uint64_t v186;
  unint64_t v187;
  BOOL v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  int *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;

  v217 = a4;
  v218 = a3;
  v219 = a2;
  v213 = a5;
  v212 = type metadata accessor for ContentKind(0);
  v211 = *(_QWORD *)(v212 - 8);
  v6 = __chkstk_darwin(v212);
  v209 = (char *)&v189 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = type metadata accessor for TopLockupMetadataView.Footer(0, v6);
  v208 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v207 = (uint64_t)&v189 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_5C154(&qword_32AF10);
  __chkstk_darwin(v192);
  v191 = (char *)&v189 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_32AF18);
  v11 = __chkstk_darwin(v10);
  v203 = (char *)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for AudiobookSeriesInfo(0, v11);
  v204 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v195 = (char *)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_324BC8);
  __chkstk_darwin(v14);
  v215 = (char *)&v189 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v16);
  v194 = (uint64_t)&v189 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v200 = (uint64_t)&v189 - v19;
  v202 = type metadata accessor for LocalizerRequest(0);
  v214 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v190 = (char *)&v189 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v193 = (char *)&v189 - v22;
  v201 = sub_5C154(&qword_327938);
  v199 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v198 = (char *)&v189 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5C154(&qword_322950);
  __chkstk_darwin(v24);
  v221 = (char *)&v189 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SeriesType(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v189 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v189 - v32;
  v34 = type metadata accessor for CoverViewModel.Style(0, v31);
  v224 = *(_QWORD *)(v34 - 8);
  v225 = v34;
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v189 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for CoverViewModel(0, v35);
  v222 = *(_QWORD *)(v38 - 8);
  v223 = v38;
  __chkstk_darwin(v38);
  v196 = (char *)&v189 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v189 - v41;
  v43 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  __chkstk_darwin(v43);
  v45 = (uint64_t *)((char *)&v189 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v205 = v46;
  v47 = (char *)v45 + v46[13];
  *((_QWORD *)v47 + 4) = 0;
  *(_OWORD *)v47 = 0u;
  *((_OWORD *)v47 + 1) = 0u;
  v48 = a1[3];
  v49 = a1[4];
  sub_66898(a1, v48);
  *v45 = ContentInfo.id.getter(v48, *(_QWORD *)(v49 + 8));
  v45[1] = v50;
  v206 = v45;
  v51 = a1[3];
  sub_66898(a1, v51);
  v52 = SeriesInfo.contentsForArtwork.getter(v51);
  if (v52)
  {
    v53 = v52;
    *(_QWORD *)&v226 = v52;
    v54 = sub_5C154(&qword_325E10);
    v55 = sub_20A9D4();
    if ((Collection.isNotEmpty.getter(v54, v55) & 1) != 0)
    {
      v56 = *(_QWORD *)(v53 + 16);
      if (v56)
      {
        v197 = a1;
        *(_QWORD *)&v229 = &_swiftEmptyArrayStorage;
        sub_20C498(0, v56, 0);
        v57 = v53;
        v58 = v53 + 32;
        v59 = enum case for CoverViewModel.Style.image(_:);
        do
        {
          sub_5E0D8(v58, (uint64_t)&v226);
          v60 = *((_QWORD *)&v227 + 1);
          v61 = v228;
          sub_66898(&v226, *((uint64_t *)&v227 + 1));
          v62 = AssetInfo.coverAspectRatio.getter(v60, v61) * 180.0;
          sub_5E0D8((uint64_t)&v226, (uint64_t)v37);
          *((double *)v37 + 5) = v62;
          *((_QWORD *)v37 + 6) = 0x4066800000000000;
          (*(void (**)(char *, uint64_t, uint64_t))(v224 + 104))(v37, v59, v225);
          CoverViewModel.init(style:)(v37);
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v226);
          v63 = (_QWORD *)v229;
          if ((swift_isUniquelyReferenced_nonNull_native(v229) & 1) == 0)
          {
            sub_20C498(0, v63[2] + 1, 1);
            v63 = (_QWORD *)v229;
          }
          v65 = v63[2];
          v64 = v63[3];
          if (v65 >= v64 >> 1)
          {
            sub_20C498(v64 > 1, v65 + 1, 1);
            v63 = (_QWORD *)v229;
          }
          v63[2] = v65 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v222 + 32))((unint64_t)v63+ ((*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80))+ *(_QWORD *)(v222 + 72) * v65, v42, v223);
          *(_QWORD *)&v229 = v63;
          v58 += 40;
          --v56;
        }
        while (v56);
        swift_bridgeObjectRelease(v57);
LABEL_22:
        a1 = v197;
      }
      else
      {
        swift_bridgeObjectRelease(v53);
        v63 = &_swiftEmptyArrayStorage;
      }
      v89 = (uint64_t)v206;
      v206[2] = v63;
      v90 = v205;
      v91 = v89 + v205[6];
      v92 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
      v223 = *(_QWORD *)(v92 - 8);
      v224 = v92;
      (*(void (**)(uint64_t, uint64_t))(v223 + 16))(v91, v219);
      sub_5E1A4(v218, v89 + v90[14], &qword_31F480);
      v93 = a1[3];
      v94 = a1[4];
      sub_66898(a1, v93);
      v95 = ContentInfo.title.getter(v93, *(_QWORD *)(v94 + 8));
      v97 = v96;
      v98 = v198;
      static LocalizerRequest.verbatim(_:)(v95);
      swift_bridgeObjectRelease(v97);
      v99 = enum case for PlaceholderTextView.ContentType.content<A>(_:);
      v100 = v199;
      v101 = v201;
      v222 = *(_QWORD *)(v199 + 104);
      ((void (*)(char *, _QWORD, uint64_t))v222)(v98, enum case for PlaceholderTextView.ContentType.content<A>(_:), v201);
      (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v89 + v90[7], v98, v101);
      v102 = a1[3];
      v103 = a1[4];
      sub_66898(a1, v102);
      v104 = (uint64_t)v215;
      SeriesInfo.authorInfo.getter(v102, v103);
      v105 = v200;
      sub_1F90E0(v104, v200);
      sub_5E09C(v104, &qword_324BC8);
      v106 = v214;
      v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
      v108 = v202;
      v109 = v107(v105, 1, v202);
      v110 = v216;
      if (v109 == 1)
      {
        sub_5E09C(v105, &qword_3217B8);
        v111 = v89 + v90[8];
        v112 = enum case for PlaceholderTextView.PlaceholderSize.large<A>(_:);
        v113 = sub_5C154(&qword_32AF20);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 104))(v111, v112, v113);
        v114 = enum case for PlaceholderTextView.ContentType.placeholder<A>(_:);
        v115 = v111;
      }
      else
      {
        v116 = v105;
        v117 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 32);
        v118 = v107;
        v119 = v90;
        v120 = v108;
        v121 = v193;
        v117(v193, v116, v120);
        v122 = v89 + v119[8];
        v123 = v121;
        v108 = v120;
        v90 = v119;
        v107 = v118;
        v110 = v216;
        v117((char *)v122, (uint64_t)v123, v108);
        v115 = v122;
        v114 = v99;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t))v222)(v115, v114, v101);
      sub_20954C(a1, v89 + v90[9]);
      sub_20A3C8(a1, v217, v89 + v90[10]);
      sub_5E0D8((uint64_t)a1, (uint64_t)&v226);
      v124 = sub_5C154(&qword_32AF28);
      v125 = (uint64_t)v203;
      v126 = swift_dynamicCast(v203, &v226, v124, v110, 6);
      v127 = v204;
      v128 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v204 + 56);
      LODWORD(v225) = v99;
      if ((v126 & 1) != 0)
      {
        v128(v125, 0, 1, v110);
        v129 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 32);
        v130 = v127;
        v131 = v195;
        v132 = v129(v195, v125, v110);
        v133 = v110;
        v134 = (uint64_t)v215;
        AudiobookSeriesInfo.narratorInfo.getter(v132);
        v135 = v194;
        sub_1F90E0(v134, v194);
        sub_5E09C(v134, &qword_324BC8);
        (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v133);
        if (v107(v135, 1, v108) != 1)
        {
          v142 = *(void (**)(char *, uint64_t, uint64_t))(v214 + 32);
          v143 = v108;
          v144 = v190;
          v142(v190, v135, v143);
          v145 = v191;
          v142(v191, (uint64_t)v144, v143);
          v146 = v89 + v90[12];
          v147 = *(int *)(v192 + 48);
          v142((char *)v146, (uint64_t)v145, v143);
          *(_BYTE *)(v146 + v147) = 0;
          v148 = sub_5C154(&qword_327930);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v148 - 8) + 104))(v146, v225, v148);
          goto LABEL_32;
        }
        sub_5E09C(v135, &qword_3217B8);
        v136 = v89 + v90[12];
        v137 = enum case for PlaceholderTextView.PlaceholderSize.medium<A>(_:);
        v138 = sub_5C154(&qword_32AF38);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 104))(v136, v137, v138);
        v139 = (unsigned int *)&enum case for PlaceholderTextView.ContentType.placeholder<A>(_:);
      }
      else
      {
        v128(v125, 1, 1, v110);
        sub_5E09C(v125, &qword_32AF18);
        v136 = v89 + v90[12];
        v139 = (unsigned int *)&enum case for PlaceholderTextView.ContentType.none<A>(_:);
      }
      v140 = *v139;
      v141 = sub_5C154(&qword_327930);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 104))(v136, v140, v141);
LABEL_32:
      v149 = v90;
      v150 = a1[3];
      v151 = a1[4];
      sub_66898(a1, v150);
      v152 = (uint64_t)v209;
      dispatch thunk of SeriesInfo.contentKind.getter(v150, v151);
      v153 = a1[3];
      v154 = a1[4];
      sub_66898(a1, v153);
      v155 = SeriesInfo.assetCount.getter(v153, v154);
      LODWORD(v151) = v156 & 1;
      v157 = a1[3];
      v158 = a1[4];
      sub_66898(a1, v157);
      v159 = SeriesInfo.assetMinimumCount.getter(v157, v158);
      v160 = a1;
      v162 = v161 & 1;
      v163 = v160[3];
      v164 = v160[4];
      sub_66898(v160, v163);
      v165 = ContentInfo.genres.getter(v163, *(_QWORD *)(v164 + 8));
      v166 = v207;
      sub_130204(v152, v155, v151, v159, v162, v165, v207);
      swift_bridgeObjectRelease(v165);
      sub_5E09C(v217, &qword_32AF30);
      sub_5E09C(v218, &qword_31F480);
      (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v219, v224);
      (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v152, v212);
      v167 = v89 + v149[11];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v208 + 32))(v167, v166, v210);
      v168 = sub_5C154(&qword_327928);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v168 - 8) + 104))(v167, v225, v168);
      sub_20A990(v89, v213);
      return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v160);
    }
    swift_bridgeObjectRelease(v53);
  }
  v66 = a1[3];
  v67 = a1[4];
  sub_66898(a1, v66);
  dispatch thunk of SeriesInfo.seriesType.getter(v66, v67, v68);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v29, enum case for SeriesType.audiobook(_:), v26);
  v69 = sub_648E0((unint64_t *)&qword_323978, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesType, (uint64_t)&protocol conformance descriptor for SeriesType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v226, v26, v69);
  dispatch thunk of RawRepresentable.rawValue.getter(&v229, v26, v69);
  v70 = *((_QWORD *)&v226 + 1);
  v71 = *((_QWORD *)&v229 + 1);
  if (v226 == v229)
  {
    LOBYTE(v72) = 1;
    v71 = *((_QWORD *)&v226 + 1);
  }
  else
  {
    LOBYTE(v72) = _stringCompareWithSmolCheck(_:_:expecting:)(v226, *((_QWORD *)&v226 + 1), v229, *((_QWORD *)&v229 + 1), 0);
  }
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v71);
  v73 = *(void (**)(char *, uint64_t))(v27 + 8);
  v73(v29, v26);
  v73(v33, v26);
  v74 = a1[3];
  v75 = a1[4];
  sub_66898(a1, v74);
  v84 = SeriesInfo.assets.getter(v74, v75);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v75);
  v86 = sub_5C154(&qword_31EF60);
  v87 = _arrayForceCast<A, B>(_:)(v84, AssociatedTypeWitness, v86);
  swift_bridgeObjectRelease(v84);
  if (*(_QWORD *)(v87 + 16))
  {
    sub_5E0D8(v87 + 32, (uint64_t)&v226);
  }
  else
  {
    v228 = 0;
    v226 = 0u;
    v227 = 0u;
  }
  v170 = (uint64_t)v221;
  swift_bridgeObjectRelease(v87);
  if (*((_QWORD *)&v227 + 1))
  {
    v171 = type metadata accessor for BookInfo(0);
    v172 = swift_dynamicCast(v170, &v226, v86, v171, 6);
    v173 = *(_QWORD *)(v171 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v173 + 56))(v170, v172 ^ 1u, 1, v171);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v170, 1, v171) != 1)
    {
      v88 = BookInfo.isRTL.getter();
      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v170, v171);
      goto LABEL_40;
    }
  }
  else
  {
    sub_5E09C((uint64_t)&v226, &qword_320940);
    v174 = type metadata accessor for BookInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v174 - 8) + 56))(v170, 1, 1, v174);
  }
  sub_5E09C(v170, &qword_322950);
  v88 = 0;
LABEL_40:
  while (1)
  {
    v175 = a1[3];
    v176 = a1[4];
    sub_66898(a1, v175);
    v177 = SeriesInfo.assetCount.getter(v175, v176);
    v179 = v177 >= 5 ? 5 : v177;
    v180 = (v178 & 1) != 0 ? 5 : v179;
    if ((v180 & 0x8000000000000000) == 0)
      break;
LABEL_62:
    __break(1u);
    swift_once(&qword_31E648, sub_126CA4);
    v76 = type metadata accessor for Logger(0);
    sub_5240C(v76, (uint64_t)qword_325268);
    v77 = swift_errorRetain(v176);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v80 = 138412290;
      v221 = (char *)(v80 + 4);
      v82 = _convertErrorToNSError(_:)(v176);
      *(_QWORD *)&v226 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v226, (char *)&v226 + 8, v221, v80 + 12);
      *v81 = v82;
      swift_errorRelease(v176);
      _os_log_impl(&dword_0, v78, v79, "Failed to retrieve first asset: %@", v80, 0xCu);
      v83 = sub_5C154(&qword_32A000);
      swift_arrayDestroy(v81, 1, v83);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v80, -1, -1);
    }
    else
    {
      swift_errorRelease(v176);
    }

    v88 = static LocaleLanguageDirection.isRTL.getter();
    swift_errorRelease(v176);
  }
  v197 = a1;
  v176 = (v72 & 1) == 0;
  *(_QWORD *)&v226 = &_swiftEmptyArrayStorage;
  result = sub_20C498(0, v180 + 1, 0);
  a1 = 0;
  v181 = 0;
  v63 = (_QWORD *)v226;
  LODWORD(v221) = v88 & 1;
  v220 = enum case for CoverViewModel.Style.placeholderBook(_:);
  v182 = enum case for CoverViewModel.Style.placeholderAudiobook(_:);
  v183 = -1;
  v184 = v196;
  while (1)
  {
    if (v180 == v183)
    {
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v181)
      break;
    v185 = static AssetType.== infix(_:_:)(v176, 0);
    *(_QWORD *)v37 = 0x4066800000000000;
    v186 = v182;
    if ((v185 & 1) == 0)
    {
      v186 = v220;
      v37[8] = (char)v221;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v224 + 104))(v37, v186, v225);
    CoverViewModel.init(style:)(v37);
    *(_QWORD *)&v226 = v63;
    v72 = v63[2];
    v187 = v63[3];
    if (v72 >= v187 >> 1)
    {
      sub_20C498(v187 > 1, v72 + 1, 1);
      v63 = (_QWORD *)v226;
    }
    v63[2] = v72 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v222 + 32))((unint64_t)v63+ ((*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80))+ *(_QWORD *)(v222 + 72) * v72, v184, v223);
    v181 = a1 == (_QWORD *)v180;
    if (a1 == (_QWORD *)v180)
    {
      a1 = 0;
    }
    else
    {
      v188 = __OFADD__(a1, 1);
      a1 = (_QWORD *)((char *)a1 + 1);
      if (v188)
        goto LABEL_61;
    }
    if (v180 == ++v183)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

void sub_20954C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  id v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t inited;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t (*v147)(char *, uint64_t, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  char v183[8];
  _QWORD v184[5];

  v182 = a2;
  v171 = type metadata accessor for ActionOrigin.Kind(0);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v173 = (char *)&v143 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_322410);
  v5 = __chkstk_darwin(v4);
  v174 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for LinkActionType(0, v5);
  v163 = *(_QWORD *)(v165 - 8);
  v7 = __chkstk_darwin(v165);
  v164 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for ClickData.TargetType(0, v7);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v162 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_31F590);
  v11 = __chkstk_darwin(v10);
  v172 = (char *)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for Metrics.ClickActionType(0, v11);
  v158 = *(_QWORD *)(v159 - 8);
  v13 = __chkstk_darwin(v159);
  v157 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for Metrics.TargetType(0, v13);
  v176 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v155 = (char *)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for ActionMetrics(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v177 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v178 = (char *)&v143 - v18;
  v154 = type metadata accessor for URL(0);
  v153 = *(_QWORD *)(v154 - 8);
  v19 = __chkstk_darwin(v154);
  v152 = (char *)&v143 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for Metrics.LocationType(0, v19);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v151 = (char *)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_324BD0);
  v23 = __chkstk_darwin(v22);
  v148 = (char *)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for Metrics.Location(0, v23);
  v166 = *(_QWORD *)(v167 - 8);
  v25 = __chkstk_darwin(v167);
  v179 = (char *)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SeriesArtistInfo.ArtistPlurality(0, v25);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v175 = (char *)&v143 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5C154(&qword_32B018);
  __chkstk_darwin(v30);
  v32 = (char *)&v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_5C154(&qword_324BC8);
  __chkstk_darwin(v33);
  v146 = (char *)&v143 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v143 - v36;
  v38 = sub_5C154(&qword_32B020);
  __chkstk_darwin(v38);
  v180 = (unint64_t)&v143 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v143 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v143 - v44;
  v46 = a1[3];
  v47 = a1[4];
  v181 = a1;
  sub_66898(a1, v46);
  v48.n128_f64[0] = SeriesInfo.authorInfo.getter(v46, v47);
  v49 = type metadata accessor for SeriesArtistInfo(0, v48);
  v50 = *(_QWORD *)(v49 - 8);
  v147 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v51 = v147(v37, 1, v49);
  if ((_DWORD)v51 == 1)
  {
    sub_5E09C((uint64_t)v37, &qword_324BC8);
    v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v52(v45, 1, 1, v27);
  }
  else
  {
    SeriesArtistInfo.artistPlurality.getter(v51);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v49);
    v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v52(v45, 0, 1, v27);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v42, enum case for SeriesArtistInfo.ArtistPlurality.variousArtists(_:), v27);
  v52(v42, 0, 1, v27);
  v53 = (uint64_t)&v32[*(int *)(v30 + 48)];
  sub_5E1A4((uint64_t)v45, (uint64_t)v32, &qword_32B020);
  sub_5E1A4((uint64_t)v42, v53, &qword_32B020);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v55 = v54(v32, 1, v27);
  v145 = v50;
  if (v55 == 1)
  {
    sub_5E09C((uint64_t)v42, &qword_32B020);
    sub_5E09C((uint64_t)v45, &qword_32B020);
    if (v54((char *)v53, 1, v27) == 1)
    {
      sub_5E09C((uint64_t)v32, &qword_32B020);
LABEL_30:
      v141 = (_OWORD *)v182;
      *(_QWORD *)(v182 + 32) = 0;
      *v141 = 0u;
      v141[1] = 0u;
      return;
    }
    goto LABEL_9;
  }
  v56 = v180;
  sub_5E1A4((uint64_t)v32, v180, &qword_32B020);
  if (v54((char *)v53, 1, v27) == 1)
  {
    sub_5E09C((uint64_t)v42, &qword_32B020);
    sub_5E09C((uint64_t)v45, &qword_32B020);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v56, v27);
LABEL_9:
    sub_5E09C((uint64_t)v32, &qword_32B018);
    v57 = v181;
    goto LABEL_10;
  }
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  v144 = v49;
  v73 = v56;
  v74 = v175;
  v72(v175, v53, v27);
  v75 = sub_648E0(&qword_32B030, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesArtistInfo.ArtistPlurality, (uint64_t)&protocol conformance descriptor for SeriesArtistInfo.ArtistPlurality);
  v76 = dispatch thunk of static Equatable.== infix(_:_:)(v73, v74, v27, v75);
  v77 = *(void (**)(char *, uint64_t))(v28 + 8);
  v77(v74, v27);
  sub_5E09C((uint64_t)v42, &qword_32B020);
  sub_5E09C((uint64_t)v45, &qword_32B020);
  v78 = v73;
  v49 = v144;
  v77((char *)v78, v27);
  sub_5E09C((uint64_t)v32, &qword_32B020);
  v57 = v181;
  if ((v76 & 1) != 0)
    goto LABEL_30;
LABEL_10:
  v58 = v57[3];
  v59 = v57[4];
  sub_66898(v57, v58);
  v60 = ContentInfo.storeData.getter(v58, *(_QWORD *)(v59 + 8));
  if (!v60)
    goto LABEL_30;
  v61 = (void *)v60;
  v62 = MSeries.authors.getter();

  if (!v62)
    goto LABEL_30;
  if ((unint64_t)v62 >> 62)
  {
    if (v62 >= 0)
      v139 = v62 & 0xFFFFFFFFFFFFFF8;
    else
      v139 = v62;
    swift_bridgeObjectRetain(v62);
    v140 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease(v62);
    if (v140)
      goto LABEL_14;
LABEL_29:
    swift_bridgeObjectRelease(v62);
    goto LABEL_30;
  }
  if (!*(_QWORD *)((char *)&dword_10 + (v62 & 0xFFFFFFFFFFFFFF8)))
    goto LABEL_29;
LABEL_14:
  if ((v62 & 0xC000000000000001) != 0)
  {
    v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v62);
  }
  else
  {
    if (!*(_QWORD *)((char *)&dword_10 + (v62 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return;
    }
    v63 = *(id *)(v62 + 32);
  }
  v64 = v63;
  v65 = (uint64_t)v146;
  v66 = v145;
  v67 = 0xEE00737473697472;
  v68 = 0x4173756F69726176;
  swift_bridgeObjectRelease(v62);
  v69 = v57[3];
  v70 = v57[4];
  sub_66898(v57, v69);
  v71 = SeriesInfo.authorInfo.getter(v69, v70);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, double))v147)(v65, 1, v49, v71) == 1)
  {
    sub_5E09C(v65, &qword_324BC8);
  }
  else
  {
    v79 = SeriesArtistInfo.totalArtistCount.getter();
    v81 = v80;
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v49);
    if ((v81 & 1) == 0 && v79 == 1)
    {
      v82 = v64;
      v68 = MResource.id.getter();
      v67 = v83;

    }
  }
  v175 = (char *)v68;
  v180 = v67;
  v84 = v64;
  v85 = MResource.id.getter();
  v87 = v86;

  v88 = v84;
  v89 = enum case for Metrics.IdType.itsId(_:);
  v90 = type metadata accessor for Metrics.IdType(0);
  v91 = *(_QWORD *)(v90 - 8);
  v92 = v148;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 104))(v148, v89, v90);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v92, 0, 1, v90);
  v93 = v151;
  v94 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v149 + 104))(v151, enum case for Metrics.LocationType.button(_:), v150);
  v181 = v88;
  v95 = MAuthor.name.getter(v94);
  v97 = Metrics.Location.init(adamId:artistName:fcKind:id:idType:isSG:kind:locationPosition:locationType:name:narratorName:)(0, 0, 0, 0, 0, 0, v85, v87, v92, 0, 0, 0, 0, v93, v95, v96, 0, 0);
  v98 = v152;
  v99 = MAuthor.url.getter(v97);
  v100 = URL.absoluteString.getter(v99);
  v102 = v101;
  (*(void (**)(char *, uint64_t))(v153 + 8))(v98, v154);
  v103 = v155;
  v104 = v156;
  (*(void (**)(char *, _QWORD, uint64_t))(v176 + 104))(v155, enum case for Metrics.TargetType.link(_:), v156);
  v105 = v158;
  v106 = v157;
  v107 = v159;
  (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v157, enum case for Metrics.ClickActionType.navigate(_:), v159);
  swift_bridgeObjectRetain(v102);
  v108 = v178;
  v109 = v180;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v175, v180, v103, v106, 0, v100, v102, v179);
  swift_bridgeObjectRelease(v109);
  swift_bridgeObjectRelease(v102);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v103, v104);
  v110 = v168;
  v111 = v108;
  v112 = v169;
  (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v177, v111, v169);
  v113 = v162;
  (*(void (**)(char *, _QWORD, uint64_t))(v160 + 104))(v162, enum case for ClickData.TargetType.navigate(_:), v161);
  v114 = v164;
  (*(void (**)(char *, _QWORD, uint64_t))(v163 + 104))(v164, enum case for LinkActionType.click(_:), v165);
  v115 = v172;
  ClickData.init(with:linkActionType:index:url:)(v113, v114, 0, 0, 0);
  v116 = type metadata accessor for ClickData(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v115, 0, 1, v116);
  v117 = sub_5C154(&qword_31F598);
  inited = swift_initStackObject(v117, v183);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = 7107189;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v100;
  *(_QWORD *)(inited + 56) = v102;
  v119 = sub_52A54(inited);
  v184[3] = type metadata accessor for FlowAction.FeedDestination(0);
  v184[4] = &protocol witness table for FlowAction.FeedDestination;
  sub_668BC(v184);
  static FlowActionDestination<>.feed(options:)(v119);
  swift_bridgeObjectRelease(v119);
  v120 = v57[3];
  v121 = v57[4];
  sub_66898(v57, v120);
  v122 = ContentInfo.title.getter(v120, *(_QWORD *)(v121 + 8));
  v124 = v123;
  v125 = v57[3];
  v126 = v57[4];
  sub_66898(v57, v125);
  v127 = ContentInfo.id.getter(v125, *(_QWORD *)(v126 + 8));
  v129 = v128;
  v130 = v173;
  (*(void (**)(char *, _QWORD, uint64_t))(v170 + 104))(v173, enum case for ActionOrigin.Kind.other(_:), v171);
  v131 = v174;
  ActionOrigin.init(sectionID:sectionName:contentID:kind:seriesID:genreID:collectionID:authorID:flowcaseID:brickID:)(0x682D736569726573, 0xED00007265646165, v122, v124, v127, v129, v130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  v132 = type metadata accessor for ActionOrigin(0);
  v133 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 56))(v131, 0, 1, v132);
  v134 = static FlowActionPresentation.stackPush.getter(v133);
  v136 = v135;
  v137 = type metadata accessor for FlowAction(0);
  v138 = (_QWORD *)v182;
  *(_QWORD *)(v182 + 24) = v137;
  v138[4] = sub_648E0(&qword_32B028, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  sub_668BC(v138);
  LOBYTE(v142) = 0;
  FlowAction.init(id:actionMetrics:clickData:destination:origin:sourceViewIdentifer:presentation:shouldInheritFigaroRestriction:)(0, 0, v177, v115, v184, v131, 0, 0, v134, v136, v142);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v178, v112);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v179, v167);
}

void sub_20A3C8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[6];

  v73 = a3;
  v5 = sub_5C154(&qword_3217B8);
  v6 = __chkstk_darwin(v5);
  v70 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Metrics.ImpressionType(0, v6);
  v66[0] = *(_QWORD *)(v8 - 8);
  v66[1] = v8;
  __chkstk_darwin(v8);
  v71 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for Metrics.IdType(0);
  v10 = *(_QWORD *)(v65 - 8);
  v11 = __chkstk_darwin(v65);
  v72 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Metrics.Impression(0, v11);
  v68 = *(_QWORD *)(v13 - 8);
  v69 = v13;
  __chkstk_darwin(v13);
  v67 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_324BC8);
  __chkstk_darwin(v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v64 - v20;
  v22 = type metadata accessor for SeriesArtistInfo(0, v19);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1[3];
  v27 = a1[4];
  sub_66898(a1, v26);
  v28 = SeriesInfo.authorInfo.getter(v26, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, double))(v23 + 48))(v21, 1, v22, v28) == 1)
  {
    sub_5E09C((uint64_t)v21, &qword_324BC8);
LABEL_15:
    v45 = type metadata accessor for ImpressionMetrics(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v73, 1, 1, v45);
    return;
  }
  v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
  v30 = SeriesArtistInfo.totalArtistCount.getter(v29);
  if ((v31 & 1) != 0 || (v32 = v30, v30 < 1))
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    goto LABEL_15;
  }
  sub_5E1A4(a2, (uint64_t)&v74, &qword_32AF30);
  if (!v75)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    sub_5E09C((uint64_t)&v74, &qword_32AF30);
    goto LABEL_15;
  }
  sub_5DC98(&v74, (uint64_t)v76);
  v33 = a1[3];
  v34 = a1[4];
  sub_66898(a1, v33);
  v35 = ContentInfo.storeData.getter(v33, *(_QWORD *)(v34 + 8));
  if (v35)
  {
    v36 = (void *)v35;
    v37 = MSeries.authors.getter();

    if (v37)
    {
      if ((unint64_t)v37 >> 62)
      {
        if (v37 >= 0)
          v46 = v37 & 0xFFFFFFFFFFFFFF8;
        else
          v46 = v37;
        swift_bridgeObjectRetain(v37);
        v47 = _CocoaArrayWrapper.endIndex.getter(v46);
        swift_bridgeObjectRelease(v37);
        if (v47)
          goto LABEL_10;
      }
      else if (*(_QWORD *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFFF8)))
      {
LABEL_10:
        if ((v37 & 0xC000000000000001) != 0)
        {
          v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
        }
        else
        {
          if (!*(_QWORD *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFFF8)))
          {
            __break(1u);
            return;
          }
          v38 = *(id *)(v37 + 32);
        }
        v39 = v38;
        v40 = swift_bridgeObjectRelease(v37);
        v41 = MResource.id.getter(v40);
        v43 = v42;

        v44 = v43;
        goto LABEL_24;
      }
      swift_bridgeObjectRelease(v37);
    }
  }
  v41 = 0;
  v44 = 0xE000000000000000;
LABEL_24:
  v49 = v66[0];
  v48 = v66[1];
  if (v32 == 1)
  {
    v66[0] = v41;
    v66[1] = v44;
  }
  else
  {
    swift_bridgeObjectRelease(v44);
    HIBYTE(v66[1]) = -18;
    strcpy((char *)v66, "variousArtists");
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v72, enum case for Metrics.IdType.itsId(_:), v65);
  v50 = v71;
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v71, enum case for Metrics.ImpressionType.link(_:), v48);
  v51 = a1[3];
  v52 = a1[4];
  sub_66898(a1, v51);
  SeriesInfo.authorInfo.getter(v51, v52);
  v53 = v70;
  sub_1F90E0((uint64_t)v17, v70);
  sub_5E09C((uint64_t)v17, &qword_324BC8);
  v54 = type metadata accessor for LocalizerRequest(0);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54) == 1)
  {
    sub_5E09C(v53, &qword_3217B8);
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v56 = LocalizerRequest.perform(using:)(v76);
    v57 = v58;
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
  }
  v59 = v73;
  v61 = v68;
  v60 = v69;
  v62 = v67;
  Metrics.Impression.init(artistName:id:idType:impressionIndex:impressionType:isSG:kind:name:narratorName:parentId:)(0, 0, v66[0], v66[1], v72, 0, v50, 0, 0, 0, v56, v57, 0, 0, 0, 0);
  static Metrics.createImpressionMetrics(impression:)(v62);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v76);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v63 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v59, 0, 1, v63);
}

uint64_t sub_20A940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 52), a2, (uint64_t *)&unk_326210);
}

uint64_t sub_20A968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 56), a2, &qword_31F480);
}

uint64_t sub_20A990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_20A9D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3276B0;
  if (!qword_3276B0)
  {
    v1 = sub_667D0(&qword_325E10);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_3276B0);
  }
  return result;
}

uint64_t sub_20AA20()
{
  return sub_648E0(&qword_32AF40, type metadata accessor for SeriesRoomHeaderComponentModel, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponentModel);
}

uint64_t sub_20AA4C(uint64_t a1)
{
  uint64_t result;

  result = sub_648E0((unint64_t *)&qword_320090, type metadata accessor for SeriesRoomHeaderComponentModel, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponentModel);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for SeriesRoomHeaderComponentModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    v15 = a3[7];
    v16 = &v4[v15];
    v17 = (char *)a2 + v15;
    v18 = sub_5C154(&qword_327938);
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v16, v17, v18);
    v19(&v4[a3[8]], (char *)a2 + a3[8], v18);
    v20 = a3[9];
    v21 = &v4[v20];
    v22 = (char *)a2 + v20;
    v23 = *(uint64_t *)((char *)a2 + v20 + 24);
    if (v23)
    {
      v24 = *((_QWORD *)v22 + 4);
      *((_QWORD *)v21 + 3) = v23;
      *((_QWORD *)v21 + 4) = v24;
      (**(void (***)(void))(v23 - 8))();
    }
    else
    {
      v26 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v26;
      *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
    }
    v27 = a3[10];
    v28 = &v4[v27];
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for ImpressionMetrics(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    if (v32(v29, 1, v30))
    {
      v33 = sub_5C154(&qword_31F480);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v34 = a3[11];
    v35 = &v4[v34];
    v36 = (char *)a2 + v34;
    v37 = sub_5C154(&qword_327928);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = a3[12];
    v39 = &v4[v38];
    v40 = (char *)a2 + v38;
    v41 = sub_5C154(&qword_327930);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
    v42 = a3[13];
    v43 = &v4[v42];
    v44 = (char *)a2 + v42;
    v45 = *(uint64_t *)((char *)a2 + v42 + 24);
    if (v45)
    {
      v46 = *((_QWORD *)v44 + 4);
      *((_QWORD *)v43 + 3) = v45;
      *((_QWORD *)v43 + 4) = v46;
      (**(void (***)(void))(v45 - 8))();
    }
    else
    {
      v47 = *((_OWORD *)v44 + 1);
      *(_OWORD *)v43 = *(_OWORD *)v44;
      *((_OWORD *)v43 + 1) = v47;
      *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
    }
    v48 = a3[14];
    v49 = &v4[v48];
    v50 = (char *)a2 + v48;
    if (v32(v50, 1, v30))
    {
      v51 = sub_5C154(&qword_31F480);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v49, v50, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v49, 0, 1, v30);
    }
  }
  return v4;
}

uint64_t destroy for SeriesRoomHeaderComponentModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[7];
  v7 = sub_5C154(&qword_327938);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[8], v7);
  v9 = (_QWORD *)(a1 + a2[9]);
  if (v9[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v9);
  v10 = a1 + a2[10];
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v14 = a1 + a2[11];
  v15 = sub_5C154(&qword_327928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = a1 + a2[12];
  v17 = sub_5C154(&qword_327930);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = (_QWORD *)(a1 + a2[13]);
  if (v18[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
  v19 = a1 + a2[14];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v19, 1, v11);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v19, v11);
  return result;
}

char *initializeWithCopy for SeriesRoomHeaderComponentModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 2) = v7;
  v8 = a3[6];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5C154(&qword_327938);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v18(v15, v16, v17);
  v18(&a1[a3[8]], &a2[a3[8]], v17);
  v19 = a3[9];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)&a2[v19 + 24];
  if (v22)
  {
    v23 = *((_QWORD *)v21 + 4);
    *((_QWORD *)v20 + 3) = v22;
    *((_QWORD *)v20 + 4) = v23;
    (**(void (***)(void))(v22 - 8))();
  }
  else
  {
    v24 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v24;
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  }
  v25 = a3[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for ImpressionMetrics(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v27, 1, v28))
  {
    v31 = sub_5C154(&qword_31F480);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = a3[11];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = sub_5C154(&qword_327928);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  v36 = a3[12];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = sub_5C154(&qword_327930);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  v40 = a3[13];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = *(_QWORD *)&a2[v40 + 24];
  if (v43)
  {
    v44 = *((_QWORD *)v42 + 4);
    *((_QWORD *)v41 + 3) = v43;
    *((_QWORD *)v41 + 4) = v44;
    (**(void (***)(void))(v43 - 8))();
  }
  else
  {
    v45 = *((_OWORD *)v42 + 1);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v45;
    *((_QWORD *)v41 + 4) = *((_QWORD *)v42 + 4);
  }
  v46 = a3[14];
  v47 = &a1[v46];
  v48 = &a2[v46];
  if (v30(v48, 1, v28))
  {
    v49 = sub_5C154(&qword_31F480);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v47, v48, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v47, 0, 1, v28);
  }
  return a1;
}

char *assignWithCopy for SeriesRoomHeaderComponentModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5C154(&qword_327938);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24);
  v18(v15, v16, v17);
  v18(&a1[a3[8]], &a2[a3[8]], v17);
  v19 = a3[9];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)&a2[v19 + 24];
  if (*(_QWORD *)&a1[v19 + 24])
  {
    if (v22)
    {
      sub_65938(v20, v21);
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v20);
  }
  else if (v22)
  {
    *((_QWORD *)v20 + 3) = v22;
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    (**(void (***)(char *, char *))(v22 - 8))(v20, v21);
    goto LABEL_8;
  }
  v23 = *(_OWORD *)v21;
  v24 = *((_OWORD *)v21 + 1);
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  *(_OWORD *)v20 = v23;
  *((_OWORD *)v20 + 1) = v24;
LABEL_8:
  v25 = a3[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for ImpressionMetrics(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_13:
    v33 = sub_5C154(&qword_31F480);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_14:
  v34 = a3[11];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = sub_5C154(&qword_327928);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  v38 = a3[12];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = sub_5C154(&qword_327930);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  v42 = a3[13];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = *(_QWORD *)&a2[v42 + 24];
  if (*(_QWORD *)&a1[v42 + 24])
  {
    if (v45)
    {
      sub_65938(v43, v44);
      goto LABEL_21;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v43);
  }
  else if (v45)
  {
    *((_QWORD *)v43 + 3) = v45;
    *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
    (**(void (***)(char *, char *))(v45 - 8))(v43, v44);
    goto LABEL_21;
  }
  v46 = *(_OWORD *)v44;
  v47 = *((_OWORD *)v44 + 1);
  *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
  *(_OWORD *)v43 = v46;
  *((_OWORD *)v43 + 1) = v47;
LABEL_21:
  v48 = a3[14];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = v30(&a1[v48], 1, v28);
  v52 = v30(v50, 1, v28);
  if (!v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v49, v50, v28);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v49, v28);
    goto LABEL_26;
  }
  if (v52)
  {
LABEL_26:
    v53 = sub_5C154(&qword_31F480);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v49, v50, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v49, 0, 1, v28);
  return a1;
}

uint64_t initializeWithTake for SeriesRoomHeaderComponentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  const void *v40;
  uint64_t v41;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_5C154(&qword_327938);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v14(a1 + a3[8], a2 + a3[8], v13);
  v15 = a3[9];
  v16 = a3[10];
  v17 = a1 + v15;
  v18 = a2 + v15;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  v20 = (void *)(a1 + v16);
  v21 = (const void *)(a2 + v16);
  v22 = type metadata accessor for ImpressionMetrics(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v21, 1, v22))
  {
    v25 = sub_5C154(&qword_31F480);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = a3[11];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = sub_5C154(&qword_327928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = sub_5C154(&qword_327930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v34 = a3[13];
  v35 = a3[14];
  v36 = a1 + v34;
  v37 = a2 + v34;
  v38 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v38;
  *(_QWORD *)(v36 + 32) = *(_QWORD *)(v37 + 32);
  v39 = (void *)(a1 + v35);
  v40 = (const void *)(a2 + v35);
  if (v24(v40, 1, v22))
  {
    v41 = sub_5C154(&qword_31F480);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v39, v40, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v39, 0, 1, v22);
  }
  return a1;
}

char *assignWithTake for SeriesRoomHeaderComponentModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;

  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_5C154(&qword_327938);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  v17(&a1[a3[8]], &a2[a3[8]], v16);
  v18 = a3[9];
  v19 = &a1[v18];
  v20 = &a2[v18];
  if (*(_QWORD *)&a1[v18 + 24])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v19);
  v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
  v22 = a3[10];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for ImpressionMetrics(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_8:
    v30 = sub_5C154(&qword_31F480);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
LABEL_9:
  v31 = a3[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = sub_5C154(&qword_327928);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = sub_5C154(&qword_327930);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = &a1[v39];
  v41 = &a2[v39];
  if (*(_QWORD *)&a1[v39 + 24])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v40);
  v42 = *((_OWORD *)v41 + 1);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *((_OWORD *)v40 + 1) = v42;
  *((_QWORD *)v40 + 4) = *((_QWORD *)v41 + 4);
  v43 = a3[14];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = v27(&a1[v43], 1, v25);
  v47 = v27(v45, 1, v25);
  if (!v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v44, v45, v25);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v44, v25);
    goto LABEL_16;
  }
  if (v47)
  {
LABEL_16:
    v48 = sub_5C154(&qword_31F480);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v44, v45, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v44, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesRoomHeaderComponentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_20BAAC);
}

uint64_t sub_20BAAC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = sub_5C154(&qword_327938);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v13 = sub_5C154(&qword_31F480);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[10];
        }
        else
        {
          v14 = sub_5C154(&qword_327928);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[11];
          }
          else
          {
            v10 = sub_5C154(&qword_327930);
            v9 = *(_QWORD *)(v10 - 8);
            v11 = a3[12];
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesRoomHeaderComponentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_20BBD4);
}

uint64_t sub_20BBD4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = sub_5C154(&qword_327938);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v13 = sub_5C154(&qword_31F480);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[10];
        }
        else
        {
          v14 = sub_5C154(&qword_327928);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[11];
          }
          else
          {
            v10 = sub_5C154(&qword_327930);
            v9 = *(_QWORD *)(v10 - 8);
            v11 = a4[12];
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_20BCEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v13[0] = &unk_268120;
  v13[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for SeriesQuickActionButtonViewModel(319);
  if (v3 <= 0x3F)
  {
    v13[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_8C25C(319, &qword_32AFB0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for PlaceholderTextView.ContentType);
    if (v5 <= 0x3F)
    {
      v14 = *(_QWORD *)(v4 - 8) + 64;
      v15 = v14;
      v16 = &unk_268138;
      sub_8C25C(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v8 = *(_QWORD *)(v6 - 8) + 64;
        v17 = v8;
        sub_8C25C(319, &qword_32AFB8, (uint64_t (*)(uint64_t))&type metadata accessor for TopLockupMetadataView.Footer, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for PlaceholderTextView.ContentType);
        if (v10 <= 0x3F)
        {
          v18 = *(_QWORD *)(v9 - 8) + 64;
          sub_20BE3C(319);
          if (v12 <= 0x3F)
          {
            v19 = *(_QWORD *)(v11 - 8) + 64;
            v20 = &unk_268138;
            v21 = v8;
            swift_initStructMetadata(a1, 256, 11, v13, a1 + 16);
          }
        }
      }
    }
  }
}

void sub_20BE3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_32AFC0)
  {
    v2 = sub_667D0(&qword_32AF10);
    v3 = type metadata accessor for PlaceholderTextView.ContentType(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_32AFC0);
  }
}

void YearInReviewEligibilityCriteria.isEligible(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  v2 = type metadata accessor for ReadingInsightsDataProvider.MonthAverage(0);
  __chkstk_darwin(v2);
  v5[2] = (char *)v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_20BF40(uint64_t result, double a2)
{
  double v2;

  if (a2 <= v2)
    return result;
  else
    return 0;
}

uint64_t sub_20C0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingInsightsDataProvider.MonthAverage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double static YearInReviewEligibilityCriteria.default.getter@<D0>(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  NSString v4;
  unsigned __int8 v5;
  double result;

  v2 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
  v3 = objc_msgSend(v2, "userDefaults");

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);

  *(_BYTE *)a1 = v5;
  *(_OWORD *)(a1 + 8) = xmmword_260180;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(3uLL);
  result = 60.0;
  *(_OWORD *)(a1 + 40) = xmmword_260190;
  return result;
}

uint64_t YearInReviewEligibilityCriteria.description.getter()
{
  double *v0;
  int v1;
  double v2;
  double v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  _QWORD v24[2];

  v1 = *(unsigned __int8 *)v0;
  v3 = v0[5];
  v2 = v0[6];
  v24[0] = 0;
  v24[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(233);
  v4._countAndFlagsBits = 0xD000000000000036;
  v4._object = (void *)0x8000000000274E10;
  String.append(_:)(v4);
  if (v1)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (v1)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0xD000000000000017;
  v8._object = (void *)0x8000000000274E50;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0xD00000000000001ELL;
  v11._object = (void *)0x8000000000274E70;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0xD000000000000020;
  v14._object = (void *)0x8000000000274E90;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 0xD00000000000001CLL;
  v17._object = (void *)0x8000000000274EC0;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0xD00000000000001DLL;
  v20._object = (void *)0x8000000000274EE0;
  String.append(_:)(v20);
  Double.write<A>(to:)(v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v3);
  v21._object = (void *)0x8000000000274F00;
  v21._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v21);
  Double.write<A>(to:)(v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v2);
  v22._countAndFlagsBits = 62;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return v24[0];
}

uint64_t sub_20C460(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20CB28(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20C47C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20CCEC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20C498(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_31F0F0, (uint64_t (*)(_QWORD))&type metadata accessor for CoverViewModel);
  *v3 = result;
  return result;
}

uint64_t sub_20C4C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DCA4(a1, a2, a3, (_QWORD *)*v3, &qword_31EF30, &qword_31EF38);
  *v3 = result;
  return result;
}

uint64_t sub_20C4F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_31F118, type metadata accessor for ReadingInsightsDataProvider.DayEntry);
  *v3 = result;
  return result;
}

uint64_t sub_20C51C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_31F1D8, type metadata accessor for ReadingInsightsDataProvider.MonthAverage);
  *v3 = result;
  return result;
}

uint64_t sub_20C548(uint64_t result, char a2)
{
  if (!a2)
    return swift_bridgeObjectRelease(result);
  return result;
}

__n128 initializeWithCopy for YearInReviewEligibilityCriteria(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for YearInReviewEligibilityCriteria(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[56])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for YearInReviewEligibilityCriteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for YearInReviewEligibilityCriteria()
{
  return &type metadata for YearInReviewEligibilityCriteria;
}

uint64_t initializeBufferWithCopyOfBuffer for YearInReviewEligibilityCriteria.EligibilityCondition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_20C66C(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_20C66C(uint64_t result, char a2)
{
  if (!a2)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t destroy for YearInReviewEligibilityCriteria.EligibilityCondition(uint64_t a1)
{
  return sub_20C548(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for YearInReviewEligibilityCriteria.EligibilityCondition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_20C66C(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_20C548(v5, v6);
  return a1;
}

uint64_t assignWithTake for YearInReviewEligibilityCriteria.EligibilityCondition(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_20C548(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for YearInReviewEligibilityCriteria.EligibilityCondition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for YearInReviewEligibilityCriteria.EligibilityCondition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_20C7A4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 5u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_20C7BC(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for YearInReviewEligibilityCriteria.EligibilityCondition()
{
  return &type metadata for YearInReviewEligibilityCriteria.EligibilityCondition;
}

uint64_t sub_20C7E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_32B090, (uint64_t (*)(_QWORD))&type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
  *v3 = result;
  return result;
}

uint64_t sub_20C810(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20CE90(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20C82C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_31EF40, type metadata accessor for Shelf);
  *v3 = result;
  return result;
}

uint64_t sub_20C858(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DCA4(a1, a2, a3, (_QWORD *)*v3, &qword_31EF58, &qword_31EF60);
  *v3 = result;
  return result;
}

uint64_t sub_20C884(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_31F1D0, (uint64_t (*)(_QWORD))&type metadata accessor for AudiobookInfo);
  *v3 = result;
  return result;
}

uint64_t sub_20C8B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_31F1C0, (uint64_t (*)(_QWORD))&type metadata accessor for BookInfo);
  *v3 = result;
  return result;
}

uint64_t sub_20C8DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20D02C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20C8F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20D1D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20C914(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20D350(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20C930(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DCA4(a1, a2, a3, (_QWORD *)*v3, &qword_324BE8, &qword_3259E0);
  *v3 = result;
  return result;
}

uint64_t sub_20C95C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20D4F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20C978(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DCA4(a1, a2, a3, (_QWORD *)*v3, &qword_32B060, &qword_3282C0);
  *v3 = result;
  return result;
}

uint64_t sub_20C9A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20D65C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20C9C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DCA4(a1, a2, a3, (_QWORD *)*v3, &qword_32B088, &qword_325A10);
  *v3 = result;
  return result;
}

uint64_t sub_20C9EC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20D800(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20CA08(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20D9BC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20CA24(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DB18(a1, a2, a3, (_QWORD *)*v3, &qword_326F30, &qword_31FC38);
  *v3 = result;
  return result;
}

uint64_t sub_20CA50(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DB18(a1, a2, a3, (_QWORD *)*v3, &qword_32B038, &qword_3259E8);
  *v3 = result;
  return result;
}

uint64_t sub_20CA7C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DCA4(a1, a2, a3, (_QWORD *)*v3, &qword_31F108, &qword_31F110);
  *v3 = result;
  return result;
}

uint64_t sub_20CAA8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20DE48(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20CAC4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20DFA0(a1, a2, a3, (_QWORD *)*v3, &qword_32B070, type metadata accessor for ListItemComponentModel);
  *v3 = result;
  return result;
}

uint64_t sub_20CAF0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20E180(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20CB0C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20E2CC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20CB28(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_31F018);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 < a4 || v14 >= v15 + 8 * v8)
    {
      sub_5C154(&qword_31E7C8);
      swift_arrayInitWithTakeFrontToBack(v11 + 4, a4 + 4);
    }
    else if (v11 != a4)
    {
      sub_5C154(&qword_31E7C8);
      swift_arrayInitWithTakeBackToFront(v11 + 4, a4 + 4);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_5C154(&qword_31E7C8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_34:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20CCEC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_31F000);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_5C154(&qword_31F008);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20CE90(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_32B068);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_5C154(&qword_325A00);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20D018(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_20DFA0(a1, a2, a3, a4, &qword_3284B0, type metadata accessor for GenreHighlight);
}

uint64_t sub_20D02C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_32B040);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_5C154(&qword_32B048);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20D1D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_32B058);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20D350(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_32B050);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_5C154(&qword_325810);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20D4F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_31EF50);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20D65C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_321F20);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_5C154(&qword_3259C8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20D800(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_32B080);
    v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8)
      memmove(v11 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_5C154(&qword_3257D0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20D9A8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_20DFA0(a1, a2, a3, a4, &qword_31F120, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
}

uint64_t sub_20D9BC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_32B078);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20DB18(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_5C154(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_5C154(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20DCA4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_5C154(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = &_swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_5C154(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20DE48(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_327380);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20DFA0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_5C154(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20E180(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_32A340);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_20E2CC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(&qword_31EE68);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ShelfHeaderComponent()
{
  return &type metadata for ShelfHeaderComponent;
}

uint64_t sub_20E42C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 56) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v9 - 8);
    swift_bridgeObjectRetain(v7);
    v12 = swift_bridgeObjectRetain(v8);
    v11(a1 + 32, (uint64_t)(a2 + 4), v10, v12);
    v13 = (_OWORD *)(a1 + 72);
    v14 = a2 + 9;
    v15 = a2[12];
    if (v15)
    {
      v16 = a2[13];
      *(_QWORD *)(a1 + 96) = v15;
      *(_QWORD *)(a1 + 104) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
    }
    else
    {
      v18 = *(_OWORD *)(a2 + 11);
      *v13 = *v14;
      *(_OWORD *)(a1 + 88) = v18;
      *(_QWORD *)(a1 + 104) = a2[13];
    }
    v19 = *(int *)(a3 + 32);
    v20 = (void *)(a1 + v19);
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for ImpressionMetrics(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_5C154(&qword_31F480);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_20E59C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 4);
  if (a1[12])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 9);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_20E638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 32;
  v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v9 - 8);
  swift_bridgeObjectRetain(v6);
  v12 = swift_bridgeObjectRetain(v7);
  v11(a1 + 32, v8, v10, v12);
  v13 = (_OWORD *)(a1 + 72);
  v14 = (_OWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 96);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v15;
    *(_QWORD *)(a1 + 104) = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 88);
    *v13 = *v14;
    *(_OWORD *)(a1 + 88) = v17;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  v18 = *(int *)(a3 + 32);
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_5C154(&qword_31F480);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_20E77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  sub_65938((_QWORD *)(a1 + 32), (_QWORD *)(a2 + 32));
  v10 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v10)
    {
      sub_65938((_QWORD *)(a1 + 72), (_QWORD *)(a2 + 72));
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 72));
  }
  else if (v10)
  {
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 72, a2 + 72);
    goto LABEL_8;
  }
  v11 = *(_OWORD *)(a2 + 72);
  v12 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 88) = v12;
LABEL_8:
  v13 = *(int *)(a3 + 32);
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    v21 = sub_5C154(&qword_31F480);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_20E938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(int *)(a3 + 32);
  v7 = (const void *)(a2 + v6);
  v8 = (void *)(a1 + v6);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    v11 = sub_5C154(&qword_31F480);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v8, v7, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_20EA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 32));
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 96))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 72));
  v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v12 = *(int *)(a3 + 32);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_8;
  }
  if (v19)
  {
LABEL_8:
    v20 = sub_5C154(&qword_31F480);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_20EB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_20EB90);
}

uint64_t sub_20EB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_321EA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_20EC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_20EC1C);
}

uint64_t sub_20EC1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_321EA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ShelfHeaderComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_32B0F0;
  if (!qword_32B0F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfHeaderComponentModel);
  return result;
}

void sub_20ECD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_268230;
  v4[1] = &unk_268248;
  v4[2] = &unk_268260;
  v4[3] = &unk_268278;
  sub_AE8F0(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_20ED60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;

  v34 = a2;
  v35 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v35);
  v4 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_5C154(&qword_32B158);
  __chkstk_darwin(v36);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ShelfHeaderComponentModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v9 + 72;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  sub_8B354((uint64_t)&v42, (uint64_t)&v39);
  v10 = v40;
  *(_OWORD *)(v9 + 72) = v39;
  *(_OWORD *)(v9 + 88) = v10;
  *((_QWORD *)v9 + 13) = v41;
  sub_5E09C((uint64_t)&v42, (uint64_t *)&unk_326210);
  v11 = &v9[*(int *)(v7 + 32)];
  v12 = type metadata accessor for ImpressionMetrics(0);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v37 = (uint64_t)v11;
  v13(v11, 1, 1, v12);
  v15 = a1[3];
  v14 = a1[4];
  sub_66898(a1, v15);
  v16 = sub_20F6F4();
  v17 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShelfHeaderComponentModel.CodingKeys, &type metadata for ShelfHeaderComponentModel.CodingKeys, v16, v15, v14);
  if (v17)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    v20 = v37;
    sub_5E09C((uint64_t)v38, &qword_320B70);
    return sub_5E09C(v20, &qword_321EA8);
  }
  else
  {
    v45 = a1;
    LOBYTE(v42) = 0;
    v18 = v36;
    v19 = v6;
    *(_QWORD *)v9 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v36);
    *((_QWORD *)v9 + 1) = v21;
    LOBYTE(v42) = 1;
    *((_QWORD *)v9 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v18);
    *((_QWORD *)v9 + 3) = v22;
    v23 = sub_5C154(&qword_320B78);
    LOBYTE(v39) = 2;
    v24 = sub_67060((unint64_t *)&qword_320B90, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v23, &v39, v18, v23, v24);
    v25 = v43;
    *((_OWORD *)v9 + 2) = v42;
    *((_OWORD *)v9 + 3) = v25;
    *((_QWORD *)v9 + 8) = v44;
    v26 = v18;
    v27 = sub_5C154(&qword_320B70);
    LOBYTE(v39) = 3;
    v28 = sub_67060(&qword_320B98, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v27, &v39, v26, v27, v28);
    sub_8B3E0((uint64_t)&v42, (uint64_t)v38, &qword_320B70);
    LOBYTE(v42) = 4;
    v29 = sub_AF0B8();
    v30 = (uint64_t)v4;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v35, &v42, v36, v35, v29);
    v31 = v37;
    MEMORY[0x600000000](v19, v36);
    sub_8B3E0(v30, v31, &qword_321EA8);
    sub_20F738((uint64_t)v9, v34);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v45);
    return sub_20F77C((uint64_t)v9);
  }
}

uint64_t sub_20F1B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20F1E0 + 4 * byte_2681E0[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_20F1E0()
{
  return 0x656C746974627573;
}

uint64_t sub_20F1F8()
{
  return 25705;
}

uint64_t sub_20F204()
{
  return 0x6575676573;
}

unint64_t sub_20F214()
{
  return 0xD000000000000011;
}

uint64_t sub_20F230@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20F9DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20F254(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20F6F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_20F27C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20F6F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_20F2A4(uint64_t a1)
{
  uint64_t v1;

  return sub_8B3E0(a1, v1 + 72, (uint64_t *)&unk_326210);
}

Swift::Void (__swiftcall *sub_20F2C4())()
{
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_20F2D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED60(a1, a2);
}

uint64_t sub_20F2E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E1A4(v1 + 32, a1, &qword_320B78);
}

uint64_t sub_20F30C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[40];

  sub_5E1A4(v1 + 72, (uint64_t)v4, &qword_320B70);
  return sub_66F14((uint64_t)v4, a1, (uint64_t *)&unk_326210);
}

uint64_t sub_20F358()
{
  return sub_648E0(&qword_3200A0, type metadata accessor for ShelfHeaderComponentModel, (uint64_t)&unk_268368);
}

uint64_t sub_20F384(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1EA214();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_20F3C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = sub_5C154(&qword_32B148);
  __chkstk_darwin(v23);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ShelfHeaderView(0, v11);
  v22 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1[3])
  {
    v21[1] = a2;
    v17 = a1[2];
    static LocalizerRequest.verbatim(_:)(*a1);
    static LocalizerRequest.verbatim(_:)(v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    ShelfHeaderView.init(title:subtitle:)(v13, v8);
    v18 = v22;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v5, v16, v14);
    swift_storeEnumTagMultiPayload(v5, v23, 0);
  }
  else
  {
    static LocalizerRequest.verbatim(_:)(*a1);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    ShelfHeaderView.init(title:subtitle:)(v13, v8);
    v18 = v22;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v5, v16, v14);
    swift_storeEnumTagMultiPayload(v5, v23, 1);
  }
  v19 = sub_648E0(&qword_32B150, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfHeaderView, (uint64_t)&protocol conformance descriptor for ShelfHeaderView);
  _ConditionalContent<>.init(storage:)(v5, v14, v14, v19, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v16, v14);
}

uint64_t sub_20F640(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EA214();
  return _ComponentBody.init(_:)(v2, a1, v2);
}

uint64_t sub_20F670()
{
  return sub_648E0(&qword_32B138, type metadata accessor for ShelfHeaderComponentModel, (uint64_t)&unk_268290);
}

unint64_t sub_20F6A0()
{
  unint64_t result;

  result = qword_32B140;
  if (!qword_32B140)
  {
    result = swift_getWitnessTable(&unk_268318, &type metadata for ShelfHeaderComponent);
    atomic_store(result, (unint64_t *)&qword_32B140);
  }
  return result;
}

uint64_t sub_20F6E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BA6CC, 1);
}

unint64_t sub_20F6F4()
{
  unint64_t result;

  result = qword_32B160;
  if (!qword_32B160)
  {
    result = swift_getWitnessTable(&unk_2684D4, &type metadata for ShelfHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B160);
  }
  return result;
}

uint64_t sub_20F738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShelfHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20F77C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShelfHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ShelfHeaderComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_20F804 + 4 * byte_2681EA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_20F838 + 4 * byte_2681E5[v4]))();
}

uint64_t sub_20F838(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20F840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20F848);
  return result;
}

uint64_t sub_20F854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20F85CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_20F860(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20F868(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfHeaderComponentModel.CodingKeys()
{
  return &type metadata for ShelfHeaderComponentModel.CodingKeys;
}

unint64_t sub_20F888()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B168;
  if (!qword_32B168)
  {
    v1 = sub_667D0(&qword_32B170);
    sub_648E0(&qword_32B150, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfHeaderView, (uint64_t)&protocol conformance descriptor for ShelfHeaderView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B168);
  }
  return result;
}

unint64_t sub_20F908()
{
  unint64_t result;

  result = qword_32B178;
  if (!qword_32B178)
  {
    result = swift_getWitnessTable(&unk_2684AC, &type metadata for ShelfHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B178);
  }
  return result;
}

unint64_t sub_20F950()
{
  unint64_t result;

  result = qword_32B180;
  if (!qword_32B180)
  {
    result = swift_getWitnessTable(&unk_26841C, &type metadata for ShelfHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B180);
  }
  return result;
}

unint64_t sub_20F998()
{
  unint64_t result;

  result = qword_32B188;
  if (!qword_32B188)
  {
    result = swift_getWitnessTable(&unk_268444, &type metadata for ShelfHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B188);
  }
  return result;
}

uint64_t sub_20F9DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000026D790)
  {
    swift_bridgeObjectRelease(0x800000000026D790);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t SegmentedControlItem.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t SegmentedControlItem.symbol.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t SegmentedControlItem.isDisabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t SegmentedControlItem.isDisabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

Swift::Void (__swiftcall *SegmentedControlItem.isDisabled.modify())()
{
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t SegmentedControlItem.action.getter()
{
  type metadata accessor for SegmentedControlItem(0);
  return _CodeAnyActionModel_OrNil.wrappedValue.getter();
}

uint64_t type metadata accessor for SegmentedControlItem(uint64_t a1)
{
  uint64_t result;

  result = qword_32B200;
  if (!qword_32B200)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SegmentedControlItem);
  return result;
}

uint64_t sub_20FCB4(uint64_t a1)
{
  _BYTE v2[40];
  _BYTE v3[40];

  sub_5E1A4(a1, (uint64_t)v3, (uint64_t *)&unk_326210);
  sub_5E1A4((uint64_t)v3, (uint64_t)v2, (uint64_t *)&unk_326210);
  type metadata accessor for SegmentedControlItem(0);
  _CodeAnyActionModel_OrNil.wrappedValue.setter(v2);
  return sub_5E09C((uint64_t)v3, (uint64_t *)&unk_326210);
}

uint64_t SegmentedControlItem.action.setter(uint64_t a1)
{
  _BYTE v3[40];

  sub_5E1A4(a1, (uint64_t)v3, (uint64_t *)&unk_326210);
  type metadata accessor for SegmentedControlItem(0);
  _CodeAnyActionModel_OrNil.wrappedValue.setter(v3);
  return sub_5E09C(a1, (uint64_t *)&unk_326210);
}

void (*SegmentedControlItem.action.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for SegmentedControlItem(0);
  v2[4] = _CodeAnyActionModel_OrNil.wrappedValue.modify(v2);
  return sub_181168;
}

uint64_t SegmentedControlItem.localizableTitle.getter()
{
  uint64_t v0;

  return static LocalizerRequest.verbatim(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t SegmentedControlItem.localizableSubtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v3);
    static LocalizerRequest.verbatim(_:)(v4);
    v5 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 0, 1, v5);
    return swift_bridgeObjectRelease(v3);
  }
  else
  {
    v7 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }
}

uint64_t SegmentedControlItem.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SegmentedControlItem(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 40), a1, &qword_31F480);
}

uint64_t SegmentedControlItem.impressionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SegmentedControlItem(0) + 40);
  return sub_20FEF8(a1, v3);
}

uint64_t sub_20FEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_31F480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::Void (__swiftcall *SegmentedControlItem.impressionMetrics.modify())()
{
  type metadata accessor for SegmentedControlItem(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_20FF68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20FF90 + 4 * byte_268530[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_20FF90()
{
  return 0x656C746974;
}

uint64_t sub_20FFA4()
{
  return 0x656C746974627573;
}

uint64_t sub_20FFBC()
{
  return 0x6C6F626D7973;
}

uint64_t sub_20FFD0()
{
  return 0x6C62617369447369;
}

uint64_t sub_20FFEC()
{
  return 0x6E6F69746361;
}

unint64_t sub_210000()
{
  return 0xD000000000000011;
}

uint64_t sub_21001C()
{
  unsigned __int8 *v0;

  return sub_20FF68(*v0);
}

uint64_t sub_210024@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_211268(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_210048(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_210570();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_210070(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_210570();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SegmentedControlItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _BYTE v47[40];
  _OWORD v48[2];
  uint64_t v49;
  char *v50;

  v39 = a2;
  v3 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_5C154(&qword_32B190);
  v7 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SegmentedControlItem(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[64] = 0;
  v14 = &v12[*(int *)(v13 + 36)];
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  sub_5E1A4((uint64_t)v48, (uint64_t)v47, (uint64_t *)&unk_326210);
  v50 = v14;
  _CodeAnyActionModel_OrNil.init(wrappedValue:)(v47);
  sub_5E09C((uint64_t)v48, (uint64_t *)&unk_326210);
  v15 = (uint64_t)&v12[*(int *)(v10 + 40)];
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v43 = v15;
  v17(v15, 1, 1, v16);
  v18 = a1[3];
  v19 = a1[4];
  v42 = a1;
  sub_66898(a1, v18);
  v20 = sub_210570();
  v21 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SegmentedControlItem.CodingKeys, &type metadata for SegmentedControlItem.CodingKeys, v20, v18, v19);
  if (v21)
  {
    v22 = v46;
    v27 = v44;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v42);
    v28 = v43;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v50, v22);
    return sub_5E09C(v28, &qword_31F480);
  }
  else
  {
    v23 = v6;
    v24 = (uint64_t)v40;
    LOBYTE(v48[0]) = 0;
    v25 = KeyedDecodingContainer.decode(_:forKey:)(v48, v41);
    v26 = v46;
    *(_QWORD *)v12 = v25;
    *((_QWORD *)v12 + 1) = v30;
    LOBYTE(v48[0]) = 1;
    v45 = v9;
    v31 = KeyedDecodingContainer.decode(_:forKey:)(v48, v41);
    v32 = v44;
    *((_QWORD *)v12 + 2) = v31;
    *((_QWORD *)v12 + 3) = v33;
    LOBYTE(v48[0]) = 2;
    v38 = 0;
    *((_QWORD *)v12 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v48, v41);
    *((_QWORD *)v12 + 5) = v34;
    LOBYTE(v48[0]) = 3;
    *((_QWORD *)v12 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v48, v41);
    *((_QWORD *)v12 + 7) = v35;
    LOBYTE(v48[0]) = 4;
    v12[64] = KeyedDecodingContainer.decode(_:forKey:)(v48, v41) & 1;
    LOBYTE(v48[0]) = 5;
    v36 = sub_648E0(&qword_329618, (uint64_t (*)(uint64_t))&type metadata accessor for _CodeAnyActionModel_OrNil, (uint64_t)&protocol conformance descriptor for _CodeAnyActionModel_OrNil);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, v26, v48, v41, v26, v36);
    (*(void (**)(char *, _QWORD *, uint64_t))(v32 + 40))(v50, v23, v26);
    LOBYTE(v48[0]) = 6;
    v37 = sub_648E0(&qword_320BA0, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, v48, v41, v16, v37);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v45, v41);
    sub_20FEF8(v24, v43);
    sub_2105B4((uint64_t)v12, v39);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v42);
    return sub_2105F8((uint64_t)v12);
  }
}

unint64_t sub_210570()
{
  unint64_t result;

  result = qword_32B198;
  if (!qword_32B198)
  {
    result = swift_getWitnessTable(&unk_268754, &type metadata for SegmentedControlItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B198);
  }
  return result;
}

uint64_t sub_2105B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SegmentedControlItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2105F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SegmentedControlItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_210634()
{
  return sub_648E0(&qword_32B1A0, type metadata accessor for SegmentedControlItem, (uint64_t)&protocol conformance descriptor for SegmentedControlItem);
}

uint64_t sub_210660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 40), a2, &qword_31F480);
}

uint64_t sub_210688()
{
  return _CodeAnyActionModel_OrNil.wrappedValue.getter();
}

uint64_t sub_2106AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SegmentedControlItem.init(from:)(a1, a2);
}

uint64_t sub_2106C0()
{
  type metadata accessor for SegmentedControlItem(0);
  return _CodeAnyActionModel_OrNil.wrappedValue.getter();
}

_QWORD *initializeBufferWithCopyOfBuffer for SegmentedControlItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a2[6];
    v11 = a2[7];
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v12 = *(int *)(a3 + 36);
    v25 = a1 + v12;
    v13 = (uint64_t)a2 + v12;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    v14 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v16 = swift_bridgeObjectRetain(v11);
    v15(v25, v13, v14, v16);
    v17 = *(int *)(a3 + 40);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for ImpressionMetrics(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_5C154(&qword_31F480);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return v4;
}

uint64_t destroy for SegmentedControlItem(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 40);
  v7 = type metadata accessor for ImpressionMetrics(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t initializeWithCopy for SegmentedControlItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  v13 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v15 = swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13, v15);
  v16 = *(int *)(a3 + 40);
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_5C154(&qword_31F480);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithCopy for SegmentedControlItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(a3 + 40);
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v16) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v16)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_5C154(&qword_31F480);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t initializeWithTake for SegmentedControlItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(a3 + 40);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_5C154(&qword_31F480);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for SegmentedControlItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = *(int *)(a3 + 40);
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v16) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v16)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_5C154(&qword_31F480);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for SegmentedControlItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_210ECC);
}

uint64_t sub_210ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = sub_5C154(&qword_31F480);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SegmentedControlItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_210F7C);
}

uint64_t sub_210F7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = sub_5C154(&qword_31F480);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_21101C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_268648;
  v6[1] = &unk_268648;
  v6[2] = &unk_268660;
  v6[3] = &unk_268660;
  v6[4] = &unk_268678;
  v2 = type metadata accessor for _CodeAnyActionModel_OrNil(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_AE8F0(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for SegmentedControlItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_211110 + 4 * byte_26853C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_211144 + 4 * byte_268537[v4]))();
}

uint64_t sub_211144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21114C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x211154);
  return result;
}

uint64_t sub_211160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x211168);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21116C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_211174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SegmentedControlItem.CodingKeys()
{
  return &type metadata for SegmentedControlItem.CodingKeys;
}

unint64_t sub_211194()
{
  unint64_t result;

  result = qword_32B250;
  if (!qword_32B250)
  {
    result = swift_getWitnessTable(&unk_26872C, &type metadata for SegmentedControlItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B250);
  }
  return result;
}

unint64_t sub_2111DC()
{
  unint64_t result;

  result = qword_32B258;
  if (!qword_32B258)
  {
    result = swift_getWitnessTable(&unk_26869C, &type metadata for SegmentedControlItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B258);
  }
  return result;
}

unint64_t sub_211224()
{
  unint64_t result;

  result = qword_32B260;
  if (!qword_32B260)
  {
    result = swift_getWitnessTable(&unk_2686C4, &type metadata for SegmentedControlItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B260);
  }
  return result;
}

uint64_t sub_211268(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F626D7973, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6C62617369447369 && a2 == 0xEA00000000006465)
  {
    v10 = 0xEA00000000006465;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C62617369447369, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000026D790)
  {
    swift_bridgeObjectRelease(0x800000000026D790);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t static Shelf.seriesHeader(from:seriesPromotionState:with:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _QWORD *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  double (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  _OWORD v95[2];
  uint64_t v96;
  _QWORD v97[4];
  uint64_t v98;
  _OWORD v99[2];
  uint64_t v100;
  uint64_t v101;

  v94 = (char *)a2;
  v85 = a4;
  v6 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v6);
  v91 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_323BF8);
  __chkstk_darwin(v8);
  v90 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v88 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ShelfBackgroundViewModel(0);
  v12 = __chkstk_darwin(v11);
  v86 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for SectionData.ComponentContained(0, v12);
  v80 = *(_QWORD *)(v81 - 8);
  v14 = __chkstk_darwin(v81);
  v82 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for SectionType(0, v14);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v79 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v17);
  v83 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v19);
  v93 = (uint64_t)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v21);
  v92 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v75 = (char *)&v73 - v24;
  v25 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  v76 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v73 - v33;
  v35 = a1[3];
  v36 = a1[4];
  v84 = a1;
  v37 = sub_66898(a1, v35);
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v73 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v41 + 16))(v40, v38);
  sub_83130((uint64_t)v94, (uint64_t)v99);
  swift_retain(a3);
  v42 = v101;
  result = SeriesQuickActionButtonViewModel.init<A>(for:seriesPromotionState:with:)((uint64_t)v40, v99, a3, v35, v36, (uint64_t)v34);
  if (!v42)
  {
    v44 = v84;
    sub_5E0D8((uint64_t)v84, (uint64_t)v99);
    v74 = v29;
    v45 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v73 = v34;
    v101 = v28;
    v45(v31, v34, v28);
    v46 = type metadata accessor for ImpressionMetrics(0);
    v47 = *(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
    v48 = (uint64_t)v75;
    v47(v75, 1, 1, v46);
    v49 = sub_5C154(&qword_31FE28);
    BaseObjectGraph.inject<A>(_:)(&v98, v49, v49);
    SeriesRoomHeaderComponentModel.init(series:quickActionButtonViewModel:impressionMetrics:localizerForAnalytics:)(v99, (uint64_t)v31, v48, (uint64_t)&v98, (uint64_t)v27);
    v100 = 0;
    memset(v99, 0, sizeof(v99));
    v50 = sub_5C154(&qword_32B268);
    v51 = *(unsigned __int8 *)(v76 + 80);
    v52 = (v51 + 32) & ~v51;
    v53 = swift_allocObject(v50, v52 + *(_QWORD *)(v76 + 72), v51 | 7);
    *(_OWORD *)(v53 + 16) = xmmword_258070;
    v94 = v27;
    sub_212244((uint64_t)v27, v53 + v52);
    v54.n128_f64[0] = v47(v92, 1, 1, v46);
    v55 = type metadata accessor for Metrics.Location(0, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v93, 1, 1, v55);
    v56 = v44[3];
    v57 = v44[4];
    sub_66898(v44, v56);
    v58 = ContentInfo.title.getter(v56, *(_QWORD *)(v57 + 8));
    v60 = v59;
    v61 = v79;
    (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v79, enum case for SectionType.unknown(_:), v78);
    v62 = v82;
    (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v82, enum case for SectionData.ComponentContained.topLockup(_:), v81);
    v63 = v83;
    SectionData.init(sectionID:name:sectionType:componentContained:exposureIndex:)(0xD000000000000012, 0x8000000000274F20, v58, v60, v61, v62, 0);
    v64 = type metadata accessor for SectionData(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 0, 1, v64);
    v65 = v88;
    (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v88, enum case for ShelfBackgroundViewModel.BackgroundKind.none(_:), v89);
    v66 = (uint64_t)v86;
    ShelfBackgroundViewModel.init(kind:)(v65);
    if (qword_31E700 != -1)
      swift_once(&qword_31E700, sub_197DFC);
    v67 = (uint64_t)v63;
    sub_11F098((uint64_t)&unk_327F28, (uint64_t)&v98);
    v68 = v85;
    v69 = (uint64_t)v91;
    v70 = (uint64_t)v90;
    if (qword_31E710 != -1)
      swift_once(&qword_31E710, sub_197F5C);
    sub_11F108((uint64_t)&unk_327F78, (uint64_t)v97);
    v71 = type metadata accessor for ShelfGridSpacing(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v70, 1, 1, v71);
    v72 = type metadata accessor for PaginationInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v69, 1, 1, v72);
    v96 = 0;
    memset(v95, 0, sizeof(v95));
    sub_211D18(0xD000000000000012, 0x8000000000274F20, (uint64_t)v99, 1, v53, 0, (uint64_t)v92, v93, v68, v67, v66, &v98, v97, v70, v69, (uint64_t)v95);
    sub_212288((uint64_t)v94);
    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v73, v101);
  }
  return result;
}

uint64_t sub_211D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[40];
  _BYTE v69[40];
  _BYTE v70[8];
  _BYTE v71[8];
  int v72;
  char v73;

  v66 = a8;
  v67 = a7;
  v72 = a6;
  v56 = a5;
  v59 = a2;
  v58 = a1;
  v57 = a9;
  v54 = a16;
  v53 = a15;
  v61 = a14;
  v62 = a13;
  v63 = a12;
  LODWORD(v55) = a4 & 1;
  v64 = a11;
  v65 = a10;
  v17 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v17);
  v52 = (uint64_t)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_323BF8);
  __chkstk_darwin(v19);
  v51 = (uint64_t)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_323C00);
  __chkstk_darwin(v21);
  v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ShelfBackgroundViewModel(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v27;
  v28 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v28);
  v30 = (char *)&v46 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v31);
  v33 = (char *)&v46 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v34);
  v36 = (char *)&v46 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = a3;
  sub_5E1A4(a3, (uint64_t)v71, &qword_323D48);
  v73 = v55;
  v50 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  v49 = sub_2122C4();
  v37 = v56;
  v48 = sub_133DCC(v56);
  swift_bridgeObjectRelease(v37);
  sub_5E1A4(v67, (uint64_t)v36, &qword_31F480);
  sub_5E1A4(v66, (uint64_t)v33, &qword_323B40);
  sub_5E1A4(v65, (uint64_t)v30, (uint64_t *)&unk_326100);
  v55 = v25;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v56 = v24;
  v38(v27, v64, v24);
  sub_11F098((uint64_t)v63, (uint64_t)v70);
  sub_11F108((uint64_t)v62, (uint64_t)v69);
  v39 = type metadata accessor for ContentUnavailableComponentModel(0);
  v40 = (uint64_t)v23;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v23, 1, 1, v39);
  v41 = v51;
  sub_5E1A4(v61, v51, &qword_323BF8);
  v42 = v53;
  v43 = v52;
  sub_5E1A4(v53, v52, &qword_323C08);
  v44 = v54;
  sub_5E1A4(v54, (uint64_t)v68, &qword_324BD8);
  Shelf.init(id:shelfGridID:presentation:itemKind:items:impressionable:impressionMetrics:location:sectionData:backgroundViewModel:headerComponentModel:footerComponentModel:emptyComponentModel:spacing:paginationInfo:paginationIntentProvider:)(v58, v59, (uint64_t)v71, &v73, v50, v49, (uint64_t)v48, v72, v57, (uint64_t)v36, (uint64_t)v33, (uint64_t)v30, (uint64_t)v47, (uint64_t)v70, (uint64_t)v69, v40, v41, v43, (uint64_t)v68);
  sub_5E09C(v44, &qword_324BD8);
  sub_5E09C(v42, &qword_323C08);
  sub_5E09C(v61, &qword_323BF8);
  sub_11F4C8(v62);
  sub_11F0D4(v63);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v64, v56);
  sub_5E09C(v65, (uint64_t *)&unk_326100);
  sub_5E09C(v66, &qword_323B40);
  sub_5E09C(v67, &qword_31F480);
  return sub_5E09C(v60, &qword_323D48);
}

uint64_t sub_212244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_212288(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeriesRoomHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2122C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_320090;
  if (!qword_320090)
  {
    v1 = type metadata accessor for SeriesRoomHeaderComponentModel(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesRoomHeaderComponentModel, v1);
    atomic_store(result, (unint64_t *)&qword_320090);
  }
  return result;
}

unint64_t static SeriesSeeAllPageIntent.kind.getter()
{
  return 0xD000000000000016;
}

unint64_t sub_21232C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31FFA8;
  if (!qword_31FFA8)
  {
    v1 = type metadata accessor for SeriesSeeAllPageIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesSeeAllPageIntent, v1);
    atomic_store(result, (unint64_t *)&qword_31FFA8);
  }
  return result;
}

uint64_t type metadata accessor for SeriesSeeAllPageIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_32B2C8;
  if (!qword_32B2C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesSeeAllPageIntent);
  return result;
}

void sub_2123B0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x8000000000268790;
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesSeeAllPageIntent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
    v8 = *(int *)(a3 + 24);
    v9 = v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for SeriesListSortOrder(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 28);
    v13 = v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for Metrics.NavigationType(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return v4;
}

uint64_t destroy for SeriesSeeAllPageIntent(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for Metrics.NavigationType(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for SeriesSeeAllPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Metrics.NavigationType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for SeriesSeeAllPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Metrics.NavigationType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for SeriesSeeAllPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Metrics.NavigationType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SeriesSeeAllPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Metrics.NavigationType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesSeeAllPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2127D0);
}

uint64_t sub_2127D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesListSortOrder(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for Metrics.NavigationType(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesSeeAllPageIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_21287C);
}

uint64_t sub_21287C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesListSortOrder(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for Metrics.NavigationType(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_212918(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = &unk_268840;
  v5[1] = &unk_268858;
  result = type metadata accessor for SeriesListSortOrder(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Metrics.NavigationType(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t View.shelfBackground(config:allowDefaultGradient:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v8 = type metadata accessor for ShelfBackgroundViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ShelfBackgroundViewModifier(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, v8, v13);
  *(_QWORD *)v15 = swift_getKeyPath(&unk_268870);
  v16 = sub_5C154(&qword_3202E8);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v15[*(int *)(v12 + 20)], v11, v8);
  v15[*(int *)(v12 + 24)] = a2;
  View.modifier<A>(_:)(v15, a3, v12, a4);
  return sub_212B40((uint64_t)v15);
}

uint64_t type metadata accessor for ShelfBackgroundViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_32B380;
  if (!qword_32B380)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfBackgroundViewModifier);
  return result;
}

uint64_t sub_212B40(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShelfBackgroundViewModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ShelfBackgroundViewModifier.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShelfBackgroundViewModifier(0) + 20);
  v4 = type metadata accessor for ShelfBackgroundViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ShelfBackgroundViewModifier.allowDefaultGradient.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShelfBackgroundViewModifier(0) + 24));
}

uint64_t ShelfBackgroundViewModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  v26 = sub_5C154(&qword_32B308);
  __chkstk_darwin(v26);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
  v9 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for ShelfBackgroundViewModifier(0) + 24));
  ShelfBackgroundViewModel.inferredBackground(allowDefaultGradient:)(v12);
  sub_79074((uint64_t)v8);
  v13 = ShelfBackgroundViewModel.shapeStyleForBackground(allowDefaultGradient:colorScheme:)(v12, v8);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = static Edge.Set.all.getter(v14);
  v16 = sub_5C154(&qword_32B310);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v4, v27, v16);
  v17 = &v4[*(int *)(v26 + 36)];
  *(_QWORD *)v17 = v13;
  v17[8] = v15;
  KeyPath = swift_getKeyPath(&unk_2688A0);
  v19 = sub_5C154(&qword_32B318);
  v20 = v28;
  v21 = (uint64_t *)(v28 + *(int *)(v19 + 36));
  v22 = sub_5C154(&qword_32B320);
  v23 = v25;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v21 + *(int *)(v22 + 28), v11, v25);
  *v21 = KeyPath;
  sub_212EA0((uint64_t)v4, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v23);
}

uint64_t sub_212DDC()
{
  return EnvironmentValues.shelfBackgroundKind.getter();
}

uint64_t sub_212DFC(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return EnvironmentValues.shelfBackgroundKind.setter(v5);
}

uint64_t sub_212E7C()
{
  return EnvironmentValues.shelfBackgroundKind.getter();
}

uint64_t sub_212EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_32B308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_212EE8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ShelfBackgroundViewModifier.body(content:)>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ShelfBackgroundViewModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ShelfBackgroundViewModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for ShelfBackgroundViewModifier(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for ShelfBackgroundViewModel(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for ShelfBackgroundViewModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithCopy for ShelfBackgroundViewModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_21325C((uint64_t)a1);
    v6 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_21325C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_3202E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for ShelfBackgroundViewModifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_5C154(&qword_3202E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for ShelfBackgroundViewModifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_21325C((uint64_t)a1);
    v6 = sub_5C154(&qword_3202E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfBackgroundViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_213470);
}

uint64_t sub_213470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = sub_5C154(&qword_327778);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for ShelfBackgroundViewModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ShelfBackgroundViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_213538);
}

uint64_t sub_213538(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_5C154(&qword_327778);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for ShelfBackgroundViewModel(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

void sub_2135E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_18C1C8(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ShelfBackgroundViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_268950;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

unint64_t sub_213670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B3C0;
  if (!qword_32B3C0)
  {
    v1 = sub_667D0(&qword_32B318);
    sub_2136F4();
    sub_67060(&qword_32B3E8, &qword_32B320, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B3C0);
  }
  return result;
}

unint64_t sub_2136F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B3C8;
  if (!qword_32B3C8)
  {
    v1 = sub_667D0(&qword_32B308);
    sub_67060(&qword_32B3D0, &qword_32B310, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_67060(&qword_32B3D8, &qword_32B3E0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B3C8);
  }
  return result;
}

uint64_t sub_213790(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for ShelfBackgroundViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_2137EC();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_2137EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_328CF0;
  if (!qword_328CF0)
  {
    v1 = type metadata accessor for ShelfBackgroundViewModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfBackgroundViewModifier, v1);
    atomic_store(result, (unint64_t *)&qword_328CF0);
  }
  return result;
}

uint64_t View.observeReachability()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  NSString v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  _QWORD v14[2];

  v4 = type metadata accessor for ObserveReachabilityViewModifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v8 = String._bridgeToObjectiveC()();
  NSNotificationCenter.publisher(for:object:)(v8, 0);

  v9 = &v6[*(int *)(v4 + 20)];
  v13 = objc_msgSend((id)objc_opt_self(BKReachability), "isOffline") ^ 1;
  State.init(wrappedValue:)(v14, &v13, &type metadata for Bool);
  v10 = v14[1];
  *v9 = v14[0];
  *((_QWORD *)v9 + 1) = v10;
  View.modifier<A>(_:)(v6, a1, v4, a2);
  return sub_2139B8((uint64_t)v6);
}

uint64_t type metadata accessor for ObserveReachabilityViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_32B448;
  if (!qword_32B448)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObserveReachabilityViewModifier);
  return result;
}

uint64_t sub_2139B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ObserveReachabilityViewModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2139F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for ObserveReachabilityViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_213A50();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_213A50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3240B0;
  if (!qword_3240B0)
  {
    v1 = type metadata accessor for ObserveReachabilityViewModifier(255);
    result = swift_getWitnessTable(&unk_2689A8, v1);
    atomic_store(result, (unint64_t *)&qword_3240B0);
  }
  return result;
}

uint64_t *sub_213A98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for NSNotificationCenter.Publisher(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *v9 = *v10;
    v11 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v9 + 1) = v11;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_213B30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NSNotificationCenter.Publisher(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_213B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for NSNotificationCenter.Publisher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_213BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for NSNotificationCenter.Publisher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

uint64_t sub_213C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for NSNotificationCenter.Publisher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_213CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for NSNotificationCenter.Publisher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release(v10);
  return a1;
}

uint64_t sub_213D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_213D40);
}

uint64_t sub_213D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_213DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_213DD8);
}

uint64_t sub_213DD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for NSNotificationCenter.Publisher(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_213E54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for NSNotificationCenter.Publisher(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_268990;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_213EC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BA890, 1);
}

uint64_t sub_213ED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t);
  uint64_t KeyPath;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a1;
  v30 = a2;
  v29 = type metadata accessor for ObserveReachabilityViewModifier(0);
  v3 = *(_QWORD *)(v29 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v29);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_32B480);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v14(v9, v2, v6, v11);
  sub_214174(v2, (uint64_t)v5);
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_2F5278, v16 + v4, v15 | 7);
  sub_214244((uint64_t)v5, v17 + v16);
  v18 = sub_5C154(&qword_32B488);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v13, v28, v18);
  ((void (*)(char *, char *, uint64_t))v14)(&v13[*(int *)(v10 + 52)], v9, v6);
  v19 = (uint64_t (**)(uint64_t))&v13[*(int *)(v10 + 56)];
  *v19 = sub_214288;
  v19[1] = (uint64_t (*)(uint64_t))v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  KeyPath = swift_getKeyPath(&unk_2689F8);
  v21 = v2 + *(int *)(v29 + 20);
  v22 = *(_BYTE *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v31 = v22;
  v32 = v23;
  v24 = sub_5C154(&qword_325B50);
  State.wrappedValue.getter(&v33, v24);
  LOBYTE(v7) = v33;
  v25 = v30;
  sub_214314((uint64_t)v13, v30);
  v26 = v25 + *(int *)(sub_5C154(&qword_32B490) + 36);
  *(_QWORD *)v26 = KeyPath;
  *(_BYTE *)(v26 + 8) = v7;
  return sub_21435C((uint64_t)v13);
}

uint64_t sub_2140F0(uint64_t a1, uint64_t a2)
{
  char v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[9];
  uint64_t v10;

  v3 = objc_msgSend((id)objc_opt_self(BKReachability), "isOffline") ^ 1;
  v4 = (char *)(a2 + *(int *)(type metadata accessor for ObserveReachabilityViewModifier(0) + 20));
  v5 = *v4;
  v6 = *((_QWORD *)v4 + 1);
  v9[1] = v5;
  v10 = v6;
  v9[0] = v3;
  v7 = sub_5C154(&qword_325B50);
  return State.wrappedValue.setter(v9, v7);
}

uint64_t sub_214174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObserveReachabilityViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2141B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ObserveReachabilityViewModifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for NSNotificationCenter.Publisher(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_214244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObserveReachabilityViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_214288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ObserveReachabilityViewModifier(0) - 8) + 80);
  return sub_2140F0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_2142C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isReachable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2142F0(unsigned __int8 *a1)
{
  return EnvironmentValues.isReachable.setter(*a1);
}

uint64_t sub_214314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_32B480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21435C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_32B480);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2143A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B498;
  if (!qword_32B498)
  {
    v1 = sub_667D0(&qword_32B490);
    sub_67060(&qword_32B4A0, &qword_32B480, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B498);
  }
  return result;
}

uint64_t sub_21443C()
{
  return 0x6E656D6D6F636572;
}

uint64_t sub_214460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E656D6D6F636572 && a2 == 0xEF736E6F69746164)
  {
    result = swift_bridgeObjectRelease(0xEF736E6F69746164);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D6D6F636572, 0xEF736E6F69746164, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_214518(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_214CBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_214540(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_214CBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_214568(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x8000000000268AA0;
}

_QWORD *sub_214588@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_214B90(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_2145B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t inited;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[88];

  v7 = sub_5C154(&qword_32B4A8);
  inited = swift_initStackObject(v7, v24);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = 0x6E656D6D6F636572;
  *(_QWORD *)(inited + 40) = 0xEF736E6F69746164;
  v9 = sub_21492C();
  Array<A>.jsRepresentation(in:)(v21, a1, a2, &type metadata for RecommendationDetails, v9);
  if (v3)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(inited + 40));
    swift_setDeallocating(inited);
    v10 = sub_5C154(&qword_31ED88);
    return swift_arrayDestroy(inited + 32, 0, v10);
  }
  else
  {
    v12 = v22;
    v13 = v23;
    v14 = sub_66898(v21, v22);
    v15 = __chkstk_darwin(v14);
    v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19.n128_f64[0] = (*(double (**)(char *, __n128))(v18 + 16))(v17, v15);
    AnyCustomJSValueConvertible.init<A>(_:)((_QWORD *)(inited + 48), v17, v12, v13, v19);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v21);
    v20 = sub_53908(inited);
    a3[3] = sub_5C154(&qword_324DA8);
    result = sub_214970(&qword_324DB0, &qword_324DA8);
    a3[4] = result;
    *a3 = v20;
  }
  return result;
}

uint64_t sub_214760@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_2145B0(a1, *v2, a2);
}

uint64_t sub_214778()
{
  _BYTE *v0;

  if (*v0)
    return 0x44496D616461;
  else
    return 1701869940;
}

uint64_t sub_2147A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_215104(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2147CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_214DA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2147F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_214DA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_21481C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_2149E4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_214848@<X0>(unint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = *v1;
  v3 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = sub_5C154(&qword_3206C0);
  inited = swift_initStackObject(v7, &v11);
  *(_OWORD *)(inited + 16) = xmmword_255F00;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = 0x44496D616461;
  *(_QWORD *)(inited + 72) = 0xE600000000000000;
  *(_QWORD *)(inited + 80) = v6;
  *(_QWORD *)(inited + 88) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  v9 = sub_52A70(inited);
  a1[3] = sub_5C154(&qword_3206C8);
  result = sub_214970((unint64_t *)&qword_3206D0, &qword_3206C8);
  a1[4] = result;
  *a1 = v9;
  return result;
}

unint64_t sub_21492C()
{
  unint64_t result;

  result = qword_32B4B0;
  if (!qword_32B4B0)
  {
    result = swift_getWitnessTable(&unk_268A44, &type metadata for RecommendationDetails);
    atomic_store(result, (unint64_t *)&qword_32B4B0);
  }
  return result;
}

uint64_t sub_214970(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_667D0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsPageIntent()
{
  return &type metadata for RecommendationsPageIntent;
}

ValueMetadata *type metadata accessor for RecommendationDetails()
{
  return &type metadata for RecommendationDetails;
}

uint64_t sub_2149E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = sub_5C154(&qword_32B4E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_66898(a1, v7);
  v9 = sub_214DA8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationDetails.CodingKeys, &type metadata for RecommendationDetails.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  }
  else
  {
    v17 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v12 = v11;
    v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

_QWORD *sub_214B90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_5C154(&qword_32B4B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_66898(a1, v7);
  v10 = sub_214CBC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsPageIntent.CodingKeys, &type metadata for RecommendationsPageIntent.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  }
  else
  {
    v11 = sub_5C154(&qword_32B4C8);
    v12 = sub_214D00();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_214CBC()
{
  unint64_t result;

  result = qword_32B4C0;
  if (!qword_32B4C0)
  {
    result = swift_getWitnessTable(&unk_268D64, &type metadata for RecommendationsPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B4C0);
  }
  return result;
}

unint64_t sub_214D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B4D0;
  if (!qword_32B4D0)
  {
    v1 = sub_667D0(&qword_32B4C8);
    sub_214D64();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_32B4D0);
  }
  return result;
}

unint64_t sub_214D64()
{
  unint64_t result;

  result = qword_32B4D8;
  if (!qword_32B4D8)
  {
    result = swift_getWitnessTable(&unk_268AF8, &type metadata for RecommendationDetails);
    atomic_store(result, (unint64_t *)&qword_32B4D8);
  }
  return result;
}

unint64_t sub_214DA8()
{
  unint64_t result;

  result = qword_32B4E8;
  if (!qword_32B4E8)
  {
    result = swift_getWitnessTable(&unk_268D14, &type metadata for RecommendationDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B4E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RecommendationDetails.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_214E38 + 4 * byte_268A35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_214E6C + 4 * byte_268A30[v4]))();
}

uint64_t sub_214E6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_214E74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x214E7CLL);
  return result;
}

uint64_t sub_214E88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x214E90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_214E94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_214E9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationDetails.CodingKeys()
{
  return &type metadata for RecommendationDetails.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RecommendationsPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_214EF8 + 4 * byte_268A3A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_214F18 + 4 * byte_268A3F[v4]))();
}

_BYTE *sub_214EF8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_214F18(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_214F20(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_214F28(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_214F30(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_214F38(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsPageIntent.CodingKeys()
{
  return &type metadata for RecommendationsPageIntent.CodingKeys;
}

unint64_t sub_214F58()
{
  unint64_t result;

  result = qword_32B4F0;
  if (!qword_32B4F0)
  {
    result = swift_getWitnessTable(&unk_268C34, &type metadata for RecommendationsPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B4F0);
  }
  return result;
}

unint64_t sub_214FA0()
{
  unint64_t result;

  result = qword_32B4F8;
  if (!qword_32B4F8)
  {
    result = swift_getWitnessTable(&unk_268CEC, &type metadata for RecommendationDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B4F8);
  }
  return result;
}

unint64_t sub_214FE8()
{
  unint64_t result;

  result = qword_32B500;
  if (!qword_32B500)
  {
    result = swift_getWitnessTable(&unk_268C5C, &type metadata for RecommendationDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B500);
  }
  return result;
}

unint64_t sub_215030()
{
  unint64_t result;

  result = qword_32B508;
  if (!qword_32B508)
  {
    result = swift_getWitnessTable(&unk_268C84, &type metadata for RecommendationDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B508);
  }
  return result;
}

unint64_t sub_215078()
{
  unint64_t result;

  result = qword_32B510;
  if (!qword_32B510)
  {
    result = swift_getWitnessTable(&unk_268BA4, &type metadata for RecommendationsPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B510);
  }
  return result;
}

unint64_t sub_2150C0()
{
  unint64_t result;

  result = qword_32B518;
  if (!qword_32B518)
  {
    result = swift_getWitnessTable(&unk_268BCC, &type metadata for RecommendationsPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32B518);
  }
  return result;
}

uint64_t sub_215104(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44496D616461 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496D616461, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_2151DC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_269050);
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_322200, type metadata accessor for CardAuxiliaryNavigationBarBackgroundViewModel, (uint64_t)&unk_25BA9C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 48);
  v7 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(a2 + 16) = v7;
  *(double *)(a2 + 32) = result;
  return result;
}

uint64_t sub_215270(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v2;
  v10 = *(_QWORD *)(a1 + 32);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_269050);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_322200, type metadata accessor for CardAuxiliaryNavigationBarBackgroundViewModel, (uint64_t)&unk_25BA9C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_21B28C, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

void sub_215324(uint64_t a1@<X8>)
{
  sub_215340(&qword_323FF0, &qword_323FD8, (uint64_t)sub_21AA80, a1);
}

void sub_215340(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *Strong;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[5];

  v8 = v4;
  v10 = sub_5C154(&qword_31FA90);
  BaseObjectGraph.inject<A>(_:)(v19, v10, v10);
  v11 = type metadata accessor for NavigationProvider();
  if (swift_dynamicCast(&v18, v19, v10, v11, 6))
  {
    v12 = v18;
    v13 = v18 + 16;
    swift_beginAccess(v18 + 16, v19, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v13);
  }
  else
  {
    Strong = 0;
    v12 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_269028);
  v16 = swift_allocObject(&unk_2F55D0, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16);
  sub_5E1A4(v8, a4, a1);
  v17 = (uint64_t *)(a4 + *(int *)(sub_5C154(a2) + 36));
  *v17 = KeyPath;
  v17[1] = a3;
  v17[2] = v16;
  swift_release(v12);

}

uint64_t sub_215474@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_268FD0);
  v7 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_215500(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_268FD0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_21AA38, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_2155A8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_269118);
  v7 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 18);
  return result;
}

uint64_t sub_215634(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_269118);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_21B304, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_2156DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_268EF8);
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_21576C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_268EF8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_21AA88, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_215824@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2690C8);
  v7[0] = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 32, v7, 0, 0);
  return sub_5E1A4(v3 + 32, a2, &qword_320940);
}

uint64_t sub_2158D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_5E1A4(a1, (uint64_t)v9, &qword_320940);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2690C8);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_21B2DC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_5E09C((uint64_t)v9, &qword_320940);
}

uint64_t sub_21599C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2690A0);
  v7 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 72);
  return result;
}

uint64_t sub_215A28(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2690A0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_21B2B4, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_215AD0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_269078);
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 80);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_215B60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_269078);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_21B2A0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

double sub_215C18@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2690F0);
  v7 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 88);
  *a2 = result;
  return result;
}

uint64_t sub_215CA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2690F0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_21B2F0, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

void sub_215D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int64_t i;
  char *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5C154(&qword_31ED78);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v41 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v7 = &v47;
  v8 = &v49;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v10 = (char *)&type metadata for Any + 8;
  v11 = &type metadata for String;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v40)
    goto LABEL_32;
  v21 = *(_QWORD *)(v41 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v21 = *(_QWORD *)(v41 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v21 = *(_QWORD *)(v41 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v21 = *(_QWORD *)(v41 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v40)
          {
            v21 = *(_QWORD *)(v41 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v40)
                break;
              v21 = *(_QWORD *)(v41 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1A64F8(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v43 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v6)) | (i << 6))
  {
    v24 = 16 * v19;
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v27 = *v25;
    v26 = v25[1];
    v28 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v24);
    v29 = *v28;
    v30 = v28[1];
    v45 = v27;
    v46 = v26;
    v44[0] = v29;
    v44[1] = v30;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v30);
    swift_dynamicCast(v7, v44, v11, v10, 7);
    v31 = v45;
    v32 = v46;
    sub_5D000(v7, v8);
    sub_5D000(v8, v50);
    sub_5D000(v50, &v48);
    v33 = sub_582B4(v31, v32);
    v34 = v33;
    if ((v35 & 1) != 0)
    {
      v42 = i;
      v12 = v8;
      v13 = v7;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v3[6] + 16 * v33);
      swift_bridgeObjectRelease(v17[1]);
      *v17 = v31;
      v17[1] = v32;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v7 = v13;
      v8 = v12;
      i = v42;
      v18 = (_QWORD *)(v3[7] + 32 * v34);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v18);
      sub_5D000(&v48, v18);
      v6 = v43;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v33;
    v36 = (uint64_t *)(v3[6] + 16 * v33);
    *v36 = v31;
    v36[1] = v32;
    sub_5D000(&v48, (_OWORD *)(v3[7] + 32 * v33));
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v3[2] = v39;
    v6 = v43;
    if (!v43)
      goto LABEL_11;
LABEL_10:
    v43 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_2160BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[3];
  _OWORD v41[2];
  __int128 v42;
  _OWORD v43[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5C154(&qword_31EED0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v29)
        goto LABEL_37;
      v15 = *(_QWORD *)(v30 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v29)
          goto LABEL_37;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v29)
            goto LABEL_37;
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_5DC5C(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v43);
    *(_QWORD *)&v42 = v20;
    *((_QWORD *)&v42 + 1) = v19;
    v40[2] = v42;
    v41[0] = v43[0];
    v41[1] = v43[1];
    v31[0] = v20;
    v31[1] = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v32, v31, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_5D000(v41, v40);
    v21 = sub_5C154(&qword_326600);
    swift_dynamicCast(v35, v40, v21, (char *)&type metadata for Any + 8, 7);
    v36 = v32;
    v37 = v33;
    v38 = v34;
    sub_5D000(v35, v39);
    v32 = v36;
    v33 = v37;
    v34 = v38;
    sub_5D000(v39, v40);
    sub_5D000(v40, &v36);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v7[8 * v24];
      }
      while (v28 == -1);
      v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(_QWORD *)(v11 + 32) = v34;
    result = (uint64_t)sub_5D000(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_1A64F8(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_2164B0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5C154(&qword_31EED0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_5DCB0(*(_QWORD *)(a1 + 56) + 40 * v13, (uint64_t)v46);
    v44 = v20;
    v45 = v19;
    v41 = v46[0];
    v42 = v46[1];
    v43 = v47;
    v32[0] = v20;
    v32[1] = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v33, v32, &type metadata for String, &type metadata for AnyHashable, 7);
    v30[0] = v41;
    v30[1] = v42;
    v31 = v43;
    swift_dynamicCast(v36, v30, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_5D000(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_5D000(v40, v30);
    sub_5D000(v30, &v37);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(_QWORD *)(v11 + 32) = v35;
    result = (uint64_t)sub_5D000(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1A64F8(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

id CardAuxiliaryNavigationBarManager.init()()
{
  char *v0;
  objc_super v2;

  swift_unknownObjectWeakInit(&v0[OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_wrappedViewController]);
  *(_QWORD *)&v0[OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_pendingClosures] = _swiftEmptyArrayStorage;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardAuxiliaryNavigationBarManager();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarManager()
{
  return objc_opt_self(BSUICardAuxiliaryNavigationBarManager);
}

uint64_t sub_216970(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 97) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 40) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = v6;
  return swift_task_switch(sub_2169E0, v5, v6);
}

uint64_t sub_2169E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;

  v1 = UIViewController.jetActionHandlerInContext.getter();
  v3 = v2;
  ObjectType = swift_getObjectType();
  *(_QWORD *)(v0 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
  swift_unknownObjectRelease(v1);
  v5 = (_QWORD *)swift_task_alloc(dword_31FE04);
  *(_QWORD *)(v0 + 72) = v5;
  *v5 = v0;
  v5[1] = sub_216A90;
  return BaseObjectGraph.withSyncDependenciesForSwiftUI.getter();
}

uint64_t sub_216A90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  *(_QWORD *)(*(_QWORD *)v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[6];
    v7 = v4[7];
    v8 = sub_216C98;
  }
  else
  {
    v4[11] = a1;
    v6 = v4[6];
    v7 = v4[7];
    v8 = sub_216B04;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_216B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 97);
  v5 = *(void **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(v2);
  v6 = sub_5C154(&qword_31F010);
  v7 = type metadata accessor for Dependency(0);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) | 7);
  *(_OWORD *)(v8 + 16) = xmmword_258070;
  *(_BYTE *)(v0 + 96) = v4;
  Dependency.init<A>(satisfying:with:)(&type metadata for FigaroPageConfiguration, v0 + 96, &type metadata for FigaroPageConfiguration);
  *(_QWORD *)(v0 + 16) = v8;
  v9 = sub_5C154((uint64_t *)&unk_31FEC0);
  v10 = sub_67060((unint64_t *)&qword_31FAC0, (uint64_t *)&unk_31FEC0, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(v0 + 16, v9, v10);
  swift_release(v1);
  v12 = objc_msgSend(v5, "triggerStateManager", swift_bridgeObjectRelease(v8).n128_f64[0]);
  v13 = objc_allocWithZone((Class)type metadata accessor for CardAuxiliaryNavigationBarViewController(0));
  swift_retain(v11);
  v14 = sub_217530(v12, v11);
  sub_217304(v14);
  swift_unknownObjectWeakAssign(v3 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_wrappedViewController, v14);
  swift_release(v11);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_216C98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarViewController(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_32B5A8, (uint64_t)&nominal type descriptor for CardAuxiliaryNavigationBarViewController);
}

uint64_t sub_216E24(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = a4;
  *(_BYTE *)(v4 + 64) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 40) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_216E98, v6, v7);
}

uint64_t sub_216E98()
{
  uint64_t v0;
  void *v1;
  const void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v1 = *(void **)(v0 + 32);
  v3 = *(void **)(v0 + 16);
  v2 = *(const void **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  *(_QWORD *)(v0 + 48) = _Block_copy(v2);
  v4 = dword_32B534;
  v5 = v3;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 56) = v7;
  *v7 = v0;
  v7[1] = sub_216F18;
  return sub_216970(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 64));
}

uint64_t sub_216F18(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *(void **)(*v2 + 32);
  v7 = *(void **)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v5);

  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 48);
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, a1, 0);
    _Block_release(v9);

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

void sub_216FE4(void (*a1)(void), uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  void *Strong;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _BYTE v19[24];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_14065C();
  *v9 = static OS_dispatch_queue.main.getter(v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    v3 = sub_579C8(0, v3[2] + 1, 1, v3);
    *(_QWORD *)a1 = v3;
    goto LABEL_5;
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong((char *)v3 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_wrappedViewController);
  if (Strong)
  {
    v13 = Strong;
    a1();

    return;
  }
  v11 = swift_allocObject(&unk_2F55A8, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  a1 = (void (*)(void))((char *)v3 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_pendingClosures);
  swift_beginAccess((char *)v3 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_pendingClosures, v19, 33, 0);
  v3 = *(_QWORD **)a1;
  swift_retain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  *(_QWORD *)a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_9;
LABEL_5:
  v16 = v3[2];
  v15 = v3[3];
  if (v16 >= v15 >> 1)
  {
    v3 = sub_579C8((_QWORD *)(v15 > 1), v16 + 1, 1, v3);
    *(_QWORD *)a1 = v3;
  }
  v3[2] = v16 + 1;
  v17 = &v3[2 * v16];
  v17[4] = sub_217A7C;
  v17[5] = v11;
  swift_endAccess(v19);
}

uint64_t sub_217208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_14065C();
  *v5 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
    return swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_wrappedViewController);
  __break(1u);
  return result;
}

void sub_217304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t *);
  uint64_t v16;
  _BYTE v17[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_14065C();
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) != 0)
  {
    v10 = (_QWORD *)(v2 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_pendingClosures);
    swift_beginAccess(v10, v17, 1, 0);
    v11 = *v10;
    v12 = *(_QWORD *)(*v10 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain(*v10);
      v13 = (uint64_t *)(v11 + 40);
      do
      {
        v15 = (void (*)(uint64_t *))*(v13 - 1);
        v14 = *v13;
        v16 = a1;
        swift_retain(v14);
        v15(&v16);
        swift_release(v14);
        v13 += 2;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease(v11);
      v11 = *v10;
    }
    *v10 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    __break(1u);
  }
}

id CardAuxiliaryNavigationBarManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardAuxiliaryNavigationBarManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_2174BC(uint64_t a1)
{
  return (id)swift_unknownObjectWeakLoadStrong(a1 + qword_32B590);
}

uint64_t sub_2174DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;

  v4 = swift_unknownObjectWeakAssign(a1 + qword_32B590, a3);
  v5 = *(_QWORD *)(a1 + qword_32B570);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  swift_unknownObjectWeakAssign(v5 + 96, Strong);
  return swift_unknownObjectRelease(Strong);
}

uint64_t sub_217530(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void (*v22)(char *, _QWORD *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  id v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _UNKNOWN **v54;

  v51 = a2;
  v46 = a1;
  v49 = type metadata accessor for CardAuxiliaryNavigationBarViewController.DependencyInjectionView(0);
  __chkstk_darwin(v49);
  v48 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for AssetActionImplementation(0);
  __chkstk_darwin(v45);
  v44 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_31FE40);
  v50 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char **)((char *)&v44 - v10);
  v12 = &v2[qword_32B568];
  swift_unknownObjectWeakInit(&v2[qword_32B568]);
  swift_unknownObjectWeakInit(&v2[qword_32B590]);
  swift_unknownObjectWeakAssign(v12, a1);
  v13 = type metadata accessor for NavigationProvider();
  v14 = swift_allocObject(v13, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16);
  *(_QWORD *)&v2[qword_32B580] = v14;
  v15 = v2;
  BaseObjectGraph.inject<A>(_:)(v11, v6, v6);
  v16 = sub_5C154(&qword_31F010);
  v17 = *(_QWORD *)(type metadata accessor for Dependency(0) - 8);
  v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ 2 * *(_QWORD *)(v17 + 72), *(unsigned __int8 *)(v17 + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_255F00;
  v19 = sub_5C154(&qword_31FA90);
  *((_QWORD *)&v53 + 1) = v13;
  v54 = &protocol witness table for NavigationProvider;
  *(_QWORD *)&v52 = v14;
  swift_retain(v14);
  Dependency.init<A>(satisfying:with:)(v19, &v52, v19);
  v20 = (uint64_t)v44;
  PageData.init(pageID:pageType:)(0x50746375646F7250, 0xEB00000000656761, 0x50746375646F7250, 0xEB00000000656761, v21);
  v22 = *(void (**)(char *, _QWORD *, uint64_t))(v50 + 16);
  v47 = v11;
  v22(v8, v11, v6);
  v23 = sub_648E0(&qword_320380, type metadata accessor for AssetActionImplementation, (uint64_t)&protocol conformance descriptor for AssetActionImplementation);
  ActionDispatcher.add<A>(_:)(v20, v6, v45, v23);
  sub_6685C(v20, type metadata accessor for AssetActionImplementation);
  Dependency.init<A>(satisfying:with:)(v6, v8, v6);
  *(_QWORD *)&v52 = v18;
  v24 = sub_5C154((uint64_t *)&unk_31FEC0);
  v25 = sub_67060((unint64_t *)&qword_31FAC0, (uint64_t *)&unk_31FEC0, (uint64_t)&protocol conformance descriptor for [A]);
  v26 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(&v52, v24, v25);
  swift_bridgeObjectRelease(v18);
  v27 = type metadata accessor for CardAuxiliaryNavigationBarBackgroundViewModel(0);
  v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  ObservationRegistrar.init()(v28);
  *(_QWORD *)(v28 + 48) = 0;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  v29 = qword_32B578;
  *(_QWORD *)&v15[qword_32B578] = v28;
  v30 = type metadata accessor for CardAuxiliaryNavigationBarViewModel(0);
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  swift_retain(v26);
  v31 = sub_110DC8(0, 0, 1, v26, (uint64_t)&v52, 0, 0.0);
  v32 = qword_32B570;
  *(_QWORD *)&v15[qword_32B570] = v31;
  v33 = v46;
  if (v46)
  {
    v34 = v31;
    v35 = v46;
    swift_retain(v34);
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "addObserver:forTrigger:", v34, v36);

    swift_release(v34);
  }
  v15[qword_32B588] = 1;

  v37 = *(_QWORD *)&v15[v32];
  v38 = *(_QWORD *)&v15[v29];
  v39 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  swift_retain(v37);
  swift_retain(v38);
  v40 = v48;
  Bindable<A>.init(wrappedValue:)(v37, v30, v39);
  *(_QWORD *)&v40[*(int *)(v49 + 20)] = v38;
  v41 = UIHostingController.init(rootView:)(v40);
  v42 = *(_QWORD *)(v41 + qword_32B580) + 16;
  swift_beginAccess(v42, &v52, 1, 0);
  swift_unknownObjectWeakAssign(v42, v41);
  swift_release(v26);

  swift_release(v51);
  (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v47, v6);
  return v41;
}

uint64_t sub_217A58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_217A7C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_217AA0(char *a1, uint64_t a2, void *a3)
{
  id v5;

  swift_unknownObjectWeakInit(&a1[qword_32B568], 0);
  swift_unknownObjectWeakInit(&a1[qword_32B590], 0);
  v5 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000000026EFD0, "BookStoreUI/CardAuxiliaryNavigationBarViewController.swift", 58, 2, 219, 0);
  __break(1u);
}

uint64_t sub_217B34()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + qword_32B568);
  swift_release(*(_QWORD *)(v0 + qword_32B570));
  swift_release(*(_QWORD *)(v0 + qword_32B578));
  swift_release(*(_QWORD *)(v0 + qword_32B580));
  return sub_6C0E4(v0 + qword_32B590);
}

id sub_217B90()
{
  char *v0;
  uint64_t Strong;
  void *v2;
  uint64_t v3;
  NSString v4;
  objc_super v6;

  Strong = swift_unknownObjectWeakLoadStrong(&v0[qword_32B568]);
  if (Strong)
  {
    v2 = (void *)Strong;
    v3 = *(_QWORD *)&v0[qword_32B570];
    swift_retain(v3);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "removeObserver:forTrigger:", v3, v4);

    swift_release(v3);
  }
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CardAuxiliaryNavigationBarViewController(0);
  return objc_msgSendSuper2(&v6, "dealloc");
}

id sub_217C48(void *a1)
{
  id v1;

  v1 = a1;
  return sub_217B90();
}

uint64_t sub_217C6C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1 + qword_32B568);
  swift_release(*(_QWORD *)(a1 + qword_32B570));
  swift_release(*(_QWORD *)(a1 + qword_32B578));
  swift_release(*(_QWORD *)(a1 + qword_32B580));
  return sub_6C0E4(a1 + qword_32B590);
}

void sub_217CD4()
{
  unsigned __int8 *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CardAuxiliaryNavigationBarViewController(0);
  objc_msgSendSuper2(&v6, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v2, "setBackgroundColor:", v3);

    UIHostingController.safeAreaRegions.setter(0);
    v4 = objc_msgSend(v0, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "setUserInteractionEnabled:", v0[qword_32B588]);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_217DC0(void *a1)
{
  id v1;

  v1 = a1;
  sub_217CD4();

}

void sub_217DF4()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.CardAuxiliaryNavigationBarViewController", 52, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_217E20()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.CardAuxiliaryNavigationBarViewController", 52, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_217E4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[6];

  v114 = a1;
  v113 = type metadata accessor for CardAuxiliaryNavigationBarView.BackgroundViewModifier(0);
  __chkstk_darwin(v113);
  v112 = (uint64_t *)((char *)&v91 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v93 = type metadata accessor for CardAuxiliaryNavigationBarView(0);
  __chkstk_darwin(v93);
  v4 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_5C154(&qword_32B688);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_5C154(&qword_32B690);
  __chkstk_darwin(v94);
  v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_5C154(&qword_32B698);
  __chkstk_darwin(v97);
  v92 = (uint64_t)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_5C154(&qword_32B6A0);
  __chkstk_darwin(v99);
  v98 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5C154(&qword_32B6A8);
  __chkstk_darwin(v102);
  v100 = (uint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_32B6B0);
  v105 = *(_QWORD *)(v12 - 8);
  v106 = v12;
  __chkstk_darwin(v12);
  v101 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5C154(&qword_32B6B8);
  __chkstk_darwin(v104);
  v103 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_32B6C0);
  v110 = *(_QWORD *)(v15 - 8);
  v111 = v15;
  __chkstk_darwin(v15);
  v107 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5C154(&qword_32B6C8);
  __chkstk_darwin(v109);
  v108 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5C154(&qword_32A8D8);
  Bindable.wrappedValue.getter(v115);
  sub_1FC1A8(v115[0], (uint64_t)v4);
  v18 = v1;
  Bindable.wrappedValue.getter(v115);
  v19 = v115[0];
  KeyPath = swift_getKeyPath(&unk_268EF8);
  v115[0] = v19;
  v21 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, KeyPath, v21);
  swift_release(KeyPath);
  v22 = *(_QWORD *)(v19 + 24);
  swift_retain(v22);
  swift_release(v19);
  v23 = type metadata accessor for BaseObjectGraph(0);
  v91 = v23;
  v24 = sub_648E0(&qword_32B6D0, type metadata accessor for CardAuxiliaryNavigationBarView, (uint64_t)&unk_2676E0);
  View.actionDispatcher<A>(from:)(v22, v93, v23, v24);
  swift_release(v22);
  sub_6685C((uint64_t)v4, type metadata accessor for CardAuxiliaryNavigationBarView);
  v25 = swift_getKeyPath(&unk_268F20);
  Bindable.wrappedValue.getter(v115);
  v26 = v115[0];
  v27 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v26;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v27, v21);
  swift_release(v27);
  v28 = *(_QWORD *)(v26 + 24);
  swift_retain(v28);
  swift_release(v26);
  v29 = type metadata accessor for BATracker(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v115, v29, v29);
  swift_release(v28);
  v30 = v115[0];
  v31 = v95;
  v32 = v96;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v8, v6, v96);
  v33 = (uint64_t *)&v8[*(int *)(v94 + 36)];
  *v33 = v25;
  v33[1] = v30;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
  Bindable.wrappedValue.getter(v115);
  v34 = v115[0];
  v35 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v34;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v35, v21);
  swift_release(v35);
  v36 = *(_QWORD *)(v34 + 24);
  swift_retain(v36);
  swift_release(v34);
  BaseObjectGraph.inject<A>(_:)(v115, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  LOBYTE(v35) = v115[0];
  v37 = swift_getKeyPath(&unk_268F50);
  v38 = v92;
  sub_5E1A4((uint64_t)v8, v92, &qword_32B690);
  swift_release(v36);
  v39 = v38 + *(int *)(v97 + 36);
  *(_QWORD *)v39 = v37;
  *(_BYTE *)(v39 + 8) = v35;
  sub_5E09C((uint64_t)v8, &qword_32B690);
  Bindable.wrappedValue.getter(v115);
  v40 = v115[0];
  v41 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v40;
  v42 = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v41, v21);
  swift_release(v41);
  v43 = *(_QWORD *)(v40 + 24);
  swift_retain(v43);
  swift_release(v40);
  v44 = swift_getKeyPath(&unk_268F78);
  v45 = sub_5C154(&qword_3228D0);
  inject<A, B>(_:from:)(v115, v45, v43, v45, v91);
  v46 = (uint64_t)v98;
  v47 = (uint64_t *)&v98[*(int *)(v99 + 36)];
  sub_5E0D8((uint64_t)v115, (uint64_t)(v47 + 1));
  *v47 = v44;
  sub_5E1A4(v38, v46, &qword_32B698);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v115);
  swift_release(v43);
  sub_5E09C(v38, &qword_32B698);
  v48 = v18;
  Bindable.wrappedValue.getter(v115);
  v49 = v115[0];
  v50 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v49;
  v51 = v42;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v50, v42);
  swift_release(v50);
  v52 = *(_QWORD *)(v49 + 24);
  swift_retain(v52);
  swift_release(v49);
  v53 = v100;
  sub_215340(&qword_32B6A0, &qword_32B6A8, (uint64_t)sub_21AA80, v100);
  swift_release(v52);
  sub_5E09C(v46, &qword_32B6A0);
  Bindable.wrappedValue.getter(v115);
  v54 = v115[0];
  v55 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v54;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v55, v51);
  swift_release(v55);
  v56 = *(_QWORD *)(v54 + 24);
  swift_retain(v56);
  swift_release(v54);
  v57 = sub_21A620();
  v58 = v101;
  View.localizer(from:)(v56, v102, v57);
  swift_release(v56);
  sub_5E09C(v53, &qword_32B6A8);
  v59 = swift_getKeyPath(&unk_268FA0);
  Bindable.wrappedValue.getter(v115);
  v60 = v115[0];
  v61 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v60;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v61, v51);
  swift_release(v61);
  v62 = *(_QWORD *)(v60 + 24);
  swift_retain(v62);
  swift_release(v60);
  v63 = sub_5C154(&qword_31FE88);
  BaseObjectGraph.inject<A>(_:)(v115, v63, v63);
  swift_release(v62);
  v64 = (uint64_t)v103;
  v65 = v104;
  v66 = (uint64_t *)&v103[*(int *)(v104 + 36)];
  sub_5E1A4((uint64_t)v115, (uint64_t)(v66 + 1), &qword_3240F0);
  *v66 = v59;
  v68 = v105;
  v67 = v106;
  (*(void (**)(uint64_t, char *, uint64_t))(v105 + 16))(v64, v58, v106);
  sub_5E09C((uint64_t)v115, &qword_3240F0);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v58, v67);
  Bindable.wrappedValue.getter(v115);
  v69 = v115[0];
  v70 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v69;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v70, v51);
  swift_release(v70);
  v71 = *(_QWORD *)(v69 + 24);
  swift_retain(v71);
  swift_release(v69);
  v72 = sub_21A890();
  v73 = v107;
  View.profileRestrictions(from:)(v71, v65, v72);
  swift_release(v71);
  sub_5E09C(v64, &qword_32B6B8);
  v74 = *(_QWORD *)(v48
                  + *(int *)(type metadata accessor for CardAuxiliaryNavigationBarViewController.DependencyInjectionView(0)
                           + 20));
  Bindable.wrappedValue.getter(v115);
  v75 = v115[0];
  v76 = swift_getKeyPath(&unk_268FD0);
  v115[0] = v75;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v76, v51);
  swift_release(v76);
  LOBYTE(v62) = *(_BYTE *)(v75 + 16);
  swift_release(v75);
  v78 = (uint64_t)v112;
  v77 = v113;
  *v112 = v74;
  *(_BYTE *)(v78 + 8) = v62;
  v79 = (_QWORD *)(v78 + *(int *)(v77 + 24));
  *v79 = swift_getKeyPath(&unk_268FF8);
  v80 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v79, v80, 0);
  v81 = v110;
  v82 = v111;
  v83 = (uint64_t)v108;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v108, v73, v111);
  v84 = v109;
  sub_21A948(v78, v83 + *(int *)(v109 + 36));
  v85 = *(void (**)(char *, uint64_t))(v81 + 8);
  swift_retain(v74);
  v85(v73, v82);
  Bindable.wrappedValue.getter(v115);
  v86 = v115[0];
  v87 = swift_getKeyPath(&unk_268EF8);
  v115[0] = v86;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v115, v87, v51);
  swift_release(v87);
  v88 = *(_QWORD *)(v86 + 24);
  swift_retain(v88);
  swift_release(v86);
  v89 = sub_21A98C();
  View.imageResourceProvider(from:)(v88, v84, v89);
  swift_release(v88);
  return sub_5E09C(v83, &qword_32B6C8);
}

double sub_218954(char *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  uint64_t v9;

  v2 = *(_QWORD *)&a1[qword_32B578];
  KeyPath = swift_getKeyPath(&unk_269050);
  v9 = v2;
  v4 = sub_648E0((unint64_t *)&qword_322200, type metadata accessor for CardAuxiliaryNavigationBarBackgroundViewModel, (uint64_t)&unk_25BA9C);
  v5 = a1;
  swift_retain(v2);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v6 = *(double *)(v2 + 16);
  swift_release(v2);
  v7 = UIEdgeInsets.init(edges:inset:)(1, v6);

  return v7;
}

id sub_218A48(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = sub_218A78();

  return v2;
}

id sub_218A78()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id result;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;

  v1 = v0;
  v2 = sub_110E80();
  v3 = *(_QWORD *)&v0[qword_32B578];
  swift_retain(v3);
  v4 = sub_B03C4();
  swift_release(v3);
  v5 = objc_allocWithZone((Class)type metadata accessor for CardAuxiliaryNavigationBarViewController(0));
  swift_retain(v2);
  swift_retain(v4);
  v6 = (void *)sub_21AD84(v2, (uint64_t)v4);
  swift_release(v2);
  swift_release(v4);
  result = objc_msgSend(v6, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = result;
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = result;
  objc_msgSend(result, "frame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  objc_msgSend(v8, "setFrame:", v11, v13, v15, v17);
  result = objc_msgSend(v6, "view");
  if (result)
  {
    v18 = result;
    swift_release(v2);
    swift_release(v4);

    return v18;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_218BEC(char *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)&a1[qword_32B570];
  KeyPath = swift_getKeyPath(&unk_269118);
  v8 = v2;
  v4 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  v5 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v6 = *(unsigned __int8 *)(v2 + 18);

  return v6;
}

uint64_t sub_218C98(char *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char *v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;

  v5 = *(_QWORD *)&a1[qword_32B570];
  KeyPath = swift_getKeyPath(&unk_269118);
  v10[2] = v5;
  v11 = a3;
  v12 = v5;
  v7 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  v8 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_21AB50, v10, (char *)&type metadata for () + 8, v7);

  return swift_release(KeyPath);
}

double sub_218D64(char *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  char *v5;
  double v6;
  uint64_t v8;

  v2 = *(_QWORD *)&a1[qword_32B570];
  KeyPath = swift_getKeyPath(&unk_2690F0);
  v8 = v2;
  v4 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  v5 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v6 = *(double *)(v2 + 88);

  return v6;
}

uint64_t sub_218E18(char *a1, double a2)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char *v7;
  _QWORD v9[5];
  uint64_t v10;

  v4 = *(_QWORD *)&a1[qword_32B570];
  KeyPath = swift_getKeyPath(&unk_2690F0);
  v9[2] = v4;
  *(double *)&v9[3] = a2;
  v10 = v4;
  v6 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  v7 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_21AB2C, v9, (char *)&type metadata for () + 8, v6);

  return swift_release(KeyPath);
}

uint64_t sub_218EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;
  _BYTE v13[40];
  _QWORD v14[6];

  type metadata accessor for MResource(0);
  v3 = sub_2164B0(a1);
  v4 = type metadata accessor for MAsset(0);
  v5 = (void *)static MResource.from<A>(response:)(v3, v4);
  v6 = swift_bridgeObjectRelease(v3);
  static ContentInfoUtilities.assetInfo(storeAsset:)(v14, v5, v6);
  v7 = *(_QWORD *)(v1 + qword_32B570);
  sub_5E1A4((uint64_t)v14, (uint64_t)v13, &qword_320940);
  KeyPath = swift_getKeyPath(&unk_2690C8);
  __chkstk_darwin(KeyPath);
  v11[2] = v7;
  v11[3] = v13;
  v12 = v7;
  v9 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_21AB0C, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  sub_5E09C((uint64_t)v13, &qword_320940);

  return sub_5E09C((uint64_t)v14, &qword_320940);
}

double sub_2191E0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  double result;

  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for String, &type metadata for AnyHashable, &protocol witness table for String);
  v5 = a1;
  sub_218EE4(v4);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

uint64_t sub_219244(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  _QWORD *v17;
  uint64_t v18;
  void *v19;

  v3 = type metadata accessor for Dependency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(_QWORD **)(v1 + qword_32B570);
  KeyPath = swift_getKeyPath(&unk_268EF8);
  v19 = v7;
  v9 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v7[3];
  v11 = type metadata accessor for BATracker(0);
  v19 = a1;
  swift_retain(v10);
  v12 = a1;
  Dependency.init<A>(satisfying:with:)(v11, &v19, v11);
  v13 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v6);
  swift_release(v10);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  v14 = swift_getKeyPath(&unk_268EF8);
  v17 = v7;
  v18 = v13;
  v19 = v7;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, v14, sub_21B2C8, v16, (char *)&type metadata for () + 8, v9);
  swift_release(v14);
  return swift_release(v13);
}

void sub_2193D8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_219244(v4);

}

uint64_t sub_21942C(char *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)&a1[qword_32B570];
  KeyPath = swift_getKeyPath(&unk_2690A0);
  v8 = v2;
  v4 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  v5 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v6 = *(unsigned __int8 *)(v2 + 72);

  return v6;
}

uint64_t sub_2194D8(char *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char *v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;

  v5 = *(_QWORD *)&a1[qword_32B570];
  KeyPath = swift_getKeyPath(&unk_2690A0);
  v10[2] = v5;
  v11 = a3;
  v12 = v5;
  v7 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  v8 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_21AAE8, v10, (char *)&type metadata for () + 8, v7);

  return swift_release(KeyPath);
}

uint64_t sub_2195A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  if (a2 == 0xD000000000000024 && a3 == 0x8000000000275180
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0xD000000000000024, 0x8000000000275180, 0),
        (result & 1) != 0))
  {
    v6 = *(_QWORD *)(v3 + qword_32B570);
    v7 = type metadata accessor for BubbleTipModel(0);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v8 = BubbleTipModel.init(request:shouldAutomaticallyReportMetrics:preferredAppearance:)(a1, 1, 0);
    KeyPath = swift_getKeyPath(&unk_269078);
    __chkstk_darwin(KeyPath);
    v11[2] = v6;
    v11[3] = v8;
    v12 = v6;
    v10 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_21AAC8, v11, (char *)&type metadata for () + 8, v10);
    swift_release(KeyPath);
    return swift_release(v8);
  }
  return result;
}

double sub_2196FC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  double result;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v8 = v7;
  v9 = a3;
  v10 = a1;
  sub_2195A4(v9, v6, v8);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

void sub_219760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  NSString v4;
  id v5;

  v1 = v0 + qword_32B568;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + qword_32B568);
  if (Strong)
  {
    v3 = *(_QWORD *)(v0 + qword_32B570);
    v5 = (id)Strong;
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "removeObserver:forTrigger:", v3, v4);

    swift_unknownObjectWeakAssign(v1, 0);
  }
}

void sub_219810(void *a1)
{
  id v1;

  v1 = a1;
  sub_219760();

}

void sub_219844(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  if (a1)
  {
    swift_unknownObjectWeakAssign(v1 + qword_32B568, a1);
    v3 = *(_QWORD *)(v1 + qword_32B570);
    v4 = a1;
    oslog = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "addObserver:forTrigger:", v3);

  }
  else
  {
    if (qword_31E578 != -1)
      swift_once(&qword_31E578, sub_126640);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_5240C(v5, (uint64_t)qword_325010);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_0, oslog, v7, "Attempted to resume and rebuild with nil trigger state manager", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
  }

}

void sub_219980(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  sub_219844(a3);

}

void sub_2199D8(void *a1, id a2)
{
  char *v2;
  char *v3;
  id v6;
  void *v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  id v20;
  double v21;
  double v22;
  unint64_t v23;
  __int128 v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  double v38;
  double v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  float64x2_t *v43;
  uint64_t KeyPath;
  uint64_t v45;
  double v46;
  float64x2_t v47;
  double v48;
  uint64_t v49;
  _QWORD v50[4];
  float64x2_t v51;
  float64x2_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  double v56;
  double v57;
  __int128 v58;
  double v59;
  uint64_t v60;
  double v61;

  v3 = v2;
  v6 = objc_msgSend(a2, "configuration");
  if (!v6)
  {
    if ((static Capabilities.isInternalBuild.getter(0) & 1) != 0)
      return;
    if (qword_31E578 == -1)
      goto LABEL_10;
    goto LABEL_23;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "cardsCanExpand");
  objc_msgSend(v7, "cardCornerRadius");
  v10 = v9;
  objc_msgSend(v7, "auxiliaryNavigationBarVisibilityOffset");
  v12 = v11;
  v13 = objc_msgSend(v7, "environment");
  if (!v13)
    goto LABEL_25;
  v14 = v13;
  objc_msgSend(v13, "defaultStatusBarHeight");
  v16 = v15;

  objc_msgSend(v7, "auxiliaryNavigationBarBlurBleedHeight");
  v18 = v17;
  if (!v8)
  {
    v37 = objc_msgSend(a1, "scrollView");
    objc_msgSend(v37, "contentOffset");
    v39 = v38;

    *(_QWORD *)&v40 = 1.0;
    if (v12 <= 0.0)
    {
LABEL_16:
      v55 = v40;
      objc_msgSend(v3, "navigationBarHeight");
      *(double *)&v32 = v18 + *(double *)&v31;
LABEL_17:
      *(double *)&v31 = v18 * 0.5;
      v53 = v32;
      v54 = v31;
      v58 = (unint64_t)v32;
      v59 = v18 * 0.5;
      v60 = v55;
      v61 = v10;
      v42 = qword_32B578;
      v43 = *(float64x2_t **)&v3[qword_32B578];
      KeyPath = swift_getKeyPath(&unk_269050);
      v57 = *(double *)&v43;
      v45 = sub_648E0((unint64_t *)&qword_322200, type metadata accessor for CardAuxiliaryNavigationBarBackgroundViewModel, (uint64_t)&unk_25BA9C);
      swift_retain(v43);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v57, KeyPath, v45);
      swift_release(KeyPath);
      v46 = v43[3].f64[0];
      v52 = v43[1];
      v51 = v43[2];
      swift_release(v43);
      *(_QWORD *)&v47.f64[0] = v54;
      *(_QWORD *)&v47.f64[1] = v55;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)(unint64_t)v53, v52), (int32x4_t)vceqq_f64(v47, v51))), 0xFuLL))) & 1) != 0&& v10 == v46)
      {

      }
      else
      {
        v48 = *(double *)&v3[v42];
        v49 = swift_getKeyPath(&unk_269050);
        __chkstk_darwin(v49);
        *(double *)&v50[2] = v48;
        v50[3] = &v58;
        v57 = v48;
        swift_retain(*(_QWORD *)&v48);
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v57, v49, sub_21AAA8, v50, (char *)&type metadata for () + 8, v45);
        swift_release(*(_QWORD *)&v48);

        swift_release(v49);
      }
      return;
    }
    v56 = v39;
    if (v12 >= 0.0)
    {
      *(_QWORD *)&v58 = 0;
      *((double *)&v58 + 1) = v12;
      v41 = sub_1BDCD4();
      Comparable.clamped(_:)(&v57, &v58, &type metadata for CGFloat, v41);
      *(double *)&v40 = v57 / v12;
      goto LABEL_16;
    }
    __break(1u);
LABEL_25:
    __break(1u);
    return;
  }
  v19 = objc_msgSend(a1, "currentState");
  v20 = objc_msgSend(a1, "scrollView");
  objc_msgSend(v19, "cardViewController:cardYPositionInScreenFromCardScrollView:cardData:", a1, v20, a2);
  v22 = v21;

  v56 = v22;
  if (v12 >= 0.0)
  {
    *(_QWORD *)&v58 = 0;
    *((double *)&v58 + 1) = v12;
    v23 = sub_1BDCD4();
    Comparable.clamped(_:)(&v57, &v58, &type metadata for CGFloat, v23);
    *(double *)&v24 = (v12 - v57) / v12;
    if (v12 <= 0.0)
      *(double *)&v24 = 1.0;
    v55 = v24;
    v25 = objc_msgSend(a1, "scrollView");
    objc_msgSend(v25, "contentOffset");
    v27 = v26;

    objc_msgSend(v7, "cardExpandedTopOffset");
    v56 = v27 / -v28;
    v58 = xmmword_264470;
    Comparable.clamped(_:)(&v57, &v58, &type metadata for CGFloat, v23);
    v29 = v57;
    v30 = v16 * *(double *)&v55;
    objc_msgSend(v3, "navigationBarHeight");
    *(double *)&v32 = v30 + v18 + *(double *)&v31;
    v18 = v18 - v30;
    v10 = v10 - v10 * v29;
    goto LABEL_17;
  }
  __break(1u);
LABEL_23:
  swift_once(&qword_31E578, sub_126640);
LABEL_10:
  v33 = type metadata accessor for Logger(0);
  v34 = sub_5240C(v33, (uint64_t)qword_325010);
  *(_QWORD *)&v55 = Logger.logObject.getter(v34);
  v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v55, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_0, (os_log_t)v55, v35, "Cannot position background without configuration", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

}

void sub_219F4C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;

  v6 = a3;
  swift_unknownObjectRetain(a4);
  v7 = a1;
  sub_2199D8(v6, a4);

  swift_unknownObjectRelease(a4);
}

uint64_t sub_219FB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_7BFF8;
  return v6();
}

uint64_t sub_21A00C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_7BFF8;
  return v7();
}

uint64_t method lookup function for CardAuxiliaryNavigationBarManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CardAuxiliaryNavigationBarManager);
}

uint64_t dispatch thunk of CardAuxiliaryNavigationBarManager.createViewController(for:shouldReportFigaro:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((char *)&stru_68.size + (swift_isaMask & *v2));
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_177F9C;
  return v9(a1, a2);
}

uint64_t dispatch thunk of CardAuxiliaryNavigationBarManager.viewControllerWhenAvailable(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of CardAuxiliaryNavigationBarManager.viewControllerIfAvailable()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reloff + (swift_isaMask & *v0)))();
}

uint64_t sub_21A124(uint64_t a1)
{
  _QWORD v2[6];

  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = &unk_268E58;
  v2[5] = "\b";
  return swift_initClassMetadata2(a1, 0, 6, v2, a1 + qword_32B598);
}

uint64_t sub_21A188()
{
  return type metadata accessor for CardAuxiliaryNavigationBarViewController(0);
}

uint64_t *sub_21A190(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5C154(&qword_32A8D8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_21A21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_21A264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_21A2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_21A338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_21A398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_5C154(&qword_32A8D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_21A400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_21A40C);
}

uint64_t sub_21A40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5C154(&qword_32A8D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_21A48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_21A498);
}

uint64_t sub_21A498(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5C154(&qword_32A8D8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarViewController.DependencyInjectionView(uint64_t a1)
{
  return sub_64960(a1, qword_32B650, (uint64_t)&nominal type descriptor for CardAuxiliaryNavigationBarViewController.DependencyInjectionView);
}

void sub_21A528(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_21A59C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_21A59C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_32A948)
  {
    v2 = type metadata accessor for CardAuxiliaryNavigationBarViewModel(255);
    v3 = type metadata accessor for Bindable(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_32A948);
  }
}

uint64_t sub_21A5F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BAAA8, 1);
}

unint64_t sub_21A620()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B6D8;
  if (!qword_32B6D8)
  {
    v1 = sub_667D0(&qword_32B6A8);
    sub_21A6A4();
    sub_67060(&qword_3228F0, &qword_3228E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B6D8);
  }
  return result;
}

unint64_t sub_21A6A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B6E0;
  if (!qword_32B6E0)
  {
    v1 = sub_667D0(&qword_32B6A0);
    sub_21A728();
    sub_67060(&qword_3228E0, &qword_3228D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B6E0);
  }
  return result;
}

unint64_t sub_21A728()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B6E8;
  if (!qword_32B6E8)
  {
    v1 = sub_667D0(&qword_32B698);
    sub_21A7AC();
    sub_67060(&qword_324058, &qword_324060, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B6E8);
  }
  return result;
}

unint64_t sub_21A7AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[3];

  result = qword_32B6F0;
  if (!qword_32B6F0)
  {
    v1 = sub_667D0(&qword_32B690);
    v2[0] = type metadata accessor for CardAuxiliaryNavigationBarView(255);
    v2[1] = type metadata accessor for BaseObjectGraph(255);
    v2[2] = sub_648E0(&qword_32B6D0, type metadata accessor for CardAuxiliaryNavigationBarView, (uint64_t)&unk_2676E0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(from:)>>, 1);
    sub_67060(&qword_32B6F8, &qword_32B700, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B6F0);
  }
  return result;
}

unint64_t sub_21A890()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_32B708;
  if (!qword_32B708)
  {
    v1 = sub_667D0(&qword_32B6B8);
    v2[0] = sub_667D0(&qword_32B6A8);
    v2[1] = sub_21A620();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.localizer(from:)>>, 1);
    sub_67060(&qword_324090, &qword_324098, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B708);
  }
  return result;
}

uint64_t sub_21A948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CardAuxiliaryNavigationBarView.BackgroundViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_21A98C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_32B710;
  if (!qword_32B710)
  {
    v1 = sub_667D0(&qword_32B6C8);
    v2[0] = sub_667D0(&qword_32B6B8);
    v2[1] = sub_21A890();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 1);
    sub_648E0(&qword_32B718, type metadata accessor for CardAuxiliaryNavigationBarView.BackgroundViewModifier, (uint64_t)&unk_267690);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B710);
  }
  return result;
}

uint64_t sub_21AA38()
{
  uint64_t v0;

  return sub_110700(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_21AA5C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_21AA80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_B9610(v1, a1);
}

uint64_t sub_21AA88()
{
  uint64_t v0;

  return sub_11095C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_21AAA8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = sub_B03B0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_21AAC8()
{
  uint64_t v0;

  return sub_110D1C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_21AAE8()
{
  uint64_t v0;

  return sub_110BD4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_21AB0C()
{
  uint64_t v0;

  return sub_110B24(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_21AB2C()
{
  uint64_t v0;

  return sub_110DC0(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_21AB50()
{
  uint64_t v0;

  return sub_1108E4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_21AB6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_21AB80(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _BYTE v18[24];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = swift_allocObject(&unk_2F55F8, 24, 7);
  *(_QWORD *)(v8 + 16) = a2;
  sub_14065C();
  v9 = _Block_copy(a2);
  *v7 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    a2 = sub_579C8(0, a2[2] + 1, 1, a2);
    *a1 = a2;
    goto LABEL_5;
  }
  Strong = swift_unknownObjectWeakLoadStrong((char *)a1 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_wrappedViewController);
  if (Strong)
  {
    v12 = (void *)Strong;
    ((void (*)(_QWORD *, uint64_t))a2[2])(a2, Strong);
    swift_release(v8);

    return;
  }
  v10 = swift_allocObject(&unk_2F5620, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_21B150;
  *(_QWORD *)(v10 + 24) = v8;
  a1 = (_QWORD *)((char *)a1 + OBJC_IVAR___BSUICardAuxiliaryNavigationBarManager_pendingClosures);
  swift_beginAccess(a1, v18, 33, 0);
  a2 = (_QWORD *)*a1;
  swift_retain(v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  *a1 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_9;
LABEL_5:
  v15 = a2[2];
  v14 = a2[3];
  if (v15 >= v14 >> 1)
  {
    a2 = sub_579C8((_QWORD *)(v14 > 1), v15 + 1, 1, a2);
    *a1 = a2;
  }
  a2[2] = v15 + 1;
  v16 = &a2[2 * v15];
  v16[4] = sub_21B284;
  v16[5] = v10;
  swift_endAccess(v18);
  swift_release(v8);
}

uint64_t sub_21AD84(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  v33 = type metadata accessor for CardAuxiliaryNavigationBarViewController.DependencyInjectionView(0);
  __chkstk_darwin(v33);
  v32 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_31FE40);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v2[qword_32B568];
  swift_unknownObjectWeakInit(&v2[qword_32B568]);
  swift_unknownObjectWeakInit(&v2[qword_32B590]);
  swift_unknownObjectWeakAssign(v9, 0);
  v10 = type metadata accessor for NavigationProvider();
  v11 = swift_allocObject(v10, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16);
  *(_QWORD *)&v2[qword_32B580] = v11;
  *(_QWORD *)&v2[qword_32B570] = a1;
  v31 = a2;
  *(_QWORD *)&v2[qword_32B578] = a2;
  KeyPath = swift_getKeyPath(&unk_268EF8);
  v30 = a1 + OBJC_IVAR____TtC11BookStoreUI35CardAuxiliaryNavigationBarViewModel___observationRegistrar;
  v37[0] = a1;
  v13 = sub_648E0((unint64_t *)&qword_3247C8, type metadata accessor for CardAuxiliaryNavigationBarViewModel, (uint64_t)&unk_25E980);
  swift_retain_n(a1, 2);
  v14 = v2;
  swift_retain(a2);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v37, KeyPath, v13);
  swift_release(KeyPath);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = sub_5C154(&qword_31F010);
  v17 = type metadata accessor for Dependency(0);
  v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_255F00;
  v19 = type metadata accessor for BaseObjectGraph(0);
  swift_retain(v15);
  ActionDispatcher.init()(v19);
  Dependency.init<A>(satisfying:with:)(v6, v8, v6);
  v20 = sub_5C154(&qword_31FE78);
  v37[3] = type metadata accessor for NativeIntentDispatcher(0);
  v37[4] = &protocol witness table for NativeIntentDispatcher;
  sub_668BC(v37);
  NativeIntentDispatcher.init()(v21);
  Dependency.init<A>(satisfying:with:)(v20, v37, v20);
  v37[0] = v18;
  v22 = sub_5C154((uint64_t *)&unk_31FEC0);
  v23 = sub_67060((unint64_t *)&qword_31FAC0, (uint64_t *)&unk_31FEC0, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(v37, v22, v23);
  swift_bridgeObjectRelease(v18);
  swift_release(v15);
  v25 = swift_getKeyPath(&unk_268EF8);
  v35 = a1;
  v36 = v24;
  v37[0] = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v37, v25, sub_21B2C8, v34, (char *)&type metadata for () + 8, v13);
  swift_release(a1);
  swift_release(v25);
  swift_release(v24);
  v14[qword_32B588] = 0;

  v26 = type metadata accessor for CardAuxiliaryNavigationBarViewModel(0);
  swift_retain(a1);
  v27 = v31;
  swift_retain(v31);
  v28 = v32;
  Bindable<A>.init(wrappedValue:)(a1, v26, v13);
  *(_QWORD *)&v28[*(int *)(v33 + 20)] = v27;
  return UIHostingController.init(rootView:)(v28);
}

uint64_t sub_21B12C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_21B150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_getObjectType();
  return sub_21AB6C(a1, v3);
}

uint64_t sub_21B180()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_21B1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_32B724);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_64780;
  return ((uint64_t (*)(uint64_t, char, uint64_t, uint64_t))((char *)&dword_32B720 + dword_32B720))(v2, v3, v5, v4);
}

uint64_t sub_21B238()
{
  _QWORD v1[2];

  v1[0] = sub_667D0(&qword_32B6C8);
  v1[1] = sub_21A98C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 1);
}

double sub_21B28C()
{
  return sub_21AAA8();
}

uint64_t sub_21B2A0()
{
  return sub_21AAC8();
}

uint64_t sub_21B2B4()
{
  return sub_21AAE8();
}

uint64_t sub_21B2C8()
{
  return sub_21AA88();
}

uint64_t sub_21B2DC()
{
  return sub_21AB0C();
}

uint64_t sub_21B2F0()
{
  return sub_21AB2C();
}

uint64_t sub_21B304()
{
  return sub_21AB50();
}

uint64_t sub_21B318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

void sub_21B320(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[11];

  v10[0] = "(";
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v10[2] = &unk_2691D0;
    sub_8C25C(319, &qword_32B7C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      v10[4] = &unk_2691E8;
      v10[5] = &unk_2691E8;
      v10[6] = &unk_2691E8;
      v10[7] = &unk_2691E8;
      v10[8] = &unk_269200;
      sub_21D538(319);
      if (v7 <= 0x3F)
      {
        v10[9] = *(_QWORD *)(v6 - 8) + 64;
        sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v10[10] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 0, 11, v10, a1 + 32);
        }
      }
    }
  }
}

uint64_t sub_21B43C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t __n;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  unint64_t v78;

  v73 = *(_QWORD *)(a3 + 16);
  v3 = *(_QWORD *)(v73 - 8);
  v4 = *(_DWORD *)(v3 + 80);
  v5 = v4;
  v77 = *(_QWORD *)(v3 + 64);
  v74 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v74 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7 & 0xF8;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = *(_DWORD *)(v11 + 80);
  v12 = *(_DWORD *)(v11 + 84);
  v14 = v13 & 0xF8;
  v75 = v11;
  v15 = *(_QWORD *)(v11 + 64);
  if (v12)
    v16 = v15;
  else
    v16 = v15 + 1;
  __n = v16;
  v72 = v10;
  if (v16 <= 8)
    v16 = 8;
  v78 = v16;
  v17 = *(_QWORD *)(type metadata accessor for SizeConstants(0) - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = v18 & 0xF8 | 7;
  if (*(_QWORD *)(v17 + 64) <= 8uLL)
    v20 = 8;
  else
    v20 = *(_QWORD *)(v17 + 64);
  v21 = v8 | v14 | v19 | v4;
  v22 = (v7 | v13 | v18 | v4) & 0x100000;
  v23 = v21 == 7 && v22 == 0;
  if (!v23
    || (v24 = v8 | 7,
        v25 = v9 + 7,
        v26 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8,
        v27 = ~v14 & 0xFFFFFFFFFFFFFFF8,
        v28 = v14 + 23,
        v20
      + ((v78
        + v19
        + 1
        + ((v14
          + 23
          + ((((((((v26 + ((v24 + v77 + ((v5 + 40) & ~v5) + 1) & ~v24) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)) & v27)) & ~v19)
      + 1 > 0x18))
  {
    v56 = *a2;
    *(_QWORD *)a1 = *a2;
    v57 = v56 + ((v21 + 16) & ~v21);
LABEL_35:
    swift_retain(v56);
    return v57;
  }
  v68 = v19;
  v69 = v78 + v19 + 1;
  v65 = v17;
  v70 = v20;
  v29 = v26 + 8;
  v30 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 24) = v30;
  v66 = v28;
  v67 = v27;
  (**(void (***)(uint64_t, uint64_t *))(v30 - 8))(a1, a2);
  v31 = (a1 + v5 + 40) & ~v5;
  v32 = ((unint64_t)a2 + v5 + 40) & ~v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v31, v32, v73);
  *(_BYTE *)(v31 + v77) = *(_BYTE *)(v32 + v77);
  v33 = (v31 + v77 + v24 + 1) & ~v24;
  v34 = (v32 + v77 + v24 + 1) & ~v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v33, v34, v74);
  v35 = *(_QWORD *)((v25 + v34) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v25 + v33) & 0xFFFFFFFFFFFFF8) = v35;
  v36 = v33 + v29;
  v37 = v34 + v29;
  *(_BYTE *)v36 = *(_BYTE *)(v34 + v29);
  v38 = *(_QWORD *)(v34 + v29 + 8);
  *(_QWORD *)(v36 + 8) = v38;
  v39 = (v33 + v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v39 = *(_BYTE *)v40;
  v41 = *(_QWORD *)(v40 + 8);
  *(_QWORD *)(v39 + 8) = v41;
  v42 = (_QWORD *)((v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)((v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v43;
  v44 = v43[1];
  v42[1] = v44;
  v45 = (_QWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
  v46 = (_QWORD *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v45 = *v46;
  v47 = v46[1];
  v45[1] = v47;
  v48 = (_QWORD *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
  v49 = (uint64_t *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
  v50 = *v49;
  *v48 = *v49;
  v51 = v49[1];
  v48[1] = v51;
  v52 = (_QWORD *)(((unint64_t)v48 + v66) & v67);
  v53 = (uint64_t *)(((unint64_t)v49 + v66) & v67);
  v54 = *((unsigned __int8 *)v53 + v78);
  swift_retain(v35);
  swift_retain(v38);
  swift_retain(v41);
  swift_retain(v44);
  swift_retain(v47);
  swift_bridgeObjectRetain(v50);
  swift_retain(v51);
  if (v54 >= 2)
  {
    if (v78 <= 3)
      v55 = v78;
    else
      v55 = 4;
    __asm { BR              X11 }
  }
  v58 = ~v68;
  if (v54 == 1)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v75 + 48))(v53, 1, v72))
    {
      memcpy(v52, v53, __n);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v75 + 16))(v52, v53, v72);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v52, 0, 1, v72);
    }
    *((_BYTE *)v52 + v78) = 1;
  }
  else
  {
    v59 = *v53;
    *v52 = *v53;
    *((_BYTE *)v52 + v78) = 0;
    swift_retain(v59);
  }
  v60 = (_QWORD *)(((unint64_t)v52 + v69) & v58);
  v61 = (uint64_t *)(((unint64_t)v53 + v69) & v58);
  v62 = *((unsigned __int8 *)v61 + v70);
  if (v62 >= 2)
  {
    if (v70 <= 3)
      v63 = v70;
    else
      v63 = 4;
    __asm { BR              X12 }
  }
  v57 = a1;
  if (v62 != 1)
  {
    v56 = *v61;
    *v60 = *v61;
    *((_BYTE *)v60 + v70) = 0;
    goto LABEL_35;
  }
  (*(void (**)(_QWORD *))(v65 + 16))(v60);
  *((_BYTE *)v60 + v70) = 1;
  return v57;
}

uint64_t sub_21B970(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = (v6 + v9 + v5 + 1) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  v11 = *(_QWORD *)(v8 + 64) + 7;
  swift_release(*(_QWORD *)((v11 + v10) & 0xFFFFFFFFFFFFF8));
  v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + v10;
  swift_release(*(_QWORD *)(v12 + 16));
  v13 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v13 + 8));
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v14 + 8));
  v15 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v15 + 8));
  v16 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(*v16);
  swift_release(v16[1]);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 80) & 0xF8 | 7;
  v20 = (_QWORD *)(((unint64_t)v16 + v19 + 16) & ~v19);
  v21 = *(_QWORD *)(v18 + 64);
  if (!*(_DWORD *)(v18 + 84))
    ++v21;
  if (v21 <= 8)
    v22 = 8;
  else
    v22 = v21;
  v23 = *((unsigned __int8 *)v20 + v22);
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v20, 1, v17))
      (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  }
  else
  {
    swift_release(*v20);
  }
  v25 = *(_QWORD *)(type metadata accessor for SizeConstants(0) - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8 | 7;
  v27 = (_QWORD *)(((unint64_t)v20 + v22 + v26 + 1) & ~v26);
  v28 = *(_QWORD *)(v25 + 64);
  if (v28 <= 8)
    v28 = 8;
  v29 = *((unsigned __int8 *)v27 + v28);
  if (v29 >= 2)
  {
    if (v28 <= 3)
      v30 = v28;
    else
      v30 = 4;
    __asm { BR              X14 }
  }
  if (v29 == 1)
    return (*(uint64_t (**)(void))(v25 + 8))();
  else
    return swift_release(*v27);
}

uint64_t sub_21BC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  size_t __n;
  uint64_t v64;
  _QWORD *__dst;
  uint64_t *v66;
  uint64_t v67;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v67 = a1;
  v9 = (v8 + 40 + a1) & ~v8;
  v10 = (v8 + 40 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v9 + v11;
  v13 = (_BYTE *)(v10 + v11);
  *(_BYTE *)(v9 + v11) = *v13;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v17 = v16 + 8;
  v18 = v16 + 8 + v12;
  v19 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  v20 = v18 & v19;
  v21 = (unint64_t)&v13[v17] & v19;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(v18 & v19, v21, v14);
  v22 = *(_QWORD *)(v15 + 64) + 7;
  v23 = *(_QWORD *)((v22 + v21) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v22 + v20) & 0xFFFFFFFFFFFFF8) = v23;
  v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  v25 = v24 + v20;
  v26 = v24 + v21;
  *(_BYTE *)v25 = *(_BYTE *)v26;
  v27 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v25 + 8) = v27;
  v28 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  v30 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v28 + 8) = v30;
  v31 = (_QWORD *)((v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = v32[1];
  v31[1] = v33;
  v34 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = v35[1];
  v34[1] = v36;
  v37 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  v38 = (uint64_t *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v39 = *v38;
  *v37 = *v38;
  v40 = v38[1];
  v37[1] = v40;
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(_DWORD *)(v42 + 80) & 0xF8;
  v44 = ~v43 & 0xFFFFFFFFFFFFFFF8;
  v43 += 23;
  v64 = v41;
  __dst = (_QWORD *)(((unint64_t)v37 + v43) & v44);
  v45 = (uint64_t *)(((unint64_t)v38 + v43) & v44);
  if (*(_DWORD *)(v42 + 84))
    v46 = *(_QWORD *)(v42 + 64);
  else
    v46 = *(_QWORD *)(v42 + 64) + 1;
  __n = v46;
  if (v46 <= 8)
    v47 = 8;
  else
    v47 = v46;
  v66 = v45;
  v48 = *((unsigned __int8 *)v45 + v47);
  swift_retain(v23);
  swift_retain(v27);
  swift_retain(v30);
  swift_retain(v33);
  swift_retain(v36);
  swift_bridgeObjectRetain(v39);
  swift_retain(v40);
  if (v48 >= 2)
  {
    if (v47 <= 3)
      v49 = v47;
    else
      v49 = 4;
    __asm { BR              X11 }
  }
  if (v48 == 1)
  {
    v50 = __dst;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(v66, 1, v64))
    {
      memcpy(__dst, v66, __n);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v42 + 16))(__dst, v66, v64);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v64);
    }
    *((_BYTE *)__dst + v47) = 1;
  }
  else
  {
    v51 = *v66;
    v50 = __dst;
    *__dst = *v66;
    *((_BYTE *)__dst + v47) = 0;
    swift_retain(v51);
  }
  v52 = *(_QWORD *)(type metadata accessor for SizeConstants(0) - 8);
  v53 = *(_DWORD *)(v52 + 80) & 0xF8 | 7;
  v54 = v47 + v53 + 1;
  v55 = (_QWORD *)(((unint64_t)v50 + v54) & ~v53);
  v56 = (uint64_t *)(((unint64_t)v66 + v54) & ~v53);
  if (*(_QWORD *)(v52 + 64) <= 8uLL)
    v57 = 8;
  else
    v57 = *(_QWORD *)(v52 + 64);
  v58 = *((unsigned __int8 *)v56 + v57);
  if (v58 >= 2)
  {
    if (v57 <= 3)
      v59 = v57;
    else
      v59 = 4;
    __asm { BR              X13 }
  }
  if (v58 == 1)
  {
    (*(void (**)(_QWORD *))(v52 + 16))(v55);
    v60 = 1;
  }
  else
  {
    v61 = *v56;
    *v55 = *v56;
    swift_retain(v61);
    v60 = 0;
  }
  *((_BYTE *)v55 + v57) = v60;
  return v67;
}

_QWORD *sub_21C054(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;

  sub_65938(a1, a2);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 40) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 40) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = (_BYTE *)(v8 + v10);
  v12 = (_BYTE *)(v9 + v10);
  *v11 = *v12;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v16 = v15 + 8;
  v17 = (unint64_t)&v11[v15 + 8];
  v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  v19 = v17 & v18;
  v20 = (unint64_t)&v12[v16] & v18;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 24))(v17 & v18, v20, v13);
  v21 = *(_QWORD *)(v14 + 64) + 7;
  v22 = (uint64_t *)((v21 + v19) & 0xFFFFFFFFFFFFFFF8);
  v23 = (uint64_t *)((v21 + v20) & 0xFFFFFFFFFFFFF8);
  v24 = *v23;
  v25 = *v22;
  *v22 = *v23;
  swift_retain(v24);
  swift_release(v25);
  v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  v27 = v26 + v19;
  v28 = v26 + v20;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  v29 = *(_QWORD *)(v26 + v19 + 8);
  v30 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v27 + 8) = v30;
  swift_retain(v30);
  swift_release(v29);
  v31 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v31 = *(_BYTE *)v32;
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v31 + 8) = v34;
  swift_retain(v34);
  swift_release(v33);
  v35 = (_QWORD *)((v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)((v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = v35[1];
  v38 = v36[1];
  v35[1] = v38;
  swift_retain(v38);
  swift_release(v37);
  v39 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  v41 = v39[1];
  v42 = v40[1];
  v39[1] = v42;
  swift_retain(v42);
  swift_release(v41);
  v43 = (uint64_t *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  v44 = (uint64_t *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  v45 = *v44;
  v46 = *v43;
  *v43 = *v44;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v43[1];
  v48 = v44[1];
  v43[1] = v48;
  swift_retain(v48);
  swift_release(v47);
  v49 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(_DWORD *)(v50 + 84);
  v52 = *(_DWORD *)(v50 + 80) & 0xF8;
  v53 = v52 + 23;
  v54 = (unint64_t)v43 + v52 + 23;
  v55 = ~v52 & 0xFFFFFFFFFFFFFFF8;
  v56 = (_QWORD *)(v54 & v55);
  v57 = (unint64_t)v44 + v53;
  v58 = (uint64_t *)(v57 & v55);
  v59 = *(_QWORD *)(v50 + 64);
  if ((v54 & v55) != (v57 & v55))
  {
    v60 = v49;
    if (v51)
      v61 = *(_QWORD *)(v50 + 64);
    else
      v61 = v59 + 1;
    if (v61 <= 8)
      v62 = 8;
    else
      v62 = v61;
    v63 = *((unsigned __int8 *)v56 + v62);
    if (v63 >= 2)
    {
      if (v62 <= 3)
        v64 = v62;
      else
        v64 = 4;
      __asm { BR              X12 }
    }
    if (v63 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v50 + 48))(v56, 1, v49))
        (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v56, v60);
    }
    else
    {
      swift_release(*v56);
    }
    v65 = *((unsigned __int8 *)v58 + v62);
    if (v65 >= 2)
    {
      if (v62 <= 3)
        v66 = v62;
      else
        v66 = 4;
      __asm { BR              X12 }
    }
    if (v65 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v50 + 48))(v58, 1, v60))
      {
        memcpy(v56, v58, v61);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v50 + 16))(v56, v58, v60);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v56, 0, 1, v60);
      }
      *((_BYTE *)v56 + v62) = 1;
    }
    else
    {
      v67 = *v58;
      *v56 = *v58;
      *((_BYTE *)v56 + v62) = 0;
      swift_retain(v67);
    }
  }
  if (v51)
    v68 = v59;
  else
    v68 = v59 + 1;
  if (v68 <= 8)
    v69 = 8;
  else
    v69 = v68;
  v70 = type metadata accessor for SizeConstants(0);
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(_DWORD *)(v71 + 80) & 0xF8 | 7;
  v73 = v69 + v72 + 1;
  v74 = (uint64_t *)(((unint64_t)v56 + v73) & ~v72);
  v75 = (uint64_t *)(((unint64_t)v58 + v73) & ~v72);
  if (v74 != v75)
  {
    v76 = v70;
    if (*(_QWORD *)(v71 + 64) <= 8uLL)
      v77 = 8;
    else
      v77 = *(_QWORD *)(v71 + 64);
    v78 = *((unsigned __int8 *)v74 + v77);
    if (v78 >= 2)
    {
      if (v77 <= 3)
        v79 = v77;
      else
        v79 = 4;
      __asm { BR              X12 }
    }
    if (v78 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v71 + 8))(v74, v70);
    else
      swift_release(*v74);
    v80 = *((unsigned __int8 *)v75 + v77);
    if (v80 >= 2)
    {
      if (v77 <= 3)
        v81 = v77;
      else
        v81 = 4;
      __asm { BR              X12 }
    }
    if (v80 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v71 + 16))(v74, v75, v76);
      *((_BYTE *)v74 + v77) = 1;
    }
    else
    {
      v82 = *v75;
      *v74 = *v75;
      *((_BYTE *)v74 + v77) = 0;
      swift_retain(v82);
    }
  }
  return a1;
}

uint64_t sub_21C5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char v53;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 40 + a1) & ~v6;
  v8 = (v6 + 40 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (_BYTE *)(v7 + v9);
  v11 = (_BYTE *)(v8 + v9);
  *v10 = *v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  v15 = v14 + 8;
  v16 = (unint64_t)&v10[v14 + 8];
  v17 = ~v14 & 0xFFFFFFFFFFFFFFF8;
  v18 = v16 & v17;
  v19 = (unint64_t)&v11[v15] & v17;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(v16 & v17, v19, v12);
  v20 = *(_QWORD *)(v13 + 64) + 7;
  *(_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + v19) & 0xFFFFFFFFFFFFF8);
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  v22 = (_OWORD *)(v21 + v18);
  v23 = (_OWORD *)(v21 + v19);
  *v22 = *v23;
  v24 = (_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = (_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_OWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_DWORD *)(v33 + 80) & 0xF8;
  v35 = v34 + 23;
  v36 = (unint64_t)v30 + v34 + 23;
  v37 = ~v34 & 0xFFFFFFFFFFFFFFF8;
  v38 = (_QWORD *)(v36 & v37);
  v39 = (_QWORD *)(((unint64_t)v31 + v35) & v37);
  if (*(_DWORD *)(v33 + 84))
    v40 = *(_QWORD *)(v33 + 64);
  else
    v40 = *(_QWORD *)(v33 + 64) + 1;
  if (v40 <= 8)
    v41 = 8;
  else
    v41 = v40;
  v42 = *((unsigned __int8 *)v39 + v41);
  if (v42 >= 2)
  {
    if (v41 <= 3)
      v43 = v41;
    else
      v43 = 4;
    __asm { BR              X12 }
  }
  if (v42 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48))(v39, 1, v32))
    {
      memcpy(v38, v39, v40);
      v44 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v33 + 32))(v38, v39, v32);
      v44 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v38, 0, 1, v32);
    }
  }
  else
  {
    v44 = 0;
    *v38 = *v39;
  }
  *((_BYTE *)v38 + v41) = v44;
  v45 = *(_QWORD *)(type metadata accessor for SizeConstants(0) - 8);
  v46 = *(_DWORD *)(v45 + 80) & 0xF8 | 7;
  v47 = v41 + v46 + 1;
  v48 = (_QWORD *)(((unint64_t)v38 + v47) & ~v46);
  v49 = (_QWORD *)(((unint64_t)v39 + v47) & ~v46);
  if (*(_QWORD *)(v45 + 64) <= 8uLL)
    v50 = 8;
  else
    v50 = *(_QWORD *)(v45 + 64);
  v51 = *((unsigned __int8 *)v49 + v50);
  if (v51 >= 2)
  {
    if (v50 <= 3)
      v52 = v50;
    else
      v52 = 4;
    __asm { BR              X13 }
  }
  if (v51 == 1)
  {
    (*(void (**)(_QWORD *))(v45 + 32))(v48);
    v53 = 1;
  }
  else
  {
    v53 = 0;
    *v48 = *v49;
  }
  *((_BYTE *)v48 + v50) = v53;
  return a1;
}

uint64_t sub_21C938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  char v75;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 40 + a1) & ~v8;
  v10 = (v8 + 40 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (_BYTE *)(v9 + v11);
  v13 = (_BYTE *)(v10 + v11);
  *v12 = *v13;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v17 = v16 + 8;
  v18 = (unint64_t)&v12[v16 + 8];
  v19 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  v20 = v18 & v19;
  v21 = (unint64_t)&v13[v17] & v19;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))(v18 & v19, v21, v14);
  v22 = *(_QWORD *)(v15 + 64) + 7;
  v23 = (uint64_t *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = *v23;
  *v23 = *(_QWORD *)((v22 + v21) & 0xFFFFFFFFFFFFF8);
  swift_release(v24);
  v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  v26 = v25 + v20;
  v27 = v25 + v21;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v28 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_release(v28);
  v29 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v29 = *(_BYTE *)v30;
  v31 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
  swift_release(v31);
  v32 = (_QWORD *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)((v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = v32[1];
  v32[1] = v33[1];
  swift_release(v34);
  v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = v35[1];
  v35[1] = v36[1];
  swift_release(v37);
  v38 = (uint64_t *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v39 = (uint64_t *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = *v38;
  *v38 = *v39;
  swift_bridgeObjectRelease(v40);
  v41 = v38[1];
  v38[1] = v39[1];
  swift_release(v41);
  v42 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(_DWORD *)(v43 + 84);
  v45 = *(_DWORD *)(v43 + 80) & 0xF8;
  v46 = v45 + 23;
  v47 = (unint64_t)v38 + v45 + 23;
  v48 = ~v45 & 0xFFFFFFFFFFFFFFF8;
  v49 = (_QWORD *)(v47 & v48);
  v50 = (unint64_t)v39 + v46;
  v51 = (_QWORD *)(v50 & v48);
  v52 = *(_QWORD *)(v43 + 64);
  if ((v47 & v48) != (v50 & v48))
  {
    v53 = v42;
    if (v44)
      v54 = *(_QWORD *)(v43 + 64);
    else
      v54 = v52 + 1;
    if (v54 <= 8)
      v55 = 8;
    else
      v55 = v54;
    v56 = *((unsigned __int8 *)v49 + v55);
    if (v56 >= 2)
    {
      if (v55 <= 3)
        v57 = v55;
      else
        v57 = 4;
      __asm { BR              X12 }
    }
    if (v56 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v43 + 48))(v49, 1, v42))
        (*(void (**)(_QWORD *, uint64_t))(v43 + 8))(v49, v53);
    }
    else
    {
      swift_release(*v49);
    }
    v58 = *((unsigned __int8 *)v51 + v55);
    if (v58 >= 2)
    {
      if (v55 <= 3)
        v59 = v55;
      else
        v59 = 4;
      __asm { BR              X12 }
    }
    if (v58 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v43 + 48))(v51, 1, v53))
      {
        memcpy(v49, v51, v54);
        v60 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v43 + 32))(v49, v51, v53);
        v60 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v49, 0, 1, v53);
      }
    }
    else
    {
      v60 = 0;
      *v49 = *v51;
    }
    *((_BYTE *)v49 + v55) = v60;
  }
  if (v44)
    v61 = v52;
  else
    v61 = v52 + 1;
  if (v61 <= 8)
    v62 = 8;
  else
    v62 = v61;
  v63 = type metadata accessor for SizeConstants(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(_DWORD *)(v64 + 80) & 0xF8 | 7;
  v66 = v62 + v65 + 1;
  v67 = (_QWORD *)(((unint64_t)v49 + v66) & ~v65);
  v68 = (_QWORD *)(((unint64_t)v51 + v66) & ~v65);
  if (v67 != v68)
  {
    v69 = v63;
    if (*(_QWORD *)(v64 + 64) <= 8uLL)
      v70 = 8;
    else
      v70 = *(_QWORD *)(v64 + 64);
    v71 = *((unsigned __int8 *)v67 + v70);
    if (v71 >= 2)
    {
      if (v70 <= 3)
        v72 = v70;
      else
        v72 = 4;
      __asm { BR              X12 }
    }
    if (v71 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v64 + 8))(v67, v63);
    else
      swift_release(*v67);
    v73 = *((unsigned __int8 *)v68 + v70);
    if (v73 >= 2)
    {
      if (v70 <= 3)
        v74 = v70;
      else
        v74 = 4;
      __asm { BR              X12 }
    }
    if (v73 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v64 + 32))(v67, v68, v69);
      v75 = 1;
    }
    else
    {
      v75 = 0;
      *v67 = *v68;
    }
    *((_BYTE *)v67 + v70) = v75;
  }
  return a1;
}

uint64_t sub_21CE94(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  unsigned int v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v39 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v37 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v37 - 8);
  v38 = *(_DWORD *)(v7 + 84);
  if (v38 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v7 + 84);
  if (v6 <= v8)
    v9 = v8;
  else
    v9 = v6;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(type metadata accessor for SizeConstants(0) - 8);
  if (*(_QWORD *)(v14 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v14 + 64);
  if (v12)
    v16 = v13;
  else
    v16 = v13 + 1;
  if (v16 <= 8)
    v17 = 8;
  else
    v17 = v16;
  if (!a2)
    return 0;
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v20 = *(_QWORD *)(v5 + 64) + 1;
  v21 = *(_QWORD *)(v7 + 64) + 7;
  if (a2 <= v10)
    goto LABEL_39;
  v22 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v23 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v24 = v15
      + ((v17
        + v23
        + ((v22
          + (((((((((v21 & 0xFFFFFFFFFFFFFFF8) + ((v20 + v19 + ((v18 + 40) & ~v18)) & ~v19) + 31) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 16) & ~v22)
        + 1) & ~v23)
      + 1;
  v25 = 8 * v24;
  if (v24 > 3)
    goto LABEL_22;
  v28 = ((a2 - v10 + ~(-1 << v25)) >> v25) + 1;
  if (HIWORD(v28))
  {
    v26 = *(_DWORD *)(a1 + v24);
    if (v26)
      goto LABEL_30;
  }
  else
  {
    if (v28 <= 0xFF)
    {
      if (v28 < 2)
        goto LABEL_39;
LABEL_22:
      v26 = *(unsigned __int8 *)(a1 + v24);
      if (!*(_BYTE *)(a1 + v24))
        goto LABEL_39;
LABEL_30:
      v29 = (v26 - 1) << v25;
      if (v24 > 3)
        v29 = 0;
      if ((_DWORD)v24)
      {
        if (v24 <= 3)
          v30 = v24;
        else
          v30 = 4;
        __asm { BR              X11 }
      }
      return v10 + v29 + 1;
    }
    v26 = *(unsigned __int16 *)(a1 + v24);
    if (*(_WORD *)(a1 + v24))
      goto LABEL_30;
  }
LABEL_39:
  if ((v9 & 0x80000000) == 0)
  {
    v31 = *(_QWORD *)(a1 + 24);
    if (v31 >= 0xFFFFFFFF)
      LODWORD(v31) = -1;
    return (v31 + 1);
  }
  v32 = (a1 + v18 + 40) & ~v18;
  if ((_DWORD)v6 == v10)
  {
    v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    v34 = v6;
    v35 = v39;
    return v33(v32, v34, v35);
  }
  v32 = (v20 + v32 + v19) & ~v19;
  v34 = v38;
  if (v38 >= 0x7FFFFFFE)
  {
    v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v35 = v37;
    return v33(v32, v34, v35);
  }
  v36 = *(_QWORD *)((v21 + v32) & 0xFFFFFFFFFFFFF8);
  if (v36 >= 0xFFFFFFFF)
    LODWORD(v36) = -1;
  if ((v36 + 1) >= 2)
    return v36;
  else
    return 0;
}

void sub_21D194(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFEu)
    v10 = 2147483646;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = v10;
  else
    v11 = v8;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = *(_QWORD *)(v13 + 64);
  v16 = *(_QWORD *)(type metadata accessor for SizeConstants(0) - 8);
  v17 = 8;
  if (*(_QWORD *)(v16 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v16 + 64);
  v19 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v20 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v21 = (v20
       + ((((((((((*(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
               + ((*(_QWORD *)(v7 + 64)
                 + 1
                 + v19
                 + ((*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~v19)
               + 31) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16) & ~v20;
  if (v14)
    v22 = v15;
  else
    v22 = v15 + 1;
  if (v22 > 8)
    v17 = v22;
  v23 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  v24 = v18 + ((v17 + v23 + v21 + 1) & ~v23) + 1;
  if (a3 <= v12)
  {
    v25 = 0;
  }
  else if (v24 <= 3)
  {
    v27 = ((a3 - v12 + ~(-1 << (8 * v24))) >> (8 * v24)) + 1;
    if (HIWORD(v27))
    {
      v25 = &dword_4;
    }
    else if (v27 >= 0x100)
    {
      v25 = 2;
    }
    else
    {
      v25 = v27 > 1;
    }
  }
  else
  {
    v25 = &dword_0 + 1;
  }
  if (v12 < a2)
  {
    v26 = ~v12 + a2;
    if (v24 < 4)
    {
      if ((_DWORD)v24)
      {
        v28 = v26 & ~(-1 << (8 * v24));
        bzero(a1, v24);
        if ((_DWORD)v24 == 3)
        {
          *(_WORD *)a1 = v28;
          a1[2] = BYTE2(v28);
        }
        else if ((_DWORD)v24 == 2)
        {
          *(_WORD *)a1 = v28;
        }
        else
        {
          *a1 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v24);
      *(_DWORD *)a1 = v26;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for EditFinishedDateView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EditFinishedDateView);
}

void sub_21D538(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_321DC0)
  {
    v2 = sub_667D0(&qword_31FA60);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_321DC0);
  }
}

uint64_t sub_21D590(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_2BAB0C, 1);
}

uint64_t sub_21D5C4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  __n128 *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  __n128 *v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v4 = a1;
  v5 = (__n128 *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = v5->n128_u64[0];
    __chkstk_darwin(a1);
    v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v24 = 32;
    v25 = a2;
    do
    {
      if (a2 == 1)
        v26 = 0;
      else
        v26 = *(_DWORD *)(TupleTypeMetadata + v24);
      v28 = v5->n128_u64[0];
      v5 = (__n128 *)((char *)v5 + 8);
      v27 = v28;
      v29 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(&v8[v26], v29);
      v24 += 16;
      --v25;
    }
    while (v25);
    return TupleView.init(_:)(v8, TupleTypeMetadata, v22);
  }
  v9 = __chkstk_darwin(a1);
  v11 = (__n128 *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    v12 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)((char *)v11 - (char *)v5) < 0x20)
      goto LABEL_9;
    v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = v5 + 1;
    v14 = v11 + 1;
    v15 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v9 = v13[-1];
      v16 = *v13;
      v14[-1] = v9;
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v12 != a2)
    {
LABEL_9:
      v17 = a2 - v12;
      v18 = v12;
      v19 = &v11->n128_i8[8 * v12];
      v20 = &v5->n128_u64[v18];
      do
      {
        v21 = *v20++;
        *(_QWORD *)v19 = v21;
        v19 += 8;
        --v17;
      }
      while (v17);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2, v9);
  v22 = __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v31 - v23;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata, v22);
}

uint64_t sub_21D778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  char *v45;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v61 = a2;
  v63 = a1;
  v70 = a3;
  v66 = type metadata accessor for Date(0);
  v69 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v68 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_31F128);
  v5 = __chkstk_darwin(v4);
  v67 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.Component(0, v5);
  v59 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_320330);
  __chkstk_darwin(v10);
  v71 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_327C58);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DateComponents(0, v13);
  v62 = *(_QWORD *)(v64 - 8);
  v16 = __chkstk_darwin(v64);
  v60 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TimeZone(0, v16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Calendar(0, v20);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v25);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v28(v22, v61, v18);
  Calendar.timeZone.setter(v22);
  v29 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v58 = v15;
  v29(v15, v27, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v23);
  v30 = v71;
  v28(v71, v63, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v30, 0, 1, v18);
  v31 = v59;
  v32 = *(void (**)(char *, _QWORD, uint64_t))(v59 + 104);
  v32(v9, enum case for Calendar.Component.era(_:), v7);
  v33 = v65;
  v34 = Calendar.component(_:from:)(v9, v65);
  v35 = *(void (**)(char *, uint64_t))(v31 + 8);
  v35(v9, v7);
  v32(v9, enum case for Calendar.Component.year(_:), v7);
  v36 = v33;
  v37 = Calendar.component(_:from:)(v9, v33);
  v38 = v9;
  v39 = v66;
  v35(v38, v7);
  v57 = 1;
  v56 = 1;
  v55 = 1;
  v54 = 1;
  v53 = 1;
  v52 = 1;
  v51 = 1;
  v50 = 1;
  v49 = 1;
  v48 = 1;
  v47 = 1;
  v40 = v60;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v58, v71, v34, 0, v37, 0, 0, 1, 0, v47, 0, v48, 0, v49, 0, v50, 0, v51, 0,
    v52,
    0,
    v53,
    0,
    v54,
    0,
    v55,
    0,
    v56,
    0,
    v57);
  v41 = (uint64_t)v67;
  Calendar.date(from:)(v40);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v64);
  v42 = *(void (**)(char *, uint64_t))(v24 + 8);
  v43 = v27;
  v45 = v68;
  v44 = v69;
  v42(v43, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v45, v36, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v41, 1, v39) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v70, v45, v39);
    return sub_5E09C(v41, &qword_31F128);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v39);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v70, v41, v39);
  }
}

uint64_t sub_21DBF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unsigned int *v51;
  char *v52;
  uint64_t v53;

  v50 = a2;
  v51 = a3;
  v5 = v4;
  v53 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_31F590);
  v12 = __chkstk_darwin(v11);
  v52 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AssetAction.Kind(0, v12);
  v48 = *(_QWORD *)(v14 - 8);
  v49 = v14;
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5C154(&qword_31FA60);
  __chkstk_darwin(v20);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v4[3];
  v24 = v5[4];
  sub_66898(v5, v23);
  v25 = ContentInfo.id.getter(v23, *(_QWORD *)(v24 + 8));
  v46 = v26;
  v47 = v25;
  sub_77A64((uint64_t)v22);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v22, 1, v7);
  if ((_DWORD)v27 == 1)
  {
    sub_5E09C((uint64_t)v22, &qword_31FA60);
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v28 = UUID.uuidString.getter(v27);
    v44 = v29;
    v45 = v28;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v22, v7);
  }
  v30 = v5[3];
  v31 = v5[4];
  sub_66898(v5, v30);
  LOBYTE(v30) = AssetInfo.isExplicit.getter(v30, v31);
  static ActionMetrics.notInstrumented.getter(v32);
  v33 = *(int *)(sub_5C154(v50) + 48);
  v34 = sub_5C154(&qword_320370);
  State.wrappedValue.getter(v16, v34);
  *((_BYTE *)v16 + v33) = *((_BYTE *)v5 + *(int *)(a1 + 40));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104))(v16, *v51, v49);
  v35 = type metadata accessor for ClickData(0);
  v36 = v52;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v52, 1, 1, v35);
  v38 = UUID.init()(v37);
  v39 = UUID.uuidString.getter(v38);
  v41 = v40;
  v42.n128_f64[0] = (*(double (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v39, v41, v47, v46, v45, v44, v30 & 1, v19, v42, v16, v36);
}

uint64_t sub_21DED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v41 = a1;
  v45 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_31F590);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AssetAction.Kind(0, v9);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_31FA60);
  __chkstk_darwin(v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v2[3];
  v22 = v3[4];
  sub_66898(v3, v21);
  v23 = ContentInfo.id.getter(v21, *(_QWORD *)(v22 + 8));
  v42 = v24;
  sub_77A64((uint64_t)v20);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v20, 1, v4);
  if ((_DWORD)v25 == 1)
  {
    sub_5E09C((uint64_t)v20, &qword_31FA60);
    v40 = 0;
    v41 = 0;
  }
  else
  {
    v26 = UUID.uuidString.getter(v25);
    v40 = v27;
    v41 = v26;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v20, v4);
  }
  v28 = v3[3];
  v29 = v3[4];
  sub_66898(v3, v28);
  v30 = AssetInfo.isExplicit.getter(v28, v29);
  static ActionMetrics.notInstrumented.getter(v31);
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v14, enum case for AssetAction.Kind.unsetFinishedDate(_:), v44);
  v32 = type metadata accessor for ClickData(0);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v11, 1, 1, v32);
  v34 = UUID.init()(v33);
  v35 = UUID.uuidString.getter(v34);
  v37 = v36;
  v38.n128_f64[0] = (*(double (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v35, v37, v23, v42, v41, v40, v30 & 1, v17, v38, v14, v11);
}

uint64_t sub_21E190()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for ActionMetrics(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = static ActionMetrics.notInstrumented.getter(v1);
  v5 = static Models.FlowBackAction.Dismissal.sheetDismiss.getter(v4);
  return Models.FlowBackAction.init(actionMetrics:dismissal:)(v3, v5, v6);
}

uint64_t sub_21E20C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;

  v5 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v5);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for AssetAction(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v26[-v13];
  v15 = (char *)(v2 + *(int *)(a1 + 48));
  v16 = *v15;
  v17 = *((_QWORD *)v15 + 1);
  v26[8] = v16;
  v27 = v17;
  v18 = sub_5C154(&qword_32B840);
  State.wrappedValue.getter(&v28, v18);
  if ((v28 & 1) != 0)
  {
    v19 = &qword_3293A0;
    v20 = (unsigned int *)&enum case for AssetAction.Kind.setFinishedDate(_:);
  }
  else
  {
    v19 = &qword_329388;
    v20 = (unsigned int *)&enum case for AssetAction.Kind.setFinishedYear(_:);
  }
  sub_21DBF0(a1, v19, v20, (uint64_t)v11);
  v21 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v14, v11, v8);
  AssetAction.actionMetrics.getter(v21);
  v22 = sub_5C154(&qword_31EF10);
  v23 = swift_allocObject(v22, 112, 7);
  *(_OWORD *)(v23 + 16) = xmmword_255F00;
  *(_QWORD *)(v23 + 56) = v8;
  *(_QWORD *)(v23 + 64) = sub_648E0(&qword_325E48, (uint64_t (*)(uint64_t))&type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
  v24 = sub_668BC((_QWORD *)(v23 + 32));
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v9 + 16))(v24, v14, v8);
  *(_QWORD *)(v23 + 96) = type metadata accessor for Models.FlowBackAction(0);
  *(_QWORD *)(v23 + 104) = &protocol witness table for Models.FlowBackAction;
  sub_668BC((_QWORD *)(v23 + 72));
  sub_21E190();
  a2[3] = type metadata accessor for CompoundAction(0);
  a2[4] = &protocol witness table for CompoundAction;
  sub_668BC(a2);
  CompoundAction.init(actionMetrics:subactions:)(v7, v23);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_21E440@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AssetAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21DED8(a1, (uint64_t)v10);
  AssetAction.actionMetrics.getter(v11);
  v12 = sub_5C154(&qword_31EF10);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_255F00;
  *(_QWORD *)(v13 + 56) = v7;
  *(_QWORD *)(v13 + 64) = sub_648E0(&qword_325E48, (uint64_t (*)(uint64_t))&type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
  v14 = sub_668BC((_QWORD *)(v13 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 16))(v14, v10, v7);
  *(_QWORD *)(v13 + 96) = type metadata accessor for Models.FlowBackAction(0);
  *(_QWORD *)(v13 + 104) = &protocol witness table for Models.FlowBackAction;
  sub_668BC((_QWORD *)(v13 + 72));
  sub_21E190();
  a2[3] = type metadata accessor for CompoundAction(0);
  a2[4] = &protocol witness table for CompoundAction;
  sub_668BC(a2);
  CompoundAction.init(actionMetrics:subactions:)(v6, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

double sub_21E5E4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v13;

  v1 = type metadata accessor for SizeConstants.Spacing(0, a1);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_76D64((uint64_t)v8);
  SizeConstants.spacing.getter(v9);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = SizeConstants.Spacing.xxxl.getter(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v11;
}

uint64_t sub_21E6E0(int *a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  char v21;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  double v24;
  double v25;
  char v26;
  char v27;
  double v28;
  double v29;
  __n128 v30;
  double v31;
  char v32;
  uint64_t v33;
  double v34;
  double v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  double v45;
  unint64_t v46;
  char v47;
  double *v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double *v52;
  double v53;
  uint64_t v54;
  double *v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;

  v5 = v4;
  v10 = (char *)(v4 + a1[12]);
  v11 = *v10;
  v12 = *((_QWORD *)v10 + 1);
  LOBYTE(v59) = *v10;
  v60 = v12;
  v13 = sub_5C154(&qword_32B840);
  State.wrappedValue.getter(&v58, v13);
  v14 = LOBYTE(v58);
  v15 = (double *)(v4 + a1[16]);
  v16 = *v15;
  v17 = *((_QWORD *)v15 + 1);
  v56 = v15;
  v59 = *v15;
  v60 = v17;
  v18 = sub_5C154(&qword_32B880);
  State.wrappedValue.getter(&v58, v18);
  v19 = v58;
  if (*(_QWORD *)(*(_QWORD *)&v58 + 16))
  {
    sub_58348(v14);
    v21 = v20;
    swift_bridgeObjectRelease(*(_QWORD *)&v19);
    if ((v21 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)&v58);
  }
  LOBYTE(v59) = v11;
  v60 = v12;
  State.wrappedValue.getter(&v58, v13);
  v22 = LOBYTE(v58);
  v59 = v16;
  v60 = v17;
  swift_retain(v17);
  swift_bridgeObjectRetain(*(_QWORD *)&v16);
  State.wrappedValue.getter(&v58, v18);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v58);
  v24 = v58;
  v58 = -0.0;
  v59 = v24;
  sub_5A3FC(v22, isUniquelyReferenced_nonNull_native, a2, a3);
  v25 = v58;
  v58 = v59;
  swift_bridgeObjectRelease(*(_QWORD *)&v25);
  v59 = v16;
  v60 = v17;
  v57 = v58;
  State.wrappedValue.setter(&v57, v18);
  swift_release(v17);
  swift_bridgeObjectRelease(*(_QWORD *)&v16);
  LOBYTE(v59) = v11;
  v60 = v12;
  State.wrappedValue.getter(&v58, v13);
  if ((LOBYTE(v58) & 1) == 0)
  {
    LOBYTE(v59) = v11;
    v60 = v12;
    State.wrappedValue.getter(&v58, v13);
    v26 = LOBYTE(v58);
    v59 = v16;
    v60 = v17;
    swift_bridgeObjectRetain(*(_QWORD *)&v16);
    swift_retain(v17);
    State.wrappedValue.getter(&v58, v18);
    v27 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v58);
    v28 = v58;
    v58 = -0.0;
    v59 = v28;
    sub_5A3FC(v26, v27, a2, 216.0);
    v29 = v58;
    v58 = v59;
    swift_bridgeObjectRelease(*(_QWORD *)&v29);
    v59 = v16;
    v60 = v17;
    v57 = v58;
    State.wrappedValue.setter(&v57, v18);
    swift_release(v17);
    swift_bridgeObjectRelease(*(_QWORD *)&v16);
  }
LABEL_7:
  LOBYTE(v59) = v11;
  v60 = v12;
  State.wrappedValue.getter(&v58, v13);
  if (LOBYTE(v58) == 1)
  {
    v31 = sub_21E5E4(v30);
    LOBYTE(v59) = v11;
    v60 = v12;
    State.wrappedValue.getter(&v58, v13);
    v32 = LOBYTE(v58);
    v33 = *((_QWORD *)v56 + 1);
    v59 = *v56;
    v60 = v33;
    State.wrappedValue.getter(&v58, v18);
    v34 = v58;
    v35 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)&v58 + 16))
    {
      v36 = sub_58348(v32);
      if ((v37 & 1) != 0)
        v35 = *(double *)(*(_QWORD *)(*(_QWORD *)&v34 + 56) + 16 * v36);
    }
    swift_bridgeObjectRelease(*(_QWORD *)&v34);
    v38 = v31 + v31 + a4 < v35;
  }
  else
  {
    v38 = 0;
  }
  v39 = (char *)(v5 + a1[13]);
  v40 = *v39;
  v41 = *((_QWORD *)v39 + 1);
  LOBYTE(v59) = v40;
  v60 = v41;
  LOBYTE(v58) = v38;
  v42 = sub_5C154(&qword_325B50);
  State.wrappedValue.setter(&v58, v42);
  LOBYTE(v59) = v11;
  v60 = v12;
  State.wrappedValue.getter(&v58, v13);
  if ((LOBYTE(v58) & 1) == 0)
  {
    LOBYTE(v59) = v11;
    v60 = v12;
    State.wrappedValue.getter(&v58, v13);
    v43 = LOBYTE(v58);
    v44 = *((_QWORD *)v56 + 1);
    v59 = *v56;
    v60 = v44;
    State.wrappedValue.getter(&v58, v18);
    v45 = v58;
    a3 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)&v58 + 16))
    {
      v46 = sub_58348(v43);
      if ((v47 & 1) != 0)
        a3 = *(double *)(*(_QWORD *)(*(_QWORD *)&v45 + 56) + 16 * v46 + 8);
    }
    swift_bridgeObjectRelease(*(_QWORD *)&v45);
  }
  v48 = (double *)(v5 + a1[15]);
  v49 = *v48;
  v50 = *((_QWORD *)v48 + 1);
  v58 = a3;
  v59 = v49;
  v60 = v50;
  v51 = sub_5C154(&qword_328BA0);
  State.wrappedValue.setter(&v58, v51);
  v52 = (double *)(v5 + a1[14]);
  v53 = *v52;
  v54 = *((_QWORD *)v52 + 1);
  v58 = a4;
  v59 = v53;
  v60 = v54;
  return State.wrappedValue.setter(&v58, v51);
}

uint64_t sub_21EB1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t TupleTypeMetadata;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = *(_QWORD *)(a1 + 16);
  v5 = v26;
  v27 = sub_667D0(&qword_32B7C8);
  v28 = sub_667D0(&qword_32B7D0);
  v29 = sub_667D0(&qword_32B7D8);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4, v6);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v8);
  v10 = type metadata accessor for VStack(0, v8, WitnessTable);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v14);
  v17 = &v22[-v16];
  v18 = *(_QWORD *)(a1 + 24);
  v23 = v5;
  v24 = v18;
  v25 = v2;
  v19 = static HorizontalAlignment.center.getter(v15);
  VStack.init(alignment:spacing:content:)(v19, 0, 0, sub_220598, v22, v8, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v10);
  sub_12D864((uint64_t)v13, v10, (uint64_t)v17);
  v20 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v20(v13, v10);
  sub_12AA38((uint64_t)v17, v10, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v20)(v17, v10);
}

uint64_t sub_21ECC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (**v55)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t (*v56)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t (*v57)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __n128 v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  _QWORD v167[4];
  uint64_t (*v168)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176[4];
  uint64_t v177;
  unsigned __int8 v178;
  uint64_t v179;
  unsigned __int8 v180;
  uint64_t v181;
  uint64_t v182;
  _OWORD v183[3];

  v155 = a4;
  v7 = sub_5C154(&qword_32B7E0);
  v116 = *(_QWORD *)(v7 - 8);
  v117 = v7;
  __chkstk_darwin(v7);
  v115 = (uint64_t)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_5C154(&qword_32B7E8);
  v151 = *(_QWORD *)(v158 - 8);
  v9 = __chkstk_darwin(v158);
  v114 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BooksFeatureFlag(0, v9);
  v148 = *(_QWORD *)(v11 - 8);
  v149 = v11;
  __chkstk_darwin(v11);
  v147 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_5C154(&qword_32B7D8);
  __chkstk_darwin(v152);
  v153 = (uint64_t)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v157 = (uint64_t)&v114 - v15;
  v16 = type metadata accessor for ButtonViewModel.ActionKind(0);
  v143 = *(_QWORD *)(v16 - 8);
  v144 = v16;
  v17 = __chkstk_darwin(v16);
  v142 = (char **)((char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for ButtonViewModel.Content(0, v17);
  v140 = *(_QWORD *)(v19 - 8);
  v141 = v19;
  v20 = __chkstk_darwin(v19);
  v139 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for ButtonViewModel.Style(0, v20);
  v135 = *(_QWORD *)(v137 - 8);
  v22 = __chkstk_darwin(v137);
  v128 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for ButtonViewModel.Kind(0, v22);
  v125 = *(_QWORD *)(v127 - 8);
  v24 = __chkstk_darwin(v127);
  v123 = (char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ButtonViewModel.Shape(0, v24);
  v121 = *(_QWORD *)(v26 - 8);
  v122 = v26;
  v27 = __chkstk_darwin(v26);
  v120 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for ButtonViewModel.Size(0, v27);
  v118 = *(_QWORD *)(v29 - 8);
  v119 = v29;
  v30 = __chkstk_darwin(v29);
  v159 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ButtonViewModel(0, v30);
  v33 = __chkstk_darwin(v32);
  v126 = (char *)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for ButtonView(0, v33);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v124 = (char *)&v114 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_5C154(&qword_32B7D0);
  __chkstk_darwin(v160);
  v37 = (char *)&v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v162 = (uint64_t)&v114 - v39;
  v41 = type metadata accessor for EditFinishedDateView(0, a2, a3, v40);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v41);
  v45 = (char *)&v114 - v44;
  v161 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v46);
  v150 = (char *)&v114 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v50 = a1 + *(int *)(v49 + 36);
  v146 = (char *)&v114 - v51;
  sub_12D864(v50, a2, (uint64_t)&v114 - v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v45, a1, v41);
  v52 = *(unsigned __int8 *)(v42 + 80);
  v53 = (v52 + 32) & ~v52;
  v54 = swift_allocObject(&unk_2F5780, v53 + v43, v52 | 7);
  v156 = a2;
  *(_QWORD *)(v54 + 16) = a2;
  *(_QWORD *)(v54 + 24) = a3;
  v154 = a3;
  v145 = v54;
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v54 + v53, v45, v41);
  v55 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>))(a1 + *(int *)(v41 + 60));
  v56 = *v55;
  v57 = v55[1];
  v168 = v56;
  v169 = (uint64_t)v57;
  v58 = sub_5C154(&qword_328BA0);
  v59 = State.wrappedValue.getter(v183, v58);
  v60 = *(_QWORD *)&v183[0];
  v61 = static Alignment.center.getter(v59);
  _FrameLayout.init(width:height:alignment:)(&v177, 0, 1, v60, 0, v61, v62);
  v134 = v177;
  v133 = v178;
  v132 = v179;
  v131 = v180;
  v129 = v182;
  v130 = v181;
  *v159 = 1;
  (*(void (**)(void))(v118 + 104))();
  v63 = v120;
  (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v120, enum case for ButtonViewModel.Shape.roundedRectangle(_:), v122);
  v64 = v123;
  (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v123, enum case for ButtonViewModel.Kind.solid(_:), v127);
  v65 = v128;
  (*(void (**)(char *, _QWORD, uint64_t))(v135 + 104))(v128, enum case for ButtonViewModel.Style.primary(_:), v137);
  v66 = sub_17EB50();
  v68 = v67;
  v69 = v139;
  static LocalizerRequest.verbatim(_:)(v66);
  v70 = swift_bridgeObjectRelease(v68);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v140 + 104))(v69, enum case for ButtonViewModel.Content.title(_:), v141, v70);
  v71 = v142;
  v141 = a1;
  sub_21E20C(v41, v142);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v143 + 104))(v71, enum case for ButtonViewModel.ActionKind.actionModel(_:), v144);
  v72 = v126;
  ButtonViewModel.init(size:shape:kind:style:content:isEnabled:action:)(v159, v63, v64, v65, v69, 1, v71);
  v73 = v124;
  v74 = ButtonView.init(model:)(v72);
  v75 = static Alignment.center.getter(v74);
  _FrameLayout.init(width:height:alignment:)(v183, 0, 1, 0x4048000000000000, 0, v75, v76);
  v77 = v136;
  v78 = v138;
  (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v37, v73, v138);
  v79 = &v37[*(int *)(v160 + 36)];
  v80 = v183[1];
  *(_OWORD *)v79 = v183[0];
  *((_OWORD *)v79 + 1) = v80;
  *((_OWORD *)v79 + 2) = v183[2];
  (*(void (**)(char *, uint64_t))(v77 + 8))(v73, v78);
  v159 = v37;
  sub_66F14((uint64_t)v37, v162, &qword_32B7D0);
  v81 = v147;
  v82 = v148;
  v83 = v149;
  (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v147, enum case for BooksFeatureFlag.iveReadThisFullFlow(_:), v149);
  v84 = sub_648E0(&qword_320358, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
  v85 = sub_67060((unint64_t *)&qword_320360, &qword_320368, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
  v86 = v84;
  v87 = v81;
  LOBYTE(v81) = RawRepresentable<>.isEnabled.getter(v83, v86, v85);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v87, v83);
  v89 = 1;
  if ((v81 & 1) != 0)
  {
    v90 = v115;
    v91 = sub_220278(v41, v115, v88);
    v92 = static Edge.Set.top.getter(v91);
    v93 = EdgeInsets.init(_all:)(5.0);
    v95 = v94;
    v97 = v96;
    v99 = v98;
    v101 = v116;
    v100 = v117;
    v102 = (uint64_t)v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v114, v90, v117);
    v103 = v102 + *(int *)(v158 + 36);
    *(_BYTE *)v103 = v92;
    *(double *)(v103 + 8) = v93;
    *(_QWORD *)(v103 + 16) = v95;
    *(_QWORD *)(v103 + 24) = v97;
    *(_QWORD *)(v103 + 32) = v99;
    *(_BYTE *)(v103 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v90, v100);
    sub_66F14(v102, v157, &qword_32B7E8);
    v89 = 0;
  }
  v104 = v157;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56))(v157, v89, 1, v158);
  v105 = (uint64_t)v150;
  v106 = v146;
  v107 = v156;
  (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v150, v146, v156);
  v108 = v145;
  v168 = sub_2205A8;
  v169 = v145;
  v170 = v134;
  v171 = v133;
  v172 = v132;
  v173 = v131;
  v174 = v130;
  v175 = v129;
  v176[0] = v105;
  v176[1] = (uint64_t)&v168;
  v109 = v162;
  v110 = v159;
  sub_5E1A4(v162, (uint64_t)v159, &qword_32B7D0);
  v176[2] = (uint64_t)v110;
  v111 = v153;
  sub_5E1A4(v104, v153, &qword_32B7D8);
  v176[3] = v111;
  swift_retain(v108);
  v167[0] = v107;
  v167[1] = sub_5C154(&qword_32B7C8);
  v167[2] = v160;
  v167[3] = v152;
  v163 = v154;
  v164 = sub_220610();
  v165 = sub_220694();
  v166 = sub_220718();
  sub_21D5C4(v176, 4uLL, (uint64_t)v167);
  sub_5E09C(v104, &qword_32B7D8);
  sub_5E09C(v109, &qword_32B7D0);
  swift_release(v108);
  v112 = *(void (**)(char *, uint64_t))(v161 + 8);
  v112(v106, v107);
  sub_5E09C(v111, &qword_32B7D8);
  sub_5E09C((uint64_t)v110, &qword_32B7D0);
  swift_release(v169);
  return ((uint64_t (*)(uint64_t, uint64_t))v112)(v105, v107);
}

uint64_t sub_21F67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t OpaqueTypeConformance2;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  double v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  _OWORD v93[3];

  v83 = a5;
  v9 = type metadata accessor for GeometryProxy(0);
  v78 = *(_QWORD *)(v9 - 8);
  v79 = v9;
  v80 = *(void (**)(uint64_t, char *, uint64_t))(v78 + 64);
  __chkstk_darwin(v9);
  v77 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3;
  v86 = a4;
  v13 = type metadata accessor for EditFinishedDateView(0, a3, a4, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v85 = (char *)&v70 - v16;
  v17 = sub_5C154(&qword_32B848);
  __chkstk_darwin(v17);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5C154(&qword_32B850);
  __chkstk_darwin(v75);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_32B858);
  v23 = *(_QWORD *)(v22 - 8);
  v81 = v22;
  v82 = v23;
  v24 = __chkstk_darwin(v22);
  v87 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v24);
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;
  v26 = (uint64_t)&v19[*(int *)(sub_5C154(&qword_32B860) + 44)];
  v84 = v11;
  sub_21FB60(a2, a1, v11, a4, v26);
  v27 = (uint64_t *)(a2 + *(int *)(v13 + 56));
  v70 = a2;
  v28 = *v27;
  v29 = v27[1];
  *(_QWORD *)&v93[0] = v28;
  *((_QWORD *)&v93[0] + 1) = v29;
  v30 = sub_5C154(&qword_328BA0);
  v31 = State.wrappedValue.getter(&v88, v30);
  v32 = v88;
  v33 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(v93, *(_QWORD *)&v32, 0, 0, 1, v33, v34);
  v35 = v21;
  v72 = v21;
  sub_5E1A4((uint64_t)v19, (uint64_t)v21, &qword_32B848);
  v36 = v75;
  v37 = &v35[*(int *)(v75 + 36)];
  v38 = v93[1];
  *(_OWORD *)v37 = v93[0];
  *((_OWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 2) = v93[2];
  v39 = sub_5E09C((uint64_t)v19, &qword_32B848);
  v88 = GeometryProxy.size.getter(v39);
  v76 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v40 = v85;
  v76(v85, a2, v13);
  v41 = v78;
  v42 = v77;
  v43 = a1;
  v44 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v43, v79);
  v45 = *(unsigned __int8 *)(v14 + 80);
  v46 = (v45 + 32) & ~v45;
  v74 = v46 + v15;
  v71 = v46;
  v47 = v45 | 7;
  v73 = v45 | 7;
  v48 = *(unsigned __int8 *)(v41 + 80);
  v49 = (v46 + v15 + v48) & ~v48;
  v50 = swift_allocObject(&unk_2F57D0, (char *)v80 + v49, v47 | v48);
  v51 = v86;
  *(_QWORD *)(v50 + 16) = v84;
  *(_QWORD *)(v50 + 24) = v51;
  v80 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v80(v50 + v46, v40, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v50 + v49, v42, v44);
  v52 = sub_220944();
  v53 = sub_2209C8();
  v54 = *(double *)&v36;
  v55 = (uint64_t)v72;
  View.onChange<A>(of:initial:_:)(&v88, 0, sub_2208C8, v50, v36, &type metadata for CGFloat, v52, v53);
  swift_release(v50);
  sub_5E09C(v55, &qword_32B850);
  v56 = v70;
  v57 = v70 + *(int *)(v13 + 48);
  v58 = *(_BYTE *)v57;
  v59 = *(void **)(v57 + 8);
  LOBYTE(v88) = v58;
  v89 = v59;
  v60 = sub_5C154(&qword_32B840);
  State.wrappedValue.getter(&v92, v60);
  v61 = v85;
  v76(v85, v56, v13);
  v62 = swift_allocObject(&unk_2F57F8, v74, v73);
  v63 = v86;
  *(_QWORD *)(v62 + 16) = v84;
  *(_QWORD *)(v62 + 24) = v63;
  v80(v62 + v71, v61, v13);
  v88 = v54;
  v89 = &type metadata for CGFloat;
  v90 = v52;
  v91 = v53;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v65 = sub_18DAF8();
  v66 = v81;
  v67 = OpaqueTypeConformance2;
  v68 = v87;
  View.onChange<A>(of:initial:_:)(&v92, 0, sub_220BF0, v62, v81, &type metadata for FinishedDateType, v67, v65);
  swift_release(v62);
  return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v68, v66);
}

uint64_t sub_21FB60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t@<X8>);
  void (*v49)(uint64_t@<X8>);
  uint64_t v50;
  void (**v51)(uint64_t@<X8>);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v59 = a3;
  v60 = a4;
  v6 = a3;
  v58 = a2;
  v61 = a5;
  v8 = type metadata accessor for GeometryProxy(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  v57 = *(_QWORD *)(v55 + 64);
  __chkstk_darwin(v8);
  v54 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for EditFinishedDateView(0, v6, a4, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v53 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v53 - v13;
  v15 = (int *)type metadata accessor for FinishedDatePickerView(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_5C154(&qword_320370);
  State.projectedValue.getter(v17, v18);
  v19 = (char *)(a1 + *(int *)(v11 + 48));
  v20 = *v19;
  v21 = *((_QWORD *)v19 + 1);
  v62 = v20;
  v63 = v21;
  v22 = sub_5C154(&qword_32B840);
  State.projectedValue.getter(&v64, v22);
  v23 = v64;
  v24 = v65;
  LOBYTE(v6) = v66;
  v25 = (char *)(a1 + *(int *)(v11 + 52));
  v26 = *v25;
  v27 = *((_QWORD *)v25 + 1);
  v62 = v26;
  v63 = v27;
  v28 = sub_5C154(&qword_325B50);
  State.projectedValue.getter(&v64, v28);
  v29 = v64;
  v30 = v65;
  v31 = v66;
  v32 = (char *)v17 + v15[5];
  *(_QWORD *)v32 = v23;
  *((_QWORD *)v32 + 1) = v24;
  v32[16] = v6;
  v33 = (char *)v17 + v15[6];
  *(_QWORD *)v33 = v29;
  *((_QWORD *)v33 + 1) = v30;
  v33[16] = v31;
  v34 = (_QWORD *)((char *)v17 + v15[7]);
  *v34 = swift_getKeyPath(&unk_269278);
  v35 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v34, v35, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v37 = v54;
  v36 = v55;
  v38 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v58, v56);
  v39 = *(unsigned __int8 *)(v12 + 80);
  v40 = (v39 + 32) & ~v39;
  v41 = *(unsigned __int8 *)(v36 + 80);
  v42 = v36;
  v43 = (v53 + v41 + v40) & ~v41;
  v44 = swift_allocObject(&unk_2F5820, v43 + v57, v39 | v41 | 7);
  v45 = v60;
  *(_QWORD *)(v44 + 16) = v59;
  *(_QWORD *)(v44 + 24) = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v44 + v40, v14, v11);
  v46 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v44 + v43, v37, v38);
  v47 = static Alignment.center.getter(v46);
  v49 = v48;
  v50 = v61;
  sub_220F08((uint64_t)v17, v61);
  v51 = (void (**)(uint64_t@<X8>))(v50 + *(int *)(sub_5C154(&qword_32B888) + 36));
  *v51 = sub_21FE48;
  v51[1] = 0;
  v51[2] = (void (*)(uint64_t@<X8>))sub_220E84;
  v51[3] = (void (*)(uint64_t@<X8>))v44;
  v51[4] = (void (*)(uint64_t@<X8>))v47;
  v51[5] = v49;
  return sub_220F4C((uint64_t)v17);
}

void sub_21FE48(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = GeometryProxy.size.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_21FE70(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  int *v11;

  v7 = *a1;
  v8 = a1[1];
  v9 = GeometryProxy.size.getter(a1);
  v11 = (int *)type metadata accessor for EditFinishedDateView(0, a4, a5, v10);
  return sub_21E6E0(v11, v7, v8, v9);
}

uint64_t sub_21FEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  double v12;
  double v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v35;
  uint64_t v36;
  uint64_t v37;

  v5 = (int *)type metadata accessor for EditFinishedDateView(0, a3, a4, a4);
  v6 = (char *)(a1 + v5[12]);
  v7 = *v6;
  v8 = *((_QWORD *)v6 + 1);
  LOBYTE(v36) = *v6;
  v37 = v8;
  v9 = sub_5C154(&qword_32B840);
  v10 = State.wrappedValue.getter(&v35, v9);
  if (LOBYTE(v35) == 1)
  {
    v11.n128_f64[0] = GeometryProxy.size.getter(v10);
    v12 = v11.n128_f64[0];
    v13 = sub_21E5E4(v11);
    LOBYTE(v36) = v7;
    v37 = v8;
    State.wrappedValue.getter(&v35, v9);
    v14 = LOBYTE(v35);
    v15 = (uint64_t *)(a1 + v5[16]);
    v17 = *v15;
    v16 = v15[1];
    v36 = v17;
    v37 = v16;
    v18 = sub_5C154(&qword_32B880);
    State.wrappedValue.getter(&v35, v18);
    v19 = v35;
    v20 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)&v35 + 16))
    {
      v21 = sub_58348(v14);
      if ((v22 & 1) != 0)
        v20 = *(double *)(*(_QWORD *)(*(_QWORD *)&v19 + 56) + 16 * v21);
    }
    swift_bridgeObjectRelease(*(_QWORD *)&v19);
    v23 = v12 + v13 + v13 < v20;
  }
  else
  {
    v23 = 0;
  }
  v24 = (char *)(a1 + v5[13]);
  v25 = *v24;
  v26 = *((_QWORD *)v24 + 1);
  LOBYTE(v36) = v25;
  v37 = v26;
  LOBYTE(v35) = v23;
  v27 = sub_5C154(&qword_325B50);
  v28 = State.wrappedValue.setter(&v35, v27);
  v29 = GeometryProxy.size.getter(v28);
  v30 = (uint64_t *)(a1 + v5[14]);
  v31 = *v30;
  v32 = v30[1];
  v35 = v29;
  v36 = v31;
  v37 = v32;
  v33 = sub_5C154(&qword_328BA0);
  return State.wrappedValue.setter(&v35, v33);
}

uint64_t sub_2200A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = (int *)type metadata accessor for EditFinishedDateView(0, a2, a3, a4);
  v6 = *((_QWORD *)v5 - 1);
  __chkstk_darwin(v5);
  v8 = (char *)&v36 - v7;
  v10 = (char *)(a1 + *(int *)(v9 + 52));
  v11 = *v10;
  v12 = *((_QWORD *)v10 + 1);
  LOBYTE(v38) = v11;
  v39 = v12;
  v13 = sub_5C154(&qword_325B50);
  State.wrappedValue.getter(&v37, v13);
  v14 = v37;
  (*(void (**)(char *, uint64_t, int *))(v6 + 16))(v8, a1, v5);
  if (v14 != 1)
    return (*(uint64_t (**)(char *, int *))(v6 + 8))(v8, v5);
  v15 = &v8[v5[12]];
  v16 = *v15;
  v17 = *((_QWORD *)v15 + 1);
  LOBYTE(v38) = v16;
  v39 = v17;
  v18 = sub_5C154(&qword_32B840);
  State.wrappedValue.getter(&v37, v18);
  result = (*(uint64_t (**)(char *, int *))(v6 + 8))(v8, v5);
  if ((v37 & 1) == 0)
  {
    v20 = (char *)(a1 + v5[12]);
    v21 = *v20;
    v22 = *((_QWORD *)v20 + 1);
    LOBYTE(v38) = v21;
    v39 = v22;
    State.wrappedValue.getter(&v37, v18);
    v23 = v37;
    v24 = (uint64_t *)(a1 + v5[16]);
    v26 = *v24;
    v25 = v24[1];
    v38 = v26;
    v39 = v25;
    v27 = sub_5C154(&qword_32B880);
    State.wrappedValue.getter(&v37, v27);
    v28 = v37;
    v29 = 0;
    if (*(_QWORD *)(v37 + 16))
    {
      v30 = sub_58348(v23);
      if ((v31 & 1) != 0)
        v29 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 16 * v30 + 8);
    }
    swift_bridgeObjectRelease(v28);
    v32 = (uint64_t *)(a1 + v5[15]);
    v33 = *v32;
    v34 = v32[1];
    v37 = v29;
    v38 = v33;
    v39 = v34;
    v35 = sub_5C154(&qword_328BA0);
    return State.wrappedValue.setter(&v37, v35);
  }
  return result;
}

uint64_t sub_220278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[6];

  v43 = a2;
  v5 = type metadata accessor for ButtonViewModel.Size(0, a3);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  v6 = __chkstk_darwin(v5);
  v38 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BooksBorderlessButtonStyle(0, v6);
  v9 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  v42 = v9;
  __chkstk_darwin(v8);
  v36 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v13);
  v14 = sub_5C154(&qword_3261F0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5C154(&qword_32B828);
  v37 = *(_QWORD *)(v35 - 8);
  v17 = __chkstk_darwin(v35);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ButtonRole(0, v17);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 1, 1, v20);
  sub_21E440(a1, v44);
  v21 = v45;
  v22 = v46;
  v23 = sub_66898(v44, v45);
  v47[3] = v21;
  v47[4] = *(_QWORD *)(v22 + 8);
  v24 = sub_668BC(v47);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v24, v23, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  v25 = *(unsigned __int8 *)(v11 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_2F57A8, v26 + v12, v25 | 7);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v27 + v26, (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  BooksActionButton.init(role:action:label:)(v16, v47, sub_220870, v27, &type metadata for Text, &protocol witness table for Text);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v44);
  v28 = v38;
  *v38 = 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v39 + 104))(v28, enum case for ButtonViewModel.Size.large(_:), v40);
  v29 = v36;
  BooksBorderlessButtonStyle.init(size:)(v28);
  v30 = sub_67060(&qword_32B830, &qword_32B828, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  v31 = sub_648E0(&qword_32B838, (uint64_t (*)(uint64_t))&type metadata accessor for BooksBorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BooksBorderlessButtonStyle);
  v32 = v35;
  v33 = v41;
  View.buttonStyle<A>(_:)(v29, v35, v41, v30, v31);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v19, v32);
}

uint64_t sub_220598@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_21ECC0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_2205A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditFinishedDateView(0, v6, v7, a2) - 8) + 80);
  return sub_21F67C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_220610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B7F0;
  if (!qword_32B7F0)
  {
    v1 = sub_667D0(&qword_32B7C8);
    sub_67060(&qword_32B7F8, &qword_32B800, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B7F0);
  }
  return result;
}

unint64_t sub_220694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B808;
  if (!qword_32B808)
  {
    v1 = sub_667D0(&qword_32B7D0);
    sub_648E0(&qword_32B810, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B808);
  }
  return result;
}

unint64_t sub_220718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B818;
  if (!qword_32B818)
  {
    v1 = sub_667D0(&qword_32B7D8);
    sub_22077C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_32B818);
  }
  return result;
}

unint64_t sub_22077C()
{
  unint64_t result;
  uint64_t v1;
  __n128 v2;
  _QWORD v3[4];

  result = qword_32B820;
  if (!qword_32B820)
  {
    v1 = sub_667D0(&qword_32B7E8);
    v3[0] = sub_667D0(&qword_32B828);
    v3[1] = type metadata accessor for BooksBorderlessButtonStyle(255, v2);
    v3[2] = sub_67060(&qword_32B830, &qword_32B828, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v3[3] = sub_648E0(&qword_32B838, (uint64_t (*)(uint64_t))&type metadata accessor for BooksBorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BooksBorderlessButtonStyle);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B820);
  }
  return result;
}

uint64_t sub_220870@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_17EB50();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_2208C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for EditFinishedDateView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  return sub_21FEE8(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

unint64_t sub_220944()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B868;
  if (!qword_32B868)
  {
    v1 = sub_667D0(&qword_32B850);
    sub_67060(&qword_32B870, &qword_32B848, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B868);
  }
  return result;
}

unint64_t sub_2209C8()
{
  unint64_t result;

  result = qword_32B878;
  if (!qword_32B878)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_32B878);
  }
  return result;
}

uint64_t sub_220A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for EditFinishedDateView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v4 + v9));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9 + v6[9], v5);
  v11 = v4 + v9 + v6[11];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = sub_5C154(&qword_320370);
  swift_release(*(_QWORD *)(v11 + *(int *)(v13 + 28)));
  swift_release(*(_QWORD *)(v4 + v9 + v6[12] + 8));
  swift_release(*(_QWORD *)(v4 + v9 + v6[13] + 8));
  swift_release(*(_QWORD *)(v4 + v9 + v6[14] + 8));
  swift_release(*(_QWORD *)(v4 + v9 + v6[15] + 8));
  v14 = (_QWORD *)(v4 + v9 + v6[16]);
  swift_bridgeObjectRelease(*v14);
  swift_release(v14[1]);
  v15 = (_QWORD *)(v4 + v9 + v6[17]);
  v16 = sub_5C154(&qword_320268);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for UUID(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v19 = (_QWORD *)(v4 + v9 + v6[18]);
  v20 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else
  {
    swift_release(*v19);
  }
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_220BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditFinishedDateView(0, v5, v6, a4) - 8) + 80);
  return sub_2200A8(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t sub_220C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for EditFinishedDateView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v28 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for GeometryProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v27 = *(_QWORD *)(v10 + 64);
  v12 = (char *)(v4 + ((v8 + 32) & ~v8));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v12);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v12[v6[9]], v5);
  v13 = &v12[v6[11]];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = sub_5C154(&qword_320370);
  swift_release(*(_QWORD *)&v13[*(int *)(v15 + 28)]);
  swift_release(*(_QWORD *)&v12[v6[12] + 8]);
  swift_release(*(_QWORD *)&v12[v6[13] + 8]);
  swift_release(*(_QWORD *)&v12[v6[14] + 8]);
  swift_release(*(_QWORD *)&v12[v6[15] + 8]);
  v16 = &v12[v6[16]];
  swift_bridgeObjectRelease(*(_QWORD *)v16);
  swift_release(*((_QWORD *)v16 + 1));
  v17 = &v12[v6[17]];
  v18 = sub_5C154(&qword_320268);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for UUID(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  else
  {
    swift_release(*(_QWORD *)v17);
  }
  v21 = &v12[v6[18]];
  v22 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*(_QWORD *)v21);
  }
  v24 = (((v8 + 32) & ~v8) + v28 + v11) & ~v11;
  v25 = v24 + v27;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4 + v24, v9);
  return swift_deallocObject(v4, v25, v8 | v11 | 7);
}

uint64_t sub_220E84(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for EditFinishedDateView(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  return sub_21FE70(a1, v4 + v9, v4 + ((v9 + v10 + v11) & ~v11), v6, v7);
}

uint64_t sub_220F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinishedDatePickerView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_220F4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FinishedDatePickerView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_220F88()
{
  __n128 v0;
  uint64_t TupleTypeMetadata;
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;

  sub_667D0(&qword_32B7C8);
  sub_667D0(&qword_32B7D0);
  sub_667D0(&qword_32B7D8);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4, v0);
  v2 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v2);
  v4 = type metadata accessor for VStack(255, v2, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v4);
}

char *sub_221038(uint64_t a1, void *a2, uint64_t a3, void *a4, unsigned int a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t), uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t), uint64_t a11)
{
  char *v11;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  int v87;
  uint64_t v88;
  char v89[24];
  _BYTE v90[56];
  uint64_t v91;
  _QWORD v92[2];
  uint64_t v93;
  _UNKNOWN **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v85 = a8;
  v86 = a7;
  v77 = a6;
  v88 = a3;
  v80 = a2;
  v81 = a1;
  v79 = a11;
  v78 = a10;
  v84 = a9;
  v83 = type metadata accessor for PageRootView(0);
  __chkstk_darwin(v83);
  v82 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_5C154(&qword_322410);
  __chkstk_darwin(v72);
  v69 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v11[qword_31F820];
  *((_QWORD *)v17 + 1) = 0;
  swift_unknownObjectWeakInit(v17);
  swift_unknownObjectWeakInit(&v11[qword_31F8D0]);
  v18 = qword_31F8D8;
  v19 = type metadata accessor for RootHostingControllerNavigationItem();
  v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v19));
  v21 = v11;
  v68 = v21;
  *(_QWORD *)&v11[v18] = objc_msgSend(v20, "init");
  v22 = &v21[qword_31F8F0];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  *(_QWORD *)&v21[qword_31F8F8] = &_swiftEmptySetSingleton;
  v74 = type metadata accessor for HostProxy(0);
  v23 = (_QWORD *)swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v24 = sub_5C154(&qword_31FA68);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v23[2] = PassthroughSubject.init()();
  v25 = swift_unknownObjectWeakInit(v23 + 3);
  v23[4] = 0;
  v23[5] = 0;
  ObservationRegistrar.init()(v25);
  *(_QWORD *)&v21[qword_31F828] = v23;
  v26 = type metadata accessor for GeometryCache(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = GeometryCache.init()();
  *(_QWORD *)&v21[qword_31F8E0] = v27;
  v71 = type metadata accessor for NavigationProvider();
  v28 = swift_allocObject(v71, 24, 7);
  v70 = v28;
  swift_unknownObjectWeakInit(v28 + 16);
  *(_QWORD *)&v21[qword_31F8E8] = v28;
  v29 = type metadata accessor for HostingControllerVisibilityStateManager(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v67 = HostingControllerVisibilityStateManager.init()();
  *(_QWORD *)&v21[qword_31F848] = v67;
  v30 = &v21[qword_31F830];
  *(_QWORD *)v30 = a4;
  v87 = a5 & 1;
  v30[8] = a5 & 1;
  v76 = (a5 >> 8) & 1;
  v30[9] = v76;
  *((_QWORD *)v30 + 2) = a6;
  v31 = v86;
  *((_QWORD *)v30 + 3) = v86;
  v32 = sub_5C154(&qword_31F010);
  v33 = type metadata accessor for Dependency(0);
  v75 = swift_allocObject(v32, ((*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80))+ 13 * *(_QWORD *)(*(_QWORD *)(v33 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80) | 7);
  *(_OWORD *)(v75 + 16) = xmmword_257DB0;
  v34 = v69;
  sub_5E1A4(v88, v69, &qword_322410);
  swift_bridgeObjectRetain(v31);
  v73 = a4;
  Dependency.init<A>(satisfying:with:)(v72, v34, v72);
  v35 = type metadata accessor for BATracker(0);
  v91 = (uint64_t)v80;
  v80 = v80;
  Dependency.init<A>(satisfying:with:)(v35, &v91, v35);
  v36 = type metadata accessor for ExposureCollector(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v91 = ExposureCollector.init()();
  Dependency.init<A>(satisfying:with:)(v36, &v91, v36);
  LOBYTE(v91) = v87;
  Dependency.init<A>(satisfying:with:)(&type metadata for FigaroPageConfiguration, &v91, &type metadata for FigaroPageConfiguration);
  v91 = v27;
  swift_retain(v27);
  Dependency.init<A>(satisfying:with:)(v26, &v91, v26);
  v91 = v67;
  swift_retain(v67);
  v37 = v29;
  v38 = v29;
  v39 = v78;
  Dependency.init<A>(satisfying:with:)(v37, &v91, v38);
  v91 = (uint64_t)v23;
  swift_retain(v23);
  v40 = v74;
  Dependency.init<A>(satisfying:with:)(v74, &v91, v74);
  v41 = sub_5C154(&qword_31FA88);
  type metadata accessor for BasicImpressionsTracker(0);
  v91 = BasicImpressionsTracker.__allocating_init(threshold:)(1.0);
  v92[0] = &protocol witness table for BasicImpressionsTracker;
  v42 = v41;
  v43 = v41;
  v44 = v79;
  Dependency.init<A>(satisfying:with:)(v42, &v91, v43);
  v45 = sub_5C154(&qword_31FA90);
  v93 = v71;
  v94 = &protocol witness table for NavigationProvider;
  v91 = v70;
  swift_retain(v70);
  Dependency.init<A>(satisfying:with:)(v45, &v91, v45);
  v46 = type metadata accessor for PageLifecycleHandler();
  v47 = swift_allocObject(v46, 24, 7);
  v48 = type metadata accessor for Page.LifecycleInfo();
  v49 = swift_allocObject(v48, 24, 7);
  *(_QWORD *)(v49 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v47 + 16) = v49;
  v91 = v47;
  v50 = v81;
  Dependency.init<A>(satisfying:with:)(v46, &v91, v46);
  v51 = sub_5C154(&qword_31FA98);
  v93 = v40;
  v94 = (_UNKNOWN **)sub_648E0(&qword_31FAA0, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v91 = (uint64_t)v23;
  swift_retain(v23);
  Dependency.init<A>(satisfying:with:)(v51, &v91, v51);
  v52 = sub_5C154(&qword_31FAA8);
  v93 = v40;
  v94 = (_UNKNOWN **)sub_648E0((unint64_t *)&unk_31FAB0, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v91 = (uint64_t)v23;
  swift_retain(v23);
  Dependency.init<A>(satisfying:with:)(v52, &v91, v52);

  v91 = (uint64_t)v73;
  LOBYTE(v92[0]) = v87;
  v53 = (uint64_t)v82;
  BYTE1(v92[0]) = v76;
  v92[1] = v77;
  v93 = v86;
  Dependency.init<A>(satisfying:with:)(&type metadata for RootHostingControllerConfiguration, &v91, &type metadata for RootHostingControllerConfiguration);
  v54 = v75;
  v91 = v75;
  v55 = sub_5C154((uint64_t *)&unk_31FEC0);
  v56 = sub_67060((unint64_t *)&qword_31FAC0, (uint64_t *)&unk_31FEC0, (uint64_t)&protocol conformance descriptor for [A]);
  v57 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(&v91, v55, v56);
  swift_bridgeObjectRelease(v54);
  swift_retain(v57);
  sub_6C24C((uint64_t)v39, v44);
  v85(v57);
  v91 = v57;
  v94 = (_UNKNOWN **)v83;
  v95 = sub_648E0(&qword_32B9C8, type metadata accessor for PageRootView, (uint64_t)&protocol conformance descriptor for PageRootView);
  v58 = sub_668BC(v92);
  sub_5E11C(v53, (uint64_t)v58, type metadata accessor for PageRootView);
  if (v39)
  {
    swift_retain(v57);
    sub_6C24C((uint64_t)v39, v44);
    v59 = v39(v57, v53);
    v61 = v60;
    sub_6C2DC((uint64_t)v39, v44);
    sub_6C2DC((uint64_t)v39, v44);
    swift_release(v57);
  }
  else
  {
    v59 = 0;
    v61 = 0;
  }
  sub_6685C(v53, type metadata accessor for PageRootView);
  v96 = v59;
  v97 = v61;
  sub_6C2A0(&v91, (uint64_t)v90);
  v62 = (char *)UIHostingController.init(rootView:)(v90);
  v63 = *(_QWORD *)&v62[qword_31F8E8] + 16;
  swift_beginAccess(v63, v90, 1, 0);
  swift_unknownObjectWeakAssign(v63, v62);
  v64 = *(_QWORD *)&v62[qword_31F828] + 24;
  swift_beginAccess(v64, v89, 1, 0);
  swift_unknownObjectWeakAssign(v64, v62);
  v65 = v62;
  sub_68620();
  sub_68B28();

  sub_6C2DC((uint64_t)v39, v44);
  swift_release(v57);
  swift_release(v50);

  sub_5E09C(v88, &qword_322410);
  sub_6C108(&v91);
  return v65;
}

char *sub_221974(uint64_t a1, void *a2, uint64_t a3, void *a4, unsigned int a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t), uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t), uint64_t a11)
{
  char *v11;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  int v87;
  uint64_t v88;
  char v89[24];
  _BYTE v90[56];
  uint64_t v91;
  _QWORD v92[2];
  uint64_t v93;
  _UNKNOWN **v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v85 = a8;
  v86 = a7;
  v77 = a6;
  v88 = a3;
  v80 = a2;
  v81 = a1;
  v79 = a11;
  v78 = a10;
  v84 = a9;
  v83 = sub_5C154(&qword_3202E0);
  __chkstk_darwin(v83);
  v82 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_5C154(&qword_322410);
  __chkstk_darwin(v72);
  v69 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v11[qword_31F820];
  *((_QWORD *)v17 + 1) = 0;
  swift_unknownObjectWeakInit(v17);
  swift_unknownObjectWeakInit(&v11[qword_31F8D0]);
  v18 = qword_31F8D8;
  v19 = type metadata accessor for RootHostingControllerNavigationItem();
  v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v19));
  v21 = v11;
  v68 = v21;
  *(_QWORD *)&v11[v18] = objc_msgSend(v20, "init");
  v22 = &v21[qword_31F8F0];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  *(_QWORD *)&v21[qword_31F8F8] = &_swiftEmptySetSingleton;
  v74 = type metadata accessor for HostProxy(0);
  v23 = (_QWORD *)swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v24 = sub_5C154(&qword_31FA68);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v23[2] = PassthroughSubject.init()();
  v25 = swift_unknownObjectWeakInit(v23 + 3);
  v23[4] = 0;
  v23[5] = 0;
  ObservationRegistrar.init()(v25);
  *(_QWORD *)&v21[qword_31F828] = v23;
  v26 = type metadata accessor for GeometryCache(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = GeometryCache.init()();
  *(_QWORD *)&v21[qword_31F8E0] = v27;
  v71 = type metadata accessor for NavigationProvider();
  v28 = swift_allocObject(v71, 24, 7);
  v70 = v28;
  swift_unknownObjectWeakInit(v28 + 16);
  *(_QWORD *)&v21[qword_31F8E8] = v28;
  v29 = type metadata accessor for HostingControllerVisibilityStateManager(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v67 = HostingControllerVisibilityStateManager.init()();
  *(_QWORD *)&v21[qword_31F848] = v67;
  v30 = &v21[qword_31F830];
  *(_QWORD *)v30 = a4;
  v87 = a5 & 1;
  v30[8] = a5 & 1;
  v76 = (a5 >> 8) & 1;
  v30[9] = v76;
  *((_QWORD *)v30 + 2) = a6;
  v31 = v86;
  *((_QWORD *)v30 + 3) = v86;
  v32 = sub_5C154(&qword_31F010);
  v33 = type metadata accessor for Dependency(0);
  v75 = swift_allocObject(v32, ((*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80))+ 13 * *(_QWORD *)(*(_QWORD *)(v33 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80) | 7);
  *(_OWORD *)(v75 + 16) = xmmword_257DB0;
  v34 = v69;
  sub_5E1A4(v88, v69, &qword_322410);
  swift_bridgeObjectRetain(v31);
  v73 = a4;
  Dependency.init<A>(satisfying:with:)(v72, v34, v72);
  v35 = type metadata accessor for BATracker(0);
  v91 = (uint64_t)v80;
  v80 = v80;
  Dependency.init<A>(satisfying:with:)(v35, &v91, v35);
  v36 = type metadata accessor for ExposureCollector(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v91 = ExposureCollector.init()();
  Dependency.init<A>(satisfying:with:)(v36, &v91, v36);
  LOBYTE(v91) = v87;
  Dependency.init<A>(satisfying:with:)(&type metadata for FigaroPageConfiguration, &v91, &type metadata for FigaroPageConfiguration);
  v91 = v27;
  swift_retain(v27);
  Dependency.init<A>(satisfying:with:)(v26, &v91, v26);
  v91 = v67;
  swift_retain(v67);
  v37 = v29;
  v38 = v29;
  v39 = v78;
  Dependency.init<A>(satisfying:with:)(v37, &v91, v38);
  v91 = (uint64_t)v23;
  swift_retain(v23);
  v40 = v74;
  Dependency.init<A>(satisfying:with:)(v74, &v91, v74);
  v41 = sub_5C154(&qword_31FA88);
  type metadata accessor for BasicImpressionsTracker(0);
  v91 = BasicImpressionsTracker.__allocating_init(threshold:)(1.0);
  v92[0] = &protocol witness table for BasicImpressionsTracker;
  v42 = v41;
  v43 = v41;
  v44 = v79;
  Dependency.init<A>(satisfying:with:)(v42, &v91, v43);
  v45 = sub_5C154(&qword_31FA90);
  v93 = v71;
  v94 = &protocol witness table for NavigationProvider;
  v91 = v70;
  swift_retain(v70);
  Dependency.init<A>(satisfying:with:)(v45, &v91, v45);
  v46 = type metadata accessor for PageLifecycleHandler();
  v47 = swift_allocObject(v46, 24, 7);
  v48 = type metadata accessor for Page.LifecycleInfo();
  v49 = swift_allocObject(v48, 24, 7);
  *(_QWORD *)(v49 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v47 + 16) = v49;
  v91 = v47;
  v50 = v81;
  Dependency.init<A>(satisfying:with:)(v46, &v91, v46);
  v51 = sub_5C154(&qword_31FA98);
  v93 = v40;
  v94 = (_UNKNOWN **)sub_648E0(&qword_31FAA0, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v91 = (uint64_t)v23;
  swift_retain(v23);
  Dependency.init<A>(satisfying:with:)(v51, &v91, v51);
  v52 = sub_5C154(&qword_31FAA8);
  v93 = v40;
  v94 = (_UNKNOWN **)sub_648E0((unint64_t *)&unk_31FAB0, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v91 = (uint64_t)v23;
  swift_retain(v23);
  Dependency.init<A>(satisfying:with:)(v52, &v91, v52);

  v91 = (uint64_t)v73;
  LOBYTE(v92[0]) = v87;
  v53 = (uint64_t)v82;
  BYTE1(v92[0]) = v76;
  v92[1] = v77;
  v93 = v86;
  Dependency.init<A>(satisfying:with:)(&type metadata for RootHostingControllerConfiguration, &v91, &type metadata for RootHostingControllerConfiguration);
  v54 = v75;
  v91 = v75;
  v55 = sub_5C154((uint64_t *)&unk_31FEC0);
  v56 = sub_67060((unint64_t *)&qword_31FAC0, (uint64_t *)&unk_31FEC0, (uint64_t)&protocol conformance descriptor for [A]);
  v57 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(&v91, v55, v56);
  swift_bridgeObjectRelease(v54);
  swift_retain(v57);
  sub_6C24C((uint64_t)v39, v44);
  v85(v57);
  v91 = v57;
  v94 = (_UNKNOWN **)v83;
  v95 = sub_22692C();
  v58 = sub_668BC(v92);
  sub_5E1A4(v53, (uint64_t)v58, &qword_3202E0);
  if (v39)
  {
    swift_retain(v57);
    sub_6C24C((uint64_t)v39, v44);
    v59 = v39(v57, v53);
    v61 = v60;
    sub_6C2DC((uint64_t)v39, v44);
    sub_6C2DC((uint64_t)v39, v44);
    swift_release(v57);
  }
  else
  {
    v59 = 0;
    v61 = 0;
  }
  sub_5E09C(v53, &qword_3202E0);
  v96 = v59;
  v97 = v61;
  sub_6C2A0(&v91, (uint64_t)v90);
  v62 = (char *)UIHostingController.init(rootView:)(v90);
  v63 = *(_QWORD *)&v62[qword_31F8E8] + 16;
  swift_beginAccess(v63, v90, 1, 0);
  swift_unknownObjectWeakAssign(v63, v62);
  v64 = *(_QWORD *)&v62[qword_31F828] + 24;
  swift_beginAccess(v64, v89, 1, 0);
  swift_unknownObjectWeakAssign(v64, v62);
  v65 = v62;
  sub_68620();
  sub_68B28();

  sub_6C2DC((uint64_t)v39, v44);
  swift_release(v57);
  swift_release(v50);

  sub_5E09C(v88, &qword_322410);
  sub_6C108(&v91);
  return v65;
}

id sub_22229C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  void *v7;
  void *v8;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  objc_class *v21;
  _BYTE *v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  id v28;
  char *v29;
  char *v30;
  id v31;
  id v32;
  void *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  uint64_t v42;
  id v44;
  objc_class *ObjectType;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  objc_super v54;
  objc_super v55;

  v8 = v7;
  v44 = a3;
  ObjectType = (objc_class *)swift_getObjectType();
  v15 = type metadata accessor for UIHostingControllerSizingOptions(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_322410);
  __chkstk_darwin(v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (objc_class *)type metadata accessor for NavigationContext();
  v22 = objc_allocWithZone(v21);
  v22[OBJC_IVAR___BSUINavigationContext_isInCard] = 0;
  v22[OBJC_IVAR___BSUINavigationContext_isInModal] = 1;
  v55.receiver = v22;
  v55.super_class = v21;
  v23 = v8;
  v24 = objc_msgSendSuper2(&v55, "init");
  v46 = a4;
  v25 = a4;
  v26 = a2;
  sub_5E1A4(v25, (uint64_t)v20, &qword_322410);
  v49 = a5;
  v50 = a6;
  v47 = a1;
  v51 = a1;
  v52 = a7;
  objc_allocWithZone((Class)type metadata accessor for RootHostingController(0));
  swift_retain(a2);
  v27 = (Class)v44;
  v28 = v24;
  v29 = sub_221974(a2, v27, (uint64_t)v20, v28, 0, 0, 0, (void (*)(uint64_t))sub_226914, (uint64_t)v48, 0, 0);
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  dispatch thunk of UIHostingController.sizingOptions.setter(v17);
  *(_QWORD *)&v23[qword_327E70] = v29;
  v30 = v29;

  v54.receiver = v23;
  v54.super_class = ObjectType;
  v31 = objc_msgSendSuper2(&v54, "initWithRootViewController:", v30);
  v32 = objc_msgSend(v31, "sheetPresentationController");
  if (v32)
  {
    v33 = v32;
    v34 = static SizeConstants.CornerRadius.sheet.getter(v32);
    UISheetPresentationController.preferredCornerRadius.setter(*(_QWORD *)&v34, 0);
    v35 = sub_5C154(&qword_322430);
    v36 = swift_allocObject(v35, 40, 7);
    *(_OWORD *)(v36 + 16) = xmmword_25BE20;
    sub_5C194(0, &qword_322438, UISheetPresentationControllerDetent_ptr);
    v37 = swift_allocObject(&unk_2F5990, 24, 7);
    swift_unknownObjectWeakInit(v37 + 16);
    swift_retain(v37);
    v38 = static UISheetPresentationControllerDetent.custom(identifier:resolver:)(0, sub_226924, v37);
    v39 = swift_release_n(v37, 2);
    *(_QWORD *)(v36 + 32) = v38;
    v53 = v36;
    specialized Array._endMutation()(v39);
    v40 = v53;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v33, "setDetents:", isa, swift_bridgeObjectRelease(v40).n128_f64[0]);
    swift_release(v26);

    v27 = isa;
  }
  else
  {
    swift_release(v26);
  }

  swift_bridgeObjectRelease(0);
  sub_5E09C(v46, &qword_322410);
  v42 = type metadata accessor for Models.FlowBackAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v47, v42);
  return v31;
}

uint64_t sub_22262C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v38 = a4;
  v40 = a5;
  v10 = sub_5C154(&qword_32B990);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_32B970);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_5C154(&qword_3202D8);
  v17 = *(_QWORD *)(v39 - 8);
  v18 = __chkstk_darwin(v39);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a2;
  v45 = a3;
  v46 = a1;
  v21 = static Axis.Set.vertical.getter(v18);
  v22 = sub_5C154(&qword_32B9A8);
  v23 = type metadata accessor for PriceTrackingOptInView(255);
  v24 = sub_648E0(&qword_32B9B0, type metadata accessor for PriceTrackingOptInView, (uint64_t)&unk_258300);
  v47 = v23;
  v48 = v24;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.tracker(_:)>>, 1);
  v26 = ScrollView.init(_:showsIndicators:content:)(v21, 1, sub_226AB0, v43, v22, OpaqueTypeConformance2);
  LOBYTE(v21) = static Edge.Set.top.getter(v26);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v10);
  v16[*(int *)(v14 + 36)] = v21;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v42 = v38;
  v27 = sub_5C154(&qword_32B978);
  v28 = sub_226A2C();
  v29 = sub_667D0(&qword_32B998);
  v30 = sub_67060(&qword_32B9A0, &qword_32B998, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v47 = v29;
  v48 = v30;
  v31 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_226AD8, v41, v14, v27, v28, v31);
  v32 = sub_5E09C((uint64_t)v16, &qword_32B970);
  v33 = static Alignment.center.getter(v32);
  v35 = sub_74C00(0.0, 1, a6, 0, 0.0, 1, 0.0, 1, v40, 0.0, 1, 0.0, 1, v33, v34);
  return (*(uint64_t (**)(char *, uint64_t, double))(v17 + 8))(v20, v39, v35);
}

uint64_t sub_2228F8(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;

  v3 = type metadata accessor for ToolbarItemPlacement(0, a2);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_5C154(&qword_32B998);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.topBarTrailing.getter(v8);
  v16 = a1;
  v11 = type metadata accessor for UIKitActionButton(0);
  v12 = sub_648E0(&qword_32B9B8, (uint64_t (*)(uint64_t))&type metadata accessor for UIKitActionButton, (uint64_t)&protocol conformance descriptor for UIKitActionButton);
  ToolbarItem<>.init(placement:content:)(v5, sub_226AE0, v15, v11, v12);
  v13 = sub_67060(&qword_32B9A0, &qword_32B998, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v10, v6, v13);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_222A3C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v5[5];

  v2 = type metadata accessor for Models.FlowBackAction(0);
  v5[3] = v2;
  v5[4] = &protocol witness table for Models.FlowBackAction;
  v3 = sub_668BC(v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, a1, v2);
  return UIKitActionButton.init(type:action:)(7, v5);
}

uint64_t sub_222AB0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    sub_222B1C(a1);
    v7 = v6;

    return v7;
  }
  return result;
}

id sub_222B1C(void *a1)
{
  char *v1;
  char *v2;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v2 = v1;
  v4 = objc_msgSend(v1, "topViewController");
  if (!v4)
    goto LABEL_4;
  v5 = v4;
  v6 = *(void **)&v2[qword_327E70];
  sub_5C194(0, (unint64_t *)&qword_324D00, UIViewController_ptr);
  v7 = v6;
  v8 = v5;
  LOBYTE(v5) = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
    objc_msgSend(v7, "preferredContentSize");
  else
LABEL_4:
    objc_msgSend(v2, "preferredContentSize");
  return objc_msgSend(a1, "maximumDetentValue");
}

uint64_t static BSUINoticeViewController.presentNoticeForAdding(assetID:assetContentType:collectionTitle:collectionID:options:objectGraph:useNonSpecificDeterminerInMessage:tracker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;

  *(_QWORD *)(v9 + 144) = v16;
  *(_QWORD *)(v9 + 152) = v8;
  *(_BYTE *)(v9 + 200) = v15;
  *(_QWORD *)(v9 + 128) = a8;
  *(_QWORD *)(v9 + 136) = v14;
  *(_QWORD *)(v9 + 112) = a6;
  *(_QWORD *)(v9 + 120) = a7;
  *(_QWORD *)(v9 + 96) = a4;
  *(_QWORD *)(v9 + 104) = a5;
  *(_QWORD *)(v9 + 80) = a2;
  *(_QWORD *)(v9 + 88) = a3;
  *(_QWORD *)(v9 + 72) = a1;
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v9 + 160) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  *(_QWORD *)(v9 + 168) = v11;
  *(_QWORD *)(v9 + 176) = v12;
  return swift_task_switch(sub_222CA4, v11, v12);
}

uint64_t sub_222CA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = sub_5C154(&qword_329460);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v3;
  swift_bridgeObjectRetain(v3);
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  v7 = sub_53598(inited);
  *(_QWORD *)(v0 + 184) = v7;
  v8 = dword_32B89C;
  swift_retain(v1);
  v9 = v2;
  v10 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 192) = v10;
  *v10 = v0;
  v10[1] = sub_222D80;
  return sub_2258D8(v7, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 200), *(_QWORD *)(v0 + 152));
}

uint64_t sub_222D80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 184);
  v3 = *(_QWORD *)(*v0 + 136);
  v4 = *(void **)(*v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*v0 + 192));

  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_222DEC, *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
}

uint64_t sub_222DEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static BSUINoticeViewController.presentNoticeForRemoving(assetContentType:collectionTitle:options:useNonSpecificDeterminerInMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  void *ObjCClassFromMetadata;
  uint64_t v8;
  uint64_t v9;
  NSNumber v10;
  Class isa;
  NSString v12;
  Class v13;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v5);
  v8 = sub_5C154(&qword_322430);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_25BE20;
  v10.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(v9 + 32) = v10;
  specialized Array._endMutation()(v10.super.super.isa);
  sub_5C194(0, &qword_31F450, NSNumber_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  v12 = String._bridgeToObjectiveC()();
  v13 = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(ObjCClassFromMetadata, "presentNoticeForRemovingBooks:fromCollectionNamed:options:useNonSpecificDeterminerInMessage:", isa, v12, v13, a5 & 1);

}

uint64_t static BSUINoticeViewController.presentNoticeForAdding(assets:collectionTitle:collectionID:source:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;

  v8 = v7;
  v16 = sub_5C154(&qword_329740);
  __chkstk_darwin(v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  type metadata accessor for MainActor(0);
  v20 = a6;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a7);
  v22 = static MainActor.shared.getter(v21);
  v23 = (_QWORD *)swift_allocObject(&unk_2F5888, 96, 7);
  v23[2] = v22;
  v23[3] = &protocol witness table for MainActor;
  v23[4] = v8;
  v23[5] = a1;
  v23[6] = a2;
  v23[7] = a3;
  v23[8] = a4;
  v23[9] = a5;
  v23[10] = a7;
  v23[11] = a6;
  v24 = sub_1D979C((uint64_t)v18, (uint64_t)&unk_32B8A8, (uint64_t)v23);
  return swift_release(v24);
}

uint64_t sub_223084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 72) = v14;
  *(_OWORD *)(v8 + 56) = v13;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 80) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 96) = v11;
  return swift_task_switch(sub_22310C, v10, v11);
}

uint64_t sub_22310C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
    v2 = *(_QWORD *)(v0 + 64);
  else
    v2 = sub_53458((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 104) = v2;
  v3 = dword_32B8BC;
  v4 = *(id *)(v0 + 72);
  swift_bridgeObjectRetain(v1);
  v5 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 112) = v5;
  *v5 = v0;
  v5[1] = sub_2231B0;
  return sub_226150(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v2, 0, *(_QWORD *)(v0 + 16));
}

uint64_t sub_2231B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 104);
  v3 = *(void **)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));

  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_223214, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_223214()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_223244(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;

  v3 = a2;
  if (!a2)
    v3 = a1;
  v4 = a2;
  v5 = UIViewController.jetActionHandlerInContext.getter();
  v7 = v6;
  ObjectType = swift_getObjectType();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
  swift_unknownObjectRelease(v5);
  objc_msgSend(v3, "ba_effectiveAnalyticsTracker");

  return v9;
}

uint64_t sub_22347C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v9 + 72) = v15;
  *(_QWORD *)(v9 + 80) = v8;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 64) = a8;
  *(_BYTE *)(v9 + 179) = a7;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 16) = a1;
  v10 = type metadata accessor for Defaults(0);
  *(_QWORD *)(v9 + 88) = v10;
  *(_QWORD *)(v9 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v9 + 104) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v9 + 112) = v12;
  *(_QWORD *)(v9 + 120) = v13;
  return swift_task_switch(sub_223528, v12, v13);
}

uint64_t sub_223528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *ObjCClassFromMetadata;
  Class isa;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(kBKCollectionDefaultIDWantToRead);
  v4 = v3;
  if (v1)
  {
    v5 = v2;
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    if (v5 == v6 && v7 == v4)
      LOBYTE(v1) = 1;
    else
      LOBYTE(v1) = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v5, v4, 0);
  }
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(unsigned __int8 *)(v0 + 179);
  swift_bridgeObjectRelease(v4);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v9);
  sub_5C194(0, &qword_31F450, NSNumber_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(ObjCClassFromMetadata, "_noticeMessageForAddingAssets:toCollectionNamed:isAddingToWantToRead:useNonSpecificDeterminerInMessage:", isa, v13, v1 & 1, v10);

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *(_QWORD *)(v0 + 128) = v15;
    *(_QWORD *)(v0 + 136) = v17;
    if ((v1 & 1) != 0)
    {
      if (qword_31E558 != -1)
        swift_once(&qword_31E558, sub_AF598);
      v18 = *(_QWORD *)(v0 + 96);
      v19 = sub_5240C(*(_QWORD *)(v0 + 88), (uint64_t)qword_345F88);
      sub_5E11C(v19, v18, type metadata accessor for Defaults);
      v20 = sub_5C154(&qword_322090);
      ((void (*)(void))UserDefault.wrappedValue.getter)();
      v21 = *(unsigned __int8 *)(v0 + 177);
      sub_6685C(v18, type metadata accessor for Defaults);
      if (v21 == 1)
      {
        v22 = *(_QWORD *)(v0 + 96);
        sub_5E11C(v19, v22, type metadata accessor for Defaults);
        UserDefault.wrappedValue.getter(v20);
        v23 = *(_BYTE *)(v0 + 178);
        sub_6685C(v22, type metadata accessor for Defaults);
      }
      else
      {
        v23 = 1;
      }
    }
    else
    {
      v23 = 0;
    }
    *(_BYTE *)(v0 + 180) = v23;
    v25 = (_QWORD *)swift_task_alloc(dword_32B8C4);
    *(_QWORD *)(v0 + 144) = v25;
    *v25 = v0;
    v25[1] = sub_2237A4;
    return sub_223D88(v1 & 1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_2237A4(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_BYTE *)(*v1 + 181) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_2237FC, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_2237FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  char v8;
  _QWORD *v9;

  if (*(_BYTE *)(v0 + 180) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_32B8CC);
    *(_QWORD *)(v0 + 152) = v1;
    *v1 = v0;
    v1[1] = sub_2238F0;
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = 1;
    return sub_223FC4(v4, v2, v5, v3);
  }
  if (*(_BYTE *)(v0 + 181) == 2)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_32B8CC);
    *(_QWORD *)(v0 + 160) = v6;
    *v6 = v0;
    v6[1] = sub_223A70;
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = 0;
    return sub_223FC4(v4, v2, v5, v3);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  v8 = *(_BYTE *)(v0 + 181) & 1;
  v9 = (_QWORD *)swift_task_alloc(dword_32B8D4);
  *(_QWORD *)(v0 + 168) = v9;
  *v9 = v0;
  v9[1] = sub_223B00;
  return sub_224300(v8, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_2238F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_223948, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_223948()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  _QWORD *v7;

  if (qword_31E558 != -1)
    swift_once(&qword_31E558, sub_AF598);
  v1 = *(unsigned __int8 *)(v0 + 181);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = sub_5240C(*(_QWORD *)(v0 + 88), (uint64_t)qword_345F88);
  sub_5E11C(v3, v2, type metadata accessor for Defaults);
  *(_BYTE *)(v0 + 176) = 1;
  v4 = sub_5C154(&qword_322090);
  UserDefault.wrappedValue.setter(v0 + 176, v4);
  sub_6685C(v2, type metadata accessor for Defaults);
  if (v1 == 2)
  {
    swift_release(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(_BYTE *)(v0 + 181) & 1;
    v7 = (_QWORD *)swift_task_alloc(dword_32B8D4);
    *(_QWORD *)(v0 + 168) = v7;
    *v7 = v0;
    v7[1] = sub_223B00;
    return sub_224300(v6, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_223A70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_223AC8, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_223AC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_223B00()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  return swift_task_switch(sub_226B28, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_223D58(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  return swift_retain(a2);
}

uint64_t sub_223D88(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 128) = v1;
  *(_BYTE *)(v2 + 168) = a1;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 136) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 144) = v4;
  *(_QWORD *)(v2 + 152) = v5;
  return swift_task_switch(sub_223DF8, v4, v5);
}

uint64_t sub_223DF8()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  uint64_t v5;
  _QWORD *v6;

  if (*(_BYTE *)(v0 + 168) == 1
    && (v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 128)), "addToWTRDelegate"),
        (*(_QWORD *)(v0 + 160) = v1) != 0))
  {
    v2 = v1;
    v3 = v0 + 16;
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 128));
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_223EF8;
    v5 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v6 = (_QWORD *)(v0 + 80);
    v6[1] = 0x40000000;
    v6[2] = sub_225078;
    v6[3] = &unk_2F5A28;
    v6[4] = v5;
    objc_msgSend(v2, "addToWTR:priceTrackingOptInTypeWithCompletion:", ObjCClassFromMetadata, v6);
    return swift_continuation_await(v3);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 136));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
  }
}

uint64_t sub_223EF8()
{
  uint64_t v0;

  return swift_task_switch(sub_223F3C, *(_QWORD *)(*(_QWORD *)v0 + 144), *(_QWORD *)(*(_QWORD *)v0 + 152));
}

uint64_t sub_223F3C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 120);
  if (v1 >= 3)
  {
    type metadata accessor for BSUIAddToWTRDelegatePriceTrackingOptInType(0);
    *(_QWORD *)(v0 + 80) = v1;
    return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v3, v0 + 80, v3, &type metadata for UInt);
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 160));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0x10002u >> (8 * v1));
  }
}

uint64_t sub_223FC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 136) = a4;
  *(_QWORD *)(v5 + 144) = v4;
  *(_BYTE *)(v5 + 200) = a3;
  *(_QWORD *)(v5 + 120) = a1;
  *(_QWORD *)(v5 + 128) = a2;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 152) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 160) = v7;
  *(_QWORD *)(v5 + 168) = v8;
  return swift_task_switch(sub_224038, v7, v8);
}

uint64_t sub_224038()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;
  uint64_t v14;
  id v15;
  Class isa;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(unsigned __int8 *)(v0 + 200);
  sub_17EB50();
  v4 = v3;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "noticeViewAddedImage");
  *(_QWORD *)(v0 + 176) = v5;
  if (v2 == 1)
  {
    sub_17EB50();
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(v8);
  v9 = v5;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  if (v7)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone((Class)BSUINoticeViewController), "initWithTitle:message:image:confirmString:", v10, v11, v9, v12);
  *(_QWORD *)(v0 + 184) = v13;

  if (v13)
  {
    v14 = v0 + 16;
    v15 = v13;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 192) = isa;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_224268;
    v17 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v18 = (_QWORD *)(v0 + 80);
    v18[1] = 0x40000000;
    v18[2] = sub_22508C;
    v18[3] = &unk_2F5A10;
    v18[4] = v17;
    objc_msgSend(v15, "_runWithOptions:completion:", isa, v18);
    return swift_continuation_await(v14);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 152);

    swift_release(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224268()
{
  uint64_t v0;

  return swift_task_switch(sub_2242AC, *(_QWORD *)(*(_QWORD *)v0 + 160), *(_QWORD *)(*(_QWORD *)v0 + 168));
}

uint64_t sub_2242AC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 184);
  v1 = *(void **)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);

  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224300(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 160) = a4;
  *(_QWORD *)(v5 + 168) = v4;
  *(_QWORD *)(v5 + 144) = a2;
  *(_QWORD *)(v5 + 152) = a3;
  *(_BYTE *)(v5 + 336) = a1;
  v6 = sub_5C154(&qword_322410);
  *(_QWORD *)(v5 + 176) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetrics(0);
  *(_QWORD *)(v5 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Models.FlowBackAction(0);
  *(_QWORD *)(v5 + 192) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 200) = v9;
  *(_QWORD *)(v5 + 208) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 216) = v10;
  *(_QWORD *)(v5 + 224) = v11;
  return swift_task_switch(sub_2243DC, v10, v11);
}

uint64_t sub_2243DC()
{
  uint64_t v0;
  void *ObjCClassFromMetadata;
  id v2;
  id v3;
  Class isa;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 168));
  v2 = objc_msgSend(ObjCClassFromMetadata, "addToWTRDelegate");
  *(_QWORD *)(v0 + 232) = v2;
  if (!v2)
  {
    swift_release(*(_QWORD *)(v0 + 208));
    if (qword_31E600 != -1)
      swift_once(&qword_31E600, sub_126A80);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_5240C(v11, (uint64_t)qword_345FC8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "Missing delegate", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    goto LABEL_19;
  }
  v3 = v2;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(ObjCClassFromMetadata, "_presentingViewControllerForModalWithOptions:", isa);
  *(_QWORD *)(v0 + 240) = v5;

  if (!v5)
  {
    swift_release(*(_QWORD *)(v0 + 208));
    if (qword_31E600 != -1)
      swift_once(&qword_31E600, sub_126A80);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_5240C(v16, (uint64_t)qword_345FC8);
    v13 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_0, v13, v18, "Missing presenting view controller", v19, 2u);
      swift_slowDealloc(v19, -1, -1);

      swift_unknownObjectRelease(v3);
      goto LABEL_20;
    }
    swift_unknownObjectRelease(v3);
LABEL_19:

    goto LABEL_20;
  }
  v6 = (*(uint64_t (**)(id))(v0 + 152))(v5);
  *(_QWORD *)(v0 + 248) = v6;
  *(_QWORD *)(v0 + 256) = v7;
  if (v6)
  {
    v8 = dword_31FE04;
    swift_retain(v6);
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 264) = v9;
    *v9 = v0;
    v9[1] = sub_224770;
    return BaseObjectGraph.withSyncDependenciesForSwiftUI.getter();
  }
  v20 = v7;
  swift_release(*(_QWORD *)(v0 + 208));
  if (qword_31E600 != -1)
    swift_once(&qword_31E600, sub_126A80);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_5240C(v21, (uint64_t)qword_345FC8);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "Missing objectGraph", v25, 2u);
    swift_slowDealloc(v25, -1, -1);

    swift_unknownObjectRelease(v3);
  }
  else
  {

    swift_unknownObjectRelease(v3);
  }

LABEL_20:
  v26 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 264);
  v3[34] = a1;
  v3[35] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_224D58;
  else
    v5 = sub_2247D8;
  return swift_task_switch(v5, v3[27], v3[28]);
}

uint64_t sub_2247D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v1 = *(void **)(v0 + 256);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 232);
    v4 = *(_QWORD *)(v0 + 192);
    v37 = *(_QWORD *)(v0 + 240);
    v5 = *(_QWORD *)(v0 + 176);
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 168);
    v36 = *(_BYTE *)(v0 + 336) & 1;
    v8 = swift_allocObject(&unk_2F58D8, 24, 7);
    *(_QWORD *)(v0 + 288) = v8;
    swift_unknownObjectWeakInit(v8 + 16);
    v9 = swift_allocObject(&unk_2F5900, 32, 7);
    *(_QWORD *)(v0 + 296) = v9;
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v7;
    swift_retain(v2);
    v10 = v1;
    swift_unknownObjectRetain(v3);
    v12 = static ActionMetrics.notInstrumented.getter(v11);
    v13 = static Models.FlowBackAction.Dismissal.sheetDismiss.getter(v12);
    Models.FlowBackAction.init(actionMetrics:dismissal:)(v6, v13, v14);
    v15 = type metadata accessor for ActionOrigin(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
    v16 = swift_task_alloc(64);
    *(_BYTE *)(v16 + 16) = v36;
    *(_QWORD *)(v16 + 24) = &unk_32B8E8;
    *(_QWORD *)(v16 + 32) = v8;
    *(_QWORD *)(v16 + 40) = &unk_32B958;
    *(_QWORD *)(v16 + 48) = v9;
    v17 = objc_allocWithZone((Class)sub_5C154(&qword_32B960));
    v18 = sub_22229C(v4, v2, v10, v5, (uint64_t)sub_2268DC, v16, 450.0);
    *(_QWORD *)(v0 + 304) = v18;
    v19 = swift_task_dealloc(v16);
    v20 = static MainActor.shared.getter(v19);
    *(_QWORD *)(v0 + 312) = v20;
    v21 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 320) = v21;
    *(_QWORD *)(v21 + 16) = v37;
    *(_QWORD *)(v21 + 24) = v18;
    v22 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 328) = v22;
    *v22 = v0;
    v22[1] = sub_224B3C;
    return withCheckedContinuation<A>(isolation:function:_:)(v22, v20, &protocol witness table for MainActor, 0xD000000000000044, 0x8000000000275220, sub_2268EC, v21, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 208));
    if (qword_31E600 != -1)
      swift_once(&qword_31E600, sub_126A80);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_5240C(v24, (uint64_t)qword_345FC8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = *(_QWORD *)(v0 + 272);
    v31 = *(NSObject **)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 248);
    v32 = *(_QWORD *)(v0 + 232);
    if (v28)
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_0, v26, v27, "Missing tracker", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
      swift_release(v29);

      swift_unknownObjectRelease(v32);
      v26 = v31;
    }
    else
    {

      swift_unknownObjectRelease(v32);
      swift_release(v29);
    }

    swift_release_n(v30, 2);
    v34 = *(_QWORD *)(v0 + 184);
    v35 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224B3C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 320);
  v3 = *(_QWORD *)(*v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*v0 + 328));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_224BA4, *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 224));
}

uint64_t sub_224BA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 16;
  v2 = *(void **)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 168);
  UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, *(id *)(v0 + 304));
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_224C60;
  v5 = swift_continuation_init(v0 + 16, 0);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v6 = (_QWORD *)(v0 + 80);
  v6[1] = 0x40000000;
  v6[2] = sub_22508C;
  v6[3] = &unk_2F5918;
  v6[4] = v5;
  objc_msgSend(v2, "addToWTR:didShowPriceTrackingOptInWithCompletion:", ObjCClassFromMetadata, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_224C60()
{
  uint64_t v0;

  return swift_task_switch(sub_224CA4, *(_QWORD *)(*(_QWORD *)v0 + 216), *(_QWORD *)(*(_QWORD *)v0 + 224));
}

uint64_t sub_224CA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(void **)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(void **)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(void **)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 272));

  swift_release(v3);
  swift_release(v1);

  swift_release(v8);
  swift_unknownObjectRelease(v6);

  swift_release_n(v4, 2);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;

  swift_release(*(_QWORD *)(v0 + 208));
  if (qword_31E600 != -1)
    swift_once(&qword_31E600, sub_126A80);
  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = type metadata accessor for Logger(0);
  sub_5240C(v3, (uint64_t)qword_345FC8);
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 248);
  v9 = *(void **)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 232);
  if (v7)
  {
    v26 = *(void **)(v0 + 240);
    v27 = *(void **)(v0 + 256);
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v28 = v24;
    *(_DWORD *)v12 = 136315394;
    v25 = v11;
    *(_QWORD *)(v0 + 120) = v10;
    v14 = type metadata accessor for BaseObjectGraph(0);
    v15 = sub_648E0(&qword_32B8D8, (uint64_t (*)(uint64_t))&type metadata accessor for BaseObjectGraph, (uint64_t)&protocol conformance descriptor for BaseObjectGraph);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 128) = sub_57CD8(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v18);
    swift_release_n(v10, 2);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(v8);
    v19 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 136) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v12 + 14, v12 + 22);
    *v13 = v19;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl(&dword_0, v5, v6, "Failed to load dependencies in object graph: %s, error: %@", (uint8_t *)v12, 0x16u);
    v20 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v13, 1, v20);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_unknownObjectRelease(v25);
    swift_errorRelease(v8);
    swift_release_n(v10, 2);

  }
  else
  {

    swift_unknownObjectRelease(v11);
    swift_release_n(v10, 2);

    swift_errorRelease(v8);
    swift_release_n(v10, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v21 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_225078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = a2;
  return swift_continuation_resume(v2);
}

uint64_t sub_22508C(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

uint64_t sub_225094(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = v2;
  v1[7] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[8] = v3;
  v1[9] = v4;
  return swift_task_switch(sub_225104, v3, v4);
}

uint64_t sub_225104()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 80) = Strong;
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "presentedViewController");

    if (v4)
    {
      v6 = static MainActor.shared.getter(v5);
      *(_QWORD *)(v0 + 88) = v6;
      v7 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 96) = v7;
      *(_QWORD *)(v7 + 16) = v3;
      v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 104) = v8;
      *v8 = v0;
      v8[1] = sub_2252D4;
      return withCheckedContinuation<A>(isolation:function:_:)(v8, v6, &protocol witness table for MainActor, 0xD000000000000044, 0x8000000000275220, sub_226AEC, v7, (char *)&type metadata for () + 8);
    }

  }
  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_31E600 != -1)
    swift_once(&qword_31E600, sub_126A80);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_5240C(v10, (uint64_t)qword_345FC8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "Unable to dismiss opt-in sheet because presenter or presented VC is nil", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2252D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 96);
  v3 = *(_QWORD *)(*v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_22533C, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_22533C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_225378(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v4 = sub_5C154(&qword_32A350);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_2F59D0, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_2268F8;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_69F04;
  aBlock[3] = &unk_2F59E8;
  v11 = _Block_copy(aBlock);
  swift_release(v13);
  objc_msgSend(a2, "dismissViewControllerAnimated:completion:", 1, v11);
  _Block_release(v11);
}

uint64_t sub_2254AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[15] = a1;
  v2[16] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[17] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[18] = v4;
  v2[19] = v5;
  return swift_task_switch(sub_225518, v4, v5);
}

uint64_t sub_225518()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t ObjCClassFromMetadata;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0[16]);
  v0[2] = v0;
  v0[3] = sub_2255B8;
  v4 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_22508C;
  v5[3] = &unk_2F59A8;
  v5[4] = v4;
  objc_msgSend(v2, "addToWTR:didAcceptPriceTrackingOptInWithCompletion:", ObjCClassFromMetadata, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_2255B8()
{
  uint64_t v0;

  return swift_task_switch(sub_2255FC, *(_QWORD *)(*(_QWORD *)v0 + 144), *(_QWORD *)(*(_QWORD *)v0 + 152));
}

uint64_t sub_2255FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22562C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;

  v10 = a2 & 1;
  v11 = type metadata accessor for PriceTrackingOptInView(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_2692F0);
  v15 = (uint64_t *)&v13[*(int *)(v11 + 28)];
  *v15 = KeyPath;
  v16 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  *v13 = v10;
  *((_QWORD *)v13 + 1) = a3;
  *((_QWORD *)v13 + 2) = a4;
  *((_QWORD *)v13 + 3) = a5;
  *((_QWORD *)v13 + 4) = a6;
  v17 = type metadata accessor for BATracker(0);
  swift_retain(a4);
  swift_retain(a6);
  BaseObjectGraph.inject<A>(_:)(&v23, v17, v17);
  v18 = v23;
  v19 = (void *)BATracker.chain(with:)(0xD000000000000012, 0x8000000000275270);

  v20 = sub_648E0(&qword_32B9B0, type metadata accessor for PriceTrackingOptInView, (uint64_t)&unk_258300);
  View.tracker(_:)(v19, v11, v20);

  return sub_6685C((uint64_t)v13, type metadata accessor for PriceTrackingOptInView);
}

void sub_22579C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v6 = sub_5C154(&qword_32A350);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_2F5940, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_2268F8;
  v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_69F04;
  aBlock[3] = &unk_2F5958;
  v13 = _Block_copy(aBlock);
  swift_release(v15);
  objc_msgSend(a2, "presentViewController:animated:completion:", a3, 1, v13);
  _Block_release(v13);
}

uint64_t sub_2258D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a8;
  *(_BYTE *)(v8 + 171) = a7;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  v9 = type metadata accessor for Defaults(0);
  *(_QWORD *)(v8 + 72) = v9;
  *(_QWORD *)(v8 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v10 + 16) = v15;
  *(_QWORD *)(v10 + 24) = v16;
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 96) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 104) = v12;
  *(_QWORD *)(v8 + 112) = v13;
  return swift_task_switch(sub_225990, v12, v13);
}

uint64_t sub_225990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *ObjCClassFromMetadata;
  Class isa;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v26;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(kBKCollectionDefaultIDWantToRead);
  v4 = v3;
  if (v1)
  {
    v5 = v2;
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    if (v5 == v6 && v7 == v4)
      LOBYTE(v1) = 1;
    else
      LOBYTE(v1) = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v5, v4, 0);
  }
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(unsigned __int8 *)(v0 + 171);
  swift_bridgeObjectRelease(v4);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v9);
  sub_5C194(0, &qword_31F450, NSNumber_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(ObjCClassFromMetadata, "_noticeMessageForAddingAssets:toCollectionNamed:isAddingToWantToRead:useNonSpecificDeterminerInMessage:", isa, v13, v1 & 1, v10);

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *(_QWORD *)(v0 + 120) = v15;
    *(_QWORD *)(v0 + 128) = v17;
    if ((v1 & 1) != 0)
    {
      if (qword_31E558 != -1)
        swift_once(&qword_31E558, sub_AF598);
      v18 = *(_QWORD *)(v0 + 80);
      v19 = sub_5240C(*(_QWORD *)(v0 + 72), (uint64_t)qword_345F88);
      sub_5E11C(v19, v18, type metadata accessor for Defaults);
      v20 = sub_5C154(&qword_322090);
      UserDefault.wrappedValue.getter(v20);
      v21 = *(unsigned __int8 *)(v0 + 169);
      sub_6685C(v18, type metadata accessor for Defaults);
      if (v21 == 1)
      {
        v22 = *(_QWORD *)(v0 + 80);
        sub_5E11C(v19, v22, type metadata accessor for Defaults);
        UserDefault.wrappedValue.getter(v20);
        v23 = *(_BYTE *)(v0 + 170);
        sub_6685C(v22, type metadata accessor for Defaults);
      }
      else
      {
        v23 = 1;
      }
    }
    else
    {
      v23 = 0;
    }
    *(_BYTE *)(v0 + 172) = v23;
    v26 = (_QWORD *)swift_task_alloc(dword_32B8C4);
    *(_QWORD *)(v0 + 136) = v26;
    *v26 = v0;
    v26[1] = sub_225C14;
    return sub_223D88(v1 & 1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v24 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_225C14(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_BYTE *)(*v1 + 173) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_225C6C, *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112));
}

uint64_t sub_225C6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  char v8;
  _QWORD *v9;

  if (*(_BYTE *)(v0 + 172) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_32B8CC);
    *(_QWORD *)(v0 + 144) = v1;
    *v1 = v0;
    v1[1] = sub_225D60;
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = 1;
    return sub_223FC4(v4, v2, v5, v3);
  }
  if (*(_BYTE *)(v0 + 173) == 2)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_32B8CC);
    *(_QWORD *)(v0 + 160) = v6;
    *v6 = v0;
    v6[1] = sub_225F3C;
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = 0;
    return sub_223FC4(v4, v2, v5, v3);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  v8 = *(_BYTE *)(v0 + 173) & 1;
  v9 = (_QWORD *)swift_task_alloc(dword_32B8D4);
  *(_QWORD *)(v0 + 152) = v9;
  *v9 = v0;
  v9[1] = sub_225EF0;
  return sub_224300(v8, *(_QWORD *)(v0 + 56), (uint64_t)sub_226AF8, *(_QWORD *)(v0 + 88));
}

uint64_t sub_225D60()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*v0 + 144));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_225DB8, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
}

uint64_t sub_225DB8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _QWORD *v8;

  if (qword_31E558 != -1)
    swift_once(&qword_31E558, sub_AF598);
  v1 = *(unsigned __int8 *)(v0 + 173);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = sub_5240C(*(_QWORD *)(v0 + 72), (uint64_t)qword_345F88);
  sub_5E11C(v3, v2, type metadata accessor for Defaults);
  *(_BYTE *)(v0 + 168) = 1;
  v4 = sub_5C154(&qword_322090);
  UserDefault.wrappedValue.setter(v0 + 168, v4);
  sub_6685C(v2, type metadata accessor for Defaults);
  if (v1 == 2)
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v5 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_BYTE *)(v0 + 173) & 1;
    v8 = (_QWORD *)swift_task_alloc(dword_32B8D4);
    *(_QWORD *)(v0 + 152) = v8;
    *v8 = v0;
    v8[1] = sub_225EF0;
    return sub_224300(v7, *(_QWORD *)(v0 + 56), (uint64_t)sub_226AF8, *(_QWORD *)(v0 + 88));
  }
}

uint64_t sub_225EF0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  return swift_task_switch(sub_226B24, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
}

uint64_t sub_225F3C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_226B24, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
}

uint64_t sub_225F98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_32B8A4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_7BFF8;
  return sub_223084(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_226050()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));

  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_22609C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_32B8A4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_64780;
  return sub_223084(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_226150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a8;
  *(_BYTE *)(v8 + 171) = a7;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  v9 = type metadata accessor for Defaults(0);
  *(_QWORD *)(v8 + 72) = v9;
  *(_QWORD *)(v8 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v10 + 16) = v15;
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 96) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 104) = v12;
  *(_QWORD *)(v8 + 112) = v13;
  return swift_task_switch(sub_226208, v12, v13);
}

uint64_t sub_226208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *ObjCClassFromMetadata;
  Class isa;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v26;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(kBKCollectionDefaultIDWantToRead);
  v4 = v3;
  if (v1)
  {
    v5 = v2;
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    if (v5 == v6 && v7 == v4)
      LOBYTE(v1) = 1;
    else
      LOBYTE(v1) = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v5, v4, 0);
  }
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(unsigned __int8 *)(v0 + 171);
  swift_bridgeObjectRelease(v4);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v9);
  sub_5C194(0, &qword_31F450, NSNumber_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(ObjCClassFromMetadata, "_noticeMessageForAddingAssets:toCollectionNamed:isAddingToWantToRead:useNonSpecificDeterminerInMessage:", isa, v13, v1 & 1, v10);

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *(_QWORD *)(v0 + 120) = v15;
    *(_QWORD *)(v0 + 128) = v17;
    if ((v1 & 1) != 0)
    {
      if (qword_31E558 != -1)
        swift_once(&qword_31E558, sub_AF598);
      v18 = *(_QWORD *)(v0 + 80);
      v19 = sub_5240C(*(_QWORD *)(v0 + 72), (uint64_t)qword_345F88);
      sub_5E11C(v19, v18, type metadata accessor for Defaults);
      v20 = sub_5C154(&qword_322090);
      UserDefault.wrappedValue.getter(v20);
      v21 = *(unsigned __int8 *)(v0 + 169);
      sub_6685C(v18, type metadata accessor for Defaults);
      if (v21 == 1)
      {
        v22 = *(_QWORD *)(v0 + 80);
        sub_5E11C(v19, v22, type metadata accessor for Defaults);
        UserDefault.wrappedValue.getter(v20);
        v23 = *(_BYTE *)(v0 + 170);
        sub_6685C(v22, type metadata accessor for Defaults);
      }
      else
      {
        v23 = 1;
      }
    }
    else
    {
      v23 = 0;
    }
    *(_BYTE *)(v0 + 172) = v23;
    v26 = (_QWORD *)swift_task_alloc(dword_32B8C4);
    *(_QWORD *)(v0 + 136) = v26;
    *v26 = v0;
    v26[1] = sub_22648C;
    return sub_223D88(v1 & 1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v24 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_22648C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_BYTE *)(*v1 + 173) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_2264E4, *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112));
}

uint64_t sub_2264E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  char v8;
  _QWORD *v9;

  if (*(_BYTE *)(v0 + 172) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_32B8CC);
    *(_QWORD *)(v0 + 144) = v1;
    *v1 = v0;
    v1[1] = sub_2265D8;
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = 1;
    return sub_223FC4(v4, v2, v5, v3);
  }
  if (*(_BYTE *)(v0 + 173) == 2)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_32B8CC);
    *(_QWORD *)(v0 + 160) = v6;
    *v6 = v0;
    v6[1] = sub_225F3C;
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = 0;
    return sub_223FC4(v4, v2, v5, v3);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  v8 = *(_BYTE *)(v0 + 173) & 1;
  v9 = (_QWORD *)swift_task_alloc(dword_32B8D4);
  *(_QWORD *)(v0 + 152) = v9;
  *v9 = v0;
  v9[1] = sub_226768;
  return sub_224300(v8, *(_QWORD *)(v0 + 56), (uint64_t)sub_2267F4, *(_QWORD *)(v0 + 88));
}

uint64_t sub_2265D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*v0 + 144));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_226630, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
}

uint64_t sub_226630()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _QWORD *v8;

  if (qword_31E558 != -1)
    swift_once(&qword_31E558, sub_AF598);
  v1 = *(unsigned __int8 *)(v0 + 173);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = sub_5240C(*(_QWORD *)(v0 + 72), (uint64_t)qword_345F88);
  sub_5E11C(v3, v2, type metadata accessor for Defaults);
  *(_BYTE *)(v0 + 168) = 1;
  v4 = sub_5C154(&qword_322090);
  UserDefault.wrappedValue.setter(v0 + 168, v4);
  sub_6685C(v2, type metadata accessor for Defaults);
  if (v1 == 2)
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v5 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_BYTE *)(v0 + 173) & 1;
    v8 = (_QWORD *)swift_task_alloc(dword_32B8D4);
    *(_QWORD *)(v0 + 152) = v8;
    *v8 = v0;
    v8[1] = sub_226768;
    return sub_224300(v7, *(_QWORD *)(v0 + 56), (uint64_t)sub_2267F4, *(_QWORD *)(v0 + 88));
  }
}

uint64_t sub_226768()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  return swift_task_switch(sub_2267B4, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
}

uint64_t sub_2267B4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2267F4(void *a1)
{
  uint64_t v1;

  return sub_223244(a1, *(void **)(v1 + 16));
}

uint64_t sub_2267FC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_226820()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_32B8E4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_7BFF8;
  return sub_225094(v0);
}

uint64_t sub_226868()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_22688C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_32B8F4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_7BFF8;
  return sub_2254AC(v2, v3);
}

uint64_t sub_2268DC(uint64_t a1)
{
  uint64_t v1;

  return sub_22562C(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void sub_2268EC(uint64_t a1)
{
  uint64_t v1;

  sub_22579C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2268FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_22690C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_226914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_22262C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2, *(double *)(v2 + 40));
}

uint64_t sub_226924(void *a1)
{
  uint64_t v1;

  return sub_222AB0(a1, v1);
}

unint64_t sub_22692C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = qword_32B968;
  if (!qword_32B968)
  {
    v1 = sub_667D0(&qword_3202E0);
    v2 = sub_667D0(&qword_32B970);
    v3 = sub_667D0(&qword_32B978);
    v4 = sub_226A2C();
    v6 = sub_667D0(&qword_32B998);
    v7 = sub_67060(&qword_32B9A0, &qword_32B998, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B968);
  }
  return result;
}

unint64_t sub_226A2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32B980;
  if (!qword_32B980)
  {
    v1 = sub_667D0(&qword_32B970);
    sub_67060(&qword_32B988, &qword_32B990, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32B980);
  }
  return result;
}

uint64_t sub_226AB0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_226AD8(__n128 a1)
{
  uint64_t v1;

  return sub_2228F8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_226AE0()
{
  uint64_t v0;

  return sub_222A3C(*(_QWORD *)(v0 + 16));
}

void sub_226AEC(uint64_t a1)
{
  uint64_t v1;

  sub_225378(a1, *(void **)(v1 + 16));
}

uint64_t sub_226AF8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(id *)(v0 + 24);
  return swift_retain(v1);
}

ValueMetadata *type metadata accessor for EmptyComponent()
{
  return &type metadata for EmptyComponent;
}

uint64_t sub_226B48(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1EA158();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_226B88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EA158();
  return _ComponentBody.init(_:)(v2, a1, v2);
}

unint64_t sub_226BBC()
{
  unint64_t result;

  result = qword_32B9D0;
  if (!qword_32B9D0)
  {
    result = swift_getWitnessTable(&unk_26932C, &type metadata for EmptyComponent);
    atomic_store(result, (unint64_t *)&qword_32B9D0);
  }
  return result;
}

uint64_t sub_226C00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BAB5C, 1);
}

uint64_t sub_226C10()
{
  return sub_648E0(&qword_320048, type metadata accessor for EmptyComponentModel, (uint64_t)&unk_25B850);
}

void *sub_226C3C()
{
  return &protocol witness table for EmptyView;
}

uint64_t EnvironmentValues.figaroPageConfiguration.getter()
{
  unint64_t v0;

  v0 = sub_AC7C8();
  return EnvironmentValues.subscript.getter(&type metadata for FigaroPageConfigurationKey, &type metadata for FigaroPageConfigurationKey, v0);
}

uint64_t EnvironmentValues.figaroPageConfiguration.setter(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_AC7C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for FigaroPageConfigurationKey, &type metadata for FigaroPageConfigurationKey, v1);
}

void static FigaroPageConfigurationKey.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*EnvironmentValues.figaroPageConfiguration.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;

  *a1 = v1;
  v3 = sub_AC7C8();
  a1[1] = v3;
  EnvironmentValues.subscript.getter(&type metadata for FigaroPageConfigurationKey, &type metadata for FigaroPageConfigurationKey, v3);
  return sub_226D18;
}

uint64_t sub_226D18(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return EnvironmentValues.subscript.setter(a1 + 17, &type metadata for FigaroPageConfigurationKey, &type metadata for FigaroPageConfigurationKey, v1);
}

uint64_t storeEnumTagSinglePayload for FigaroPageConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_226DA0 + 4 * byte_2693F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_226DD4 + 4 * byte_2693F0[v4]))();
}

uint64_t sub_226DD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_226DDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x226DE4);
  return result;
}

uint64_t sub_226DF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x226DF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_226DFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_226E04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FigaroPageConfiguration()
{
  return &type metadata for FigaroPageConfiguration;
}

ValueMetadata *type metadata accessor for FigaroPageConfigurationKey()
{
  return &type metadata for FigaroPageConfigurationKey;
}

uint64_t sub_226E30(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(const void *, uint64_t, uint64_t);
  int *v68;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = (_OWORD *)(v4 + 40);
    v9 = a2 + 5;
    v10 = a2[8];
    if (v10)
    {
      v11 = a2[9];
      *(_QWORD *)(v4 + 64) = v10;
      *(_QWORD *)(v4 + 72) = v11;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *v8 = *v9;
      *(_OWORD *)(v4 + 56) = v13;
      *(_QWORD *)(v4 + 72) = a2[9];
    }
    v14 = a3[6];
    v15 = (void *)(v4 + v14);
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ImpressionMetrics(0);
    v18 = *(_QWORD *)(v17 - 8);
    v67 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
    v60 = v18;
    v66 = v17;
    if (v67(v16, 1, v17))
    {
      v19 = sub_5C154(&qword_31F480);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = (_QWORD *)(v4 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    v65 = *(uint64_t *)((char *)a2 + v21);
    *v22 = *v23;
    v22[1] = v24;
    *(_QWORD *)(v4 + v21) = v65;
    v68 = a3;
    v25 = a3[9];
    v26 = v4 + v25;
    v27 = (uint64_t)a2 + v25;
    v28 = *(uint64_t *)((char *)a2 + v25 + 8);
    *(_QWORD *)v26 = *(uint64_t *)((char *)a2 + v25);
    *(_QWORD *)(v26 + 8) = v28;
    v29 = *(uint64_t *)((char *)a2 + v25 + 24);
    *(_QWORD *)(v26 + 16) = *(uint64_t *)((char *)a2 + v25 + 16);
    *(_QWORD *)(v26 + 24) = v29;
    v30 = *(uint64_t *)((char *)a2 + v25 + 40);
    *(_QWORD *)(v26 + 32) = *(uint64_t *)((char *)a2 + v25 + 32);
    *(_QWORD *)(v26 + 40) = v30;
    v31 = *(uint64_t *)((char *)a2 + v25 + 56);
    *(_QWORD *)(v26 + 48) = *(uint64_t *)((char *)a2 + v25 + 48);
    *(_QWORD *)(v26 + 56) = v31;
    *(_BYTE *)(v26 + 64) = *((_BYTE *)a2 + v25 + 64);
    v32 = type metadata accessor for SegmentedControlItem(0);
    v33 = *(int *)(v32 + 36);
    v63 = v26 + v33;
    v64 = v32;
    v62 = v27 + v33;
    v34 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    v35 = swift_bridgeObjectRetain(v31);
    v61(v63, v62, v34, v35);
    v36 = *(int *)(v64 + 40);
    v37 = (void *)(v26 + v36);
    v38 = (const void *)(v27 + v36);
    if (v67(v38, 1, v66))
    {
      v39 = sub_5C154(&qword_31F480);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v37, v38, v66);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v37, 0, 1, v66);
    }
    v40 = v68[10];
    v41 = v68[11];
    v42 = (_QWORD *)(v4 + v40);
    v43 = (uint64_t *)((char *)a2 + v40);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = *(uint64_t *)((char *)a2 + v41);
    *(_QWORD *)(v4 + v41) = v45;
    v46 = v68[12];
    v47 = v4 + v46;
    v48 = (uint64_t)a2 + v46;
    v49 = *(uint64_t *)((char *)a2 + v46 + 8);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    if (v49)
    {
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *(_QWORD *)(v47 + 8) = v49;
      v50 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
      *(_QWORD *)(v47 + 24) = v50;
      v51 = v47 + 32;
      v52 = v48 + 32;
      v53 = *(_OWORD *)(v48 + 56);
      *(_OWORD *)(v47 + 56) = v53;
      v54 = v53;
      v55 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v53 - 8);
      swift_bridgeObjectRetain(v49);
      v56 = swift_bridgeObjectRetain(v50);
      v55(v51, v52, v54, v56);
    }
    else
    {
      v57 = *(_OWORD *)(v48 + 48);
      *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
      *(_OWORD *)(v47 + 48) = v57;
      *(_QWORD *)(v47 + 64) = *(_QWORD *)(v48 + 64);
      v58 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v58;
    }
  }
  return v4;
}

uint64_t sub_227184(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t result;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  if (a1[8])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 5);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8]));
  v8 = (_QWORD *)((char *)a1 + a2[9]);
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[3]);
  swift_bridgeObjectRelease(v8[5]);
  swift_bridgeObjectRelease(v8[7]);
  v9 = type metadata accessor for SegmentedControlItem(0);
  v10 = (char *)v8 + *(int *)(v9 + 36);
  v11 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (char *)v8 + *(int *)(v9 + 40);
  if (!v7(v12, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[11]));
  v13 = (_QWORD *)((char *)a1 + a2[12]);
  result = v13[1];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(v13[3]);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v13 + 4);
  }
  return result;
}

uint64_t sub_227304(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(const void *, uint64_t, uint64_t);
  int *v65;
  uint64_t v66;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = a3[6];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  v64 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  v58 = v16;
  v63 = v15;
  if (v64(v14, 1, v15))
  {
    v17 = sub_5C154(&qword_31F480);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  v62 = *(_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v22;
  *(_QWORD *)(a1 + v19) = v62;
  v65 = a3;
  v66 = a1;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a2 + v23 + 8);
  *(_QWORD *)v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(v24 + 8) = v26;
  v27 = *(_QWORD *)(a2 + v23 + 24);
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(a2 + v23 + 16);
  *(_QWORD *)(v24 + 24) = v27;
  v28 = *(_QWORD *)(a2 + v23 + 40);
  *(_QWORD *)(v24 + 32) = *(_QWORD *)(a2 + v23 + 32);
  *(_QWORD *)(v24 + 40) = v28;
  v29 = *(_QWORD *)(a2 + v23 + 56);
  *(_QWORD *)(v24 + 48) = *(_QWORD *)(a2 + v23 + 48);
  *(_QWORD *)(v24 + 56) = v29;
  *(_BYTE *)(v24 + 64) = *(_BYTE *)(a2 + v23 + 64);
  v30 = type metadata accessor for SegmentedControlItem(0);
  v31 = *(int *)(v30 + 36);
  v60 = v25 + v31;
  v61 = v24 + v31;
  v32 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v32 - 8) + 16);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  v33 = swift_bridgeObjectRetain(v29);
  v59(v61, v60, v32, v33);
  v34 = *(int *)(v30 + 40);
  v35 = (void *)(v24 + v34);
  v36 = (const void *)(v25 + v34);
  if (v64((const void *)(v25 + v34), 1, v63))
  {
    v37 = sub_5C154(&qword_31F480);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v58 + 16))(v35, v36, v63);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v35, 0, 1, v63);
  }
  v38 = v65[10];
  v39 = v65[11];
  v40 = (_QWORD *)(v66 + v38);
  v41 = (_QWORD *)(a2 + v38);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = *(_QWORD *)(a2 + v39);
  *(_QWORD *)(v66 + v39) = v43;
  v44 = v65[12];
  v45 = v66 + v44;
  v46 = a2 + v44;
  v47 = *(_QWORD *)(a2 + v44 + 8);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  if (v47)
  {
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *(_QWORD *)(v45 + 8) = v47;
    v48 = *(_QWORD *)(v46 + 24);
    *(_QWORD *)(v45 + 16) = *(_QWORD *)(v46 + 16);
    *(_QWORD *)(v45 + 24) = v48;
    v49 = v45 + 32;
    v50 = v46 + 32;
    v51 = *(_OWORD *)(v46 + 56);
    *(_OWORD *)(v45 + 56) = v51;
    v52 = v51;
    v53 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v51 - 8);
    swift_bridgeObjectRetain(v47);
    v54 = swift_bridgeObjectRetain(v48);
    v53(v49, v50, v52, v54);
  }
  else
  {
    v55 = *(_OWORD *)(v46 + 48);
    *(_OWORD *)(v45 + 32) = *(_OWORD *)(v46 + 32);
    *(_OWORD *)(v45 + 48) = v55;
    *(_QWORD *)(v45 + 64) = *(_QWORD *)(v46 + 64);
    v56 = *(_OWORD *)(v46 + 16);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *(_OWORD *)(v45 + 16) = v56;
  }
  return v66;
}

uint64_t sub_227620(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v76;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      sub_65938((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
    goto LABEL_8;
  }
  v7 = *(_OWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v8;
LABEL_8:
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for ImpressionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v76 = v13;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_13:
    v17 = sub_5C154(&qword_31F480);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_14:
  v18 = a3[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[8];
  v24 = *(_QWORD *)(a2 + v23);
  v25 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)(a2 + v26);
  v29 = *(_QWORD *)(a2 + v26 + 8);
  v30 = *(_QWORD *)(a1 + v26 + 8);
  *(_QWORD *)(v27 + 8) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
  v31 = *(_QWORD *)(v28 + 24);
  v32 = *(_QWORD *)(v27 + 24);
  *(_QWORD *)(v27 + 24) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  v33 = *(_QWORD *)(v28 + 40);
  v34 = *(_QWORD *)(v27 + 40);
  *(_QWORD *)(v27 + 40) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(v27 + 48) = *(_QWORD *)(v28 + 48);
  v35 = *(_QWORD *)(v28 + 56);
  v36 = *(_QWORD *)(v27 + 56);
  *(_QWORD *)(v27 + 56) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(_BYTE *)(v27 + 64) = *(_BYTE *)(v28 + 64);
  v37 = type metadata accessor for SegmentedControlItem(0);
  v38 = *(int *)(v37 + 36);
  v39 = v27 + v38;
  v40 = v28 + v38;
  v41 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  v42 = *(int *)(v37 + 40);
  v43 = (void *)(v27 + v42);
  v44 = (void *)(v28 + v42);
  LODWORD(v40) = v14((void *)(v27 + v42), 1, v12);
  v45 = v14(v44, 1, v12);
  if ((_DWORD)v40)
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 16))(v43, v44, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v43, 0, 1, v12);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v45)
  {
    (*(void (**)(void *, uint64_t))(v76 + 8))(v43, v12);
LABEL_19:
    v46 = sub_5C154(&qword_31F480);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v76 + 24))(v43, v44, v12);
LABEL_20:
  v47 = a3[10];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = a3[11];
  v53 = *(_QWORD *)(a2 + v52);
  v54 = *(_QWORD *)(a1 + v52);
  *(_QWORD *)(a1 + v52) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  v55 = a3[12];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = *(_QWORD *)(a1 + v55 + 8);
  v59 = *(_QWORD *)(v57 + 8);
  if (v58)
  {
    if (v59)
    {
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v60 = *(_QWORD *)(v57 + 8);
      *(_QWORD *)(v56 + 8) = v60;
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRelease(v58);
      *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
      v61 = *(_QWORD *)(v57 + 24);
      v62 = *(_QWORD *)(v56 + 24);
      *(_QWORD *)(v56 + 24) = v61;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRelease(v62);
      sub_65938((_QWORD *)(v56 + 32), (_QWORD *)(v57 + 32));
    }
    else
    {
      sub_19FCC8((_QWORD *)v56);
      *(_OWORD *)v56 = *(_OWORD *)v57;
      v70 = *(_OWORD *)(v57 + 32);
      v69 = *(_OWORD *)(v57 + 48);
      v71 = *(_OWORD *)(v57 + 16);
      *(_QWORD *)(v56 + 64) = *(_QWORD *)(v57 + 64);
      *(_OWORD *)(v56 + 32) = v70;
      *(_OWORD *)(v56 + 48) = v69;
      *(_OWORD *)(v56 + 16) = v71;
    }
  }
  else if (v59)
  {
    *(_QWORD *)v56 = *(_QWORD *)v57;
    v63 = *(_QWORD *)(v57 + 8);
    *(_QWORD *)(v56 + 8) = v63;
    *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
    v64 = *(_QWORD *)(v57 + 24);
    *(_QWORD *)(v56 + 24) = v64;
    v65 = v56 + 32;
    v66 = *(_QWORD *)(v57 + 56);
    *(_QWORD *)(v56 + 56) = v66;
    *(_QWORD *)(v56 + 64) = *(_QWORD *)(v57 + 64);
    v67 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v66 - 8);
    swift_bridgeObjectRetain(v63);
    v68 = swift_bridgeObjectRetain(v64);
    v67(v65, v57 + 32, v66, v68);
  }
  else
  {
    *(_OWORD *)v56 = *(_OWORD *)v57;
    v72 = *(_OWORD *)(v57 + 16);
    v73 = *(_OWORD *)(v57 + 32);
    v74 = *(_OWORD *)(v57 + 48);
    *(_QWORD *)(v56 + 64) = *(_QWORD *)(v57 + 64);
    *(_OWORD *)(v56 + 32) = v73;
    *(_OWORD *)(v56 + 48) = v74;
    *(_OWORD *)(v56 + 16) = v72;
  }
  return a1;
}

uint64_t sub_227AD8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 56) = v7;
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v36(v10, 1, v11))
  {
    v13 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_OWORD *)(a2 + v15 + 16);
  *(_OWORD *)v16 = *(_OWORD *)(a2 + v15);
  *(_OWORD *)(v16 + 16) = v18;
  v19 = *(_OWORD *)(a2 + v15 + 48);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)(a2 + v15 + 32);
  *(_OWORD *)(v16 + 48) = v19;
  *(_BYTE *)(v16 + 64) = *(_BYTE *)(a2 + v15 + 64);
  v20 = type metadata accessor for SegmentedControlItem(0);
  v21 = *(int *)(v20 + 36);
  v22 = v16 + v21;
  v23 = v17 + v21;
  v24 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v25 = *(int *)(v20 + 40);
  v26 = (void *)(v16 + v25);
  v27 = (const void *)(v17 + v25);
  if (v36((const void *)(v17 + v25), 1, v11))
  {
    v28 = sub_5C154(&qword_31F480);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v26, v27, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v26, 0, 1, v11);
  }
  v29 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_OWORD *)(v32 + 48);
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
  *(_OWORD *)(v31 + 48) = v33;
  *(_QWORD *)(v31 + 64) = *(_QWORD *)(v32 + 64);
  v34 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v34;
  return a1;
}

uint64_t sub_227CF4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v65;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  v65 = v12;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_8:
    v16 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_9:
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = a3[8];
  v24 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_bridgeObjectRelease(v24);
  v25 = a3[9];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a2 + v25 + 8);
  v29 = *(_QWORD *)(a1 + v25 + 8);
  *(_QWORD *)v26 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(v26 + 8) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(v27 + 24);
  v31 = *(_QWORD *)(v26 + 24);
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(v26 + 24) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(v27 + 40);
  v33 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  *(_QWORD *)(v26 + 40) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v27 + 56);
  v35 = *(_QWORD *)(v26 + 56);
  *(_QWORD *)(v26 + 48) = *(_QWORD *)(v27 + 48);
  *(_QWORD *)(v26 + 56) = v34;
  swift_bridgeObjectRelease(v35);
  *(_BYTE *)(v26 + 64) = *(_BYTE *)(v27 + 64);
  v36 = type metadata accessor for SegmentedControlItem(0);
  v37 = *(int *)(v36 + 36);
  v38 = v26 + v37;
  v39 = v27 + v37;
  v40 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  v41 = *(int *)(v36 + 40);
  v42 = (void *)(v26 + v41);
  v43 = (void *)(v27 + v41);
  LODWORD(v39) = v13((void *)(v26 + v41), 1, v11);
  v44 = v13(v43, 1, v11);
  if ((_DWORD)v39)
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v65 + 32))(v42, v43, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v42, 0, 1, v11);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v65 + 8))(v42, v11);
LABEL_14:
    v45 = sub_5C154(&qword_31F480);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(void *, void *, uint64_t))(v65 + 40))(v42, v43, v11);
LABEL_15:
  v46 = a3[10];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = a3[11];
  v53 = *(_QWORD *)(a1 + v52);
  *(_QWORD *)(a1 + v52) = *(_QWORD *)(a2 + v52);
  swift_bridgeObjectRelease(v53);
  v54 = a3[12];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = *(_QWORD *)(a1 + v54 + 8);
  if (!v57)
  {
LABEL_19:
    v62 = *(_OWORD *)(v56 + 48);
    *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
    *(_OWORD *)(v55 + 48) = v62;
    *(_QWORD *)(v55 + 64) = *(_QWORD *)(v56 + 64);
    v63 = *(_OWORD *)(v56 + 16);
    *(_OWORD *)v55 = *(_OWORD *)v56;
    *(_OWORD *)(v55 + 16) = v63;
    return a1;
  }
  v58 = *(_QWORD *)(v56 + 8);
  if (!v58)
  {
    sub_19FCC8((_QWORD *)v55);
    goto LABEL_19;
  }
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_QWORD *)(v55 + 8) = v58;
  swift_bridgeObjectRelease(v57);
  v59 = *(_QWORD *)(v56 + 24);
  v60 = *(_QWORD *)(v55 + 24);
  *(_QWORD *)(v55 + 16) = *(_QWORD *)(v56 + 16);
  *(_QWORD *)(v55 + 24) = v59;
  swift_bridgeObjectRelease(v60);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v55 + 32));
  v61 = *(_OWORD *)(v56 + 48);
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_OWORD *)(v55 + 48) = v61;
  *(_QWORD *)(v55 + 64) = *(_QWORD *)(v56 + 64);
  return a1;
}

uint64_t sub_228068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_228074);
}

uint64_t sub_228074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_321EA8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for SegmentedControlItem(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_228118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_228124);
}

uint64_t sub_228124(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = sub_5C154(&qword_321EA8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for SegmentedControlItem(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ReviewsHeaderComponentModel(uint64_t a1)
{
  return sub_64960(a1, qword_32BA30, (uint64_t)&nominal type descriptor for ReviewsHeaderComponentModel);
}

void sub_2281D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = "(";
  v6[1] = &unk_2694F8;
  sub_8C25C(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_269510;
    v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for SegmentedControlItem(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      v6[6] = &unk_269510;
      v6[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[8] = &unk_269528;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

unint64_t sub_2282B4(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_E33B0(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    v13 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v17 = *v12;
      *v11 = *v12;
      swift_retain(v17);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v18 = a3[6];
    v19 = a1 + v18;
    v20 = (uint64_t *)(a2 + v18);
    if ((*(_BYTE *)(a2 + v18 + 40) & 1) != 0)
    {
      v21 = v20[3];
      if (v21)
      {
        v22 = v20[4];
        *(_QWORD *)(v19 + 24) = v21;
        *(_QWORD *)(v19 + 32) = v22;
        (**(void (***)(uint64_t))(v21 - 8))(v19);
      }
      else
      {
        v24 = *((_OWORD *)v20 + 1);
        *(_OWORD *)v19 = *(_OWORD *)v20;
        *(_OWORD *)(v19 + 16) = v24;
        *(_QWORD *)(v19 + 32) = v20[4];
      }
      *(_BYTE *)(v19 + 40) = 1;
    }
    else
    {
      v23 = *v20;
      *(_QWORD *)v19 = *v20;
      *(_BYTE *)(v19 + 40) = 0;
      swift_retain(v23);
    }
    v25 = a3[7];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    v28 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = v26;
      v31 = v28;
      v32 = 1;
    }
    else
    {
      v33 = *v27;
      *v26 = *v27;
      swift_retain(v33);
      v30 = v26;
      v31 = v28;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
  }
  return a1;
}

uint64_t sub_22848C(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  sub_79534(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[6]);
  if ((v7[5] & 1) != 0)
  {
    if (v7[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v7);
  }
  else
  {
    swift_release(*v7);
  }
  v8 = (_QWORD *)(a1 + a2[7]);
  v9 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v8, v9) != 1)
    return swift_release(*v8);
  v10 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
}

uint64_t sub_228590(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_E33B0(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a3[5];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = (uint64_t *)(a2 + v16);
  if ((*(_BYTE *)(a2 + v16 + 40) & 1) != 0)
  {
    v19 = v18[3];
    if (v19)
    {
      v20 = v18[4];
      *(_QWORD *)(v17 + 24) = v19;
      *(_QWORD *)(v17 + 32) = v20;
      (**(void (***)(uint64_t))(v19 - 8))(v17);
    }
    else
    {
      v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v22;
      *(_QWORD *)(v17 + 32) = v18[4];
    }
    *(_BYTE *)(v17 + 40) = 1;
  }
  else
  {
    v21 = *v18;
    *(_QWORD *)v17 = *v18;
    *(_BYTE *)(v17 + 40) = 0;
    swift_retain(v21);
  }
  v23 = a3[7];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = 1;
  }
  else
  {
    v29 = *v25;
    *v24 = *v25;
    swift_retain(v29);
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v28);
  return a1;
}

uint64_t sub_228734(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_E33B0(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_79534(v9, v10, v11);
  if (a1 != a2)
  {
    v12 = a3[5];
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    sub_5E09C(a1 + v12, (uint64_t *)&unk_32A010);
    v15 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = a3[6];
    v20 = a1 + v19;
    v21 = (__int128 *)(a2 + v19);
    sub_5E09C(a1 + v19, &qword_31F488);
    if ((*((_BYTE *)v21 + 40) & 1) != 0)
    {
      v22 = *((_QWORD *)v21 + 3);
      if (v22)
      {
        *(_QWORD *)(v20 + 24) = v22;
        *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
        (**(void (***)(uint64_t, __int128 *))(v22 - 8))(v20, v21);
      }
      else
      {
        v24 = *v21;
        v25 = v21[1];
        *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
        *(_OWORD *)v20 = v24;
        *(_OWORD *)(v20 + 16) = v25;
      }
      *(_BYTE *)(v20 + 40) = 1;
    }
    else
    {
      v23 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 40) = 0;
      swift_retain(v23);
    }
    v26 = a3[7];
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)(a2 + v26);
    sub_5E09C(a1 + v26, &qword_326110);
    v29 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = 1;
    }
    else
    {
      v32 = *v28;
      *v27 = *v28;
      swift_retain(v32);
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v29, v31);
  }
  return a1;
}

uint64_t sub_228924(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_OWORD *)(a1 + v11);
  v14 = (_OWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_OWORD *)((char *)v13 + 25) = *(_OWORD *)((char *)v14 + 25);
  v16 = (void *)(a1 + v12);
  v17 = (const void *)(a2 + v12);
  v18 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  return a1;
}

uint64_t sub_228A74(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_79534(v7, v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_5E09C(a1 + v10, (uint64_t *)&unk_32A010);
    v13 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = a3[6];
    v16 = (_OWORD *)(a2 + v15);
    v17 = (_OWORD *)(a1 + v15);
    sub_5E09C(a1 + v15, &qword_31F488);
    v18 = v16[1];
    *v17 = *v16;
    v17[1] = v18;
    *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v16 + 25);
    v19 = a3[7];
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_5E09C(a1 + v19, &qword_326110);
    v22 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_228C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_228C1C);
}

uint64_t sub_228C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_5C154(&qword_31F498);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_31F490);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_228CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_228CC8);
}

uint64_t sub_228CC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  else
  {
    v8 = sub_5C154(&qword_31F498);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_31F490);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ReviewsHeaderComponent(uint64_t a1)
{
  return sub_64960(a1, qword_32BAE0, (uint64_t)&nominal type descriptor for ReviewsHeaderComponent);
}

void sub_228D7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_269558;
  sub_8C25C(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_269570;
    sub_8C25C(319, (unint64_t *)&qword_31F508, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetricsFieldsContext, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_228E44(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0((unint64_t *)&unk_32A0C0, type metadata accessor for ReviewsHeaderComponent, (uint64_t)&unk_269668);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_228E9C@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v115 = a3;
  v6 = type metadata accessor for SegmentedControlStyle(0, a4);
  __chkstk_darwin(v6);
  v105 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_32BB38);
  v108 = *(_QWORD *)(v8 - 8);
  v109 = v8;
  __chkstk_darwin(v8);
  v107 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5C154(&qword_32BB40);
  v114 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v106 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for SegmentedControlItem(0);
  __chkstk_darwin(v101);
  v99 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_32BB48);
  v102 = *(_QWORD *)(v12 - 8);
  v103 = v12;
  __chkstk_darwin(v12);
  v100 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v98 = (char *)&v96 - v15;
  __chkstk_darwin(v16);
  v111 = (char *)&v96 - v17;
  v18 = sub_5C154(&qword_32BB50);
  __chkstk_darwin(v18);
  v113 = (uint64_t)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v116 = (uint64_t)&v96 - v21;
  v22 = sub_5C154(&qword_32BB58);
  __chkstk_darwin(v22);
  v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_32BB60);
  __chkstk_darwin(v25);
  v27 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5C154(&qword_32BB68);
  __chkstk_darwin(v28);
  v112 = (uint64_t)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v96 - v31;
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v96 - v35;
  *(_QWORD *)v24 = static VerticalAlignment.firstTextBaseline.getter(v34);
  *((_QWORD *)v24 + 1) = 0;
  v37 = 1;
  v24[16] = 1;
  v38 = (uint64_t)&v24[*(int *)(sub_5C154(&qword_32BB70) + 44)];
  v104 = a2;
  v39 = sub_229594(a1, a2, v38);
  LOBYTE(a2) = static Edge.Set.top.getter(v39);
  v40 = EdgeInsets.init(_all:)(26.0);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  sub_5E1A4((uint64_t)v24, (uint64_t)v27, &qword_32BB58);
  v47 = &v27[*(int *)(v25 + 36)];
  *v47 = (char)a2;
  *((double *)v47 + 1) = v40;
  *((_QWORD *)v47 + 2) = v42;
  *((_QWORD *)v47 + 3) = v44;
  *((_QWORD *)v47 + 4) = v46;
  v47[40] = 0;
  v48 = sub_5E09C((uint64_t)v24, &qword_32BB58);
  LOBYTE(v24) = static Edge.Set.bottom.getter(v48);
  v49 = EdgeInsets.init(_all:)(18.0);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  sub_5E1A4((uint64_t)v27, (uint64_t)v32, &qword_32BB60);
  v56 = &v32[*(int *)(v28 + 36)];
  *v56 = (char)v24;
  *((double *)v56 + 1) = v49;
  *((_QWORD *)v56 + 2) = v51;
  *((_QWORD *)v56 + 3) = v53;
  *((_QWORD *)v56 + 4) = v55;
  v56[40] = 0;
  sub_5E09C((uint64_t)v27, &qword_32BB60);
  v110 = v36;
  sub_66F14((uint64_t)v32, (uint64_t)v36, &qword_32BB68);
  v57 = type metadata accessor for ReviewsHeaderComponentModel(0);
  v58 = *(_QWORD *)&a1[*(int *)(v57 + 32)];
  v118 = v58;
  v59 = sub_5C154(&qword_32BB78);
  v60 = sub_67060(&qword_32BB80, &qword_32BB78, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v59, v60) & 1) != 0)
  {
    v61 = v99;
    sub_5E11C((uint64_t)&a1[*(int *)(v57 + 36)], v99, type metadata accessor for SegmentedControlItem);
    v62 = sub_648E0(&qword_32BB90, type metadata accessor for SegmentedControlItem, (uint64_t)&protocol conformance descriptor for SegmentedControlItem);
    v97 = v62;
    swift_bridgeObjectRetain(v58);
    v63 = v98;
    v64 = v101;
    SegmentedControlViewModel.init(pickerItems:selection:)(v65, v61, v101, v62);
    v67 = v102;
    v66 = v103;
    v68 = v111;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v111, v63, v103);
    v69 = v100;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v100, v68, v66);
    v70 = *(_QWORD *)v104;
    v71 = *((_QWORD *)v104 + 1);
    LOBYTE(v61) = v104[16];
    sub_E33B0(*(_QWORD *)v104, v71, v61);
    v72 = sub_7843C(v70, v71, v61);
    v74 = v73;
    sub_79534(v70, v71, v61);
    v75 = v105;
    sub_22B04C(v105);
    v76 = v107;
    v77 = SegmentedControl.init(model:containingShelfID:style:)(v69, v72, v74, v75, v64, v97);
    LOBYTE(v75) = static Edge.Set.bottom.getter(v77);
    v78 = EdgeInsets.init(_all:)(20.0);
    v80 = v79;
    v82 = v81;
    v84 = v83;
    v86 = v108;
    v85 = v109;
    v87 = (uint64_t)v106;
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v106, v76, v109);
    v88 = v87 + *(int *)(v117 + 36);
    *(_BYTE *)v88 = v75;
    *(double *)(v88 + 8) = v78;
    *(_QWORD *)(v88 + 16) = v80;
    *(_QWORD *)(v88 + 24) = v82;
    *(_QWORD *)(v88 + 32) = v84;
    *(_BYTE *)(v88 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v76, v85);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v111, v66);
    sub_66F14(v87, v116, &qword_32BB40);
    v37 = 0;
  }
  v89 = v116;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v116, v37, 1, v117);
  v90 = (uint64_t)v110;
  v91 = v112;
  sub_5E1A4((uint64_t)v110, v112, &qword_32BB68);
  v92 = v113;
  sub_5E1A4(v89, v113, &qword_32BB50);
  v93 = v115;
  sub_5E1A4(v91, v115, &qword_32BB68);
  v94 = sub_5C154(&qword_32BB88);
  sub_5E1A4(v92, v93 + *(int *)(v94 + 48), &qword_32BB50);
  sub_5E09C(v89, &qword_32BB50);
  sub_5E09C(v90, &qword_32BB68);
  sub_5E09C(v92, &qword_32BB50);
  return sub_5E09C(v91, &qword_32BB68);
}

uint64_t sub_229594@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __n128 v83;
  char *v84;
  _QWORD *v85;
  void (*v86)(char *, _QWORD, uint64_t, __n128);
  uint64_t result;
  uint64_t v88;
  char *v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t OpaqueTypeConformance2;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  void *v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;

  v206 = a2;
  v195 = a3;
  v176 = type metadata accessor for AutomaticHoverEffect(0);
  v175 = *(_QWORD *)(v176 - 8);
  v4 = __chkstk_darwin(v176);
  v174 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for PlainButtonStyle(0, v4);
  v171 = *(_QWORD *)(v173 - 8);
  v6 = __chkstk_darwin(v173);
  v169 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for ButtonMenuStyle(0, v6);
  v159 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v157 = (char *)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_5C154(&qword_32BB98);
  v156 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v155 = (char *)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_5C154(&qword_32BBA0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v160 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_5C154(&qword_32BBA8);
  v166 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v165 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_5C154(&qword_32BBB0);
  v170 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v167 = (char *)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_5C154(&qword_32BBB8);
  v192 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v164 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_32BBC0);
  __chkstk_darwin(v14);
  v194 = (uint64_t)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v193 = (char *)&v155 - v17;
  v190 = type metadata accessor for AccessibilityTraits(0);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v188 = (char *)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_5C154(&qword_31F5F8);
  __chkstk_darwin(v185);
  v186 = (char *)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v181 = (char *)&v155 - v21;
  v22 = type metadata accessor for DynamicTypeSize(0);
  v203 = *(_QWORD **)(v22 - 8);
  __chkstk_darwin(v22);
  v202 = (char *)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v201 = (char *)&v155 - v25;
  v187 = sub_5C154(&qword_31F600);
  __chkstk_darwin(v187);
  v178 = (char *)&v155 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v183 = (uint64_t)&v155 - v28;
  v29 = type metadata accessor for ColorConstants(0);
  v199 = *(_QWORD *)(v29 - 8);
  v200 = v29;
  __chkstk_darwin(v29);
  v198 = (uint64_t)&v155 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_5C154(&qword_31F7E8);
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v155 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Font.TextStyle(0, v32);
  v196 = *(_QWORD *)(v35 - 8);
  v36 = v196;
  __chkstk_darwin(v35);
  v38 = (char *)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_5C154(&qword_31F6C0);
  v180 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v179 = (char *)&v155 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_5C154(&qword_31F6C8);
  __chkstk_darwin(v40);
  v204 = (char *)&v155 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v184 = (uint64_t)&v155 - v43;
  v177 = type metadata accessor for ReviewsHeaderComponentModel(0);
  v44 = *(int *)(v177 + 28);
  v191 = a1;
  v45 = &a1[v44];
  v46 = *((_QWORD *)v45 + 1);
  v207 = *(void **)v45;
  v208 = v46;
  v47 = sub_668F8();
  swift_bridgeObjectRetain(v46);
  v48 = Text.init<A>(_:)(&v207, &type metadata for String, v47);
  v50 = v49;
  v197 = v51;
  v53 = v52 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v38, enum case for Font.TextStyle.title2(_:), v35);
  v54 = enum case for Font.Design.serif (_:);
  v55 = type metadata accessor for Font.Design(0);
  v56 = *(_QWORD *)(v55 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v34, v54, v55);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v34, 0, 1, v55);
  v57 = static Font.system(_:design:weight:)(v38, v34, 0, 1);
  sub_5E09C((uint64_t)v34, &qword_31F7E8);
  (*(void (**)(char *, uint64_t))(v196 + 8))(v38, v35);
  v58 = v197;
  v59 = Text.font(_:)(v57, v48, v50, v53, v197);
  v61 = v60;
  LOBYTE(v38) = v62;
  v64 = v63;
  swift_release(v57);
  LOBYTE(v57) = v38 & 1;
  sub_6693C(v48, v50, v53);
  swift_bridgeObjectRelease(v58);
  v65 = Text.bold()(v59, v61, v38 & 1, v64);
  v67 = v66;
  v69 = v68;
  v71 = v70 & 1;
  sub_6693C(v59, v61, v57);
  swift_bridgeObjectRelease(v64);
  type metadata accessor for ReviewsHeaderComponent(0);
  v72 = v198;
  v73 = sub_76AA0(v198);
  v74 = (void *)ColorConstants.booksLabel.getter(v73);
  (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v72, v200);
  v207 = v74;
  v75 = (void *)Text.foregroundStyle<A>(_:)(&v207, v65, v67, v71, v69, &type metadata for Color, &protocol witness table for Color);
  v77 = v76;
  LOBYTE(v50) = v78;
  v80 = v79;
  v81 = v67;
  v82 = v201;
  sub_6693C(v65, v81, v71);
  swift_release(v74);
  v83 = swift_bridgeObjectRelease(v69);
  v207 = v75;
  v208 = v77;
  LOBYTE(v209) = v50 & 1;
  v210 = v80;
  v84 = v202;
  v85 = v203;
  v86 = (void (*)(char *, _QWORD, uint64_t, __n128))v203[13];
  v86(v82, enum case for DynamicTypeSize.xSmall(_:), v22, v83);
  ((void (*)(char *, _QWORD, uint64_t))v86)(v84, enum case for DynamicTypeSize.accessibility3(_:), v22);
  sub_648E0(&qword_31F610, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v82, v84, v22);
  if ((result & 1) != 0)
  {
    v88 = v185;
    v89 = v181;
    v90 = &v181[*(int *)(v185 + 48)];
    v91 = (void (*)(char *, char *, uint64_t))v85[4];
    v91(v181, v82, v22);
    v91(v90, v84, v22);
    v92 = v186;
    v93 = &v186[*(int *)(v88 + 48)];
    v94 = (void (*)(char *, char *, uint64_t))v85[2];
    v94(v186, v89, v22);
    v94(v93, v90, v22);
    v95 = (uint64_t)v178;
    v91(v178, v92, v22);
    v96 = (void (*)(char *, uint64_t))v85[1];
    v96(v93, v22);
    v97 = &v92[*(int *)(v88 + 48)];
    v91(v92, v89, v22);
    v91(v97, v90, v22);
    v98 = v187;
    v91((char *)(v95 + *(int *)(v187 + 36)), v97, v22);
    v96(v92, v22);
    v99 = v183;
    sub_66F14(v95, v183, &qword_31F600);
    v100 = sub_67060(&qword_31F620, &qword_31F600, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v101 = v179;
    View.dynamicTypeSize<A>(_:)(v99, &type metadata for Text, v98, &protocol witness table for Text);
    sub_5E09C(v99, &qword_31F600);
    sub_6693C((uint64_t)v207, v208, (char)v209);
    swift_bridgeObjectRelease(v210);
    v102 = v188;
    static AccessibilityTraits.isHeader.getter(v103);
    v207 = &type metadata for Text;
    v208 = v98;
    v209 = &protocol witness table for Text;
    v210 = v100;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v207, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v105 = (uint64_t)v204;
    v106 = v182;
    View.accessibilityAddTraits(_:)(v102, v182, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v102, v190);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v101, v106);
    v107 = v184;
    sub_66F14(v105, v184, &qword_31F6C8);
    v108 = v191;
    v207 = *(void **)&v191[*(int *)(v177 + 44)];
    v109 = sub_5C154(&qword_32BBC8);
    v110 = sub_67060(&qword_32BBD0, &qword_32BBC8, (uint64_t)&protocol conformance descriptor for [A]);
    v111 = Collection.isNotEmpty.getter(v109, v110);
    v112 = 1;
    v113 = (uint64_t)v193;
    v114 = v205;
    if ((v111 & 1) != 0)
    {
      __chkstk_darwin(v111);
      *(&v155 - 2) = v206;
      *(&v155 - 1) = v108;
      __chkstk_darwin(v115);
      *(&v155 - 6) = v108;
      *(&v155 - 5) = v116;
      *((_OWORD *)&v155 - 2) = xmmword_269480;
      *((_OWORD *)&v155 - 1) = xmmword_269480;
      v117 = sub_5C154(&qword_32BBE0);
      v118 = sub_5C154(&qword_32BBE8);
      v119 = sub_22C7B0();
      v120 = sub_22C9A8();
      v121 = v155;
      v122 = Menu.init(content:label:)(sub_22C798, &v155 - 4, sub_22C7A0, &v155 - 8, v117, v118, v119, v120);
      v123 = v157;
      ButtonMenuStyle.init()(v122);
      v124 = sub_67060(&qword_32BC40, &qword_32BB98, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      v125 = sub_648E0(&qword_32BC48, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
      v126 = v107;
      v127 = v160;
      v128 = (void *)v158;
      v129 = v161;
      View.menuStyle<A>(_:)(v123, v158, v161, v124, v125);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v123, v129);
      v130 = (*(uint64_t (**)(char *, void *))(v156 + 8))(v121, v128);
      v131 = v169;
      PlainButtonStyle.init()(v130);
      v207 = v128;
      v208 = v129;
      v209 = (void *)v124;
      v210 = v125;
      v132 = swift_getOpaqueTypeConformance2(&v207, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
      v133 = sub_648E0(&qword_327BA0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
      v134 = v165;
      v135 = (void *)v163;
      v136 = v173;
      View.buttonStyle<A>(_:)(v131, v163, v173, v132, v133);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v131, v136);
      v137 = v127;
      v107 = v126;
      v114 = v205;
      v138 = (*(uint64_t (**)(char *, void *))(v162 + 8))(v137, v135);
      v139 = v174;
      static CustomHoverEffect<>.automatic.getter(v138);
      v207 = v135;
      v208 = v136;
      v209 = (void *)v132;
      v210 = v133;
      v140 = swift_getOpaqueTypeConformance2(&v207, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v141 = sub_648E0(&qword_321F80, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
      v142 = v167;
      v143 = v168;
      v144 = v176;
      View.hoverEffect<A>(_:isEnabled:)(v139, 1, v168, v176, v140, v141);
      (*(void (**)(char *, uint64_t))(v175 + 8))(v139, v144);
      v145 = v143;
      v105 = (uint64_t)v204;
      v146 = (*(uint64_t (**)(char *, uint64_t))(v166 + 8))(v134, v145);
      LOBYTE(v140) = static Edge.Set.all.getter(v146);
      v147 = v170;
      v148 = (uint64_t)v164;
      v149 = v172;
      (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v164, v142, v172);
      v150 = v148 + *(int *)(v114 + 36);
      *(_BYTE *)v150 = v140;
      *(_OWORD *)(v150 + 8) = xmmword_269490;
      *(_OWORD *)(v150 + 24) = xmmword_269490;
      *(_BYTE *)(v150 + 40) = 0;
      (*(void (**)(char *, uint64_t))(v147 + 8))(v142, v149);
      sub_66F14(v148, v113, &qword_32BBB8);
      v112 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56))(v113, v112, 1, v114);
    sub_5E1A4(v107, v105, &qword_31F6C8);
    v151 = v194;
    sub_5E1A4(v113, v194, &qword_32BBC0);
    v152 = v195;
    sub_5E1A4(v105, v195, &qword_31F6C8);
    v153 = sub_5C154(&qword_32BBD8);
    v154 = v152 + *(int *)(v153 + 48);
    *(_QWORD *)v154 = 0;
    *(_BYTE *)(v154 + 8) = 1;
    sub_5E1A4(v151, v152 + *(int *)(v153 + 64), &qword_32BBC0);
    sub_5E09C(v113, &qword_32BBC0);
    sub_5E09C(v107, &qword_31F6C8);
    sub_5E09C(v151, &qword_32BBC0);
    return sub_5E09C(v105, &qword_31F6C8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_22A4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v5 = type metadata accessor for ReviewsHeaderComponent(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = type metadata accessor for ReviewsHeaderComponentModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v26 = *(_QWORD *)(a2 + *(int *)(v11 + 44));
  v12 = v26;
  sub_5E11C(a2, (uint64_t)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  sub_5E11C(a1, (uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ReviewsHeaderComponent);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = *(unsigned __int8 *)(v6 + 80);
  v17 = (v10 + v16 + v15) & ~v16;
  v18 = swift_allocObject(&unk_2F5BD8, v17 + v7, v14 | v16 | 7);
  sub_5E160((uint64_t)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v15, type metadata accessor for ReviewsHeaderComponentModel);
  sub_5E160((uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for ReviewsHeaderComponent);
  swift_bridgeObjectRetain(v12);
  v19 = sub_5C154(&qword_32BBC8);
  v20 = sub_5C154(&qword_32BC38);
  v21 = sub_67060(&qword_32BC70, &qword_32BBC8, (uint64_t)&protocol conformance descriptor for [A]);
  v22 = sub_67060(&qword_32BC30, &qword_32BC38, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  v23 = sub_22CD70();
  return ForEach<>.init(_:content:)(&v26, sub_22CCF8, v18, v19, &type metadata for String, v20, v21, v22, v23);
}

uint64_t sub_22A6E8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t KeyPath;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t);
  uint64_t result;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  uint64_t v102;

  v101 = a2;
  v94 = a3;
  v91 = sub_5C154(&qword_31F5F8);
  __chkstk_darwin(v91);
  v93 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v89 = (char *)&v84 - v14;
  v15 = type metadata accessor for DynamicTypeSize(0);
  v99 = *(_QWORD **)(v15 - 8);
  __chkstk_darwin(v15);
  v100 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v96 = (char *)&v84 - v18;
  v92 = sub_5C154(&qword_31F600);
  __chkstk_darwin(v92);
  v88 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v90 = (uint64_t)&v84 - v21;
  v22 = type metadata accessor for ColorConstants(0);
  v97 = *(_QWORD *)(v22 - 8);
  v98 = v22;
  __chkstk_darwin(v22);
  v95 = (uint64_t)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5C154(&qword_31F7E8);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Font.TextStyle(0, v25);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_32BC20);
  __chkstk_darwin(v32);
  v34 = (char *)&v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5C154(&qword_32BC10);
  __chkstk_darwin(v35);
  v37 = (char *)&v84 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5C154(&qword_32BBF8);
  __chkstk_darwin(v102);
  v39 = (char *)&v84 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_5C154(&qword_32BC50);
  v86 = *(_QWORD *)(v40 - 8);
  v87 = v40;
  v41 = __chkstk_darwin(v40);
  v85 = (char *)&v84 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v34 = static VerticalAlignment.center.getter(v41);
  *((_QWORD *)v34 + 1) = 0x4000000000000000;
  v34[16] = 0;
  v43 = sub_5C154(&qword_32BC58);
  v44 = sub_22AD90(a1, (uint64_t)&v34[*(int *)(v43 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v29 + 104))(v31, enum case for Font.TextStyle.subheadline(_:), v28, v44);
  v45 = type metadata accessor for Font.Design(0);
  v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v27, 1, 1, v45);
  v47 = static Font.Weight.medium.getter(v46);
  v48 = static Font.system(_:design:weight:)(v31, v27, *(_QWORD *)&v47, 0);
  sub_5E09C((uint64_t)v27, &qword_31F7E8);
  v49 = *(void (**)(char *, uint64_t))(v29 + 8);
  v50 = v96;
  v51 = v28;
  v52 = v99;
  v49(v31, v51);
  KeyPath = swift_getKeyPath(&unk_2696D0);
  sub_5E1A4((uint64_t)v34, (uint64_t)v37, &qword_32BC20);
  v54 = (uint64_t *)&v37[*(int *)(v35 + 36)];
  *v54 = KeyPath;
  v54[1] = v48;
  v55 = (uint64_t)v34;
  v56 = v100;
  sub_5E09C(v55, &qword_32BC20);
  type metadata accessor for ReviewsHeaderComponent(0);
  v57 = v95;
  v58 = sub_76AA0(v95);
  v59 = ColorConstants.booksLabel.getter(v58);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v57, v98);
  sub_5E1A4((uint64_t)v37, (uint64_t)v39, &qword_32BC10);
  v60 = *(int *)(v102 + 36);
  v101 = v39;
  *(_QWORD *)&v39[v60] = v59;
  sub_5E09C((uint64_t)v37, &qword_32BC10);
  v61 = (void (*)(char *, _QWORD, uint64_t))v52[13];
  v61(v50, enum case for DynamicTypeSize.xSmall(_:), v15);
  v61(v56, enum case for DynamicTypeSize.accessibility3(_:), v15);
  sub_648E0(&qword_31F610, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v50, v56, v15);
  if ((result & 1) != 0)
  {
    v63 = v91;
    v64 = v89;
    v65 = &v89[*(int *)(v91 + 48)];
    v66 = (void (*)(char *, char *, uint64_t))v52[4];
    v66(v89, v50, v15);
    v66(v65, v56, v15);
    v67 = v93;
    v68 = &v93[*(int *)(v63 + 48)];
    v69 = (void (*)(char *, char *, uint64_t))v52[2];
    v69(v93, v64, v15);
    v69(v68, v65, v15);
    v70 = (uint64_t)v88;
    v66(v88, v67, v15);
    v71 = (void (*)(char *, uint64_t))v52[1];
    v71(v68, v15);
    v72 = &v67[*(int *)(v63 + 48)];
    v66(v67, v64, v15);
    v66(v72, v65, v15);
    v73 = v92;
    v66((char *)(v70 + *(int *)(v92 + 36)), v72, v15);
    v71(v67, v15);
    v74 = v90;
    sub_66F14(v70, v90, &qword_31F600);
    v75 = sub_22C888();
    sub_67060(&qword_31F620, &qword_31F600, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v76 = v85;
    v77 = v75;
    v78 = (uint64_t)v101;
    View.dynamicTypeSize<A>(_:)(v74, v102, v73, v77);
    sub_5E09C(v74, &qword_31F600);
    v79 = sub_5E09C(v78, &qword_32BBF8);
    LOBYTE(v65) = static Edge.Set.all.getter(v79);
    v81 = v86;
    v80 = v87;
    v82 = v94;
    (*(void (**)(uint64_t, char *, uint64_t))(v86 + 16))(v94, v76, v87);
    v83 = v82 + *(int *)(sub_5C154(&qword_32BBE0) + 36);
    *(_BYTE *)v83 = (_BYTE)v65;
    *(double *)(v83 + 8) = a4;
    *(double *)(v83 + 16) = a5;
    *(double *)(v83 + 24) = a6;
    *(double *)(v83 + 32) = a7;
    *(_BYTE *)(v83 + 40) = 0;
    return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v76, v80);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_22AD90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v34 = sub_5C154(&qword_3205E0);
  __chkstk_darwin(v34);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Image.Scale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_5C154(&qword_32BC60);
  __chkstk_darwin(v33);
  v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - v13;
  v15 = (_QWORD *)(a1 + *(int *)(type metadata accessor for ReviewsHeaderComponentModel(0) + 40));
  v16 = v15[1];
  v35[0] = *v15;
  v35[1] = v16;
  v17 = sub_668F8();
  swift_bridgeObjectRetain(v16);
  v18 = Text.init<A>(_:)(v35, &type metadata for String, v17);
  v30 = v19;
  v31 = v18;
  v32 = v20;
  LOBYTE(v16) = v21 & 1;
  v22 = Image.init(systemName:)(0xD000000000000013, 0x8000000000275290);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Image.Scale.small(_:), v6);
  KeyPath = swift_getKeyPath(&unk_269700);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v5 + *(int *)(v34 + 28), v9, v6);
  *v5 = KeyPath;
  sub_5E1A4((uint64_t)v5, (uint64_t)v11 + *(int *)(v33 + 36), &qword_3205E0);
  *v11 = v22;
  swift_retain(v22);
  sub_5E09C((uint64_t)v5, &qword_3205E0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release(v22);
  sub_66F14((uint64_t)v11, (uint64_t)v14, &qword_32BC60);
  sub_5E1A4((uint64_t)v14, (uint64_t)v11, &qword_32BC60);
  v25 = v30;
  v24 = v31;
  *(_QWORD *)a2 = v31;
  *(_QWORD *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 16) = v16;
  v26 = v32;
  *(_QWORD *)(a2 + 24) = v32;
  v27 = sub_5C154(&qword_32BC68);
  sub_5E1A4((uint64_t)v11, a2 + *(int *)(v27 + 48), &qword_32BC60);
  sub_7BBCC(v24, v25, v16);
  swift_bridgeObjectRetain(v26);
  sub_5E09C((uint64_t)v14, &qword_32BC60);
  sub_5E09C((uint64_t)v11, &qword_32BC60);
  sub_6693C(v24, v25, v16);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v26).n128_u64[0];
  return result;
}

uint64_t sub_22B04C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v3 = type metadata accessor for SegmentedControlItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ReviewsHeaderComponentModel(0) + 32));
  v8 = *(_QWORD *)(v7 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v27 = a1;
    v28 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v7);
    sub_20C95C(0, v8, 0);
    v10 = *(unsigned __int8 *)(v4 + 80);
    v26 = v7;
    v11 = v7 + ((v10 + 32) & ~v10);
    v12 = *(_QWORD *)(v4 + 72);
    v9 = v28;
    do
    {
      sub_5E11C(v11, (uint64_t)v6, type metadata accessor for SegmentedControlItem);
      v13 = *((_QWORD *)v6 + 2);
      v14 = *((_QWORD *)v6 + 3);
      swift_bridgeObjectRetain(v14);
      sub_6685C((uint64_t)v6, type metadata accessor for SegmentedControlItem);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_20C95C(0, v9[2] + 1, 1);
        v9 = v28;
      }
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_20C95C(v15 > 1, v16 + 1, 1);
        v9 = v28;
      }
      v9[2] = v16 + 1;
      v17 = &v9[2 * v16];
      v17[4] = v13;
      v17[5] = v14;
      v11 += v12;
      --v8;
    }
    while (v8);
    v7 = v26;
    swift_bridgeObjectRelease(v26);
    a1 = v27;
  }
  v18 = sub_2332E4((uint64_t)v9);
  swift_bridgeObjectRelease(v9);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = swift_bridgeObjectRelease(v18);
  v21 = *(_QWORD *)(v7 + 16);
  v22 = type metadata accessor for SegmentedControlStyle(0, v20);
  v23 = (unsigned int *)&enum case for SegmentedControlStyle.outlined(_:);
  if (v19 != v21)
    v23 = (unsigned int *)&enum case for SegmentedControlStyle.outlinedRoundedRectangular(_:);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(a1, *v23, v22);
}

uint64_t sub_22B230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[2];

  v40 = a3;
  v41 = a4;
  v37 = a2;
  v6 = type metadata accessor for ReviewsHeaderComponent(0);
  v39 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v39 + 64);
  __chkstk_darwin(v6);
  v38 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ReviewsHeaderComponentModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 24);
  v47[0] = *(_QWORD *)(a1 + 16);
  v47[1] = v12;
  sub_5E11C(a2, (uint64_t)v11, v13);
  sub_19FC94(a1, (uint64_t)&v42);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(v12);
  v15 = static MainActor.shared.getter(v14);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = v16 | 7;
  v19 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_2F5C00, v19 + 72, v16 | 7);
  *(_QWORD *)(v20 + 16) = v15;
  *(_QWORD *)(v20 + 24) = &protocol witness table for MainActor;
  sub_5E160((uint64_t)v11, v20 + v17, type metadata accessor for ReviewsHeaderComponentModel);
  v21 = v20 + v19;
  v22 = v45;
  *(_OWORD *)(v21 + 32) = v44;
  *(_OWORD *)(v21 + 48) = v22;
  *(_QWORD *)(v21 + 64) = v46;
  v23 = v43;
  *(_OWORD *)v21 = v42;
  *(_OWORD *)(v21 + 16) = v23;
  sub_5E11C(v37, (uint64_t)v11, type metadata accessor for ReviewsHeaderComponentModel);
  sub_19FC94(a1, (uint64_t)&v42);
  v24 = v38;
  v25 = sub_5E11C(v40, v38, type metadata accessor for ReviewsHeaderComponent);
  v26 = static MainActor.shared.getter(v25);
  v27 = *(unsigned __int8 *)(v39 + 80);
  v28 = (v19 + 72 + v27) & ~v27;
  v29 = swift_allocObject(&unk_2F5C28, v28 + v7, v18 | v27);
  *(_QWORD *)(v29 + 16) = v26;
  *(_QWORD *)(v29 + 24) = &protocol witness table for MainActor;
  sub_5E160((uint64_t)v11, v29 + v17, type metadata accessor for ReviewsHeaderComponentModel);
  v30 = v29 + v19;
  v31 = v45;
  *(_OWORD *)(v30 + 32) = v44;
  *(_OWORD *)(v30 + 48) = v31;
  *(_QWORD *)(v30 + 64) = v46;
  v32 = v43;
  *(_OWORD *)v30 = v42;
  *(_OWORD *)(v30 + 16) = v32;
  sub_5E160(v24, v29 + v28, type metadata accessor for ReviewsHeaderComponent);
  Binding.init(get:set:)(&v42, sub_22CFA0, v20, sub_22D2EC, v29, &type metadata for Bool);
  v33 = v42;
  v34 = v43;
  v35 = sub_668F8();
  return Toggle<>.init<A>(_:isOn:)(v47, v33, *((_QWORD *)&v33 + 1), v34, &type metadata for String, v35);
}

uint64_t sub_22B4CC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t result;
  _OWORD v10[4];
  uint64_t v11;
  _OWORD v12[4];
  _BYTE v13[8];
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _BYTE v17[72];
  _BYTE v18[72];

  v6 = type metadata accessor for ReviewsHeaderComponentModel(0);
  sub_5E1A4(a1 + *(int *)(v6 + 48), (uint64_t)v18, &qword_32BC88);
  sub_19FC94(a2, (uint64_t)v17);
  sub_5E1A4((uint64_t)v18, (uint64_t)v13, &qword_32BC88);
  sub_5E1A4((uint64_t)v17, (uint64_t)v15, &qword_32BC88);
  if (v14)
  {
    sub_5E1A4((uint64_t)v13, (uint64_t)v12, &qword_32BC88);
    if (*((_QWORD *)&v15[0] + 1))
    {
      v10[0] = v15[0];
      v10[1] = v15[1];
      v10[2] = v15[2];
      v10[3] = v15[3];
      v11 = v16;
      if (v12[0] == v15[0])
        v7 = 1;
      else
        v7 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v12[0], *((_QWORD *)&v12[0] + 1), *(_QWORD *)&v15[0], *((_QWORD *)&v15[0] + 1), 0);
      sub_19FCC8(v10);
      v8 = &qword_32BC88;
      sub_5E09C((uint64_t)v17, &qword_32BC88);
      sub_5E09C((uint64_t)v18, &qword_32BC88);
      sub_19FCC8(v12);
    }
    else
    {
      sub_5E09C((uint64_t)v17, &qword_32BC88);
      sub_5E09C((uint64_t)v18, &qword_32BC88);
      sub_19FCC8(v12);
      v7 = 0;
      v8 = (uint64_t *)&unk_32BC90;
    }
  }
  else
  {
    sub_5E09C((uint64_t)v17, &qword_32BC88);
    sub_5E09C((uint64_t)v18, &qword_32BC88);
    if (*((_QWORD *)&v15[0] + 1))
      v8 = (uint64_t *)&unk_32BC90;
    else
      v8 = &qword_32BC88;
    if (*((_QWORD *)&v15[0] + 1))
      v7 = 0;
    else
      v7 = -1;
  }
  result = sub_5E09C((uint64_t)v13, v8);
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_22B668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t result;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _OWORD v47[4];
  uint64_t v48;
  __int128 v49[4];
  __int128 v50;
  uint64_t v51;
  void *v52;
  _OWORD v53[4];
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;

  v46 = a7;
  v9 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v44 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v43 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AppAnalyticsAction.Type(0, v10);
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  __chkstk_darwin(v12);
  v14 = (_QWORD **)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_5C154(&qword_32BC80);
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ActionMetrics(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v45 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a5 + *(int *)(type metadata accessor for ReviewsHeaderComponentModel(0) + 48);
  sub_5E1A4(v21, (uint64_t)v58, &qword_32BC88);
  sub_19FC94((uint64_t)a6, (uint64_t)v55);
  sub_5E1A4((uint64_t)v58, (uint64_t)&v50, &qword_32BC88);
  sub_5E1A4((uint64_t)v55, (uint64_t)v53, &qword_32BC88);
  if (!*((_QWORD *)&v50 + 1))
  {
    sub_5E09C((uint64_t)v55, &qword_32BC88);
    sub_5E09C((uint64_t)v58, &qword_32BC88);
    if (!*((_QWORD *)&v53[0] + 1))
    {
      v23 = &qword_32BC88;
      v22 = &v50;
      return sub_5E09C((uint64_t)v22, v23);
    }
    goto LABEL_8;
  }
  sub_5E1A4((uint64_t)&v50, (uint64_t)v49, &qword_32BC88);
  if (!*((_QWORD *)&v53[0] + 1))
  {
    sub_5E09C((uint64_t)v55, &qword_32BC88);
    sub_5E09C((uint64_t)v58, &qword_32BC88);
    sub_19FCC8(v49);
LABEL_8:
    sub_5E09C((uint64_t)&v50, &qword_32BC90);
    goto LABEL_9;
  }
  v47[0] = v53[0];
  v47[1] = v53[1];
  v47[2] = v53[2];
  v47[3] = v53[3];
  v48 = v54;
  if (v49[0] == v53[0])
  {
    sub_19FCC8(v47);
    sub_5E09C((uint64_t)v55, &qword_32BC88);
    sub_5E09C((uint64_t)v58, &qword_32BC88);
    sub_19FCC8(v49);
    v22 = &v50;
    v23 = &qword_32BC88;
    return sub_5E09C((uint64_t)v22, v23);
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v49[0], *((_QWORD *)&v49[0] + 1), *(_QWORD *)&v47[0], *((_QWORD *)&v47[0] + 1), 0);
  sub_19FCC8(v47);
  sub_5E09C((uint64_t)v55, &qword_32BC88);
  sub_5E09C((uint64_t)v58, &qword_32BC88);
  sub_19FCC8(v49);
  result = sub_5E09C((uint64_t)&v50, &qword_32BC88);
  if ((v31 & 1) == 0)
  {
LABEL_9:
    v40 = type metadata accessor for ReviewsHeaderComponent(0);
    sub_76AD4((uint64_t)v58);
    v24 = v59;
    if (!v59)
    {
      v23 = &qword_326190;
      v22 = (__int128 *)v58;
      return sub_5E09C((uint64_t)v22, v23);
    }
    v38 = v60;
    v39 = v9;
    v37 = sub_66898(v58, v59);
    sub_5E1A4(v21, (uint64_t)&v50, &qword_32BC88);
    if (*((_QWORD *)&v50 + 1))
    {
      sub_5E1A4((uint64_t)&v52, (uint64_t)v49, &qword_3274A8);
      sub_5DC98(v49, (uint64_t)v55);
      sub_19FCC8(&v50);
      v26 = v56;
      v25 = v57;
      sub_66898(v55, v56);
      dispatch thunk of ActionModel.actionMetrics.getter(v26, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v55);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
      {
        v28 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
        v29 = v45;
        v28(v45, v17, v18);
LABEL_19:
        v32 = sub_5C154(&qword_31EF10);
        v33 = swift_allocObject(v32, 112, 7);
        *(_OWORD *)(v33 + 16) = xmmword_255F00;
        sub_5E1A4((uint64_t)(a6 + 4), (uint64_t)&v50, &qword_3274A8);
        sub_5DC98(&v50, v33 + 32);
        v34 = a6[1];
        *v14 = *a6;
        v14[1] = v34;
        v35.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD, uint64_t))(v41 + 104))(v14, enum case for AppAnalyticsAction.Type.reportReviewsDialogEvent(_:), v42);
        *(_QWORD *)(v33 + 96) = type metadata accessor for AppAnalyticsAction(0, v35);
        *(_QWORD *)(v33 + 104) = sub_648E0(&qword_31F5A0, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
        sub_668BC((_QWORD *)(v33 + 72));
        swift_bridgeObjectRetain(v34);
        AppAnalyticsAction.init(type:)(v14);
        v51 = type metadata accessor for CompoundAction(0);
        v52 = &protocol witness table for CompoundAction;
        sub_668BC(&v50);
        CompoundAction.init(actionMetrics:subactions:)(v29, v33);
        v36 = v43;
        sub_76B00(v43);
        PerformAction.callAsFunction(_:withMetrics:)(&v50, v36, v24, v38);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v36, v39);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v50);
        return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v58);
      }
    }
    else
    {
      sub_5E09C((uint64_t)&v50, &qword_32BC88);
      v27.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    }
    v29 = v45;
    static ActionMetrics.notInstrumented.getter(v27);
    sub_5E09C((uint64_t)v17, &qword_32BC80);
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_22BBE4@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = sub_5C154(&qword_320478);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v6);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = sub_5C154(&qword_32BB30);
  v11 = sub_228E9C(a1, v2, (uint64_t)&v8[*(int *)(v9 + 44)], v10);
  v12 = static Alignment.center.getter(v11);
  sub_74E8C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, 0.0, 1, v12, v13);
  return sub_5E09C((uint64_t)v8, &qword_320478);
}

uint64_t sub_22BCDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(v5, (uint64_t)v4, type metadata accessor for ReviewsHeaderComponent);
  v6 = sub_648E0((unint64_t *)&unk_32A0C0, type metadata accessor for ReviewsHeaderComponent, (uint64_t)&unk_269668);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_22BD78(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22BDA0 + 4 * byte_2694A0[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_22BDA0()
{
  return 0x6575676573;
}

unint64_t sub_22BDB4()
{
  return 0xD000000000000011;
}

uint64_t sub_22BE34()
{
  return 0x726F737365636361;
}

uint64_t sub_22BE58()
{
  return 0x6D657449756E656DLL;
}

unint64_t sub_22BE74()
{
  return 0xD000000000000010;
}

void sub_22BE90(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _OWORD *v66;

  v52 = a2;
  v53 = type metadata accessor for SegmentedControlItem(0);
  __chkstk_darwin(v53);
  v4 = (_QWORD **)((char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v5);
  v7 = (_QWORD **)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = sub_5C154(&qword_32BC98);
  v8 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReviewsHeaderComponentModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v13 + 40;
  v62 = 0;
  v60 = 0u;
  v61 = 0u;
  v65 = 0;
  v63 = 0u;
  v64 = 0u;
  sub_8B354((uint64_t)&v60, (uint64_t)&v63);
  v14 = v64;
  *(_OWORD *)(v13 + 40) = v63;
  *(_OWORD *)(v13 + 56) = v14;
  *((_QWORD *)v13 + 9) = v65;
  sub_5E09C((uint64_t)&v60, (uint64_t *)&unk_326210);
  v56 = (int *)v11;
  v15 = *(int *)(v11 + 24);
  v66 = v13;
  v16 = (uint64_t)&v13[v15];
  v17 = type metadata accessor for ImpressionMetrics(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v59 = v16;
  v18(v16, 1, 1, v17);
  v20 = a1[3];
  v19 = a1[4];
  v57 = a1;
  sub_66898(a1, v20);
  v21 = sub_22D378();
  v22 = v10;
  v23 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReviewsHeaderComponentModel.CodingKeys, &type metadata for ReviewsHeaderComponentModel.CodingKeys, v21, v20, v19);
  if (v23)
  {
    v28 = (uint64_t)v55;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v57);
    sub_5E09C(v28, &qword_320B70);
    sub_5E09C(v59, &qword_321EA8);
  }
  else
  {
    v51 = v5;
    v50 = v4;
    v58 = v8;
    v24 = sub_5C154(&qword_320B78);
    LOBYTE(v63) = 0;
    v25 = sub_67060((unint64_t *)&qword_320B90, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    v26 = v54;
    v27 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60, v24, &v63, v54, v24, v25);
    v29 = v61;
    v30 = v66;
    *v66 = v60;
    v30[1] = v29;
    *((_QWORD *)v30 + 4) = v62;
    v31 = sub_5C154(&qword_320B70);
    LOBYTE(v63) = 1;
    v32 = sub_67060(&qword_320B98, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60, v31, &v63, v26, v31, v32);
    sub_8B3E0((uint64_t)&v60, (uint64_t)v55, &qword_320B70);
    LOBYTE(v60) = 2;
    v33 = sub_C39DC((unint64_t *)&qword_322038, &qword_321EA8, (void (*)(void))sub_19B718, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v51, &v60, v26, v51, v33);
    v34 = v56;
    sub_8B3E0((uint64_t)v7, v59, &qword_321EA8);
    LOBYTE(v60) = 3;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v26);
    v36 = v58;
    v37 = (uint64_t)v66;
    v38 = (uint64_t *)((char *)v66 + v34[7]);
    *v38 = v35;
    v38[1] = v39;
    v40 = sub_5C154(&qword_32BB78);
    LOBYTE(v63) = 4;
    v41 = sub_22D3BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60, v40, &v63, v26, v40, v41);
    *(_QWORD *)(v37 + v34[8]) = v60;
    LOBYTE(v60) = 5;
    v42 = sub_648E0(&qword_32BCB0, type metadata accessor for SegmentedControlItem, (uint64_t)&protocol conformance descriptor for SegmentedControlItem);
    v43 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v50, v53, &v60, v26, v53, v42);
    sub_5E160((uint64_t)v43, v37 + v34[9], type metadata accessor for SegmentedControlItem);
    LOBYTE(v60) = 6;
    v44 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v26);
    v45 = (uint64_t *)(v37 + v34[10]);
    *v45 = v44;
    v45[1] = v46;
    v47 = sub_5C154(&qword_32BBC8);
    LOBYTE(v63) = 7;
    v48 = sub_C39DC(&qword_32BCB8, &qword_32BBC8, (void (*)(void))sub_22D438, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v60, v47, &v63, v26, v47, v48);
    *(_QWORD *)(v37 + v34[11]) = v60;
    LOBYTE(v63) = 8;
    v49 = sub_22D438();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for MenuItem, &v63, v26, &type metadata for MenuItem, v49);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v26);
    sub_66F14((uint64_t)&v60, v37 + v34[12], &qword_32BC88);
    sub_5E11C(v37, v52, type metadata accessor for ReviewsHeaderComponentModel);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v57);
    sub_6685C(v37, type metadata accessor for ReviewsHeaderComponentModel);
  }
}

uint64_t sub_22C668()
{
  unsigned __int8 *v0;

  return sub_22BD78(*v0);
}

uint64_t sub_22C670@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22D738(a1, a2);
  *a3 = result;
  return result;
}

void sub_22C694(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_22C6A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_22D378();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_22C6C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_22D378();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_22C6F0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_22BE90(a1, a2);
}

uint64_t sub_22C704()
{
  return sub_648E0(&qword_32BB20, type metadata accessor for ReviewsHeaderComponentModel, (uint64_t)&unk_2695D8);
}

uint64_t sub_22C730()
{
  return sub_648E0(&qword_32BB28, type metadata accessor for ReviewsHeaderComponent, (uint64_t)&unk_269588);
}

uint64_t sub_22C75C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2BAC30, 1);
}

uint64_t sub_22C76C()
{
  return sub_648E0(&qword_320078, type metadata accessor for ReviewsHeaderComponentModel, (uint64_t)&unk_269628);
}

uint64_t sub_22C798@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22A4FC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_22C7A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22A6E8(*(_QWORD *)(v1 + 16), *(char **)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

unint64_t sub_22C7B0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_32BBF0;
  if (!qword_32BBF0)
  {
    v1 = sub_667D0(&qword_32BBE0);
    v2[0] = sub_667D0(&qword_32BBF8);
    v2[1] = sub_667D0(&qword_31F600);
    v2[2] = sub_22C888();
    v2[3] = sub_67060(&qword_31F620, &qword_31F600, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32BBF0);
  }
  return result;
}

unint64_t sub_22C888()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32BC00;
  if (!qword_32BC00)
  {
    v1 = sub_667D0(&qword_32BBF8);
    sub_22C90C();
    sub_67060(&qword_328440, &qword_328448, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32BC00);
  }
  return result;
}

unint64_t sub_22C90C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32BC08;
  if (!qword_32BC08)
  {
    v1 = sub_667D0(&qword_32BC10);
    sub_67060(&qword_32BC18, &qword_32BC20, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_67060(&qword_31F7D0, &qword_31F7D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32BC08);
  }
  return result;
}

unint64_t sub_22C9A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32BC28;
  if (!qword_32BC28)
  {
    v1 = sub_667D0(&qword_32BBE8);
    sub_67060(&qword_32BC30, &qword_32BC38, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_32BC28);
  }
  return result;
}

uint64_t sub_22CA34()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = (int *)type metadata accessor for ReviewsHeaderComponentModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v33 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v33 + 16) & ~v33;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for ReviewsHeaderComponent(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v32 = *(_QWORD *)(v6 + 64);
  v35 = v0;
  v8 = v0 + v3;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v3));
  if (*(_QWORD *)(v0 + v3 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v8 + 40));
  v34 = v7;
  v9 = v4 + v7;
  v10 = v8 + v1[6];
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v14 = v3 + v9;
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[8]));
  v15 = (_QWORD *)(v8 + v1[9]);
  swift_bridgeObjectRelease(v15[1]);
  swift_bridgeObjectRelease(v15[3]);
  swift_bridgeObjectRelease(v15[5]);
  swift_bridgeObjectRelease(v15[7]);
  v16 = type metadata accessor for SegmentedControlItem(0);
  v17 = (char *)v15 + *(int *)(v16 + 36);
  v18 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = (char *)v15 + *(int *)(v16 + 40);
  if (!v13((uint64_t)v19, 1, v11))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  v20 = v14 & ~v34;
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[11]));
  v21 = (_QWORD *)(v8 + v1[12]);
  v22 = v21[1];
  if (v22)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v21 + 4);
  }
  v23 = v35 + v20;
  sub_79534(*(_QWORD *)(v35 + v20), *(_QWORD *)(v35 + v20 + 8), *(_BYTE *)(v35 + v20 + 16));
  v24 = (_QWORD *)(v35 + v20 + v5[5]);
  v25 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  v27 = (_QWORD *)(v23 + v5[6]);
  if ((v27[5] & 1) != 0)
  {
    if (v27[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v27);
  }
  else
  {
    swift_release(*v27);
  }
  v28 = (_QWORD *)(v23 + v5[7]);
  v29 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  else
  {
    swift_release(*v28);
  }
  return swift_deallocObject(v35, v20 + v32, v33 | v34 | 7);
}

uint64_t sub_22CCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ReviewsHeaderComponentModel(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ReviewsHeaderComponent(0) - 8) + 80);
  return sub_22B230(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

unint64_t sub_22CD70()
{
  unint64_t result;

  result = qword_32BC78;
  if (!qword_32BC78)
  {
    result = swift_getWitnessTable(&unk_263CAC, &type metadata for MenuItem);
    atomic_store(result, (unint64_t *)&qword_32BC78);
  }
  return result;
}

uint64_t sub_22CDB4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = (int *)type metadata accessor for ReviewsHeaderComponentModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v4 = (_QWORD *)(v0 + ((v3 + 32) & ~v3));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v4);
  if (v4[8])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v4 + 5);
  v5 = (char *)v4 + v1[6];
  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v1[8]));
  v9 = (_QWORD *)((char *)v4 + v1[9]);
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[3]);
  swift_bridgeObjectRelease(v9[5]);
  swift_bridgeObjectRelease(v9[7]);
  v10 = type metadata accessor for SegmentedControlItem(0);
  v11 = (char *)v9 + *(int *)(v10 + 36);
  v12 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (char *)v9 + *(int *)(v10 + 40);
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v1[11]));
  v14 = (_QWORD *)((char *)v4 + v1[12]);
  v15 = v14[1];
  if (v15)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v14[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v14 + 4);
  }
  v16 = (v20 + ((v3 + 32) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 + 72;
  v18 = v0 + v16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v16 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v18 + 24));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v18 + 32));
  return swift_deallocObject(v0, v17, v3 | 7);
}

uint64_t sub_22CFA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for ReviewsHeaderComponentModel(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_22B4CC(v1 + v4, v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8), a1);
}

uint64_t sub_22CFF4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int *)type metadata accessor for ReviewsHeaderComponentModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v33 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v33 + 32) & ~v33;
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (int *)type metadata accessor for ReviewsHeaderComponent(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v32 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v36 = v0;
  v8 = (_QWORD *)(v0 + v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v8);
  if (v8[8])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v8 + 5);
  v34 = v4;
  v35 = v7;
  v9 = v4 + v7;
  v10 = (char *)v8 + v1[6];
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v10, 1, v11))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  v14 = v9 + 72;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v1[8]));
  v15 = (_QWORD *)((char *)v8 + v1[9]);
  swift_bridgeObjectRelease(v15[1]);
  swift_bridgeObjectRelease(v15[3]);
  swift_bridgeObjectRelease(v15[5]);
  swift_bridgeObjectRelease(v15[7]);
  v16 = type metadata accessor for SegmentedControlItem(0);
  v17 = (char *)v15 + *(int *)(v16 + 36);
  v18 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = (char *)v15 + *(int *)(v16 + 40);
  if (!v13(v19, 1, v11))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  v20 = v14 & ~v35;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v1[11]));
  v21 = (_QWORD *)((char *)v8 + v1[12]);
  v22 = v21[1];
  if (v22)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21[3]);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v21 + 4);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v36 + v34 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v36 + v34 + 24));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v36 + v34 + 32));
  v23 = v36 + v20;
  sub_79534(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
  v24 = (_QWORD *)(v36 + v20 + v5[5]);
  v25 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  v27 = (_QWORD *)(v23 + v5[6]);
  if ((v27[5] & 1) != 0)
  {
    if (v27[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v27);
  }
  else
  {
    swift_release(*v27);
  }
  v28 = (_QWORD *)(v23 + v5[7]);
  v29 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  else
  {
    swift_release(*v28);
  }
  return swift_deallocObject(v36, v20 + v32, v33 | v35 | 7);
}

uint64_t sub_22D2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ReviewsHeaderComponentModel(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ReviewsHeaderComponent(0) - 8) + 80);
  return sub_22B668(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, (_QWORD *)(v2 + v7), v2 + ((v7 + v8 + 72) & ~v8));
}

unint64_t sub_22D378()
{
  unint64_t result;

  result = qword_32BCA0;
  if (!qword_32BCA0)
  {
    result = swift_getWitnessTable(&unk_2697F4, &type metadata for ReviewsHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BCA0);
  }
  return result;
}

unint64_t sub_22D3BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32BCA8;
  if (!qword_32BCA8)
  {
    v1 = sub_667D0(&qword_32BB78);
    sub_648E0(&qword_32BCB0, type metadata accessor for SegmentedControlItem, (uint64_t)&protocol conformance descriptor for SegmentedControlItem);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_32BCA8);
  }
  return result;
}

unint64_t sub_22D438()
{
  unint64_t result;

  result = qword_32BCC0;
  if (!qword_32BCC0)
  {
    result = swift_getWitnessTable(&unk_263C84, &type metadata for MenuItem);
    atomic_store(result, (unint64_t *)&qword_32BCC0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReviewsHeaderComponentModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReviewsHeaderComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_22D558 + 4 * byte_2694AE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_22D58C + 4 * byte_2694A9[v4]))();
}

uint64_t sub_22D58C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22D594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22D59CLL);
  return result;
}

uint64_t sub_22D5A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22D5B0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_22D5B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22D5BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReviewsHeaderComponentModel.CodingKeys()
{
  return &type metadata for ReviewsHeaderComponentModel.CodingKeys;
}

unint64_t sub_22D5DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_32BCC8;
  if (!qword_32BCC8)
  {
    v1 = sub_667D0(&qword_320480);
    sub_67060(&qword_32BCD0, &qword_320478, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_32BCC8);
  }
  return result;
}

unint64_t sub_22D664()
{
  unint64_t result;

  result = qword_32BCD8;
  if (!qword_32BCD8)
  {
    result = swift_getWitnessTable(&unk_2697CC, &type metadata for ReviewsHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BCD8);
  }
  return result;
}

unint64_t sub_22D6AC()
{
  unint64_t result;

  result = qword_32BCE0;
  if (!qword_32BCE0)
  {
    result = swift_getWitnessTable(&unk_26973C, &type metadata for ReviewsHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BCE0);
  }
  return result;
}

unint64_t sub_22D6F4()
{
  unint64_t result;

  result = qword_32BCE8;
  if (!qword_32BCE8)
  {
    result = swift_getWitnessTable(&unk_269764, &type metadata for ReviewsHeaderComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BCE8);
  }
  return result;
}

uint64_t sub_22D738(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x800000000026D790;
    if (a2 == 0x800000000026D790)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6954726564616568 && a2 == 0xEB00000000656C74)
  {
    v9 = 0xEB00000000656C74;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954726564616568, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x65746E656D676573 && a2 == 0xEE00736D65744964)
  {
    v10 = 0xEE00736D65744964;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E656D676573, 0xEE00736D65744964, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000000002752B0)
  {
    v11 = 0x80000000002752B0;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000002752B0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xEE00656C74695479)
  {
    v12 = 0xEE00656C74695479;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xEE00656C74695479, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x6D657449756E656DLL && a2 == 0xE900000000000073)
  {
    v13 = 0xE900000000000073;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D657449756E656DLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000000002752D0)
  {
    swift_bridgeObjectRelease(0x80000000002752D0);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002752D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t JSAction.init(actionMetrics:kind:params:clickData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v12 = (int *)type metadata accessor for JSAction(0);
  v13 = a6 + v12[7];
  v14 = type metadata accessor for ClickData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a6, a1, v15);
  v16 = (_QWORD *)(a6 + v12[5]);
  *v16 = a2;
  v16[1] = a3;
  *(_QWORD *)(a6 + v12[6]) = a4;
  return sub_66814(a5, v13);
}

uint64_t type metadata accessor for JSAction(uint64_t a1)
{
  uint64_t result;

  result = qword_32BD68;
  if (!qword_32BD68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSAction);
  return result;
}

uint64_t JSAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t JSAction.kind.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for JSAction(0) + 20));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

double JSAction.params.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for JSAction(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 24))).n128_u64[0];
  return result;
}

uint64_t JSAction.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for JSAction(0) + 28);
  return sub_6CFCC(v3, a1);
}

uint64_t JSAction.clickData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for JSAction(0) + 28);
  return sub_66814(a1, v3);
}

Swift::Void (__swiftcall *JSAction.clickData.modify())()
{
  type metadata accessor for JSAction(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_22DD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_6CFCC(v2 + *(int *)(a1 + 28), a2);
}

void sub_22DD3C(char *a1)
{
  sub_196520(*a1);
}

void sub_22DD48()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_22DDA0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1684957547, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_22DE08()
{
  __asm { BR              X10 }
}

uint64_t sub_22DE50(uint64_t a1)
{
  String.hash(into:)(a1, 1684957547, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_22DEA4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_22DEF8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1684957547, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_22DF60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_22F384(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_22DF8C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_22DFC8 + 4 * byte_269854[*v0]))();
}

void sub_22DFC8(_QWORD *a1@<X8>)
{
  *a1 = 1684957547;
  a1[1] = 0xE400000000000000;
}

void sub_22DFDC(_QWORD *a1@<X8>)
{
  *a1 = 0x736D61726170;
  a1[1] = 0xE600000000000000;
}

void sub_22DFF4(_QWORD *a1@<X8>)
{
  *a1 = 0x7461446B63696C63;
  a1[1] = 0xE900000000000061;
}

uint64_t sub_22E014()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22E050 + 4 * byte_269858[*v0]))(0x654D6E6F69746361, 0xED00007363697274);
}

uint64_t sub_22E050()
{
  return 1684957547;
}

uint64_t sub_22E060()
{
  return 0x736D61726170;
}

uint64_t sub_22E074()
{
  return 0x7461446B63696C63;
}

unint64_t sub_22E090@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_22F384(a1);
  *a2 = result;
  return result;
}

void sub_22E0B4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_22E0C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_22E6AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_22E0E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_22E6AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t JSAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(char *, _QWORD *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v58 = a2;
  v3 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v3);
  v59 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_324A48);
  __chkstk_darwin(v5);
  v60 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_324A90);
  __chkstk_darwin(v7);
  v57 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for ActionMetrics(0);
  v63 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v64 = (uint64_t *)((char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = sub_5C154(&qword_32BCF0);
  v10 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for JSAction(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t)&v15[*(int *)(v16 + 28)];
  v18 = type metadata accessor for ClickData(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v65 = v17;
  v19(v17, 1, 1, v18);
  v21 = a1[3];
  v20 = a1[4];
  sub_66898(a1, v21);
  v22 = sub_22E6AC();
  v23 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for JSAction.CodingKeys, &type metadata for JSAction.CodingKeys, v22, v21, v20);
  if (v23)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    return sub_5E09C(v65, &qword_31F590);
  }
  else
  {
    v55 = v18;
    v56 = v15;
    v66 = v10;
    v24 = v63;
    v25 = a1;
    v70 = 0;
    v26 = sub_648E0(&qword_32BD00, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
    v28 = v61;
    v27 = v62;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v64, v61, &v70, v62, v61, v26);
    v30 = *(void (**)(char *, _QWORD *, uint64_t))(v24 + 32);
    v31 = v27;
    v32 = v12;
    v33 = v56;
    v30(v56, v64, v28);
    v69 = 1;
    v34 = KeyedDecodingContainer.decode(_:forKey:)(&v69, v31);
    v35 = (uint64_t *)&v33[*(int *)(v13 + 20)];
    *v35 = v34;
    v35[1] = v36;
    v37 = type metadata accessor for JSONObject(0);
    v68 = 2;
    v38 = sub_648E0(&qword_328058, (uint64_t (*)(uint64_t))&type metadata accessor for JSONObject, (uint64_t)&protocol conformance descriptor for JSONObject);
    v39 = (uint64_t)v60;
    v64 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v68, v31, v37, v38);
    v54 = v32;
    v40 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v39, 1, v37) == 1)
    {
      sub_5E09C(v39, &qword_324A48);
      v41 = 0;
      v42 = v58;
    }
    else
    {
      v43 = (uint64_t)v57;
      JSONObject.dictionary.getter();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v37);
      v44 = type metadata accessor for JSONDictionary(0);
      v45 = *(_QWORD *)(v44 - 8);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44);
      v42 = v58;
      if (v46 == 1)
      {
        sub_5E09C(v43, &qword_324A90);
        v41 = 0;
      }
      else
      {
        v47 = sub_5C154(&qword_326600);
        v41 = JSONDictionary.bridgedPrimitiveValues<A, B>()(&type metadata for String, v47, &protocol witness table for String);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
      }
    }
    v48 = (uint64_t)v56;
    *(_QWORD *)&v56[*(int *)(v13 + 24)] = v41;
    v67 = 3;
    v49 = sub_648E0(&qword_32BD08, (uint64_t (*)(uint64_t))&type metadata accessor for ClickData, (uint64_t)&protocol conformance descriptor for ClickData);
    v50 = (uint64_t)v59;
    v51 = v54;
    v52 = v62;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v55, &v67, v62, v55, v49);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v52);
    sub_66814(v50, v65);
    sub_11AD78(v48, v42);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
    return sub_22E6F0(v48);
  }
}

unint64_t sub_22E6AC()
{
  unint64_t result;

  result = qword_32BCF8;
  if (!qword_32BCF8)
  {
    result = swift_getWitnessTable(&unk_269A7C, &type metadata for JSAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BCF8);
  }
  return result;
}

uint64_t sub_22E6F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for JSAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22E72C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JSAction.init(from:)(a1, a2);
}

void JSAction.jsRepresentation(in:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  Swift::String v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD v21[2];

  v3 = v2;
  v6 = type metadata accessor for JSAction(0);
  v7 = *(int *)(v6 + 24);
  v8 = *(_QWORD *)(v2 + v7);
  if (v8)
  {
    v21[0] = *(_QWORD *)(v2 + v7);
    swift_bridgeObjectRetain(v8);
    v9 = a1;
    v10 = sub_5C154(&qword_3259E8);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v21, v10);
    sub_5E09C((uint64_t)v21, &qword_3259E8);
  }
  else
  {
    v12 = a1;
    v11 = 0;
  }
  v13 = (void *)objc_opt_self(JSValue);
  v14 = objc_msgSend(v13, "valueWithObject:inContext:", v11, a1);
  swift_unknownObjectRelease(v11);

  if (v14)
  {
    v15._countAndFlagsBits = 0x646E696B24;
    v15._object = (void *)0xE500000000000000;
    if (JSValue.hasValue(forProperty:)(v15))
    {
LABEL_8:
      a2[3] = sub_119E10();
      a2[4] = &protocol witness table for JSValue;
      *a2 = v14;
      return;
    }
    v16 = (_QWORD *)(v3 + *(int *)(v6 + 20));
    v17 = v16[1];
    v21[0] = *v16;
    v21[1] = v17;
    v18 = a1;
    swift_bridgeObjectRetain(v17);
    v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v21, &type metadata for String);
    v20 = objc_msgSend(v13, "valueWithObject:inContext:", v19, v18);
    swift_unknownObjectRelease(v19);

    if (v20)
    {
      JSValue.subscript.setter(v20, 0x646E696B24, 0xE500000000000000);
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_22E8E4()
{
  return sub_648E0(&qword_3200B0, type metadata accessor for JSAction, (uint64_t)&protocol conformance descriptor for JSAction);
}

void sub_22E910(void *a1@<X0>, _QWORD *a2@<X8>)
{
  JSAction.jsRepresentation(in:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for JSAction(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    v13 = *(uint64_t *)((char *)a2 + v9);
    *v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = v13;
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ClickData(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    swift_bridgeObjectRetain(v12);
    v20 = swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17, v20))
    {
      v21 = sub_5C154(&qword_31F590);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for JSAction(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v5 = a1 + a2[7];
  v6 = type metadata accessor for ClickData(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t initializeWithCopy for JSAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  v12 = *(_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(a1 + v8) = v12;
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for ClickData(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v17 + 48);
  swift_bridgeObjectRetain(v11);
  v19 = swift_bridgeObjectRetain(v12);
  if (v18(v15, 1, v16, v19))
  {
    v20 = sub_5C154(&qword_31F590);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for JSAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for ClickData(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = sub_5C154(&qword_31F590);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t initializeWithTake for JSAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for ClickData(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_5C154(&qword_31F590);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for JSAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for ClickData(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = sub_5C154(&qword_31F590);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_22EFE0);
}

uint64_t sub_22EFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5C154(&qword_31F590);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for JSAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_22F09C);
}

uint64_t sub_22F09C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_5C154(&qword_31F590);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_22F148(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_269950;
    v6[2] = &unk_269968;
    sub_6CEDC(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for JSAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_22F22C + 4 * byte_269861[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_22F260 + 4 * byte_26985C[v4]))();
}

uint64_t sub_22F260(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22F268(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22F270);
  return result;
}

uint64_t sub_22F27C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22F284);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_22F288(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22F290(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSAction.CodingKeys()
{
  return &type metadata for JSAction.CodingKeys;
}

unint64_t sub_22F2B0()
{
  unint64_t result;

  result = qword_32BDA8;
  if (!qword_32BDA8)
  {
    result = swift_getWitnessTable(&unk_269A54, &type metadata for JSAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BDA8);
  }
  return result;
}

unint64_t sub_22F2F8()
{
  unint64_t result;

  result = qword_32BDB0;
  if (!qword_32BDB0)
  {
    result = swift_getWitnessTable(&unk_26998C, &type metadata for JSAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BDB0);
  }
  return result;
}

unint64_t sub_22F340()
{
  unint64_t result;

  result = qword_32BDB8;
  if (!qword_32BDB8)
  {
    result = swift_getWitnessTable(&unk_2699B4, &type metadata for JSAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_32BDB8);
  }
  return result;
}

unint64_t sub_22F384(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6B88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_22F3CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_22F404 + 4 * byte_269AD0[*v0]))(0xD000000000000013, 0x800000000026FD90);
}

uint64_t sub_22F404()
{
  return 0x69632E73756E696DLL;
}

uint64_t sub_22F5B8()
{
  return 0;
}

uint64_t sub_22F5C4()
{
  return 7630433;
}

uint64_t ContextActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22F624 + 4 * byte_269AEF[*v0]))(0x6572616873, 0xE500000000000000);
}

uint64_t sub_22F624()
{
  return 0x6957646572616873;
}

uint64_t sub_22F648()
{
  return 0x6C636E4977656976;
}

uint64_t sub_22F66C()
{
  return 0x6F4374726F706572;
}

uint64_t sub_22F690()
{
  return 0x64616F6C6E776F64;
}

uint64_t sub_22F6A8()
{
  return 0x6F446C65636E6163;
}

uint64_t sub_22F754()
{
  return 0x656D616E6572;
}

uint64_t sub_22F768()
{
  return 0x6E61576F54646461;
}

unint64_t sub_22F78C()
{
  return 0xD000000000000014;
}

uint64_t sub_22F8FC()
{
  return 1701998445;
}

uint64_t sub_22F928()
{
  return 0x746963696C707865;
}

uint64_t sub_22F94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_22FA80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8, *(_QWORD *)(a2 + 40));
    v3 = ContextActionType.rawValue.getter();
    v5 = v4;
    String.hash(into:)(v8, v3, v4);
    swift_bridgeObjectRelease(v5);
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

void sub_2302BC()
{
  __asm { BR              X10 }
}

uint64_t sub_2302F0()
{
  return sub_17EC4C();
}

uint64_t sub_230338()
{
  return sub_17EB50();
}

uint64_t sub_23058C()
{
  return 0x736920646E756F46;
}

void sub_2305B0()
{
  JUMPOUT(0x230580);
}

NSString sub_2305D8()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;

  ContextActionType.rawValue.getter();
  v1 = v0;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

void sub_230620()
{
  __asm { BR              X10 }
}

uint64_t sub_230654()
{
  return sub_17EB50();
}

uint64_t ContextActionType.identifier.getter()
{
  return ContextActionType.rawValue.getter();
}

void ContextActionType.swipeActionType.getter(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_269F1A[*v1];
}

BookStoreUI::ContextActionType_optional __swiftcall ContextActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  char *v3;
  uint64_t v4;
  BookStoreUI::ContextActionType_optional result;
  char v6;
  char v7;

  object = rawValue._object;
  v3 = v1;
  v4 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_2E6088, rawValue._countAndFlagsBits, rawValue._object, &unk_31E768);
  result.value = swift_bridgeObjectRelease(object);
  v6 = 0;
  v7 = 13;
  switch(v4)
  {
    case 0:
      goto LABEL_15;
    case 1:
      v6 = 1;
      goto LABEL_15;
    case 2:
      v6 = 2;
      goto LABEL_15;
    case 3:
      v6 = 3;
      goto LABEL_15;
    case 4:
      v6 = 4;
      goto LABEL_15;
    case 5:
      v6 = 5;
      goto LABEL_15;
    case 6:
      v6 = 6;
      goto LABEL_15;
    case 7:
      v6 = 7;
      goto LABEL_15;
    case 8:
      v6 = 8;
      goto LABEL_15;
    case 9:
      v6 = 9;
      goto LABEL_15;
    case 10:
      v6 = 10;
      goto LABEL_15;
    case 11:
      v6 = 11;
      goto LABEL_15;
    case 12:
      v6 = 12;
LABEL_15:
      v7 = v6;
      break;
    case 13:
      break;
    case 14:
      v7 = 14;
      break;
    case 15:
      v7 = 15;
      break;
    case 16:
      v7 = 16;
      break;
    case 17:
      v7 = 17;
      break;
    case 18:
      v7 = 18;
      break;
    case 19:
      v7 = 19;
      break;
    case 20:
      v7 = 20;
      break;
    case 21:
      v7 = 21;
      break;
    case 22:
      v7 = 22;
      break;
    case 23:
      v7 = 23;
      break;
    case 24:
      v7 = 24;
      break;
    case 25:
      v7 = 25;
      break;
    case 26:
      v7 = 26;
      break;
    case 27:
      v7 = 27;
      break;
    case 28:
      v7 = 28;
      break;
    case 29:
      v7 = 29;
      break;
    case 30:
      v7 = 30;
      break;
    default:
      v7 = 31;
      break;
  }
  *v3 = v7;
  return result;
}

_UNKNOWN **static ContextActionType.allCases.getter()
{
  return &off_2E70D0;
}

uint64_t sub_230918()
{
  return sub_196E88();
}

Swift::Int sub_230924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = ContextActionType.rawValue.getter();
  v2 = v1;
  String.hash(into:)(v4, v0, v1);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

double sub_230988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = ContextActionType.rawValue.getter();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

Swift::Int sub_2309D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  v1 = ContextActionType.rawValue.getter();
  v3 = v2;
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

BookStoreUI::ContextActionType_optional sub_230A38(Swift::String *a1)
{
  return ContextActionType.init(rawValue:)(*a1);
}

uint64_t sub_230A44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ContextActionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_230A68(_QWORD *a1@<X8>)
{
  *a1 = &off_2E70D0;
}

BookStoreUI::ContextActionType::ContextActionGroup_optional __swiftcall ContextActionType.ContextActionGroup.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 9;
  if ((unint64_t)rawValue < 9)
    v2 = rawValue;
  *v1 = v2;
  return (BookStoreUI::ContextActionType::ContextActionGroup_optional)rawValue;
}

_UNKNOWN **static ContextActionType.ContextActionGroup.allCases.getter()
{
  return &off_2E7110;
}

BookStoreUI::ContextActionType::ContextActionGroup_optional sub_230A98(Swift::Int *a1)
{
  return ContextActionType.ContextActionGroup.init(rawValue:)(*a1);
}

void sub_230AA0(_QWORD *a1@<X8>)
{
  *a1 = &off_2E7110;
}

_QWORD *static ContextActionType.orderActionItems(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  char v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain(a1);
    v4 = (_QWORD *)(v3 + 40);
    v5 = _swiftEmptyArrayStorage;
    do
    {
      v6 = *(v4 - 1);
      v7 = (void *)*v4;
      swift_bridgeObjectRetain(*v4);
      v8._countAndFlagsBits = v6;
      v8._object = v7;
      ContextActionType.init(rawValue:)(v8);
      if (v21 != 31)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          v5 = sub_57BE0(0, v5[2] + 1, 1, v5);
        v10 = v5[2];
        v9 = v5[3];
        if (v10 >= v9 >> 1)
          v5 = sub_57BE0((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
        v5[2] = v10 + 1;
        *((_BYTE *)v5 + v10 + 32) = v21;
      }
      v4 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = _swiftEmptyArrayStorage;
  }
  v11 = sub_2333E8((uint64_t)v5);
  swift_bridgeObjectRelease(v5);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain(v11);
    v13 = (_QWORD *)(v11 + 40);
    v14 = _swiftEmptyArrayStorage;
    do
    {
      v16 = *v13;
      if (*(_QWORD *)(*v13 + 16))
      {
        v17 = *((_BYTE *)v13 - 8);
        swift_bridgeObjectRetain(*v13);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = sub_57AD4(0, v14[2] + 1, 1, v14);
        v19 = v14[2];
        v18 = v14[3];
        if (v19 >= v18 >> 1)
          v14 = sub_57AD4((_QWORD *)(v18 > 1), v19 + 1, 1, v14);
        v14[2] = v19 + 1;
        v15 = &v14[2 * v19];
        *((_BYTE *)v15 + 32) = v17;
        v15[5] = v16;
      }
      v13 += 2;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v11);
  return v14;
}

uint64_t sub_230C9C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_231CD0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_230E48(_BYTE *a1, Swift::Int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t result;
  _QWORD v14[9];

  v3 = v2;
  v5 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  v6 = ContextActionType.rawValue.getter();
  v8 = v7;
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v14, v6, v8);
  swift_bridgeObjectRelease(v8);
  v9 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v5 + 32));
  if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v14[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_231E68(a2, v9, isUniquelyReferenced_nonNull_native);
  v11 = *v3;
  *v3 = v14[0];
  swift_bridgeObjectRelease(v11);
  result = 1;
  *a1 = a2;
  return result;
}

Swift::Int sub_23171C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5C154(&qword_32BE10);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_2319F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5C154(&qword_32BE08);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v17);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      v22 = ContextActionType.rawValue.getter();
      v24 = v23;
      String.hash(into:)(v34, v22, v23);
      swift_bridgeObjectRelease(v24);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_231CD0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_23171C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_232838();
      goto LABEL_22;
    }
    sub_232B78(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

Swift::Int sub_231E68(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    v9 = v7 + 1;
    if ((a3 & 1) != 0)
    {
      sub_2319F8(v9);
    }
    else
    {
      if (v8 > v7)
      {
        result = (Swift::Int)sub_2329E8();
        goto LABEL_10;
      }
      sub_232E24(v9);
    }
    v10 = *v3;
    Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
    v11 = ContextActionType.rawValue.getter();
    v13 = v12;
    String.hash(into:)(v18, v11, v12);
    swift_bridgeObjectRelease(v13);
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v10 + 32));
    if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
    JUMPOUT(0x232724);
  }
  *(_QWORD *)(v14 + 16) = v17;
  return result;
}

void sub_232838()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_5C154(&qword_32BE10);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_2329E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_5C154(&qword_32BE08);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_232B78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5C154(&qword_32BE10);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_232E24(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5C154(&qword_32BE08);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v32 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v17);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    v22 = ContextActionType.rawValue.getter();
    v24 = v23;
    String.hash(into:)(v33, v22, v23);
    swift_bridgeObjectRelease(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v32;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_2330C8(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
LABEL_2:
  if (v3 <= v4)
    v6 = v4;
  else
    v6 = v3;
  while (1)
  {
    if (v4 == v3)
      return (uint64_t)_swiftEmptyArrayStorage;
    if (v6 == v3)
      break;
    v7 = *(unsigned __int8 *)(v5 + v3++);
    result = sub_22FA80(v7, a2);
    if ((result & 1) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_20CB0C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        result = sub_20CB0C(v8 > 1, v9 + 1, 1);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v9) = v7;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_2331C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  do
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = *(_BYTE *)(a1 + v5 + 32);
      v9 = sub_58684(v8);
      if ((v10 & 1) != 0)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v9);
        swift_bridgeObjectRetain(v11);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_57AD4(0, v6[2] + 1, 1, v6);
        v13 = v6[2];
        v12 = v6[3];
        if (v13 >= v12 >> 1)
          v6 = sub_57AD4((_QWORD *)(v12 > 1), v13 + 1, 1, v6);
        v6[2] = v13 + 1;
        v7 = &v6[2 * v13];
        *((_BYTE *)v7 + 32) = v8;
        v7[5] = v11;
      }
    }
    ++v5;
  }
  while (v2 != v5);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_2332E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_230C9C(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_233378(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_233A60();
  result = Set.init(minimumCapacity:)(v2, &type metadata for ContextActionType, v3);
  v8 = result;
  if (v2)
  {
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_230E48(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_2333E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;

  swift_bridgeObjectRetain(a1);
  v3 = sub_233378(v2);
  swift_bridgeObjectRelease(a1);
  v4 = sub_2330C8((uint64_t)&off_2E70D0, v3);
  swift_bridgeObjectRelease(v3);
  v5 = *(_QWORD *)(v4 + 16);
  v31 = v4;
  if (v5)
  {
    v6 = (char *)(v4 + 32);
    while (1)
    {
      v8 = *v6++;
      v7 = v8;
      v9 = byte_269F39[v8];
      v11 = sub_58684(v9);
      v12 = _swiftEmptyDictionarySingleton[2];
      v13 = (v10 & 1) == 0;
      v14 = v12 + v13;
      if (__OFADD__(v12, v13))
        break;
      v15 = v10;
      if (_swiftEmptyDictionarySingleton[3] < v14)
      {
        sub_13D04C(v14, 1);
        v16 = sub_58684(v9);
        if ((v15 & 1) != (v17 & 1))
          goto LABEL_18;
        v11 = v16;
      }
      if ((v15 & 1) != 0)
      {
        v18 = _swiftEmptyDictionarySingleton[7];
        v19 = *(_QWORD **)(v18 + 8 * v11);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        *(_QWORD *)(v18 + 8 * v11) = v19;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v19 = sub_57BE0(0, v19[2] + 1, 1, v19);
          *(_QWORD *)(v18 + 8 * v11) = v19;
        }
        v22 = v19[2];
        v21 = v19[3];
        if (v22 >= v21 >> 1)
        {
          v19 = sub_57BE0((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
          *(_QWORD *)(v18 + 8 * v11) = v19;
        }
        v19[2] = v22 + 1;
        *((_BYTE *)v19 + v22 + 32) = v7;
        if (!--v5)
          goto LABEL_15;
      }
      else
      {
        v23 = sub_5C154(&qword_31EE68);
        v24 = swift_allocObject(v23, 33, 7);
        *(_OWORD *)(v24 + 16) = xmmword_258070;
        *(_BYTE *)(v24 + 32) = v7;
        _swiftEmptyDictionarySingleton[(v11 >> 6) + 8] |= 1 << v11;
        *(_BYTE *)(_swiftEmptyDictionarySingleton[6] + v11) = v9;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v11) = v24;
        v25 = _swiftEmptyDictionarySingleton[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_17;
        _swiftEmptyDictionarySingleton[2] = v27;
        if (!--v5)
          goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    v30 = sub_5C154(&qword_32BDF8);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v30);
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v31);
    swift_retain(_swiftEmptyDictionarySingleton);
    v28 = sub_2331C4((uint64_t)&off_2E7110, (uint64_t)_swiftEmptyDictionarySingleton);
    swift_release_n(_swiftEmptyDictionarySingleton, 2);
    return (uint64_t)v28;
  }
  return result;
}

unint64_t sub_233650()
{
  unint64_t result;

  result = qword_32BDC0;
  if (!qword_32BDC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContextActionType.SwipeActionType, &type metadata for ContextActionType.SwipeActionType);
    atomic_store(result, (unint64_t *)&qword_32BDC0);
  }
  return result;
}

unint64_t sub_233698()
{
  unint64_t result;

  result = qword_32BDC8;
  if (!qword_32BDC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContextActionType, &type metadata for ContextActionType);
    atomic_store(result, (unint64_t *)&qword_32BDC8);
  }
  return result;
}

uint64_t sub_2336DC()
{
  return sub_C1040(&qword_32BDD0, &qword_32BDD8);
}

unint64_t sub_233704()
{
  unint64_t result;

  result = qword_32BDE0;
  if (!qword_32BDE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContextActionType.ContextActionGroup, &type metadata for ContextActionType.ContextActionGroup);
    atomic_store(result, (unint64_t *)&qword_32BDE0);
  }
  return result;
}

uint64_t sub_233748()
{
  return sub_C1040(&qword_32BDE8, &qword_32BDF0);
}

uint64_t getEnumTagSinglePayload for ContextActionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE2)
    goto LABEL_17;
  if (a2 + 30 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 30) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 30;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 30;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 30;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1F;
  v8 = v6 - 31;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContextActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 30 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 30) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE1)
    return ((uint64_t (*)(void))((char *)&loc_233848 + 4 * byte_269BEC[v4]))();
  *a1 = a2 + 30;
  return ((uint64_t (*)(void))((char *)sub_23387C + 4 * byte_269BE7[v4]))();
}

uint64_t sub_23387C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233884(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23388CLL);
  return result;
}

uint64_t sub_233898(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2338A0);
  *(_BYTE *)result = a2 + 30;
  return result;
}

uint64_t sub_2338A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2338AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContextActionType()
{
  return &type metadata for ContextActionType;
}

uint64_t storeEnumTagSinglePayload for ContextActionType.SwipeActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233914 + 4 * byte_269BF6[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233948 + 4 * byte_269BF1[v4]))();
}

uint64_t sub_233948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233958);
  return result;
}

uint64_t sub_233964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23396CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContextActionType.SwipeActionType()
{
  return &type metadata for ContextActionType.SwipeActionType;
}

uint64_t storeEnumTagSinglePayload for ContextActionType.ContextActionGroup(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2339E0 + 4 * byte_269C00[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_233A14 + 4 * byte_269BFB[v4]))();
}

uint64_t sub_233A14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233A1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233A24);
  return result;
}

uint64_t sub_233A30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233A38);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_233A3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233A44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContextActionType.ContextActionGroup()
{
  return &type metadata for ContextActionType.ContextActionGroup;
}

unint64_t sub_233A60()
{
  unint64_t result;

  result = qword_32BE00;
  if (!qword_32BE00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContextActionType, &type metadata for ContextActionType);
    atomic_store(result, (unint64_t *)&qword_32BE00);
  }
  return result;
}

_QWORD *SeriesInfo.getPromotionState()@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int EnumCaseMultiPayload;
  _OWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _OWORD **v33;
  uint64_t v34;
  __n128 v35;
  _QWORD *v36;
  _QWORD *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t WitnessTable;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t AssociatedConformanceWitness;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  char v58;
  BOOL v59;
  char *v60;
  _QWORD *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  BOOL v67;
  _QWORD *v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  char v86;
  __n128 v87;
  double v88;
  char v89;
  _QWORD *v90;
  char v91;
  _OWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  _OWORD **v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD v104[3];
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[40];
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char v114;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2);
  v94 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (char *)&v92 - v9;
  v98 = AssociatedTypeWitness;
  v96 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  v95 = (char *)&v92 - v11;
  v102 = a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = swift_getAssociatedTypeWitness(255, v12);
  v14 = swift_getAssociatedTypeWitness(255, v12);
  v15 = type metadata accessor for ContentDataSource(0, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v92 - v17;
  *(_QWORD *)a3 = 1;
  *(_OWORD *)(a3 + 8) = 0u;
  v92 = (_OWORD *)(a3 + 8);
  *(_OWORD *)(a3 + 24) = 0u;
  v99 = (_QWORD *)a3;
  *(_BYTE *)(a3 + 40) = 5;
  v101 = v4;
  v103 = a1;
  dispatch thunk of ContentInfo.dataSource.getter(a1, v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v15);
  if (!EnumCaseMultiPayload)
  {

    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v18, v13);
LABEL_5:
    v20 = v100;
    sub_234DE8(v103, v102, (uint64_t)v110);
    if (!v20)
    {
      sub_5E1A4((uint64_t)v110, (uint64_t)&v111, &qword_320940);
      if (!v112)
      {
        sub_5E09C((uint64_t)v110, &qword_320940);
        v48 = v99;
        sub_8307C(v99);
        result = (_QWORD *)sub_5E09C((uint64_t)&v111, &qword_320940);
        v48[4] = 0;
        *(_OWORD *)v48 = 0u;
        *((_OWORD *)v48 + 1) = 0u;
        *((_BYTE *)v48 + 40) = 5;
        return result;
      }
      sub_5DC98(&v111, (uint64_t)v107);
      v21 = v108;
      v22 = v109;
      sub_66898(v107, v108);
      v23 = *(_QWORD *)(v22 + 8);
      v24 = swift_getAssociatedTypeWitness(255, v23);
      v25 = type metadata accessor for Optional(0, v24);
      v100 = &v92;
      v26 = *(_QWORD *)(v25 - 8);
      __chkstk_darwin(v25);
      v28 = (char *)&v92 - v27;
      ContentInfo.libraryData.getter(v21, v23);
      v29 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, v24) == 1)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
        sub_5E0D8((uint64_t)v107, (uint64_t)v104);
        v30 = v103;
      }
      else
      {
        v112 = v24;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v22, v21, v24, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
        v113 = AssociatedConformanceWitness;
        sub_668BC(&v111);
        (*(void (**)(void))(v29 + 32))();
        v50 = dispatch thunk of LibraryAssetInfo.isPurchased.getter(v24, AssociatedConformanceWitness);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v111);
        sub_5E0D8((uint64_t)v107, (uint64_t)v104);
        v30 = v103;
        if ((v50 & 1) != 0)
        {
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v104);
          goto LABEL_29;
        }
      }
      v51 = v105;
      v52 = v106;
      sub_66898(v104, v105);
      v53 = AssetInfo.isInSamples.getter(v51, v52);
      if (v53 == 2)
      {
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v104);
        v54 = v102;
LABEL_24:
        if ((sub_236168(v107, (uint64_t)v30, v54) & 1) != 0)
        {
          v63 = v108;
          v64 = v109;
          sub_66898(v107, v108);
          v65 = AssetInfo.price.getter(v63, v64);
          v67 = (v66 & 1) == 0;
          sub_5E09C((uint64_t)v110, &qword_320940);
          v68 = v99;
          sub_8307C(v99);
          v69 = (v65 & 0x7FFFFFFFFFFFFFFFLL) == 0 && v67;
          sub_5E0D8((uint64_t)v107, (uint64_t)&v111);
          v114 = v69;
          sub_8316C((uint64_t)&v111, (uint64_t)v68);
          return (_QWORD *)_s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v107);
        }
        sub_5E09C((uint64_t)v110, &qword_320940);
        v83 = v99;
        sub_8307C(v99);
        sub_5E0D8((uint64_t)v107, (uint64_t)v83);
        v84 = 4;
LABEL_41:
        *((_BYTE *)v83 + 40) = v84;
        return (_QWORD *)_s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v107);
      }
      v62 = v53;
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v104);
      v54 = v102;
      if ((v62 & 1) == 0)
        goto LABEL_24;
LABEL_29:
      v70 = v108;
      v71 = v109;
      sub_66898(v107, v108);
      if ((AssetInfo.isInSamples.getter(v70, v71) & 1) != 0)
      {
        v72 = v108;
        v73 = v109;
        sub_66898(v107, v108);
        v74 = *(_QWORD *)(v73 + 8);
        v75 = swift_getAssociatedTypeWitness(255, v74);
        v76 = type metadata accessor for Optional(0, v75);
        v100 = &v92;
        v77 = *(_QWORD *)(v76 - 8);
        __chkstk_darwin(v76);
        v79 = (char *)&v92 - v78;
        ContentInfo.libraryData.getter(v72, v74);
        v80 = *(_QWORD *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v79, 1, v75) == 1)
        {
          (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v76);
          v81 = v102;
          v82 = v103;
LABEL_36:
          v89 = sub_236168(v107, (uint64_t)v82, v81);
          sub_5E09C((uint64_t)v110, &qword_320940);
          v90 = v99;
          sub_8307C(v99);
          sub_5E0D8((uint64_t)v107, (uint64_t)&v111);
          if ((v89 & 1) != 0)
            v91 = 0;
          else
            v91 = 4;
          v114 = v91;
          sub_8316C((uint64_t)&v111, (uint64_t)v90);
          return (_QWORD *)_s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v107);
        }
        v112 = v75;
        v85 = swift_getAssociatedConformanceWitness(v73, v72, v75, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
        v113 = v85;
        sub_668BC(&v111);
        (*(void (**)(void))(v80 + 32))();
        v86 = dispatch thunk of LibraryAssetInfo.isPurchased.getter(v75, v85);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v111);
        v81 = v102;
        v82 = v103;
        if ((v86 & 1) == 0)
          goto LABEL_36;
      }
      sub_66898(v107, v108);
      v88 = AssetInfo.readingProgress.getter(v87);
      sub_5E09C((uint64_t)v110, &qword_320940);
      v83 = v99;
      sub_8307C(v99);
      sub_5E0D8((uint64_t)v107, (uint64_t)v83);
      if (v88 == 0.0)
        v84 = 2;
      else
        v84 = 3;
      goto LABEL_41;
    }
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v31 = v103;
  v32 = v102;
  v33 = v100;
  v34 = SeriesInfo.assets.getter(v103, v102);
  if (v33)
  {
LABEL_10:
    v36 = v99;
    return sub_8307C(v36);
  }
  v38 = v34;
  *(_QWORD *)&v111 = v34;
  v39 = v98;
  v40 = type metadata accessor for Array(0, v98, v35);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v40);
  v42 = v97;
  Collection.first.getter(v40, WitnessTable);
  swift_bridgeObjectRelease(v38);
  v43 = v96;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v42, 1, v39) == 1)
  {
    v44 = v99;
    sub_8307C(v99);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v42, v94);
    *v44 = 1;
    v45 = v92;
    *v92 = 0u;
    v45[1] = 0u;
    *((_BYTE *)v44 + 40) = 5;
    v46 = sub_23446C();
    v47 = swift_allocError(&type metadata for SeriesInfoError, v46, 0, 0);
    swift_willThrow(v47);
    v36 = v44;
    return sub_8307C(v36);
  }
  v55 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v56 = v95;
  v55(v95, v42, v39);
  v57 = swift_getAssociatedConformanceWitness(v32, v31, v39, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.SeriesInfo.AssetType: AssetInfo);
  v59 = (AssetInfo.price.getter(v39, v57) & 0x7FFFFFFFFFFFFFFFLL) == 0 && (v58 & 1) == 0;
  v112 = v39;
  v113 = v57;
  v60 = (char *)sub_668BC(&v111);
  v55(v60, v56, v39);
  v61 = v99;
  sub_8307C(v99);
  v114 = v59;
  return (_QWORD *)sub_8316C((uint64_t)&v111, (uint64_t)v61);
}

unint64_t sub_23446C()
{
  unint64_t result;

  result = qword_32BE18;
  if (!qword_32BE18)
  {
    result = swift_getWitnessTable(&unk_26A084, &type metadata for SeriesInfoError);
    atomic_store(result, (unint64_t *)&qword_32BE18);
  }
  return result;
}

uint64_t sub_2344B0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int *v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  __n128 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _QWORD v67[3];

  v4 = v3;
  v8 = sub_5C154(&qword_32BE28);
  __chkstk_darwin(v8);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_327020);
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_32BE30);
  __chkstk_darwin(v14);
  v63 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *((_QWORD *)a1 - 1);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for ContentType(0, v18);
  v21 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v66 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = ContentInfo.id.getter(a1, *(_QWORD *)(a2 + 8));
  v25 = v24;
  v26 = HIBYTE(v24) & 0xF;
  v27 = result & 0xFFFFFFFFFFFFLL;
  if ((v25 & 0x2000000000000000) != 0)
    v28 = v26;
  else
    v28 = result & 0xFFFFFFFFFFFFLL;
  v64 = v10;
  v65 = a3;
  if (v28)
  {
    if ((v25 & 0x1000000000000000) != 0)
    {
      v30 = (uint64_t)sub_2376EC(result, v25, 10);
      v32 = v60;
      goto LABEL_44;
    }
    if ((v25 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v29 = (unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v29 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v25);
      v30 = (uint64_t)sub_2377D0(v29, v27, 10);
      v32 = v31 & 1;
LABEL_44:
      swift_bridgeObjectRelease(v25);
      if ((v32 & 1) != 0)
        v30 = 0;
      goto LABEL_46;
    }
    v67[0] = result;
    v67[1] = v25 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v26)
        goto LABEL_66;
      if (v26 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_31;
      v30 = (BYTE1(result) - 48);
      if (v26 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_31;
        v30 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v33 = v26 - 3;
        if (v33)
        {
          v34 = (unsigned __int8 *)v67 + 3;
          while (1)
          {
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_31;
            v36 = 10 * v30;
            if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
              goto LABEL_31;
            v30 = v36 + v35;
            if (__OFADD__(v36, v35))
              goto LABEL_31;
            v32 = 0;
            ++v34;
            if (!--v33)
              goto LABEL_44;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v26)
        {
          if (v26 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v26 == 2)
            {
              v32 = 0;
              v30 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_44;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              v30 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              v41 = v26 - 3;
              if (!v41)
                goto LABEL_43;
              v57 = (unsigned __int8 *)v67 + 3;
              while (1)
              {
                v58 = *v57 - 48;
                if (v58 > 9)
                  break;
                v59 = 10 * v30;
                if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
                  break;
                v30 = v59 - v58;
                if (__OFSUB__(v59, v58))
                  break;
                v32 = 0;
                ++v57;
                if (!--v41)
                  goto LABEL_44;
              }
            }
          }
LABEL_31:
          v30 = 0;
          v32 = 1;
          goto LABEL_44;
        }
        __break(1u);
LABEL_66:
        __break(1u);
        return result;
      }
      if (!v26 || (result - 48) > 9u)
        goto LABEL_31;
      v30 = (result - 48);
      if (v26 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_31;
        v30 = 10 * (result - 48) + (BYTE1(result) - 48);
        v37 = v26 - 2;
        if (v37)
        {
          v38 = (unsigned __int8 *)v67 + 2;
          while (1)
          {
            v39 = *v38 - 48;
            if (v39 > 9)
              goto LABEL_31;
            v40 = 10 * v30;
            if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
              goto LABEL_31;
            v30 = v40 + v39;
            if (__OFADD__(v40, v39))
              goto LABEL_31;
            v32 = 0;
            ++v38;
            if (!--v37)
              goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    v32 = 0;
    goto LABEL_44;
  }
  swift_bridgeObjectRelease(v25);
  v30 = 0;
LABEL_46:
  v42 = sub_234A28((uint64_t)a1, a2);
  v43 = (unsigned int *)&enum case for ContentType.audiobook(_:);
  if ((v42 & 1) == 0)
    v43 = (unsigned int *)&enum case for ContentType.book(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v66, *v43, v62);
  v44 = SeriesInfo.assetCount.getter(a1, a2);
  v46 = v45;
  (*(void (**)(char *, uint64_t, char *))(v16 + 16))(v20, v4, a1);
  if ((v46 & 1) != 0)
  {
    v47 = SeriesInfo.assetMinimumCount.getter(a1, a2);
    v49 = v48;
    (*(void (**)(char *, char *))(v16 + 8))(v20, a1);
    if ((v49 & 1) != 0)
      v44 = 0;
    else
      v44 = v47;
  }
  else
  {
    (*(void (**)(char *, char *))(v16 + 8))(v20, a1);
  }
  v50 = v63;
  sub_237188(a1, a2, v63);
  v52 = SeriesInfo.isOrdered.getter(a1, a2, v51);
  v53 = type metadata accessor for SeriesType(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (unsigned int *)&enum case for SeriesType.ordered(_:);
  if ((v52 & 1) == 0)
    v55 = (unsigned int *)&enum case for SeriesType.unOrdered(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v13, *v55, v53);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v13, 0, 1, v53);
  v56 = (uint64_t)v64;
  sub_237440(a1, a2, (uint64_t)v64);
  return SeriesData.init(seriesID:seriesContentType:seriesCount:seriesUserStatus:seriesType:seriesUserSubStatus:seriesCountStr:)(v30, v66, v44, v50, v13, v56, 0, 0);
}

uint64_t sub_234A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for SeriesType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v18 - v10;
  dispatch thunk of SeriesInfo.seriesType.getter(a1, a2, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for SeriesType.audiobook(_:), v4);
  v12 = sub_1E4B6C();
  dispatch thunk of RawRepresentable.rawValue.getter(&v20, v4, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v4, v12);
  v13 = v21;
  v14 = v19;
  if (v20 == v18 && v21 == v19)
  {
    v15 = 1;
    v14 = v21;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v18, v19, 0);
  }
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v7, v4);
  v16(v11, v4);
  return v15 & 1;
}

uint64_t sub_234B80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  _BYTE v11[48];
  _BYTE v12[48];

  v2 = sub_237FAC(a1);
  v3 = *(_QWORD *)(v2 + 16);
  result = swift_bridgeObjectRelease(a1);
  if (v3 < 2)
    return v2;
  v5 = 0;
  v6 = v3 >> 1;
  v7 = v3 - 1;
  v8 = 48 * v3 - 16;
  for (i = 32; ; i += 48)
  {
    if (v5 == v7)
      goto LABEL_4;
    v10 = *(_QWORD *)(v2 + 16);
    if (v5 >= v10)
      break;
    result = sub_5E1A4(v2 + i, (uint64_t)v12, &qword_31F008);
    if (v7 >= v10)
      goto LABEL_14;
    sub_5E1A4(v2 + v8, (uint64_t)v11, &qword_31F008);
    result = swift_isUniquelyReferenced_nonNull_native(v2);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_13D6C4(v2);
      v2 = result;
    }
    if (v5 >= *(_QWORD *)(v2 + 16))
      goto LABEL_15;
    result = sub_23818C((uint64_t)v11, v2 + i);
    if (v7 >= *(_QWORD *)(v2 + 16))
      goto LABEL_16;
    result = sub_23818C((uint64_t)v12, v2 + v8);
LABEL_4:
    ++v5;
    --v7;
    v8 -= 48;
    if (v6 == v5)
      return v2;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_234CB8(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  __int128 v9[2];
  __int128 v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return v1;
  v3 = 0;
  v4 = v2 >> 1;
  v5 = v2 - 1;
  v6 = 40 * v2 - 8;
  for (i = 32; ; i += 40)
  {
    if (v3 == v5)
      goto LABEL_4;
    v8 = *(_QWORD *)(v1 + 16);
    if (v3 >= v8)
      break;
    result = sub_5E0D8(v1 + i, (uint64_t)v10);
    if (v5 >= v8)
      goto LABEL_14;
    sub_5E0D8(v1 + v6, (uint64_t)v9);
    result = swift_isUniquelyReferenced_nonNull_native(v1);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_13D714(v1);
      v1 = result;
    }
    if (v3 >= *(_QWORD *)(v1 + 16))
      goto LABEL_15;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + i));
    result = sub_5DC98(v9, v1 + i);
    if (v5 >= *(_QWORD *)(v1 + 16))
      goto LABEL_16;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + v6));
    result = sub_5DC98(v10, v1 + v6);
LABEL_4:
    ++v3;
    --v5;
    v6 -= 40;
    if (v4 == v3)
      return v1;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_234DE8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  id *v31;
  char *v32;
  int EnumCaseMultiPayload;
  char *v34;
  uint64_t result;
  uint64_t v36;
  __n128 v37;
  char *v38;
  uint64_t v39;
  uint64_t WitnessTable;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  char v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  unsigned int (*v82)(_QWORD, _QWORD, _QWORD);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int (*v122)(_QWORD, _QWORD, _QWORD);
  char *v123;
  char *v124;
  void (*v125)(char *, _QWORD, uint64_t, uint64_t);
  _OWORD *v126;
  __int128 *v127;
  char *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  __int128 *v146;
  char *v147;
  char *v148;
  uint64_t AssociatedTypeWitness;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _BYTE v153[40];
  __int128 v154;
  uint64_t v155;
  _BYTE v156[40];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  _BYTE v160[40];
  _BYTE v161[40];
  _QWORD *v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _OWORD v177[2];
  uint64_t v178;
  _OWORD v179[2];
  uint64_t v180;
  char *v181;

  v145 = (_QWORD *)a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2);
  v143 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v141 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v132 = (char *)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v133 = (char *)&v132 - v7;
  __chkstk_darwin(v8);
  v135 = (char *)&v132 - v9;
  __chkstk_darwin(v10);
  v134 = (char *)&v132 - v11;
  __chkstk_darwin(v12);
  v136 = (char *)&v132 - v13;
  __chkstk_darwin(v14);
  v142 = (char *)&v132 - v15;
  __chkstk_darwin(v16);
  v147 = (char *)&v132 - v17;
  __chkstk_darwin(v18);
  v148 = (char *)&v132 - v19;
  __chkstk_darwin(v20);
  v146 = (__int128 *)((char *)&v132 - v21);
  v22 = type metadata accessor for SeriesListSortOrder(0);
  v139 = *(_QWORD *)(v22 - 8);
  v140 = v22;
  __chkstk_darwin(v22);
  v138 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a2 + 8);
  v25 = swift_getAssociatedTypeWitness(255, v24);
  v26 = swift_getAssociatedTypeWitness(255, v24);
  v137 = v25;
  v27 = type metadata accessor for ContentDataSource(0, v25, v26);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v31 = (id *)((char *)&v132 - v30);
  if ((SeriesInfo.isOrdered.getter(a1, a2, v29) & 1) == 0)
  {
    v34 = v181;
    result = SeriesInfo.assets.getter(a1, a2);
    if (!v34)
    {
      v36 = result;
      v181 = (char *)&v132;
      *(_QWORD *)&v174 = result;
      v37 = __chkstk_darwin(result);
      *(&v132 - 2) = a1;
      *(&v132 - 1) = (char *)a2;
      v38 = (char *)a2;
      v39 = type metadata accessor for Array(0, AssociatedTypeWitness, v37);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v39);
      v41 = Sequence.first(where:)(sub_237F08, &v132 - 4, v39, WitnessTable);
      *(_QWORD *)&v174 = v36;
      __chkstk_darwin(v41);
      *(&v132 - 2) = a1;
      *(&v132 - 1) = v38;
      v42 = Sequence.first(where:)(sub_237F2C, &v132 - 4, v39, WitnessTable);
      v181 = (char *)&v132;
      *(_QWORD *)&v174 = v36;
      __chkstk_darwin(v42);
      *(&v132 - 2) = a1;
      *(&v132 - 1) = v38;
      swift_bridgeObjectRetain(v36);
      v43 = swift_getWitnessTable(&protocol conformance descriptor for [A], v39);
      *(_QWORD *)&v174 = _ArrayProtocol.filter(_:)(sub_237F48, &v132 - 4, v39, v43);
      v44 = __chkstk_darwin(v174);
      *(&v132 - 2) = a1;
      *(&v132 - 1) = v38;
      Sequence.max(by:)(sub_237F6C, v44);
      v45 = swift_bridgeObjectRelease(v174);
      *(_QWORD *)&v174 = v36;
      v46 = __chkstk_darwin(v45);
      v181 = a1;
      *(&v132 - 2) = a1;
      *(&v132 - 1) = v38;
      v144 = v38;
      v47 = Sequence.allSatisfy(_:)(sub_237F88, v46);
      v140 = 0;
      swift_bridgeObjectRelease(v36);
      if ((v47 & 1) != 0)
      {
        v48 = v142;
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v142, 1, 1);
        v49 = *(void (**)(char *, uint64_t))(v141 + 8);
        v50 = v143;
        v51 = v146;
        v52 = (uint64_t)v148;
        v49(v147, v143);
      }
      else
      {
        v69 = v141;
        v70 = *(void (**)(char *, char *, uint64_t))(v141 + 16);
        v71 = v136;
        v50 = v143;
        v70(v136, v147, v143);
        v72 = v134;
        v70(v134, v148, v50);
        v73 = v135;
        v51 = v146;
        v70(v135, (char *)v146, v50);
        v74 = *(char **)(AssociatedTypeWitness - 8);
        v139 = *((_QWORD *)v74 + 6);
        v75 = ((uint64_t (*)(char *, uint64_t))v139)(v71, 1);
        v48 = v142;
        v138 = v74;
        if (v75 == 1)
        {
          v76 = v69;
          v77 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
          v78 = v72;
          v79 = v133;
          v77(v133, v78, v50);
          v80 = v73;
          v81 = v132;
          v77(v132, v80, v50);
          v82 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v139;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v139)(v79, 1, AssociatedTypeWitness) == 1)
          {
            v77(v48, v81, v50);
            v49 = *(void (**)(char *, uint64_t))(v76 + 8);
            v49(v79, v50);
            v83 = AssociatedTypeWitness;
          }
          else
          {
            v49 = *(void (**)(char *, uint64_t))(v76 + 8);
            v49(v81, v50);
            v122 = v82;
            v123 = v138;
            v124 = v79;
            v83 = AssociatedTypeWitness;
            (*((void (**)(char *, char *, uint64_t))v138 + 4))(v48, v124, AssociatedTypeWitness);
            v125 = (void (*)(char *, _QWORD, uint64_t, uint64_t))*((_QWORD *)v123 + 7);
            v82 = v122;
            v125(v48, 0, 1, v83);
          }
          v49(v136, v50);
        }
        else
        {
          v49 = *(void (**)(char *, uint64_t))(v69 + 8);
          v49(v73, v50);
          v49(v72, v50);
          v83 = AssociatedTypeWitness;
          (*((void (**)(char *, char *, uint64_t))v74 + 4))(v48, v71, AssociatedTypeWitness);
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v74 + 7))(v48, 0, 1, v83);
          v82 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v139;
        }
        v52 = (uint64_t)v148;
        if (v82(v48, 1, v83) != 1)
        {
          v127 = v51;
          v128 = v144;
          v129 = v145;
          v145[3] = v83;
          v129[4] = swift_getAssociatedConformanceWitness(v128, v181, v83, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.SeriesInfo.AssetType: AssetInfo);
          v130 = sub_668BC(v129);
          (*((void (**)(_QWORD *, char *, uint64_t))v138 + 4))(v130, v48, v83);
          v49(v147, v50);
          v49((char *)v52, v50);
          return ((uint64_t (*)(__int128 *, uint64_t))v49)(v127, v50);
        }
        v49(v147, v50);
      }
      v49((char *)v52, v50);
      v49((char *)v51, v50);
      result = ((uint64_t (*)(char *, uint64_t))v49)(v48, v50);
      v126 = v145;
      v145[4] = 0;
      *v126 = 0u;
      v126[1] = 0u;
      return result;
    }
    return result;
  }
  v144 = (char *)a2;
  v32 = a1;
  dispatch thunk of ContentInfo.dataSource.getter(a1, v24);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v27);
  if (!EnumCaseMultiPayload)
  {
    v53 = v137;

    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v31, v53);
LABEL_9:
    v54 = v181;
    result = SeriesInfo.assets.getter(a1, v144);
    v55 = v54;
    if (v54)
      return result;
    v56 = result;
    v57 = sub_5C154(&qword_31EF60);
    v58 = _arrayForceCast<A, B>(_:)(v56, AssociatedTypeWitness, v57);
    swift_bridgeObjectRelease(v56);
    v59 = *(_QWORD **)(v58 + 16);
    if (v59)
      goto LABEL_11;
LABEL_22:
    swift_bridgeObjectRetain(v58);
LABEL_23:
    v180 = 0;
    memset(v179, 0, sizeof(v179));
    goto LABEL_25;
  }
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(id *, uint64_t))(v28 + 8))(v31, v27);
    goto LABEL_9;
  }

  v65 = v138;
  v64 = v139;
  v66 = v140;
  (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v138, enum case for SeriesListSortOrder.ascending(_:), v140);
  v67 = v181;
  v68 = SeriesInfo.assets.getter(v32, v144);
  v55 = v67;
  if (v67)
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v65, v66);
  v84 = v68;
  v85 = sub_5C154(&qword_31EF60);
  v86 = _arrayForceCast<A, B>(_:)(v84, AssociatedTypeWitness, v85);
  swift_bridgeObjectRelease(v84);
  v58 = SeriesListSortOrder.sortedAssets(for:)(v86);
  swift_bridgeObjectRelease(v86);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
  v59 = *(_QWORD **)(v58 + 16);
  if (!v59)
    goto LABEL_22;
LABEL_11:
  v60 = v58 + 32;
  swift_bridgeObjectRetain(v58);
  v61 = v59;
  while (1)
  {
    sub_5E0D8(v60, (uint64_t)&v174);
    v62 = *((_QWORD *)&v175 + 1);
    v63 = v176;
    sub_66898(&v174, *((uint64_t *)&v175 + 1));
    if (sub_236918(v62, v63))
      break;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v174);
    v60 += 40;
    v61 = (_QWORD *)((char *)v61 - 1);
    if (!v61)
      goto LABEL_23;
  }
  sub_5DC98(&v174, (uint64_t)v179);
LABEL_25:
  swift_bridgeObjectRelease(v58);
  if (v59)
  {
    v87 = v58 + 32;
    swift_bridgeObjectRetain(v58);
    v88 = v59;
    while (1)
    {
      sub_5E0D8(v87, (uint64_t)&v174);
      v89 = *((_QWORD *)&v175 + 1);
      v90 = v176;
      sub_66898(&v174, *((uint64_t *)&v175 + 1));
      LOBYTE(v89) = sub_236918(v89, v90);
      sub_5E0D8((uint64_t)&v174, (uint64_t)&v171);
      if ((v89 & 1) == 0
        || (v91 = *((_QWORD *)&v172 + 1),
            v92 = v173,
            sub_66898(&v171, *((uint64_t *)&v172 + 1)),
            v93 = AssetInfo.isPurchased.getter(v91, v92),
            v93 == 2))
      {
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v171);
      }
      else
      {
        v94 = v93;
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v171);
        if ((v94 & 1) != 0)
        {
          sub_5DC98(&v174, (uint64_t)v177);
          goto LABEL_35;
        }
      }
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v174);
      v87 += 40;
      v88 = (_QWORD *)((char *)v88 - 1);
      if (!v88)
        goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain(v58);
LABEL_34:
  v178 = 0;
  memset(v177, 0, sizeof(v177));
LABEL_35:
  swift_bridgeObjectRelease(v58);
  v95 = (char *)&_swiftEmptyArrayStorage;
  v162 = &_swiftEmptyArrayStorage;
  result = swift_bridgeObjectRetain(v58);
  AssociatedTypeWitness = v58;
  if (v59)
  {
    v181 = (char *)v59;
    v140 = 0;
    v96 = 0;
    v97 = v58 + 32;
    while ((unint64_t)v96 < *(_QWORD *)(v58 + 16))
    {
      sub_5E0D8(v97, (uint64_t)&v166);
      *(_QWORD *)&v168 = v96;
      sub_5DC98(&v166, (uint64_t)&v168 + 8);
      v172 = v169;
      v173 = v170;
      v171 = v168;
      v98 = v170;
      sub_66898((_QWORD *)&v171 + 1, v170);
      if (sub_2369FC(v98, *((uint64_t *)&v98 + 1)))
      {
        v168 = v171;
        v169 = v172;
        v170 = v173;
        v99 = v162;
        result = swift_isUniquelyReferenced_nonNull_native(v162);
        if ((result & 1) == 0)
        {
          result = sub_20C47C(0, v99[2] + 1, 1);
          v99 = v162;
        }
        v101 = v99[2];
        v100 = v99[3];
        if (v101 >= v100 >> 1)
        {
          result = sub_20C47C(v100 > 1, v101 + 1, 1);
          v99 = v162;
        }
        v99[2] = v101 + 1;
        v102 = &v99[6 * v101];
        v103 = v168;
        v104 = v170;
        v102[3] = v169;
        v102[4] = v104;
        v102[2] = v103;
        v58 = AssociatedTypeWitness;
      }
      else
      {
        result = sub_5E09C((uint64_t)&v171, &qword_31F008);
      }
      ++v96;
      v97 += 40;
      if (v181 == v96)
      {
        v95 = (char *)v162;
        v55 = (_QWORD *)v140;
        goto LABEL_47;
      }
    }
    __break(1u);
    goto LABEL_113;
  }
LABEL_47:
  swift_bridgeObjectRelease(v58);
  v105 = *((_QWORD *)v95 + 2);
  v140 = (uint64_t)v55;
  if (v105)
  {
    sub_5E1A4((uint64_t)(v95 + 32), (uint64_t)&v171, &qword_31F008);
    result = swift_retain(v95);
    if (v105 != 1)
    {
      v181 = (char *)&v168 + 8;
      v146 = &v166;
      v147 = v95;
      v148 = (char *)&v171 + 8;
      v114 = (uint64_t)(v95 + 80);
      v115 = 1;
      while (v115 < *((_QWORD *)v95 + 2))
      {
        sub_5E1A4(v114, (uint64_t)&v168, &qword_31F008);
        v117 = *((_QWORD *)&v170 + 1);
        v116 = v170;
        sub_66898(v181, v170);
        v165 = (char *)v171;
        sub_5E0D8((uint64_t)v148, (uint64_t)&v166);
        sub_5DC98(&v166, (uint64_t)&v162);
        LOBYTE(v116) = sub_236B50((uint64_t)&v162, v116, v117);
        sub_5E09C((uint64_t)&v162, &qword_320940);
        if ((v116 & 1) != 0)
        {
          result = sub_5E09C((uint64_t)&v171, &qword_31F008);
          v171 = v168;
          v172 = v169;
          v173 = v170;
        }
        else
        {
          result = sub_5E09C((uint64_t)&v168, &qword_31F008);
        }
        ++v115;
        v114 += 48;
        v95 = v147;
        if (v105 == v115)
          goto LABEL_49;
      }
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
LABEL_49:
    swift_release(v95);
    v174 = v171;
    v175 = v172;
    v176 = v173;
    swift_release(v95);
    v58 = AssociatedTypeWitness;
  }
  else
  {
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    swift_release(v95);
  }
  v106 = swift_bridgeObjectRetain(v58);
  v107 = sub_234B80(v106);
  v108 = v107;
  v109 = *(_QWORD *)(v107 + 16);
  if (v109)
  {
    v110 = v107 + 32;
    while (1)
    {
      sub_5E1A4(v110, (uint64_t)&v168, &qword_31F008);
      v111 = v170;
      sub_66898((_QWORD *)&v168 + 1, v170);
      if ((sub_236DE8(v111, *((uint64_t *)&v111 + 1)) & 1) != 0)
        break;
      sub_5E09C((uint64_t)&v168, &qword_31F008);
      v110 += 48;
      if (!--v109)
        goto LABEL_55;
    }
    v171 = v168;
    v172 = v169;
    v173 = v170;
  }
  else
  {
LABEL_55:
    v172 = 0u;
    v173 = 0u;
    v171 = 0u;
  }
  swift_bridgeObjectRelease(v108);
  if ((_QWORD)v173)
  {
    result = sub_5E1A4((uint64_t)&v171, (uint64_t)&v168, &qword_32BE38);
    if (!(_QWORD)v170)
    {
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    v112 = v168 + 1;
    if (__OFADD__((_QWORD)v168, 1))
      goto LABEL_114;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)&v168 + 1);
    v113 = *(_QWORD *)(v58 + 16);
    if ((_QWORD)v173)
    {
      if (v112 == v113)
      {
        swift_bridgeObjectRelease(v58);
        v169 = 0u;
        v170 = 0u;
        v168 = 0u;
        goto LABEL_72;
      }
      result = sub_5E1A4((uint64_t)&v171, (uint64_t)&v165, &qword_32BE38);
      if (!v167)
      {
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      v118 = v165 + 1;
      if (__OFADD__(v165, 1))
        goto LABEL_115;
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v166);
      *(_QWORD *)&v168 = v118;
      result = sub_5E1A4((uint64_t)&v171, (uint64_t)&v165, &qword_32BE38);
      if (!v167)
      {
LABEL_121:
        __break(1u);
        return result;
      }
      v119 = (unint64_t)(v165 + 1);
      if (__OFADD__(v165, 1))
        goto LABEL_116;
      result = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v166);
      if ((v119 & 0x8000000000000000) != 0)
      {
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      if (v119 >= *(_QWORD *)(v58 + 16))
      {
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }
      sub_5E0D8(v58 + 40 * v119 + 32, (uint64_t)&v168 + 8);
      swift_bridgeObjectRelease(v58);
    }
    else
    {
      swift_bridgeObjectRelease(v58);
      v169 = 0u;
      v170 = 0u;
      v168 = 0u;
      if (v112 == v113)
      {
LABEL_72:
        sub_5E1A4((uint64_t)&v174, (uint64_t)&v162, &qword_32BE38);
        if (v164)
        {
          sub_5E09C((uint64_t)&v168, &qword_32BE38);
          sub_5E09C((uint64_t)&v174, &qword_32BE38);
          sub_5E09C((uint64_t)v177, &qword_320940);
          sub_5E09C((uint64_t)v179, &qword_320940);
          sub_5E09C((uint64_t)&v171, &qword_32BE38);
          sub_5DC98(&v163, (uint64_t)&v166);
          sub_5DC98(&v166, (uint64_t)&v163);
          return sub_5DC98(&v163, (uint64_t)v145);
        }
        else
        {
          sub_5E09C((uint64_t)&v162, &qword_32BE38);
          sub_5E09C((uint64_t)&v168, &qword_32BE38);
          sub_5E09C((uint64_t)&v174, &qword_32BE38);
          sub_5E09C((uint64_t)v177, &qword_320940);
          sub_5E09C((uint64_t)v179, &qword_320940);
          result = sub_5E09C((uint64_t)&v171, &qword_32BE38);
          v131 = (uint64_t)v145;
          *(_OWORD *)v145 = 0u;
          *(_OWORD *)(v131 + 16) = 0u;
          *(_QWORD *)(v131 + 32) = 0;
        }
        return result;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease(v58);
    v169 = 0u;
    v170 = 0u;
    v168 = 0u;
  }
  sub_5E1A4((uint64_t)&v174, (uint64_t)&v162, &qword_32BE38);
  if (v164)
  {
    v120 = (uint64_t)v162;
    v165 = (char *)v162;
    sub_5DC98(&v163, (uint64_t)&v166);
    sub_5E1A4((uint64_t)&v168, (uint64_t)&v150, &qword_32BE38);
    if (v152)
    {
      sub_5E09C((uint64_t)&v168, &qword_32BE38);
      sub_5E09C((uint64_t)&v174, &qword_32BE38);
      sub_5E09C((uint64_t)v177, &qword_320940);
      sub_5E09C((uint64_t)v179, &qword_320940);
      v121 = v150;
      v162 = (_QWORD *)v150;
      sub_5DC98((__int128 *)((char *)&v150 + 8), (uint64_t)&v163);
      sub_5E09C((uint64_t)&v171, &qword_32BE38);
      if (v120 >= v121)
      {
        sub_5E09C((uint64_t)&v162, &qword_31F008);
        sub_5DC98(&v166, (uint64_t)&v150 + 8);
      }
      else
      {
        sub_5E09C((uint64_t)&v165, &qword_31F008);
        sub_5DC98(&v163, (uint64_t)&v150 + 8);
      }
      return sub_5DC98((__int128 *)((char *)&v150 + 8), (uint64_t)v145);
    }
    sub_5E09C((uint64_t)&v165, &qword_31F008);
    sub_5E09C((uint64_t)&v150, &qword_32BE38);
  }
  else
  {
    sub_5E09C((uint64_t)&v162, &qword_32BE38);
  }
  sub_66F14((uint64_t)&v168, (uint64_t)&v165, &qword_32BE38);
  if (v167)
  {
    sub_5DC98(&v166, (uint64_t)&v150);
  }
  else
  {
    sub_5E09C((uint64_t)&v165, &qword_32BE38);
    v150 = 0u;
    v151 = 0u;
    v152 = 0;
  }
  sub_66F14((uint64_t)&v174, (uint64_t)&v165, &qword_32BE38);
  sub_66F14((uint64_t)v177, (uint64_t)v161, &qword_320940);
  sub_66F14((uint64_t)v179, (uint64_t)v160, &qword_320940);
  if (*((_QWORD *)&v151 + 1))
  {
    sub_5E09C((uint64_t)v160, &qword_320940);
    sub_5E09C((uint64_t)v161, &qword_320940);
    sub_5E09C((uint64_t)&v165, &qword_32BE38);
    sub_5DC98(&v150, (uint64_t)v145);
  }
  else
  {
    sub_66F14((uint64_t)&v165, (uint64_t)&v162, &qword_32BE38);
    if (v164)
    {
      sub_5DC98(&v163, (uint64_t)&v157);
    }
    else
    {
      sub_5E09C((uint64_t)&v162, &qword_32BE38);
      v157 = 0u;
      v158 = 0u;
      v159 = 0;
    }
    sub_66F14((uint64_t)v161, (uint64_t)&v162, &qword_320940);
    sub_66F14((uint64_t)v160, (uint64_t)v156, &qword_320940);
    if (*((_QWORD *)&v158 + 1))
    {
      sub_5E09C((uint64_t)v156, &qword_320940);
      sub_5E09C((uint64_t)&v162, &qword_320940);
      sub_5DC98(&v157, (uint64_t)v145);
    }
    else
    {
      sub_66F14((uint64_t)&v162, (uint64_t)&v154, &qword_320940);
      sub_66F14((uint64_t)v156, (uint64_t)v153, &qword_320940);
      if (v155)
      {
        sub_5E09C((uint64_t)v153, &qword_320940);
        sub_5DC98(&v154, (uint64_t)v145);
      }
      else
      {
        sub_66F14((uint64_t)v153, (uint64_t)v145, &qword_320940);
        sub_5E09C((uint64_t)&v154, &qword_320940);
      }
      sub_5E09C((uint64_t)&v157, &qword_320940);
    }
    sub_5E09C((uint64_t)&v150, &qword_320940);
  }
  return sub_5E09C((uint64_t)&v171, &qword_32BE38);
}

uint64_t sub_236168(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - v9;
  v12 = SeriesInfo.assets.getter(a2, a3);
  v29 = v12;
  v14 = type metadata accessor for Array(0, AssociatedTypeWitness, v13);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  Collection.first.getter(v14, WitnessTable);
  swift_bridgeObjectRelease(v12);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1, AssociatedTypeWitness);
  if (v17 == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v18 = 0;
    v19 = 0;
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.SeriesInfo.AssetType: AssetInfo);
    v18 = ContentInfo.id.getter(AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
    v19 = v21;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, AssociatedTypeWitness);
  }
  v22 = a1[3];
  v23 = a1[4];
  sub_66898(a1, v22);
  v24 = ContentInfo.id.getter(v22, *(_QWORD *)(v23 + 8));
  v26 = v25;
  if (v19)
  {
    if (v18 == v24 && v19 == v25)
    {
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v26);
      v28 = 1;
    }
    else
    {
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v24, v25, 0);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v26);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v25);
    v28 = 0;
  }
  return v28 & 1;
}

_QWORD *destroy for SeriesPromotionState(_QWORD *a1)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)a1 + 40);
  if (v1 >= 5)
    v1 = *(_DWORD *)a1 + 5;
  if (v1 <= 4)
    return (_QWORD *)_s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return a1;
}

uint64_t initializeWithCopy for SeriesPromotionState(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 5)
    v3 = *(_DWORD *)a2 + 5;
  switch(v3)
  {
    case 0u:
      v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t))(v4 - 8))(a1);
      *(_BYTE *)(a1 + 40) = 0;
      return a1;
    case 1u:
      v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t))(v6 - 8))(a1);
      v7 = 1;
      goto LABEL_10;
    case 2u:
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      v7 = 2;
      goto LABEL_10;
    case 3u:
      v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t))(v9 - 8))(a1);
      v7 = 3;
      goto LABEL_10;
    case 4u:
      v10 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v10;
      (**(void (***)(uint64_t))(v10 - 8))(a1);
      v7 = 4;
LABEL_10:
      *(_BYTE *)(a1 + 40) = v7;
      break;
    default:
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for SeriesPromotionState(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if (v4 <= 4)
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        v6 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        v9 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
        v10 = 1;
        goto LABEL_15;
      case 2u:
        v11 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
        v10 = 2;
        goto LABEL_15;
      case 3u:
        v12 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v12 - 8))(a1, a2);
        v10 = 3;
        goto LABEL_15;
      case 4u:
        v13 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v13;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v13 - 8))(a1, a2);
        v10 = 4;
LABEL_15:
        *(_BYTE *)(a1 + 40) = v10;
        break;
      default:
        v7 = *a2;
        v8 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for SeriesPromotionState(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if (v4 <= 4)
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v9 = 1;
        goto LABEL_15;
      case 2u:
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v9 = 2;
        goto LABEL_15;
      case 3u:
        v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v9 = 3;
        goto LABEL_15;
      case 4u:
        v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v9 = 4;
LABEL_15:
        *(_BYTE *)(a1 + 40) = v9;
        break;
      default:
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesPromotionState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 6)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeriesPromotionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_2367E0(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 5)
    return (*(_DWORD *)a1 + 5);
  return result;
}

uint64_t sub_2367FC(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SeriesPromotionState()
{
  return &type metadata for SeriesPromotionState;
}

uint64_t storeEnumTagSinglePayload for SeriesInfoError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_236874 + 4 * byte_269F6F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236894 + 4 * byte_269F74[v4]))();
}

_BYTE *sub_236874(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236894(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23689C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2368A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2368AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2368B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SeriesInfoError()
{
  return &type metadata for SeriesInfoError;
}

unint64_t sub_2368D4()
{
  unint64_t result;

  result = qword_32BE20;
  if (!qword_32BE20)
  {
    result = swift_getWitnessTable(&unk_26A014, &type metadata for SeriesInfoError);
    atomic_store(result, (unint64_t *)&qword_32BE20);
  }
  return result;
}

BOOL sub_236918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  double v9;
  char v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = AssetInfo.readingProgress.getter(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v9 == 0.0)
  {
    v10 = AssetInfo.isFinished.getter(a1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return v10 == 2 || (v10 & 1) == 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return 0;
  }
}

BOOL sub_2369FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  double v13;
  void (*v14)(char *, uint64_t, uint64_t);
  __n128 v15;
  _BOOL4 v16;
  void (*v17)(char *, uint64_t);
  char v18;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v20 - v11;
  v13 = AssetInfo.readingProgress.getter(v10);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v12, v2, a1);
  v16 = v13 > 0.0 && AssetInfo.readingProgress.getter(v15) < 0.85;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v12, a1);
  v14(v8, v3, a1);
  if (v16)
  {
    v18 = AssetInfo.isFinished.getter(a1, a2);
    v17(v8, a1);
    return v18 == 2 || (v18 & 1) == 0;
  }
  else
  {
    v17(v8, a1);
    return 0;
  }
}

uint64_t sub_236B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v34 = a1;
  v5 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v32 - v20;
  v35 = a2;
  v36 = a3;
  AssetInfo.lastEngagedDate.getter(a2, a3, v19);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v22(v13, 1, v14) == 1)
  {
    v10 = v13;
LABEL_8:
    v29 = v35;
    v28 = v36;
    sub_5E09C((uint64_t)v10, &qword_31F128);
    AssetInfo.lastEngagedDate.getter(v29, v28, v30);
    v26 = v22(v7, 1, v14) != 1;
    sub_5E09C((uint64_t)v7, &qword_31F128);
    return v26 & 1;
  }
  v33 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v33(v21, v13, v14);
  sub_5E1A4(v34, (uint64_t)v37, &qword_320940);
  v23 = v38;
  if (!v38)
  {
    sub_5E09C((uint64_t)v37, &qword_320940);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, 1, 1, v14);
    goto LABEL_7;
  }
  v24 = v39;
  sub_66898(v37, v38);
  AssetInfo.lastEngagedDate.getter(v23, v24, v25);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v37);
  if (v22(v10, 1, v14) == 1)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
    goto LABEL_8;
  }
  v33(v17, v10, v14);
  v26 = static Date.> infix(_:_:)(v21, v17);
  v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v27(v17, v14);
  v27(v21, v14);
  return v26 & 1;
}

uint64_t sub_236DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  double v9;
  char v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = AssetInfo.readingProgress.getter(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v9 >= 0.85)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return 1;
  }
  else
  {
    v10 = AssetInfo.isFinished.getter(a1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    if (v10 == 2)
      return 0;
    else
      return v10 & 1;
  }
}

uint64_t sub_236ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  char v11;
  uint64_t v13;

  v3 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v9 = (char *)&v13 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.SeriesInfo.AssetType: AssetInfo);
  LOBYTE(v3) = sub_236918(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, AssociatedTypeWitness);
  if ((v3 & 1) != 0)
  {
    v11 = AssetInfo.isPurchased.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
    if (v11 != 2)
      return v11 & 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
  return 0;
}

uint64_t sub_237004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v9;
  _QWORD v11[5];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v11[3] = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.SeriesInfo.AssetType: AssetInfo);
  v11[4] = AssociatedConformanceWitness;
  v9 = sub_668BC(v11);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v9, a1, AssociatedTypeWitness);
  LOBYTE(AssociatedConformanceWitness) = sub_236B50((uint64_t)v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_5E09C((uint64_t)v11, &qword_320940);
  return AssociatedConformanceWitness & 1;
}

uint64_t sub_2370E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.SeriesInfo.AssetType: AssetInfo);
  return a4(AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
}

void sub_237188(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD v9[5];
  _BYTE v11[48];

  v6 = sub_5C154(&qword_32BE30);
  v7 = __chkstk_darwin(v6);
  v8 = type metadata accessor for SeriesUserStatus(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 1, 1, v8);
  SeriesInfo.getPromotionState()(a1, a2, (uint64_t)v11);
  sub_83130((uint64_t)v11, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_23727C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  sub_8307C((_QWORD *)(v4 - 128));
  sub_5E09C(v0, &qword_32BE30);
  sub_8307C((_QWORD *)(v4 - 184));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v0, enum case for SeriesUserStatus.new(_:), v1);
  return v2(v0, 0, 1, v1);
}

void sub_237318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int *v9;

  sub_5DC98((__int128 *)(v7 - 184), v7 - 224);
  v8 = sub_236168((_QWORD *)(v7 - 224), v4, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v7 - 224));
  sub_8307C((_QWORD *)(v7 - 128));
  sub_5E09C(v0, &qword_32BE30);
  v9 = (unsigned int *)&enum case for SeriesUserStatus.new(_:);
  if ((v8 & 1) == 0)
    v9 = (unsigned int *)&enum case for SeriesUserStatus.inProgress(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v2, *v9, v1);
  v5(v2, 0, 1, v1);
  sub_66F14(v2, v0, &qword_32BE30);
  JUMPOUT(0x2372F8);
}

void sub_2373B0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6 = (_QWORD *)(v5 - 128);
  if (*(_QWORD *)(v5 - 160) | *(_QWORD *)(v5 - 152) | a1 | *(_QWORD *)(v5 - 168) | *(_QWORD *)(v5 - 176))
  {
    sub_8307C(v6);
    sub_5E09C(v1, &qword_32BE30);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, enum case for SeriesUserStatus.unknown(_:), v2);
    v3(v1, 0, 1, v2);
    sub_8307C((_QWORD *)(v5 - 184));
    JUMPOUT(0x2372F8);
  }
  sub_8307C(v6);
  sub_5E09C(v1, &qword_32BE30);
  JUMPOUT(0x2372D0);
}

void sub_237440(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v9[48];

  v6 = type metadata accessor for SeriesUserSubStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
  SeriesInfo.getPromotionState()(a1, a2, (uint64_t)v9);
  sub_5E09C(a3, &qword_32BE28);
  sub_8316C((uint64_t)v9, (uint64_t)v7);
  __asm { BR              X11 }
}

_QWORD *sub_237504()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, enum case for SeriesUserSubStatus.seriesSample(_:), v0);
  v2(v1, 0, 1, v0);
  return sub_8307C(&v5);
}

unint64_t sub_2375E8()
{
  return 0xD000000000000027;
}

_QWORD *sub_237610(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_5C154(&qword_31F040);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_237674(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_2376EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_237A4C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_2377D0(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_2377D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_237A4C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_237AC8(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_237AC8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_237C0C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_237610(v12, 0);
      v5 = sub_237CF8((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_237C0C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_237674(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_237674(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_237CF8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_237674(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_237674(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_237F08(uint64_t a1)
{
  uint64_t v1;

  return sub_2370E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(uint64_t, uint64_t))sub_236918) & 1;
}

uint64_t sub_237F2C(uint64_t a1)
{
  uint64_t v1;

  return sub_236ED4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_237F48(uint64_t a1)
{
  uint64_t v1;

  return sub_2370E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(uint64_t, uint64_t))sub_2369FC) & 1;
}

uint64_t sub_237F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_237004(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24)) & 1;
}

uint64_t sub_237F88(uint64_t a1)
{
  uint64_t v1;

  return sub_2370E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), sub_236DE8) & 1;
}

uint64_t sub_237FAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[2];
  _OWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = swift_bridgeObjectRetain(a1);
  v3 = &_swiftEmptyArrayStorage;
  v25 = v2;
  if (v1)
  {
    v4 = 0;
    v5 = 0;
    v6 = v2 + 32;
    v7 = (_OWORD *)((char *)&_swiftEmptyArrayStorage + 32);
    while (1)
    {
      sub_5E0D8(v6, (uint64_t)v26);
      *(_QWORD *)&v27[0] = v4;
      result = sub_5DC98(v26, (uint64_t)v27 + 8);
      v28 = v27[0];
      v29 = v27[1];
      v30 = v27[2];
      if (!v5)
      {
        v9 = v3[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v10 = v1;
        v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        v13 = sub_5C154(&qword_31F000);
        v14 = (_QWORD *)swift_allocObject(v13, 48 * v12 + 32, 7);
        v15 = (uint64_t)(j__malloc_size(v14) - 32) / 48;
        v14[2] = v12;
        v14[3] = 2 * v15;
        v16 = (unint64_t)(v14 + 4);
        v17 = v3[3] >> 1;
        if (v3[2])
        {
          if (v14 != v3 || v16 >= (unint64_t)&v3[6 * v17 + 4])
            memmove(v14 + 4, v3 + 4, 48 * v17);
          v3[2] = 0;
        }
        v7 = (_OWORD *)(v16 + 48 * v17);
        v5 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        result = swift_release(v3);
        v3 = v14;
        v1 = v10;
      }
      v19 = __OFSUB__(v5--, 1);
      if (v19)
        break;
      ++v4;
      v20 = v28;
      v21 = v30;
      v7[1] = v29;
      v7[2] = v21;
      *v7 = v20;
      v7 += 3;
      v6 += 40;
      if (v1 == v4)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = 0;
LABEL_21:
  result = swift_bridgeObjectRelease(v25);
  v22 = v3[3];
  if (v22 < 2)
    return (uint64_t)v3;
  v23 = v22 >> 1;
  v19 = __OFSUB__(v23, v5);
  v24 = v23 - v5;
  if (!v19)
  {
    v3[2] = v24;
    return (uint64_t)v3;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23818C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_31F008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC11BookStoreUIP33_746BEEA828E3C8DB4D072BA76159807F19ResourceBundleClass);
}

void sub_2381F4(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "BSUIGoalsSharableImageRenderer: Errored out with error %@", (uint8_t *)&v4, 0xCu);

}

void sub_238288(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Semaphore for retrieving reading goals sharing URL did time out", v1, 2u);
}

void sub_2382C8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Encountered error while fetching reading goals share URL: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_23833C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Failed to update jalisco media library from purchase success", v1, 2u);
}

void sub_23837C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "nil self fetching taste type", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_2383A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F404();
  sub_F3DC(&dword_0, v0, v1, "Error fetching asset detail: %@", v2, v3, v4, v5, v6);
  sub_F3FC();
}

void sub_238408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "nil self setting taste type", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_238434()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F404();
  sub_F3DC(&dword_0, v0, v1, "Error setting asset detail: %@", v2, v3, v4, v5, v6);
  sub_F3FC();
}

void sub_238494()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "nil self setting explicitly declined", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_2384C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F404();
  sub_F3DC(&dword_0, v0, v1, "Error fetching unsynced asset details: %@", v2, v3, v4, v5, v6);
  sub_F3FC();
}

void sub_238520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F404();
  sub_F3DC(&dword_0, v0, v1, "Error fetching asset details: %@", v2, v3, v4, v5, v6);
  sub_F3FC();
}

void sub_238580()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F404();
  sub_F3DC(&dword_0, v0, v1, "Error setting asset details: %@", v2, v3, v4, v5, v6);
  sub_F3FC();
}

void sub_2385E0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "No AppAnalytics Tracker provided for purchaseBook. Analytics event will be missing tracker.", v1, 2u);
}

void sub_238620()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F404();
  sub_F3DC(&dword_0, v0, v1, "Temp dir is missing but re-created it successfully at %@", v2, v3, v4, v5, v6);
  sub_F3FC();
}

void sub_238680()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_F404();
  v3 = 2112;
  v4 = v0;
  _os_log_fault_impl(&dword_0, v1, OS_LOG_TYPE_FAULT, "Failed to re-create temp dir at %@. Probably going to crash. Error: %@", v2, 0x16u);
  sub_F3FC();
}

void sub_2386FC()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_F404();
  _os_log_fault_impl(&dword_0, v0, OS_LOG_TYPE_FAULT, "Missing Bundle resource: %{public}@", v1, 0xCu);
  sub_F3FC();
}

void sub_238768()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F404();
  sub_F3DC(&dword_0, v0, v1, "Missing JetPack resource: %{public}@", v2, v3, v4, v5, v6);
  sub_F3FC();
}

void sub_2387C8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, a1, a3, "BSUIDownloadPurchaseMonitor: Failed to get the max sort order", a5, a6, a7, a8, 0);
  sub_F410();
}

void sub_2387F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, a1, a3, "BSUIDownloadPurchaseMonitor: Failed to add to want to read", a5, a6, a7, a8, 0);
  sub_F410();
}

void sub_238828(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, a1, a3, "BSUIDownloadPurchaseMonitor: Failed to remove from samples collection", a5, a6, a7, a8, 0);
  sub_F410();
}

void sub_238858(void *a1)
{
  void *v1;
  int v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsJoinedByString:", CFSTR(", ")));
  v2 = 138412290;
  v3 = v1;
  _os_log_fault_impl(&dword_0, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "BSUIDynamicArrayProvider: update contains duplicates of:\n%@", (uint8_t *)&v2, 0xCu);

}

void sub_2388F4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_0, log, OS_LOG_TYPE_DEBUG, "Inited the BSUIDownloadProgressCenter", v1, 2u);
}

void sub_238934(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_28B34(&dword_0, a2, a3, "BSUIDownloadProgressCenter audiobookProgress: %@", (uint8_t *)a2);

}

void sub_23897C(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_28B34(&dword_0, a2, a3, "BSUIDownloadProgressCenter ubiquityProgress: %@", (uint8_t *)a2);

}

void sub_2389C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "forceFetch must be a string", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_2389F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "itemId must be a string", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_238A1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "body must be a string or undefined", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_238A48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "title must be a string or undefined", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_238A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_F418();
  sub_F3EC(&dword_0, v0, v1, "newRating must be a number", v2, v3, v4, v5, v6);
  sub_F410();
}

void sub_238AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, &_os_log_default, a3, "No Tracker was provided to emit purchase attemps event from. Falling back to the primary scene. This should never happen.", a5, a6, a7, a8, 0);
  sub_F410();
}

void sub_238AD4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "BSUIStoreServices failed to hide audiobooks error:%{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_238B48(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, a1, a3, "BSUIStoreServices failed to update jalisco media library after hiding audiobooks.", a5, a6, a7, a8, 0);
}

void sub_238B7C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, a1, a3, "BSUIStoreServices Failed to update jalisco media library", a5, a6, a7, a8, 0);
}

void sub_238BB0(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = 138412546;
  v5 = v2;
  v6 = 1024;
  v7 = v3;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "BSUIStoreServices Failed to update jalisco daap client after updating item %@ to hidden:%{BOOL}d", (uint8_t *)&v4, 0x12u);
}

void sub_238C38(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, a1, a3, "Failed to create view controller for series page", a5, a6, a7, a8, 0);
  sub_F410();
}

void sub_238C68(void *a1, NSObject *a2)
{
  uint8_t v3[14];
  _UNKNOWN **v4;

  objc_msgSend(a1, "feedId");
  sub_4F1AC();
  v4 = &off_2FB9D8;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "[fid:%lu] JS fails to report initialContentReadySection, using fallback value %@", v3, 0x16u);
}

void sub_238CF8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_0, log, OS_LOG_TYPE_DEBUG, "Unexpected: Tried to set a tracker name on a BSUIFeedViewController but tracker already exists.", v1, 2u);
  sub_F410();
}

void sub_238D34()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_4F1AC();
  v3 = v0;
  _os_log_debug_impl(&dword_0, v1, OS_LOG_TYPE_DEBUG, "_removeAlphaOverride: override does not exist - refId: %@, refInstance: %@", v2, 0x16u);
}

void sub_238DAC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Error attempting to execute flow action %@", (uint8_t *)&v2, 0xCu);
}

void sub_238E20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_F3EC(&dword_0, a1, a3, "Unexpected: TUIRenderReferenceQuery does not matching anything in feed.", a5, a6, a7, a8, 0);
  sub_F410();
}

void sub_238E50(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "BSUISeriesStackImageBoxLayout has no way to compute computedNaturalSize for unsupported series filter '%@'.", (uint8_t *)&v2, 0xCu);
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGContext");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGPath");
}

id objc_msgSend_JSAPrivacyAcknowledgementDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSAPrivacyAcknowledgementDidChange");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingPathExtension");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLProtocol_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLProtocol:didFailWithError:");
}

id objc_msgSend_URLProtocol_didLoadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLProtocol:didLoadData:");
}

id objc_msgSend_URLProtocol_didReceiveResponse_cacheStoragePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLProtocol:didReceiveResponse:cacheStoragePolicy:");
}

id objc_msgSend_URLProtocolDidFinishLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLProtocolDidFinishLoading:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLWithString_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:relativeToURL:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__actualReadingTimeSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actualReadingTimeSeconds");
}

id objc_msgSend__addAlphaOverrideToRefId_refInstance_alpha_animated_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAlphaOverrideToRefId:refInstance:alpha:animated:duration:");
}

id objc_msgSend__addPurchaseForItemID_isAudioBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPurchaseForItemID:isAudioBook:");
}

id objc_msgSend__addStoreIDToWantToReadCollection_tracker_productionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addStoreIDToWantToReadCollection:tracker:productionType:");
}

id objc_msgSend__alertActionStyleForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alertActionStyleForName:");
}

id objc_msgSend__analyticsSubmitGetStartedActionEventForGDPRLink_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_analyticsSubmitGetStartedActionEventForGDPRLink:");
}

id objc_msgSend__animateArcLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateArcLayer:");
}

id objc_msgSend__animateProgressTodayIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateProgressTodayIfNeeded");
}

id objc_msgSend__animateProgressTodayIfNeededHonoringDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateProgressTodayIfNeededHonoringDelay:");
}

id objc_msgSend__animateTimeTextFade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateTimeTextFade");
}

id objc_msgSend__announceTheNoticeToAVoiceOverUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_announceTheNoticeToAVoiceOverUser");
}

id objc_msgSend__appearState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appearState");
}

id objc_msgSend__appendFeedsInCards_completion_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendFeedsInCards:completion:options:");
}

id objc_msgSend__attributionView_displayContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attributionView:displayContext:");
}

id objc_msgSend__backgroundArc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundArc");
}

id objc_msgSend__backgroundHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundHidden");
}

id objc_msgSend__baseMessageForGoalKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baseMessageForGoalKind");
}

id objc_msgSend__buildDetailTextModel_service_context_goalCompleted_writingDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildDetailTextModel:service:context:goalCompleted:writingDirection:");
}

id objc_msgSend__buildMailHTML(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildMailHTML");
}

id objc_msgSend__buildTimeTextModel_service_context_writingDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildTimeTextModel:service:context:writingDirection:");
}

id objc_msgSend__buildTitleTextModel_service_context_writingDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildTitleTextModel:service:context:writingDirection:");
}

id objc_msgSend__buyParamsDictFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buyParamsDictFromString:");
}

id objc_msgSend__cacheNewPurchaseWithIdentifier_isPreorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheNewPurchaseWithIdentifier:isPreorder:");
}

id objc_msgSend__calculateComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateComponents");
}

id objc_msgSend__calculateLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateLayout");
}

id objc_msgSend__calculatedProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculatedProgress");
}

id objc_msgSend__callOnJSBridge_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callOnJSBridge:options:completionHandler:");
}

id objc_msgSend__cardIndexForTarget_withKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cardIndexForTarget:withKeyPath:");
}

id objc_msgSend__checkEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkEnvironment");
}

id objc_msgSend__checkForDuplicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForDuplicates:");
}

id objc_msgSend__computeIntrinsicContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeIntrinsicContentSize");
}

id objc_msgSend__configureHostingController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureHostingController");
}

id objc_msgSend__configureHostingControllerWithRawComponentModel_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureHostingControllerWithRawComponentModel:size:");
}

id objc_msgSend__configureNavigationBarWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureNavigationBarWithStyle:");
}

id objc_msgSend__configureWithModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureWithModel:");
}

id objc_msgSend__coverSourceQueryForRepresentedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_coverSourceQueryForRepresentedObject:");
}

id objc_msgSend__createFeedContentFromDictionaries_initialContentReadyEntryIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeedContentFromDictionaries:initialContentReadyEntryIndex:");
}

id objc_msgSend__currentTraitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentTraitCollection");
}

id objc_msgSend__customizePresentationUsingViewController_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customizePresentationUsingViewController:environment:");
}

id objc_msgSend__dataModelWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataModelWithData:");
}

id objc_msgSend__dci_setPreferredSearchBarPlacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dci_setPreferredSearchBarPlacement:");
}

id objc_msgSend__deleteRatingsDataForItem_shouldSuppressMetrics_shouldSuppressResponseDialogs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteRatingsDataForItem:shouldSuppressMetrics:shouldSuppressResponseDialogs:completionHandler:");
}

id objc_msgSend__dismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismiss");
}

id objc_msgSend__dismissBanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissBanner:");
}

id objc_msgSend__displayBottomBanner_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayBottomBanner:animated:");
}

id objc_msgSend__displayBottomBannerForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayBottomBannerForRequest:");
}

id objc_msgSend__emitPurchaseAttemptEventWithTracker_forID_buyParams_isAudioBook_hasRacSupport_upSellData_appAnalyticsAdditionalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_emitPurchaseAttemptEventWithTracker:forID:buyParams:isAudioBook:hasRacSupport:upSellData:appAnalyticsAdditionalData:");
}

id objc_msgSend__emitPurchaseFailEventWithTracker_sessionAssertion_forID_buyParams_hasRacSupport_response_upSellData_appAnalyticsAdditionalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_emitPurchaseFailEventWithTracker:sessionAssertion:forID:buyParams:hasRacSupport:response:upSellData:appAnalyticsAdditionalData:");
}

id objc_msgSend__emitPurchaseSuccessEventWithTracker_sessionAssertion_forID_response_upSellData_appAnalyticsAdditionalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_emitPurchaseSuccessEventWithTracker:sessionAssertion:forID:response:upSellData:appAnalyticsAdditionalData:");
}

id objc_msgSend__endCapHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endCapHeight");
}

id objc_msgSend__escapeHTMLCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_escapeHTMLCharactersInString:");
}

id objc_msgSend__explicitlyDeclinedFromTasteInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_explicitlyDeclinedFromTasteInteger:");
}

id objc_msgSend__feedContentDidLoad_signpost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_feedContentDidLoad:signpost:");
}

id objc_msgSend__feedMetadataDidUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_feedMetadataDidUpdate");
}

id objc_msgSend__fetchRatingsDataForItem_shouldSuppressMetrics_shouldSuppressResponseDialogs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRatingsDataForItem:shouldSuppressMetrics:shouldSuppressResponseDialogs:completionHandler:");
}

id objc_msgSend__fixTwoLineLargeTitleLayoutIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fixTwoLineLargeTitleLayoutIfNeeded");
}

id objc_msgSend__frameOfElementWithEntryID_refId_refInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_frameOfElementWithEntryID:refId:refInstance:");
}

id objc_msgSend__generateDigits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateDigits");
}

id objc_msgSend__generateFacebookMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateFacebookMessage");
}

id objc_msgSend__generateImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateImage");
}

id objc_msgSend__generateLocalizedYear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateLocalizedYear");
}

id objc_msgSend__generateMessageWithURLForActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateMessageWithURLForActivityType:");
}

id objc_msgSend__generateTwitterMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateTwitterMessage");
}

id objc_msgSend__getBarButtonItemFromOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getBarButtonItemFromOptions:");
}

id objc_msgSend__goalCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_goalCompleted");
}

id objc_msgSend__gradientSeparatorWithColors_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gradientSeparatorWithColors:backgroundColor:");
}

id objc_msgSend__handleEngagementMessageRequest_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEngagementMessageRequest:forIdentifier:");
}

id objc_msgSend__hasRemainingDownloadsForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasRemainingDownloadsForIdentifier:");
}

id objc_msgSend__imageRectWithScreenshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageRectWithScreenshot:");
}

id objc_msgSend__isInPopoverPresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInPopoverPresentation");
}

id objc_msgSend__isManualScrollEdgeAppearanceEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isManualScrollEdgeAppearanceEnabled");
}

id objc_msgSend__isMultiUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isMultiUser");
}

id objc_msgSend__isPreOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPreOrder:");
}

id objc_msgSend__isRegularPad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRegularPad");
}

id objc_msgSend__isVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isVisible");
}

id objc_msgSend__itemIsBeingDownloaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemIsBeingDownloaded:");
}

id objc_msgSend__itemIsPurchasedThisSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemIsPurchasedThisSession:");
}

id objc_msgSend__largeTitleTwoLineMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_largeTitleTwoLineMode");
}

id objc_msgSend__lastLineBaseline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastLineBaseline");
}

id objc_msgSend__layoutAndComputeIntrinsicHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutAndComputeIntrinsicHeight");
}

id objc_msgSend__layoutToBaseOfControlIfPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutToBaseOfControlIfPossible");
}

id objc_msgSend__lineCountForLabel_constrainedToWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lineCountForLabel:constrainedToWidth:");
}

id objc_msgSend__localIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localIdentifiers");
}

id objc_msgSend__loveOrHateFromTasteInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loveOrHateFromTasteInteger:");
}

id objc_msgSend__mailMessageForGoalKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mailMessageForGoalKind");
}

id objc_msgSend__mailSubjectForGoalKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mailSubjectForGoalKind");
}

id objc_msgSend__managedObjectModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_managedObjectModel");
}

id objc_msgSend__manualScrollEdgeAppearanceProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_manualScrollEdgeAppearanceProgress");
}

id objc_msgSend__manuallyAdjustBottomContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_manuallyAdjustBottomContentInset");
}

id objc_msgSend__messageForGoalKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageForGoalKind");
}

id objc_msgSend__modelTypeForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modelTypeForString:");
}

id objc_msgSend__moveUpdateForDynamicArray_newArray_updater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveUpdateForDynamicArray:newArray:updater:");
}

id objc_msgSend__newContentDataForID_isAudioBook_hasRacSupport_tracker_supplementalContentCount_appAnalyticsAdditionalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newContentDataForID:isAudioBook:hasRacSupport:tracker:supplementalContentCount:appAnalyticsAdditionalData:");
}

id objc_msgSend__newImageResourcesWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newImageResourcesWithContext:");
}

id objc_msgSend__newProductionTypeForIsAudiobook_hasRacSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newProductionTypeForIsAudiobook:hasRacSupport:");
}

id objc_msgSend__newPurchaseDataForPurchaseID_isPreorder_pricingParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newPurchaseDataForPurchaseID:isPreorder:pricingParameters:");
}

id objc_msgSend__newPurchaseFailData_errorCode_errorDescription_errorDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newPurchaseFailData:errorCode:errorDescription:errorDomain:");
}

id objc_msgSend__notifyObserversItemUpdatedFor_itemState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyObserversItemUpdatedFor:itemState:");
}

id objc_msgSend__optionsForTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_optionsForTransaction:");
}

id objc_msgSend__overrideMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overrideMatchingQuery:");
}

id objc_msgSend__overrideMatchingRefId_refInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overrideMatchingRefId:refInstance:");
}

id objc_msgSend__persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistentStoreCoordinator");
}

id objc_msgSend__persistentStoreDirectoryWithSubfolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistentStoreDirectoryWithSubfolder:");
}

id objc_msgSend__persistentStoreFileName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistentStoreFileName");
}

id objc_msgSend__prepareForOpenWithViewController_viewSize_overrideTraitsBlock_numEntries_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForOpenWithViewController:viewSize:overrideTraitsBlock:numEntries:completion:");
}

id objc_msgSend__presentFeedsInCards_focusedIndex_animated_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentFeedsInCards:focusedIndex:animated:options:completion:");
}

id objc_msgSend__presentedViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentedViewControllers");
}

id objc_msgSend__progressArc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_progressArc");
}

id objc_msgSend__purchaseForItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purchaseForItemID:");
}

id objc_msgSend__q_registerNewGenerationWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_q_registerNewGenerationWithArray:");
}

id objc_msgSend__queryDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryDictionary");
}

id objc_msgSend__readingGoalsURLForActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readingGoalsURLForActivityType:");
}

id objc_msgSend__readingTimeForVisibleOrActualProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readingTimeForVisibleOrActualProgress");
}

id objc_msgSend__recordAlertMetrics_actionType_title_message_alertStyle_actionTargetId_returnValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAlertMetrics:actionType:title:message:alertStyle:actionTargetId:returnValue:");
}

id objc_msgSend__recreatePersistentStoreDirectoryWithSubfolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recreatePersistentStoreDirectoryWithSubfolder:");
}

id objc_msgSend__removeAlphaOverrideFromRefId_refInstance_animated_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAlphaOverrideFromRefId:refInstance:animated:duration:");
}

id objc_msgSend__removePurchaseByItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePurchaseByItemID:");
}

id objc_msgSend__removeStoreIDFromSamplesCollection_tracker_productionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeStoreIDFromSamplesCollection:tracker:productionType:");
}

id objc_msgSend__renderContent_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_renderContent:completion:");
}

id objc_msgSend__replaceUpdateForDynamicArray_newArray_updater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceUpdateForDynamicArray:newArray:updater:");
}

id objc_msgSend__resolveURLString_size_fileType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolveURLString:size:fileType:");
}

id objc_msgSend__ringWidthThickness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ringWidthThickness");
}

id objc_msgSend__scheduleUpdateEngagementMessagesToDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleUpdateEngagementMessagesToDisplay:");
}

id objc_msgSend__separatorWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_separatorWithColor:");
}

id objc_msgSend__setBackgroundHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackgroundHidden:");
}

id objc_msgSend__setChecked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setChecked:");
}

id objc_msgSend__setContainerIgnoresDirectTouchEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContainerIgnoresDirectTouchEvents:");
}

id objc_msgSend__setContinuousCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContinuousCornerRadius:");
}

id objc_msgSend__setEffectiveAnalyticsTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEffectiveAnalyticsTracker:");
}

id objc_msgSend__setInitialTimeTextAnimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInitialTimeTextAnimate");
}

id objc_msgSend__setManualScrollEdgeAppearanceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceEnabled:");
}

id objc_msgSend__setSupportsTwoLineLargeTitles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSupportsTwoLineLargeTitles:");
}

id objc_msgSend__setTitleTextAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTitleTextAlignment:");
}

id objc_msgSend__setupBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupBackground");
}

id objc_msgSend__setupBackgroundLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupBackgroundLayer");
}

id objc_msgSend__setupBackgroundWithDebugBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupBackgroundWithDebugBounds:");
}

id objc_msgSend__setupDailyReading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupDailyReading");
}

id objc_msgSend__setupDayWithProgress_dayType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupDayWithProgress:dayType:");
}

id objc_msgSend__setupDynamicTimeLayerWithDebugBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupDynamicTimeLayerWithDebugBounds:");
}

id objc_msgSend__setupNumberText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupNumberText:");
}

id objc_msgSend__setupSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupSubviews");
}

id objc_msgSend__setupWeeklyProgressWithUpdateMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupWeeklyProgressWithUpdateMode:");
}

id objc_msgSend__specifiedOrContainingWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_specifiedOrContainingWidth");
}

id objc_msgSend__stateForItemIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateForItemIdentifier:");
}

id objc_msgSend__tasteIntegerFromTasteType_explicitlyDeclined_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tasteIntegerFromTasteType:explicitlyDeclined:");
}

id objc_msgSend__titleOpacity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleOpacity");
}

id objc_msgSend__trackChildIdentifier_forParentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackChildIdentifier:forParentIdentifier:");
}

id objc_msgSend__untrackChildIdentifier_forParentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_untrackChildIdentifier:forParentIdentifier:");
}

id objc_msgSend__updateArcLayer_color_percent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateArcLayer:color:percent:");
}

id objc_msgSend__updateArcLayer_withPercent_frame_color_fill_rtl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateArcLayer:withPercent:frame:color:fill:rtl:");
}

id objc_msgSend__updateAssetDictionaryReadingProgressAndIsNewOverrides(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAssetDictionaryReadingProgressAndIsNewOverrides");
}

id objc_msgSend__updateBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBackgroundColor:");
}

id objc_msgSend__updateColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateColors");
}

id objc_msgSend__updateContentNavigationControllerFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContentNavigationControllerFrom:to:");
}

id objc_msgSend__updateEngagementMessagesToDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEngagementMessagesToDisplay");
}

id objc_msgSend__updateEngagementMessagesToDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEngagementMessagesToDisplay:");
}

id objc_msgSend__updateEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEnvironment");
}

id objc_msgSend__updateItemStateFieldsFromBookLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateItemStateFieldsFromBookLibrary:");
}

id objc_msgSend__updateItemStateFieldsFromCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateItemStateFieldsFromCache:");
}

id objc_msgSend__updateItemStateFieldsFromJalisco_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateItemStateFieldsFromJalisco:");
}

id objc_msgSend__updateItemStateFieldsFromMediaLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateItemStateFieldsFromMediaLibrary:");
}

id objc_msgSend__updateLayoutMarginsForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLayoutMarginsForViewController:");
}

id objc_msgSend__updateNavigationItemWithTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationItemWithTitle:");
}

id objc_msgSend__updateNavigationLayoutMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationLayoutMetrics");
}

id objc_msgSend__updateNavigationTypeForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationTypeForViewController:");
}

id objc_msgSend__updatePlayState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePlayState");
}

id objc_msgSend__updatePlaying(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePlaying");
}

id objc_msgSend__updateProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProgress");
}

id objc_msgSend__updateProgressNoAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProgressNoAnimation");
}

id objc_msgSend__updateRatingsDataForItem_shouldSuppressMetrics_shouldSuppressResponseDialogs_updatingData_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRatingsDataForItem:shouldSuppressMetrics:shouldSuppressResponseDialogs:updatingData:completionHandler:");
}

id objc_msgSend__updateStateToDownloadFinishedForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStateToDownloadFinishedForIdentifier:");
}

id objc_msgSend__updateStateToDownloadingForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStateToDownloadingForIdentifier:");
}

id objc_msgSend__updateTimeTextAnimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimeTextAnimate:");
}

id objc_msgSend__updateTitleMessageAndConfirmLabels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTitleMessageAndConfirmLabels");
}

id objc_msgSend__updateViewWithBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateViewWithBackgroundColor:");
}

id objc_msgSend__verticalVelocity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verticalVelocity");
}

id objc_msgSend__visibleOrActualProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visibleOrActualProgress");
}

id objc_msgSend__workingInsetRect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_workingInsetRect");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_absoluteURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteURL");
}

id objc_msgSend_accessQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessQueue");
}

id objc_msgSend_accessibilityIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityIdentifier");
}

id objc_msgSend_accessibilitySummary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilitySummary");
}

id objc_msgSend_acknowledgePrivacy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgePrivacy");
}

id objc_msgSend_acknowledgementNeededForPrivacyIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgementNeededForPrivacyIdentifier:");
}

id objc_msgSend_actionModels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionModels");
}

id objc_msgSend_actionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionString");
}

id objc_msgSend_actionTextForType_withAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionTextForType:withAsset:");
}

id objc_msgSend_actionTextWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionTextWithType:");
}

id objc_msgSend_actionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionType");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actions");
}

id objc_msgSend_actionsToActionModelsTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionsToActionModelsTable");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationState");
}

id objc_msgSend_activeStoreAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeStoreAccount");
}

id objc_msgSend_actualReadingTimeSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actualReadingTimeSeconds");
}

id objc_msgSend_adamId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adamId");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addArcWithCenter_radius_startAngle_endAngle_clockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addArcWithCenter:radius:startAngle:endAngle:clockwise:");
}

id objc_msgSend_addAttributesFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributesFromArray:");
}

id objc_msgSend_addButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButton:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addContentObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContentObserver:");
}

id objc_msgSend_addEngagementObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEngagementObserver:");
}

id objc_msgSend_addFilterPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFilterPredicate:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFinishBlock:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addLibraryFilterPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLibraryFilterPredicate:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_accountTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:accountTypes:");
}

id objc_msgSend_addObserver_forTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forTrigger:");
}

id objc_msgSend_addObserver_forTrigger_inStateManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forTrigger:inStateManager:");
}

id objc_msgSend_addObserver_placement_serviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:placement:serviceType:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addPersistentStoreWithType_configuration_URL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPersistentStoreWithType:configuration:URL:options:error:");
}

id objc_msgSend_addProvider_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addProvider:forIdentifier:");
}

id objc_msgSend_addRenderOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRenderOverride:");
}

id objc_msgSend_addRenderOverride_animated_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRenderOverride:animated:duration:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_addTextFieldWithConfigurationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTextFieldWithConfigurationHandler:");
}

id objc_msgSend_addToLayer_onTop_gravity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToLayer:onTop:gravity:");
}

id objc_msgSend_aida_accountForPrimaryiCloudAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aida_accountForPrimaryiCloudAccount");
}

id objc_msgSend_alertController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertController");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_allBookItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allBookItems");
}

id objc_msgSend_allContentReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allContentReady");
}

id objc_msgSend_allContentReadyDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allContentReadyDate");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allowsAutoDownloadOfSamplesToWantToRead(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsAutoDownloadOfSamplesToWantToRead");
}

id objc_msgSend_allowsEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsEmpty");
}

id objc_msgSend_allowsTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsTitle");
}

id objc_msgSend_alreadyNotifiedBottomReached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alreadyNotifiedBottomReached");
}

id objc_msgSend_amsEngagement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsEngagement");
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_DSID");
}

id objc_msgSend_analyticsAssetPropertyProviderForDataModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsAssetPropertyProviderForDataModel:");
}

id objc_msgSend_analyticsInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsInfo");
}

id objc_msgSend_analyticsTrackerForPurchaseMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsTrackerForPurchaseMonitor:");
}

id objc_msgSend_analyticsTrackerForStoreServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsTrackerForStoreServices:");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:");
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_animation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animation");
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationWithKeyPath:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appAnalyticsAdditionalData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appAnalyticsAdditionalData");
}

id objc_msgSend_appendCardsWithData_fromViewController_identifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendCardsWithData:fromViewController:identifier:completion:");
}

id objc_msgSend_appendChildRenderModelCompatibleWithKind_context_transform_toModels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendChildRenderModelCompatibleWithKind:context:transform:toModels:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applyThemeBasedOnCurrentUserInterfaceStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeBasedOnCurrentUserInterfaceStyle");
}

id objc_msgSend_aq_processCompletedPurchaseAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aq_processCompletedPurchaseAttempt:");
}

id objc_msgSend_aq_processFailedPurchaseAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aq_processFailedPurchaseAttempt:");
}

id objc_msgSend_aq_updateInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aq_updateInterest");
}

id objc_msgSend_arcRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arcRadius");
}

id objc_msgSend_arcWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arcWidth");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_artistName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artistName");
}

id objc_msgSend_artworkAspect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkAspect");
}

id objc_msgSend_artworkURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkURL");
}

id objc_msgSend_artworkURLTemplate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkURLTemplate");
}

id objc_msgSend_artworkURLTemplateAspect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "artworkURLTemplateAspect:");
}

id objc_msgSend_ascender(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ascender");
}

id objc_msgSend_assetDetailForAssetID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDetailForAssetID:completion:");
}

id objc_msgSend_assetDetailManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDetailManager");
}

id objc_msgSend_assetDetailsForAssetIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDetailsForAssetIDs:completion:");
}

id objc_msgSend_assetDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDictionary");
}

id objc_msgSend_assetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetID");
}

id objc_msgSend_assetIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetIdentifier");
}

id objc_msgSend_assetReviewForAssetReviewID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetReviewForAssetReviewID:completion:");
}

id objc_msgSend_assetReviewIDWithUserID_assetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetReviewIDWithUserID:assetID:");
}

id objc_msgSend_assetReviewManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetReviewManager");
}

id objc_msgSend_attributesKindMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesKindMapping");
}

id objc_msgSend_attributionView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributionView");
}

id objc_msgSend_author(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "author");
}

id objc_msgSend_averageRating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "averageRating");
}

id objc_msgSend_avoidSyncTransactionInViewWillAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avoidSyncTransactionInViewWillAppear");
}

id objc_msgSend_awardImageLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awardImageLayer");
}

id objc_msgSend_axValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axValue");
}

id objc_msgSend_ba_analyticsTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ba_analyticsTracker");
}

id objc_msgSend_ba_effectiveAnalyticsTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ba_effectiveAnalyticsTracker");
}

id objc_msgSend_ba_setupNewAnalyticsTrackerWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ba_setupNewAnalyticsTrackerWithName:");
}

id objc_msgSend_backTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backTitle");
}

id objc_msgSend_background(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "background");
}

id objc_msgSend_backgroundArcLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundArcLayer");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_backgroundLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundLayer");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseURL");
}

id objc_msgSend_baseURLForNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseURLForNode:");
}

id objc_msgSend_bcSafeAreaInsetsObservableViewController_safeAreaInsetsDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bcSafeAreaInsetsObservableViewController:safeAreaInsetsDidChange:");
}

id objc_msgSend_bcSafeAreaInsetsObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bcSafeAreaInsetsObserver");
}

id objc_msgSend_bc_allAPITraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_allAPITraits");
}

id objc_msgSend_bc_analyticsVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_analyticsVisibility");
}

id objc_msgSend_bc_analyticsVisibilitySubtreeDidDisappear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_analyticsVisibilitySubtreeDidDisappear");
}

id objc_msgSend_bc_analyticsVisibilitySubtreeWillDisappear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_analyticsVisibilitySubtreeWillDisappear");
}

id objc_msgSend_bc_analyticsVisibilityUpdateSubtree(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_analyticsVisibilityUpdateSubtree");
}

id objc_msgSend_bc_ancestorFullScreenPresentingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_ancestorFullScreenPresentingViewController");
}

id objc_msgSend_bc_booksBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_booksBackground");
}

id objc_msgSend_bc_booksKeyColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_booksKeyColor");
}

id objc_msgSend_bc_booksLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_booksLabelColor");
}

id objc_msgSend_bc_booksSecondaryBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_booksSecondaryBackground");
}

id objc_msgSend_bc_brightness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_brightness");
}

id objc_msgSend_bc_childPresentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_childPresentedViewController");
}

id objc_msgSend_bc_dynamicColorWithLightColor_darkColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_dynamicColorWithLightColor:darkColor:");
}

id objc_msgSend_bc_effectiveEngagementProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_effectiveEngagementProvider");
}

id objc_msgSend_bc_formattedReadingProgress_isFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_formattedReadingProgress:isFinished:");
}

id objc_msgSend_bc_isBookStoreProductURLWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_isBookStoreProductURLWithCompletion:");
}

id objc_msgSend_bc_isPresentedInCardViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_isPresentedInCardViewController");
}

id objc_msgSend_bc_isStoreProductURLWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_isStoreProductURLWithCompletion:");
}

id objc_msgSend_bc_navBarVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_navBarVisible");
}

id objc_msgSend_bc_setNavBarVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_setNavBarVisible:");
}

id objc_msgSend_bc_setPreferredTabBarScrollEdgeAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_setPreferredTabBarScrollEdgeAppearance:");
}

id objc_msgSend_bc_updateNavBarVisibleWithTransitionCoordinator_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_updateNavBarVisibleWithTransitionCoordinator:duration:");
}

id objc_msgSend_bc_userInterfaceStyleDark(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_userInterfaceStyleDark");
}

id objc_msgSend_bc_welcomeButtonColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bc_welcomeButtonColor");
}

id objc_msgSend_beginGeneratingLibraryChangeNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginGeneratingLibraryChangeNotifications");
}

id objc_msgSend_bezierPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPath");
}

id objc_msgSend_bezierPathByReversingPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathByReversingPath");
}

id objc_msgSend_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:");
}

id objc_msgSend_bezierPathWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRoundedRect:cornerRadius:");
}

id objc_msgSend_bk_audiobooksQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bk_audiobooksQuery");
}

id objc_msgSend_bk_cloudRepresentativeItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bk_cloudRepresentativeItem");
}

id objc_msgSend_bk_representativeItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bk_representativeItem");
}

id objc_msgSend_bk_storeID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bk_storeID");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_blendMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blendMode");
}

id objc_msgSend_blueColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blueColor");
}

id objc_msgSend_boldButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldButton");
}

id objc_msgSend_bookCoverIsAudiobook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookCoverIsAudiobook");
}

id objc_msgSend_bookSampleDownloadURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookSampleDownloadURL");
}

id objc_msgSend_BOOLForAttribute_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForAttribute:node:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_borderWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "borderWidth");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bottomContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomContentInset");
}

id objc_msgSend_bottomMarginWithRegularPad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomMarginWithRegularPad:");
}

id objc_msgSend_boundingRectWithSize_options_attributes_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundingRectWithSize:options:attributes:context:");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_box(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "box");
}

id objc_msgSend_boxForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boxForKey:");
}

id objc_msgSend_bsuiFeedViewControllerNavigationBarStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bsuiFeedViewControllerNavigationBarStyle:");
}

id objc_msgSend_bsui_prefersExtraCompactNavBarMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bsui_prefersExtraCompactNavBarMargin");
}

id objc_msgSend_bsui_setPrefersExtraCompactNavBarMargin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bsui_setPrefersExtraCompactNavBarMargin:");
}

id objc_msgSend_bu_dictionaryForQueryItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_dictionaryForQueryItems");
}

id objc_msgSend_bu_groupUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_groupUserDefaults");
}

id objc_msgSend_bu_sharedAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bu_sharedAccountStore");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_buttonTray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonTray");
}

id objc_msgSend_buyParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buyParameters");
}

id objc_msgSend_buyParams(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buyParams");
}

id objc_msgSend_callWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callWithArguments:");
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callback");
}

id objc_msgSend_canHandleDropSession_behavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canHandleDropSession:behavior:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:");
}

id objc_msgSend_capHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capHeight");
}

id objc_msgSend_captionsEnabledForActivePlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "captionsEnabledForActivePlayer");
}

id objc_msgSend_capture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capture:");
}

id objc_msgSend_cardArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardArray");
}

id objc_msgSend_cardAuxiliaryNavigationBarManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardAuxiliaryNavigationBarManager");
}

id objc_msgSend_cardContentScrollManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardContentScrollManager");
}

id objc_msgSend_cardContentViewController_contentInsetsForScrollingToRectWithContentInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardContentViewController:contentInsetsForScrollingToRectWithContentInsets:");
}

id objc_msgSend_cardContentViewController_initializeManagerWithScrollView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardContentViewController:initializeManagerWithScrollView:");
}

id objc_msgSend_cardSetViewController_willUpdateWithNavigationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardSetViewController:willUpdateWithNavigationType:");
}

id objc_msgSend_cardStackTransitioningCoverSourceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardStackTransitioningCoverSourceFrame");
}

id objc_msgSend_cardStackTransitioningCoverSourceImageChangeObserverBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardStackTransitioningCoverSourceImageChangeObserverBlock");
}

id objc_msgSend_cardStackTransitioningCoverSourceReferenceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardStackTransitioningCoverSourceReferenceView");
}

id objc_msgSend_cardStackViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardStackViewController");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_cellBorderColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellBorderColor");
}

id objc_msgSend_cellForItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForItemAtIndexPath:");
}

id objc_msgSend_cellPlaceholderColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellPlaceholderColor");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerXAnchor");
}

id objc_msgSend_centeredCGRectFromRect_centerHorizontally_centerVertically_bounds_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centeredCGRectFromRect:centerHorizontally:centerVertically:bounds:scale:");
}

id objc_msgSend_checkAvailabilityForStoreID_type_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAvailabilityForStoreID:type:metadata:");
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "children");
}

id objc_msgSend_chordLengthAtHeightFromTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chordLengthAtHeightFromTop:");
}

id objc_msgSend_circleWithRect_color_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circleWithRect:color:");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client");
}

id objc_msgSend_clockTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clockTicks");
}

id objc_msgSend_cloudCollectionsManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudCollectionsManager");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_collectAndFlush_accumulatedImpressionsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectAndFlush:accumulatedImpressionsWithCompletion:");
}

id objc_msgSend_collectStatsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectStatsWithCompletion:");
}

id objc_msgSend_collectVisibleImpressionsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectVisibleImpressionsWithCompletion:");
}

id objc_msgSend_collectionMemberForCollectionMemberID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberForCollectionMemberID:completion:");
}

id objc_msgSend_collectionMemberIDWithCollectionID_assetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberIDWithCollectionID:assetID:");
}

id objc_msgSend_collectionMemberManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionMemberManager");
}

id objc_msgSend_collectionView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView");
}

id objc_msgSend_collectionViewContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionViewContentSize");
}

id objc_msgSend_collectionViewLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionViewLayout");
}

id objc_msgSend_collections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collections");
}

id objc_msgSend_color(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "color");
}

id objc_msgSend_colorForAttribute_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorForAttribute:node:");
}

id objc_msgSend_colorForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorForKey:");
}

id objc_msgSend_colorNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorNamed:");
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithRed:green:blue:alpha:");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_commit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit:");
}

id objc_msgSend_compact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compact");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completedTextColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completedTextColor");
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completion");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_computeHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeHeight");
}

id objc_msgSend_computeWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeWidth");
}

id objc_msgSend_computedFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computedFrame");
}

id objc_msgSend_computedLayoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computedLayoutDirection");
}

id objc_msgSend_computedNaturalSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computedNaturalSize");
}

id objc_msgSend_computedOrigin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computedOrigin");
}

id objc_msgSend_computedWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computedWidth");
}

id objc_msgSend_configs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configs");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationWithPointSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPointSize:");
}

id objc_msgSend_configurationWithPointSize_weight_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPointSize:weight:scale:");
}

id objc_msgSend_configureIconMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureIconMode:");
}

id objc_msgSend_configureWithScreenshot_image_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithScreenshot:image:");
}

id objc_msgSend_configureWithSyncLayoutController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithSyncLayoutController:");
}

id objc_msgSend_configureWithTransparentBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithTransparentBackground");
}

id objc_msgSend_configureWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithType:");
}

id objc_msgSend_confirmLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmLabel");
}

id objc_msgSend_confirmLabelTopMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmLabelTopMargin");
}

id objc_msgSend_confirmString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmString");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:constant:");
}

id objc_msgSend_constraintEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToConstant:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:");
}

id objc_msgSend_containerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerView");
}

id objc_msgSend_containingWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containingWidth");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "content");
}

id objc_msgSend_contentIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentIdentifiers");
}

id objc_msgSend_contentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentInset");
}

id objc_msgSend_contentNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentNavigationController");
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentOffset");
}

id objc_msgSend_contentPrivateIDForContentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentPrivateIDForContentID:");
}

id objc_msgSend_contentScrollViewForEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentScrollViewForEdge:");
}

id objc_msgSend_contentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSize");
}

id objc_msgSend_contentSizeCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSizeCategory");
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentType");
}

id objc_msgSend_contentUnavailableConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentUnavailableConfiguration");
}

id objc_msgSend_contentUserIDForContentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentUserIDForContentID:");
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentView");
}

id objc_msgSend_contentsGravity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsGravity");
}

id objc_msgSend_contentsScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsScale");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_continuousCorners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continuousCorners");
}

id objc_msgSend_controlBackgroundLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlBackgroundLayer");
}

id objc_msgSend_controlColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlColor");
}

id objc_msgSend_controlRingLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlRingLayer");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controller");
}

id objc_msgSend_convertRect_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromView:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_cornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cornerRadius");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForGeneration:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_coverAnimationSourceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverAnimationSourceFrame");
}

id objc_msgSend_coverAnimationSourceInvalidateFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverAnimationSourceInvalidateFrame");
}

id objc_msgSend_coverAnimationSourceReferenceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverAnimationSourceReferenceView");
}

id objc_msgSend_coverFilters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverFilters");
}

id objc_msgSend_coverURLStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverURLStrings");
}

id objc_msgSend_create(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "create");
}

id objc_msgSend_createActionModelsFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createActionModelsFrom:");
}

id objc_msgSend_createAlertControllerWith_alertStyle_title_message_alignment_tintColor_metricsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAlertControllerWith:alertStyle:title:message:alignment:tintColor:metricsData:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createHighlightAttributionViewFor_viewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createHighlightAttributionViewFor:viewController:");
}

id objc_msgSend_createSeriesViewControllerFromOptions_withParentTracker_navigationTypeValue_navigationContext_shouldReportFigaro_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSeriesViewControllerFromOptions:withParentTracker:navigationTypeValue:navigationContext:shouldReportFigaro:completion:");
}

id objc_msgSend_createViewControllerForFeedViewController_shouldReportFigaro_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createViewControllerForFeedViewController:shouldReportFigaro:completionHandler:");
}

id objc_msgSend_createWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createWith:");
}

id objc_msgSend_crossfadesContents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crossfadesContents");
}

id objc_msgSend_currentArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentArray");
}

id objc_msgSend_currentCardViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCardViewController");
}

id objc_msgSend_currentDayShortString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDayShortString");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentEnvironment");
}

id objc_msgSend_currentFeedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentFeedViewController");
}

id objc_msgSend_currentGeneration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentGeneration");
}

id objc_msgSend_currentLayers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLayers");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentPackage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPackage");
}

id objc_msgSend_currentPopOverViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPopOverViewController");
}

id objc_msgSend_currentStackName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentStackName");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentState");
}

id objc_msgSend_customerReviewURLForAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customerReviewURLForAssetID:");
}

id objc_msgSend_dailyReadingGoal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dailyReadingGoal");
}

id objc_msgSend_dailyReadingMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dailyReadingMetrics");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataAtPath:");
}

id objc_msgSend_dataForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataForKey:");
}

id objc_msgSend_dataProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataProvider");
}

id objc_msgSend_dataTaskWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithURL:completionHandler:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithDictionary:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFinished");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateOfLastDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfLastDay");
}

id objc_msgSend_dateShortString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateShortString");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "day");
}

id objc_msgSend_dayBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayBackgroundColor");
}

id objc_msgSend_dayLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayLabel");
}

id objc_msgSend_days(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "days");
}

id objc_msgSend_debugAssertRunningOnJSAThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugAssertRunningOnJSAThread");
}

id objc_msgSend_defaultBag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBag");
}

id objc_msgSend_defaultBookLibrary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBookLibrary");
}

id objc_msgSend_defaultCacheManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCacheManager");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultContainer");
}

id objc_msgSend_defaultFontSpec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFontSpec");
}

id objc_msgSend_defaultFormat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFormat");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultMediaLibrary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultMediaLibrary");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSize");
}

id objc_msgSend_defaultsMissingMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultsMissingMetrics");
}

id objc_msgSend_deferUIUpdateUntilInitialContentReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deferUIUpdateUntilInitialContentReady");
}

id objc_msgSend_deferredReloadsQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deferredReloadsQueue");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteAssetReviewForAssetReviewID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAssetReviewForAssetReviewID:completion:");
}

id objc_msgSend_deleteCollectionMemberForCollectionMemberID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCollectionMemberForCollectionMemberID:completion:");
}

id objc_msgSend_deleteItemAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteItemAtIndex:");
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_deleteRatingForItem_shouldSuppressMetrics_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRatingForItem:shouldSuppressMetrics:completion:");
}

id objc_msgSend_deletedFlag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedFlag");
}

id objc_msgSend_dequeueReusableCellWithReuseIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:");
}

id objc_msgSend_descendentViewWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descendentViewWithIdentifier:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_detailFontSpec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailFontSpec");
}

id objc_msgSend_detailText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailText");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didAddChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAddChildViewController:");
}

id objc_msgSend_didBecomeCurrentFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBecomeCurrentFeed");
}

id objc_msgSend_didBecomeVisibleContentScrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBecomeVisibleContentScrollView");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didHidePurchasedAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didHidePurchasedAssetID:");
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_dimmingView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dimmingView");
}

id objc_msgSend_dismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismiss");
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerAnimated:completion:");
}

id objc_msgSend_displayScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayScale");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantPast");
}

id objc_msgSend_documentDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "documentDuration");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_download(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "download");
}

id objc_msgSend_downloadID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadID");
}

id objc_msgSend_downloadIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIcon");
}

id objc_msgSend_downloadPurchaseAttempts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadPurchaseAttempts");
}

id objc_msgSend_drawInRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_dynamicArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicArray");
}

id objc_msgSend_dynamicAudiobookProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicAudiobookProgress");
}

id objc_msgSend_dynamicCompletedReadingGoal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicCompletedReadingGoal");
}

id objc_msgSend_dynamicProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicProgress");
}

id objc_msgSend_dynamicProgressChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicProgressChanged:");
}

id objc_msgSend_dynamicProgressForKind_instance_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicProgressForKind:instance:parameters:");
}

id objc_msgSend_dynamicRegistry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicRegistry");
}

id objc_msgSend_dynamicState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicState");
}

id objc_msgSend_dynamicStateForKind_instance_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicStateForKind:instance:parameters:");
}

id objc_msgSend_dynamicStreakDayGoal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicStreakDayGoal");
}

id objc_msgSend_dynamicTimeLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicTimeLayer");
}

id objc_msgSend_dynamicTimeReadToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicTimeReadToday");
}

id objc_msgSend_editionKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editionKind");
}

id objc_msgSend_editionKindKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editionKindKey");
}

id objc_msgSend_effectWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectWithStyle:");
}

id objc_msgSend_effectiveAnalyticsTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveAnalyticsTracker");
}

id objc_msgSend_elapsedTimeForPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elapsedTimeForPhase:");
}

id objc_msgSend_elementRegistry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementRegistry");
}

id objc_msgSend_emitAddToCollectionEventWithTracker_collectionID_contentID_contentAcquisitionType_contentType_supplementalContentCount_seriesType_productionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitAddToCollectionEventWithTracker:collectionID:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:");
}

id objc_msgSend_emitContextualActionSheetExposureEventWithTracker_startDate_propertyProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitContextualActionSheetExposureEventWithTracker:startDate:propertyProvider:");
}

id objc_msgSend_emitGetStartedActionEventWithTracker_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitGetStartedActionEventWithTracker:type:");
}

id objc_msgSend_emitGetStartedViewEventWithTracker_startDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitGetStartedViewEventWithTracker:startDate:");
}

id objc_msgSend_emitHideBookEventWithTracker_contentData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitHideBookEventWithTracker:contentData:");
}

id objc_msgSend_emitPurchaseAttemptEventWithTracker_contentData_purchaseData_upSellData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitPurchaseAttemptEventWithTracker:contentData:purchaseData:upSellData:");
}

id objc_msgSend_emitPurchaseFailEventWithTracker_contentData_purchaseData_upSellData_failData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitPurchaseFailEventWithTracker:contentData:purchaseData:upSellData:failData:completion:");
}

id objc_msgSend_emitPurchaseSuccessEventWithTracker_contentData_purchaseData_upSellData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitPurchaseSuccessEventWithTracker:contentData:purchaseData:upSellData:completion:");
}

id objc_msgSend_emitRemoveFromCollectionEventWithTracker_collectionID_contentID_contentAcquisitionType_contentType_supplementalContentCount_seriesType_productionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitRemoveFromCollectionEventWithTracker:collectionID:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:");
}

id objc_msgSend_emitTabViewEventWithTracker_startDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitTabViewEventWithTracker:startDate:");
}

id objc_msgSend_emitWantListAddEventWithTracker_contentID_contentAcquisitionType_contentType_supplementalContentCount_seriesType_productionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emitWantListAddEventWithTracker:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:");
}

id objc_msgSend_endEditing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endEditing:");
}

id objc_msgSend_enqueueBlock_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlock:file:line:");
}

id objc_msgSend_enqueueBlockPrefersSync_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlockPrefersSync:file:line:");
}

id objc_msgSend_enqueueImpressionMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueImpressionMetrics");
}

id objc_msgSend_enqueueValueCall_arguments_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueValueCall:arguments:file:line:");
}

id objc_msgSend_enqueueValueInvocation_method_arguments_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueValueInvocation:method:arguments:file:line:");
}

id objc_msgSend_entityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityForName:inManagedObjectContext:");
}

id objc_msgSend_entries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entries");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environment");
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorCode");
}

id objc_msgSend_errorDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorDescription");
}

id objc_msgSend_errorDomain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorDomain");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executeBehaviorNamed_forEntry_withArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeBehaviorNamed:forEntry:withArguments:");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_expanded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expanded");
}

id objc_msgSend_expandedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expandedState");
}

id objc_msgSend_expectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedDate");
}

id objc_msgSend_extraCompact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraCompact");
}

id objc_msgSend_factory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "factory");
}

id objc_msgSend_failureResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failureResponse");
}

id objc_msgSend_fallbackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fallbackColor");
}

id objc_msgSend_feed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feed");
}

id objc_msgSend_feedContentFromDictionaries_stackName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedContentFromDictionaries:stackName:");
}

id objc_msgSend_feedContentLoadingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedContentLoadingState");
}

id objc_msgSend_feedContentWithEntries_stackName_initialContentReadyEntryIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedContentWithEntries:stackName:initialContentReadyEntryIndex:");
}

id objc_msgSend_feedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedController");
}

id objc_msgSend_feedControllerHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedControllerHost");
}

id objc_msgSend_feedId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedId");
}

id objc_msgSend_feedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedViewController");
}

id objc_msgSend_fetchAssetDetailsForUnsyncedTastes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAssetDetailsForUnsyncedTastes:");
}

id objc_msgSend_fetchDialogRequestsFor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDialogRequestsFor:completion:");
}

id objc_msgSend_fetchIsAssetID_inCollectionID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsAssetID:inCollectionID:completion:");
}

id objc_msgSend_fetchMaxSortOrderInCollectionID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMaxSortOrderInCollectionID:completion:");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_fetchServerItemsForStoreIDs_andDSIDS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchServerItemsForStoreIDs:andDSIDS:");
}

id objc_msgSend_fetchTastesForStoreUploading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTastesForStoreUploading:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileProviderForKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileProviderForKind:");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSize");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fill(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fill");
}

id objc_msgSend_filter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filter");
}

id objc_msgSend_filterRegistry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterRegistry");
}

id objc_msgSend_finalizeTextModelWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeTextModelWithContext:");
}

id objc_msgSend_finalizeWidgetWithParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeWidgetWithParent:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstUnderlyingErrorCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstUnderlyingErrorCode");
}

id objc_msgSend_firstUnderlyingErrorLocalizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstUnderlyingErrorLocalizedDescription");
}

id objc_msgSend_floatForAttribute_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatForAttribute:node:");
}

id objc_msgSend_floatForAttribute_withDefault_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatForAttribute:withDefault:node:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "font");
}

id objc_msgSend_fontDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptor");
}

id objc_msgSend_fontDescriptorByAddingAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptorByAddingAttributes:");
}

id objc_msgSend_fontSpec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSpec");
}

id objc_msgSend_fontSpecForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSpecForKey:");
}

id objc_msgSend_fontSpecForNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSpecForNode:");
}

id objc_msgSend_fontSpecWithDesign_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSpecWithDesign:");
}

id objc_msgSend_fontSpecWithPointSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSpecWithPointSize:");
}

id objc_msgSend_fontSpecWithPostscriptName_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSpecWithPostscriptName:size:");
}

id objc_msgSend_fontSpecWithWeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSpecWithWeight:");
}

id objc_msgSend_fontWithDescriptor_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithDescriptor:size:");
}

id objc_msgSend_formattedReadingProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedReadingProgress");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_frameOfPresentedViewInContainerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameOfPresentedViewInContainerView");
}

id objc_msgSend_functionWithControlPoints__::(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithControlPoints::::");
}

id objc_msgSend_functionWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithName:");
}

id objc_msgSend_futureDayTextColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "futureDayTextColor");
}

id objc_msgSend_get_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "get:");
}

id objc_msgSend_getRatingForItem_forceFetch_shouldSuppressMetrics_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRatingForItem:forceFetch:shouldSuppressMetrics:completion:");
}

id objc_msgSend_getSourceRectFromOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSourceRectFromOptions:");
}

id objc_msgSend_goalCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "goalCompleted");
}

id objc_msgSend_goalCompletedAnimationRequested(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "goalCompletedAnimationRequested");
}

id objc_msgSend_handleEngagementRequest_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEngagementRequest:forIdentifier:");
}

id objc_msgSend_hasProviderForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasProviderForIdentifier:");
}

id objc_msgSend_hasRacGUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRacGUID");
}

id objc_msgSend_hasRacSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRacSupport");
}

id objc_msgSend_hasSpecifiedFinishedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSpecifiedFinishedDate");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "height");
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightAnchor");
}

id objc_msgSend_hiddenTimeLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hiddenTimeLayer");
}

id objc_msgSend_hide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hide:");
}

id objc_msgSend_hideItemsWithPurchaseHistoryIDs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideItemsWithPurchaseHistoryIDs:completionHandler:");
}

id objc_msgSend_hideItemsWithStoreIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideItemsWithStoreIDs:completion:");
}

id objc_msgSend_highestPointOfArcForWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highestPointOfArcForWidth:");
}

id objc_msgSend_horizontalMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalMargin");
}

id objc_msgSend_horizontalSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalSizeClass");
}

id objc_msgSend_hostedMessageViewDidBecomeVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostedMessageViewDidBecomeVisible:");
}

id objc_msgSend_hostedMessageViewDidTriggerAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostedMessageViewDidTriggerAction:");
}

id objc_msgSend_hostingController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostingController");
}

id objc_msgSend_hostingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostingViewController");
}

id objc_msgSend_iCloudAccountName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudAccountName");
}

id objc_msgSend_iconImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconImage");
}

id objc_msgSend_iconImageAlwaysTemplate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconImageAlwaysTemplate");
}

id objc_msgSend_iconImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconImageView");
}

id objc_msgSend_iconMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconMode");
}

id objc_msgSend_id(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "id");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifiersQueuedForCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiersQueuedForCache");
}

id objc_msgSend_identifiersQueuedForNetwork(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiersQueuedForNetwork");
}

id objc_msgSend_im_ancestorViewControllerConformingToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_ancestorViewControllerConformingToProtocol:");
}

id objc_msgSend_im_childViewControllerForTabBarVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_childViewControllerForTabBarVisibility");
}

id objc_msgSend_im_isStyleDark(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_isStyleDark");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageChangeObserverBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageChangeObserverBlock");
}

id objc_msgSend_imageContentWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageContentWithOptions:");
}

id objc_msgSend_imageForScreenshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageForScreenshot:");
}

id objc_msgSend_imageNamed_inBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:inBundle:");
}

id objc_msgSend_imageNamed_inBundle_withConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:inBundle:withConfiguration:");
}

id objc_msgSend_imageResource_naturalSize_contentsScale_withFilter_filterOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResource:naturalSize:contentsScale:withFilter:filterOptions:");
}

id objc_msgSend_imageResource_tintedWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResource:tintedWithColor:");
}

id objc_msgSend_imageResourceCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResourceCache");
}

id objc_msgSend_imageResourceForImageResources_filters_imageSetFilter_naturalSize_contentsScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResourceForImageResources:filters:imageSetFilter:naturalSize:contentsScale:");
}

id objc_msgSend_imageResourceForKind_naturalSize_contentsScale_instance_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResourceForKind:naturalSize:contentsScale:instance:options:");
}

id objc_msgSend_imageResourceForTemplatedURL_baseURL_naturalSize_contentsScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResourceForTemplatedURL:baseURL:naturalSize:contentsScale:");
}

id objc_msgSend_imageResourcesMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResourcesMatchingQuery:");
}

id objc_msgSend_imageSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageSize");
}

id objc_msgSend_imageURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageURL");
}

id objc_msgSend_imageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageView");
}

id objc_msgSend_imageWithActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithActions:");
}

id objc_msgSend_imageWithAlignmentRectInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithAlignmentRectInsets:");
}

id objc_msgSend_imageWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithConfiguration:");
}

id objc_msgSend_imageWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithData:");
}

id objc_msgSend_imageWithRenderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithRenderingMode:");
}

id objc_msgSend_impressionController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "impressionController");
}

id objc_msgSend_impressions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "impressions");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexPathForItemAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForItemAtPoint:");
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRow:inSection:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAction:");
}

id objc_msgSend_initWithActivityItems_applicationActivities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityItems:applicationActivities:");
}

id objc_msgSend_initWithAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAdamID:");
}

id objc_msgSend_initWithAppleAccount_grandSlamAccount_accountStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppleAccount:grandSlamAccount:accountStore:");
}

id objc_msgSend_initWithArrangedSubviews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArrangedSubviews:");
}

id objc_msgSend_initWithArray_options_dynamicArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:options:dynamicArray:");
}

id objc_msgSend_initWithArrowDirection_relativeArrowOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArrowDirection:relativeArrowOffset:");
}

id objc_msgSend_initWithAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetID:");
}

id objc_msgSend_initWithAssetModel_sourceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetModel:sourceView:");
}

id objc_msgSend_initWithAssetModels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetModels:");
}

id objc_msgSend_initWithAssetReviewID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetReviewID:");
}

id objc_msgSend_initWithAttributionView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributionView:");
}

id objc_msgSend_initWithBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBag:");
}

id objc_msgSend_initWithBarButtonSystemItem_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarButtonSystemItem:target:action:");
}

id objc_msgSend_initWithBuyParams_isAudiobook_hasRacSupport_supportsUnifiedProductPage_editionKind_tracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBuyParams:isAudiobook:hasRacSupport:supportsUnifiedProductPage:editionKind:tracker:");
}

id objc_msgSend_initWithCachedItemDescription_lazyNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCachedItemDescription:lazyNotes:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCollectionMemberID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCollectionMemberID:");
}

id objc_msgSend_initWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCompletion:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithContent_environment_factory_manager_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContent:environment:factory:manager:options:");
}

id objc_msgSend_initWithContentID_contentType_contentPrivateID_contentUserID_contentAcquisitionType_contentSubType_contentLength_supplementalContentCount_seriesType_productionType_isUnified_contentKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentID:contentType:contentPrivateID:contentUserID:contentAcquisitionType:contentSubType:contentLength:supplementalContentCount:seriesType:productionType:isUnified:contentKind:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsScale_resource_load_cornerRadius_fallbackColor_contentsGravity_hflip_crossfadesContents_opacity_continuousCorners_shouldRasterize_blendMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsScale:resource:load:cornerRadius:fallbackColor:contentsGravity:hflip:crossfadesContents:opacity:continuousCorners:shouldRasterize:blendMode:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_MIMEType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:MIMEType:");
}

id objc_msgSend_initWithDefaultSize_horizontalMargin_maxWidth_maxHeight_topContentInset_bottomContentInset_imageSize_titleTopMargin_messageTopMargin_confirmLabelTopMargin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDefaultSize:horizontalMargin:maxWidth:maxHeight:topContentInset:bottomContentInset:imageSize:titleTopMargin:messageTopMargin:confirmLabelTopMargin:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDragInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDragInfo:");
}

id objc_msgSend_initWithEntity_insertIntoManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntity:insertIntoManagedObjectContext:");
}

id objc_msgSend_initWithFeedArray_syncLayoutController_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedArray:syncLayoutController:options:");
}

id objc_msgSend_initWithFeedViewController_query_audioBookControlQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedViewController:query:audioBookControlQuery:");
}

id objc_msgSend_initWithFeedViewController_query_isCover_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedViewController:query:isCover:");
}

id objc_msgSend_initWithFeedViewController_query_isInNonHorizontalLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedViewController:query:isInNonHorizontalLayout:");
}

id objc_msgSend_initWithFileID_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileID:line:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_collectionViewLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:collectionViewLayout:");
}

id objc_msgSend_initWithImpression_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImpression:");
}

id objc_msgSend_initWithIsInCard_isInModal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIsInCard:isInModal:");
}

id objc_msgSend_initWithItemProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemProvider:");
}

id objc_msgSend_initWithKind_instance_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKind:instance:parameters:");
}

id objc_msgSend_initWithLibraryAsset_productProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryAsset:productProfile:");
}

id objc_msgSend_initWithLoader_filters_customImageBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLoader:filters:customImageBundle:");
}

id objc_msgSend_initWithMResourceRawData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMResourceRawData:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithMaxItemCount_subfolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxItemCount:subfolder:");
}

id objc_msgSend_initWithMemoryCapacity_diskCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMemoryCapacity:diskCapacity:");
}

id objc_msgSend_initWithMemoryCapacity_diskCapacity_diskPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMemoryCapacity:diskCapacity:diskPath:");
}

id objc_msgSend_initWithMetrics_timeTextYOffset_micaFileProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMetrics:timeTextYOffset:micaFileProvider:");
}

id objc_msgSend_initWithNavigationBarClass_toolbarClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigationBarClass:toolbarClass:");
}

id objc_msgSend_initWithNode_attributes_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNode:attributes:context:");
}

id objc_msgSend_initWithNotifyBlock_blockDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNotifyBlock:blockDescription:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:completion:");
}

id objc_msgSend_initWithOptions_completion_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:completion:traitCollection:");
}

id objc_msgSend_initWithPath_retinaScale_fileProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:retinaScale:fileProvider:");
}

id objc_msgSend_initWithPreviousSectionID_previousSectionName_previousContentID_linkActionType_previousSeriesID_previousGenreID_previousCollectionID_previousAuthorID_previousFlowcaseID_previousBrickID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreviousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:");
}

id objc_msgSend_initWithPrivacyIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivacyIdentifier:");
}

id objc_msgSend_initWithPrivacyIdentifier_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivacyIdentifier:account:");
}

id objc_msgSend_initWithProfileDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProfileDictionary:");
}

id objc_msgSend_initWithProgressView_frame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProgressView:frame:");
}

id objc_msgSend_initWithProgressView_frame_progress_label_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProgressView:frame:progress:label:");
}

id objc_msgSend_initWithProtocolClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtocolClasses:");
}

id objc_msgSend_initWithProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProvider:");
}

id objc_msgSend_initWithPurchaseAttemptID_purchaseMethod_isPreorder_pricingParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPurchaseAttemptID:purchaseMethod:isPreorder:pricingParameters:");
}

id objc_msgSend_initWithPurchaseFailureReason_errorCode_errorDescription_errorDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPurchaseFailureReason:errorCode:errorDescription:errorDomain:");
}

id objc_msgSend_initWithRawComponentModel_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRawComponentModel:identifier:");
}

id objc_msgSend_initWithRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRegistry:");
}

id objc_msgSend_initWithRequest_identifier_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:identifier:delegate:");
}

id objc_msgSend_initWithRequest_placement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:placement:");
}

id objc_msgSend_initWithResourceTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceTimeout:");
}

id objc_msgSend_initWithReuseIdentifier_identifier_submodel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReuseIdentifier:identifier:submodel:");
}

id objc_msgSend_initWithScreenshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScreenshots:");
}

id objc_msgSend_initWithScreenshots_andSelectedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScreenshots:andSelectedIndex:");
}

id objc_msgSend_initWithSharableImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSharableImage:");
}

id objc_msgSend_initWithSharableImage_kind_year_title_sharingUrls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSharableImage:kind:year:title:sharingUrls:");
}

id objc_msgSend_initWithSize_contentsScale_cornerRadius_maskColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:contentsScale:cornerRadius:maskColor:");
}

id objc_msgSend_initWithSize_contentsScale_cornerRadius_urlString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:contentsScale:cornerRadius:urlString:");
}

id objc_msgSend_initWithSize_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:format:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithStyle_diameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:diameter:");
}

id objc_msgSend_initWithSubmodels_config_erasableInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubmodels:config:erasableInsets:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithTextModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTextModel:");
}

id objc_msgSend_initWithTitle_message_image_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:message:image:");
}

id objc_msgSend_initWithTitle_message_image_confirmString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:message:image:confirmString:");
}

id objc_msgSend_initWithTitle_message_imageURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:message:imageURLString:");
}

id objc_msgSend_initWithTraitCollection_viewController_viewSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTraitCollection:viewController:viewSize:");
}

id objc_msgSend_initWithType_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:identifier:");
}

id objc_msgSend_initWithType_progress_text_dateShortString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:progress:text:dateShortString:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_MIMEType_expectedContentLength_textEncodingName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:MIMEType:expectedContentLength:textEncodingName:");
}

id objc_msgSend_initWithValue_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:options:");
}

id objc_msgSend_initWithViewSize_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithViewSize:traitCollection:");
}

id objc_msgSend_initialContentReadyDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialContentReadyDate");
}

id objc_msgSend_initialLayoutStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialLayoutStartDate");
}

id objc_msgSend_initialResourcesRenderedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialResourcesRenderedDate");
}

id objc_msgSend_initialSelectedIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialSelectedIndex");
}

id objc_msgSend_insertItemAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertItemAtIndex:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertOrUpdateItemWithIdentifier_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertOrUpdateItemWithIdentifier:state:");
}

id objc_msgSend_insets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insets");
}

id objc_msgSend_instanceForObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceForObserver:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_intrinsicAspectRatio(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intrinsicAspectRatio");
}

id objc_msgSend_intrinsicContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intrinsicContentSize");
}

id objc_msgSend_intrinsicHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intrinsicHeight");
}

id objc_msgSend_intrinsicWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intrinsicWidth");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateLayout");
}

id objc_msgSend_invokeMethod_withArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invokeMethod:withArguments:");
}

id objc_msgSend_isAX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAX");
}

id objc_msgSend_isAccountModificationAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountModificationAllowed");
}

id objc_msgSend_isAnODPRecommendation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAnODPRecommendation");
}

id objc_msgSend_isAnimated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAnimated");
}

id objc_msgSend_isArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isArray");
}

id objc_msgSend_isAudioBook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAudioBook");
}

id objc_msgSend_isAudiobook(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAudiobook");
}

id objc_msgSend_isBeingPresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeingPresented");
}

id objc_msgSend_isBoolean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBoolean");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isCoveredByCardStack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCoveredByCardStack");
}

id objc_msgSend_isCurrentCard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentCard");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToRenderModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToRenderModel:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFileURL");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHidden");
}

id objc_msgSend_isInCard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInCard");
}

id objc_msgSend_isInteractive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInteractive");
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalBuild");
}

id objc_msgSend_isKeyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyWindow");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isNavigationBarHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNavigationBarHidden");
}

id objc_msgSend_isNew(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNew");
}

id objc_msgSend_isNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNumber");
}

id objc_msgSend_isObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isObject");
}

id objc_msgSend_isOffline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOffline");
}

id objc_msgSend_isOnDeviceAppInstallationAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOnDeviceAppInstallationAllowed");
}

id objc_msgSend_isPreOrderFromBuyParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPreOrderFromBuyParameters:");
}

id objc_msgSend_isPresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPresented");
}

id objc_msgSend_isPurchaseRedownload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPurchaseRedownload");
}

id objc_msgSend_isPurchased(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPurchased");
}

id objc_msgSend_isRoot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRoot");
}

id objc_msgSend_isRootFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRootFeed");
}

id objc_msgSend_isRunningStreak(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningStreak");
}

id objc_msgSend_isSample(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSample");
}

id objc_msgSend_isStreamable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStreamable");
}

id objc_msgSend_isString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isString");
}

id objc_msgSend_isSupplementalContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupplementalContent");
}

id objc_msgSend_isTrackedAsRecent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTrackedAsRecent");
}

id objc_msgSend_isUndefined(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUndefined");
}

id objc_msgSend_isUpdateAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUpdateAvailable");
}

id objc_msgSend_isUpdatingManualScrollEdgeAppearanceProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUpdatingManualScrollEdgeAppearanceProgress");
}

id objc_msgSend_isUserCancelError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserCancelError");
}

id objc_msgSend_isValidSourceWithFeedViewController_query_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidSourceWithFeedViewController:query:");
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isViewLoaded");
}

id objc_msgSend_item(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "item");
}

id objc_msgSend_itemDescriptionsFromIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemDescriptionsFromIdentifiers:");
}

id objc_msgSend_itemIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemIdentifier");
}

id objc_msgSend_itemSizeForRegularPad_maxSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemSizeForRegularPad:maxSize:");
}

id objc_msgSend_itemStateWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemStateWithIdentifier:");
}

id objc_msgSend_items(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "items");
}

id objc_msgSend_itemsOfInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemsOfInterest");
}

id objc_msgSend_jetActionHandlerInContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jetActionHandlerInContext");
}

id objc_msgSend_jsFeedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsFeedController");
}

id objc_msgSend_jsaFeedControllerClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsaFeedControllerClass");
}

id objc_msgSend_jsa_normalizedArtworkURLOfSize_withFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_normalizedArtworkURLOfSize:withFormat:");
}

id objc_msgSend_jsa_presentViewController_options_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_presentViewController:options:animated:completion:");
}

id objc_msgSend_jsa_topMostViewControllerForWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsa_topMostViewControllerForWindow:");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_kind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kind");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "label");
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "language");
}

id objc_msgSend_largeNavigationBarFontAttributesWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeNavigationBarFontAttributesWithTraitCollection:");
}

id objc_msgSend_largeTitleDisplayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeTitleDisplayMode");
}

id objc_msgSend_lastAXValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAXValue");
}

id objc_msgSend_lastGoals(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastGoals");
}

id objc_msgSend_lastNavigationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastNavigationType");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastSeenProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSeenProgress");
}

id objc_msgSend_lastTwoLineTitleFixHadSearchController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastTwoLineTitleFixHadSearchController");
}

id objc_msgSend_lastTwoLineTitleFixed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastTwoLineTitleFixed");
}

id objc_msgSend_lastVisibleProgressToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastVisibleProgressToday");
}

id objc_msgSend_lastWorkingRect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastWorkingRect");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_layerContentsGravityFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layerContentsGravityFromString:");
}

id objc_msgSend_layoutAttributesForElementsInRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutAttributesForElementsInRect:");
}

id objc_msgSend_layoutAttributesForItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutAttributesForItemAtIndexPath:");
}

id objc_msgSend_layoutController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutController");
}

id objc_msgSend_layoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutDirection");
}

id objc_msgSend_layoutFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutFrame");
}

id objc_msgSend_layoutIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutIfNeeded");
}

id objc_msgSend_layoutInfosToDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutInfosToDisplay");
}

id objc_msgSend_layoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMargins");
}

id objc_msgSend_layoutState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutState");
}

id objc_msgSend_layoutType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutType");
}

id objc_msgSend_layoutWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutWithAction:");
}

id objc_msgSend_lazyNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lazyNotes");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lengthForAttribute_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthForAttribute:node:");
}

id objc_msgSend_library(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "library");
}

id objc_msgSend_libraryItemStateCenter_didUpdateItemState_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryItemStateCenter:didUpdateItemState:forIdentifier:");
}

id objc_msgSend_libraryMgr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryMgr");
}

id objc_msgSend_linkWithBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkWithBundleIdentifiers:");
}

id objc_msgSend_loadEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadEntries");
}

id objc_msgSend_loadPromise(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPromise");
}

id objc_msgSend_loadingConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadingConfiguration");
}

id objc_msgSend_loadsContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadsContent");
}

id objc_msgSend_localObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localObject");
}

id objc_msgSend_localStoreAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localStoreAccount");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longValue");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_makeKeyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeKeyWindow");
}

id objc_msgSend_managedValueWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedValueWithValue:");
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager");
}

id objc_msgSend_mapItemState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapItemState:");
}

id objc_msgSend_mapTableWithKeyOptions_valueOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapTableWithKeyOptions:valueOptions:");
}

id objc_msgSend_maskColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maskColor");
}

id objc_msgSend_matchesRefId_refInstance_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesRefId:refInstance:identifier:");
}

id objc_msgSend_matchesUUID_uid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesUUID:uid:");
}

id objc_msgSend_maxAspectRatio(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxAspectRatio");
}

id objc_msgSend_maxHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxHeight");
}

id objc_msgSend_maxItemCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxItemCount");
}

id objc_msgSend_maxWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxWidth");
}

id objc_msgSend_maximumDefaultYForLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumDefaultYForLayout");
}

id objc_msgSend_menuElementsForViewController_dataModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuElementsForViewController:dataModel:");
}

id objc_msgSend_menuElementsWithDataModel_viewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuElementsWithDataModel:viewController:completion:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "message");
}

id objc_msgSend_messageLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageLabel");
}

id objc_msgSend_messagePlacements(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messagePlacements");
}

id objc_msgSend_messageTopMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageTopMargin");
}

id objc_msgSend_messageViewControllerProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageViewControllerProvider");
}

id objc_msgSend_messagesAlreadyDisplayed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messagesAlreadyDisplayed");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_metadataDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataDelegate");
}

id objc_msgSend_metadataForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataForIdentifier:");
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metrics");
}

id objc_msgSend_micaPlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "micaPlayer");
}

id objc_msgSend_minimumLineSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumLineSpacing");
}

id objc_msgSend_minimumLineSpacingWithRegularPad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumLineSpacingWithRegularPad:");
}

id objc_msgSend_minimumTextSeparation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumTextSeparation");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_moc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moc");
}

id objc_msgSend_modalPresentationStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modalPresentationStyle");
}

id objc_msgSend_monogramForPersonWithFirstName_lastName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monogramForPersonWithFirstName:lastName:");
}

id objc_msgSend_moveItemFromIndex_toIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemFromIndex:toIndex:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nameForAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForAttribute:");
}

id objc_msgSend_nameForResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForResourceType:");
}

id objc_msgSend_navigationBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBar");
}

id objc_msgSend_navigationBarFontAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarFontAttributes");
}

id objc_msgSend_navigationBarItemMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarItemMatchingQuery:");
}

id objc_msgSend_navigationBarLayoutInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarLayoutInsets");
}

id objc_msgSend_navigationBarMetricsLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarMetricsLayoutMargins");
}

id objc_msgSend_navigationBarStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarStyle");
}

id objc_msgSend_navigationBarTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarTintColor");
}

id objc_msgSend_navigationBarTintColorWhenLayoutReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarTintColorWhenLayoutReady");
}

id objc_msgSend_navigationBarVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarVisible");
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController");
}

id objc_msgSend_navigationItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationItem");
}

id objc_msgSend_newImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newImage");
}

id objc_msgSend_newSessionAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newSessionAssertion");
}

id objc_msgSend_newSessionExtendingAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newSessionExtendingAssertion");
}

id objc_msgSend_newSuspensionAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newSuspensionAssertion");
}

id objc_msgSend_newTextLayerAtFrame_character_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTextLayerAtFrame:character:");
}

id objc_msgSend_nightBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nightBackgroundColor");
}

id objc_msgSend_nightMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nightMode");
}

id objc_msgSend_normalizedStarRating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedStarRating");
}

id objc_msgSend_noticeTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noticeTitle");
}

id objc_msgSend_noticeView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noticeView");
}

id objc_msgSend_noticeViewConfirmLabelFontAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noticeViewConfirmLabelFontAttributes");
}

id objc_msgSend_noticeViewLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noticeViewLayout");
}

id objc_msgSend_noticeViewMessageFontAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noticeViewMessageFontAttributes");
}

id objc_msgSend_noticeViewTitleFontAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noticeViewTitleFontAttributes");
}

id objc_msgSend_notifyAnalyticsVisibilityDidAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyAnalyticsVisibilityDidAppear");
}

id objc_msgSend_notifyAnalyticsVisibilityWillDisappear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyAnalyticsVisibilityWillDisappear");
}

id objc_msgSend_notifyDidAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDidAppear");
}

id objc_msgSend_notifyFeedDidBecomeCurrent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyFeedDidBecomeCurrent");
}

id objc_msgSend_notifyInitialContentReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyInitialContentReady");
}

id objc_msgSend_notifyObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyObservers");
}

id objc_msgSend_notifyOnAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyOnAppear");
}

id objc_msgSend_notifyOnDisappear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyOnDisappear");
}

id objc_msgSend_notifyOnMessageActionTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyOnMessageActionTriggered:");
}

id objc_msgSend_notifyParentCardWillDismissWithReason_targetFeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyParentCardWillDismissWithReason:targetFeed:");
}

id objc_msgSend_notifyScrollViewReachedTheBottom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyScrollViewReachedTheBottom");
}

id objc_msgSend_notifyWhenVisibleImageResourcesAreLoadedWithTimeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyWhenVisibleImageResourcesAreLoadedWithTimeout:completion:");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_numberOfItemsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfItemsInSection:");
}

id objc_msgSend_numberOfLineFragments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfLineFragments");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectAsyncProducer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAsyncProducer:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndex_generation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:generation:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForAttribute_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForAttribute:node:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectSyncProducer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectSyncProducer:");
}

id objc_msgSend_observers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observers");
}

id objc_msgSend_observersByTrigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observersByTrigger");
}

id objc_msgSend_observersToNotifyForItemIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observersToNotifyForItemIdentifier:");
}

id objc_msgSend_offer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offer");
}

id objc_msgSend_onUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onUpdate");
}

id objc_msgSend_opacity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opacity");
}

id objc_msgSend_openProductPagesWithIds_contentTypes_focusedIndex_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openProductPagesWithIds:contentTypes:focusedIndex:options:");
}

id objc_msgSend_openWriteReviewPageWithURL_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openWriteReviewPageWithURL:options:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operations");
}

id objc_msgSend_option(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "option");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_outgoingLayers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingLayers");
}

id objc_msgSend_overrideForHiding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideForHiding");
}

id objc_msgSend_overrideForHidingAudioControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideForHidingAudioControl");
}

id objc_msgSend_overrideReadingTimeToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideReadingTimeToday");
}

id objc_msgSend_overrideWithQuery_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideWithQuery:alpha:");
}

id objc_msgSend_overrideWithQuery_forceVisibleOnHover_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideWithQuery:forceVisibleOnHover:");
}

id objc_msgSend_packageWithURL_baseURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packageWithURL:baseURL:error:");
}

id objc_msgSend_pageContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageContext");
}

id objc_msgSend_pageId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageId");
}

id objc_msgSend_pageType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageType");
}

id objc_msgSend_panGestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panGestureRecognizer");
}

id objc_msgSend_parentCardNavigationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentCardNavigationType");
}

id objc_msgSend_parseCalendarData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseCalendarData:");
}

id objc_msgSend_parseDailyReadingData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseDailyReadingData:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pauseRemovingFromMySamples(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseRemovingFromMySamples");
}

id objc_msgSend_percentComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "percentComplete");
}

id objc_msgSend_performBatchUpdatesWithGeneration_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBatchUpdatesWithGeneration:block:");
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performDropWithSession_behavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performDropWithSession:behavior:");
}

id objc_msgSend_performRawActionModel_withParentTracker_shouldReportFigaro_sourceViewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRawActionModel:withParentTracker:shouldReportFigaro:sourceViewController:completion:");
}

id objc_msgSend_performantForReadingExperience(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performantForReadingExperience");
}

id objc_msgSend_performantForScrolling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performantForScrolling");
}

id objc_msgSend_placeholderText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderText");
}

id objc_msgSend_play(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "play");
}

id objc_msgSend_playPauseButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playPauseButton");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_popAllCardsAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popAllCardsAnimated:completion:");
}

id objc_msgSend_popAllCardsAnimated_prefersCrossfade_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popAllCardsAnimated:prefersCrossfade:completion:");
}

id objc_msgSend_popCardsAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popCardsAnimated:");
}

id objc_msgSend_popToRootViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popToRootViewControllerAnimated:");
}

id objc_msgSend_popViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popViewControllerAnimated:");
}

id objc_msgSend_popoverPresentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popoverPresentationController");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_predicateMatchingPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingPredicates:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predicateWithValue_forProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithValue:forProperty:");
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_preferredNavigationBarTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredNavigationBarTintColor");
}

id objc_msgSend_preferredStatusBarStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredStatusBarStyle");
}

id objc_msgSend_prefersStatusBarBackgroundHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefersStatusBarBackgroundHidden");
}

id objc_msgSend_presentAlertWithStyle_title_message_actions_metricsData_useSortStyle_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAlertWithStyle:title:message:actions:metricsData:useSortStyle:options:");
}

id objc_msgSend_presentFeedsInCards_focusedIndex_animated_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentFeedsInCards:focusedIndex:animated:options:completion:");
}

id objc_msgSend_presentNoticeForAddingAssets_collectionTitle_collectionID_sourceViewController_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentNoticeForAddingAssets:collectionTitle:collectionID:sourceViewController:options:");
}

id objc_msgSend_presentShareSheetFromViewController_sourceView_sourceBarButtonItem_image_kind_year_title_sharingUrls_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentShareSheetFromViewController:sourceView:sourceBarButtonItem:image:kind:year:title:sharingUrls:completion:");
}

id objc_msgSend_presentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:");
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:animated:completion:");
}

id objc_msgSend_presentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationController");
}

id objc_msgSend_presentationLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationLayer");
}

id objc_msgSend_presentedView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedView");
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewController");
}

id objc_msgSend_presentingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentingViewController");
}

id objc_msgSend_presentingViewControllerSafeAreaInsetsDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentingViewControllerSafeAreaInsetsDidChange:");
}

id objc_msgSend_previousDayBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousDayBackgroundColor");
}

id objc_msgSend_previousDayBorderColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousDayBorderColor");
}

id objc_msgSend_previousDayTextColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousDayTextColor");
}

id objc_msgSend_priceFormatted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priceFormatted");
}

id objc_msgSend_priceString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priceString");
}

id objc_msgSend_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryAppleAccount");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priority");
}

id objc_msgSend_productURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productURL");
}

id objc_msgSend_profilePictureForAccountOwnerWithoutMonogramFallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profilePictureForAccountOwnerWithoutMonogramFallback");
}

id objc_msgSend_profilePictureForFamilyMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profilePictureForFamilyMember:");
}

id objc_msgSend_profilePictureStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profilePictureStore");
}

id objc_msgSend_profilesForStoreIDs_keyProfile_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profilesForStoreIDs:keyProfile:completion:");
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progress");
}

id objc_msgSend_progressArcLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressArcLayer");
}

id objc_msgSend_progressBarWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressBarWidth");
}

id objc_msgSend_progressColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressColor");
}

id objc_msgSend_progressProviderForKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressProviderForKind:");
}

id objc_msgSend_progressRingLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressRingLayer");
}

id objc_msgSend_progressToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressToday");
}

id objc_msgSend_progressView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressView");
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provider");
}

id objc_msgSend_purchaseAsset_parameters_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseAsset:parameters:completion:");
}

id objc_msgSend_purchaseEventFieldsWithPageId_pageType_pageContext_topic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseEventFieldsWithPageId:pageType:pageContext:topic:");
}

id objc_msgSend_purchaseIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseIDs");
}

id objc_msgSend_purchaseParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseParameters");
}

id objc_msgSend_purchaseResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseResponse");
}

id objc_msgSend_purchaseResponseItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseResponseItems");
}

id objc_msgSend_purchaseWithRequest_uiManager_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseWithRequest:uiManager:completion:");
}

id objc_msgSend_purchasedDidHide_withStoreID_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchasedDidHide:withStoreID:withCompletion:");
}

id objc_msgSend_pushCardsWithDataSource_focusedIndex_animated_fromViewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushCardsWithDataSource:focusedIndex:animated:fromViewController:completion:");
}

id objc_msgSend_pushLinkData_file_line_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushLinkData:file:line:");
}

id objc_msgSend_pushViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushViewController:animated:");
}

id objc_msgSend_q_evictCacheEntriesFromDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "q_evictCacheEntriesFromDatabase");
}

id objc_msgSend_q_itemDescriptionFromCachedItemDescription_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "q_itemDescriptionFromCachedItemDescription:moc:");
}

id objc_msgSend_q_populateCachedDescription_productProfile_expirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "q_populateCachedDescription:productProfile:expirationDate:");
}

id objc_msgSend_q_updateDatabaseWithNewProfiles_expirationDate_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "q_updateDatabaseWithNewProfiles:expirationDate:moc:");
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "query");
}

id objc_msgSend_queryWithUUID_uid_refId_refInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryWithUUID:uid:refId:refInstance:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_ratingCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ratingCount");
}

id objc_msgSend_rawComponentModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawComponentModel");
}

id objc_msgSend_rawNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawNotes");
}

id objc_msgSend_readingGoalSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingGoalSeconds");
}

id objc_msgSend_readingGoalShareURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingGoalShareURL");
}

id objc_msgSend_readingGoalsGaugeMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingGoalsGaugeMetrics");
}

id objc_msgSend_readingNowDetailManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingNowDetailManager");
}

id objc_msgSend_readingNowDetailsForAssetIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingNowDetailsForAssetIDs:completion:");
}

id objc_msgSend_readingProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingProgress");
}

id objc_msgSend_recordNativeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordNativeEvent:");
}

id objc_msgSend_redColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "redColor");
}

id objc_msgSend_refId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refId");
}

id objc_msgSend_refInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refInstance");
}

id objc_msgSend_referenceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceView");
}

id objc_msgSend_registerAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerAttributes");
}

id objc_msgSend_registerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:");
}

id objc_msgSend_registerClass_forCellWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellWithReuseIdentifier:");
}

id objc_msgSend_registerClass_forSubviewWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forSubviewWithReuseIdentifier:");
}

id objc_msgSend_registerCustomAttributeWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerCustomAttributeWithName:");
}

id objc_msgSend_registerElementClass_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerElementClass:withName:");
}

id objc_msgSend_registerFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerFeature:");
}

id objc_msgSend_registerFileProvider_forKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerFileProvider:forKind:");
}

id objc_msgSend_registerForTraitChanges_withAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTraitChanges:withAction:");
}

id objc_msgSend_registerHostedViewFactory_forType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerHostedViewFactory:forType:");
}

id objc_msgSend_registerImageFilters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerImageFilters:");
}

id objc_msgSend_registerImageSetFilters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerImageSetFilters:");
}

id objc_msgSend_registerNamedColorsWithTemplateManger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerNamedColorsWithTemplateManger:");
}

id objc_msgSend_registerPackage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerPackage:");
}

id objc_msgSend_registerProgressObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerProgressObserver:");
}

id objc_msgSend_registerRepresentationsFromAssetDragInfo_withProvider_canDragToNewCanvas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRepresentationsFromAssetDragInfo:withProvider:canDragToNewCanvas:");
}

id objc_msgSend_regular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regular");
}

id objc_msgSend_relativePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relativePath");
}

id objc_msgSend_removeCacheForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCacheForURL:");
}

id objc_msgSend_removeFromParentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromParentViewController");
}

id objc_msgSend_removeFromSuperlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromSuperlayer");
}

id objc_msgSend_removeFromSuperview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromSuperview");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_accountTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:accountTypes:");
}

id objc_msgSend_removeObserver_forTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forTrigger:");
}

id objc_msgSend_removeObserver_forTrigger_inStateManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forTrigger:inStateManager:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeObserver_placement_serviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:placement:serviceType:");
}

id objc_msgSend_removeProviderForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeProviderForIdentifier:");
}

id objc_msgSend_removeRenderOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRenderOverride:");
}

id objc_msgSend_removeRenderOverride_animated_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRenderOverride:animated:duration:");
}

id objc_msgSend_removeTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTarget:action:");
}

id objc_msgSend_renderModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderModel");
}

id objc_msgSend_renderModelSizeWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderModelSizeWithContext:");
}

id objc_msgSend_renderModelWithIdentifier_dynamicProgress_dynamicState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderModelWithIdentifier:dynamicProgress:dynamicState:");
}

id objc_msgSend_renderModelWithIdentifier_metrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderModelWithIdentifier:metrics:");
}

id objc_msgSend_renderModelWithIdentifier_rawComponentModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderModelWithIdentifier:rawComponentModel:");
}

id objc_msgSend_renderReferenceMatchingQuery_inFeedViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderReferenceMatchingQuery:inFeedViewController:");
}

id objc_msgSend_renderReferenceTransform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderReferenceTransform");
}

id objc_msgSend_renderReferencesMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderReferencesMatchingQuery:");
}

id objc_msgSend_renderSharableImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderSharableImage:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "request");
}

id objc_msgSend_requestCompleteDataForEntry_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCompleteDataForEntry:completion:");
}

id objc_msgSend_requestEntriesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestEntriesWithCompletion:");
}

id objc_msgSend_requestWithBuyParameters_storeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithBuyParameters:storeIdentifier:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_resolvedColorWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvedColorWithTraitCollection:");
}

id objc_msgSend_resourceInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceInstance");
}

id objc_msgSend_resourceKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceKind");
}

id objc_msgSend_resourceLoader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceLoader");
}

id objc_msgSend_resourceOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceOptions");
}

id objc_msgSend_resourceRegistry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceRegistry");
}

id objc_msgSend_resourcesLoadedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourcesLoadedDate");
}

id objc_msgSend_resourcesStartLoadingDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourcesStartLoadingDate");
}

id objc_msgSend_responseMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseMetrics");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_resumeAndRebuildWithTriggerStateManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeAndRebuildWithTriggerStateManager:");
}

id objc_msgSend_resumeRemovingFromMySamplesWithTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeRemovingFromMySamplesWithTracker:");
}

id objc_msgSend_resumeUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeUpdates");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_reviewBody(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reviewBody");
}

id objc_msgSend_reviewTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reviewTitle");
}

id objc_msgSend_rightToLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightToLeft");
}

id objc_msgSend_rootLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootLayer");
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "row");
}

id objc_msgSend_runningInExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runningInExtension");
}

id objc_msgSend_runningStreakFromPreviousWeek(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runningStreakFromPreviousWeek");
}

id objc_msgSend_safeAreaInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaInsets");
}

id objc_msgSend_safeAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaLayoutGuide");
}

id objc_msgSend_sampleDownloadURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleDownloadURL");
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save:");
}

id objc_msgSend_savedAnimatedReadingTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedAnimatedReadingTime");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_screen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screen");
}

id objc_msgSend_screenshotLoader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenshotLoader");
}

id objc_msgSend_screenshotLoader_failedToLoadImageforScreenshotAtIndex_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenshotLoader:failedToLoadImageforScreenshotAtIndex:withError:");
}

id objc_msgSend_screenshotLoader_loadedImage_forScreenshotAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenshotLoader:loadedImage:forScreenshotAtIndex:");
}

id objc_msgSend_screenshotLoader_willLoadImageAtIndex_fromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenshotLoader:willLoadImageAtIndex:fromURL:");
}

id objc_msgSend_screenshotURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenshotURLs");
}

id objc_msgSend_screenshots(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenshots");
}

id objc_msgSend_screenshotsCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenshotsCache");
}

id objc_msgSend_scrollToItemAtIndexPath_atScrollPosition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToItemAtIndexPath:atScrollPosition:animated:");
}

id objc_msgSend_scrollToItemsMatchingQuery_atScrollPosition_animated_skipVoiceOverFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToItemsMatchingQuery:atScrollPosition:animated:skipVoiceOverFocus:");
}

id objc_msgSend_scrollToRefId_refInstance_onEntry_animated_skipVoiceOverFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToRefId:refInstance:onEntry:animated:skipVoiceOverFocus:");
}

id objc_msgSend_scrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollView");
}

id objc_msgSend_searchController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchController");
}

id objc_msgSend_secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelColor");
}

id objc_msgSend_sectionInsetForRegularPad_maxSize_artworkSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionInsetForRegularPad:maxSize:artworkSize:");
}

id objc_msgSend_selected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selected");
}

id objc_msgSend_selectedIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedIndex");
}

id objc_msgSend_selectedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedViewController");
}

id objc_msgSend_separator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "separator");
}

id objc_msgSend_separatorLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "separatorLayer");
}

id objc_msgSend_seriesTypeForContentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seriesTypeForContentID:");
}

id objc_msgSend_serviceConformingToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceConformingToProtocol:");
}

id objc_msgSend_sessionAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionAssertion");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_set_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set:error:");
}

id objc_msgSend_setAbandoned_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAbandoned:");
}

id objc_msgSend_setAccessibilityElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityElements:");
}

id objc_msgSend_setAccessibilityElementsHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityElementsHidden:");
}

id objc_msgSend_setAccessibilityTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityTraits:");
}

id objc_msgSend_setAccessibilityViewIsModal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityViewIsModal:");
}

id objc_msgSend_setActionModels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionModels:");
}

id objc_msgSend_setActionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionString:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActualReadingTimeSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActualReadingTimeSeconds:");
}

id objc_msgSend_setAlertController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlertController:");
}

id objc_msgSend_setAlignmentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlignmentMode:");
}

id objc_msgSend_setAllowShrinkToFit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowShrinkToFit:");
}

id objc_msgSend_setAllowsTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsTitle:");
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlpha:");
}

id objc_msgSend_setAlreadyNotifiedBottomReached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlreadyNotifiedBottomReached:");
}

id objc_msgSend_setAlwaysBounceHorizontal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysBounceHorizontal:");
}

id objc_msgSend_setAmsEngagement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAmsEngagement:");
}

id objc_msgSend_setAnalyticsInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsInfo:");
}

id objc_msgSend_setAnchorPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnchorPoint:");
}

id objc_msgSend_setAnimations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimations:");
}

id objc_msgSend_setAppAnalyticsAdditionalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppAnalyticsAdditionalData:");
}

id objc_msgSend_setAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleID:");
}

id objc_msgSend_setArcWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArcWidth:");
}

id objc_msgSend_setArtworkAspect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArtworkAspect:");
}

id objc_msgSend_setArtworkURLTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArtworkURLTemplate:");
}

id objc_msgSend_setAssertionForSuspendingLayoutUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssertionForSuspendingLayoutUpdates:");
}

id objc_msgSend_setAssetDetail_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDetail:completion:");
}

id objc_msgSend_setAssetDetails_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDetails:completion:");
}

id objc_msgSend_setAssetDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDictionary:");
}

id objc_msgSend_setAssetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetID:");
}

id objc_msgSend_setAssetIsPreorderable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetIsPreorderable:");
}

id objc_msgSend_setAssetReview_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetReview:completion:");
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedText:");
}

id objc_msgSend_setAttributionView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributionView:");
}

id objc_msgSend_setAudiobook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudiobook:");
}

id objc_msgSend_setAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthor:");
}

id objc_msgSend_setAutoresizingMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizingMask:");
}

id objc_msgSend_setAverageRating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAverageRating:");
}

id objc_msgSend_setAwardImageLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAwardImageLayer:");
}

id objc_msgSend_setAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxis:");
}

id objc_msgSend_setBackButtonTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackButtonTitle:");
}

id objc_msgSend_setBackgroundArcLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundArcLayer:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarButtonItem:");
}

id objc_msgSend_setBarStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarStyle:");
}

id objc_msgSend_setBarTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarTintColor:");
}

id objc_msgSend_setBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaseURL:");
}

id objc_msgSend_setBeginTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTime:");
}

id objc_msgSend_setBorderColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderColor:");
}

id objc_msgSend_setBorderWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderWidth:");
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBounds:");
}

id objc_msgSend_setBuyParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuyParameters:");
}

id objc_msgSend_setBuyParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuyParams:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setByAddingObjectsFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObjectsFromSet:");
}

id objc_msgSend_setCardContentScrollManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCardContentScrollManager:");
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenter:");
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClipsToBounds:");
}

id objc_msgSend_setClockTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClockTicks:");
}

id objc_msgSend_setCoalescingDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoalescingDelay:");
}

id objc_msgSend_setCollectionMember_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionMember:completion:");
}

id objc_msgSend_setCollectionView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionView:");
}

id objc_msgSend_setColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColor:");
}

id objc_msgSend_setColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColors:");
}

id objc_msgSend_setCompletedTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletedTextColor:");
}

id objc_msgSend_setCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletion:");
}

id objc_msgSend_setCompletionWithItemsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionWithItemsHandler:");
}

id objc_msgSend_setComputedNaturalSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputedNaturalSize:");
}

id objc_msgSend_setComputedOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputedOrigin:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setConfirmLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfirmLabel:");
}

id objc_msgSend_setContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContent:");
}

id objc_msgSend_setContentInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInset:");
}

id objc_msgSend_setContentInsetAdjustmentBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInsetAdjustmentBehavior:");
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentMode:");
}

id objc_msgSend_setContentOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:");
}

id objc_msgSend_setContentScrollView_forEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentScrollView:forEdge:");
}

id objc_msgSend_setContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentType:");
}

id objc_msgSend_setContentUnavailableConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentUnavailableConfiguration:");
}

id objc_msgSend_setContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContents:");
}

id objc_msgSend_setContentsGravity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentsGravity:");
}

id objc_msgSend_setContentsScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentsScale:");
}

id objc_msgSend_setContextMenuConfigurationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextMenuConfigurationProvider:");
}

id objc_msgSend_setControlBackgroundLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlBackgroundLayer:");
}

id objc_msgSend_setControlColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlColor:");
}

id objc_msgSend_setControlRingLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlRingLayer:");
}

id objc_msgSend_setCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCornerRadius:");
}

id objc_msgSend_setCoverFilters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoverFilters:");
}

id objc_msgSend_setCoverURLStrings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoverURLStrings:");
}

id objc_msgSend_setCurrentDayShortString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDayShortString:");
}

id objc_msgSend_setCurrentLayers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLayers:");
}

id objc_msgSend_setCurrentPopOverViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPopOverViewController:");
}

id objc_msgSend_setCustomTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomTintColor:");
}

id objc_msgSend_setDailyReadingGoal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDailyReadingGoal:");
}

id objc_msgSend_setDailyReadingMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDailyReadingMetrics:");
}

id objc_msgSend_setDamping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDamping:");
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSource:");
}

id objc_msgSend_setDateOfLastDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateOfLastDay:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDayLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayLabel:");
}

id objc_msgSend_setDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDays:");
}

id objc_msgSend_setDebugName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugName:");
}

id objc_msgSend_setDecelerationRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDecelerationRate:");
}

id objc_msgSend_setDefinesPresentationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefinesPresentationContext:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeletedFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletedFlag:");
}

id objc_msgSend_setDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirection:");
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableActions:");
}

id objc_msgSend_setDisallowLoadingView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisallowLoadingView:");
}

id objc_msgSend_setDisplayContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayContext:");
}

id objc_msgSend_setDistribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistribution:");
}

id objc_msgSend_setDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownload:");
}

id objc_msgSend_setDragBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDragBackgroundColor:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDynamicAudiobookProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDynamicAudiobookProgress:");
}

id objc_msgSend_setDynamicRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDynamicRegistry:");
}

id objc_msgSend_setDynamicState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDynamicState:");
}

id objc_msgSend_setDynamicTimeLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDynamicTimeLayer:");
}

id objc_msgSend_setEditionKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditionKind:");
}

id objc_msgSend_setEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEffect:");
}

id objc_msgSend_setEffectiveAnalyticsTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEffectiveAnalyticsTracker:");
}

id objc_msgSend_setElementRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementRegistry:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEndPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndPoint:");
}

id objc_msgSend_setExcludedActivityTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExcludedActivityTypes:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setFailureResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailureResponse:");
}

id objc_msgSend_setFallbackColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackColor:");
}

id objc_msgSend_setFeedContentLoadingState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedContentLoadingState:");
}

id objc_msgSend_setFeedControllerHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedControllerHost:");
}

id objc_msgSend_setFeedDataRequestPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedDataRequestPriority:");
}

id objc_msgSend_setFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileSize:");
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFill");
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillColor:");
}

id objc_msgSend_setFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilter:");
}

id objc_msgSend_setFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinished:");
}

id objc_msgSend_setFirstName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstName:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setFont_useFontFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:useFontFallback:");
}

id objc_msgSend_setFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFontSize:");
}

id objc_msgSend_setFontSpec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFontSpec:");
}

id objc_msgSend_setForegroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundColor:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setFromValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromValue:");
}

id objc_msgSend_setFutureDayTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFutureDayTextColor:");
}

id objc_msgSend_setGoalCompletedAnimationRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGoalCompletedAnimationRequested:");
}

id objc_msgSend_setGroupingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupingType:");
}

id objc_msgSend_setHasRacSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasRacSupport:");
}

id objc_msgSend_setHasSpecifiedFinishedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasSpecifiedFinishedDate:");
}

id objc_msgSend_setHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeight:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHorizontalAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalAlignment:");
}

id objc_msgSend_setHorizontalSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalSizeClass:");
}

id objc_msgSend_setHostingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHostingViewController:");
}

id objc_msgSend_setIconImageAlwaysTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconImageAlwaysTemplate:");
}

id objc_msgSend_setIconImageView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconImageView:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImage_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:forState:");
}

id objc_msgSend_setInitialSelectedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialSelectedIndex:");
}

id objc_msgSend_setInitialVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialVelocity:");
}

id objc_msgSend_setInlineAnchorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInlineAnchorInfo:");
}

id objc_msgSend_setIntrinsicHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntrinsicHeight:");
}

id objc_msgSend_setIntrinsicWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntrinsicWidth:");
}

id objc_msgSend_setIsAnODPRecommendation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAnODPRecommendation:");
}

id objc_msgSend_setIsAudioBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAudioBook:");
}

id objc_msgSend_setIsAudiobook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAudiobook:");
}

id objc_msgSend_setIsContentReadyForRender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsContentReadyForRender:");
}

id objc_msgSend_setIsFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFinished:");
}

id objc_msgSend_setIsInCard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInCard:");
}

id objc_msgSend_setIsInSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInSamples:");
}

id objc_msgSend_setIsOnScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnScreen:");
}

id objc_msgSend_setIsPresented_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPresented:");
}

id objc_msgSend_setIsPurchased_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPurchased:");
}

id objc_msgSend_setIsRunningStreak_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsRunningStreak:");
}

id objc_msgSend_setIsSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSample:");
}

id objc_msgSend_setIsSupplementalContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSupplementalContent:");
}

id objc_msgSend_setIsUpdatingManualScrollEdgeAppearanceProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUpdatingManualScrollEdgeAppearanceProgress:");
}

id objc_msgSend_setItemHidden_forStoreID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemHidden:forStoreID:completion:");
}

id objc_msgSend_setItemIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemIdentifier:");
}

id objc_msgSend_setKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKind:");
}

id objc_msgSend_setLargeTitleDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLargeTitleDisplayMode:");
}

id objc_msgSend_setLargeTitleTextAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLargeTitleTextAttributes:");
}

id objc_msgSend_setLastAXValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAXValue:");
}

id objc_msgSend_setLastAccessDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAccessDate:");
}

id objc_msgSend_setLastGoals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastGoals:");
}

id objc_msgSend_setLastName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastName:");
}

id objc_msgSend_setLastTwoLineTitleFixHadSearchController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTwoLineTitleFixHadSearchController:");
}

id objc_msgSend_setLastTwoLineTitleFixed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTwoLineTitleFixed:");
}

id objc_msgSend_setLastVisibleProgressToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVisibleProgressToday:");
}

id objc_msgSend_setLastWorkingRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastWorkingRect:");
}

id objc_msgSend_setLayoutInfosToDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayoutInfosToDisplay:");
}

id objc_msgSend_setLayoutMargins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayoutMargins:");
}

id objc_msgSend_setLayoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayoutType:");
}

id objc_msgSend_setLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibrary:");
}

id objc_msgSend_setLineBreakMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineBreakMode:");
}

id objc_msgSend_setLineCap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineCap:");
}

id objc_msgSend_setLineWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineWidth:");
}

id objc_msgSend_setLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoad:");
}

id objc_msgSend_setLocalObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalObject:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocalizedDateFormatFromTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedDateFormatFromTemplate:");
}

id objc_msgSend_setMaskColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaskColor:");
}

id objc_msgSend_setMasksToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasksToBounds:");
}

id objc_msgSend_setMass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMass:");
}

id objc_msgSend_setMaxAspectRatio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxAspectRatio:");
}

id objc_msgSend_setMaxLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxLines:");
}

id objc_msgSend_setMessageLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageLabel:");
}

id objc_msgSend_setMessageViewControllerProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageViewControllerProvider:");
}

id objc_msgSend_setMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetrics:");
}

id objc_msgSend_setMicaPlayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMicaPlayer:");
}

id objc_msgSend_setMinimumInteritemSpacing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumInteritemSpacing:");
}

id objc_msgSend_setMinimumLineSpacing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumLineSpacing:");
}

id objc_msgSend_setModalPresentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalPresentationStyle:");
}

id objc_msgSend_setModalTransitionStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalTransitionStyle:");
}

id objc_msgSend_setModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModificationDate:");
}

id objc_msgSend_setMonogramType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonogramType:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setNavigationBarHidden_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationBarHidden:animated:");
}

id objc_msgSend_setNavigationBarStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationBarStyle:");
}

id objc_msgSend_setNavigationBarTintColorWhenLayoutReady_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationBarTintColorWhenLayoutReady:");
}

id objc_msgSend_setNeedsEnvironmentUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsEnvironmentUpdate");
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsLayout");
}

id objc_msgSend_setNeedsStatusBarAppearanceUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsStatusBarAppearanceUpdate");
}

id objc_msgSend_setNeedsUpdateContentUnavailableConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsUpdateContentUnavailableConfiguration");
}

id objc_msgSend_setNormalizedStarRating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNormalizedStarRating:");
}

id objc_msgSend_setNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfLines:");
}

id objc_msgSend_setODPAnalyticsWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setODPAnalyticsWithAttributes:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpacity:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOriginatingLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginatingLocation:");
}

id objc_msgSend_setOutgoingLayers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutgoingLayers:");
}

id objc_msgSend_setOverrideReadingTimeToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideReadingTimeToday:");
}

id objc_msgSend_setOverrideUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideUserInterfaceStyle:");
}

id objc_msgSend_setParentCardNavigationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentCardNavigationType:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPercentComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPercentComplete:");
}

id objc_msgSend_setPerformanceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerformanceIdentifier:");
}

id objc_msgSend_setPermittedArrowDirections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPermittedArrowDirections:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPersonID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonID:");
}

id objc_msgSend_setPictureDiameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPictureDiameter:");
}

id objc_msgSend_setPlaceholder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholder:");
}

id objc_msgSend_setPlaybackTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaybackTime:");
}

id objc_msgSend_setPlaying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaying:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPreferredContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredContentSize:");
}

id objc_msgSend_setPrefersLargeTitles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrefersLargeTitles:");
}

id objc_msgSend_setPresentationRefID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationRefID:");
}

id objc_msgSend_setPresentationRefInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationRefInstance:");
}

id objc_msgSend_setPresentationUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationUID:");
}

id objc_msgSend_setPreviousDayBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousDayBackgroundColor:");
}

id objc_msgSend_setPreviousDayBorderColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousDayBorderColor:");
}

id objc_msgSend_setPreviousDayTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousDayTextColor:");
}

id objc_msgSend_setPriceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriceString:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivacyLinkController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivacyLinkController:");
}

id objc_msgSend_setProductURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductURL:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressArcLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressArcLayer:");
}

id objc_msgSend_setProgressBarWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressBarWidth:");
}

id objc_msgSend_setProgressColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressColor:");
}

id objc_msgSend_setProgressRingLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressRingLayer:");
}

id objc_msgSend_setProgressSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressSeconds:");
}

id objc_msgSend_setProgressToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressToday:");
}

id objc_msgSend_setPurchaseFailedObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseFailedObserver:");
}

id objc_msgSend_setPurchaseResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseResponse:");
}

id objc_msgSend_setPurchaseSucceededObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseSucceededObserver:");
}

id objc_msgSend_setRasterizationScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRasterizationScale:");
}

id objc_msgSend_setRatingCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRatingCount:");
}

id objc_msgSend_setRawComponentModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawComponentModel:");
}

id objc_msgSend_setRawNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawNotes:");
}

id objc_msgSend_setReadingGoalSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingGoalSeconds:");
}

id objc_msgSend_setReadingGoalsGaugeMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingGoalsGaugeMetrics:");
}

id objc_msgSend_setReadingProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingProgress:");
}

id objc_msgSend_setReadingTime_animate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingTime:animate:");
}

id objc_msgSend_setReferenceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferenceView:");
}

id objc_msgSend_setReferrerApplicationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferrerApplicationName:");
}

id objc_msgSend_setReferrerURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferrerURLString:");
}

id objc_msgSend_setRemembersLastFocusedIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemembersLastFocusedIndexPath:");
}

id objc_msgSend_setResourceInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceInstance:");
}

id objc_msgSend_setResourceKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceKind:");
}

id objc_msgSend_setResourceLoader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceLoader:");
}

id objc_msgSend_setResourceOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceOptions:");
}

id objc_msgSend_setResourceRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceRegistry:");
}

id objc_msgSend_setReturnsObjectsAsFaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReturnsObjectsAsFaults:");
}

id objc_msgSend_setReviewBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReviewBody:");
}

id objc_msgSend_setReviewTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReviewTitle:");
}

id objc_msgSend_setRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItem:");
}

id objc_msgSend_setRunLoopForNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunLoopForNotifications:");
}

id objc_msgSend_setSampleDownloadURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSampleDownloadURL:");
}

id objc_msgSend_setSavedAnimatedReadingTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavedAnimatedReadingTime:");
}

id objc_msgSend_setScrollDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollDirection:");
}

id objc_msgSend_setScrollIndicatorInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollIndicatorInsets:");
}

id objc_msgSend_setSectionInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionInset:");
}

id objc_msgSend_setSelectedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedIndex:");
}

id objc_msgSend_setSeparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparator:");
}

id objc_msgSend_setSeparatorLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorLayer:");
}

id objc_msgSend_setSessionAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionAssertion:");
}

id objc_msgSend_setShouldAutomaticallyReportMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAutomaticallyReportMetrics:");
}

id objc_msgSend_setShouldReportFigaro_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldReportFigaro:");
}

id objc_msgSend_setShowsHorizontalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsHorizontalScrollIndicator:");
}

id objc_msgSend_setShowsVerticalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsVerticalScrollIndicator:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setSortOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortOrder:");
}

id objc_msgSend_setSourcePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourcePoint:");
}

id objc_msgSend_setSourceRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceRect:");
}

id objc_msgSend_setSourceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceView:");
}

id objc_msgSend_setSpacerHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpacerHeight:");
}

id objc_msgSend_setSpacerWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpacerWidth:");
}

id objc_msgSend_setStandardAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardAppearance:");
}

id objc_msgSend_setStartPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartPoint:");
}

id objc_msgSend_setStiffness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStiffness:");
}

id objc_msgSend_setStoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreID:");
}

id objc_msgSend_setStoreURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreURL:");
}

id objc_msgSend_setStreakFontSpec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreakFontSpec:");
}

id objc_msgSend_setStreamable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreamable:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setStroke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStroke");
}

id objc_msgSend_setStrokeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeColor:");
}

id objc_msgSend_setStrokeEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeEnd:");
}

id objc_msgSend_setStrokeStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeStart:");
}

id objc_msgSend_setStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyle:");
}

id objc_msgSend_setSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummary:");
}

id objc_msgSend_setSupportsSuggestionContextMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsSuggestionContextMenu:");
}

id objc_msgSend_setSupportsUnifiedProductPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsUnifiedProductPage:");
}

id objc_msgSend_setSuppressNetworkEvaluatorDialogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressNetworkEvaluatorDialogs:");
}

id objc_msgSend_setSuspendLayoutForScrolling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspendLayoutForScrolling:");
}

id objc_msgSend_setTaste_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaste:");
}

id objc_msgSend_setTasteSyncedToStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTasteSyncedToStore:");
}

id objc_msgSend_setTemplateBundleRegistrar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemplateBundleRegistrar:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextAlignment:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTimeFontSpec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeFontSpec:");
}

id objc_msgSend_setTimeSeparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeSeparator:");
}

id objc_msgSend_setTimingFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimingFunction:");
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTintColor:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitle_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:forState:");
}

id objc_msgSend_setTitleLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleLabel:");
}

id objc_msgSend_setTitleTextAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleTextAttributes:");
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToValue:");
}

id objc_msgSend_setTodayLayoutInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodayLayoutInfo:");
}

id objc_msgSend_setTodaySeparatorLayoutInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodaySeparatorLayoutInfo:");
}

id objc_msgSend_setTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracker:");
}

id objc_msgSend_setTrackerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackerName:");
}

id objc_msgSend_setTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransaction:");
}

id objc_msgSend_setTransactionCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionCategory:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_setTransformForSourceFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransformForSourceFrame:");
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:");
}

id objc_msgSend_setURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURLCache:");
}

id objc_msgSend_setUnderlineLinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlineLinks:");
}

id objc_msgSend_setUndoManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUndoManager:");
}

id objc_msgSend_setUpSellData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpSellData:");
}

id objc_msgSend_setUpdateAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateAvailable:");
}

id objc_msgSend_setUpdateEnvironmentOnViewLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateEnvironmentOnViewLoad:");
}

id objc_msgSend_setUrlString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrlString:");
}

id objc_msgSend_setUseFontFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseFontFallback:");
}

id objc_msgSend_setUseLargeLayoutMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseLargeLayoutMode:");
}

id objc_msgSend_setUseNarrowLayoutMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseNarrowLayoutMode:");
}

id objc_msgSend_setUserInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInteractionEnabled:");
}

id objc_msgSend_setVerticalSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticalSizeClass:");
}

id objc_msgSend_setViewControllers_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewControllers:animated:");
}

id objc_msgSend_setViewRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewRegistry:");
}

id objc_msgSend_setViewSizeWhenNotifiedBottomReached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewSizeWhenNotifiedBottomReached:");
}

id objc_msgSend_setVisibleProgressToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisibleProgressToday:");
}

id objc_msgSend_setWantToRead_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantToRead:");
}

id objc_msgSend_setWantsNumberOfLineFragments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsNumberOfLineFragments:");
}

id objc_msgSend_setWasPresentingCards_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasPresentingCards:");
}

id objc_msgSend_setWeeklyProgressMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeeklyProgressMetrics:");
}

id objc_msgSend_setWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidth:");
}

id objc_msgSend_setWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWindow:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYear:");
}

id objc_msgSend_setZPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZPosition:");
}

id objc_msgSend_settlingDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settlingDuration");
}

id objc_msgSend_setupAMSEngagementObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAMSEngagementObservers");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedClient");
}

id objc_msgSend_sharedCloudController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedCloudController");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedProvider");
}

id objc_msgSend_sharedReporter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedReporter");
}

id objc_msgSend_sharedSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedSession");
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortValue");
}

id objc_msgSend_shouldDismissAutomatically(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDismissAutomatically");
}

id objc_msgSend_shouldHideNavigationItemBackgroundDuringTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHideNavigationItemBackgroundDuringTransition:");
}

id objc_msgSend_shouldNotifyScrollViewReachedTheBottom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldNotifyScrollViewReachedTheBottom");
}

id objc_msgSend_shouldRasterize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRasterize");
}

id objc_msgSend_shouldShowTrailingSpacerLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowTrailingSpacerLine");
}

id objc_msgSend_show_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "show:options:");
}

id objc_msgSend_showProductPagesForStoreIDs_resourceTypes_focusedIndex_transaction_needsAnalyticsLinkData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showProductPagesForStoreIDs:resourceTypes:focusedIndex:transaction:needsAnalyticsLinkData:");
}

id objc_msgSend_showsVerticalScrollIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsVerticalScrollIndicator");
}

id objc_msgSend_signalWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalWithCompletion:");
}

id objc_msgSend_silhouetteMonogram(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "silhouetteMonogram");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeThatFits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeThatFits:");
}

id objc_msgSend_sizeWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeWithAttributes:");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_spacerHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spacerHeight");
}

id objc_msgSend_spacerWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spacerWidth");
}

id objc_msgSend_specifiedHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "specifiedHeight");
}

id objc_msgSend_specifiedWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "specifiedWidth");
}

id objc_msgSend_sq_fetchCachedItemDescriptionsForIdentifiers_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sq_fetchCachedItemDescriptionsForIdentifiers:moc:");
}

id objc_msgSend_sq_fetchItemDescriptionsForIdentifiers_moc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sq_fetchItemDescriptionsForIdentifiers:moc:");
}

id objc_msgSend_sq_queueCacheRequestForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sq_queueCacheRequestForIdentifier:");
}

id objc_msgSend_standardAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardAppearance");
}

id objc_msgSend_standardDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardDescription");
}

id objc_msgSend_standardNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardNotes");
}

id objc_msgSend_standardizedURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardizedURL");
}

id objc_msgSend_startLoading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLoading");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stateProviderForKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateProviderForKind:");
}

id objc_msgSend_statusBarBackgroundController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusBarBackgroundController");
}

id objc_msgSend_storeID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeID");
}

id objc_msgSend_storeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeIdentifier");
}

id objc_msgSend_storePlaylistID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storePlaylistID");
}

id objc_msgSend_streakFontSpec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streakFontSpec");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringArrayForAttribute_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringArrayForAttribute:node:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTruncatingToLength_options_truncationString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTruncatingToLength:options:truncationString:");
}

id objc_msgSend_stringForAttribute_node_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForAttribute:node:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stroke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stroke");
}

id objc_msgSend_strokeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strokeColor");
}

id objc_msgSend_strongObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongObservers");
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongToWeakObjectsMapTable");
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "style");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_submodel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submodel");
}

id objc_msgSend_superlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superlayer");
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superview");
}

id objc_msgSend_supplementalContentCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supplementalContentCount");
}

id objc_msgSend_supportedAttributesSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedAttributesSize");
}

id objc_msgSend_supportedAttributesSizeAndIntrinsic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedAttributesSizeAndIntrinsic");
}

id objc_msgSend_supportedAttributesTextStyling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedAttributesTextStyling");
}

id objc_msgSend_supportedInterfaceOrientations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedInterfaceOrientations");
}

id objc_msgSend_supportedInterfaceOrientationsForSelf(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedInterfaceOrientationsForSelf");
}

id objc_msgSend_supportsUnifiedProductPage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsUnifiedProductPage");
}

id objc_msgSend_supportsUnifiedProductPageKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsUnifiedProductPageKey");
}

id objc_msgSend_suspendAndTeardown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendAndTeardown");
}

id objc_msgSend_suspendLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendLayout");
}

id objc_msgSend_suspendUpdatesUntilContentExceedsHeightWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendUpdatesUntilContentExceedsHeightWithCompletion:");
}

id objc_msgSend_syncTastes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncTastes");
}

id objc_msgSend_syncTastesCallBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncTastesCallBlock");
}

id objc_msgSend_synchronouslyUpdateContent_environment_andWaitForEntry_timeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronouslyUpdateContent:environment:andWaitForEntry:timeout:completion:");
}

id objc_msgSend_systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBackgroundColor");
}

id objc_msgSend_systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:");
}

id objc_msgSend_tabBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tabBar");
}

id objc_msgSend_tabBarController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tabBarController");
}

id objc_msgSend_targetTriggerState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetTriggerState");
}

id objc_msgSend_taste(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taste");
}

id objc_msgSend_tastesUploadedToStore_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tastesUploadedToStore:completion:");
}

id objc_msgSend_tearDownWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownWithCompletion:");
}

id objc_msgSend_templateImageFilters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "templateImageFilters");
}

id objc_msgSend_templateImageSetFilters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "templateImageSetFilters");
}

id objc_msgSend_templateURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "templateURL");
}

id objc_msgSend_testSubfolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testSubfolder");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textColor");
}

id objc_msgSend_textFields(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textFields");
}

id objc_msgSend_textModelBuilderWithFontSpec_style_color_alignment_writingDirection_language_shouldHyphenate_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textModelBuilderWithFontSpec:style:color:alignment:writingDirection:language:shouldHyphenate:service:");
}

id objc_msgSend_timeDisplayedText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeDisplayedText");
}

id objc_msgSend_timeFontSpec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeFontSpec");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeSeparator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeSeparator");
}

id objc_msgSend_timingAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timingAtIndex:");
}

id objc_msgSend_tintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tintColor");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_titleFontSpec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleFontSpec");
}

id objc_msgSend_titleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabel");
}

id objc_msgSend_titleTopMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleTopMargin");
}

id objc_msgSend_toArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toArray");
}

id objc_msgSend_toBool(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toBool");
}

id objc_msgSend_toDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toDictionary");
}

id objc_msgSend_toNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toNumber");
}

id objc_msgSend_toString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toString");
}

id objc_msgSend_todaySeparatorLayoutInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todaySeparatorLayoutInfo");
}

id objc_msgSend_togglePlayPause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "togglePlayPause:");
}

id objc_msgSend_toolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toolbar");
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topAnchor");
}

id objc_msgSend_topCardSetViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topCardSetViewController");
}

id objc_msgSend_topContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topContentInset");
}

id objc_msgSend_topContentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topContentViewController");
}

id objc_msgSend_topMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topMargin");
}

id objc_msgSend_topViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topViewController");
}

id objc_msgSend_tracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tracker");
}

id objc_msgSend_trackerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackerName");
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAnchor");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_traitCollectionByModifyingTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionByModifyingTraits:");
}

id objc_msgSend_transformForSourceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformForSourceFrame");
}

id objc_msgSend_transitionCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionCoordinator");
}

id objc_msgSend_triggerDelay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerDelay");
}

id objc_msgSend_triggerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerName");
}

id objc_msgSend_triggerStateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerStateFromString:");
}

id objc_msgSend_triggerStateManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerStateManager");
}

id objc_msgSend_tui_effectiveSyncLayoutController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tui_effectiveSyncLayoutController");
}

id objc_msgSend_tui_identifierByAppendingIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tui_identifierByAppendingIndex:");
}

id objc_msgSend_tui_imageMaskWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tui_imageMaskWithColor:");
}

id objc_msgSend_tui_imageNamed_inBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tui_imageNamed:inBundle:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_uid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uid");
}

id objc_msgSend_underlyingURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingURL");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueId");
}

id objc_msgSend_unregisterPackage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterPackage:");
}

id objc_msgSend_unregisterProgressObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterProgressObserver:");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_upSellData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upSellData");
}

id objc_msgSend_updateArray_batchUpdatesBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateArray:batchUpdatesBlock:");
}

id objc_msgSend_updateInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInterest:");
}

id objc_msgSend_updateItemAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateItemAtIndex:");
}

id objc_msgSend_updateItemWithIdentifier_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateItemWithIdentifier:state:");
}

id objc_msgSend_updateJaliscoMediaLibraryWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateJaliscoMediaLibraryWithReason:completionHandler:");
}

id objc_msgSend_updateLayoutMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLayoutMetrics");
}

id objc_msgSend_updateModelChildren_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateModelChildren:");
}

id objc_msgSend_updatePolitely_reason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePolitely:reason:completion:");
}

id objc_msgSend_updateProgress_animate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProgress:animate:");
}

id objc_msgSend_updateRating_title_body_itemId_shouldSuppressMetrics_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRating:title:body:itemId:shouldSuppressMetrics:completion:");
}

id objc_msgSend_updateStateToPurchaseFailedForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStateToPurchaseFailedForIdentifier:");
}

id objc_msgSend_updateStateToPurchasingForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStateToPurchasingForIdentifier:");
}

id objc_msgSend_updateTopFeedLiveResizeOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTopFeedLiveResizeOptions");
}

id objc_msgSend_updateType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateType");
}

id objc_msgSend_updateUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUI");
}

id objc_msgSend_updateVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVisibility");
}

id objc_msgSend_updateWithConfiguration_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithConfiguration:context:");
}

id objc_msgSend_updateWithProfiles_expirationDate_requestedIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithProfiles:expirationDate:requestedIdentifiers:");
}

id objc_msgSend_updateWithRawComponentModel_size_feedControllerHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithRawComponentModel:size:feedControllerHost:");
}

id objc_msgSend_updateWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithValue:");
}

id objc_msgSend_updateWithValueIfChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithValueIfChanged:");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "url");
}

id objc_msgSend_urlString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlString");
}

id objc_msgSend_useDarkStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useDarkStyle");
}

id objc_msgSend_useFontFallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useFontFallback");
}

id objc_msgSend_useLargeLayoutMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useLargeLayoutMode");
}

id objc_msgSend_useNarrowLayoutMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useNarrowLayoutMode");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_userInterfaceStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceStyle");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "username");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuid");
}

id objc_msgSend_validateLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateLayout");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueAtIndex:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valueForQueryParameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForQueryParameter:");
}

id objc_msgSend_valueWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithBlock:");
}

id objc_msgSend_valueWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCompletion:");
}

id objc_msgSend_valueWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithValue:");
}

id objc_msgSend_variant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variant");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "version");
}

id objc_msgSend_verticalSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalSizeClass");
}

id objc_msgSend_videoPlayerManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "videoPlayerManager");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewController");
}

id objc_msgSend_viewController_didDisplayMessageWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewController:didDisplayMessageWithId:");
}

id objc_msgSend_viewControllerIfAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerIfAvailable");
}

id objc_msgSend_viewControllerWhenAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerWhenAvailable:");
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllers");
}

id objc_msgSend_viewIfLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewIfLoaded");
}

id objc_msgSend_viewRegistry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewRegistry");
}

id objc_msgSend_viewSizeWhenNotifiedBottomReached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewSizeWhenNotifiedBottomReached");
}

id objc_msgSend_viewState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewState");
}

id objc_msgSend_viewWillAppearDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewWillAppearDate");
}

id objc_msgSend_visibleCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCells");
}

id objc_msgSend_visibleProgressToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleProgressToday");
}

id objc_msgSend_visibleViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleViewController");
}

id objc_msgSend_waitForVisibleImageResourcesToLoadAssertionWithTimeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForVisibleImageResourcesToLoadAssertionWithTimeout:completion:");
}

id objc_msgSend_wantToRead(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wantToRead");
}

id objc_msgSend_wasPresentingCards(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasPresentingCards");
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakObjectsHashTable");
}

id objc_msgSend_weakObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakObservers");
}

id objc_msgSend_weeklyProgressMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weeklyProgressMetrics");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "width");
}

id objc_msgSend_widthAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthAnchor");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey:");
}

id objc_msgSend_willMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willMoveToParentViewController:");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "window");
}

id objc_msgSend_windowFromOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowFromOptions:");
}

id objc_msgSend_windowManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowManager");
}

id objc_msgSend_windowScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowScene");
}

id objc_msgSend_wipeAnimationInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeAnimationInProgress");
}

id objc_msgSend_workingRect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workingRect");
}

id objc_msgSend_wrapperView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperView");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}
