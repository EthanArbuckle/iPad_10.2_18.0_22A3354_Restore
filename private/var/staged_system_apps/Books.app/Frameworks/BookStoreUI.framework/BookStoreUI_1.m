uint64_t type metadata accessor for FinishedSeriesHighlight(uint64_t a1)
{
  return sub_64960(a1, qword_322B18, (uint64_t)&nominal type descriptor for FinishedSeriesHighlight);
}

BOOL sub_C0FE4(uint64_t a1)
{
  uint64_t v1;

  return sub_BD22C(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(void))&BookInfo.pageCount.getter);
}

uint64_t type metadata accessor for LongestAudiobookHighlight(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3229E8, (uint64_t)&nominal type descriptor for LongestAudiobookHighlight);
}

BOOL sub_C101C(uint64_t a1)
{
  uint64_t v1;

  return sub_BD22C(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(void))&AudiobookInfo.duration.getter);
}

uint64_t sub_C1040(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_667D0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_C1080(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_C1148(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for AudiobookInfo, &qword_322970);
}

uint64_t sub_C1094(uint64_t a1, uint64_t a2)
{
  return sub_C1244(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for AudiobookInfo);
}

uint64_t sub_C10A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C12C4(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for AudiobookInfo, &qword_322970);
}

uint64_t sub_C10B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_C139C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for AudiobookInfo, &qword_322970);
}

uint64_t sub_C10C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C14C0(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for AudiobookInfo, &qword_322970);
}

uint64_t sub_C10DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C1598(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for AudiobookInfo, &qword_322970);
}

uint64_t sub_C10F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C10FC);
}

uint64_t sub_C10FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C16C0(a1, a2, a3, &qword_322970);
}

uint64_t sub_C1108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C1114);
}

uint64_t sub_C1114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_C1718(a1, a2, a3, a4, &qword_322970);
}

void sub_C1120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_C1784(a1, a2, a3, (unint64_t *)&unk_3229F8, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookInfo);
}

_QWORD *sub_C1134(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_C1148(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for BookInfo, &qword_322950);
}

_QWORD *sub_C1148(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (_QWORD *)a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v14 = *a2;
    *v5 = *a2;
    v5 = (_QWORD *)(v14 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v14);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = *(int *)(a3 + 20);
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = a4(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_5C154(a5);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return v5;
}

uint64_t sub_C1238(uint64_t a1, uint64_t a2)
{
  return sub_C1244(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for BookInfo);
}

uint64_t sub_C1244(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1 + *(int *)(a2 + 20);
  v4 = a3(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return result;
}

uint64_t sub_C12B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C12C4(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for BookInfo, &qword_322950);
}

uint64_t sub_C12C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = a4(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_5C154(a5);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_C1388(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_C139C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for BookInfo, &qword_322950);
}

uint64_t sub_C139C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v7 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = a4(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_5C154(a5);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_C14AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C14C0(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for BookInfo, &qword_322950);
}

uint64_t sub_C14C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = a4(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_5C154(a5);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_C1584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C1598(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for BookInfo, &qword_322950);
}

uint64_t sub_C1598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = a4(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_5C154(a5);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_C16A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C16B4);
}

uint64_t sub_C16B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_C16C0(a1, a2, a3, &qword_322950);
}

uint64_t sub_C16C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a3 + 20);
  v6 = sub_5C154(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, a2, v6);
}

uint64_t sub_C1700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C170C);
}

uint64_t sub_C170C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_C1718(a1, a2, a3, a4, &qword_322950);
}

uint64_t sub_C1718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a1 + *(int *)(a4 + 20);
  v7 = sub_5C154(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, a2, a2, v7);
}

uint64_t type metadata accessor for LongestBookHighlight(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_322A80, (uint64_t)&nominal type descriptor for LongestBookHighlight);
}

void sub_C1770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_C1784(a1, a2, a3, (unint64_t *)&unk_322A90, (uint64_t (*)(uint64_t))&type metadata accessor for BookInfo);
}

void sub_C1784(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  v8[0] = "\t";
  sub_C1800(319, a4, a5);
  if (v7 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v6 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v8, a1 + 16);
  }
}

void sub_C1800(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

_QWORD *sub_C184C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return v4;
}

uint64_t sub_C18F4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_C1938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

_QWORD *sub_C19AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  sub_65938(a1, a2);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_C1A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_C1A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_C1AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C1AEC);
}

uint64_t sub_C1AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_C1B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C1B74);
}

uint64_t sub_C1B74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_C1BE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_C1C5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for GenreInfo(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v7;
}

uint64_t sub_C1D30(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for GenreInfo(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t *sub_C1DA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for GenreInfo(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_C1E50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for GenreInfo(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_QWORD *sub_C1EF8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for GenreInfo(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t *sub_C1F90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for GenreInfo(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_C2030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C203C);
}

uint64_t sub_C203C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for GenreInfo(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_C20DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C20E8);
}

char *sub_C20E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for GenreInfo(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_C2184(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for GenreInfo(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_C2218(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for AssetArtistInfo(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v10);
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_C22DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for AssetArtistInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_C2344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for AssetArtistInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = a1 + v8;
  v11 = a2 + v8;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v9);
  v13(v10, v11, v12);
  return a1;
}

uint64_t sub_C23DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for AssetArtistInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_C2474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for AssetArtistInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_C24F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for AssetArtistInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_C2588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C2594);
}

uint64_t sub_C2594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for AssetArtistInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_C263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C2648);
}

uint64_t sub_C2648(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for AssetArtistInfo(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_C26EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for AssetArtistInfo(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void ConvertRectFromGlobalHandler.callAsFunction(rect:)(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  void *Strong;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE v19[24];

  v9 = *v4 + 24;
  swift_beginAccess(v9, v19, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    v12 = objc_msgSend(Strong, "view");
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, "convertRect:fromView:", 0, a1, a2, a3, a4);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_31E588 != -1)
      swift_once(&qword_31E588, sub_1266C0);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_5240C(v14, (uint64_t)qword_325040);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "Failed to convert given frame to the one relative to the page's coordinate system becasue HostingViewController is nil.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
}

ValueMetadata *type metadata accessor for ConvertRectFromGlobalHandler()
{
  return &type metadata for ConvertRectFromGlobalHandler;
}

uint64_t sub_C291C(uint64_t a1)
{
  uint64_t v1;

  return sub_8B3E0(a1, v1, (uint64_t *)&unk_326210);
}

uint64_t sub_C293C()
{
  return ListItemViewModel.assetID.getter();
}

uint64_t sub_C2960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  ListItemViewModel.assetInfo.getter(v5);
  v0 = v6;
  v1 = v7;
  sub_66898(v5, v6);
  v4[0] = ContentInfo.id.getter(v0, *(_QWORD *)(v1 + 8));
  v4[1] = v2;
  AnyHashable.init<A>(_:)(v4, &type metadata for String, &protocol witness table for String);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v5);
}

uint64_t sub_C29E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[40];

  sub_5E1A4(v1, (uint64_t)v4, &qword_320B70);
  return sub_66F14((uint64_t)v4, a1, (uint64_t *)&unk_326210);
}

uint64_t sub_C2A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 24), a2, &qword_322C80);
}

uint64_t sub_C2A5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_648E0(&qword_322DF8, type metadata accessor for RecommendationItemComponentModel, (uint64_t)&unk_25CA48);
  return LibraryAssetStateRequiring.assetIDsToObserveState.getter(a1, v2);
}

uint64_t sub_C2A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(v2 + *(int *)(a1 + 20), (uint64_t)v7, &qword_321EA8);
  return sub_66F14((uint64_t)v7, a2, &qword_31F480);
}

uint64_t sub_C2B34(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1967CC(*a1, *a2);
}

Swift::Int sub_C2B40()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x6D65744964656573;
  if (v1 != 1)
  {
    v3 = 0x6575676573;
    v2 = 0xE500000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x656372756F736572;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_C2BDC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x6D65744964656573;
  if (*v1 != 1)
  {
    v3 = 0x6575676573;
    v2 = 0xE500000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x656372756F736572;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_C2C54(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x6D65744964656573;
  if (v2 != 1)
  {
    v4 = 0x6575676573;
    v3 = 0xE500000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x656372756F736572;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_C2CEC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_2E6658;
  result = sub_C5A0C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_C2D20(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6D65744964656573;
  if (v2 != 1)
  {
    v5 = 0x6575676573;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656372756F736572;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_C2D7C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6D65744964656573;
  if (*v0 != 1)
    v1 = 0x6575676573;
  if (*v0)
    return v1;
  else
    return 0x656372756F736572;
}

unint64_t sub_C2DD4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_2E6658;
  result = sub_C5A0C(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_C2E00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C3928();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C2E28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C3928();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_C2E50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  void (*v75)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v80 = a2;
  v3 = type metadata accessor for MediaArtwork(0);
  __chkstk_darwin(v3);
  v78 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_322C80);
  __chkstk_darwin(v5);
  v79 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_322C88);
  __chkstk_darwin(v7);
  v81 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_322C90);
  __chkstk_darwin(v9);
  v77 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_322C98);
  v82 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v83 = (id *)((char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_5C154(&qword_322CA0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (id *)((char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for RecommendationItemComponentModel(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v95 = 0;
  v93 = 0u;
  v94 = 0u;
  v92 = 0;
  v91 = 0u;
  v90 = 0u;
  sub_8B354((uint64_t)&v93, (uint64_t)&v90);
  v20 = v91;
  *(_OWORD *)v19 = v90;
  *((_OWORD *)v19 + 1) = v20;
  *((_QWORD *)v19 + 4) = v92;
  sub_5E09C((uint64_t)&v93, (uint64_t *)&unk_326210);
  v21 = &v19[*(int *)(v17 + 20)];
  v22 = type metadata accessor for ImpressionMetrics(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v84 = (uint64_t)v21;
  v23(v21, 1, 1, v22);
  v86 = v17;
  v24 = *(int *)(v17 + 24);
  v88 = v19;
  v25 = &v19[v24];
  v26 = type metadata accessor for Models.Menu(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v87 = (uint64_t)v25;
  v27(v25, 1, 1, v26);
  v28 = a1[3];
  v29 = a1[4];
  v85 = a1;
  sub_66898(a1, v28);
  v30 = sub_C3928();
  v31 = v99;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationItemComponentModel.CodingKeys, &type metadata for RecommendationItemComponentModel.CodingKeys, v30, v28, v29);
  if (v31)
  {
    v35 = v85;
    v36 = v87;
    v37 = v84;
    v38 = (uint64_t)v88;
LABEL_4:
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
    sub_5E09C(v38, &qword_320B70);
    sub_5E09C(v37, &qword_321EA8);
    return sub_5E09C(v36, &qword_322C80);
  }
  v32 = v82;
  v75 = v27;
  v99 = v26;
  v76 = v14;
  LOBYTE(v93) = 0;
  v33 = sub_C396C();
  v34 = v83;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v83, v11, &v93, v13, v11, v33);
  v40 = (void *)MResourceDecoder.wrappedValue.getter(v11);
  v41.n128_f64[0] = (*(double (**)(_QWORD *, uint64_t))(v32 + 8))(v34, v11);
  static ContentInfoUtilities.assetInfo(storeAsset:)(&v93, v40, v41);
  v38 = (uint64_t)v88;
  if (!*((_QWORD *)&v94 + 1))
  {
    sub_5E09C((uint64_t)&v93, &qword_320940);
    v45 = type metadata accessor for DecodingError(0);
    swift_allocError(v45, &protocol witness table for DecodingError, 0, 0);
    v47 = v46;
    v48 = KeyedDecodingContainer.codingPath.getter(v13);
    v49 = type metadata accessor for ListItemDecodingError(0);
    v74 = v40;
    v50 = v49;
    v51 = sub_648E0(&qword_322CC0, (uint64_t (*)(uint64_t))&type metadata accessor for ListItemDecodingError, (uint64_t)&protocol conformance descriptor for ListItemDecodingError);
    v52 = swift_allocError(v50, v51, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v53, enum case for ListItemDecodingError.invalidMAPIResource(_:), v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v48, 0xD00000000000001ALL, 0x8000000000270790, v52);
    v54 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v47, enum case for DecodingError.dataCorrupted(_:), v45);
    swift_willThrow(v54);

    (*(void (**)(_QWORD *, uint64_t))(v76 + 8))(v16, v13);
    v35 = v85;
    v36 = v87;
    v37 = v84;
    goto LABEL_4;
  }
  sub_5DC98(&v93, (uint64_t)&v98);
  v42 = v86;
  static ListItemViewModel.recommendationsPage(sectionName:assetInfo:)(1701667150, 0xE400000000000000, &v98);
  v43 = sub_5C154(&qword_322CC8);
  v89 = 1;
  v44 = sub_C39DC(&qword_322CD0, &qword_322CC8, (void (*)(void))sub_C39B8, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v43, &v89, v13, v43, v44);
  v83 = v16;
  v55 = v87;
  if (*((_QWORD *)&v90 + 1) == 1)
  {
    sub_5E09C((uint64_t)&v90, &qword_322CE8);
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0;
  }
  else
  {
    sub_5E1A4((uint64_t)&v90, (uint64_t)&v93, &qword_322CB0);
    sub_5E09C((uint64_t)&v90, &qword_322CC8);
  }
  sub_5E1A4((uint64_t)&v93, v38 + *(int *)(v42 + 32), &qword_322CB0);
  v56 = sub_5C154(&qword_322CF0);
  v89 = 2;
  v57 = sub_C39DC(&qword_322CF8, &qword_322CF0, (void (*)(void))sub_C3A84, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
  v58 = (uint64_t)v81;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v56, &v89, v13, v56, v57);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v58, 1, v56);
  v74 = v40;
  if (v59 == 1)
  {
    sub_5E09C(v58, &qword_322C88);
    v60 = v76;
  }
  else
  {
    v61 = v77;
    sub_5E1A4(v58, v77, &qword_322C90);
    sub_5E09C(v58, &qword_322CF0);
    v62 = type metadata accessor for CodeAnyActionModel(0);
    v63 = *(_QWORD *)(v62 - 8);
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62);
    v60 = v76;
    if ((_DWORD)v64 != 1)
    {
      CodeAnyActionModel.wrappedValue.getter(v64);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
      goto LABEL_17;
    }
    sub_5E09C(v61, &qword_322C90);
  }
  v92 = 0;
  v91 = 0u;
  v90 = 0u;
LABEL_17:
  sub_8B3E0((uint64_t)&v90, v38, (uint64_t *)&unk_326210);
  v65 = sub_5C154(&qword_322D08);
  v66 = *(_QWORD *)(type metadata accessor for Models.Menu.Child(0) - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = (v67 + 32) & ~v67;
  v69 = swift_allocObject(v65, v68 + *(_QWORD *)(v66 + 72), v67 | 7);
  *(_OWORD *)(v69 + 16) = xmmword_258070;
  v70 = (_QWORD *)(v69 + v68);
  *v70 = 0xD000000000000037;
  v70[1] = 0x80000000002707E0;
  v71 = (*(uint64_t (**)(void))(v66 + 104))();
  v72 = v78;
  MediaArtwork.init()(v71);
  v73 = (uint64_t)v79;
  Models.Menu.init(id:title:icon:children:)(0xD00000000000002FLL, 0x80000000002707B0, 0x20747865746E6F43, 0xEC000000756E654DLL, v72, v69);

  sub_5E09C((uint64_t)&v93, &qword_322CB0);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v98);
  (*(void (**)(_QWORD *, uint64_t))(v60 + 8))(v83, v13);
  v75((char *)v73, 0, 1, v99);
  sub_8B3E0(v73, v55, &qword_322C80);
  sub_C3B00(v38, v80);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v85);
  return sub_C3B44(v38);
}

uint64_t sub_C38B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_C2E50(a1, a2);
}

uint64_t sub_C38C8()
{
  return ListItemViewModel.cardInfo.getter();
}

uint64_t type metadata accessor for RecommendationItemComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_322D68;
  if (!qword_322D68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RecommendationItemComponentModel);
  return result;
}

unint64_t sub_C3928()
{
  unint64_t result;

  result = qword_322CA8;
  if (!qword_322CA8)
  {
    result = swift_getWitnessTable(&unk_25CBC8, &type metadata for RecommendationItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322CA8);
  }
  return result;
}

unint64_t sub_C396C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322CB8;
  if (!qword_322CB8)
  {
    v1 = sub_667D0(&qword_322C98);
    result = swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>, v1);
    atomic_store(result, (unint64_t *)&qword_322CB8);
  }
  return result;
}

uint64_t sub_C39B8()
{
  return sub_C39DC(&qword_322CD8, &qword_322CB0, (void (*)(void))sub_C3A40, (uint64_t)&protocol conformance descriptor for <A> A?);
}

uint64_t sub_C39DC(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_667D0(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_C3A40()
{
  unint64_t result;

  result = qword_322CE0;
  if (!qword_322CE0)
  {
    result = swift_getWitnessTable(&unk_25CBA0, &type metadata for RecommendationSeedItem);
    atomic_store(result, (unint64_t *)&qword_322CE0);
  }
  return result;
}

unint64_t sub_C3A84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322D00;
  if (!qword_322D00)
  {
    v1 = sub_667D0(&qword_322C90);
    sub_648E0((unint64_t *)&qword_320668, (uint64_t (*)(uint64_t))&type metadata accessor for CodeAnyActionModel, (uint64_t)&protocol conformance descriptor for CodeAnyActionModel);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_322D00);
  }
  return result;
}

uint64_t sub_C3B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecommendationItemComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_C3B44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RecommendationItemComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for RecommendationSeedItem(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 4);
}

uint64_t initializeWithCopy for RecommendationSeedItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2 + 32;
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v8(a1 + 32, v5, v7);
  return a1;
}

_QWORD *assignWithCopy for RecommendationSeedItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_65938(a1 + 4, a2 + 4);
  return a1;
}

__n128 initializeWithTake for RecommendationSeedItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for RecommendationSeedItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 32));
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommendationSeedItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendationSeedItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendationSeedItem()
{
  return &type metadata for RecommendationSeedItem;
}

ValueMetadata *type metadata accessor for RecommendationItemComponentModel.CodingKeys()
{
  return &type metadata for RecommendationItemComponentModel.CodingKeys;
}

uint64_t *sub_C3DE0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, __n128);
  __n128 v37;
  __int128 v38;
  __int128 v39;

  v4 = (uint64_t *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = a2[3];
    if (v7)
    {
      v8 = a2[4];
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    }
    else
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    v11 = a3[5];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ImpressionMetrics(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_5C154(&qword_31F480);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = a3[6];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Models.Menu(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_5C154(&qword_322C80);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = a3[7];
    v24 = (char *)v4 + v23;
    v25 = (uint64_t)a2 + v23;
    v26 = type metadata accessor for ListItemViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
    v27 = a3[8];
    v28 = (char *)v4 + v27;
    v29 = (uint64_t)a2 + v27;
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = v30;
      v31 = *(_QWORD *)(v29 + 24);
      *((_QWORD *)v28 + 2) = *(_QWORD *)(v29 + 16);
      *((_QWORD *)v28 + 3) = v31;
      v32 = v28 + 32;
      v33 = v29 + 32;
      v34 = *(_OWORD *)(v29 + 56);
      *(_OWORD *)(v28 + 56) = v34;
      v35 = v34;
      v36 = **(void (***)(char *, uint64_t, uint64_t, __n128))(v34 - 8);
      swift_bridgeObjectRetain(v30);
      v37 = swift_bridgeObjectRetain(v31);
      v36(v32, v33, v35, v37);
    }
    else
    {
      v38 = *(_OWORD *)(v29 + 48);
      *((_OWORD *)v28 + 2) = *(_OWORD *)(v29 + 32);
      *((_OWORD *)v28 + 3) = v38;
      *((_QWORD *)v28 + 8) = *(_QWORD *)(v29 + 64);
      v39 = *(_OWORD *)(v29 + 16);
      *(_OWORD *)v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v39;
    }
  }
  return v4;
}

uint64_t sub_C4030(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;

  if (a1[3])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (char *)a1 + a2[6];
  v8 = type metadata accessor for Models.Menu(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v10 = (char *)a1 + a2[7];
  v11 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (_QWORD *)((char *)a1 + a2[8]);
  result = v12[1];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(v12[3]);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v12 + 4);
  }
  return result;
}

uint64_t sub_C4148(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v35;
  __int128 v36;
  __int128 v37;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for ImpressionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_5C154(&qword_31F480);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[6];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = type metadata accessor for Models.Menu(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_5C154(&qword_322C80);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[7];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(v27 + 8);
  if (v28)
  {
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *(_QWORD *)(v26 + 8) = v28;
    v29 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
    *(_QWORD *)(v26 + 24) = v29;
    v30 = v26 + 32;
    v31 = v27 + 32;
    v32 = *(_OWORD *)(v27 + 56);
    *(_OWORD *)(v26 + 56) = v32;
    v33 = v32;
    v34 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v32 - 8);
    swift_bridgeObjectRetain(v28);
    v35 = swift_bridgeObjectRetain(v29);
    v34(v30, v31, v33, v35);
  }
  else
  {
    v36 = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v26 + 48) = v36;
    *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);
    v37 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v37;
  }
  return a1;
}

uint64_t sub_C436C(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v6 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v6)
    {
      sub_65938((_QWORD *)a1, a2);
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
    goto LABEL_8;
  }
  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
LABEL_8:
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for ImpressionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_13:
    v17 = sub_5C154(&qword_31F480);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_14:
  v18 = a3[6];
  v19 = (void *)(a1 + v18);
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Models.Menu(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_19:
    v26 = sub_5C154(&qword_322C80);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_20:
  v27 = a3[7];
  v28 = a1 + v27;
  v29 = (uint64_t)a2 + v27;
  v30 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[8];
  v32 = a1 + v31;
  v33 = (uint64_t)a2 + v31;
  v34 = *(_QWORD *)(a1 + v31 + 8);
  v35 = *(_QWORD *)(v33 + 8);
  if (v34)
  {
    if (v35)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v36 = *(_QWORD *)(v33 + 8);
      *(_QWORD *)(v32 + 8) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v34);
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      v38 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v38);
      sub_65938((_QWORD *)(v32 + 32), (_QWORD *)(v33 + 32));
    }
    else
    {
      sub_C46E4((_QWORD *)v32);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v46 = *(_OWORD *)(v33 + 32);
      v45 = *(_OWORD *)(v33 + 48);
      v47 = *(_OWORD *)(v33 + 16);
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(v33 + 64);
      *(_OWORD *)(v32 + 32) = v46;
      *(_OWORD *)(v32 + 48) = v45;
      *(_OWORD *)(v32 + 16) = v47;
    }
  }
  else if (v35)
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v39 = *(_QWORD *)(v33 + 8);
    *(_QWORD *)(v32 + 8) = v39;
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
    v40 = *(_QWORD *)(v33 + 24);
    *(_QWORD *)(v32 + 24) = v40;
    v41 = v32 + 32;
    v42 = *(_QWORD *)(v33 + 56);
    *(_QWORD *)(v32 + 56) = v42;
    *(_QWORD *)(v32 + 64) = *(_QWORD *)(v33 + 64);
    v43 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v42 - 8);
    swift_bridgeObjectRetain(v39);
    v44 = swift_bridgeObjectRetain(v40);
    v43(v41, v33 + 32, v42, v44);
  }
  else
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v48 = *(_OWORD *)(v33 + 16);
    v49 = *(_OWORD *)(v33 + 32);
    v50 = *(_OWORD *)(v33 + 48);
    *(_QWORD *)(v32 + 64) = *(_QWORD *)(v33 + 64);
    *(_OWORD *)(v32 + 32) = v49;
    *(_OWORD *)(v32 + 48) = v50;
    *(_OWORD *)(v32 + 16) = v48;
  }
  return a1;
}

_QWORD *sub_C46E4(_QWORD *a1)
{
  destroy for RecommendationSeedItem(a1);
  return a1;
}

uint64_t sub_C4710(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_5C154(&qword_31F480);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for Models.Menu(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_5C154(&qword_322C80);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_OWORD *)(v25 + 48);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
  *(_OWORD *)(v24 + 48) = v26;
  *(_QWORD *)(v24 + 64) = *(_QWORD *)(v25 + 64);
  v27 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v27;
  return a1;
}

uint64_t sub_C48B8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (*(_QWORD *)(a1 + 24))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_8:
    v15 = sub_5C154(&qword_31F480);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_9:
  v16 = a3[6];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for Models.Menu(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_14:
    v24 = sub_5C154(&qword_322C80);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_15:
  v25 = a3[7];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)(a1 + v29 + 8);
  if (!v32)
  {
LABEL_19:
    v37 = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
    *(_OWORD *)(v30 + 48) = v37;
    *(_QWORD *)(v30 + 64) = *(_QWORD *)(v31 + 64);
    v38 = *(_OWORD *)(v31 + 16);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 16) = v38;
    return a1;
  }
  v33 = *(_QWORD *)(v31 + 8);
  if (!v33)
  {
    sub_C46E4((_QWORD *)v30);
    goto LABEL_19;
  }
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_QWORD *)(v30 + 8) = v33;
  swift_bridgeObjectRelease(v32);
  v34 = *(_QWORD *)(v31 + 24);
  v35 = *(_QWORD *)(v30 + 24);
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
  *(_QWORD *)(v30 + 24) = v34;
  swift_bridgeObjectRelease(v35);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v30 + 32));
  v36 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v36;
  *(_QWORD *)(v30 + 64) = *(_QWORD *)(v31 + 64);
  return a1;
}

uint64_t sub_C4B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C4B5C);
}

uint64_t sub_C4B5C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_5C154(&qword_321EA8);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = a3[5];
    }
    else
    {
      v13 = sub_5C154(&qword_322C80);
      v10 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v13;
        v12 = a3[6];
      }
      else
      {
        v11 = type metadata accessor for ListItemViewModel(0);
        v10 = *(_QWORD *)(v11 - 8);
        v12 = a3[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t sub_C4C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C4C40);
}

uint64_t sub_C4C40(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 24) = a2;
  }
  else
  {
    v8 = sub_5C154(&qword_321EA8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_5C154(&qword_322C80);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for ListItemViewModel(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_C4D08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = "(";
  sub_C1800(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_C1800(319, (unint64_t *)&unk_322D78, (uint64_t (*)(uint64_t))&type metadata accessor for Models.Menu);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for ListItemViewModel(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_25C9E0;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_C4DDC()
{
  return sub_648E0(&qword_322DB8, type metadata accessor for RecommendationItemComponentModel, (uint64_t)&unk_25CA20);
}

uint64_t sub_C4E08()
{
  return sub_648E0(&qword_320068, type metadata accessor for RecommendationItemComponentModel, (uint64_t)&unk_25CC18);
}

unint64_t sub_C4E38()
{
  unint64_t result;

  result = qword_322DC0;
  if (!qword_322DC0)
  {
    result = swift_getWitnessTable(&unk_25CB78, &type metadata for RecommendationItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322DC0);
  }
  return result;
}

uint64_t sub_C4E7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_196A80(*a1, *a2);
}

Swift::Int sub_C4E88()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE600000000000000;
  v3 = 0x6E6F73616572;
  if (v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x800000000026D7E0;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x656372756F736572;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_C4F28(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE600000000000000;
  v3 = 0x6E6F73616572;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x800000000026D7E0;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x656372756F736572;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_C4FA4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE600000000000000;
  v4 = 0x6E6F73616572;
  if (v2 != 1)
  {
    v4 = 0xD000000000000014;
    v3 = 0x800000000026D7E0;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x656372756F736572;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_C5040@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_2E6500;
  result = sub_C5A0C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_C5074(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x6E6F73616572;
  if (v2 != 1)
  {
    v5 = 0xD000000000000014;
    v4 = 0x800000000026D7E0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656372756F736572;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_C50D4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6E6F73616572;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x656372756F736572;
}

unint64_t sub_C5130@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_2E6500;
  result = sub_C5A0C(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_C515C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5A50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C5184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5A50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_C51AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[5];
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  uint64_t v58;
  _QWORD *v59;

  v50 = a2;
  v3 = sub_5C154(&qword_322C98);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_5C154(&qword_322DE0);
  v7 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v11);
  v12 = sub_C5A50();
  v13 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationSeedItem.CodingKeys, &type metadata for RecommendationSeedItem.CodingKeys, v12, v11, v10);
  if (v13)
    goto LABEL_3;
  v14 = v6;
  v59 = a1;
  v49 = v7;
  v15 = sub_5C154(&qword_320958);
  LOBYTE(v52) = 2;
  v16 = sub_C5A94();
  v17 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v15, &v52, v51, v15, v16);
  v18 = v9;
  v20 = v54[0];
  v19 = v54[1];
  LOBYTE(v54[0]) = 1;
  v45 = KeyedDecodingContainer.decode(_:forKey:)(v54, v17);
  v47 = v21;
  v46 = v20;
  v48 = v19;
  LOBYTE(v54[0]) = 0;
  v22 = sub_C396C();
  v23 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v3, v54, v17, v3, v22);
  v26 = (void *)MResourceDecoder.wrappedValue.getter(v3);
  v27.n128_f64[0] = (*(double (**)(_QWORD *, uint64_t))(v4 + 8))(v23, v3);
  static ContentInfoUtilities.assetInfo(storeAsset:)(&v52, v26, v27);
  if (!v53)
  {
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v48);
    sub_5E09C((uint64_t)&v52, &qword_320940);
    v33 = type metadata accessor for DecodingError(0);
    swift_allocError(v33, &protocol witness table for DecodingError, 0, 0);
    v35 = v34;
    v36 = v51;
    v37 = KeyedDecodingContainer.codingPath.getter(v51);
    v38 = v18;
    v39 = type metadata accessor for ListItemDecodingError(0);
    v40 = sub_648E0(&qword_322CC0, (uint64_t (*)(uint64_t))&type metadata accessor for ListItemDecodingError, (uint64_t)&protocol conformance descriptor for ListItemDecodingError);
    v41 = swift_allocError(v39, v40, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v42, enum case for ListItemDecodingError.invalidMAPIResource(_:), v39);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v37, 0xD00000000000001ALL, 0x8000000000270790, v41);
    v43 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, enum case for DecodingError.dataCorrupted(_:), v33);
    swift_willThrow(v43);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v36);
    a1 = v59;
LABEL_3:
    v24 = a1;
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v24);
  }
  sub_5DC98(&v52, (uint64_t)v54);
  *(_QWORD *)&v56 = v45;
  *((_QWORD *)&v56 + 1) = v47;
  sub_5E0D8((uint64_t)v54, (uint64_t)v57);

  if (v48)
    v28 = v46;
  else
    v28 = 0;
  if (v48)
    v29 = v48;
  else
    v29 = 0xE000000000000000;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v54);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v18, v51);
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v29;
  v30 = v57[1];
  v31 = v50;
  *(_OWORD *)(v50 + 32) = v57[0];
  *(_OWORD *)(v31 + 48) = v30;
  *(_QWORD *)(v31 + 64) = v58;
  v32 = v56;
  *(_OWORD *)v31 = v55;
  *(_OWORD *)(v31 + 16) = v32;
  v24 = v59;
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v24);
}

uint64_t sub_C5618@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_C51AC(a1, a2);
}

unint64_t sub_C5630()
{
  unint64_t result;

  result = qword_322DC8;
  if (!qword_322DC8)
  {
    result = swift_getWitnessTable(&unk_25CAB0, &type metadata for RecommendationItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322DC8);
  }
  return result;
}

unint64_t sub_C5678()
{
  unint64_t result;

  result = qword_322DD0;
  if (!qword_322DD0)
  {
    result = swift_getWitnessTable(&unk_25CAD8, &type metadata for RecommendationItemComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322DD0);
  }
  return result;
}

uint64_t sub_C56BC()
{
  return sub_648E0(&qword_322DD8, type metadata accessor for RecommendationItemComponentModel, (uint64_t)&unk_25C9F8);
}

uint64_t sub_C56E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_5C154(&qword_325F60);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RecommendationItemComponentModel(0);
  sub_5E1A4(v1 + *(int *)(v6 + 32), (uint64_t)&v16, &qword_322CB0);
  v7 = v17;
  if (!v17)
  {
    v11 = &qword_322CB0;
    v12 = (char *)&v16;
    goto LABEL_5;
  }
  v8 = v16;
  swift_bridgeObjectRetain(v17);
  sub_C46E4(&v16);
  OdpSuggestionType.init(rawValue:)(v8, v7);
  v9 = type metadata accessor for OdpSuggestionType(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    v11 = &qword_325F60;
    v12 = v5;
LABEL_5:
    sub_5E09C((uint64_t)v12, v11);
    v13 = type metadata accessor for OdpSuggestionType(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v5, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
}

uint64_t sub_C5834@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = sub_5C154(&qword_325F60);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OdpSuggestionType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - v11;
  v13 = type metadata accessor for RecommendationItemComponentModel(0);
  sub_5E1A4(v1 + *(int *)(v13 + 32), (uint64_t)&v22, &qword_322CB0);
  v14 = v23;
  if (!v23)
  {
    v16 = &qword_322CB0;
    v17 = (char *)&v22;
    goto LABEL_5;
  }
  v15 = v22;
  swift_bridgeObjectRetain(v23);
  sub_C46E4(&v22);
  OdpSuggestionType.init(rawValue:)(v15, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v16 = &qword_325F60;
    v17 = v5;
LABEL_5:
    sub_5E09C((uint64_t)v17, v16);
    v18 = type metadata accessor for SuggestionData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
  SuggestionData.init(odpSuggestionType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v20 = type metadata accessor for SuggestionData(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

unint64_t sub_C5A0C(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

unint64_t sub_C5A50()
{
  unint64_t result;

  result = qword_322DE8;
  if (!qword_322DE8)
  {
    result = swift_getWitnessTable(&unk_25CD48, &type metadata for RecommendationSeedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322DE8);
  }
  return result;
}

unint64_t sub_C5A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322DF0;
  if (!qword_322DF0)
  {
    v1 = sub_667D0(&qword_320958);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_322DF0);
  }
  return result;
}

uint64_t _s11BookStoreUI32RecommendationItemComponentModelV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_C5B3C + 4 * byte_25C905[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_C5B70 + 4 * asc_25C900[v4]))();
}

uint64_t sub_C5B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C5B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC5B80);
  return result;
}

uint64_t sub_C5B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC5B94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_C5B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C5BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationSeedItem.CodingKeys()
{
  return &type metadata for RecommendationSeedItem.CodingKeys;
}

unint64_t sub_C5BC0()
{
  unint64_t result;

  result = qword_322E00;
  if (!qword_322E00)
  {
    result = swift_getWitnessTable(&unk_25CD20, &type metadata for RecommendationSeedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322E00);
  }
  return result;
}

unint64_t sub_C5C08()
{
  unint64_t result;

  result = qword_322E08;
  if (!qword_322E08)
  {
    result = swift_getWitnessTable(&unk_25CC58, &type metadata for RecommendationSeedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322E08);
  }
  return result;
}

unint64_t sub_C5C50()
{
  unint64_t result;

  result = qword_322E10;
  if (!qword_322E10)
  {
    result = swift_getWitnessTable(&unk_25CC80, &type metadata for RecommendationSeedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_322E10);
  }
  return result;
}

uint64_t sub_C5C94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v21[5];

  v6 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v21[-1] - v10;
  v12 = (int *)type metadata accessor for PageRootView(0);
  v13 = a3 + v12[7];
  v14 = type metadata accessor for HostProxy(0);
  v15 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  *(_QWORD *)v13 = Environment.init<A>(_:)(v14, v14, v15);
  *(_BYTE *)(v13 + 8) = v16 & 1;
  v17 = a3 + v12[8];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_25CE48);
  *(_BYTE *)(v17 + 8) = 0;
  sub_C5E3C(a1, a2, (uint64_t)v11);
  sub_5E0D8((uint64_t)a1, (uint64_t)v21);
  sub_5E1A4((uint64_t)v11, (uint64_t)v8, &qword_3217C0);
  PageContent.init(pageIntent:initialPage:)((uint64_t)v21, (uint64_t)v8, a3);
  *(_QWORD *)(a3 + v12[5]) = a2;
  v18 = type metadata accessor for ProfileRestrictions(0);
  swift_retain(a2);
  BaseObjectGraph.inject<A>(_:)(v21, v18, v18);
  swift_release(a2);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  result = sub_5E09C((uint64_t)v11, &qword_3217C0);
  *(_QWORD *)(a3 + v12[6]) = v21[0];
  return result;
}

uint64_t sub_C5E3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71[2];
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;

  v68 = a3;
  v5 = sub_5C154(&qword_323048);
  __chkstk_darwin(v5);
  v65 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IntentDispatcherError(0);
  v66 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v63 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v64 = (char *)&v55 - v10;
  v11 = type metadata accessor for Page(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v67 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SynchronousNativeIntentDispatcher(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = a1[3];
  v19 = a1[4];
  sub_66898(a1, v18);
  dispatch thunk of IntentModel._canonicalized.getter(v72, v18, v19);
  v20 = sub_5C154(&qword_323050);
  v21 = sub_5C154(&qword_323058);
  if (!swift_dynamicCast(v71, v72, v20, v21, 6))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v68, 1, 1, v11);
  v62 = v7;
  sub_5DC98(v71, (uint64_t)v75);
  BaseObjectGraph.inject<A>(_:)(v17, v14, v14);
  if (qword_31E628 != -1)
    swift_once(&qword_31E628, sub_126BA4);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_5240C(v22, (uint64_t)qword_325208);
  v24 = sub_5E0D8((uint64_t)v75, (uint64_t)v72);
  v61 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v60 = v11;
  v59 = v12;
  v58 = v14;
  v57 = v15;
  if (v27)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v56 = a2;
    v30 = v29;
    *(_QWORD *)&v71[0] = v29;
    *(_DWORD *)v28 = 136315138;
    v32 = v73;
    v31 = v74;
    sub_66898(v72, v73);
    v33 = dispatch thunk of IntentModel.kind.getter(v32, *(_QWORD *)(v31 + 8));
    v35 = v34;
    v69 = sub_57CD8(v33, v34, (uint64_t *)v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v35);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v72);
    _os_log_impl(&dword_0, v25, v26, "Trying to synchronously resolve page intent %s for initial page rendering", v28, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    a2 = v56;
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v72);
  }

  v37 = v76;
  v38 = v77;
  v39 = sub_66898(v75, v76);
  v40 = (uint64_t)v67;
  SynchronousNativeIntentDispatcher.perform<A>(_:objectGraph:)(v39, a2, v37, v38);
  v41 = sub_5E0D8((uint64_t)v75, (uint64_t)v72);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v71[0] = v45;
    *(_DWORD *)v44 = 136315138;
    v47 = v73;
    v46 = v74;
    sub_66898(v72, v73);
    v48 = dispatch thunk of IntentModel.kind.getter(v47, *(_QWORD *)(v46 + 8));
    v50 = v49;
    v69 = sub_57CD8(v48, v49, (uint64_t *)v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease(v50);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v72);
    _os_log_impl(&dword_0, v42, v43, "Successfully resolved page intent %s for initial page rendering", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    v51 = v45;
    v40 = (uint64_t)v67;
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v72);
  }
  (*(void (**)(_QWORD *, uint64_t))(v57 + 8))(v17, v58);
  v52 = v60;
  v53 = v59;
  v54 = v68;
  sub_5E160(v40, v68, type metadata accessor for Page);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v75);
}

uint64_t sub_C684C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;

  v89 = a1;
  v90 = sub_5C154(&qword_323088);
  v80 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v79 = (uint64_t)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_5C154(&qword_322EE0);
  __chkstk_darwin(v84);
  v78 = (uint64_t)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_323090);
  __chkstk_darwin(v4);
  v77 = (uint64_t)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_5C154(&qword_323098);
  __chkstk_darwin(v86);
  v88 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_5C154(&qword_3230A0);
  __chkstk_darwin(v82);
  v83 = (uint64_t)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_5C154(&qword_322EA8);
  __chkstk_darwin(v87);
  v85 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  v74 = *(_QWORD *)(v9 - 8);
  v75 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PageRootView(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v73 = sub_5C154(&qword_322EC8);
  v15 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5C154(&qword_322EB8);
  __chkstk_darwin(v81);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v76 = (uint64_t)&v72 - v21;
  v22 = type metadata accessor for PageContent.ContentType(0);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  PageContent.contentType.getter(v24);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v22);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v26 = *v24;
      sub_5E11C(v1, (uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PageRootView);
      v27 = *(unsigned __int8 *)(v13 + 80);
      v28 = (v27 + 16) & ~v27;
      v29 = swift_allocObject(&unk_2EBB08, v28 + v14, v27 | 7);
      sub_5E160((uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28, type metadata accessor for PageRootView);
      v30 = v79;
      sub_C78E8(v26, (uint64_t)sub_D0350, v29, v79);
      swift_release(v29);
      v31 = v80;
      v32 = v88;
      v33 = v90;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v88, v30, v90);
      swift_storeEnumTagMultiPayload(v32, v86, 1);
      v34 = sub_C90E4();
      v35 = sub_667D0(&qword_322F38);
      v36 = sub_C9488();
      v91 = v35;
      v92 = v36;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.observeAnalyticsVisibility()>>, 1);
      _ConditionalContent<>.init(storage:)(v32, v87, v33, v34, OpaqueTypeConformance2);
      swift_errorRelease(v26);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v33);
    }
    LoadingView.init<>()();
    sub_5E11C(v1, (uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PageRootView);
    v52 = *(unsigned __int8 *)(v13 + 80);
    v53 = (v52 + 16) & ~v52;
    v54 = swift_allocObject(&unk_2EBB30, v53 + v14, v52 | 7);
    sub_5E160((uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v54 + v53, type metadata accessor for PageRootView);
    static TaskPriority.userInitiated.getter(v55);
    v56 = v81;
    v57 = &v19[*(int *)(v81 + 36)];
    v58 = type metadata accessor for _TaskModifier(0);
    v60 = v74;
    v59 = v75;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(&v57[*(int *)(v58 + 20)], v11, v75);
    *(_QWORD *)v57 = &unk_3230B0;
    *((_QWORD *)v57 + 1) = v54;
    v61 = v73;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v17, v73);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v59);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v61);
    v39 = &qword_322EB8;
    v62 = v76;
    sub_66F14((uint64_t)v19, v76, &qword_322EB8);
    v63 = v83;
    sub_5E1A4(v62, v83, &qword_322EB8);
    swift_storeEnumTagMultiPayload(v63, v82, 0);
    v64 = sub_C9150();
    v65 = sub_C91EC();
    v66 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)(v63, v56, v84, v64, v65);
    v67 = v88;
    sub_5E1A4(v66, v88, &qword_322EA8);
    swift_storeEnumTagMultiPayload(v67, v86, 0);
    v68 = sub_C90E4();
    v69 = sub_667D0(&qword_322F38);
    v70 = sub_C9488();
    v91 = v69;
    v92 = v70;
    v71 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.observeAnalyticsVisibility()>>, 1);
    _ConditionalContent<>.init(storage:)(v67, v87, v90, v68, v71);
    sub_5E09C(v66, &qword_322EA8);
    v51 = v62;
  }
  else
  {
    v39 = &qword_323090;
    v40 = v77;
    sub_66F14((uint64_t)v24, v77, &qword_323090);
    v41 = v78;
    sub_C6FEC(v40, v78);
    v42 = v83;
    sub_5E1A4(v41, v83, &qword_322EE0);
    swift_storeEnumTagMultiPayload(v42, v82, 1);
    v43 = sub_C9150();
    v44 = sub_C91EC();
    v45 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)(v42, v81, v84, v43, v44);
    v46 = v88;
    sub_5E1A4(v45, v88, &qword_322EA8);
    swift_storeEnumTagMultiPayload(v46, v86, 0);
    v47 = sub_C90E4();
    v48 = sub_667D0(&qword_322F38);
    v49 = sub_C9488();
    v91 = v48;
    v92 = v49;
    v50 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.observeAnalyticsVisibility()>>, 1);
    _ConditionalContent<>.init(storage:)(v46, v87, v90, v47, v50);
    sub_5E09C(v45, &qword_322EA8);
    sub_5E09C(v41, &qword_322EE0);
    v51 = v40;
  }
  return sub_5E09C(v51, v39);
}

uint64_t sub_C6F5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for HostProxy.Event(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[5] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_D1364, v4, v5);
}

uint64_t sub_C6FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t KeyPath;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD v128[3];

  v125 = a2;
  v3 = type metadata accessor for ContentMarginPlacement(0);
  v123 = *(_QWORD *)(v3 - 8);
  v124 = v3;
  __chkstk_darwin(v3);
  v122 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v115 = *(_QWORD *)(v5 - 8);
  v116 = v5;
  __chkstk_darwin(v5);
  v114 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PageRootView(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v110 = *(_QWORD *)(v7 - 8);
  v111 = v8;
  __chkstk_darwin(v7);
  v108 = (uint64_t)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_3230B8);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_5C154(&qword_323090);
  __chkstk_darwin(v13);
  v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PageView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_5C154(&qword_322F08);
  __chkstk_darwin(v103);
  v20 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5C154(&qword_3230C0);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v127 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5C154(&qword_322EF8);
  __chkstk_darwin(v105);
  v104 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5C154(&qword_3230C8);
  v112 = *(_QWORD *)(v23 - 8);
  v113 = v23;
  __chkstk_darwin(v23);
  v106 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5C154(&qword_322EE8);
  __chkstk_darwin(v117);
  v118 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5C154(&qword_3230D0);
  v120 = *(_QWORD *)(v26 - 8);
  v121 = v26;
  __chkstk_darwin(v26);
  v119 = (char *)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Page(0);
  v101 = *(_QWORD *)(v28 - 8);
  v102 = v28;
  v29 = *(_QWORD *)(v101 + 64);
  __chkstk_darwin(v28);
  v100 = (uint64_t)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v33 = (uint64_t *)((char *)&v98 - v32);
  Binding.wrappedValue.getter(v13, v31);
  sub_5E1A4(a1, (uint64_t)v15, &qword_323090);
  type metadata accessor for PageContent(0);
  v34 = v126;
  v35 = sub_5C154(&qword_322F80);
  State.projectedValue.getter(v12, v35);
  v99 = v7;
  v36 = *(_QWORD *)(v34 + *(int *)(v7 + 20));
  swift_retain(v36);
  v37 = sub_1B1D58((uint64_t)v15, (uint64_t)v12, v36, (uint64_t)v18);
  v38 = PageData.pageType.getter(v37);
  v40 = v39;
  v41 = (uint64_t)v18;
  sub_5E11C((uint64_t)v18, (uint64_t)v20, type metadata accessor for PageView);
  v42 = v103;
  v43 = (uint64_t *)&v20[*(int *)(v103 + 36)];
  *v43 = v38;
  v43[1] = v40;
  v43[2] = v36;
  swift_retain(v36);
  sub_6685C(v41, type metadata accessor for PageView);
  v44 = sub_C93C0();
  View.observeAnalyticsVisibility()(v42, v44);
  sub_5E09C((uint64_t)v20, &qword_322F08);
  v45 = v33[1];
  v103 = *v33;
  v46 = v34;
  v47 = v108;
  sub_5E11C(v46, v108, type metadata accessor for PageRootView);
  v48 = v100;
  sub_5E11C((uint64_t)v33, v100, type metadata accessor for Page);
  v49 = *(unsigned __int8 *)(v110 + 80);
  v50 = (v49 + 16) & ~v49;
  v51 = *(unsigned __int8 *)(v101 + 80);
  v52 = (v111 + v51 + v50) & ~v51;
  v53 = swift_allocObject(&unk_2EBB58, v52 + v29, v49 | v51 | 7);
  sub_5E160(v47, v53 + v50, type metadata accessor for PageRootView);
  sub_5E160(v48, v53 + v52, type metadata accessor for Page);
  v54 = swift_bridgeObjectRetain(v45);
  v55 = v114;
  static TaskPriority.userInitiated.getter(v54);
  v56 = v105;
  v57 = (uint64_t)v104;
  v58 = &v104[*(int *)(v105 + 36)];
  v59 = sub_5C154(&qword_322F28);
  v61 = v115;
  v60 = v116;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(&v58[*(int *)(v59 + 36)], v55, v116);
  v62 = (uint64_t *)&v58[*(int *)(v59 + 40)];
  *v62 = v103;
  v62[1] = v45;
  *(_QWORD *)v58 = &unk_3230E0;
  *((_QWORD *)v58 + 1) = v53;
  v63 = v107;
  v64 = v127;
  v65 = v109;
  (*(void (**)(uint64_t, char *, uint64_t))(v107 + 16))(v57, v127, v109);
  v66 = v55;
  v67 = v106;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v66, v60);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  v68 = sub_C9314();
  View.geometryCacheNamespace()(v56, v68);
  v69 = sub_5E09C(v57, &qword_322EF8);
  v70 = static SafeAreaRegions.all.getter(v69);
  v71 = v70;
  v72 = *(int *)(v102 + 32);
  if (*((_BYTE *)v33 + v72) == 1)
    v73 = static Edge.Set.top.getter(v70);
  else
    v73 = Edge.Set.init(rawValue:)(0);
  v74 = v73;
  v76 = v112;
  v75 = v113;
  v77 = (uint64_t)v118;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v118, v67, v113);
  v78 = v117;
  v79 = v77 + *(int *)(v117 + 36);
  *(_QWORD *)v79 = v71;
  *(_BYTE *)(v79 + 8) = v74;
  v80 = (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v67, v75);
  v81 = static Edge.Set.top.getter(v80);
  v82 = v81;
  if (*((_BYTE *)v33 + v72) == 1)
  {
    v83 = (uint64_t *)(v126 + *(int *)(v99 + 28));
    v84 = *v83;
    v85 = *((_BYTE *)v83 + 8);
    v86 = swift_retain(*v83);
    v87 = sub_78264(v86, v85);
    swift_release(v84);
    KeyPath = swift_getKeyPath(&unk_25CED8);
    v128[0] = v87;
    v89 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v128, KeyPath, v89);
    swift_release(KeyPath);
    swift_beginAccess(v87 + 32, v128, 0, 0);
    v90 = *(_QWORD *)(v87 + 32);
    v81 = swift_release(v87);
  }
  else
  {
    v90 = 0x3F847AE147AE147BLL;
  }
  v91 = v122;
  static ContentMarginPlacement.scrollIndicators.getter(v81);
  v92 = sub_C9280();
  v93 = v119;
  View.contentMargins(_:_:for:)(v82, v90, 0, v91, v78, v92);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v91, v124);
  sub_5E09C(v77, &qword_322EE8);
  v95 = v120;
  v94 = v121;
  v96 = v125;
  (*(void (**)(uint64_t, char *, uint64_t))(v120 + 16))(v125, v93, v121);
  *(_QWORD *)(v96 + *(int *)(sub_5C154(&qword_322EE0) + 36)) = 0;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v94);
  return sub_6685C((uint64_t)v33, type metadata accessor for Page);
}

uint64_t sub_C782C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v2, v3);
  sub_5C154(&qword_322E30);
  IntentResult.invalidate(clearing:)(1);
  sub_F56F4();
  return State.wrappedValue.setter(v2, v3);
}

uint64_t sub_C78E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD v51[2];

  v41 = a3;
  v43 = a2;
  v49 = a4;
  v6 = type metadata accessor for TaskPriority(0);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  __chkstk_darwin(v6);
  v46 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageRootView(0);
  v45 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v45 + 64);
  __chkstk_darwin(v8);
  v44 = (uint64_t)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for PageErrorView(0);
  __chkstk_darwin(v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_322F50);
  __chkstk_darwin(v13);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_5C154(&qword_322F38);
  __chkstk_darwin(v42);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v4 + *(int *)(v8 + 20));
  v19 = &v12[v10[8]];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_25CF00);
  v20 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = &v12[v10[9]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_25CF30);
  v22 = sub_5C154(&qword_320290);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = &v12[v10[10]];
  v50 = 0;
  swift_errorRetain(a1);
  v24 = v41;
  swift_retain(v41);
  swift_retain(v18);
  State.init(wrappedValue:)(v51, &v50, &type metadata for Bool);
  v25 = v51[1];
  *v23 = v51[0];
  *((_QWORD *)v23 + 1) = v25;
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 2) = v43;
  *((_QWORD *)v12 + 3) = v24;
  *((_QWORD *)v12 + 4) = v18;
  swift_errorRetain(a1);
  v12[8] = sub_145B80(a1);
  sub_5E11C((uint64_t)v12, (uint64_t)v15, type metadata accessor for PageErrorView);
  v26 = &v15[*(int *)(v13 + 36)];
  *(_QWORD *)v26 = 0x676150726F727245;
  *((_QWORD *)v26 + 1) = 0xE900000000000065;
  *((_QWORD *)v26 + 2) = v18;
  swift_retain(v18);
  sub_6685C((uint64_t)v12, type metadata accessor for PageErrorView);
  v27 = v44;
  sub_5E11C(v40[1], v44, type metadata accessor for PageRootView);
  v28 = *(unsigned __int8 *)(v45 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_2EBB80, v29 + v9, v28 | 7);
  sub_5E160(v27, v30 + v29, type metadata accessor for PageRootView);
  v31 = v46;
  static TaskPriority.userInitiated.getter(v32);
  v33 = v42;
  v34 = &v17[*(int *)(v42 + 36)];
  v35 = type metadata accessor for _TaskModifier(0);
  v37 = v47;
  v36 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(&v34[*(int *)(v35 + 20)], v31, v48);
  *(_QWORD *)v34 = &unk_3230F0;
  *((_QWORD *)v34 + 1) = v30;
  sub_5E1A4((uint64_t)v15, (uint64_t)v17, &qword_322F50);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v36);
  sub_5E09C((uint64_t)v15, &qword_322F50);
  v38 = sub_C9488();
  View.observeAnalyticsVisibility()(v33, v38);
  return sub_5E09C((uint64_t)v17, &qword_322F38);
}

uint64_t PageRootView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (**v81)();
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t KeyPath;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v116 = a1;
  v2 = sub_5C154(&qword_322E18);
  __chkstk_darwin(v2);
  v115 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_322E20);
  v5 = *(_QWORD *)(v4 - 8);
  v111 = v4;
  v112 = v5;
  __chkstk_darwin(v4);
  v110 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_322E28);
  v113 = *(_QWORD *)(v7 - 8);
  v114 = v7;
  __chkstk_darwin(v7);
  v109 = (char *)&KeyPath - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for PageRootView(0);
  v9 = *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64);
  v107 = *(_QWORD *)(v118 - 8);
  v108 = v9;
  __chkstk_darwin(v118);
  v106 = (uint64_t)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for HostingControllerVisibilityStateManager.State(0);
  v99 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v98 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_5C154(&qword_322E30);
  v12 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v14 = (char *)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v92);
  v16 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_320278);
  __chkstk_darwin(v17);
  v19 = (char *)&KeyPath - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5C154(&qword_322E38);
  __chkstk_darwin(v20);
  v22 = (char *)&KeyPath - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5C154(&qword_322E40);
  __chkstk_darwin(v23);
  v25 = (char *)&KeyPath - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5C154(&qword_322E48);
  __chkstk_darwin(v26);
  v28 = (char *)&KeyPath - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_5C154(&qword_322E50);
  __chkstk_darwin(v90);
  v30 = (char *)&KeyPath - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_5C154(&qword_322E58);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v91 = (char *)&KeyPath - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_5C154(&qword_322E60);
  __chkstk_darwin(v95);
  v94 = (char *)&KeyPath - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5C154(&qword_322E68);
  __chkstk_darwin(v102);
  v100 = (uint64_t)&KeyPath - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5C154(&qword_322E70);
  v104 = *(_QWORD *)(v34 - 8);
  v105 = v34;
  __chkstk_darwin(v34);
  v103 = (char *)&KeyPath - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_C684C((uint64_t)v22);
  sub_C8634((uint64_t)v25);
  sub_5E09C((uint64_t)v22, &qword_322E38);
  v117 = v1;
  sub_C89A0((uint64_t)v28);
  sub_5E09C((uint64_t)v25, &qword_322E40);
  KeyPath = swift_getKeyPath(&unk_25CD98);
  v36 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v16, v36);
  v37 = v92;
  v38 = v93;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v16[*(int *)(v92 + 32)], v93);
  sub_6685C((uint64_t)v16, type metadata accessor for PageContent.PageInfo);
  IntentResult.dispatchState.getter(v38);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v38);
  v39 = type metadata accessor for IntentDispatchState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v19, 0, 1, v39);
  v40 = v90;
  v41 = (uint64_t *)&v30[*(int *)(v90 + 36)];
  v42 = sub_5C154(&qword_322E78);
  sub_5E1A4((uint64_t)v19, (uint64_t)v41 + *(int *)(v42 + 28), &qword_320278);
  *v41 = KeyPath;
  sub_5E1A4((uint64_t)v28, (uint64_t)v30, &qword_322E48);
  sub_5E09C((uint64_t)v19, &qword_320278);
  sub_5E09C((uint64_t)v28, &qword_322E48);
  v43 = v117;
  State.wrappedValue.getter(v16, v36);
  LODWORD(v28) = v16[*(int *)(v37 + 28)];
  sub_6685C((uint64_t)v16, type metadata accessor for PageContent.PageInfo);
  v44 = (unsigned int *)&enum case for HostingControllerVisibilityStateManager.State.hidden(_:);
  v45 = v99;
  if (!(_DWORD)v28)
    v44 = (unsigned int *)&enum case for HostingControllerVisibilityStateManager.State.visible(_:);
  v46 = v98;
  v47 = v101;
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v98, *v44, v101);
  v48 = sub_C8E9C();
  v49 = v91;
  View.analyticsVisibilityState(_:)(v46, v40, v48);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  sub_5E09C((uint64_t)v30, &qword_322E50);
  v50 = v43 + *(int *)(v118 + 28);
  v51 = *(_QWORD *)v50;
  v52 = *(_BYTE *)(v50 + 8);
  v53 = swift_retain(*(_QWORD *)v50);
  v54 = sub_78264(v53, v52);
  swift_release(v51);
  v119 = *(_QWORD *)(v54 + 16);
  v55 = sub_5C154(&qword_31FA68);
  v56 = sub_67060(&qword_31FA70, &qword_31FA68, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v57 = Publisher.eraseToAnyPublisher()(v55, v56);
  swift_release(v54);
  v58 = v43;
  v59 = v106;
  sub_5E11C(v58, v106, type metadata accessor for PageRootView);
  v60 = *(unsigned __int8 *)(v107 + 80);
  v61 = (v60 + 16) & ~v60;
  v62 = v61 + v108;
  v63 = v60 | 7;
  v64 = swift_allocObject(&unk_2EBAB8, v61 + v108, v60 | 7);
  sub_5E160(v59, v64 + v61, type metadata accessor for PageRootView);
  v65 = v96;
  v66 = (uint64_t)v94;
  v67 = v97;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v94, v49, v97);
  v68 = v95;
  *(_QWORD *)(v66 + *(int *)(v95 + 52)) = v57;
  v69 = (uint64_t (**)(uint64_t))(v66 + *(int *)(v68 + 56));
  *v69 = sub_CA144;
  v69[1] = (uint64_t (*)(uint64_t))v64;
  v70 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v49, v67);
  v71 = v117;
  v72 = v110;
  dispatch thunk of ProfileRestrictions.$isBookStoreAllowed.getter(v70);
  v73 = sub_67060(&qword_322F88, &qword_322E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v74 = v109;
  v75 = v111;
  Publisher.dropFirst(_:)(1, v111, v73);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v72, v75);
  sub_5E11C(v71, v59, type metadata accessor for PageRootView);
  v76 = swift_allocObject(&unk_2EBAE0, v62, v63);
  sub_5E160(v59, v76 + v61, type metadata accessor for PageRootView);
  v77 = v100;
  sub_5E1A4(v66, v100, &qword_322E60);
  v78 = v102;
  v80 = v113;
  v79 = v114;
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v77 + *(int *)(v102 + 52), v74, v114);
  v81 = (uint64_t (**)())(v77 + *(int *)(v78 + 56));
  *v81 = sub_CA184;
  v81[1] = (uint64_t (*)())v76;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v79);
  sub_5E09C(v66, &qword_322E60);
  v82 = enum case for PresentationSource.stack(_:);
  v83 = type metadata accessor for PresentationSource(0);
  v84 = *(_QWORD *)(v83 - 8);
  v85 = (uint64_t)v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 104))(v115, v82, v83);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v85, 0, 1, v83);
  v86 = sub_67060(&qword_322F90, &qword_322E68, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  v87 = v103;
  View.presentedBy(_:)(v85, v78, v86);
  sub_5E09C(v85, &qword_322E18);
  sub_5E09C(v77, &qword_322E68);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v104 + 32))(v116, v87, v105);
}

uint64_t type metadata accessor for PageRootView(uint64_t a1)
{
  uint64_t result;

  result = qword_323000;
  if (!qword_323000)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageRootView);
  return result;
}

uint64_t sub_C8634@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v39 = a1;
  v38 = sub_5C154(&qword_322F60);
  v40 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v2 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Spring(0);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_323078);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_5C154(&qword_323080);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v35 - v13);
  v15 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v17, v18);
  sub_5E0D8((uint64_t)v17, (uint64_t)v41);
  sub_6685C((uint64_t)v17, type metadata accessor for PageContent.PageInfo);
  State.projectedValue.getter(v8, v18);
  KeyPath = swift_getKeyPath(&unk_25CEB0);
  Binding.subscript.getter(KeyPath, v6);
  swift_release(KeyPath);
  sub_5E09C((uint64_t)v8, &qword_323078);
  Spring.init(mass:stiffness:damping:allowOverDamping:)(0, 1.0, 300.0, 35.0);
  v20 = static Animation.spring(_:blendDuration:)(v5, 0.0);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v37);
  Binding.animation(_:)(v14, v20, v9);
  swift_release(v20);
  sub_5E09C((uint64_t)v11, &qword_323080);
  v21 = v42;
  v22 = v43;
  v23 = sub_66898(v41, v42);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v27 + 16))(v26, v24);
  v28 = type metadata accessor for Page(0);
  AnyIntentModel.init<A>(_:)(v26, v28, v21, v22);
  v29 = sub_5C154(&qword_322E38);
  v30 = sub_C9048();
  v31 = sub_67060(&qword_322F68, &qword_322F60, (uint64_t)&protocol conformance descriptor for AnyIntentModel<A>);
  v32 = v29;
  v33 = v38;
  View.dispatch<A>(_:into:)(v2, v14, v32, v38, v30, v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v2, v33);
  sub_5E09C((uint64_t)v14, &qword_323080);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v41);
}

uint64_t sub_C89A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v57 = a1;
  v58 = sub_5C154(&qword_322E40);
  __chkstk_darwin(v58);
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_323068);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MetricsPipeline(0);
  v55 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = sub_5C154(&qword_323070);
  v10 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - v14;
  v16 = BaseObjectGraph.inject<A>(_:)(&v59, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if (v59 == 1)
  {
    v17 = static Metrics.defaultPerfTopic.getter(v16);
    v51 = v18;
    v52 = v17;
    BaseObjectGraph.inject<A>(_:)(v9, v7, v7);
    v19 = sub_C9048();
    v54 = v6;
    v20 = v19;
    v21 = sub_667D0(&qword_322E38);
    v53 = v21;
    v22 = sub_667D0(&qword_322F60);
    v50 = v1;
    v23 = v22;
    v24 = sub_67060(&qword_322F68, &qword_322F60, (uint64_t)&protocol conformance descriptor for AnyIntentModel<A>);
    v59 = v21;
    v60 = v23;
    v61 = v20;
    v62 = v24;
    v25 = v20;
    v49 = v20;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.dispatch<A>(_:into:)>>, 1);
    v27 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
    v48 = v4;
    v28 = v27;
    v29 = v51;
    v30 = v58;
    ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)(v52, v51, v9, v58, v25, OpaqueTypeConformance2, v27);
    v31 = swift_bridgeObjectRelease(v29);
    (*(void (**)(_QWORD *, uint64_t, __n128))(v55 + 8))(v9, v7, v31);
    v32 = v56;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v56);
    v33 = v54;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v54, v15, v32);
    swift_storeEnumTagMultiPayload(v33, v48, 0);
    v34 = sub_667D0(&qword_322E90);
    v59 = v53;
    v60 = v34;
    v61 = v49;
    v62 = OpaqueTypeConformance2;
    v63 = v28;
    v35 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
    v36 = sub_C9590();
    _ConditionalContent<>.init(storage:)(v33, v32, v30, v35, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v32);
  }
  else
  {
    sub_5E1A4(v1, (uint64_t)v3, &qword_322E40);
    sub_5E1A4((uint64_t)v3, (uint64_t)v6, &qword_322E40);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v38 = v6;
    v39 = sub_667D0(&qword_322E38);
    v40 = sub_667D0(&qword_322E90);
    v41 = sub_C9048();
    v42 = sub_667D0(&qword_322F60);
    v43 = sub_67060(&qword_322F68, &qword_322F60, (uint64_t)&protocol conformance descriptor for AnyIntentModel<A>);
    v59 = v39;
    v60 = v42;
    v61 = v41;
    v62 = v43;
    v44 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.dispatch<A>(_:into:)>>, 1);
    v45 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
    v59 = v39;
    v60 = v40;
    v61 = v41;
    v62 = v44;
    v63 = v45;
    v46 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
    v47 = sub_C9590();
    _ConditionalContent<>.init(storage:)(v38, v56, v58, v46, v47);
    return sub_5E09C((uint64_t)v3, &qword_322E40);
  }
}

uint64_t sub_C8DD8()
{
  return EnvironmentValues.pageIntentDispatchState.getter();
}

uint64_t sub_C8DF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_5C154(&qword_320278);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(a1, (uint64_t)v4, &qword_320278);
  return EnvironmentValues.pageIntentDispatchState.setter(v4);
}

uint64_t sub_C8E78()
{
  return EnvironmentValues.pageIntentDispatchState.getter();
}

unint64_t sub_C8E9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322E80;
  if (!qword_322E80)
  {
    v1 = sub_667D0(&qword_322E50);
    sub_C8F20();
    sub_67060(&qword_322F78, &qword_322E78, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322E80);
  }
  return result;
}

unint64_t sub_C8F20()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_322E88;
  if (!qword_322E88)
  {
    v1 = sub_667D0(&qword_322E48);
    v2 = sub_667D0(&qword_322E38);
    v3 = sub_667D0(&qword_322E90);
    v4 = sub_C9048();
    v7 = v2;
    v8 = sub_667D0(&qword_322F60);
    v9 = v4;
    v10 = sub_67060(&qword_322F68, &qword_322F60, (uint64_t)&protocol conformance descriptor for AnyIntentModel<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.dispatch<A>(_:into:)>>, 1);
    v6 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
    v7 = v2;
    v8 = v3;
    v9 = v4;
    v10 = OpaqueTypeConformance2;
    v11 = v6;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
    sub_C9590();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322E88);
  }
  return result;
}

unint64_t sub_C9048()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_322E98;
  if (!qword_322E98)
  {
    v1 = sub_667D0(&qword_322E38);
    sub_C90E4();
    v2[0] = sub_667D0(&qword_322F38);
    v2[1] = sub_C9488();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.observeAnalyticsVisibility()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322E98);
  }
  return result;
}

unint64_t sub_C90E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322EA0;
  if (!qword_322EA0)
  {
    v1 = sub_667D0(&qword_322EA8);
    sub_C9150();
    sub_C91EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322EA0);
  }
  return result;
}

unint64_t sub_C9150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322EB0;
  if (!qword_322EB0)
  {
    v1 = sub_667D0(&qword_322EB8);
    sub_67060(&qword_322EC0, &qword_322EC8, (uint64_t)&protocol conformance descriptor for LoadingView<A>);
    sub_648E0(&qword_322ED0, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322EB0);
  }
  return result;
}

unint64_t sub_C91EC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_322ED8;
  if (!qword_322ED8)
  {
    v1 = sub_667D0(&qword_322EE0);
    v2[0] = sub_667D0(&qword_322EE8);
    v2[1] = sub_C9280();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
    sub_C9444();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322ED8);
  }
  return result;
}

unint64_t sub_C9280()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_322EF0;
  if (!qword_322EF0)
  {
    v1 = sub_667D0(&qword_322EE8);
    v2[0] = sub_667D0(&qword_322EF8);
    v2[1] = sub_C9314();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.geometryCacheNamespace()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322EF0);
  }
  return result;
}

unint64_t sub_C9314()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_322F00;
  if (!qword_322F00)
  {
    v1 = sub_667D0(&qword_322EF8);
    v2[0] = sub_667D0(&qword_322F08);
    v2[1] = sub_C93C0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.observeAnalyticsVisibility()>>, 1);
    sub_67060(&qword_322F20, &qword_322F28, (uint64_t)&protocol conformance descriptor for _TaskValueModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322F00);
  }
  return result;
}

unint64_t sub_C93C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322F10;
  if (!qword_322F10)
  {
    v1 = sub_667D0(&qword_322F08);
    sub_648E0(&qword_322F18, type metadata accessor for PageView, (uint64_t)&unk_264520);
    sub_94EB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322F10);
  }
  return result;
}

unint64_t sub_C9444()
{
  unint64_t result;

  result = qword_322F30;
  if (!qword_322F30)
  {
    result = swift_getWitnessTable(&unk_25F5BC, &type metadata for PageNamespaceViewModifier);
    atomic_store(result, (unint64_t *)&qword_322F30);
  }
  return result;
}

unint64_t sub_C9488()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322F40;
  if (!qword_322F40)
  {
    v1 = sub_667D0(&qword_322F38);
    sub_C950C();
    sub_648E0(&qword_322ED0, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322F40);
  }
  return result;
}

unint64_t sub_C950C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_322F48;
  if (!qword_322F48)
  {
    v1 = sub_667D0(&qword_322F50);
    sub_648E0(&qword_322F58, type metadata accessor for PageErrorView, (uint64_t)&unk_260840);
    sub_94EB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322F48);
  }
  return result;
}

unint64_t sub_C9590()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[4];

  result = qword_322F70;
  if (!qword_322F70)
  {
    v1 = sub_667D0(&qword_322E40);
    v2 = sub_C9048();
    v3[0] = sub_667D0(&qword_322E38);
    v3[1] = sub_667D0(&qword_322F60);
    v3[2] = v2;
    v3[3] = sub_67060(&qword_322F68, &qword_322F60, (uint64_t)&protocol conformance descriptor for AnyIntentModel<A>);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.dispatch<A>(_:into:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_322F70);
  }
  return result;
}

uint64_t sub_C9664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char updated;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  int v38;
  char v39;
  __n128 v40;
  void (*v41)(char *, uint64_t, __n128);
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v4 = type metadata accessor for HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v65 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HostingControllerVisibilityStateManager.State(0);
  v62 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v68 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v61 = (char *)&v59 - v9;
  v69 = type metadata accessor for PageRootView(0);
  __chkstk_darwin(v69);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for HostProxy.Event(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_31EF08);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v64 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v59 - v19;
  sub_5E11C(a1, (uint64_t)v14, type metadata accessor for HostProxy.Event);
  if (swift_getEnumCaseMultiPayload(v14, v12) != 3)
    return sub_6685C((uint64_t)v14, type metadata accessor for HostProxy.Event);
  LODWORD(v60) = v14[*(int *)(sub_5C154(&qword_3217F8) + 48)];
  v63 = v16;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v14, v15);
  v21 = v15;
  updated = PageUpdateInstruction.affectsPageVisibility.getter(v15);
  sub_5E11C(a2, (uint64_t)v11, type metadata accessor for PageRootView);
  v23 = a2;
  v24 = (uint64_t)v20;
  if ((updated & 1) != 0)
  {
    v25 = &v11[*(int *)(v69 + 32)];
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    v28 = swift_retain(*(_QWORD *)v25);
    v29 = sub_77E94(v28, v27);
    v30 = swift_release(v26);
    v31 = v61;
    HostingControllerVisibilityStateManager.state.getter(v30);
    swift_release(v29);
    v32 = v62;
    (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v68, enum case for HostingControllerVisibilityStateManager.State.visible(_:), v6);
    v33 = sub_648E0((unint64_t *)&qword_323060, (uint64_t (*)(uint64_t))&type metadata accessor for HostingControllerVisibilityStateManager.State, (uint64_t)&protocol conformance descriptor for HostingControllerVisibilityStateManager.State);
    dispatch thunk of RawRepresentable.rawValue.getter(&v72, v6, v33);
    dispatch thunk of RawRepresentable.rawValue.getter(&v70, v6, v33);
    v34 = v73;
    v35 = v71;
    if (v72 == v70 && v73 == v71)
    {
      swift_bridgeObjectRelease_n(v73, 2);
      v36 = *(void (**)(char *, uint64_t))(v32 + 8);
      v36(v68, v6);
      v36(v31, v6);
      sub_6685C((uint64_t)v11, type metadata accessor for PageRootView);
LABEL_9:
      v42 = v23 + *(int *)(v69 + 32);
      v43 = *(_QWORD *)v42;
      v44 = *(_BYTE *)(v42 + 8);
      v45 = swift_retain(*(_QWORD *)v42);
      v46 = sub_77E94(v45, v44);
      swift_release(v43);
      v48 = v65;
      v47 = v66;
      v49 = v67;
      (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, enum case for HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent.onDisappear(_:), v67);
      HostingControllerVisibilityStateManager.signal(event:)(v48);
      swift_release(v46);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      v38 = 1;
      goto LABEL_10;
    }
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, v70, v71, 0);
    swift_bridgeObjectRelease(v34);
    v40 = swift_bridgeObjectRelease(v35);
    v41 = *(void (**)(char *, uint64_t, __n128))(v32 + 8);
    v41(v68, v6, v40);
    ((void (*)(char *, uint64_t))v41)(v31, v6);
    sub_6685C((uint64_t)v11, type metadata accessor for PageRootView);
    v38 = 0;
    if ((v39 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    sub_6685C((uint64_t)v11, type metadata accessor for PageRootView);
    v38 = 0;
  }
LABEL_10:
  PageContent.update(with:animated:)(v24, v60);
  v50 = v63;
  if (v38)
  {
    v51 = v23 + *(int *)(v69 + 32);
    v52 = *(_QWORD *)v51;
    v53 = *(_BYTE *)(v51 + 8);
    v54 = swift_retain(*(_QWORD *)v51);
    v55 = sub_77E94(v54, v53);
    swift_release(v52);
    v57 = v65;
    v56 = v66;
    v58 = v67;
    (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, enum case for HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent.onAppear(_:), v67);
    HostingControllerVisibilityStateManager.signal(event:)(v57);
    swift_release(v55);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v24, v21);
}

uint64_t sub_C9DBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v2, v3);
  sub_5C154(&qword_322E30);
  IntentResult.invalidate(clearing:)(0);
  sub_F56F4();
  return State.wrappedValue.setter(v2, v3);
}

uint64_t sub_C9E78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for HostProxy.Event(0);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v2[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_C9F08, v5, v6);
}

uint64_t sub_C9F08()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_BYTE **)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  v5 = *(_BYTE *)(v3 + *(int *)(type metadata accessor for Page(0) + 32));
  v6 = (uint64_t *)(v4 + *(int *)(type metadata accessor for PageRootView(0) + 28));
  v7 = *v6;
  LOBYTE(v4) = *((_BYTE *)v6 + 8);
  v8 = swift_retain(*v6);
  v9 = sub_78264(v8, v4);
  swift_release(v7);
  v10 = *(_QWORD *)(v9 + 16);
  swift_retain(v10);
  swift_release(v9);
  *v1 = v5;
  swift_storeEnumTagMultiPayload(v1, v2, 0);
  PassthroughSubject.send(_:)(v1);
  swift_release(v10);
  sub_6685C((uint64_t)v1, type metadata accessor for HostProxy.Event);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C9FE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for HostProxy.Event(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[5] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_CA078, v4, v5);
}

uint64_t sub_CA078()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_BYTE **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  v4 = (uint64_t *)(v3 + *(int *)(type metadata accessor for PageRootView(0) + 28));
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 8);
  v7 = swift_retain(*v4);
  v8 = sub_78264(v7, v6);
  swift_release(v5);
  v9 = *(_QWORD *)(v8 + 16);
  swift_retain(v9);
  swift_release(v8);
  *v1 = 0;
  swift_storeEnumTagMultiPayload(v1, v2, 0);
  PassthroughSubject.send(_:)(v1);
  swift_release(v9);
  sub_6685C((uint64_t)v1, type metadata accessor for HostProxy.Event);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CA144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageRootView(0) - 8) + 80);
  return sub_C9664(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_CA184()
{
  type metadata accessor for PageRootView(0);
  return sub_C9DBC();
}

uint64_t sub_CA1C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of PageRootView.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for PageRootView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  unsigned int (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t, __n128);
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t, __n128);
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int (*v147)(char *, uint64_t, uint64_t, __n128);
  __n128 v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t, __n128);
  __n128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t, __n128);
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  id v220;
  char *v222;
  char *v223;
  unsigned int (*v224)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v225)(_QWORD, _QWORD, _QWORD);
  int *v226;
  int *v227;
  char *v228;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;

  v3 = a2;
  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v14 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    v7 = (int *)type metadata accessor for PageContent.PageInfo(0);
    v8 = v7[5];
    v9 = (_QWORD *)(v4 + v8);
    v10 = (uint64_t *)((char *)v3 + v8);
    v11 = (int *)type metadata accessor for Page(0);
    v230 = *((_QWORD *)v11 - 1);
    v12 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v230 + 48);
    v231 = v3;
    v232 = v4;
    if (v12(v10, 1, v11))
    {
      v13 = sub_5C154(&qword_3217C0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v224 = v12;
      v226 = v7;
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = v11[5];
      v17 = (char *)v9 + v16;
      v18 = (char *)v10 + v16;
      v19 = type metadata accessor for LocalizerRequest(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
      v22 = swift_bridgeObjectRetain(v15);
      if (v21(v18, 1, v19, v22))
      {
        v23 = sub_5C154(&qword_3217B8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v24 = v11[6];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v21)((char *)v10 + v24, 1, v19))
      {
        v27 = sub_5C154(&qword_3217B8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v26, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, 0, 1, v19);
      }
      *((_BYTE *)v9 + v11[7]) = *((_BYTE *)v10 + v11[7]);
      *((_BYTE *)v9 + v11[8]) = *((_BYTE *)v10 + v11[8]);
      v28 = v11[9];
      v29 = (char *)v9 + v28;
      v30 = (char *)v10 + v28;
      v31 = type metadata accessor for ToolbarPrincipalType(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = sub_5C154(&qword_322F98);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v34 = v11[10];
      v35 = *(_QWORD *)((char *)v10 + v34);
      *(_QWORD *)((char *)v9 + v34) = v35;
      v36 = v11[11];
      v37 = *(_QWORD *)((char *)v10 + v36);
      *(_QWORD *)((char *)v9 + v36) = v37;
      *((_BYTE *)v9 + v11[12]) = *((_BYTE *)v10 + v11[12]);
      v38 = v11[13];
      v39 = *(_QWORD *)((char *)v10 + v38);
      *(_QWORD *)((char *)v9 + v38) = v39;
      v40 = v11[14];
      v41 = (_QWORD *)((char *)v9 + v40);
      v42 = (_QWORD *)((char *)v10 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = v11[15];
      v45 = (char *)v9 + v44;
      v222 = (char *)v10 + v44;
      v46 = type metadata accessor for PageData(0);
      v47 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v39);
      v48 = swift_bridgeObjectRetain(v43);
      v47(v45, v222, v46, v48);
      v49 = v11[16];
      v50 = *(_QWORD *)((char *)v10 + v49);
      *(_QWORD *)((char *)v9 + v49) = v50;
      v51 = v11[17];
      v52 = (char *)v9 + v51;
      v53 = (char *)v10 + v51;
      v54 = type metadata accessor for PageMetrics(0);
      v55 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v54 - 8) + 16);
      v56 = swift_bridgeObjectRetain(v50);
      v55(v52, v53, v54, v56);
      *((_BYTE *)v9 + v11[18]) = *((_BYTE *)v10 + v11[18]);
      v57 = v11[19];
      v58 = *(_QWORD *)((char *)v10 + v57);
      *(_QWORD *)((char *)v9 + v57) = v58;
      v59 = v11[20];
      v60 = *(_QWORD *)((char *)v10 + v59);
      *(_QWORD *)((char *)v9 + v59) = v60;
      *((_BYTE *)v9 + v11[21]) = *((_BYTE *)v10 + v11[21]);
      v61 = v11[22];
      v62 = (_QWORD *)((char *)v9 + v61);
      v63 = (_QWORD *)((char *)v10 + v61);
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      v65 = v11[23];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      v68 = *(_QWORD *)((char *)v10 + v65 + 8);
      swift_bridgeObjectRetain(v58);
      swift_retain(v60);
      swift_bridgeObjectRetain(v64);
      if (v68)
      {
        *(_QWORD *)v66 = *(_QWORD *)v67;
        *((_QWORD *)v66 + 1) = v68;
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        v69 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 4) = v69;
        swift_bridgeObjectRetain(v68);
        v70 = swift_bridgeObjectRetain(v69);
      }
      else
      {
        v70 = *(__n128 *)v67;
        v71 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v71;
        *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
      }
      v3 = v231;
      v4 = v232;
      v12 = v224;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v230 + 56))(v9, 0, 1, v11, v70);
      v7 = v226;
    }
    v72 = v7[6];
    v73 = (_QWORD *)(v4 + v72);
    v74 = (uint64_t *)((char *)v3 + v72);
    if (v12((char *)v3 + v72, 1, v11))
    {
      v75 = sub_5C154(&qword_3217C0);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v225 = v12;
      v227 = v7;
      v76 = v74[1];
      *v73 = *v74;
      v73[1] = v76;
      v77 = v11[5];
      v78 = (char *)v73 + v77;
      v79 = (char *)v74 + v77;
      v80 = type metadata accessor for LocalizerRequest(0);
      v81 = *(_QWORD *)(v80 - 8);
      v82 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v81 + 48);
      v83 = swift_bridgeObjectRetain(v76);
      if (v82(v79, 1, v80, v83))
      {
        v84 = sub_5C154(&qword_3217B8);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v79, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      }
      v85 = v11[6];
      v86 = (char *)v73 + v85;
      v87 = (char *)v74 + v85;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v82)((char *)v74 + v85, 1, v80))
      {
        v88 = sub_5C154(&qword_3217B8);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v86, v87, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v86, 0, 1, v80);
      }
      *((_BYTE *)v73 + v11[7]) = *((_BYTE *)v74 + v11[7]);
      *((_BYTE *)v73 + v11[8]) = *((_BYTE *)v74 + v11[8]);
      v89 = v11[9];
      v90 = (char *)v73 + v89;
      v91 = (char *)v74 + v89;
      v92 = type metadata accessor for ToolbarPrincipalType(0);
      v93 = *(_QWORD *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        v94 = sub_5C154(&qword_322F98);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v90, v91, v92);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
      }
      v95 = v11[10];
      v96 = *(_QWORD *)((char *)v74 + v95);
      *(_QWORD *)((char *)v73 + v95) = v96;
      v97 = v11[11];
      v98 = *(_QWORD *)((char *)v74 + v97);
      *(_QWORD *)((char *)v73 + v97) = v98;
      *((_BYTE *)v73 + v11[12]) = *((_BYTE *)v74 + v11[12]);
      v99 = v11[13];
      v100 = *(_QWORD *)((char *)v74 + v99);
      *(_QWORD *)((char *)v73 + v99) = v100;
      v101 = v11[14];
      v102 = (_QWORD *)((char *)v73 + v101);
      v103 = (_QWORD *)((char *)v74 + v101);
      v104 = v103[1];
      *v102 = *v103;
      v102[1] = v104;
      v105 = v11[15];
      v223 = (char *)v73 + v105;
      v106 = (char *)v74 + v105;
      v107 = type metadata accessor for PageData(0);
      v108 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v107 - 8) + 16);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v100);
      v109 = swift_bridgeObjectRetain(v104);
      v108(v223, v106, v107, v109);
      v110 = v11[16];
      v111 = *(_QWORD *)((char *)v74 + v110);
      *(_QWORD *)((char *)v73 + v110) = v111;
      v112 = v11[17];
      v113 = (char *)v73 + v112;
      v114 = (char *)v74 + v112;
      v115 = type metadata accessor for PageMetrics(0);
      v116 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v115 - 8) + 16);
      v117 = swift_bridgeObjectRetain(v111);
      v116(v113, v114, v115, v117);
      *((_BYTE *)v73 + v11[18]) = *((_BYTE *)v74 + v11[18]);
      v118 = v11[19];
      v119 = *(_QWORD *)((char *)v74 + v118);
      *(_QWORD *)((char *)v73 + v118) = v119;
      v120 = v11[20];
      v121 = *(_QWORD *)((char *)v74 + v120);
      *(_QWORD *)((char *)v73 + v120) = v121;
      *((_BYTE *)v73 + v11[21]) = *((_BYTE *)v74 + v11[21]);
      v122 = v11[22];
      v123 = (_QWORD *)((char *)v73 + v122);
      v124 = (_QWORD *)((char *)v74 + v122);
      v125 = v124[1];
      *v123 = *v124;
      v123[1] = v125;
      v126 = v11[23];
      v127 = (char *)v73 + v126;
      v128 = (char *)v74 + v126;
      v129 = *(_QWORD *)((char *)v74 + v126 + 8);
      swift_bridgeObjectRetain(v119);
      swift_retain(v121);
      swift_bridgeObjectRetain(v125);
      if (v129)
      {
        *(_QWORD *)v127 = *(_QWORD *)v128;
        *((_QWORD *)v127 + 1) = v129;
        *((_OWORD *)v127 + 1) = *((_OWORD *)v128 + 1);
        v130 = *((_QWORD *)v128 + 4);
        *((_QWORD *)v127 + 4) = v130;
        swift_bridgeObjectRetain(v129);
        v131 = swift_bridgeObjectRetain(v130);
      }
      else
      {
        v131 = *(__n128 *)v128;
        v132 = *((_OWORD *)v128 + 1);
        *(_OWORD *)v127 = *(_OWORD *)v128;
        *((_OWORD *)v127 + 1) = v132;
        *((_QWORD *)v127 + 4) = *((_QWORD *)v128 + 4);
      }
      v3 = v231;
      v4 = v232;
      v12 = v225;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v230 + 56))(v73, 0, 1, v11, v131);
      v7 = v227;
    }
    *(_BYTE *)(v4 + v7[7]) = *((_BYTE *)v3 + v7[7]);
    v133 = v7[8];
    v134 = v4 + v133;
    v135 = (uint64_t)v3 + v133;
    v136 = sub_5C154(&qword_322E30);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 16))(v134, v135, v136);
    v137 = v7[9];
    v138 = (_QWORD *)(v4 + v137);
    v139 = (uint64_t *)((char *)v3 + v137);
    if (v12((char *)v3 + v137, 1, v11))
    {
      v140 = sub_5C154(&qword_3217C0);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v141 = v139[1];
      *v138 = *v139;
      v138[1] = v141;
      v142 = v11[5];
      v143 = (char *)v138 + v142;
      v144 = (char *)v139 + v142;
      v145 = type metadata accessor for LocalizerRequest(0);
      v146 = *(_QWORD *)(v145 - 8);
      v147 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v146 + 48);
      v148 = swift_bridgeObjectRetain(v141);
      if (v147(v144, 1, v145, v148))
      {
        v149 = sub_5C154(&qword_3217B8);
        memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v143, v144, v145);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
      }
      v150 = v11[6];
      v151 = (char *)v138 + v150;
      v152 = (char *)v139 + v150;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v147)((char *)v139 + v150, 1, v145))
      {
        v153 = sub_5C154(&qword_3217B8);
        memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v151, v152, v145);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v151, 0, 1, v145);
      }
      *((_BYTE *)v138 + v11[7]) = *((_BYTE *)v139 + v11[7]);
      *((_BYTE *)v138 + v11[8]) = *((_BYTE *)v139 + v11[8]);
      v154 = v11[9];
      v155 = (char *)v138 + v154;
      v156 = (char *)v139 + v154;
      v157 = type metadata accessor for ToolbarPrincipalType(0);
      v158 = *(_QWORD *)(v157 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
      {
        v159 = sub_5C154(&qword_322F98);
        memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v155, v156, v157);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
      }
      v160 = v11[10];
      v161 = *(_QWORD *)((char *)v139 + v160);
      *(_QWORD *)((char *)v138 + v160) = v161;
      v162 = v11[11];
      v163 = *(_QWORD *)((char *)v139 + v162);
      *(_QWORD *)((char *)v138 + v162) = v163;
      *((_BYTE *)v138 + v11[12]) = *((_BYTE *)v139 + v11[12]);
      v164 = v11[13];
      v165 = *(_QWORD *)((char *)v139 + v164);
      *(_QWORD *)((char *)v138 + v164) = v165;
      v166 = v11[14];
      v167 = (_QWORD *)((char *)v138 + v166);
      v168 = (_QWORD *)((char *)v139 + v166);
      v169 = v168[1];
      *v167 = *v168;
      v167[1] = v169;
      v170 = v11[15];
      v228 = (char *)v138 + v170;
      v171 = (char *)v139 + v170;
      v172 = type metadata accessor for PageData(0);
      v173 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v172 - 8) + 16);
      swift_bridgeObjectRetain(v161);
      swift_bridgeObjectRetain(v163);
      swift_bridgeObjectRetain(v165);
      v174 = swift_bridgeObjectRetain(v169);
      v173(v228, v171, v172, v174);
      v175 = v11[16];
      v176 = *(_QWORD *)((char *)v139 + v175);
      *(_QWORD *)((char *)v138 + v175) = v176;
      v177 = v11[17];
      v178 = (char *)v138 + v177;
      v179 = (char *)v139 + v177;
      v180 = type metadata accessor for PageMetrics(0);
      v181 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v180 - 8) + 16);
      v182 = swift_bridgeObjectRetain(v176);
      v181(v178, v179, v180, v182);
      *((_BYTE *)v138 + v11[18]) = *((_BYTE *)v139 + v11[18]);
      v183 = v11[19];
      v184 = *(_QWORD *)((char *)v139 + v183);
      *(_QWORD *)((char *)v138 + v183) = v184;
      v185 = v11[20];
      v186 = *(_QWORD *)((char *)v139 + v185);
      *(_QWORD *)((char *)v138 + v185) = v186;
      *((_BYTE *)v138 + v11[21]) = *((_BYTE *)v139 + v11[21]);
      v187 = v11[22];
      v188 = (_QWORD *)((char *)v138 + v187);
      v189 = (_QWORD *)((char *)v139 + v187);
      v190 = v189[1];
      *v188 = *v189;
      v188[1] = v190;
      v191 = v11[23];
      v192 = (char *)v138 + v191;
      v193 = (char *)v139 + v191;
      v194 = *(_QWORD *)((char *)v139 + v191 + 8);
      swift_bridgeObjectRetain(v184);
      swift_retain(v186);
      swift_bridgeObjectRetain(v190);
      if (v194)
      {
        *(_QWORD *)v192 = *(_QWORD *)v193;
        *((_QWORD *)v192 + 1) = v194;
        *((_OWORD *)v192 + 1) = *((_OWORD *)v193 + 1);
        v195 = *((_QWORD *)v193 + 4);
        *((_QWORD *)v192 + 4) = v195;
        swift_bridgeObjectRetain(v194);
        v196 = swift_bridgeObjectRetain(v195);
      }
      else
      {
        v196 = *(__n128 *)v193;
        v197 = *((_OWORD *)v193 + 1);
        *(_OWORD *)v192 = *(_OWORD *)v193;
        *((_OWORD *)v192 + 1) = v197;
        *((_QWORD *)v192 + 4) = *((_QWORD *)v193 + 4);
      }
      v3 = v231;
      v4 = v232;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v230 + 56))(v138, 0, 1, v11, v196);
    }
    v198 = *(int *)(sub_5C154(&qword_3217C8) + 28);
    v199 = *(uint64_t *)((char *)v3 + v198);
    *(_QWORD *)(v4 + v198) = v199;
    v200 = *(int *)(type metadata accessor for PageContent(0) + 20);
    v201 = (char *)(v4 + v200);
    v202 = (char *)v3 + v200;
    v203 = type metadata accessor for BooksAlertAction(0);
    v204 = *(_QWORD *)(v203 - 8);
    v205 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48);
    swift_retain(v199);
    if (v205(v202, 1, v203))
    {
      v206 = sub_5C154(&qword_322FA0);
      memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v201, v202, v203);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v201, 0, 1, v203);
    }
    v207 = *(int *)(sub_5C154(&qword_322F80) + 28);
    v208 = *(_QWORD *)&v202[v207];
    *(_QWORD *)&v201[v207] = v208;
    v209 = a3[5];
    v210 = a3[6];
    v211 = *(uint64_t *)((char *)v3 + v209);
    *(_QWORD *)(v4 + v209) = v211;
    v212 = *(void **)((char *)v3 + v210);
    *(_QWORD *)(v4 + v210) = v212;
    v213 = a3[7];
    v214 = a3[8];
    v215 = v4 + v213;
    v216 = (uint64_t *)((char *)v3 + v213);
    v217 = *v216;
    LOBYTE(v216) = *((_BYTE *)v216 + 8);
    *(_QWORD *)v215 = v217;
    *(_BYTE *)(v215 + 8) = (_BYTE)v216;
    v218 = v4 + v214;
    v219 = (uint64_t *)((char *)v3 + v214);
    v14 = *v219;
    LOBYTE(v219) = *((_BYTE *)v219 + 8);
    *(_QWORD *)v218 = v14;
    *(_BYTE *)(v218 + 8) = (_BYTE)v219;
    swift_retain(v208);
    swift_retain(v211);
    v220 = v212;
    swift_retain(v217);
  }
  swift_retain(v14);
  return v4;
}

uint64_t destroy for PageRootView(_QWORD *a1, int *a2)
{
  int *v4;
  char *v5;
  int *v6;
  unsigned int (*v7)(char *, uint64_t, int *);
  __n128 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v5 = (char *)a1 + v4[5];
  v6 = (int *)type metadata accessor for Page(0);
  v7 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48);
  if (!v7(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v5 + 1));
    v9 = &v5[v6[5]];
    v10 = type metadata accessor for LocalizerRequest(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v13 = &v5[v6[6]];
    if (!v12(v13, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v14 = &v5[v6[9]];
    v15 = type metadata accessor for ToolbarPrincipalType(0);
    v16 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[14] + 8]);
    v17 = &v5[v6[15]];
    v18 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[16]]);
    v19 = &v5[v6[17]];
    v20 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[19]]);
    swift_release(*(_QWORD *)&v5[v6[20]]);
    v8 = swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[22] + 8]);
    v21 = &v5[v6[23]];
    v22 = *((_QWORD *)v21 + 1);
    if (v22)
    {
      swift_bridgeObjectRelease(v22);
      v8 = swift_bridgeObjectRelease(*((_QWORD *)v21 + 4));
    }
  }
  v23 = (char *)a1 + v4[6];
  if (!((unsigned int (*)(char *, uint64_t, int *, __n128))v7)(v23, 1, v6, v8))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v23 + 1));
    v24 = &v23[v6[5]];
    v25 = type metadata accessor for LocalizerRequest(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (!v27(v24, 1, v25))
      (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
    v28 = &v23[v6[6]];
    if (!v27(v28, 1, v25))
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    v29 = &v23[v6[9]];
    v30 = type metadata accessor for ToolbarPrincipalType(0);
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[14] + 8]);
    v32 = &v23[v6[15]];
    v33 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[16]]);
    v34 = &v23[v6[17]];
    v35 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[19]]);
    swift_release(*(_QWORD *)&v23[v6[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[22] + 8]);
    v36 = &v23[v6[23]];
    v37 = *((_QWORD *)v36 + 1);
    if (v37)
    {
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(*((_QWORD *)v36 + 4));
    }
  }
  v38 = (char *)a1 + v4[8];
  v39 = sub_5C154(&qword_322E30);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  v40 = (char *)a1 + v4[9];
  if (!v7(v40, 1, v6))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v40 + 1));
    v41 = &v40[v6[5]];
    v42 = type metadata accessor for LocalizerRequest(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    if (!v44(v41, 1, v42))
      (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
    v45 = &v40[v6[6]];
    if (!v44(v45, 1, v42))
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    v46 = &v40[v6[9]];
    v47 = type metadata accessor for ToolbarPrincipalType(0);
    v48 = *(_QWORD *)(v47 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[14] + 8]);
    v49 = &v40[v6[15]];
    v50 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[16]]);
    v51 = &v40[v6[17]];
    v52 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[19]]);
    swift_release(*(_QWORD *)&v40[v6[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[22] + 8]);
    v53 = &v40[v6[23]];
    v54 = *((_QWORD *)v53 + 1);
    if (v54)
    {
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(*((_QWORD *)v53 + 4));
    }
  }
  v55 = sub_5C154(&qword_3217C8);
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(v55 + 28)));
  v56 = (char *)a1 + *(int *)(type metadata accessor for PageContent(0) + 20);
  v57 = type metadata accessor for BooksAlertAction(0);
  v58 = *(_QWORD *)(v57 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
  v59 = sub_5C154(&qword_322F80);
  swift_release(*(_QWORD *)&v56[*(int *)(v59 + 28)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[5]));

  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  return swift_release(*(_QWORD *)((char *)a1 + a2[8]));
}

uint64_t initializeWithCopy for PageRootView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t, __n128);
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t, __n128);
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(char *, uint64_t, uint64_t, __n128);
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t, __n128);
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  void (*v179)(char *, char *, uint64_t, __n128);
  __n128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  __n128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int (*v203)(char *, uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  id v219;
  char *v221;
  char *v222;
  unsigned int (*v223)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v224)(_QWORD, _QWORD, _QWORD);
  int *v225;
  int *v226;
  char *v227;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v3 = a2;
  v4 = a1;
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  (**(void (***)(void))(v5 - 8))();
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v6[5];
  v8 = (_QWORD *)(v4 + v7);
  v9 = (_QWORD *)(v3 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v229 = *((_QWORD *)v10 - 1);
  v11 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v229 + 48);
  v230 = v3;
  v231 = v4;
  if (v11(v9, 1, v10))
  {
    v12 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v223 = v11;
    v225 = v6;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = v10[5];
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = type metadata accessor for LocalizerRequest(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17, v20))
    {
      v21 = sub_5C154(&qword_3217B8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v22 = v10[6];
    v23 = (char *)v8 + v22;
    v24 = (char *)v9 + v22;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)((char *)v9 + v22, 1, v17))
    {
      v25 = sub_5C154(&qword_3217B8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v24, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
    }
    *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
    *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
    v26 = v10[9];
    v27 = (char *)v8 + v26;
    v28 = (char *)v9 + v26;
    v29 = type metadata accessor for ToolbarPrincipalType(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_5C154(&qword_322F98);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v10[10];
    v33 = *(_QWORD *)((char *)v9 + v32);
    *(_QWORD *)((char *)v8 + v32) = v33;
    v34 = v10[11];
    v35 = *(_QWORD *)((char *)v9 + v34);
    *(_QWORD *)((char *)v8 + v34) = v35;
    *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
    v36 = v10[13];
    v37 = *(_QWORD *)((char *)v9 + v36);
    *(_QWORD *)((char *)v8 + v36) = v37;
    v38 = v10[14];
    v39 = (_QWORD *)((char *)v8 + v38);
    v40 = (_QWORD *)((char *)v9 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = v10[15];
    v43 = (char *)v8 + v42;
    v221 = (char *)v9 + v42;
    v44 = type metadata accessor for PageData(0);
    v45 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 16);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v37);
    v46 = swift_bridgeObjectRetain(v41);
    v45(v43, v221, v44, v46);
    v47 = v10[16];
    v48 = *(_QWORD *)((char *)v9 + v47);
    *(_QWORD *)((char *)v8 + v47) = v48;
    v49 = v10[17];
    v50 = (char *)v8 + v49;
    v51 = (char *)v9 + v49;
    v52 = type metadata accessor for PageMetrics(0);
    v53 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
    v54 = swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52, v54);
    *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
    v55 = v10[19];
    v56 = *(_QWORD *)((char *)v9 + v55);
    *(_QWORD *)((char *)v8 + v55) = v56;
    v57 = v10[20];
    v58 = *(_QWORD *)((char *)v9 + v57);
    *(_QWORD *)((char *)v8 + v57) = v58;
    *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
    v59 = v10[22];
    v60 = (_QWORD *)((char *)v8 + v59);
    v61 = (_QWORD *)((char *)v9 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = v10[23];
    v64 = (char *)v8 + v63;
    v65 = (char *)v9 + v63;
    v66 = *(_QWORD *)((char *)v9 + v63 + 8);
    swift_bridgeObjectRetain(v56);
    swift_retain(v58);
    swift_bridgeObjectRetain(v62);
    if (v66)
    {
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *((_QWORD *)v64 + 1) = v66;
      *((_OWORD *)v64 + 1) = *((_OWORD *)v65 + 1);
      v67 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 4) = v67;
      swift_bridgeObjectRetain(v66);
      v68 = swift_bridgeObjectRetain(v67);
    }
    else
    {
      v68 = *(__n128 *)v65;
      v69 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v69;
      *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
    }
    v3 = v230;
    v4 = v231;
    v11 = v223;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v229 + 56))(v8, 0, 1, v10, v68);
    v6 = v225;
  }
  v70 = v6[6];
  v71 = (_QWORD *)(v4 + v70);
  v72 = (_QWORD *)(v3 + v70);
  if (v11(v3 + v70, 1, v10))
  {
    v73 = sub_5C154(&qword_3217C0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    v224 = v11;
    v226 = v6;
    v74 = v72[1];
    *v71 = *v72;
    v71[1] = v74;
    v75 = v10[5];
    v76 = (char *)v71 + v75;
    v77 = (char *)v72 + v75;
    v78 = type metadata accessor for LocalizerRequest(0);
    v79 = *(_QWORD *)(v78 - 8);
    v80 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v79 + 48);
    v81 = swift_bridgeObjectRetain(v74);
    if (v80(v77, 1, v78, v81))
    {
      v82 = sub_5C154(&qword_3217B8);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    }
    v83 = v10[6];
    v84 = (char *)v71 + v83;
    v85 = (char *)v72 + v83;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v80)((char *)v72 + v83, 1, v78))
    {
      v86 = sub_5C154(&qword_3217B8);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v84, v85, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v84, 0, 1, v78);
    }
    *((_BYTE *)v71 + v10[7]) = *((_BYTE *)v72 + v10[7]);
    *((_BYTE *)v71 + v10[8]) = *((_BYTE *)v72 + v10[8]);
    v87 = v10[9];
    v88 = (char *)v71 + v87;
    v89 = (char *)v72 + v87;
    v90 = type metadata accessor for ToolbarPrincipalType(0);
    v91 = *(_QWORD *)(v90 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
    {
      v92 = sub_5C154(&qword_322F98);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v88, v89, v90);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
    }
    v93 = v10[10];
    v94 = *(_QWORD *)((char *)v72 + v93);
    *(_QWORD *)((char *)v71 + v93) = v94;
    v95 = v10[11];
    v96 = *(_QWORD *)((char *)v72 + v95);
    *(_QWORD *)((char *)v71 + v95) = v96;
    *((_BYTE *)v71 + v10[12]) = *((_BYTE *)v72 + v10[12]);
    v97 = v10[13];
    v98 = *(_QWORD *)((char *)v72 + v97);
    *(_QWORD *)((char *)v71 + v97) = v98;
    v99 = v10[14];
    v100 = (_QWORD *)((char *)v71 + v99);
    v101 = (_QWORD *)((char *)v72 + v99);
    v102 = v101[1];
    *v100 = *v101;
    v100[1] = v102;
    v103 = v10[15];
    v222 = (char *)v71 + v103;
    v104 = (char *)v72 + v103;
    v105 = type metadata accessor for PageData(0);
    v106 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v105 - 8) + 16);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v98);
    v107 = swift_bridgeObjectRetain(v102);
    v106(v222, v104, v105, v107);
    v108 = v10[16];
    v109 = *(_QWORD *)((char *)v72 + v108);
    *(_QWORD *)((char *)v71 + v108) = v109;
    v110 = v10[17];
    v111 = (char *)v71 + v110;
    v112 = (char *)v72 + v110;
    v113 = type metadata accessor for PageMetrics(0);
    v114 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v113 - 8) + 16);
    v115 = swift_bridgeObjectRetain(v109);
    v114(v111, v112, v113, v115);
    *((_BYTE *)v71 + v10[18]) = *((_BYTE *)v72 + v10[18]);
    v116 = v10[19];
    v117 = *(_QWORD *)((char *)v72 + v116);
    *(_QWORD *)((char *)v71 + v116) = v117;
    v118 = v10[20];
    v119 = *(_QWORD *)((char *)v72 + v118);
    *(_QWORD *)((char *)v71 + v118) = v119;
    *((_BYTE *)v71 + v10[21]) = *((_BYTE *)v72 + v10[21]);
    v120 = v10[22];
    v121 = (_QWORD *)((char *)v71 + v120);
    v122 = (_QWORD *)((char *)v72 + v120);
    v123 = v122[1];
    *v121 = *v122;
    v121[1] = v123;
    v124 = v10[23];
    v125 = (char *)v71 + v124;
    v126 = (char *)v72 + v124;
    v127 = *(_QWORD *)((char *)v72 + v124 + 8);
    swift_bridgeObjectRetain(v117);
    swift_retain(v119);
    swift_bridgeObjectRetain(v123);
    if (v127)
    {
      *(_QWORD *)v125 = *(_QWORD *)v126;
      *((_QWORD *)v125 + 1) = v127;
      *((_OWORD *)v125 + 1) = *((_OWORD *)v126 + 1);
      v128 = *((_QWORD *)v126 + 4);
      *((_QWORD *)v125 + 4) = v128;
      swift_bridgeObjectRetain(v127);
      v129 = swift_bridgeObjectRetain(v128);
    }
    else
    {
      v129 = *(__n128 *)v126;
      v130 = *((_OWORD *)v126 + 1);
      *(_OWORD *)v125 = *(_OWORD *)v126;
      *((_OWORD *)v125 + 1) = v130;
      *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
    }
    v3 = v230;
    v4 = v231;
    v11 = v224;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v229 + 56))(v71, 0, 1, v10, v129);
    v6 = v226;
  }
  *(_BYTE *)(v4 + v6[7]) = *(_BYTE *)(v3 + v6[7]);
  v131 = v6[8];
  v132 = v4 + v131;
  v133 = v3 + v131;
  v134 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v132, v133, v134);
  v135 = v6[9];
  v136 = (_QWORD *)(v4 + v135);
  v137 = (_QWORD *)(v3 + v135);
  if (v11(v3 + v135, 1, v10))
  {
    v138 = sub_5C154(&qword_3217C0);
    memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
  }
  else
  {
    v139 = v137[1];
    *v136 = *v137;
    v136[1] = v139;
    v140 = v10[5];
    v141 = (char *)v136 + v140;
    v142 = (char *)v137 + v140;
    v143 = type metadata accessor for LocalizerRequest(0);
    v144 = *(_QWORD *)(v143 - 8);
    v145 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v144 + 48);
    v146 = swift_bridgeObjectRetain(v139);
    if (v145(v142, 1, v143, v146))
    {
      v147 = sub_5C154(&qword_3217B8);
      memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v142, v143);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
    }
    v148 = v10[6];
    v149 = (char *)v136 + v148;
    v150 = (char *)v137 + v148;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v145)((char *)v137 + v148, 1, v143))
    {
      v151 = sub_5C154(&qword_3217B8);
      memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v149, v150, v143);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v149, 0, 1, v143);
    }
    *((_BYTE *)v136 + v10[7]) = *((_BYTE *)v137 + v10[7]);
    *((_BYTE *)v136 + v10[8]) = *((_BYTE *)v137 + v10[8]);
    v152 = v10[9];
    v153 = (char *)v136 + v152;
    v154 = (char *)v137 + v152;
    v155 = type metadata accessor for ToolbarPrincipalType(0);
    v156 = *(_QWORD *)(v155 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
    {
      v157 = sub_5C154(&qword_322F98);
      memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v153, v154, v155);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
    }
    v158 = v10[10];
    v159 = *(_QWORD *)((char *)v137 + v158);
    *(_QWORD *)((char *)v136 + v158) = v159;
    v160 = v10[11];
    v161 = *(_QWORD *)((char *)v137 + v160);
    *(_QWORD *)((char *)v136 + v160) = v161;
    *((_BYTE *)v136 + v10[12]) = *((_BYTE *)v137 + v10[12]);
    v162 = v10[13];
    v163 = *(_QWORD *)((char *)v137 + v162);
    *(_QWORD *)((char *)v136 + v162) = v163;
    v164 = v10[14];
    v165 = (_QWORD *)((char *)v136 + v164);
    v166 = (_QWORD *)((char *)v137 + v164);
    v167 = v166[1];
    *v165 = *v166;
    v165[1] = v167;
    v168 = v10[15];
    v227 = (char *)v136 + v168;
    v169 = (char *)v137 + v168;
    v170 = type metadata accessor for PageData(0);
    v171 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v170 - 8) + 16);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v161);
    swift_bridgeObjectRetain(v163);
    v172 = swift_bridgeObjectRetain(v167);
    v171(v227, v169, v170, v172);
    v173 = v10[16];
    v174 = *(_QWORD *)((char *)v137 + v173);
    *(_QWORD *)((char *)v136 + v173) = v174;
    v175 = v10[17];
    v176 = (char *)v136 + v175;
    v177 = (char *)v137 + v175;
    v178 = type metadata accessor for PageMetrics(0);
    v179 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v178 - 8) + 16);
    v180 = swift_bridgeObjectRetain(v174);
    v179(v176, v177, v178, v180);
    *((_BYTE *)v136 + v10[18]) = *((_BYTE *)v137 + v10[18]);
    v181 = v10[19];
    v182 = *(_QWORD *)((char *)v137 + v181);
    *(_QWORD *)((char *)v136 + v181) = v182;
    v183 = v10[20];
    v184 = *(_QWORD *)((char *)v137 + v183);
    *(_QWORD *)((char *)v136 + v183) = v184;
    *((_BYTE *)v136 + v10[21]) = *((_BYTE *)v137 + v10[21]);
    v185 = v10[22];
    v186 = (_QWORD *)((char *)v136 + v185);
    v187 = (_QWORD *)((char *)v137 + v185);
    v188 = v187[1];
    *v186 = *v187;
    v186[1] = v188;
    v189 = v10[23];
    v190 = (char *)v136 + v189;
    v191 = (char *)v137 + v189;
    v192 = *(_QWORD *)((char *)v137 + v189 + 8);
    swift_bridgeObjectRetain(v182);
    swift_retain(v184);
    swift_bridgeObjectRetain(v188);
    if (v192)
    {
      *(_QWORD *)v190 = *(_QWORD *)v191;
      *((_QWORD *)v190 + 1) = v192;
      *((_OWORD *)v190 + 1) = *((_OWORD *)v191 + 1);
      v193 = *((_QWORD *)v191 + 4);
      *((_QWORD *)v190 + 4) = v193;
      swift_bridgeObjectRetain(v192);
      v194 = swift_bridgeObjectRetain(v193);
    }
    else
    {
      v194 = *(__n128 *)v191;
      v195 = *((_OWORD *)v191 + 1);
      *(_OWORD *)v190 = *(_OWORD *)v191;
      *((_OWORD *)v190 + 1) = v195;
      *((_QWORD *)v190 + 4) = *((_QWORD *)v191 + 4);
    }
    v3 = v230;
    v4 = v231;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v229 + 56))(v136, 0, 1, v10, v194);
  }
  v196 = *(int *)(sub_5C154(&qword_3217C8) + 28);
  v197 = *(_QWORD *)(v3 + v196);
  *(_QWORD *)(v4 + v196) = v197;
  v198 = *(int *)(type metadata accessor for PageContent(0) + 20);
  v199 = (char *)(v4 + v198);
  v200 = (char *)(v3 + v198);
  v201 = type metadata accessor for BooksAlertAction(0);
  v202 = *(_QWORD *)(v201 - 8);
  v203 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48);
  swift_retain(v197);
  if (v203(v200, 1, v201))
  {
    v204 = sub_5C154(&qword_322FA0);
    memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v199, v200, v201);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v199, 0, 1, v201);
  }
  v205 = *(int *)(sub_5C154(&qword_322F80) + 28);
  v206 = *(_QWORD *)&v200[v205];
  *(_QWORD *)&v199[v205] = v206;
  v207 = a3[5];
  v208 = a3[6];
  v209 = *(_QWORD *)(v3 + v207);
  *(_QWORD *)(v4 + v207) = v209;
  v210 = *(void **)(v3 + v208);
  *(_QWORD *)(v4 + v208) = v210;
  v211 = a3[7];
  v212 = a3[8];
  v213 = v4 + v211;
  v214 = (uint64_t *)(v3 + v211);
  v215 = *v214;
  LOBYTE(v214) = *((_BYTE *)v214 + 8);
  *(_QWORD *)v213 = v215;
  *(_BYTE *)(v213 + 8) = (_BYTE)v214;
  v216 = v4 + v212;
  v217 = (uint64_t *)(v3 + v212);
  v218 = *v217;
  LOBYTE(v217) = *((_BYTE *)v217 + 8);
  *(_QWORD *)v216 = v218;
  *(_BYTE *)(v216 + 8) = (_BYTE)v217;
  swift_retain(v206);
  swift_retain(v209);
  v219 = v210;
  swift_retain(v215);
  swift_retain(v218);
  return v4;
}

_QWORD *assignWithCopy for PageRootView(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t (*v11)(_QWORD *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t, __n128);
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(char *, uint64_t, uint64_t, __n128);
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(_QWORD *, uint64_t, int *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t, uint64_t);
  int v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t, __n128);
  __n128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t, __n128);
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __n128 v156;
  __int128 v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int (*v172)(char *, uint64_t, uint64_t, __n128);
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(char *, uint64_t, uint64_t);
  int v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  void (*v208)(char *, char *, uint64_t, __n128);
  __n128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  void (*v216)(char *, char *, uint64_t, __n128);
  __n128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __n128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t (*v242)(char *, uint64_t, uint64_t);
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  void *v253;
  id v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t (*v290)(char *, uint64_t, uint64_t);
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t (*v299)(char *, uint64_t, uint64_t);
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t (*v308)(char *, uint64_t, uint64_t);
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  _QWORD *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  _QWORD *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  _QWORD *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  __int128 v455;
  uint64_t v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  char *v464;
  char *v465;
  uint64_t (*v466)(_QWORD *, uint64_t, int *);
  uint64_t (*v467)(_QWORD *, uint64_t, int *);
  uint64_t (*v468)(_QWORD *, uint64_t, int *);
  int *v469;
  int *v470;
  int *v471;
  int *v472;
  char *v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  int *v479;
  _QWORD *v480;

  v4 = a2;
  v5 = a1;
  sub_65938(a1, a2);
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v6[5];
  v8 = (_QWORD *)((char *)v5 + v7);
  v9 = (_QWORD *)((char *)v4 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v478 = *((_QWORD *)v10 - 1);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v478 + 48);
  v12 = v11(v8, 1, v10);
  v13 = v11(v9, 1, v10);
  v479 = a3;
  v480 = v4;
  if (v12)
  {
    if (!v13)
    {
      v466 = v11;
      v474 = v5;
      *v8 = *v9;
      v14 = v9[1];
      v8[1] = v14;
      v15 = v10[5];
      v16 = (char *)v8 + v15;
      v17 = (char *)v9 + v15;
      v18 = type metadata accessor for LocalizerRequest(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v19 + 48);
      v21 = swift_bridgeObjectRetain(v14);
      if (v20(v17, 1, v18, v21))
      {
        v22 = sub_5C154(&qword_3217B8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v35 = v10[6];
      v36 = (char *)v8 + v35;
      v37 = (char *)v9 + v35;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v20)((char *)v9 + v35, 1, v18))
      {
        v38 = sub_5C154(&qword_3217B8);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v36, v37, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v36, 0, 1, v18);
      }
      *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
      *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
      v39 = v10[9];
      v40 = (char *)v8 + v39;
      v41 = (char *)v9 + v39;
      v42 = type metadata accessor for ToolbarPrincipalType(0);
      v43 = *(_QWORD *)(v42 - 8);
      v470 = v6;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = sub_5C154(&qword_322F98);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v45 = v10[10];
      v46 = *(_QWORD *)((char *)v9 + v45);
      *(_QWORD *)((char *)v8 + v45) = v46;
      v47 = v10[11];
      v48 = *(_QWORD *)((char *)v9 + v47);
      *(_QWORD *)((char *)v8 + v47) = v48;
      *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
      v49 = v10[13];
      v50 = *(_QWORD *)((char *)v9 + v49);
      *(_QWORD *)((char *)v8 + v49) = v50;
      v51 = v10[14];
      v52 = (_QWORD *)((char *)v8 + v51);
      v53 = (_QWORD *)((char *)v9 + v51);
      *v52 = *v53;
      v54 = v53[1];
      v52[1] = v54;
      v55 = v10[15];
      v56 = (char *)v8 + v55;
      v464 = (char *)v9 + v55;
      v57 = type metadata accessor for PageData(0);
      v58 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v57 - 8) + 16);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v50);
      v59 = swift_bridgeObjectRetain(v54);
      v58(v56, v464, v57, v59);
      v60 = v10[16];
      v61 = *(_QWORD *)((char *)v9 + v60);
      *(_QWORD *)((char *)v8 + v60) = v61;
      v62 = v10[17];
      v63 = (char *)v8 + v62;
      v64 = (char *)v9 + v62;
      v65 = type metadata accessor for PageMetrics(0);
      v66 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v65 - 8) + 16);
      v67 = swift_bridgeObjectRetain(v61);
      v66(v63, v64, v65, v67);
      *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
      v68 = v10[19];
      v69 = *(_QWORD *)((char *)v9 + v68);
      *(_QWORD *)((char *)v8 + v68) = v69;
      v70 = v10[20];
      v71 = *(_QWORD *)((char *)v9 + v70);
      *(_QWORD *)((char *)v8 + v70) = v71;
      *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
      v72 = v10[22];
      v73 = (_QWORD *)((char *)v8 + v72);
      v74 = (_QWORD *)((char *)v9 + v72);
      *v73 = *v74;
      v75 = v74[1];
      v73[1] = v75;
      v76 = v10[23];
      v77 = (_QWORD *)((char *)v8 + v76);
      v78 = (_QWORD *)((char *)v9 + v76);
      v79 = *(_QWORD *)((char *)v9 + v76 + 8);
      swift_bridgeObjectRetain(v69);
      swift_retain(v71);
      swift_bridgeObjectRetain(v75);
      if (v79)
      {
        *v77 = *v78;
        v80 = v78[1];
        v77[1] = v80;
        v77[2] = v78[2];
        v77[3] = v78[3];
        v81 = v78[4];
        v77[4] = v81;
        swift_bridgeObjectRetain(v80);
        v82 = swift_bridgeObjectRetain(v81);
      }
      else
      {
        v82 = *(__n128 *)v78;
        v83 = *((_OWORD *)v78 + 1);
        v77[4] = v78[4];
        *(__n128 *)v77 = v82;
        *((_OWORD *)v77 + 1) = v83;
      }
      v5 = v474;
      v4 = v480;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v478 + 56))(v8, 0, 1, v10, v82);
      v11 = v466;
      v6 = v470;
      goto LABEL_22;
    }
LABEL_7:
    v23 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_22;
  }
  if (v13)
  {
    sub_6685C((uint64_t)v8, type metadata accessor for Page);
    goto LABEL_7;
  }
  v467 = v11;
  v469 = v6;
  v24 = v5;
  *v8 = *v9;
  v25 = v9[1];
  v26 = v8[1];
  v8[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v10[5];
  v28 = (char *)v8 + v27;
  v29 = (char *)v9 + v27;
  v30 = type metadata accessor for LocalizerRequest(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_74:
    v266 = sub_5C154(&qword_3217B8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v28, v29, v30);
LABEL_75:
  v267 = v10[6];
  v268 = (char *)v8 + v267;
  v269 = (char *)v9 + v267;
  v270 = v32((char *)v8 + v267, 1, v30);
  v271 = v32(v269, 1, v30);
  if (v270)
  {
    if (!v271)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v268, v269, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v268, 0, 1, v30);
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  if (v271)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v268, v30);
LABEL_92:
    v284 = sub_5C154(&qword_3217B8);
    memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
    goto LABEL_93;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v268, v269, v30);
LABEL_93:
  *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
  *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
  v285 = v10[9];
  v286 = (char *)v8 + v285;
  v287 = (char *)v9 + v285;
  v288 = type metadata accessor for ToolbarPrincipalType(0);
  v289 = *(_QWORD *)(v288 - 8);
  v290 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v289 + 48);
  v291 = v290(v286, 1, v288);
  v292 = v290(v287, 1, v288);
  if (v291)
  {
    if (!v292)
    {
      (*(void (**)(char *, char *, uint64_t))(v289 + 16))(v286, v287, v288);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v289 + 56))(v286, 0, 1, v288);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v292)
  {
    (*(void (**)(char *, uint64_t))(v289 + 8))(v286, v288);
LABEL_110:
    v311 = sub_5C154(&qword_322F98);
    memcpy(v286, v287, *(_QWORD *)(*(_QWORD *)(v311 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v289 + 24))(v286, v287, v288);
LABEL_111:
  v312 = v10[10];
  v313 = *(_QWORD *)((char *)v9 + v312);
  v314 = *(_QWORD *)((char *)v8 + v312);
  *(_QWORD *)((char *)v8 + v312) = v313;
  swift_bridgeObjectRetain(v313);
  swift_bridgeObjectRelease(v314);
  v315 = v10[11];
  v316 = *(_QWORD *)((char *)v9 + v315);
  v317 = *(_QWORD *)((char *)v8 + v315);
  *(_QWORD *)((char *)v8 + v315) = v316;
  swift_bridgeObjectRetain(v316);
  swift_bridgeObjectRelease(v317);
  *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
  v318 = v10[13];
  v319 = *(_QWORD *)((char *)v9 + v318);
  v320 = *(_QWORD *)((char *)v8 + v318);
  *(_QWORD *)((char *)v8 + v318) = v319;
  swift_bridgeObjectRetain(v319);
  swift_bridgeObjectRelease(v320);
  v321 = v10[14];
  v322 = (_QWORD *)((char *)v8 + v321);
  v323 = (_QWORD *)((char *)v9 + v321);
  *v322 = *v323;
  v324 = v323[1];
  v325 = v322[1];
  v322[1] = v324;
  swift_bridgeObjectRetain(v324);
  swift_bridgeObjectRelease(v325);
  v326 = v10[15];
  v327 = (char *)v8 + v326;
  v328 = (char *)v9 + v326;
  v329 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 - 8) + 24))(v327, v328, v329);
  v330 = v10[16];
  v331 = *(_QWORD *)((char *)v9 + v330);
  v332 = *(_QWORD *)((char *)v8 + v330);
  *(_QWORD *)((char *)v8 + v330) = v331;
  swift_bridgeObjectRetain(v331);
  swift_bridgeObjectRelease(v332);
  v333 = v10[17];
  v334 = (char *)v8 + v333;
  v335 = (char *)v9 + v333;
  v336 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v336 - 8) + 24))(v334, v335, v336);
  *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
  v337 = v10[19];
  v338 = *(_QWORD *)((char *)v9 + v337);
  v339 = *(_QWORD *)((char *)v8 + v337);
  *(_QWORD *)((char *)v8 + v337) = v338;
  swift_bridgeObjectRetain(v338);
  swift_bridgeObjectRelease(v339);
  v340 = v10[20];
  v341 = *(_QWORD *)((char *)v9 + v340);
  v342 = *(_QWORD *)((char *)v8 + v340);
  *(_QWORD *)((char *)v8 + v340) = v341;
  swift_retain(v341);
  swift_release(v342);
  *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
  v343 = v10[22];
  v344 = (_QWORD *)((char *)v8 + v343);
  v345 = (_QWORD *)((char *)v9 + v343);
  *v344 = *v345;
  v346 = v345[1];
  v347 = v344[1];
  v344[1] = v346;
  swift_bridgeObjectRetain(v346);
  swift_bridgeObjectRelease(v347);
  v348 = v10[23];
  v349 = (_QWORD *)((char *)v8 + v348);
  v350 = (_QWORD *)((char *)v9 + v348);
  v351 = v349[1];
  v352 = v350[1];
  v5 = v24;
  v4 = v480;
  if (v351)
  {
    v6 = v469;
    if (v352)
    {
      *v349 = *v350;
      v353 = v350[1];
      v349[1] = v353;
      swift_bridgeObjectRetain(v353);
      swift_bridgeObjectRelease(v351);
      v349[2] = v350[2];
      v349[3] = v350[3];
      v354 = v350[4];
      v355 = v349[4];
      v349[4] = v354;
      swift_bridgeObjectRetain(v354);
      swift_bridgeObjectRelease(v355);
    }
    else
    {
      sub_984B0((uint64_t)v349);
      v452 = v350[4];
      v453 = *((_OWORD *)v350 + 1);
      *(_OWORD *)v349 = *(_OWORD *)v350;
      *((_OWORD *)v349 + 1) = v453;
      v349[4] = v452;
    }
    v11 = v467;
  }
  else
  {
    v6 = v469;
    if (v352)
    {
      *v349 = *v350;
      v446 = v350[1];
      v349[1] = v446;
      v349[2] = v350[2];
      v349[3] = v350[3];
      v447 = v350[4];
      v349[4] = v447;
      swift_bridgeObjectRetain(v446);
      swift_bridgeObjectRetain(v447);
    }
    else
    {
      v458 = *(_OWORD *)v350;
      v459 = *((_OWORD *)v350 + 1);
      v349[4] = v350[4];
      *(_OWORD *)v349 = v458;
      *((_OWORD *)v349 + 1) = v459;
    }
    v11 = v467;
  }
LABEL_22:
  v84 = v6[6];
  v85 = (char *)v5 + v84;
  v86 = (_QWORD *)((char *)v4 + v84);
  v87 = v11((_QWORD *)((char *)v5 + v84), 1, v10);
  v88 = v11(v86, 1, v10);
  if (!v87)
  {
    if (v88)
    {
      sub_6685C((uint64_t)v85, type metadata accessor for Page);
      goto LABEL_28;
    }
    v471 = v6;
    v476 = v5;
    v99 = v11;
    *(_QWORD *)v85 = *v86;
    v100 = v86[1];
    v101 = *((_QWORD *)v85 + 1);
    *((_QWORD *)v85 + 1) = v100;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRelease(v101);
    v102 = v10[5];
    v103 = &v85[v102];
    v104 = (char *)v86 + v102;
    v105 = type metadata accessor for LocalizerRequest(0);
    v106 = *(_QWORD *)(v105 - 8);
    v107 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48);
    LODWORD(v101) = v107(v103, 1, v105);
    v108 = v107(v104, 1, v105);
    if ((_DWORD)v101)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v104, v105);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        goto LABEL_81;
      }
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 24))(v103, v104, v105);
LABEL_81:
        v273 = v10[6];
        v274 = &v85[v273];
        v275 = (char *)v86 + v273;
        v276 = v107(&v85[v273], 1, v105);
        v277 = v107(v275, 1, v105);
        if (v276)
        {
          if (!v277)
          {
            (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v274, v275, v105);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v274, 0, 1, v105);
            goto LABEL_99;
          }
        }
        else
        {
          if (!v277)
          {
            (*(void (**)(char *, char *, uint64_t))(v106 + 24))(v274, v275, v105);
LABEL_99:
            v85[v10[7]] = *((_BYTE *)v86 + v10[7]);
            v85[v10[8]] = *((_BYTE *)v86 + v10[8]);
            v294 = v10[9];
            v295 = &v85[v294];
            v296 = (char *)v86 + v294;
            v297 = type metadata accessor for ToolbarPrincipalType(0);
            v298 = *(_QWORD *)(v297 - 8);
            v299 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v298 + 48);
            v300 = v299(v295, 1, v297);
            v301 = v299(v296, 1, v297);
            v11 = v99;
            if (v300)
            {
              if (!v301)
              {
                (*(void (**)(char *, char *, uint64_t))(v298 + 16))(v295, v296, v297);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v298 + 56))(v295, 0, 1, v297);
                goto LABEL_118;
              }
            }
            else
            {
              if (!v301)
              {
                (*(void (**)(char *, char *, uint64_t))(v298 + 24))(v295, v296, v297);
LABEL_118:
                v6 = v471;
                v357 = v10[10];
                v358 = *(_QWORD *)((char *)v86 + v357);
                v359 = *(_QWORD *)&v85[v357];
                *(_QWORD *)&v85[v357] = v358;
                swift_bridgeObjectRetain(v358);
                swift_bridgeObjectRelease(v359);
                v360 = v10[11];
                v361 = *(_QWORD *)((char *)v86 + v360);
                v362 = *(_QWORD *)&v85[v360];
                *(_QWORD *)&v85[v360] = v361;
                swift_bridgeObjectRetain(v361);
                swift_bridgeObjectRelease(v362);
                v85[v10[12]] = *((_BYTE *)v86 + v10[12]);
                v363 = v10[13];
                v364 = *(_QWORD *)((char *)v86 + v363);
                v365 = *(_QWORD *)&v85[v363];
                *(_QWORD *)&v85[v363] = v364;
                swift_bridgeObjectRetain(v364);
                swift_bridgeObjectRelease(v365);
                v366 = v10[14];
                v367 = &v85[v366];
                v368 = (_QWORD *)((char *)v86 + v366);
                *(_QWORD *)v367 = *v368;
                v369 = v368[1];
                v370 = *((_QWORD *)v367 + 1);
                *((_QWORD *)v367 + 1) = v369;
                swift_bridgeObjectRetain(v369);
                swift_bridgeObjectRelease(v370);
                v371 = v10[15];
                v372 = &v85[v371];
                v373 = (char *)v86 + v371;
                v374 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v374 - 8) + 24))(v372, v373, v374);
                v375 = v10[16];
                v376 = *(_QWORD *)((char *)v86 + v375);
                v377 = *(_QWORD *)&v85[v375];
                *(_QWORD *)&v85[v375] = v376;
                swift_bridgeObjectRetain(v376);
                swift_bridgeObjectRelease(v377);
                v378 = v10[17];
                v379 = &v85[v378];
                v380 = (char *)v86 + v378;
                v381 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v381 - 8) + 24))(v379, v380, v381);
                v85[v10[18]] = *((_BYTE *)v86 + v10[18]);
                v382 = v10[19];
                v383 = *(_QWORD *)((char *)v86 + v382);
                v384 = *(_QWORD *)&v85[v382];
                *(_QWORD *)&v85[v382] = v383;
                swift_bridgeObjectRetain(v383);
                swift_bridgeObjectRelease(v384);
                v385 = v10[20];
                v386 = *(_QWORD *)((char *)v86 + v385);
                v387 = *(_QWORD *)&v85[v385];
                *(_QWORD *)&v85[v385] = v386;
                swift_retain(v386);
                swift_release(v387);
                v85[v10[21]] = *((_BYTE *)v86 + v10[21]);
                v388 = v10[22];
                v389 = &v85[v388];
                v390 = (_QWORD *)((char *)v86 + v388);
                *(_QWORD *)v389 = *v390;
                v391 = v390[1];
                v392 = *((_QWORD *)v389 + 1);
                *((_QWORD *)v389 + 1) = v391;
                swift_bridgeObjectRetain(v391);
                swift_bridgeObjectRelease(v392);
                v393 = v10[23];
                v394 = &v85[v393];
                v395 = (_QWORD *)((char *)v86 + v393);
                v396 = *((_QWORD *)v394 + 1);
                v397 = v395[1];
                v5 = v476;
                v4 = v480;
                if (v396)
                {
                  if (v397)
                  {
                    *(_QWORD *)v394 = *v395;
                    v398 = v395[1];
                    *((_QWORD *)v394 + 1) = v398;
                    swift_bridgeObjectRetain(v398);
                    swift_bridgeObjectRelease(v396);
                    *((_QWORD *)v394 + 2) = v395[2];
                    *((_QWORD *)v394 + 3) = v395[3];
                    v399 = v395[4];
                    v400 = *((_QWORD *)v394 + 4);
                    *((_QWORD *)v394 + 4) = v399;
                    swift_bridgeObjectRetain(v399);
                    swift_bridgeObjectRelease(v400);
                  }
                  else
                  {
                    sub_984B0((uint64_t)v394);
                    v454 = v395[4];
                    v455 = *((_OWORD *)v395 + 1);
                    *(_OWORD *)v394 = *(_OWORD *)v395;
                    *((_OWORD *)v394 + 1) = v455;
                    *((_QWORD *)v394 + 4) = v454;
                  }
                }
                else if (v397)
                {
                  *(_QWORD *)v394 = *v395;
                  v448 = v395[1];
                  *((_QWORD *)v394 + 1) = v448;
                  *((_QWORD *)v394 + 2) = v395[2];
                  *((_QWORD *)v394 + 3) = v395[3];
                  v449 = v395[4];
                  *((_QWORD *)v394 + 4) = v449;
                  swift_bridgeObjectRetain(v448);
                  swift_bridgeObjectRetain(v449);
                }
                else
                {
                  v460 = *(_OWORD *)v395;
                  v461 = *((_OWORD *)v395 + 1);
                  *((_QWORD *)v394 + 4) = v395[4];
                  *(_OWORD *)v394 = v460;
                  *((_OWORD *)v394 + 1) = v461;
                }
                goto LABEL_43;
              }
              (*(void (**)(char *, uint64_t))(v298 + 8))(v295, v297);
            }
            v356 = sub_5C154(&qword_322F98);
            memcpy(v295, v296, *(_QWORD *)(*(_QWORD *)(v356 - 8) + 64));
            goto LABEL_118;
          }
          (*(void (**)(char *, uint64_t))(v106 + 8))(v274, v105);
        }
        v293 = sub_5C154(&qword_3217B8);
        memcpy(v274, v275, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
        goto LABEL_99;
      }
      (*(void (**)(char *, uint64_t))(v106 + 8))(v103, v105);
    }
    v272 = sub_5C154(&qword_3217B8);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v272 - 8) + 64));
    goto LABEL_81;
  }
  if (v88)
  {
LABEL_28:
    v98 = sub_5C154(&qword_3217C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_43;
  }
  v468 = v11;
  v475 = v5;
  *(_QWORD *)v85 = *v86;
  v89 = v86[1];
  *((_QWORD *)v85 + 1) = v89;
  v90 = v10[5];
  v91 = &v85[v90];
  v92 = (char *)v86 + v90;
  v93 = type metadata accessor for LocalizerRequest(0);
  v94 = *(_QWORD *)(v93 - 8);
  v95 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v94 + 48);
  v96 = swift_bridgeObjectRetain(v89);
  if (v95(v92, 1, v93, v96))
  {
    v97 = sub_5C154(&qword_3217B8);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v91, v92, v93);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
  }
  v109 = v10[6];
  v110 = &v85[v109];
  v111 = (char *)v86 + v109;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v95)((char *)v86 + v109, 1, v93))
  {
    v112 = sub_5C154(&qword_3217B8);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v110, v111, v93);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v110, 0, 1, v93);
  }
  v85[v10[7]] = *((_BYTE *)v86 + v10[7]);
  v85[v10[8]] = *((_BYTE *)v86 + v10[8]);
  v113 = v10[9];
  v114 = &v85[v113];
  v115 = (char *)v86 + v113;
  v116 = type metadata accessor for ToolbarPrincipalType(0);
  v117 = *(_QWORD *)(v116 - 8);
  v472 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    v118 = sub_5C154(&qword_322F98);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v114, v115, v116);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
  }
  v119 = v10[10];
  v120 = *(_QWORD *)((char *)v86 + v119);
  *(_QWORD *)&v85[v119] = v120;
  v121 = v10[11];
  v122 = *(_QWORD *)((char *)v86 + v121);
  *(_QWORD *)&v85[v121] = v122;
  v85[v10[12]] = *((_BYTE *)v86 + v10[12]);
  v123 = v10[13];
  v124 = *(_QWORD *)((char *)v86 + v123);
  *(_QWORD *)&v85[v123] = v124;
  v125 = v10[14];
  v126 = &v85[v125];
  v127 = (_QWORD *)((char *)v86 + v125);
  *(_QWORD *)v126 = *v127;
  v128 = v127[1];
  *((_QWORD *)v126 + 1) = v128;
  v129 = v10[15];
  v465 = &v85[v129];
  v130 = (char *)v86 + v129;
  v131 = type metadata accessor for PageData(0);
  v132 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v131 - 8) + 16);
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRetain(v124);
  v133 = swift_bridgeObjectRetain(v128);
  v132(v465, v130, v131, v133);
  v134 = v10[16];
  v135 = *(_QWORD *)((char *)v86 + v134);
  *(_QWORD *)&v85[v134] = v135;
  v136 = v10[17];
  v137 = &v85[v136];
  v138 = (char *)v86 + v136;
  v139 = type metadata accessor for PageMetrics(0);
  v140 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v139 - 8) + 16);
  v141 = swift_bridgeObjectRetain(v135);
  v140(v137, v138, v139, v141);
  v85[v10[18]] = *((_BYTE *)v86 + v10[18]);
  v142 = v10[19];
  v143 = *(_QWORD *)((char *)v86 + v142);
  *(_QWORD *)&v85[v142] = v143;
  v144 = v10[20];
  v145 = *(_QWORD *)((char *)v86 + v144);
  *(_QWORD *)&v85[v144] = v145;
  v85[v10[21]] = *((_BYTE *)v86 + v10[21]);
  v146 = v10[22];
  v147 = &v85[v146];
  v148 = (_QWORD *)((char *)v86 + v146);
  *(_QWORD *)v147 = *v148;
  v149 = v148[1];
  *((_QWORD *)v147 + 1) = v149;
  v150 = v10[23];
  v151 = &v85[v150];
  v152 = (_QWORD *)((char *)v86 + v150);
  v153 = *(_QWORD *)((char *)v86 + v150 + 8);
  swift_bridgeObjectRetain(v143);
  swift_retain(v145);
  swift_bridgeObjectRetain(v149);
  if (v153)
  {
    *(_QWORD *)v151 = *v152;
    v154 = v152[1];
    *((_QWORD *)v151 + 1) = v154;
    *((_QWORD *)v151 + 2) = v152[2];
    *((_QWORD *)v151 + 3) = v152[3];
    v155 = v152[4];
    *((_QWORD *)v151 + 4) = v155;
    swift_bridgeObjectRetain(v154);
    v156 = swift_bridgeObjectRetain(v155);
  }
  else
  {
    v156 = *(__n128 *)v152;
    v157 = *((_OWORD *)v152 + 1);
    *((_QWORD *)v151 + 4) = v152[4];
    *(__n128 *)v151 = v156;
    *((_OWORD *)v151 + 1) = v157;
  }
  v5 = v475;
  v4 = v480;
  (*(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v478 + 56))(v85, 0, 1, v10, v156);
  v11 = v468;
  v6 = v472;
LABEL_43:
  *((_BYTE *)v5 + v6[7]) = *((_BYTE *)v4 + v6[7]);
  v158 = v6[8];
  v159 = (char *)v5 + v158;
  v160 = (char *)v4 + v158;
  v161 = sub_5C154(&qword_322E30);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 24))(v159, v160, v161);
  v162 = v6[9];
  v163 = (char *)v5 + v162;
  v164 = (_QWORD *)((char *)v4 + v162);
  LODWORD(v159) = v11((_QWORD *)((char *)v5 + v162), 1, v10);
  v165 = v11(v164, 1, v10);
  if (!(_DWORD)v159)
  {
    if (v165)
    {
      sub_6685C((uint64_t)v163, type metadata accessor for Page);
      goto LABEL_49;
    }
    *(_QWORD *)v163 = *v164;
    v176 = v164[1];
    v177 = *((_QWORD *)v163 + 1);
    *((_QWORD *)v163 + 1) = v176;
    swift_bridgeObjectRetain(v176);
    swift_bridgeObjectRelease(v177);
    v178 = v10[5];
    v179 = &v163[v178];
    v180 = (char *)v164 + v178;
    v181 = type metadata accessor for LocalizerRequest(0);
    v182 = *(_QWORD *)(v181 - 8);
    v183 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v182 + 48);
    LODWORD(v177) = v183(v179, 1, v181);
    v184 = v183(v180, 1, v181);
    if ((_DWORD)v177)
    {
      if (!v184)
      {
        (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v179, v180, v181);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v179, 0, 1, v181);
        goto LABEL_87;
      }
    }
    else
    {
      if (!v184)
      {
        (*(void (**)(char *, char *, uint64_t))(v182 + 24))(v179, v180, v181);
LABEL_87:
        v279 = v10[6];
        v280 = &v163[v279];
        v281 = (char *)v164 + v279;
        v282 = v183(&v163[v279], 1, v181);
        v283 = v183(v281, 1, v181);
        if (v282)
        {
          if (!v283)
          {
            (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v280, v281, v181);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v280, 0, 1, v181);
            goto LABEL_105;
          }
        }
        else
        {
          if (!v283)
          {
            (*(void (**)(char *, char *, uint64_t))(v182 + 24))(v280, v281, v181);
LABEL_105:
            v163[v10[7]] = *((_BYTE *)v164 + v10[7]);
            v163[v10[8]] = *((_BYTE *)v164 + v10[8]);
            v303 = v10[9];
            v304 = &v163[v303];
            v305 = (char *)v164 + v303;
            v306 = type metadata accessor for ToolbarPrincipalType(0);
            v307 = *(_QWORD *)(v306 - 8);
            v308 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v307 + 48);
            v309 = v308(v304, 1, v306);
            v310 = v308(v305, 1, v306);
            if (v309)
            {
              if (!v310)
              {
                (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v304, v305, v306);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v304, 0, 1, v306);
                goto LABEL_124;
              }
            }
            else
            {
              if (!v310)
              {
                (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v304, v305, v306);
LABEL_124:
                v402 = v10[10];
                v403 = *(_QWORD *)((char *)v164 + v402);
                v404 = *(_QWORD *)&v163[v402];
                *(_QWORD *)&v163[v402] = v403;
                swift_bridgeObjectRetain(v403);
                swift_bridgeObjectRelease(v404);
                v405 = v10[11];
                v406 = *(_QWORD *)((char *)v164 + v405);
                v407 = *(_QWORD *)&v163[v405];
                *(_QWORD *)&v163[v405] = v406;
                swift_bridgeObjectRetain(v406);
                swift_bridgeObjectRelease(v407);
                v163[v10[12]] = *((_BYTE *)v164 + v10[12]);
                v408 = v10[13];
                v409 = *(_QWORD *)((char *)v164 + v408);
                v410 = *(_QWORD *)&v163[v408];
                *(_QWORD *)&v163[v408] = v409;
                swift_bridgeObjectRetain(v409);
                swift_bridgeObjectRelease(v410);
                v411 = v10[14];
                v412 = &v163[v411];
                v413 = (_QWORD *)((char *)v164 + v411);
                *(_QWORD *)v412 = *v413;
                v414 = v413[1];
                v415 = *((_QWORD *)v412 + 1);
                *((_QWORD *)v412 + 1) = v414;
                swift_bridgeObjectRetain(v414);
                swift_bridgeObjectRelease(v415);
                v416 = v10[15];
                v417 = &v163[v416];
                v418 = (char *)v164 + v416;
                v419 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v419 - 8) + 24))(v417, v418, v419);
                v420 = v10[16];
                v421 = *(_QWORD *)((char *)v164 + v420);
                v422 = *(_QWORD *)&v163[v420];
                *(_QWORD *)&v163[v420] = v421;
                swift_bridgeObjectRetain(v421);
                swift_bridgeObjectRelease(v422);
                v423 = v10[17];
                v424 = &v163[v423];
                v425 = (char *)v164 + v423;
                v426 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v426 - 8) + 24))(v424, v425, v426);
                v163[v10[18]] = *((_BYTE *)v164 + v10[18]);
                v427 = v10[19];
                v428 = *(_QWORD *)((char *)v164 + v427);
                v429 = *(_QWORD *)&v163[v427];
                *(_QWORD *)&v163[v427] = v428;
                swift_bridgeObjectRetain(v428);
                swift_bridgeObjectRelease(v429);
                v430 = v10[20];
                v431 = *(_QWORD *)((char *)v164 + v430);
                v432 = *(_QWORD *)&v163[v430];
                *(_QWORD *)&v163[v430] = v431;
                swift_retain(v431);
                swift_release(v432);
                v163[v10[21]] = *((_BYTE *)v164 + v10[21]);
                v433 = v10[22];
                v434 = &v163[v433];
                v435 = (_QWORD *)((char *)v164 + v433);
                *(_QWORD *)v434 = *v435;
                v436 = v435[1];
                v437 = *((_QWORD *)v434 + 1);
                *((_QWORD *)v434 + 1) = v436;
                swift_bridgeObjectRetain(v436);
                swift_bridgeObjectRelease(v437);
                v438 = v10[23];
                v439 = &v163[v438];
                v440 = (_QWORD *)((char *)v164 + v438);
                v441 = *(_QWORD *)&v163[v438 + 8];
                v442 = *(_QWORD *)((char *)v164 + v438 + 8);
                v4 = v480;
                if (v441)
                {
                  if (v442)
                  {
                    *(_QWORD *)v439 = *v440;
                    v443 = v440[1];
                    *((_QWORD *)v439 + 1) = v443;
                    swift_bridgeObjectRetain(v443);
                    swift_bridgeObjectRelease(v441);
                    *((_QWORD *)v439 + 2) = v440[2];
                    *((_QWORD *)v439 + 3) = v440[3];
                    v444 = v440[4];
                    v445 = *((_QWORD *)v439 + 4);
                    *((_QWORD *)v439 + 4) = v444;
                    swift_bridgeObjectRetain(v444);
                    swift_bridgeObjectRelease(v445);
                  }
                  else
                  {
                    sub_984B0((uint64_t)v439);
                    v456 = v440[4];
                    v457 = *((_OWORD *)v440 + 1);
                    *(_OWORD *)v439 = *(_OWORD *)v440;
                    *((_OWORD *)v439 + 1) = v457;
                    *((_QWORD *)v439 + 4) = v456;
                  }
                }
                else if (v442)
                {
                  *(_QWORD *)v439 = *v440;
                  v450 = v440[1];
                  *((_QWORD *)v439 + 1) = v450;
                  *((_QWORD *)v439 + 2) = v440[2];
                  *((_QWORD *)v439 + 3) = v440[3];
                  v451 = v440[4];
                  *((_QWORD *)v439 + 4) = v451;
                  swift_bridgeObjectRetain(v450);
                  swift_bridgeObjectRetain(v451);
                }
                else
                {
                  v462 = *(_OWORD *)v440;
                  v463 = *((_OWORD *)v440 + 1);
                  *((_QWORD *)v439 + 4) = v440[4];
                  *(_OWORD *)v439 = v462;
                  *((_OWORD *)v439 + 1) = v463;
                }
                goto LABEL_64;
              }
              (*(void (**)(char *, uint64_t))(v307 + 8))(v304, v306);
            }
            v401 = sub_5C154(&qword_322F98);
            memcpy(v304, v305, *(_QWORD *)(*(_QWORD *)(v401 - 8) + 64));
            goto LABEL_124;
          }
          (*(void (**)(char *, uint64_t))(v182 + 8))(v280, v181);
        }
        v302 = sub_5C154(&qword_3217B8);
        memcpy(v280, v281, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
        goto LABEL_105;
      }
      (*(void (**)(char *, uint64_t))(v182 + 8))(v179, v181);
    }
    v278 = sub_5C154(&qword_3217B8);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
    goto LABEL_87;
  }
  if (v165)
  {
LABEL_49:
    v175 = sub_5C154(&qword_3217C0);
    memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    goto LABEL_64;
  }
  *(_QWORD *)v163 = *v164;
  v166 = v164[1];
  *((_QWORD *)v163 + 1) = v166;
  v167 = v10[5];
  v168 = &v163[v167];
  v169 = (char *)v164 + v167;
  v170 = type metadata accessor for LocalizerRequest(0);
  v171 = *(_QWORD *)(v170 - 8);
  v172 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v171 + 48);
  v173 = swift_bridgeObjectRetain(v166);
  if (v172(v169, 1, v170, v173))
  {
    v174 = sub_5C154(&qword_3217B8);
    memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v168, v169, v170);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v168, 0, 1, v170);
  }
  v185 = v10[6];
  v186 = &v163[v185];
  v187 = (char *)v164 + v185;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v172)((char *)v164 + v185, 1, v170))
  {
    v188 = sub_5C154(&qword_3217B8);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v186, v187, v170);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v186, 0, 1, v170);
  }
  v163[v10[7]] = *((_BYTE *)v164 + v10[7]);
  v163[v10[8]] = *((_BYTE *)v164 + v10[8]);
  v189 = v10[9];
  v190 = &v163[v189];
  v191 = (char *)v164 + v189;
  v192 = type metadata accessor for ToolbarPrincipalType(0);
  v193 = *(_QWORD *)(v192 - 8);
  v477 = v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
  {
    v194 = sub_5C154(&qword_322F98);
    memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v190, v191, v192);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
  }
  v195 = v10[10];
  v196 = *(_QWORD *)((char *)v164 + v195);
  *(_QWORD *)&v163[v195] = v196;
  v197 = v10[11];
  v198 = *(_QWORD *)((char *)v164 + v197);
  *(_QWORD *)&v163[v197] = v198;
  v163[v10[12]] = *((_BYTE *)v164 + v10[12]);
  v199 = v10[13];
  v200 = *(_QWORD *)((char *)v164 + v199);
  *(_QWORD *)&v163[v199] = v200;
  v201 = v10[14];
  v202 = &v163[v201];
  v203 = (_QWORD *)((char *)v164 + v201);
  *(_QWORD *)v202 = *v203;
  v204 = v203[1];
  *((_QWORD *)v202 + 1) = v204;
  v205 = v10[15];
  v473 = &v163[v205];
  v206 = (char *)v164 + v205;
  v207 = type metadata accessor for PageData(0);
  v208 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v207 - 8) + 16);
  swift_bridgeObjectRetain(v196);
  swift_bridgeObjectRetain(v198);
  swift_bridgeObjectRetain(v200);
  v209 = swift_bridgeObjectRetain(v204);
  v208(v473, v206, v207, v209);
  v210 = v10[16];
  v211 = *(_QWORD *)((char *)v164 + v210);
  *(_QWORD *)&v163[v210] = v211;
  v212 = v10[17];
  v213 = &v163[v212];
  v214 = (char *)v164 + v212;
  v215 = type metadata accessor for PageMetrics(0);
  v216 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v215 - 8) + 16);
  v217 = swift_bridgeObjectRetain(v211);
  v216(v213, v214, v215, v217);
  v163[v10[18]] = *((_BYTE *)v164 + v10[18]);
  v218 = v10[19];
  v219 = *(_QWORD *)((char *)v164 + v218);
  *(_QWORD *)&v163[v218] = v219;
  v220 = v10[20];
  v221 = *(_QWORD *)((char *)v164 + v220);
  *(_QWORD *)&v163[v220] = v221;
  v163[v10[21]] = *((_BYTE *)v164 + v10[21]);
  v222 = v10[22];
  v223 = &v163[v222];
  v224 = (_QWORD *)((char *)v164 + v222);
  *(_QWORD *)v223 = *v224;
  v225 = v224[1];
  *((_QWORD *)v223 + 1) = v225;
  v226 = v10[23];
  v227 = &v163[v226];
  v228 = (_QWORD *)((char *)v164 + v226);
  v229 = v228[1];
  swift_bridgeObjectRetain(v219);
  swift_retain(v221);
  swift_bridgeObjectRetain(v225);
  if (v229)
  {
    *(_QWORD *)v227 = *v228;
    v230 = v228[1];
    *((_QWORD *)v227 + 1) = v230;
    *((_QWORD *)v227 + 2) = v228[2];
    *((_QWORD *)v227 + 3) = v228[3];
    v231 = v228[4];
    *((_QWORD *)v227 + 4) = v231;
    swift_bridgeObjectRetain(v230);
    v232 = swift_bridgeObjectRetain(v231);
  }
  else
  {
    v232 = *(__n128 *)v228;
    v233 = *((_OWORD *)v228 + 1);
    *((_QWORD *)v227 + 4) = v228[4];
    *(__n128 *)v227 = v232;
    *((_OWORD *)v227 + 1) = v233;
  }
  v5 = v477;
  v4 = v480;
  (*(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v478 + 56))(v163, 0, 1, v10, v232);
LABEL_64:
  v234 = *(int *)(sub_5C154(&qword_3217C8) + 28);
  v235 = *(_QWORD *)((char *)v5 + v234);
  v236 = *(_QWORD *)((char *)v4 + v234);
  *(_QWORD *)((char *)v5 + v234) = v236;
  swift_retain(v236);
  swift_release(v235);
  v237 = *(int *)(type metadata accessor for PageContent(0) + 20);
  v238 = (char *)v5 + v237;
  v239 = (char *)v4 + v237;
  v240 = type metadata accessor for BooksAlertAction(0);
  v241 = *(_QWORD *)(v240 - 8);
  v242 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v241 + 48);
  LODWORD(v235) = v242(v238, 1, v240);
  v243 = v242(v239, 1, v240);
  if (!(_DWORD)v235)
  {
    if (!v243)
    {
      (*(void (**)(char *, char *, uint64_t))(v241 + 24))(v238, v239, v240);
      goto LABEL_70;
    }
    (*(void (**)(char *, uint64_t))(v241 + 8))(v238, v240);
    goto LABEL_69;
  }
  if (v243)
  {
LABEL_69:
    v244 = sub_5C154(&qword_322FA0);
    memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v238, v239, v240);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v241 + 56))(v238, 0, 1, v240);
LABEL_70:
  v245 = *(int *)(sub_5C154(&qword_322F80) + 28);
  v246 = *(_QWORD *)&v238[v245];
  v247 = *(_QWORD *)&v239[v245];
  *(_QWORD *)&v238[v245] = v247;
  swift_retain(v247);
  swift_release(v246);
  v248 = v479[5];
  v249 = *(_QWORD *)((char *)v4 + v248);
  v250 = *(_QWORD *)((char *)v5 + v248);
  *(_QWORD *)((char *)v5 + v248) = v249;
  swift_retain(v249);
  swift_release(v250);
  v251 = v479[6];
  v252 = *(void **)((char *)v4 + v251);
  v253 = *(void **)((char *)v5 + v251);
  *(_QWORD *)((char *)v5 + v251) = v252;
  v254 = v252;

  v255 = v479[7];
  v256 = (char *)v5 + v255;
  v257 = (char *)v4 + v255;
  v258 = *(_QWORD *)v257;
  LOBYTE(v257) = v257[8];
  v259 = *(_QWORD *)v256;
  *(_QWORD *)v256 = v258;
  v256[8] = (char)v257;
  swift_retain(v258);
  swift_release(v259);
  v260 = v479[8];
  v261 = (char *)v5 + v260;
  v262 = (char *)v4 + v260;
  v263 = *(_QWORD *)v262;
  LOBYTE(v262) = v262[8];
  v264 = *(_QWORD *)v261;
  *(_QWORD *)v261 = v263;
  v261[8] = (char)v262;
  swift_retain(v263);
  swift_release(v264);
  return v5;
}

uint64_t initializeWithTake for PageRootView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v5;
  int *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int (*v128)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v129)(_QWORD, _QWORD, _QWORD);
  int *v130;
  int *v131;
  uint64_t v133;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v6[5];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v133 = *((_QWORD *)v10 - 1);
  v11 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v133 + 48);
  if (v11(v9, 1, v10))
  {
    v12 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v128 = v11;
    v130 = v6;
    *v8 = *v9;
    v13 = v10[5];
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v16 = type metadata accessor for LocalizerRequest(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      v19 = sub_5C154(&qword_3217B8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = v10[6];
    v21 = (char *)v8 + v20;
    v22 = (char *)v9 + v20;
    if (v18((char *)v9 + v20, 1, v16))
    {
      v23 = sub_5C154(&qword_3217B8);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v22, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
    }
    *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
    *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
    v24 = v10[9];
    v25 = (char *)v8 + v24;
    v26 = (char *)v9 + v24;
    v27 = type metadata accessor for ToolbarPrincipalType(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = sub_5C154(&qword_322F98);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v6 = v130;
    *(_QWORD *)((char *)v8 + v10[10]) = *(_QWORD *)((char *)v9 + v10[10]);
    *(_QWORD *)((char *)v8 + v10[11]) = *(_QWORD *)((char *)v9 + v10[11]);
    *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    *(_OWORD *)((char *)v8 + v10[14]) = *(_OWORD *)((char *)v9 + v10[14]);
    v30 = v10[15];
    v31 = (char *)v8 + v30;
    v32 = (char *)v9 + v30;
    v33 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    v34 = v10[17];
    v35 = (char *)v8 + v34;
    v36 = (char *)v9 + v34;
    v37 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
    *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
    *(_QWORD *)((char *)v8 + v10[19]) = *(_QWORD *)((char *)v9 + v10[19]);
    *(_QWORD *)((char *)v8 + v10[20]) = *(_QWORD *)((char *)v9 + v10[20]);
    *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
    *(_OWORD *)((char *)v8 + v10[22]) = *(_OWORD *)((char *)v9 + v10[22]);
    v38 = v10[23];
    v39 = (char *)v8 + v38;
    v40 = (char *)v9 + v38;
    v41 = *((_OWORD *)v40 + 1);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    *((_OWORD *)v39 + 1) = v41;
    *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v133 + 56))(v8, 0, 1, v10);
    v11 = v128;
  }
  v42 = v6[6];
  v43 = (_OWORD *)(a1 + v42);
  v44 = (_OWORD *)(a2 + v42);
  if (v11(a2 + v42, 1, v10))
  {
    v45 = sub_5C154(&qword_3217C0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v129 = v11;
    v131 = v6;
    *v43 = *v44;
    v46 = v10[5];
    v47 = (char *)v43 + v46;
    v48 = (char *)v44 + v46;
    v49 = type metadata accessor for LocalizerRequest(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
    if (v51(v48, 1, v49))
    {
      v52 = sub_5C154(&qword_3217B8);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    v53 = v10[6];
    v54 = (char *)v43 + v53;
    v55 = (char *)v44 + v53;
    if (v51((char *)v44 + v53, 1, v49))
    {
      v56 = sub_5C154(&qword_3217B8);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v54, v55, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v54, 0, 1, v49);
    }
    *((_BYTE *)v43 + v10[7]) = *((_BYTE *)v44 + v10[7]);
    *((_BYTE *)v43 + v10[8]) = *((_BYTE *)v44 + v10[8]);
    v57 = v10[9];
    v58 = (char *)v43 + v57;
    v59 = (char *)v44 + v57;
    v60 = type metadata accessor for ToolbarPrincipalType(0);
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      v62 = sub_5C154(&qword_322F98);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
    }
    v6 = v131;
    *(_QWORD *)((char *)v43 + v10[10]) = *(_QWORD *)((char *)v44 + v10[10]);
    *(_QWORD *)((char *)v43 + v10[11]) = *(_QWORD *)((char *)v44 + v10[11]);
    *((_BYTE *)v43 + v10[12]) = *((_BYTE *)v44 + v10[12]);
    *(_QWORD *)((char *)v43 + v10[13]) = *(_QWORD *)((char *)v44 + v10[13]);
    *(_OWORD *)((char *)v43 + v10[14]) = *(_OWORD *)((char *)v44 + v10[14]);
    v63 = v10[15];
    v64 = (char *)v43 + v63;
    v65 = (char *)v44 + v63;
    v66 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
    *(_QWORD *)((char *)v43 + v10[16]) = *(_QWORD *)((char *)v44 + v10[16]);
    v67 = v10[17];
    v68 = (char *)v43 + v67;
    v69 = (char *)v44 + v67;
    v70 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
    *((_BYTE *)v43 + v10[18]) = *((_BYTE *)v44 + v10[18]);
    *(_QWORD *)((char *)v43 + v10[19]) = *(_QWORD *)((char *)v44 + v10[19]);
    *(_QWORD *)((char *)v43 + v10[20]) = *(_QWORD *)((char *)v44 + v10[20]);
    *((_BYTE *)v43 + v10[21]) = *((_BYTE *)v44 + v10[21]);
    *(_OWORD *)((char *)v43 + v10[22]) = *(_OWORD *)((char *)v44 + v10[22]);
    v71 = v10[23];
    v72 = (char *)v43 + v71;
    v73 = (char *)v44 + v71;
    v74 = *((_OWORD *)v73 + 1);
    *(_OWORD *)v72 = *(_OWORD *)v73;
    *((_OWORD *)v72 + 1) = v74;
    *((_QWORD *)v72 + 4) = *((_QWORD *)v73 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v133 + 56))(v43, 0, 1, v10);
    v11 = v129;
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  v75 = v6[8];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v78 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
  v79 = v6[9];
  v80 = (_OWORD *)(a1 + v79);
  v81 = (_OWORD *)(a2 + v79);
  if (v11(a2 + v79, 1, v10))
  {
    v82 = sub_5C154(&qword_3217C0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    *v80 = *v81;
    v83 = v10[5];
    v84 = (char *)v80 + v83;
    v85 = (char *)v81 + v83;
    v86 = type metadata accessor for LocalizerRequest(0);
    v87 = *(_QWORD *)(v86 - 8);
    v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
    if (v88(v85, 1, v86))
    {
      v89 = sub_5C154(&qword_3217B8);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
    }
    v90 = v10[6];
    v91 = (char *)v80 + v90;
    v92 = (char *)v81 + v90;
    if (v88((char *)v81 + v90, 1, v86))
    {
      v93 = sub_5C154(&qword_3217B8);
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v91, v92, v86);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v91, 0, 1, v86);
    }
    *((_BYTE *)v80 + v10[7]) = *((_BYTE *)v81 + v10[7]);
    *((_BYTE *)v80 + v10[8]) = *((_BYTE *)v81 + v10[8]);
    v94 = v10[9];
    v95 = (char *)v80 + v94;
    v96 = (char *)v81 + v94;
    v97 = type metadata accessor for ToolbarPrincipalType(0);
    v98 = *(_QWORD *)(v97 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
    {
      v99 = sub_5C154(&qword_322F98);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
    }
    *(_QWORD *)((char *)v80 + v10[10]) = *(_QWORD *)((char *)v81 + v10[10]);
    *(_QWORD *)((char *)v80 + v10[11]) = *(_QWORD *)((char *)v81 + v10[11]);
    *((_BYTE *)v80 + v10[12]) = *((_BYTE *)v81 + v10[12]);
    *(_QWORD *)((char *)v80 + v10[13]) = *(_QWORD *)((char *)v81 + v10[13]);
    *(_OWORD *)((char *)v80 + v10[14]) = *(_OWORD *)((char *)v81 + v10[14]);
    v100 = v10[15];
    v101 = (char *)v80 + v100;
    v102 = (char *)v81 + v100;
    v103 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
    *(_QWORD *)((char *)v80 + v10[16]) = *(_QWORD *)((char *)v81 + v10[16]);
    v104 = v10[17];
    v105 = (char *)v80 + v104;
    v106 = (char *)v81 + v104;
    v107 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
    *((_BYTE *)v80 + v10[18]) = *((_BYTE *)v81 + v10[18]);
    *(_QWORD *)((char *)v80 + v10[19]) = *(_QWORD *)((char *)v81 + v10[19]);
    *(_QWORD *)((char *)v80 + v10[20]) = *(_QWORD *)((char *)v81 + v10[20]);
    *((_BYTE *)v80 + v10[21]) = *((_BYTE *)v81 + v10[21]);
    *(_OWORD *)((char *)v80 + v10[22]) = *(_OWORD *)((char *)v81 + v10[22]);
    v108 = v10[23];
    v109 = (char *)v80 + v108;
    v110 = (char *)v81 + v108;
    v111 = *((_OWORD *)v110 + 1);
    *(_OWORD *)v109 = *(_OWORD *)v110;
    *((_OWORD *)v109 + 1) = v111;
    *((_QWORD *)v109 + 4) = *((_QWORD *)v110 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v133 + 56))(v80, 0, 1, v10);
  }
  v112 = sub_5C154(&qword_3217C8);
  *(_QWORD *)(a1 + *(int *)(v112 + 28)) = *(_QWORD *)(a2 + *(int *)(v112 + 28));
  v113 = *(int *)(type metadata accessor for PageContent(0) + 20);
  v114 = (char *)(a1 + v113);
  v115 = (char *)(a2 + v113);
  v116 = type metadata accessor for BooksAlertAction(0);
  v117 = *(_QWORD *)(v116 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    v118 = sub_5C154(&qword_322FA0);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v114, v115, v116);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
  }
  v119 = sub_5C154(&qword_322F80);
  *(_QWORD *)&v114[*(int *)(v119 + 28)] = *(_QWORD *)&v115[*(int *)(v119 + 28)];
  v120 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v120) = *(_QWORD *)(a2 + v120);
  v121 = a3[7];
  v122 = a3[8];
  v123 = a1 + v121;
  v124 = a2 + v121;
  *(_QWORD *)v123 = *(_QWORD *)v124;
  *(_BYTE *)(v123 + 8) = *(_BYTE *)(v124 + 8);
  v125 = a1 + v122;
  v126 = a2 + v122;
  *(_BYTE *)(v125 + 8) = *(_BYTE *)(v126 + 8);
  *(_QWORD *)v125 = *(_QWORD *)v126;
  return a1;
}

uint64_t assignWithTake for PageRootView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  size_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  int v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t (*v129)(char *, uint64_t, uint64_t);
  int v130;
  int v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(char *, uint64_t, uint64_t);
  int v167;
  size_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  int v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int (*v223)(char *, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t (*v232)(char *, uint64_t, uint64_t);
  int v233;
  int v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t (*v269)(char *, uint64_t, uint64_t);
  int v270;
  size_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t (*v320)(char *, uint64_t, uint64_t);
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  void *v341;
  void *v342;
  _QWORD *__src;
  _QWORD *__srca;
  int *v345;
  int *v346;
  int *v347;
  int *v348;
  uint64_t (*v349)(char *, uint64_t, int *);
  uint64_t (*v350)(char *, uint64_t, int *);
  uint64_t (*v351)(char *, uint64_t, int *);
  uint64_t (*v352)(char *, uint64_t, int *);
  void *v353;
  _QWORD *v354;
  _QWORD *v355;
  int *v356;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for Page(0);
  v354 = (_QWORD *)*((_QWORD *)v11 - 1);
  v12 = (uint64_t (*)(char *, uint64_t, int *))v354[6];
  v13 = v12((char *)v9, 1, v11);
  v14 = v12(v10, 1, v11);
  v356 = a3;
  if (v13)
  {
    if (!v14)
    {
      v345 = v7;
      v349 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v15 = v11[5];
      v16 = (char *)v9 + v15;
      v17 = &v10[v15];
      v18 = type metadata accessor for LocalizerRequest(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      if (v20(v17, 1, v18))
      {
        v21 = sub_5C154(&qword_3217B8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v32 = v11[6];
      v33 = (char *)v9 + v32;
      v34 = &v10[v32];
      if (v20(&v10[v32], 1, v18))
      {
        v35 = sub_5C154(&qword_3217B8);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v33, v34, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v33, 0, 1, v18);
      }
      v7 = v345;
      *((_BYTE *)v9 + v11[7]) = v10[v11[7]];
      *((_BYTE *)v9 + v11[8]) = v10[v11[8]];
      v36 = v11[9];
      v37 = (char *)v9 + v36;
      v38 = &v10[v36];
      v39 = type metadata accessor for ToolbarPrincipalType(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = sub_5C154(&qword_322F98);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      *(_QWORD *)((char *)v9 + v11[10]) = *(_QWORD *)&v10[v11[10]];
      *(_QWORD *)((char *)v9 + v11[11]) = *(_QWORD *)&v10[v11[11]];
      *((_BYTE *)v9 + v11[12]) = v10[v11[12]];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)&v10[v11[13]];
      *(_OWORD *)((char *)v9 + v11[14]) = *(_OWORD *)&v10[v11[14]];
      v42 = v11[15];
      v43 = (char *)v9 + v42;
      v44 = &v10[v42];
      v45 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)&v10[v11[16]];
      v46 = v11[17];
      v47 = (char *)v9 + v46;
      v48 = &v10[v46];
      v49 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
      *((_BYTE *)v9 + v11[18]) = v10[v11[18]];
      *(_QWORD *)((char *)v9 + v11[19]) = *(_QWORD *)&v10[v11[19]];
      *(_QWORD *)((char *)v9 + v11[20]) = *(_QWORD *)&v10[v11[20]];
      *((_BYTE *)v9 + v11[21]) = v10[v11[21]];
      *(_OWORD *)((char *)v9 + v11[22]) = *(_OWORD *)&v10[v11[22]];
      v50 = v11[23];
      v51 = (char *)v9 + v50;
      v52 = &v10[v50];
      v53 = *((_OWORD *)v52 + 1);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *((_OWORD *)v51 + 1) = v53;
      *((_QWORD *)v51 + 4) = *((_QWORD *)v52 + 4);
      ((void (*)(char *, _QWORD, uint64_t, int *))v354[7])((char *)v9, 0, 1, v11);
      v12 = (uint64_t (*)(char *, uint64_t, int *))v349;
      goto LABEL_43;
    }
LABEL_7:
    v22 = sub_5C154(&qword_3217C0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_43;
  }
  if (v14)
  {
    sub_6685C((uint64_t)v9, type metadata accessor for Page);
    goto LABEL_7;
  }
  v346 = v7;
  v350 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
  v23 = *((_QWORD *)v10 + 1);
  v24 = v9[1];
  *v9 = *(_QWORD *)v10;
  v9[1] = v23;
  swift_bridgeObjectRelease(v24);
  v25 = v11[5];
  v26 = (char *)v9 + v25;
  v27 = &v10[v25];
  v28 = type metadata accessor for LocalizerRequest(0);
  __src = *(_QWORD **)(v28 - 8);
  v29 = (uint64_t (*)(char *, uint64_t, uint64_t))__src[6];
  v30 = v29(v26, 1, v28);
  v31 = v29(v27, 1, v28);
  if (v30)
  {
    if (!v31)
    {
      ((void (*)(char *, char *, uint64_t))__src[4])(v26, v27, v28);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v26, 0, 1, v28);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v31)
  {
    ((void (*)(char *, uint64_t))__src[1])(v26, v28);
LABEL_21:
    v54 = sub_5C154(&qword_3217B8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_22;
  }
  ((void (*)(char *, char *, uint64_t))__src[5])(v26, v27, v28);
LABEL_22:
  v55 = v11[6];
  v56 = (char *)v9 + v55;
  v57 = &v10[v55];
  v58 = v29((char *)v9 + v55, 1, v28);
  v59 = v29(v57, 1, v28);
  if (v58)
  {
    if (!v59)
    {
      ((void (*)(char *, char *, uint64_t))__src[4])(v56, v57, v28);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v56, 0, 1, v28);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v59)
  {
    ((void (*)(char *, uint64_t))__src[1])(v56, v28);
LABEL_27:
    v60 = sub_5C154(&qword_3217B8);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_28;
  }
  ((void (*)(char *, char *, uint64_t))__src[5])(v56, v57, v28);
LABEL_28:
  *((_BYTE *)v9 + v11[7]) = v10[v11[7]];
  *((_BYTE *)v9 + v11[8]) = v10[v11[8]];
  v61 = v11[9];
  v62 = (char *)v9 + v61;
  v63 = &v10[v61];
  v64 = type metadata accessor for ToolbarPrincipalType(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  v341 = v62;
  LODWORD(v62) = v66(v62, 1, v64);
  v67 = v66(v63, 1, v64);
  if ((_DWORD)v62)
  {
    v12 = (uint64_t (*)(char *, uint64_t, int *))v350;
    if (!v67)
    {
      (*(void (**)(void *, char *, uint64_t))(v65 + 32))(v341, v63, v64);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v341, 0, 1, v64);
      goto LABEL_38;
    }
    v68 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v69 = v341;
  }
  else
  {
    v12 = (uint64_t (*)(char *, uint64_t, int *))v350;
    if (!v67)
    {
      (*(void (**)(void *, char *, uint64_t))(v65 + 40))(v341, v63, v64);
      goto LABEL_38;
    }
    (*(void (**)(void *, uint64_t))(v65 + 8))(v341, v64);
    v68 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v69 = v341;
  }
  memcpy(v69, v63, v68);
LABEL_38:
  v70 = v11[10];
  v71 = *(_QWORD *)((char *)v9 + v70);
  *(_QWORD *)((char *)v9 + v70) = *(_QWORD *)&v10[v70];
  swift_bridgeObjectRelease(v71);
  v72 = v11[11];
  v73 = *(_QWORD *)((char *)v9 + v72);
  *(_QWORD *)((char *)v9 + v72) = *(_QWORD *)&v10[v72];
  swift_bridgeObjectRelease(v73);
  *((_BYTE *)v9 + v11[12]) = v10[v11[12]];
  v74 = v11[13];
  v75 = *(_QWORD *)((char *)v9 + v74);
  *(_QWORD *)((char *)v9 + v74) = *(_QWORD *)&v10[v74];
  swift_bridgeObjectRelease(v75);
  v76 = v11[14];
  v77 = (_QWORD *)((char *)v9 + v76);
  v78 = (uint64_t *)&v10[v76];
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v11[15];
  v83 = (char *)v9 + v82;
  v84 = &v10[v82];
  v85 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 40))(v83, v84, v85);
  v86 = v11[16];
  v87 = *(_QWORD *)((char *)v9 + v86);
  *(_QWORD *)((char *)v9 + v86) = *(_QWORD *)&v10[v86];
  swift_bridgeObjectRelease(v87);
  v88 = v11[17];
  v89 = (char *)v9 + v88;
  v90 = &v10[v88];
  v91 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 40))(v89, v90, v91);
  *((_BYTE *)v9 + v11[18]) = v10[v11[18]];
  v92 = v11[19];
  v93 = *(_QWORD *)((char *)v9 + v92);
  *(_QWORD *)((char *)v9 + v92) = *(_QWORD *)&v10[v92];
  swift_bridgeObjectRelease(v93);
  v94 = v11[20];
  v95 = *(_QWORD *)((char *)v9 + v94);
  *(_QWORD *)((char *)v9 + v94) = *(_QWORD *)&v10[v94];
  swift_release(v95);
  *((_BYTE *)v9 + v11[21]) = v10[v11[21]];
  v96 = v11[22];
  v97 = (_QWORD *)((char *)v9 + v96);
  v98 = (uint64_t *)&v10[v96];
  v100 = *v98;
  v99 = v98[1];
  v101 = v97[1];
  *v97 = v100;
  v97[1] = v99;
  swift_bridgeObjectRelease(v101);
  v102 = v11[23];
  v103 = (_QWORD *)((char *)v9 + v102);
  v104 = &v10[v102];
  v105 = v103[1];
  v7 = v346;
  if (v105)
  {
    v106 = *((_QWORD *)v104 + 1);
    if (v106)
    {
      *v103 = *(_QWORD *)v104;
      v103[1] = v106;
      swift_bridgeObjectRelease(v105);
      v103[2] = *((_QWORD *)v104 + 2);
      v107 = *((_QWORD *)v104 + 4);
      v108 = v103[4];
      v103[3] = *((_QWORD *)v104 + 3);
      v103[4] = v107;
      swift_bridgeObjectRelease(v108);
      goto LABEL_43;
    }
    sub_984B0((uint64_t)v103);
  }
  v109 = *((_OWORD *)v104 + 1);
  *(_OWORD *)v103 = *(_OWORD *)v104;
  *((_OWORD *)v103 + 1) = v109;
  v103[4] = *((_QWORD *)v104 + 4);
LABEL_43:
  v110 = v7[6];
  v111 = (_QWORD *)(a1 + v110);
  v112 = (char *)(a2 + v110);
  v113 = v12((char *)(a1 + v110), 1, v11);
  v114 = v12(v112, 1, v11);
  if (v113)
  {
    if (!v114)
    {
      v347 = v7;
      v351 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
      *(_OWORD *)v111 = *(_OWORD *)v112;
      v115 = v11[5];
      v116 = (char *)v111 + v115;
      v117 = &v112[v115];
      v118 = type metadata accessor for LocalizerRequest(0);
      v119 = *(_QWORD *)(v118 - 8);
      v120 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
      if (v120(v117, 1, v118))
      {
        v121 = sub_5C154(&qword_3217B8);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v116, v117, v118);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
      }
      v132 = v11[6];
      v133 = (char *)v111 + v132;
      v134 = &v112[v132];
      if (v120(&v112[v132], 1, v118))
      {
        v135 = sub_5C154(&qword_3217B8);
        memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v133, v134, v118);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v133, 0, 1, v118);
      }
      v7 = v347;
      *((_BYTE *)v111 + v11[7]) = v112[v11[7]];
      *((_BYTE *)v111 + v11[8]) = v112[v11[8]];
      v136 = v11[9];
      v137 = (char *)v111 + v136;
      v138 = &v112[v136];
      v139 = type metadata accessor for ToolbarPrincipalType(0);
      v140 = *(_QWORD *)(v139 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
      {
        v141 = sub_5C154(&qword_322F98);
        memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v137, v138, v139);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
      }
      *(_QWORD *)((char *)v111 + v11[10]) = *(_QWORD *)&v112[v11[10]];
      *(_QWORD *)((char *)v111 + v11[11]) = *(_QWORD *)&v112[v11[11]];
      *((_BYTE *)v111 + v11[12]) = v112[v11[12]];
      *(_QWORD *)((char *)v111 + v11[13]) = *(_QWORD *)&v112[v11[13]];
      *(_OWORD *)((char *)v111 + v11[14]) = *(_OWORD *)&v112[v11[14]];
      v142 = v11[15];
      v143 = (char *)v111 + v142;
      v144 = &v112[v142];
      v145 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      *(_QWORD *)((char *)v111 + v11[16]) = *(_QWORD *)&v112[v11[16]];
      v146 = v11[17];
      v147 = (char *)v111 + v146;
      v148 = &v112[v146];
      v149 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
      *((_BYTE *)v111 + v11[18]) = v112[v11[18]];
      *(_QWORD *)((char *)v111 + v11[19]) = *(_QWORD *)&v112[v11[19]];
      *(_QWORD *)((char *)v111 + v11[20]) = *(_QWORD *)&v112[v11[20]];
      *((_BYTE *)v111 + v11[21]) = v112[v11[21]];
      *(_OWORD *)((char *)v111 + v11[22]) = *(_OWORD *)&v112[v11[22]];
      v150 = v11[23];
      v151 = (char *)v111 + v150;
      v152 = &v112[v150];
      v153 = *((_OWORD *)v152 + 1);
      *(_OWORD *)v151 = *(_OWORD *)v152;
      *((_OWORD *)v151 + 1) = v153;
      *((_QWORD *)v151 + 4) = *((_QWORD *)v152 + 4);
      ((void (*)(_QWORD *, _QWORD, uint64_t, int *))v354[7])(v111, 0, 1, v11);
      v12 = (uint64_t (*)(char *, uint64_t, int *))v351;
      goto LABEL_85;
    }
LABEL_49:
    v122 = sub_5C154(&qword_3217C0);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    goto LABEL_85;
  }
  if (v114)
  {
    sub_6685C((uint64_t)v111, type metadata accessor for Page);
    goto LABEL_49;
  }
  v348 = v7;
  v352 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
  v123 = *((_QWORD *)v112 + 1);
  v124 = v111[1];
  *v111 = *(_QWORD *)v112;
  v111[1] = v123;
  swift_bridgeObjectRelease(v124);
  v125 = v11[5];
  v126 = (char *)v111 + v125;
  v127 = &v112[v125];
  v128 = type metadata accessor for LocalizerRequest(0);
  __srca = *(_QWORD **)(v128 - 8);
  v129 = (uint64_t (*)(char *, uint64_t, uint64_t))__srca[6];
  v130 = v129(v126, 1, v128);
  v131 = v129(v127, 1, v128);
  if (v130)
  {
    if (!v131)
    {
      ((void (*)(char *, char *, uint64_t))__srca[4])(v126, v127, v128);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srca[7])(v126, 0, 1, v128);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v131)
  {
    ((void (*)(char *, uint64_t))__srca[1])(v126, v128);
LABEL_63:
    v154 = sub_5C154(&qword_3217B8);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    goto LABEL_64;
  }
  ((void (*)(char *, char *, uint64_t))__srca[5])(v126, v127, v128);
LABEL_64:
  v155 = v11[6];
  v156 = (char *)v111 + v155;
  v157 = &v112[v155];
  v158 = v129((char *)v111 + v155, 1, v128);
  v159 = v129(v157, 1, v128);
  if (v158)
  {
    if (!v159)
    {
      ((void (*)(char *, char *, uint64_t))__srca[4])(v156, v157, v128);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srca[7])(v156, 0, 1, v128);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (v159)
  {
    ((void (*)(char *, uint64_t))__srca[1])(v156, v128);
LABEL_69:
    v160 = sub_5C154(&qword_3217B8);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_70;
  }
  ((void (*)(char *, char *, uint64_t))__srca[5])(v156, v157, v128);
LABEL_70:
  *((_BYTE *)v111 + v11[7]) = v112[v11[7]];
  *((_BYTE *)v111 + v11[8]) = v112[v11[8]];
  v161 = v11[9];
  v162 = (char *)v111 + v161;
  v163 = &v112[v161];
  v164 = type metadata accessor for ToolbarPrincipalType(0);
  v165 = *(_QWORD *)(v164 - 8);
  v166 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v165 + 48);
  v342 = v162;
  LODWORD(v162) = v166(v162, 1, v164);
  v167 = v166(v163, 1, v164);
  if ((_DWORD)v162)
  {
    v12 = (uint64_t (*)(char *, uint64_t, int *))v352;
    if (!v167)
    {
      (*(void (**)(void *, char *, uint64_t))(v165 + 32))(v342, v163, v164);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v342, 0, 1, v164);
      goto LABEL_80;
    }
    v168 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v169 = v342;
  }
  else
  {
    v12 = (uint64_t (*)(char *, uint64_t, int *))v352;
    if (!v167)
    {
      (*(void (**)(void *, char *, uint64_t))(v165 + 40))(v342, v163, v164);
      goto LABEL_80;
    }
    (*(void (**)(void *, uint64_t))(v165 + 8))(v342, v164);
    v168 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v169 = v342;
  }
  memcpy(v169, v163, v168);
LABEL_80:
  v170 = v11[10];
  v171 = *(_QWORD *)((char *)v111 + v170);
  *(_QWORD *)((char *)v111 + v170) = *(_QWORD *)&v112[v170];
  swift_bridgeObjectRelease(v171);
  v172 = v11[11];
  v173 = *(_QWORD *)((char *)v111 + v172);
  *(_QWORD *)((char *)v111 + v172) = *(_QWORD *)&v112[v172];
  swift_bridgeObjectRelease(v173);
  *((_BYTE *)v111 + v11[12]) = v112[v11[12]];
  v174 = v11[13];
  v175 = *(_QWORD *)((char *)v111 + v174);
  *(_QWORD *)((char *)v111 + v174) = *(_QWORD *)&v112[v174];
  swift_bridgeObjectRelease(v175);
  v176 = v11[14];
  v177 = (_QWORD *)((char *)v111 + v176);
  v178 = (uint64_t *)&v112[v176];
  v180 = *v178;
  v179 = v178[1];
  v181 = v177[1];
  *v177 = v180;
  v177[1] = v179;
  swift_bridgeObjectRelease(v181);
  v182 = v11[15];
  v183 = (char *)v111 + v182;
  v184 = &v112[v182];
  v185 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 40))(v183, v184, v185);
  v186 = v11[16];
  v187 = *(_QWORD *)((char *)v111 + v186);
  *(_QWORD *)((char *)v111 + v186) = *(_QWORD *)&v112[v186];
  swift_bridgeObjectRelease(v187);
  v188 = v11[17];
  v189 = (char *)v111 + v188;
  v190 = &v112[v188];
  v191 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 40))(v189, v190, v191);
  *((_BYTE *)v111 + v11[18]) = v112[v11[18]];
  v192 = v11[19];
  v193 = *(_QWORD *)((char *)v111 + v192);
  *(_QWORD *)((char *)v111 + v192) = *(_QWORD *)&v112[v192];
  swift_bridgeObjectRelease(v193);
  v194 = v11[20];
  v195 = *(_QWORD *)((char *)v111 + v194);
  *(_QWORD *)((char *)v111 + v194) = *(_QWORD *)&v112[v194];
  swift_release(v195);
  *((_BYTE *)v111 + v11[21]) = v112[v11[21]];
  v196 = v11[22];
  v197 = (_QWORD *)((char *)v111 + v196);
  v198 = (uint64_t *)&v112[v196];
  v200 = *v198;
  v199 = v198[1];
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  v202 = v11[23];
  v203 = (_QWORD *)((char *)v111 + v202);
  v204 = &v112[v202];
  v205 = v203[1];
  v7 = v348;
  if (v205)
  {
    v206 = *((_QWORD *)v204 + 1);
    if (v206)
    {
      *v203 = *(_QWORD *)v204;
      v203[1] = v206;
      swift_bridgeObjectRelease(v205);
      v203[2] = *((_QWORD *)v204 + 2);
      v207 = *((_QWORD *)v204 + 4);
      v208 = v203[4];
      v203[3] = *((_QWORD *)v204 + 3);
      v203[4] = v207;
      swift_bridgeObjectRelease(v208);
      goto LABEL_85;
    }
    sub_984B0((uint64_t)v203);
  }
  v209 = *((_OWORD *)v204 + 1);
  *(_OWORD *)v203 = *(_OWORD *)v204;
  *((_OWORD *)v203 + 1) = v209;
  v203[4] = *((_QWORD *)v204 + 4);
LABEL_85:
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v210 = v7[8];
  v211 = a1 + v210;
  v212 = a2 + v210;
  v213 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v213 - 8) + 40))(v211, v212, v213);
  v214 = v7[9];
  v215 = (_QWORD *)(a1 + v214);
  v216 = (char *)(a2 + v214);
  LODWORD(v211) = v12((char *)(a1 + v214), 1, v11);
  v217 = v12(v216, 1, v11);
  if ((_DWORD)v211)
  {
    if (!v217)
    {
      *(_OWORD *)v215 = *(_OWORD *)v216;
      v218 = v11[5];
      v219 = (char *)v215 + v218;
      v220 = &v216[v218];
      v221 = type metadata accessor for LocalizerRequest(0);
      v222 = *(_QWORD *)(v221 - 8);
      v223 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v222 + 48);
      if (v223(v220, 1, v221))
      {
        v224 = sub_5C154(&qword_3217B8);
        memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v222 + 32))(v219, v220, v221);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v219, 0, 1, v221);
      }
      v235 = v11[6];
      v236 = (char *)v215 + v235;
      v237 = &v216[v235];
      if (v223(&v216[v235], 1, v221))
      {
        v238 = sub_5C154(&qword_3217B8);
        memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v222 + 32))(v236, v237, v221);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v236, 0, 1, v221);
      }
      *((_BYTE *)v215 + v11[7]) = v216[v11[7]];
      *((_BYTE *)v215 + v11[8]) = v216[v11[8]];
      v239 = v11[9];
      v240 = (char *)v215 + v239;
      v241 = &v216[v239];
      v242 = type metadata accessor for ToolbarPrincipalType(0);
      v243 = *(_QWORD *)(v242 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48))(v241, 1, v242))
      {
        v244 = sub_5C154(&qword_322F98);
        memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v243 + 32))(v240, v241, v242);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v240, 0, 1, v242);
      }
      *(_QWORD *)((char *)v215 + v11[10]) = *(_QWORD *)&v216[v11[10]];
      *(_QWORD *)((char *)v215 + v11[11]) = *(_QWORD *)&v216[v11[11]];
      *((_BYTE *)v215 + v11[12]) = v216[v11[12]];
      *(_QWORD *)((char *)v215 + v11[13]) = *(_QWORD *)&v216[v11[13]];
      *(_OWORD *)((char *)v215 + v11[14]) = *(_OWORD *)&v216[v11[14]];
      v245 = v11[15];
      v246 = (char *)v215 + v245;
      v247 = &v216[v245];
      v248 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 32))(v246, v247, v248);
      *(_QWORD *)((char *)v215 + v11[16]) = *(_QWORD *)&v216[v11[16]];
      v249 = v11[17];
      v250 = (char *)v215 + v249;
      v251 = &v216[v249];
      v252 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 32))(v250, v251, v252);
      *((_BYTE *)v215 + v11[18]) = v216[v11[18]];
      *(_QWORD *)((char *)v215 + v11[19]) = *(_QWORD *)&v216[v11[19]];
      *(_QWORD *)((char *)v215 + v11[20]) = *(_QWORD *)&v216[v11[20]];
      *((_BYTE *)v215 + v11[21]) = v216[v11[21]];
      *(_OWORD *)((char *)v215 + v11[22]) = *(_OWORD *)&v216[v11[22]];
      v253 = v11[23];
      v254 = (char *)v215 + v253;
      v255 = &v216[v253];
      v256 = *((_OWORD *)v255 + 1);
      *(_OWORD *)v254 = *(_OWORD *)v255;
      *((_OWORD *)v254 + 1) = v256;
      *((_QWORD *)v254 + 4) = *((_QWORD *)v255 + 4);
      ((void (*)(_QWORD *, _QWORD, uint64_t, int *))v354[7])(v215, 0, 1, v11);
      goto LABEL_127;
    }
LABEL_91:
    v225 = sub_5C154(&qword_3217C0);
    memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
    goto LABEL_127;
  }
  if (v217)
  {
    sub_6685C((uint64_t)v215, type metadata accessor for Page);
    goto LABEL_91;
  }
  v226 = *((_QWORD *)v216 + 1);
  v227 = v215[1];
  *v215 = *(_QWORD *)v216;
  v215[1] = v226;
  swift_bridgeObjectRelease(v227);
  v228 = v11[5];
  v229 = (char *)v215 + v228;
  v230 = &v216[v228];
  v231 = type metadata accessor for LocalizerRequest(0);
  v355 = *(_QWORD **)(v231 - 8);
  v232 = (uint64_t (*)(char *, uint64_t, uint64_t))v355[6];
  v233 = v232(v229, 1, v231);
  v234 = v232(v230, 1, v231);
  if (v233)
  {
    if (!v234)
    {
      ((void (*)(char *, char *, uint64_t))v355[4])(v229, v230, v231);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v355[7])(v229, 0, 1, v231);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v234)
  {
    ((void (*)(char *, uint64_t))v355[1])(v229, v231);
LABEL_105:
    v257 = sub_5C154(&qword_3217B8);
    memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    goto LABEL_106;
  }
  ((void (*)(char *, char *, uint64_t))v355[5])(v229, v230, v231);
LABEL_106:
  v258 = v11[6];
  v259 = (char *)v215 + v258;
  v260 = &v216[v258];
  v261 = v232((char *)v215 + v258, 1, v231);
  v262 = v232(v260, 1, v231);
  if (v261)
  {
    if (!v262)
    {
      ((void (*)(char *, char *, uint64_t))v355[4])(v259, v260, v231);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v355[7])(v259, 0, 1, v231);
      goto LABEL_112;
    }
    goto LABEL_111;
  }
  if (v262)
  {
    ((void (*)(char *, uint64_t))v355[1])(v259, v231);
LABEL_111:
    v263 = sub_5C154(&qword_3217B8);
    memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v263 - 8) + 64));
    goto LABEL_112;
  }
  ((void (*)(char *, char *, uint64_t))v355[5])(v259, v260, v231);
LABEL_112:
  *((_BYTE *)v215 + v11[7]) = v216[v11[7]];
  *((_BYTE *)v215 + v11[8]) = v216[v11[8]];
  v264 = v11[9];
  v265 = (char *)v215 + v264;
  v266 = &v216[v264];
  v267 = type metadata accessor for ToolbarPrincipalType(0);
  v268 = *(_QWORD *)(v267 - 8);
  v269 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v268 + 48);
  v353 = v265;
  LODWORD(v265) = v269(v265, 1, v267);
  v270 = v269(v266, 1, v267);
  if ((_DWORD)v265)
  {
    if (!v270)
    {
      (*(void (**)(void *, char *, uint64_t))(v268 + 32))(v353, v266, v267);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v353, 0, 1, v267);
      goto LABEL_122;
    }
    v271 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v272 = v353;
  }
  else
  {
    if (!v270)
    {
      (*(void (**)(void *, char *, uint64_t))(v268 + 40))(v353, v266, v267);
      goto LABEL_122;
    }
    (*(void (**)(void *, uint64_t))(v268 + 8))(v353, v267);
    v271 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v272 = v353;
  }
  memcpy(v272, v266, v271);
LABEL_122:
  v273 = v11[10];
  v274 = *(_QWORD *)((char *)v215 + v273);
  *(_QWORD *)((char *)v215 + v273) = *(_QWORD *)&v216[v273];
  swift_bridgeObjectRelease(v274);
  v275 = v11[11];
  v276 = *(_QWORD *)((char *)v215 + v275);
  *(_QWORD *)((char *)v215 + v275) = *(_QWORD *)&v216[v275];
  swift_bridgeObjectRelease(v276);
  *((_BYTE *)v215 + v11[12]) = v216[v11[12]];
  v277 = v11[13];
  v278 = *(_QWORD *)((char *)v215 + v277);
  *(_QWORD *)((char *)v215 + v277) = *(_QWORD *)&v216[v277];
  swift_bridgeObjectRelease(v278);
  v279 = v11[14];
  v280 = (_QWORD *)((char *)v215 + v279);
  v281 = (uint64_t *)&v216[v279];
  v283 = *v281;
  v282 = v281[1];
  v284 = v280[1];
  *v280 = v283;
  v280[1] = v282;
  swift_bridgeObjectRelease(v284);
  v285 = v11[15];
  v286 = (char *)v215 + v285;
  v287 = &v216[v285];
  v288 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v288 - 8) + 40))(v286, v287, v288);
  v289 = v11[16];
  v290 = *(_QWORD *)((char *)v215 + v289);
  *(_QWORD *)((char *)v215 + v289) = *(_QWORD *)&v216[v289];
  swift_bridgeObjectRelease(v290);
  v291 = v11[17];
  v292 = (char *)v215 + v291;
  v293 = &v216[v291];
  v294 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v294 - 8) + 40))(v292, v293, v294);
  *((_BYTE *)v215 + v11[18]) = v216[v11[18]];
  v295 = v11[19];
  v296 = *(_QWORD *)((char *)v215 + v295);
  *(_QWORD *)((char *)v215 + v295) = *(_QWORD *)&v216[v295];
  swift_bridgeObjectRelease(v296);
  v297 = v11[20];
  v298 = *(_QWORD *)((char *)v215 + v297);
  *(_QWORD *)((char *)v215 + v297) = *(_QWORD *)&v216[v297];
  swift_release(v298);
  *((_BYTE *)v215 + v11[21]) = v216[v11[21]];
  v299 = v11[22];
  v300 = (_QWORD *)((char *)v215 + v299);
  v301 = (uint64_t *)&v216[v299];
  v303 = *v301;
  v302 = v301[1];
  v304 = v300[1];
  *v300 = v303;
  v300[1] = v302;
  swift_bridgeObjectRelease(v304);
  v305 = v11[23];
  v306 = (_QWORD *)((char *)v215 + v305);
  v307 = &v216[v305];
  v308 = *(_QWORD *)((char *)v215 + v305 + 8);
  if (v308)
  {
    v309 = *((_QWORD *)v307 + 1);
    if (v309)
    {
      *v306 = *(_QWORD *)v307;
      v306[1] = v309;
      swift_bridgeObjectRelease(v308);
      v306[2] = *((_QWORD *)v307 + 2);
      v310 = *((_QWORD *)v307 + 4);
      v311 = v306[4];
      v306[3] = *((_QWORD *)v307 + 3);
      v306[4] = v310;
      swift_bridgeObjectRelease(v311);
      goto LABEL_127;
    }
    sub_984B0((uint64_t)v306);
  }
  v312 = *((_OWORD *)v307 + 1);
  *(_OWORD *)v306 = *(_OWORD *)v307;
  *((_OWORD *)v306 + 1) = v312;
  v306[4] = *((_QWORD *)v307 + 4);
LABEL_127:
  v313 = *(int *)(sub_5C154(&qword_3217C8) + 28);
  v314 = *(_QWORD *)(a1 + v313);
  *(_QWORD *)(a1 + v313) = *(_QWORD *)(a2 + v313);
  swift_release(v314);
  v315 = *(int *)(type metadata accessor for PageContent(0) + 20);
  v316 = (char *)(a1 + v315);
  v317 = (char *)(a2 + v315);
  v318 = type metadata accessor for BooksAlertAction(0);
  v319 = *(_QWORD *)(v318 - 8);
  v320 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v319 + 48);
  v321 = v320(v316, 1, v318);
  v322 = v320(v317, 1, v318);
  if (!v321)
  {
    if (!v322)
    {
      (*(void (**)(char *, char *, uint64_t))(v319 + 40))(v316, v317, v318);
      goto LABEL_133;
    }
    (*(void (**)(char *, uint64_t))(v319 + 8))(v316, v318);
    goto LABEL_132;
  }
  if (v322)
  {
LABEL_132:
    v323 = sub_5C154(&qword_322FA0);
    memcpy(v316, v317, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
    goto LABEL_133;
  }
  (*(void (**)(char *, char *, uint64_t))(v319 + 32))(v316, v317, v318);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v319 + 56))(v316, 0, 1, v318);
LABEL_133:
  v324 = *(int *)(sub_5C154(&qword_322F80) + 28);
  v325 = *(_QWORD *)&v316[v324];
  *(_QWORD *)&v316[v324] = *(_QWORD *)&v317[v324];
  swift_release(v325);
  v326 = v356[5];
  v327 = *(_QWORD *)(a1 + v326);
  *(_QWORD *)(a1 + v326) = *(_QWORD *)(a2 + v326);
  swift_release(v327);
  v328 = v356[6];
  v329 = *(void **)(a1 + v328);
  *(_QWORD *)(a1 + v328) = *(_QWORD *)(a2 + v328);

  v330 = v356[7];
  v331 = (uint64_t *)(a1 + v330);
  v332 = (uint64_t *)(a2 + v330);
  v333 = *v332;
  LOBYTE(v332) = *((_BYTE *)v332 + 8);
  v334 = *v331;
  *v331 = v333;
  *((_BYTE *)v331 + 8) = (_BYTE)v332;
  swift_release(v334);
  v335 = v356[8];
  v336 = (uint64_t *)(a1 + v335);
  v337 = (uint64_t *)(a2 + v335);
  v338 = *v337;
  LOBYTE(v337) = *((_BYTE *)v337 + 8);
  v339 = *v336;
  *v336 = v338;
  *((_BYTE *)v336 + 8) = (_BYTE)v337;
  swift_release(v339);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageRootView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D0148);
}

uint64_t sub_D0148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PageContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PageRootView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D01D0);
}

uint64_t sub_D01D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PageContent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_D0248(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for PageContent(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = "\t";
    v4[4] = "\t";
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_D02D8()
{
  _QWORD v1[2];

  v1[0] = sub_667D0(&qword_322E68);
  v1[1] = sub_67060(&qword_322F90, &qword_322E68, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.presentedBy(_:)>>, 1);
}

uint64_t sub_D0350()
{
  type metadata accessor for PageRootView(0);
  return sub_C782C();
}

uint64_t sub_D0380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageRootView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_3230AC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_7BFF8;
  return sub_C6F5C(v3);
}

uint64_t sub_D03E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, int *);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v87 = (int *)type metadata accessor for PageRootView(0);
  v1 = *((_QWORD *)v87 - 1);
  v89 = *(unsigned __int8 *)(v1 + 80);
  v2 = (v89 + 16) & ~v89;
  v3 = *(_QWORD *)(v1 + 64);
  v4 = (int *)type metadata accessor for Page(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v88 = *(_QWORD *)(v5 + 64);
  v90 = v0;
  v7 = v0 + v2;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v2));
  v8 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v9 = v0 + v2 + v8[5];
  v10 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v5 + 48);
  if (!v10(v9, 1, v4))
  {
    v12 = v3;
    v85 = v6;
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    v13 = v9 + v4[5];
    v14 = type metadata accessor for LocalizerRequest(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (!v16(v13, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    v17 = v9 + v4[6];
    if (!v16(v17, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
    v18 = v9 + v4[9];
    v19 = type metadata accessor for ToolbarPrincipalType(0);
    v20 = *(_QWORD *)(v19 - 8);
    v3 = v12;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v4[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v4[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v4[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v4[14] + 8));
    v21 = v9 + v4[15];
    v22 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v4[16]));
    v23 = v9 + v4[17];
    v24 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v4[19]));
    swift_release(*(_QWORD *)(v9 + v4[20]));
    v11 = swift_bridgeObjectRelease(*(_QWORD *)(v9 + v4[22] + 8));
    v25 = v9 + v4[23];
    v26 = *(_QWORD *)(v25 + 8);
    v2 = (v89 + 16) & ~v89;
    v6 = v85;
    if (v26)
    {
      swift_bridgeObjectRelease(v26);
      v11 = swift_bridgeObjectRelease(*(_QWORD *)(v25 + 32));
    }
  }
  v27 = v3 + v6;
  v28 = v7 + v8[6];
  if (!((unsigned int (*)(uint64_t, uint64_t, int *, __n128))v10)(v28, 1, v4, v11))
  {
    v84 = v2;
    v86 = v6;
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + 8));
    v29 = v28 + v4[5];
    v30 = type metadata accessor for LocalizerRequest(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
    if (!v32(v29, 1, v30))
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
    v33 = v28 + v4[6];
    if (!v32(v33, 1, v30))
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v30);
    v34 = v28 + v4[9];
    v35 = type metadata accessor for ToolbarPrincipalType(0);
    v36 = *(_QWORD *)(v35 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v4[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v4[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v4[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v4[14] + 8));
    v37 = v28 + v4[15];
    v38 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v4[16]));
    v39 = v28 + v4[17];
    v40 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v4[19]));
    swift_release(*(_QWORD *)(v28 + v4[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + v4[22] + 8));
    v41 = v28 + v4[23];
    v42 = *(_QWORD *)(v41 + 8);
    v2 = v84;
    v6 = v86;
    if (v42)
    {
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(*(_QWORD *)(v41 + 32));
    }
  }
  v43 = v2 + v27;
  v44 = v7 + v8[8];
  v45 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
  v46 = v7 + v8[9];
  if (!v10(v46, 1, v4))
  {
    v47 = v6;
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + 8));
    v48 = v46 + v4[5];
    v49 = type metadata accessor for LocalizerRequest(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
    if (!v51(v48, 1, v49))
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    v52 = v46 + v4[6];
    if (!v51(v52, 1, v49))
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v49);
    v53 = v46 + v4[9];
    v54 = type metadata accessor for ToolbarPrincipalType(0);
    v55 = *(_QWORD *)(v54 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + v4[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + v4[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + v4[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + v4[14] + 8));
    v56 = v46 + v4[15];
    v57 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + v4[16]));
    v58 = v46 + v4[17];
    v59 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + v4[19]));
    swift_release(*(_QWORD *)(v46 + v4[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v46 + v4[22] + 8));
    v60 = v46 + v4[23];
    v61 = *(_QWORD *)(v60 + 8);
    v6 = v47;
    if (v61)
    {
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(*(_QWORD *)(v60 + 32));
    }
  }
  v62 = v43 & ~v6;
  v63 = sub_5C154(&qword_3217C8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v63 + 28)));
  v64 = v7 + *(int *)(type metadata accessor for PageContent(0) + 20);
  v65 = type metadata accessor for BooksAlertAction(0);
  v66 = *(_QWORD *)(v65 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
  v67 = sub_5C154(&qword_322F80);
  swift_release(*(_QWORD *)(v64 + *(int *)(v67 + 28)));
  swift_release(*(_QWORD *)(v7 + v87[5]));

  swift_release(*(_QWORD *)(v7 + v87[7]));
  swift_release(*(_QWORD *)(v7 + v87[8]));
  v68 = v90 + v62;
  swift_bridgeObjectRelease(*(_QWORD *)(v90 + v62 + 8));
  v69 = v90 + v62 + v4[5];
  v70 = type metadata accessor for LocalizerRequest(0);
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  if (!v72(v69, 1, v70))
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
  v73 = v68 + v4[6];
  if (!v72(v73, 1, v70))
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, v70);
  v74 = v68 + v4[9];
  v75 = type metadata accessor for ToolbarPrincipalType(0);
  v76 = *(_QWORD *)(v75 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
  swift_bridgeObjectRelease(*(_QWORD *)(v68 + v4[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(v68 + v4[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(v68 + v4[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(v68 + v4[14] + 8));
  v77 = v68 + v4[15];
  v78 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v77, v78);
  swift_bridgeObjectRelease(*(_QWORD *)(v68 + v4[16]));
  v79 = v68 + v4[17];
  v80 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v79, v80);
  swift_bridgeObjectRelease(*(_QWORD *)(v68 + v4[19]));
  swift_release(*(_QWORD *)(v68 + v4[20]));
  swift_bridgeObjectRelease(*(_QWORD *)(v68 + v4[22] + 8));
  v81 = v68 + v4[23];
  v82 = *(_QWORD *)(v81 + 8);
  if (v82)
  {
    swift_bridgeObjectRelease(v82);
    swift_bridgeObjectRelease(*(_QWORD *)(v81 + 32));
  }
  return swift_deallocObject(v90, v62 + v88, v89 | v6 | 7);
}

uint64_t sub_D0BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for PageRootView(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Page(0) - 8) + 80);
  v6 = v3 + v4 + v5;
  v7 = v0 + v3;
  v8 = v0 + (v6 & ~v5);
  v9 = (_QWORD *)swift_task_alloc(dword_3230DC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_64780;
  return sub_C9E78(v7, v8);
}

uint64_t sub_D0CA0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  unsigned int (*v9)(uint64_t, uint64_t, int *);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = v0;
  v2 = (int *)type metadata accessor for PageRootView(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v67 = *(_QWORD *)(v3 + 64);
  v68 = (v4 + 16) & ~v4;
  v5 = v0 + v68;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v68));
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v0 + v68 + v6[5];
  v8 = (int *)type metadata accessor for Page(0);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48);
  if (!v9(v7, 1, v8))
  {
    v63 = v4;
    v65 = v1;
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
    v11 = v7 + v8[5];
    v12 = type metadata accessor for LocalizerRequest(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (!v14(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    v15 = v7 + v8[6];
    if (!v14(v15, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v12);
    v16 = v7 + v8[9];
    v17 = type metadata accessor for ToolbarPrincipalType(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[14] + 8));
    v19 = v7 + v8[15];
    v20 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[16]));
    v21 = v7 + v8[17];
    v22 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[19]));
    swift_release(*(_QWORD *)(v7 + v8[20]));
    v10 = swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[22] + 8));
    v23 = v7 + v8[23];
    v24 = *(_QWORD *)(v23 + 8);
    v4 = v63;
    v1 = v65;
    if (v24)
    {
      swift_bridgeObjectRelease(v24);
      v10 = swift_bridgeObjectRelease(*(_QWORD *)(v23 + 32));
    }
  }
  v25 = v5 + v6[6];
  if (!((unsigned int (*)(uint64_t, uint64_t, int *, __n128))v9)(v25, 1, v8, v10))
  {
    v64 = v4;
    v66 = v1;
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + 8));
    v26 = v25 + v8[5];
    v27 = type metadata accessor for LocalizerRequest(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (!v29(v26, 1, v27))
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    v30 = v25 + v8[6];
    if (!v29(v30, 1, v27))
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
    v31 = v25 + v8[9];
    v32 = type metadata accessor for ToolbarPrincipalType(0);
    v33 = *(_QWORD *)(v32 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[14] + 8));
    v34 = v25 + v8[15];
    v35 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[16]));
    v36 = v25 + v8[17];
    v37 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[19]));
    swift_release(*(_QWORD *)(v25 + v8[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[22] + 8));
    v38 = v25 + v8[23];
    v39 = *(_QWORD *)(v38 + 8);
    v4 = v64;
    v1 = v66;
    if (v39)
    {
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(*(_QWORD *)(v38 + 32));
    }
  }
  v40 = v5 + v6[8];
  v41 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
  v42 = v5 + v6[9];
  if (!v9(v42, 1, v8))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + 8));
    v43 = v42 + v8[5];
    v44 = type metadata accessor for LocalizerRequest(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (!v46(v43, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    v47 = v42 + v8[6];
    if (!v46(v47, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v44);
    v48 = v42 + v8[9];
    v49 = type metadata accessor for ToolbarPrincipalType(0);
    v50 = *(_QWORD *)(v49 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[14] + 8));
    v51 = v42 + v8[15];
    v52 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[16]));
    v53 = v42 + v8[17];
    v54 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[19]));
    swift_release(*(_QWORD *)(v42 + v8[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[22] + 8));
    v55 = v42 + v8[23];
    v56 = *(_QWORD *)(v55 + 8);
    if (v56)
    {
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(*(_QWORD *)(v55 + 32));
    }
  }
  v57 = sub_5C154(&qword_3217C8);
  swift_release(*(_QWORD *)(v5 + *(int *)(v57 + 28)));
  v58 = v5 + *(int *)(type metadata accessor for PageContent(0) + 20);
  v59 = type metadata accessor for BooksAlertAction(0);
  v60 = *(_QWORD *)(v59 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
  v61 = sub_5C154(&qword_322F80);
  swift_release(*(_QWORD *)(v58 + *(int *)(v61 + 28)));
  swift_release(*(_QWORD *)(v5 + v2[5]));

  swift_release(*(_QWORD *)(v5 + v2[7]));
  swift_release(*(_QWORD *)(v5 + v2[8]));
  return swift_deallocObject(v1, v68 + v67, v4 | 7);
}

uint64_t sub_D1300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageRootView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_3230EC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_7BFF8;
  return sub_C9FE8(v3);
}

void *static BSUINoticeViewController.noticeViewTitleFontAttributes.getter()
{
  void *v0;
  void *v1;
  id v3;

  v0 = sub_1786A4();
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "bc_booksKeyColor");
  v1 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(v0);

  return v1;
}

void *static BSUINoticeViewController.noticeViewMessageFontAttributes.getter()
{
  return sub_D15B0((uint64_t *)&UIFontWeightMedium);
}

Class sub_D1524(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  Class isa;

  v3 = sub_D15B0(a3);
  type metadata accessor for Key(0);
  sub_D16C8();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  return isa;
}

void *static BSUINoticeViewController.noticeViewConfirmLabelFontAttributes.getter()
{
  return sub_D15B0((uint64_t *)&UIFontWeightSemibold);
}

void *sub_D15B0(uint64_t *a1)
{
  NSString *v1;
  NSString *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *a1;
  LOBYTE(v8) = 0;
  LOBYTE(v9) = 1;
  LOWORD(v10) = 0;
  LOBYTE(v11) = 1;
  v1 = UIFontDescriptorSystemDesignDefault;
  v2 = UIFontTextStyleSubheadline;
  v3 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(0);

  v4 = objc_msgSend((id)objc_opt_self(UIColor), "bc_booksKeyColor", UIFontDescriptorSystemDesignDefault, v7, v8, UIFontTextStyleSubheadline, 0, v9, 0, 0, v10, 0, v11, 0);
  v5 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(v3);

  return v5;
}

unint64_t sub_D16C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31ED90;
  if (!qword_31ED90)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_257088, v1);
    atomic_store(result, (unint64_t *)&qword_31ED90);
  }
  return result;
}

void *static BSUINavigationController.navigationBarFontAttributes.getter()
{
  void *v0;
  NSString *v1;
  void *v2;
  id v4;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = UIFontDescriptorSystemDesignSerif;
  v4 = objc_msgSend(v0, "bc_booksKeyColor");
  v2 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(0);

  return v2;
}

void *static BSUINavigationController.largeNavigationBarFontAttributes(with:)(void *a1)
{
  void *v1;
  void *v2;
  id v4;

  v1 = _s11BookStoreUI21ToolKitTextAttributesV13toolbarHeader4withSDySo21NSAttributedStringKeyaypGSo17UITraitCollectionC_tFZ_0(a1);
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "bc_booksKeyColor");
  v2 = TextAttributesBuilder.build()();
  swift_bridgeObjectRelease(v1);

  return v2;
}

uint64_t sub_D1A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D1A60);
}

uint64_t sub_D1A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_D1AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D1AEC);
}

uint64_t sub_D1AEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_31F480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DefaultFooterComponentModel(uint64_t a1)
{
  return sub_64960(a1, qword_323150, (uint64_t)&nominal type descriptor for DefaultFooterComponentModel);
}

void sub_D1B78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = &unk_25CFC8;
  sub_8C25C(319, (unint64_t *)&qword_320AC8, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_D1C0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v6 = UUID.init()();
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease(v16);
  v15 = v7;
  v16 = v9;
  v10._countAndFlagsBits = 0x746C75616665642DLL;
  v10._object = (void *)0xEF7265746F6F662DLL;
  String.append(_:)(v10);
  AnyHashable.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String);
  v11 = type metadata accessor for DefaultFooterComponentModel(0);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = a1 + *(int *)(v11 + 24);
  v13 = type metadata accessor for ImpressionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t sub_D1D58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5DCB0(v1, a1);
}

uint64_t sub_D1D64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_5E1A4(v1 + 40, a1, (uint64_t *)&unk_326210);
}

uint64_t sub_D1D88()
{
  return sub_648E0(&qword_323190, type metadata accessor for DefaultFooterComponentModel, (uint64_t)&unk_25CFE0);
}

uint64_t *sub_D1DB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_5C154(&qword_320160);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_D1E7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for SizeConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *sub_D1EE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_D1F7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_D2028((uint64_t)a1);
    v4 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

uint64_t sub_D2028(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_320160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_D2068(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for SizeConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_D2100(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_D2028((uint64_t)a1);
    v4 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for SizeConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_D21A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D21B4);
}

uint64_t sub_D21B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3201B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_D21F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D2200);
}

uint64_t sub_D2200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3201B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DefaultFooterComponent(uint64_t a1)
{
  return sub_64960(a1, qword_3231F0, (uint64_t)&nominal type descriptor for DefaultFooterComponent);
}

void sub_D2258(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_D22D8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0(&qword_32A050, type metadata accessor for DefaultFooterComponent, (uint64_t)&unk_25D0B8);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

double sub_D2330@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  double result;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = type metadata accessor for SizeConstants.Spacing(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SizeConstants(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Color.clear.getter(v9);
  v13 = sub_76D64((uint64_t)v11);
  SizeConstants.spacing.getter(v13);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v15 = SizeConstants.Spacing.xxxl.getter(v14);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v17 = static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(&v24, 0, 1, *(_QWORD *)&v15, 0, v17, v18);
  v19 = v24;
  v20 = v25;
  v21 = v26;
  v22 = v27;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v21;
  *(_BYTE *)(a1 + 32) = v22;
  result = *(double *)&v28;
  *(_OWORD *)(a1 + 40) = v28;
  return result;
}

uint64_t sub_D2484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D2580(v5, (uint64_t)v4);
  v6 = sub_648E0(&qword_32A050, type metadata accessor for DefaultFooterComponent, (uint64_t)&unk_25D0B8);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_D2518()
{
  return sub_648E0(&qword_323228, type metadata accessor for DefaultFooterComponent, (uint64_t)&unk_25D068);
}

uint64_t sub_D2544(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B6C20, 1);
}

uint64_t sub_D2554()
{
  return sub_648E0(&qword_323230, type metadata accessor for DefaultFooterComponentModel, (uint64_t)&unk_25D008);
}

uint64_t sub_D2580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultFooterComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_D25C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323238;
  if (!qword_323238)
  {
    v1 = sub_667D0(&qword_323240);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323238);
  }
  return result;
}

uint64_t *sub_D262C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v19 = type metadata accessor for FontConstants(0, v18);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v16, v19);
      v20 = v15;
      v21 = v17;
      v22 = 1;
    }
    else
    {
      v23 = *v16;
      *v15 = *v16;
      swift_retain(v23);
      v20 = v15;
      v21 = v17;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v24 = a3[6];
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = v25;
      v30 = v27;
      v31 = 1;
    }
    else
    {
      v32 = *v26;
      *v25 = *v26;
      swift_retain(v32);
      v29 = v25;
      v30 = v27;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
    v33 = a3[7];
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (char *)a2 + v33;
    v36 = *(uint64_t *)((char *)a2 + v33);
    v37 = *(uint64_t *)((char *)a2 + v33 + 8);
    *v34 = v36;
    v34[1] = v37;
    swift_retain(v36);
    swift_retain(v37);
    v38 = *(int *)(sub_5C154(&qword_323248) + 32);
    v39 = (char *)v34 + v38;
    v40 = &v35[v38];
    v41 = type metadata accessor for NavigationBarTransitionInfo(0);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = sub_5C154(&qword_323250);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
  }
  return a1;
}

uint64_t sub_D28A8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v9 = type metadata accessor for FontConstants(0, v8);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (_QWORD *)((char *)a1 + a2[6]);
  v11 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)((char *)a1 + a2[7]);
  swift_release(*v13);
  swift_release(v13[1]);
  v14 = (char *)v13 + *(int *)(sub_5C154(&qword_323248) + 32);
  v15 = type metadata accessor for NavigationBarTransitionInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

uint64_t *sub_D2A28(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v17 = type metadata accessor for FontConstants(0, v16);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
    v18 = v13;
    v19 = v15;
    v20 = 1;
  }
  else
  {
    v21 = *v14;
    *v13 = *v14;
    swift_retain(v21);
    v18 = v13;
    v19 = v15;
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v19, v20);
  v22 = a3[6];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = v23;
    v28 = v25;
    v29 = 1;
  }
  else
  {
    v30 = *v24;
    *v23 = *v24;
    swift_retain(v30);
    v27 = v23;
    v28 = v25;
    v29 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v28, v29);
  v31 = a3[7];
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (char *)a2 + v31;
  v34 = *(uint64_t *)((char *)a2 + v31);
  v35 = *(uint64_t *)((char *)a2 + v31 + 8);
  *v32 = v34;
  v32[1] = v35;
  swift_retain(v34);
  swift_retain(v35);
  v36 = *(int *)(sub_5C154(&qword_323248) + 32);
  v37 = (char *)v32 + v36;
  v38 = &v33[v36];
  v39 = type metadata accessor for NavigationBarTransitionInfo(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = sub_5C154(&qword_323250);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  return a1;
}

uint64_t *sub_D2C78(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_5E09C((uint64_t)a1 + v12, &qword_320290);
    v15 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v17 = type metadata accessor for FontConstants(0, v16);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
      v18 = v13;
      v19 = v15;
      v20 = 1;
    }
    else
    {
      v21 = *v14;
      *v13 = *v14;
      swift_retain(v21);
      v18 = v13;
      v19 = v15;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
    v22 = a3[6];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    sub_5E09C((uint64_t)a1 + v22, &qword_320160);
    v25 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = v23;
      v28 = v25;
      v29 = 1;
    }
    else
    {
      v30 = *v24;
      *v23 = *v24;
      swift_retain(v30);
      v27 = v23;
      v28 = v25;
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
  }
  v31 = a3[7];
  v32 = (char *)a1 + v31;
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *(uint64_t *)((char *)a1 + v31);
  v35 = *v33;
  *(uint64_t *)((char *)a1 + v31) = *v33;
  swift_retain(v35);
  swift_release(v34);
  v36 = v33[1];
  v37 = *((_QWORD *)v32 + 1);
  *((_QWORD *)v32 + 1) = v36;
  swift_retain(v36);
  swift_release(v37);
  v38 = *(int *)(sub_5C154(&qword_323248) + 32);
  v39 = &v32[v38];
  v40 = (char *)v33 + v38;
  v41 = type metadata accessor for NavigationBarTransitionInfo(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
    goto LABEL_17;
  }
  if (v45)
  {
LABEL_17:
    v46 = sub_5C154(&qword_323250);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  return a1;
}

char *sub_D2F68(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v13 = type metadata accessor for FontConstants(0, v12);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)&a2[v19 + 8];
  *(_QWORD *)v20 = *(_QWORD *)&a2[v19];
  *((_QWORD *)v20 + 1) = v22;
  v23 = *(int *)(sub_5C154(&qword_323248) + 32);
  v24 = &v20[v23];
  v25 = &v21[v23];
  v26 = type metadata accessor for NavigationBarTransitionInfo(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_5C154(&qword_323250);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

char *sub_D31A0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v6 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_5E09C((uint64_t)&a1[v8], &qword_320290);
    v11 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v13 = type metadata accessor for FontConstants(0, v12);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v14 = a3[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    sub_5E09C((uint64_t)&a1[v14], &qword_320160);
    v17 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  swift_release(v22);
  v23 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_release(v23);
  v24 = *(int *)(sub_5C154(&qword_323248) + 32);
  v25 = &v20[v24];
  v26 = &v21[v24];
  v27 = type metadata accessor for NavigationBarTransitionInfo(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_16;
  }
  if (v31)
  {
LABEL_16:
    v32 = sub_5C154(&qword_323250);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t sub_D3474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D3480);
}

uint64_t sub_D3480(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_5C154(&qword_31F498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_5C154(&qword_320BC8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_5C154(&qword_3201B0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_5C154(&qword_323248);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_D354C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D3558);
}

uint64_t sub_D3558(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_5C154(&qword_31F498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5C154(&qword_320BC8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_5C154(&qword_3201B0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_5C154(&qword_323248);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DescriptionHeaderComponent(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3232B0, (uint64_t)&nominal type descriptor for DescriptionHeaderComponent);
}

void sub_D3640(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_663E4(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_663E4(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_663E4(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_D372C(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_D372C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3232C0)
  {
    v2 = sub_667D0(&qword_323250);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3232C0);
  }
}

uint64_t sub_D3784(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0(&qword_3232F8, type metadata accessor for DescriptionHeaderComponent, (uint64_t)&unk_25D18C);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t sub_D37DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41)@<X0>(double *@<X8>);
  _QWORD *v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char *v76;
  uint64_t KeyPath;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[3];

  v134 = a3;
  v130 = type metadata accessor for ShortDividerStyle(0);
  __chkstk_darwin(v130);
  v122 = (uint64_t *)((char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v6);
  v127 = (uint64_t)&v109 - v8;
  v9 = type metadata accessor for Divider(0, v7);
  v125 = *(_QWORD *)(v9 - 8);
  v126 = v9;
  __chkstk_darwin(v9);
  v124 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_5C154(&qword_323310);
  v129 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_5C154(&qword_323318);
  __chkstk_darwin(v123);
  v133 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v132 = (uint64_t)&v109 - v14;
  v119 = type metadata accessor for ColorConstants(0);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (uint64_t)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_31F7E8);
  v17 = __chkstk_darwin(v16);
  v116 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for Font.TextStyle(0, v17);
  v114 = *(_QWORD *)(v115 - 8);
  v19 = __chkstk_darwin(v115);
  v113 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for FontConstants(0, v19);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (uint64_t)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for DescriptionHeaderComponent(0);
  v22 = *(_QWORD *)(v109 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  __chkstk_darwin(v109);
  v24 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_323320);
  __chkstk_darwin(v25);
  v27 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5C154(&qword_323328);
  __chkstk_darwin(v28);
  v121 = (uint64_t)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v109 - v31;
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v109 - v35;
  *(_QWORD *)v27 = static HorizontalAlignment.center.getter(v34);
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 0;
  v37 = sub_5C154(&qword_323330);
  sub_D40F8(a1, a2, (uint64_t)&v27[*(int *)(v37 + 44)]);
  v135 = a2;
  sub_5E11C(a2, (uint64_t)v24, type metadata accessor for DescriptionHeaderComponent);
  v38 = *(unsigned __int8 *)(v22 + 80);
  v39 = (v38 + 16) & ~v38;
  v40 = swift_allocObject(&unk_2EBCC8, v39 + v23, v38 | 7);
  sub_5E160((uint64_t)v24, v40 + v39, type metadata accessor for DescriptionHeaderComponent);
  sub_5E1A4((uint64_t)v27, (uint64_t)v32, &qword_323320);
  v41 = (uint64_t (**)@<X0>(double *@<X8>))&v32[*(int *)(v28 + 36)];
  *v41 = sub_D5464;
  v41[1] = 0;
  v41[2] = (uint64_t (*)@<X0>(double *@<X8>))sub_D5A30;
  v41[3] = (uint64_t (*)@<X0>(double *@<X8>))v40;
  sub_5E09C((uint64_t)v27, &qword_323320);
  v120 = v36;
  sub_66F14((uint64_t)v32, (uint64_t)v36, &qword_323328);
  v42 = (_QWORD *)(a1 + *(int *)(type metadata accessor for DescriptionHeaderComponentModel(0) + 32));
  v44 = v42[1];
  if (v44)
  {
    v136[0] = *v42;
    v136[1] = v44;
    v45 = sub_668F8();
    swift_bridgeObjectRetain(v44);
    v46 = Text.init<A>(_:)(v136, &type metadata for String, v45);
    v48 = v47;
    v50 = v49;
    v52 = v51 & 1;
    v53 = v110;
    sub_77618(v110);
    v54 = v114;
    v55 = v113;
    v56 = v115;
    (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v113, enum case for Font.TextStyle.footnote(_:), v115);
    v57 = type metadata accessor for Font.Design(0);
    v58 = (uint64_t)v116;
    v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v116, 1, 1, v57);
    v60 = static Font.Weight.medium.getter(v59);
    v61 = static Font.system(_:design:weight:)(v55, v58, *(_QWORD *)&v60, 0);
    sub_5E09C(v58, &qword_31F7E8);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v53, v112);
    v62 = Text.font(_:)(v61, v46, v48, v52, v50);
    v64 = v63;
    v66 = v65;
    v68 = v67 & 1;
    sub_6693C(v46, v48, v52);
    swift_release(v61);
    swift_bridgeObjectRelease(v50);
    v69 = v117;
    v70 = sub_76AA0(v117);
    v71 = ColorConstants.booksSecondaryLabel.getter(v70);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v69, v119);
    v136[0] = v71;
    v135 = Text.foregroundStyle<A>(_:)(v136, v62, v64, v68, v66, &type metadata for Color, &protocol witness table for Color);
    v119 = v72;
    v118 = v73;
    v75 = v74 & 1;
    sub_6693C(v62, v64, v68);
    swift_release(v71);
    v43 = swift_bridgeObjectRelease(v66);
  }
  else
  {
    v135 = 0;
    v119 = 0;
    v75 = 0;
    v118 = 0;
  }
  v76 = v124;
  Divider.init()(v43);
  KeyPath = swift_getKeyPath(&unk_25D1F8);
  v78 = (uint64_t)v122;
  *v122 = KeyPath;
  v79 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v78, v79, 0);
  v80 = v127;
  sub_5E160(v78, v127, type metadata accessor for ShortDividerStyle);
  v81 = sub_648E0(&qword_323338, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
  v82 = sub_648E0(&qword_323340, type metadata accessor for ShortDividerStyle, (uint64_t)&unk_25D378);
  v83 = v128;
  v84 = v126;
  View.dividerStyle<A>(_:)(v80, v126, v130, v81, v82);
  sub_6685C(v80, type metadata accessor for ShortDividerStyle);
  v85 = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v76, v84);
  v86 = static Edge.Set.vertical.getter(v85);
  v87 = EdgeInsets.init(_all:)(32.0);
  v89 = v88;
  v91 = v90;
  v93 = v92;
  v94 = v129;
  v95 = (uint64_t)v133;
  v96 = v131;
  (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v133, v83, v131);
  v97 = v95 + *(int *)(v123 + 36);
  *(_BYTE *)v97 = v86;
  *(double *)(v97 + 8) = v87;
  *(_QWORD *)(v97 + 16) = v89;
  *(_QWORD *)(v97 + 24) = v91;
  *(_QWORD *)(v97 + 32) = v93;
  *(_BYTE *)(v97 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v94 + 8))(v83, v96);
  v98 = v132;
  sub_66F14(v95, v132, &qword_323318);
  v99 = (uint64_t)v120;
  v100 = v121;
  sub_5E1A4((uint64_t)v120, v121, &qword_323328);
  sub_5E1A4(v98, v95, &qword_323318);
  v101 = v134;
  sub_5E1A4(v100, v134, &qword_323328);
  v102 = sub_5C154(&qword_323348);
  v103 = (uint64_t *)(v101 + *(int *)(v102 + 48));
  v104 = v135;
  v105 = v119;
  *v103 = v135;
  v103[1] = v105;
  v103[2] = v75;
  v106 = v75;
  v107 = v118;
  v103[3] = v118;
  sub_5E1A4(v95, v101 + *(int *)(v102 + 64), &qword_323318);
  sub_9BA0C(v104, v105, v106, v107);
  sub_5E09C(v98, &qword_323318);
  sub_5E09C(v99, &qword_323328);
  sub_5E09C(v95, &qword_323318);
  sub_9BA3C(v104, v105, v106, v107);
  return sub_5E09C(v100, &qword_323328);
}

uint64_t sub_D40F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  char v229;
  __int128 v230;

  v212 = a3;
  v209 = type metadata accessor for AccessibilityTraits(0);
  v208 = *(_QWORD *)(v209 - 8);
  v5 = __chkstk_darwin(v209);
  v207 = (char *)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for Font.TextStyle(0, v5);
  v205 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v204 = (char *)&v181 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_323350);
  __chkstk_darwin(v8);
  v211 = (char *)&v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v210 = (uint64_t)&v181 - v11;
  v185 = sub_5C154(&qword_3205E0);
  __chkstk_darwin(v185);
  v192 = (uint64_t *)((char *)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v191 = type metadata accessor for Image.Scale(0);
  v189 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v14 = (char *)&v181 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ColorConstants(0);
  v218 = *(_QWORD *)(v15 - 8);
  v219 = v15;
  __chkstk_darwin(v15);
  v217 = (uint64_t)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_31F7E8);
  v18 = __chkstk_darwin(v17);
  v213 = (char *)&v181 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for FontConstants(0, v18);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v214 = (uint64_t)&v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_5C154(&qword_323358);
  __chkstk_darwin(v183);
  v22 = (uint64_t *)((char *)&v181 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v184 = sub_5C154(&qword_323360);
  __chkstk_darwin(v184);
  v187 = (uint64_t)&v181 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_5C154(&qword_323368);
  __chkstk_darwin(v190);
  v188 = (uint64_t)&v181 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_5C154(&qword_323370);
  __chkstk_darwin(v197);
  v186 = (char *)&v181 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v193 = (uint64_t)&v181 - v27;
  v200 = sub_5C154(&qword_323378);
  __chkstk_darwin(v200);
  v29 = (char *)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_5C154(&qword_323380);
  __chkstk_darwin(v195);
  v196 = (uint64_t)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_5C154(&qword_323388);
  __chkstk_darwin(v201);
  v198 = (char *)&v181 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5C154(&qword_323390);
  __chkstk_darwin(v32);
  v34 = (char *)&v181 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5C154(&qword_323398);
  __chkstk_darwin(v35);
  v37 = (char *)&v181 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_5C154(&qword_3233A0);
  __chkstk_darwin(v194);
  v39 = (char *)&v181 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v181 - v41;
  v43 = sub_5C154(&qword_3233A8);
  __chkstk_darwin(v43);
  v202 = (uint64_t)&v181 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v221 = (uint64_t)&v181 - v46;
  v47 = type metadata accessor for DescriptionHeaderComponentModel(0);
  v199 = v47;
  v48 = *(int *)(v47 + 36);
  v203 = a1;
  v49 = *(unsigned __int8 *)(a1 + v48);
  v220 = a2;
  if (v49)
  {
    if (v49 == 1)
    {
      v182 = Image.init(systemName:)(0x706F2E65746F7571, 0xED0000676E696E65);
      type metadata accessor for DescriptionHeaderComponent(0);
      v50 = v214;
      sub_77618(v214);
      v51 = type metadata accessor for Font.Design(0);
      v52 = (uint64_t)v213;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v213, 1, 1, v51);
      v181 = static Font.system(size:weight:design:)(0, 1, v52, 45.0);
      sub_5E09C(v52, &qword_31F7E8);
      (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v50, v216);
      KeyPath = swift_getKeyPath(&unk_25D228);
      v54 = v217;
      v55 = sub_76AA0(v217);
      v56 = ColorConstants.booksTertiaryLabel.getter(v55);
      (*(void (**)(uint64_t, uint64_t))(v218 + 8))(v54, v219);
      v57 = swift_getKeyPath(&unk_25D258);
      v58 = v189;
      v59 = v14;
      v60 = v14;
      v61 = v191;
      (*(void (**)(char *, _QWORD, uint64_t))(v189 + 104))(v60, enum case for Image.Scale.large(_:), v191);
      v62 = swift_getKeyPath(&unk_25D288);
      v63 = v192;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))((char *)v192 + *(int *)(v185 + 28), v59, v61);
      *v63 = v62;
      sub_5E1A4((uint64_t)v63, (uint64_t)v22 + *(int *)(v183 + 36), &qword_3205E0);
      v64 = v182;
      *v22 = v182;
      v22[1] = KeyPath;
      v65 = v181;
      v22[2] = v181;
      v22[3] = v57;
      v22[4] = v56;
      swift_retain(v64);
      swift_retain(KeyPath);
      swift_retain(v65);
      swift_retain(v57);
      swift_retain(v56);
      sub_5E09C((uint64_t)v63, &qword_3205E0);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v61);
      swift_release(v56);
      swift_release(v57);
      swift_release(v65);
      swift_release(KeyPath);
      v66 = swift_release(v182);
      LOBYTE(v65) = static Edge.Set.top.getter(v66);
      v67 = EdgeInsets.init(_all:)(12.0);
      v69 = v68;
      v71 = v70;
      v73 = v72;
      v74 = v187;
      sub_5E1A4((uint64_t)v22, v187, &qword_323358);
      v75 = v74 + *(int *)(v184 + 36);
      *(_BYTE *)v75 = v65;
      *(double *)(v75 + 8) = v67;
      *(_QWORD *)(v75 + 16) = v69;
      *(_QWORD *)(v75 + 24) = v71;
      *(_QWORD *)(v75 + 32) = v73;
      *(_BYTE *)(v75 + 40) = 0;
      v76 = sub_5E09C((uint64_t)v22, &qword_323358);
      LOBYTE(v65) = static Edge.Set.bottom.getter(v76);
      v77 = EdgeInsets.init(_all:)(16.0);
      v79 = v78;
      v81 = v80;
      v83 = v82;
      v84 = v188;
      sub_5E1A4(v74, v188, &qword_323360);
      v85 = v190;
      v86 = v84 + *(int *)(v190 + 36);
      *(_BYTE *)v86 = v65;
      *(double *)(v86 + 8) = v77;
      *(_QWORD *)(v86 + 16) = v79;
      *(_QWORD *)(v86 + 24) = v81;
      *(_QWORD *)(v86 + 32) = v83;
      *(_BYTE *)(v86 + 40) = 0;
      sub_5E09C(v74, &qword_323360);
      v87 = sub_D6404();
      v88 = v186;
      View.accessibilityHidden(_:)(1, v85, v87);
      sub_5E09C(v84, &qword_323368);
      v89 = (uint64_t)v88;
      v90 = v193;
      sub_66F14(v89, v193, &qword_323370);
      v91 = v196;
      sub_5E1A4(v90, v196, &qword_323370);
      swift_storeEnumTagMultiPayload(v91, v195, 1);
      v92 = sub_D643C(&qword_3233C0, &qword_3233A0, (void (*)(void))sub_D62F4);
      v93 = sub_D72E4(&qword_3233F0, &qword_323370, (void (*)(void))sub_D6404);
      v94 = (uint64_t)v198;
      _ConditionalContent<>.init(storage:)(v91, v194, v197, v92, v93);
      sub_5E1A4(v94, (uint64_t)v29, &qword_323388);
      swift_storeEnumTagMultiPayload(v29, v200, 0);
      v95 = sub_5C154(&qword_3233B0);
      v96 = sub_D6258();
      v97 = sub_D65B0();
      _ConditionalContent<>.init(storage:)(v29, v201, v95, v96, v97);
      sub_5E09C(v94, &qword_323388);
      sub_5E09C(v90, &qword_323370);
    }
    else
    {
      v127 = static Alignment.center.getter(v47);
      _FrameLayout.init(width:height:alignment:)(&v226, 0, 1, 0x4028000000000000, 0, v127, v128);
      v129 = v226;
      v130 = v227;
      v131 = v228;
      v132 = v229;
      *(_QWORD *)v29 = 0;
      v29[8] = 1;
      *((_QWORD *)v29 + 2) = v129;
      v29[24] = v130;
      *((_QWORD *)v29 + 4) = v131;
      v29[40] = v132;
      *((_OWORD *)v29 + 3) = v230;
      swift_storeEnumTagMultiPayload(v29, v200, 1);
      v133 = sub_5C154(&qword_3233B0);
      v134 = sub_D6258();
      v135 = sub_D65B0();
      _ConditionalContent<>.init(storage:)(v29, v201, v133, v134, v135);
    }
    v98 = v203;
  }
  else
  {
    v98 = v203;
    v99 = sub_D51AC(v203, (uint64_t)v34);
    v100 = static Edge.Set.top.getter(v99);
    v101 = EdgeInsets.init(_all:)(12.0);
    v103 = v102;
    v105 = v104;
    v107 = v106;
    sub_5E1A4((uint64_t)v34, (uint64_t)v37, &qword_323390);
    v108 = &v37[*(int *)(v35 + 36)];
    *v108 = v100;
    *((double *)v108 + 1) = v101;
    *((_QWORD *)v108 + 2) = v103;
    *((_QWORD *)v108 + 3) = v105;
    *((_QWORD *)v108 + 4) = v107;
    v108[40] = 0;
    v109 = sub_5E09C((uint64_t)v34, &qword_323390);
    v110 = static Edge.Set.bottom.getter(v109);
    v111 = EdgeInsets.init(_all:)(16.0);
    v113 = v112;
    v115 = v114;
    v117 = v116;
    sub_5E1A4((uint64_t)v37, (uint64_t)v39, &qword_323398);
    v118 = v194;
    v119 = &v39[*(int *)(v194 + 36)];
    *v119 = v110;
    *((double *)v119 + 1) = v111;
    *((_QWORD *)v119 + 2) = v113;
    *((_QWORD *)v119 + 3) = v115;
    *((_QWORD *)v119 + 4) = v117;
    v119[40] = 0;
    sub_5E09C((uint64_t)v37, &qword_323398);
    sub_66F14((uint64_t)v39, (uint64_t)v42, &qword_3233A0);
    v120 = v196;
    sub_5E1A4((uint64_t)v42, v196, &qword_3233A0);
    swift_storeEnumTagMultiPayload(v120, v195, 0);
    v121 = sub_D643C(&qword_3233C0, &qword_3233A0, (void (*)(void))sub_D62F4);
    v122 = sub_D72E4(&qword_3233F0, &qword_323370, (void (*)(void))sub_D6404);
    v123 = (uint64_t)v198;
    _ConditionalContent<>.init(storage:)(v120, v118, v197, v121, v122);
    sub_5E1A4(v123, (uint64_t)v29, &qword_323388);
    swift_storeEnumTagMultiPayload(v29, v200, 0);
    v124 = sub_5C154(&qword_3233B0);
    v125 = sub_D6258();
    v126 = sub_D65B0();
    _ConditionalContent<>.init(storage:)(v29, v201, v124, v125, v126);
    sub_5E09C(v123, &qword_323388);
    sub_5E09C((uint64_t)v42, &qword_3233A0);
  }
  v136 = (uint64_t *)(v98 + *(int *)(v199 + 28));
  v137 = v136[1];
  v222 = *v136;
  v223 = v137;
  v138 = sub_668F8();
  swift_bridgeObjectRetain(v137);
  v201 = Text.init<A>(_:)(&v222, &type metadata for String, v138);
  v140 = v139;
  v203 = v141;
  v143 = v142 & 1;
  type metadata accessor for DescriptionHeaderComponent(0);
  v144 = v214;
  sub_77618(v214);
  v145 = v205;
  v146 = v204;
  v147 = v206;
  (*(void (**)(char *, _QWORD, uint64_t))(v205 + 104))(v204, enum case for Font.TextStyle.title2(_:), v206);
  v148 = enum case for Font.Design.serif (_:);
  v149 = type metadata accessor for Font.Design(0);
  v150 = *(_QWORD *)(v149 - 8);
  v151 = (uint64_t)v213;
  (*(void (**)(char *, uint64_t, uint64_t))(v150 + 104))(v213, v148, v149);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v151, 0, 1, v149);
  v152 = static Font.system(_:design:weight:)(v146, v151, 0, 1);
  sub_5E09C(v151, &qword_31F7E8);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v147);
  v153 = Font.bold()(v152);
  swift_release(v152);
  (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v144, v216);
  v154 = v201;
  v155 = v203;
  v156 = Text.font(_:)(v153, v201, v140, v143, v203);
  v158 = v157;
  v160 = v159;
  v162 = v161 & 1;
  sub_6693C(v154, v140, v143);
  swift_release(v153);
  swift_bridgeObjectRelease(v155);
  v163 = v217;
  v164 = sub_76AA0(v217);
  v165 = ColorConstants.booksLabel.getter(v164);
  (*(void (**)(uint64_t, uint64_t))(v218 + 8))(v163, v219);
  v222 = v165;
  v166 = Text.foregroundStyle<A>(_:)(&v222, v156, v158, v162, v160, &type metadata for Color, &protocol witness table for Color);
  v168 = v167;
  LOBYTE(v140) = v169;
  v171 = v170;
  sub_6693C(v156, v158, v162);
  swift_release(v165);
  swift_bridgeObjectRelease(v160);
  v222 = v166;
  v223 = v168;
  v224 = v140 & 1;
  v225 = v171;
  v172 = v207;
  static AccessibilityTraits.isHeader.getter(v173);
  v174 = (uint64_t)v211;
  View.accessibilityAddTraits(_:)(v172, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v208 + 8))(v172, v209);
  sub_6693C(v222, v223, v224);
  swift_bridgeObjectRelease(v225);
  v175 = v210;
  sub_66F14(v174, v210, &qword_323350);
  v176 = v221;
  v177 = v202;
  sub_5E1A4(v221, v202, &qword_3233A8);
  sub_5E1A4(v175, v174, &qword_323350);
  v178 = v212;
  sub_5E1A4(v177, v212, &qword_3233A8);
  v179 = sub_5C154(&qword_323428);
  sub_5E1A4(v174, v178 + *(int *)(v179 + 48), &qword_323350);
  sub_5E09C(v175, &qword_323350);
  sub_5E09C(v176, &qword_3233A8);
  sub_5E09C(v174, &qword_323350);
  return sub_5E09C(v177, &qword_3233A8);
}

uint64_t sub_D51AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[4];
  __int128 v30;

  v29[0] = a2;
  v3 = sub_5C154(&qword_323430);
  __chkstk_darwin(v3);
  v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AppleBooksReviewIcon(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v11 = (char *)v29 - v10;
  v12 = type metadata accessor for ColorConstants(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1 + *(int *)(type metadata accessor for DescriptionHeaderComponentModel(0) + 40);
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_4;
  v18 = *(_QWORD *)(v16 + 16);
  v29[1] = *(_QWORD *)v16;
  v29[2] = v17;
  v29[3] = v18;
  v30 = *(_OWORD *)(v16 + 24);
  sub_76AA0((uint64_t)v15);
  v19 = sub_11479C();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v19)
  {
    *v8 = swift_getKeyPath(&unk_25D2B8);
    v20 = sub_5C154(&qword_320290);
    swift_storeEnumTagMultiPayload(v8, v20, 0);
    *(_QWORD *)((char *)v8 + *(int *)(v6 + 20)) = v19;
    sub_5E160((uint64_t)v8, (uint64_t)v11, type metadata accessor for AppleBooksReviewIcon);
    sub_5E11C((uint64_t)v11, (uint64_t)v5, type metadata accessor for AppleBooksReviewIcon);
    v21 = v5;
    v22 = v3;
    v23 = 0;
  }
  else
  {
LABEL_4:
    v24 = sub_76AA0((uint64_t)v15);
    v25 = ColorConstants.booksSecondaryLabel.getter(v24);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *v8 = swift_getKeyPath(&unk_25D2B8);
    v26 = sub_5C154(&qword_320290);
    swift_storeEnumTagMultiPayload(v8, v26, 0);
    *(_QWORD *)((char *)v8 + *(int *)(v6 + 20)) = v25;
    sub_5E160((uint64_t)v8, (uint64_t)v11, type metadata accessor for AppleBooksReviewIcon);
    sub_5E11C((uint64_t)v11, (uint64_t)v5, type metadata accessor for AppleBooksReviewIcon);
    v21 = v5;
    v22 = v3;
    v23 = 1;
  }
  swift_storeEnumTagMultiPayload(v21, v22, v23);
  v27 = sub_648E0(&qword_3233E8, type metadata accessor for AppleBooksReviewIcon, (uint64_t)&unk_25D328);
  _ConditionalContent<>.init(storage:)(v5, v6, v6, v27, v27);
  return sub_6685C((uint64_t)v11, type metadata accessor for AppleBooksReviewIcon);
}

uint64_t sub_D5464@<X0>(double *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v2 = type metadata accessor for LocalCoordinateSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter(v4);
  v7 = GeometryProxy.frame<A>(in:)(v6, v2, &protocol witness table for LocalCoordinateSpace);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = v7;
  *((_QWORD *)a1 + 1) = v9;
  *((_QWORD *)a1 + 2) = v11;
  *((_QWORD *)a1 + 3) = v13;
  return result;
}

uint64_t sub_D5524(CGFloat *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  double MinY;
  double MaxY;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  CGRect v18;
  CGRect v19;

  v2 = sub_5C154(&qword_323250);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - v6;
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v18.origin.x = *a1;
  v18.origin.y = v9;
  v18.size.width = v10;
  v18.size.height = v11;
  MinY = CGRectGetMinY(v18);
  v19.origin.x = v8;
  v19.origin.y = v9;
  v19.size.width = v10;
  v19.size.height = v11;
  MaxY = CGRectGetMaxY(v19);
  NavigationBarTransitionInfo.init(startOffset:endOffset:)(MinY, MaxY);
  v14 = type metadata accessor for NavigationBarTransitionInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 0, 1, v14);
  type metadata accessor for DescriptionHeaderComponent(0);
  sub_5E1A4((uint64_t)v7, (uint64_t)v4, &qword_323250);
  v15 = sub_5C154(&qword_323248);
  Binding.wrappedValue.setter(v4, v15);
  return sub_5E09C((uint64_t)v7, &qword_323250);
}

uint64_t sub_D5674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_5C154(&qword_320468);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v6);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v9 = sub_5C154(&qword_323308);
  v10 = sub_D37DC(a1, v2, (uint64_t)&v8[*(int *)(v9 + 44)]);
  v11 = static Alignment.center.getter(v10);
  sub_745C0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, 0.0, 1, v11, v12);
  return sub_5E09C((uint64_t)v8, &qword_320468);
}

uint64_t sub_D576C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(v5, (uint64_t)v4, type metadata accessor for DescriptionHeaderComponent);
  v6 = sub_648E0(&qword_3232F8, type metadata accessor for DescriptionHeaderComponent, (uint64_t)&unk_25D18C);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_D5808()
{
  return sub_648E0(&qword_323300, type metadata accessor for DescriptionHeaderComponent, (uint64_t)&unk_25D13C);
}

uint64_t sub_D5834(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B6CC0, 1);
}

uint64_t sub_D5844()
{
  return sub_648E0(&qword_320038, type metadata accessor for DescriptionHeaderComponentModel, (uint64_t)&unk_25C170);
}

uint64_t type metadata accessor for ShortDividerStyle(uint64_t a1)
{
  return sub_64960(a1, qword_323490, (uint64_t)&nominal type descriptor for ShortDividerStyle);
}

uint64_t sub_D5884()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (int *)type metadata accessor for DescriptionHeaderComponent(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v12 = type metadata accessor for FontConstants(0, v11);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
  }
  else
  {
    swift_release(*v9);
  }
  v13 = (_QWORD *)((char *)v6 + v1[6]);
  v14 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)((char *)v6 + v1[7]);
  swift_release(*v16);
  swift_release(v16[1]);
  v17 = (char *)v16 + *(int *)(sub_5C154(&qword_323248) + 32);
  v18 = type metadata accessor for NavigationBarTransitionInfo(0);
  v19 = *(_QWORD *)(v18 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_D5A30(CGFloat *a1)
{
  type metadata accessor for DescriptionHeaderComponent(0);
  return sub_D5524(a1);
}

uint64_t sub_D5A6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = sub_5C154(&qword_31F7E8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Font.TextStyle(0, v3);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FontConstants(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = Image.init(systemName:)(0x6C2E6C657275616CLL, 0xEE00676E69646165);
  v15 = sub_77618((uint64_t)v14);
  v16 = static Font.largeTitle.getter(v15);
  v34 = Font.bold()(v16);
  swift_release(v16);
  v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  v17(v14, v11);
  KeyPath = swift_getKeyPath(&unk_25D228);
  v33 = Image.init(systemName:)(0x6C69662E6B6F6F62, 0xE90000000000006CLL);
  sub_77618((uint64_t)v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for Font.TextStyle.largeTitle(_:), v6);
  v19 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  v32 = static Font.system(_:design:weight:)(v10, v5, 0, 1);
  sub_5E09C((uint64_t)v5, &qword_31F7E8);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v17(v14, v11);
  v20 = swift_getKeyPath(&unk_25D228);
  v21 = Image.init(systemName:)(0x742E6C657275616CLL, 0xEF676E696C696172);
  v22 = sub_77618((uint64_t)v14);
  v23 = static Font.largeTitle.getter(v22);
  v24 = Font.bold()(v23);
  swift_release(v23);
  v17(v14, v11);
  v25 = swift_getKeyPath(&unk_25D228);
  v27 = v34;
  v26 = v35;
  *a1 = v35;
  a1[1] = KeyPath;
  v28 = v32;
  v29 = v33;
  a1[2] = v27;
  a1[3] = v29;
  a1[4] = v20;
  a1[5] = v28;
  a1[6] = v21;
  a1[7] = v25;
  a1[8] = v24;
  v30 = v26;
  swift_retain(v26);
  swift_retain(KeyPath);
  swift_retain(v27);
  swift_retain(v29);
  swift_retain(v20);
  swift_release(v27);
  swift_release(KeyPath);
  swift_release(v30);
  swift_release(v20);
  return swift_release(v29);
}

uint64_t sub_D5D50(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v19 = static VerticalAlignment.center.getter(a2);
  sub_D5A6C(&v23);
  v4 = v23;
  v6 = v25;
  v5 = v26;
  v20 = v25;
  v21 = v23;
  v7 = v27;
  v8 = v28;
  v22 = v28;
  v9 = v30;
  v17 = v29;
  v18 = v24;
  v10 = v31;
  v11 = *(_QWORD *)(v2 + *(int *)(a1 + 20));
  KeyPath = swift_getKeyPath(&unk_25D258);
  v23 = v19;
  v24 = 0;
  LOBYTE(v25) = 1;
  v26 = v4;
  v27 = v18;
  v28 = v6;
  v13 = v5;
  v29 = v5;
  v30 = v7;
  v31 = v8;
  v32 = v17;
  v33 = v9;
  v34 = v10;
  v35 = KeyPath;
  v36 = v11;
  swift_retain(v11);
  v14 = sub_5C154(&qword_323568);
  v15 = sub_D7184();
  View.accessibilityHidden(_:)(1, v14, v15);
  swift_release(v11);
  swift_release(KeyPath);
  swift_release(v9);
  swift_release(v17);
  swift_release(v7);
  swift_release(v13);
  swift_release(v18);
  swift_release(v21);
  swift_release(v20);
  swift_release(v22);
  return swift_release(v10);
}

double sub_D5EA8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  double result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  v2 = type metadata accessor for ColorConstants(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_76AA0((uint64_t)v5);
  v7 = ColorConstants.booksTertiaryLabel.getter(v6);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(&v16, 0x4048000000000000, 0, 0x4010000000000000, 0, v9, v10);
  v11 = v16;
  v12 = v17;
  v13 = v18;
  v14 = v19;
  *(_QWORD *)a1 = v7;
  *(_WORD *)(a1 + 8) = 256;
  *(_QWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = v14;
  result = *(double *)&v20;
  *(_OWORD *)(a1 + 48) = v20;
  return result;
}

double sub_D5F90@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];
  char v22;

  v10 = type metadata accessor for RoundedRectangle(0);
  v11 = __chkstk_darwin(v10);
  v13 = (double *)((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (char *)v13 + *(int *)(v14 + 20);
  v16 = enum case for RoundedCornerStyle.continuous(_:);
  v17 = type metadata accessor for RoundedCornerStyle(0, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  *v13 = a4;
  v13[1] = a5;
  RoundedRectangle.path(in:)(v21, a2, a3, a4, a5);
  sub_6685C((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  result = *(double *)v21;
  v19 = v21[1];
  *(_OWORD *)a1 = v21[0];
  *(_OWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_D6090@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for ShapeRole.separator(_:);
  v3 = type metadata accessor for ShapeRole(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_D60D8()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_D60F0(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_D614C;
}

void sub_D614C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_D617C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D746C();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_D61CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D746C();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_D621C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D746C();
  return Shape.body.getter(a1, v2);
}

unint64_t sub_D6258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3233B8;
  if (!qword_3233B8)
  {
    v1 = sub_667D0(&qword_323388);
    sub_D643C(&qword_3233C0, &qword_3233A0, (void (*)(void))sub_D62F4);
    sub_D72E4(&qword_3233F0, &qword_323370, (void (*)(void))sub_D6404);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3233B8);
  }
  return result;
}

uint64_t sub_D62F4()
{
  return sub_D643C(&qword_3233C8, &qword_323398, (void (*)(void))sub_D6310);
}

unint64_t sub_D6310()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3233D0;
  if (!qword_3233D0)
  {
    v1 = sub_667D0(&qword_323390);
    sub_D6374();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_3233D0);
  }
  return result;
}

unint64_t sub_D6374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3233D8;
  if (!qword_3233D8)
  {
    v1 = sub_667D0(&qword_3233E0);
    sub_648E0(&qword_3233E8, type metadata accessor for AppleBooksReviewIcon, (uint64_t)&unk_25D328);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3233D8);
  }
  return result;
}

uint64_t type metadata accessor for AppleBooksReviewIcon(uint64_t a1)
{
  return sub_64960(a1, qword_323520, (uint64_t)&nominal type descriptor for AppleBooksReviewIcon);
}

uint64_t sub_D6404()
{
  return sub_D643C(&qword_3233F8, &qword_323368, (void (*)(void))sub_D6420);
}

uint64_t sub_D6420()
{
  return sub_D643C(&qword_323400, &qword_323360, (void (*)(void))sub_D64A8);
}

uint64_t sub_D643C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_667D0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_D64A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323408;
  if (!qword_323408)
  {
    v1 = sub_667D0(&qword_323358);
    sub_D652C();
    sub_67060(&qword_3205F8, &qword_3205E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323408);
  }
  return result;
}

unint64_t sub_D652C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323410;
  if (!qword_323410)
  {
    v1 = sub_667D0(&qword_323418);
    sub_7B9E4();
    sub_67060(&qword_31F7C0, &qword_31F7C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323410);
  }
  return result;
}

unint64_t sub_D65B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323420;
  if (!qword_323420)
  {
    v1 = sub_667D0(&qword_3233B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323420);
  }
  return result;
}

uint64_t *sub_D6630(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_D66F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for ColorConstants(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *sub_D675C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_D67F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v4 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *sub_D68AC(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorConstants(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_D6944(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, (uint64_t *)&unk_32A010);
    v4 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorConstants(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_D69F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D6A00);
}

uint64_t sub_D6A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_31F498);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_D6A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D6A4C);
}

uint64_t sub_D6A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_31F498);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_D6A90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_663E4(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t *sub_D6B08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for FontConstants(0, v8);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v15 = *(int *)(a3 + 20);
    v13 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = v13;
  }
  swift_retain(v13);
  return a1;
}

uint64_t sub_D6BE0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v4 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v6 = type metadata accessor for FontConstants(0, v5);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  else
  {
    swift_release(*a1);
  }
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
}

uint64_t *sub_D6C50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for FontConstants(0, v7);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = *(uint64_t *)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = v14;
  swift_retain(v14);
  return a1;
}

uint64_t *sub_D6D00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_320290);
    v6 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for FontConstants(0, v7);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v6;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v6;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v13 = *(int *)(a3 + 20);
  v14 = *(uint64_t *)((char *)a2 + v13);
  v15 = *(uint64_t *)((char *)a1 + v13);
  *(uint64_t *)((char *)a1 + v13) = v14;
  swift_retain(v14);
  swift_release(v15);
  return a1;
}

char *sub_D6DD4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;

  v6 = sub_5C154(&qword_320290);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for FontConstants(0, v7);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_D6E7C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_320290);
    v6 = sub_5C154(&qword_320290);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for FontConstants(0, v7);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(_QWORD *)&a1[v9];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  swift_release(v10);
  return a1;
}

uint64_t sub_D6F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D6F50);
}

uint64_t sub_D6F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5C154(&qword_320BC8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_D6FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D6FDC);
}

uint64_t sub_D6FDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5C154(&qword_320BC8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_D7058(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_663E4(319, &qword_320C38, (uint64_t (*)(uint64_t))&type metadata accessor for FontConstants);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

unint64_t sub_D70E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323558;
  if (!qword_323558)
  {
    v1 = sub_667D0(&qword_320470);
    sub_67060(&qword_323560, &qword_320468, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323558);
  }
  return result;
}

uint64_t sub_D7164(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B6D2C, 1);
}

uint64_t sub_D7174(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B6D04, 1);
}

unint64_t sub_D7184()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323570;
  if (!qword_323570)
  {
    v1 = sub_667D0(&qword_323568);
    sub_67060(&qword_323578, &qword_323580, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_67060(&qword_31F7C0, &qword_31F7C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323570);
  }
  return result;
}

ValueMetadata *type metadata accessor for RoundedDividerShape()
{
  return &type metadata for RoundedDividerShape;
}

unint64_t sub_D7234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323588;
  if (!qword_323588)
  {
    v1 = sub_667D0(&qword_323590);
    sub_67060(&qword_323598, &qword_3235A0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323588);
  }
  return result;
}

uint64_t sub_D72B8()
{
  return sub_D72E4(&qword_3235A8, &qword_3235B0, (void (*)(void))sub_D7184);
}

uint64_t sub_D72E4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_667D0(a2);
    a3();
    sub_648E0(&qword_31F710, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_D7368()
{
  return sub_67060(&qword_3235B8, &qword_3235C0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

unint64_t sub_D7398()
{
  unint64_t result;

  result = qword_3235C8;
  if (!qword_3235C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_3235C8);
  }
  return result;
}

unint64_t sub_D73E0()
{
  unint64_t result;

  result = qword_3235D0;
  if (!qword_3235D0)
  {
    result = swift_getWitnessTable(&unk_25D414, &type metadata for RoundedDividerShape);
    atomic_store(result, (unint64_t *)&qword_3235D0);
  }
  return result;
}

unint64_t sub_D7428()
{
  unint64_t result;

  result = qword_3235D8;
  if (!qword_3235D8)
  {
    result = swift_getWitnessTable(&unk_25D3C4, &type metadata for RoundedDividerShape);
    atomic_store(result, (unint64_t *)&qword_3235D8);
  }
  return result;
}

unint64_t sub_D746C()
{
  unint64_t result;

  result = qword_3235E0;
  if (!qword_3235E0)
  {
    result = swift_getWitnessTable(&unk_25D464, &type metadata for RoundedDividerShape);
    atomic_store(result, (unint64_t *)&qword_3235E0);
  }
  return result;
}

uint64_t AssetActionModifyRequest.storeID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyRequest_storeID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyRequest_storeID + 8));
  return v1;
}

uint64_t AssetActionModifyRequest.collectionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyRequest_collectionID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyRequest_collectionID + 8));
  return v1;
}

id AssetActionModifyRequest.tracker.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___BSUIAssetActionModifyRequest_tracker);
}

id AssetActionModifyRequest.__allocating_init(storeID:collectionID:tracker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_D77F0(a1, a2, a3, a4, a5, &OBJC_IVAR___BSUIAssetActionModifyRequest_storeID, &OBJC_IVAR___BSUIAssetActionModifyRequest_collectionID, &OBJC_IVAR___BSUIAssetActionModifyRequest_tracker);
}

id AssetActionModifyRequest.init(storeID:collectionID:tracker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_D78A8(a1, a2, a3, a4, a5, &OBJC_IVAR___BSUIAssetActionModifyRequest_storeID, &OBJC_IVAR___BSUIAssetActionModifyRequest_collectionID, &OBJC_IVAR___BSUIAssetActionModifyRequest_tracker);
}

void AssetActionModifyRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.AssetActionModifyRequest", 36, "init()", 6, 0);
  __break(1u);
}

uint64_t AssetActionModifyResponse.collectionTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyResponse_collectionTitle);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyResponse_collectionTitle + 8));
  return v1;
}

id sub_D7734(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  NSString v4;

  v3 = *(_QWORD *)(a1 + *a3 + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t AssetActionModifyResponse.assetID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyResponse_assetID);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyResponse_assetID + 8));
  return v1;
}

uint64_t AssetActionModifyResponse.assetContentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BSUIAssetActionModifyResponse_assetContentType);
}

id AssetActionModifyResponse.__allocating_init(collectionTitle:assetID:assetContentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_D77F0(a1, a2, a3, a4, a5, &OBJC_IVAR___BSUIAssetActionModifyResponse_collectionTitle, &OBJC_IVAR___BSUIAssetActionModifyResponse_assetID, &OBJC_IVAR___BSUIAssetActionModifyResponse_assetContentType);
}

id sub_D77F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  objc_class *v8;
  char *v17;
  char *v18;
  char *v19;
  objc_super v21;

  v17 = (char *)objc_allocWithZone(v8);
  v18 = &v17[*a6];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  v19 = &v17[*a7];
  *(_QWORD *)v19 = a3;
  *((_QWORD *)v19 + 1) = a4;
  *(_QWORD *)&v17[*a8] = a5;
  v21.receiver = v17;
  v21.super_class = v8;
  return objc_msgSendSuper2(&v21, "init");
}

id AssetActionModifyResponse.init(collectionTitle:assetID:assetContentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_D78A8(a1, a2, a3, a4, a5, &OBJC_IVAR___BSUIAssetActionModifyResponse_collectionTitle, &OBJC_IVAR___BSUIAssetActionModifyResponse_assetID, &OBJC_IVAR___BSUIAssetActionModifyResponse_assetContentType);
}

id sub_D78A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  char *v8;
  objc_class *ObjectType;
  char *v18;
  char *v19;
  objc_super v21;

  ObjectType = (objc_class *)swift_getObjectType(v8);
  v18 = &v8[*a6];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  v19 = &v8[*a7];
  *(_QWORD *)v19 = a3;
  *((_QWORD *)v19 + 1) = a4;
  *(_QWORD *)&v8[*a8] = a5;
  v21.receiver = v8;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "init");
}

void AssetActionModifyResponse.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.AssetActionModifyResponse", 37, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for AssetActionModifyRequest()
{
  return objc_opt_self(BSUIAssetActionModifyRequest);
}

uint64_t method lookup function for AssetActionModifyRequest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AssetActionModifyRequest);
}

uint64_t dispatch thunk of AssetActionModifyRequest.__allocating_init(storeID:collectionID:tracker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for AssetActionModifyResponse()
{
  return objc_opt_self(BSUIAssetActionModifyResponse);
}

uint64_t method lookup function for AssetActionModifyResponse(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AssetActionModifyResponse);
}

uint64_t NavigationProvider.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16, 0);
  return v1;
}

uint64_t NavigationProvider.init()()
{
  uint64_t v0;

  swift_unknownObjectWeakInit(v0 + 16, 0);
  return v0;
}

id sub_D7B40()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  _BYTE v5[24];

  swift_beginAccess(v0 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!Strong)
    return 0;
  v2 = Strong;
  v3 = objc_msgSend(Strong, "bc_isPresentedInCardViewController");

  return v3;
}

BOOL sub_D7BA8()
{
  uint64_t v0;
  void *Strong;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  v2 = objc_msgSend(Strong, "presentingViewController");

  if (v2)
  return v2 != 0;
}

id sub_D7C18()
{
  return sub_D7D8C((SEL *)&selRef_transitionCoordinator);
}

uint64_t sub_D7C24()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

void sub_D7C64(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v4, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);

}

void (*sub_D7CB0(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 16, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v1 + 16);
  return sub_D7D18;
}

void sub_D7D18(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[4] + 16, v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);

  }
  free(v3);
}

id sub_D7D80()
{
  return sub_D7D8C((SEL *)&selRef_navigationController);
}

id sub_D7D8C(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;
  id v5;
  _BYTE v7[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v7, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  v5 = objc_msgSend(Strong, *a1);

  return v5;
}

void sub_D7DF0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  void *Strong;
  id v7;
  _BYTE v8[24];

  v5 = v2 + 16;
  swift_beginAccess(v5, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  v7 = objc_msgSend(Strong, "navigationController");

  objc_msgSend(v7, "pushViewController:animated:", a1, a2 & 1);
}

void sub_D7E7C(char a1)
{
  sub_D7F2C(a1, (SEL *)&selRef_popViewControllerAnimated_);
}

void sub_D7E88(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  void *Strong;
  id v7;
  _BYTE v8[24];

  v5 = v2 + 16;
  swift_beginAccess(v5, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  v7 = objc_msgSend(Strong, "navigationController");

}

void sub_D7F20(char a1)
{
  sub_D7F2C(a1, (SEL *)&selRef_popToRootViewControllerAnimated_);
}

void sub_D7F2C(char a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *Strong;
  id v7;
  _BYTE v8[24];

  v5 = v2 + 16;
  swift_beginAccess(v5, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  v7 = objc_msgSend(Strong, "navigationController");

}

void sub_D7FBC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  void *Strong;
  void *v7;
  _BYTE v8[24];

  v5 = v2 + 16;
  swift_beginAccess(v5, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    objc_msgSend(Strong, "presentViewController:animated:completion:", a1, a2 & 1, 0);

  }
}

void sub_D8030(char a1)
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;
  void *v5;
  _BYTE v6[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", a1 & 1, 0);

  }
}

void sub_D8094(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  Class isa;
  Class v10;
  _BYTE v11[24];

  v6 = v3 + 16;
  swift_beginAccess(v6, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_5C154(&qword_31FC38);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v10 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "presentFeedsInCards:focusedIndex:animated:options:completion:", isa, a2, a3 & 1, v10, 0);

  }
}

void sub_D8170(char a1, uint64_t a2)
{
  id v4;

  v4 = (id)sub_D8318();
  objc_msgSend(v4, "popCardsAnimated:reason:", a1 & 1, a2);

}

void sub_D81C0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  id v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  _QWORD aBlock[6];
  _BYTE v15[24];

  v3 = v1 + 16;
  swift_beginAccess(v1 + 16, v15, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(Strong, "presentingViewController");

    if (v6)
    {
      v7 = objc_msgSend(v6, "presentedViewController");

      if (v7)
      {
        v8 = sub_D8404();
        v9 = (void *)UIViewController.firstVisibleChildViewController<A>(of:includePresented:)(v8, 1, v8);

        if (v9)
          goto LABEL_7;
      }
    }
  }
  v10 = swift_unknownObjectWeakLoadStrong(v3);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = sub_D8404();
    v9 = (void *)UIViewController.firstVisibleChildViewController<A>(of:includePresented:)(v12, 1, v12);

    if (v9)
    {
LABEL_7:
      aBlock[4] = SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_69F04;
      aBlock[3] = &unk_2EBE70;
      v13 = _Block_copy(aBlock);
      objc_msgSend(v9, "popAllCardsAnimated:completion:", a1 & 1, v13);
      _Block_release(v13);

    }
  }
}

uint64_t sub_D8318()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  _BYTE v12[24];

  v1 = v0 + 16;
  swift_beginAccess(v0 + 16, v12, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!Strong)
    goto LABEL_5;
  v3 = Strong;
  v4 = objc_msgSend(Strong, "presentingViewController");

  if (!v4
    || (v5 = objc_msgSend(v4, "presentedViewController"), v4, !v5)
    || (v6 = sub_D8404(),
        v7 = UIViewController.firstVisibleChildViewController<A>(of:includePresented:)(v6, 1, v6),
        v5,
        !v7))
  {
LABEL_5:
    v8 = swift_unknownObjectWeakLoadStrong(v1);
    if (v8)
    {
      v9 = (void *)v8;
      v10 = sub_D8404();
      v7 = UIViewController.firstVisibleChildViewController<A>(of:includePresented:)(v10, 1, v10);

    }
    else
    {
      return 0;
    }
  }
  return v7;
}

unint64_t sub_D8404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323668;
  if (!qword_323668)
  {
    v1 = objc_opt_self(BCCardStackViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_323668);
  }
  return result;
}

uint64_t sub_D8440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_D8450(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t NavigationProvider.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return v0;
}

uint64_t NavigationProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocClassInstance(v0, 24, 7);
}

id sub_D8498()
{
  _QWORD *v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  _BYTE v6[24];

  v1 = *v0 + 16;
  swift_beginAccess(v1, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong)
    return 0;
  v3 = Strong;
  v4 = objc_msgSend(Strong, "bc_isPresentedInCardViewController");

  return v4;
}

BOOL sub_D8504()
{
  _QWORD *v0;
  uint64_t v1;
  void *Strong;
  id v3;
  _BYTE v5[24];

  v1 = *v0 + 16;
  swift_beginAccess(v1, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  v3 = objc_msgSend(Strong, "presentingViewController");

  if (v3)
  return v3 != 0;
}

id sub_D8578()
{
  _QWORD *v0;
  uint64_t v1;
  void *Strong;
  id v3;
  _BYTE v5[24];

  v1 = *v0 + 16;
  swift_beginAccess(v1, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  v3 = objc_msgSend(Strong, "transitionCoordinator");

  return v3;
}

uint64_t sub_D85E0()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0 + 16;
  swift_beginAccess(v1, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

void sub_D8624(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *Strong;
  id v7;
  _BYTE v8[24];

  v5 = *v2 + 16;
  swift_beginAccess(v5, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  v7 = objc_msgSend(Strong, "navigationController");

  objc_msgSend(v7, "pushViewController:animated:", a1, a2 & 1);
}

void sub_D86B4(char a1, uint64_t a2, uint64_t a3)
{
  sub_D8768(a1, a2, a3, (SEL *)&selRef_popViewControllerAnimated_);
}

void sub_D86C0(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *Strong;
  id v7;
  _BYTE v8[24];

  v5 = *v2 + 16;
  swift_beginAccess(v5, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  v7 = objc_msgSend(Strong, "navigationController");

}

void sub_D875C(char a1, uint64_t a2, uint64_t a3)
{
  sub_D8768(a1, a2, a3, (SEL *)&selRef_popToRootViewControllerAnimated_);
}

void sub_D8768(char a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  _QWORD *v4;
  uint64_t v7;
  void *Strong;
  id v9;
  _BYTE v10[24];

  v7 = *v4 + 16;
  swift_beginAccess(v7, v10, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v7);
  v9 = objc_msgSend(Strong, "navigationController");

}

void sub_D87FC(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *Strong;
  void *v7;
  _BYTE v8[24];

  v5 = *v2 + 16;
  swift_beginAccess(v5, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    objc_msgSend(Strong, "presentViewController:animated:completion:", a1, a2 & 1, 0);

  }
}

void sub_D8874(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *Strong;
  void *v5;
  _BYTE v6[24];

  v3 = *v1 + 16;
  swift_beginAccess(v3, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", a1 & 1, 0);

  }
}

void sub_D88DC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  Class isa;
  Class v10;
  _BYTE v11[24];

  v6 = *v3 + 16;
  swift_beginAccess(v6, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_5C154(&qword_31FC38);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v10 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "presentFeedsInCards:focusedIndex:animated:options:completion:", isa, a2, a3 & 1, v10, 0);

  }
}

void sub_D89BC(char a1, uint64_t a2)
{
  id v4;

  v4 = (id)sub_D8318();
  objc_msgSend(v4, "popCardsAnimated:reason:", a1 & 1, a2);

}

void sub_D8A10(char a1)
{
  sub_D81C0(a1);
}

uint64_t sub_D8A30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_D8A7C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2 + 16;
  swift_beginAccess(v3, v5, 1, 0);
  return swift_unknownObjectWeakAssign(v3, v2);
}

uint64_t dispatch thunk of NavigationProviding.pushViewController(_:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of NavigationProviding.popViewController(animated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of NavigationProviding.popToViewController(_:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of NavigationProviding.popToRootViewController(animated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of NavigationProviding.present(_:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of NavigationProviding.dismiss(animated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of NavigationProviding.presentFeedsInCards(cardSetData:focusedIndex:animated:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

uint64_t dispatch thunk of NavigationProviding.dismissCardSet(animated:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of NavigationProviding.dismissCardStack(animated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t type metadata accessor for NavigationProvider()
{
  return objc_opt_self(_TtC11BookStoreUI18NavigationProvider);
}

uint64_t method lookup function for NavigationProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for NavigationProvider);
}

uint64_t dispatch thunk of PageLifecycleHandler.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of NavigationProvider.isInCard.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of NavigationProvider.isInModal.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NavigationProvider.transitionCoordinator.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PaginationController.needsToLoadNextPage.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NavigationProvider.navigationController.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NavigationProvider.pushViewController(_:animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NavigationProvider.popViewController(animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NavigationProvider.popToViewController(_:animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NavigationProvider.popToRootViewController(animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NavigationProvider.present(_:animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NavigationProvider.dismiss(animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NavigationProvider.presentFeedsInCards(cardSetData:focusedIndex:animated:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NavigationProvider.dismissCardSet(animated:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NavigationProvider.dismissCardStack(animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t View.appAnalyticsTracker(with:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  return View.modifier<A>(_:)(v6, a4, &type metadata for AppAnalyticsTrackerViewModifier, a5);
}

uint64_t sub_D8C24(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for AppAnalyticsTrackerViewModifier);
  sub_94EB4();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

uint64_t destroy for AppAnalyticsTrackerViewModifier(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *_s11BookStoreUI31AppAnalyticsTrackerViewModifierVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for AppAnalyticsTrackerViewModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for AppAnalyticsTrackerViewModifier(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for AppAnalyticsTrackerViewModifier()
{
  return &type metadata for AppAnalyticsTrackerViewModifier;
}

uint64_t sub_D8D98(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B6F80, 1);
}

void sub_D8DA8()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  id v3;

  v3 = sub_D8E18(*v0, v0[1]);
  v1 = sub_5C154(&qword_323798);
  v2 = sub_D9068();
  View.tracker(_:)(v3, v1, v2);

}

id sub_D8E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v21 = a2;
  v22 = type metadata accessor for HostProxy.Event(0);
  __chkstk_darwin(v22);
  v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for LinkData(0);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_322410);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v21 - v12);
  v14 = type metadata accessor for BATracker(0);
  BaseObjectGraph.inject<A>(_:)(&v24, v14, v14);
  v15 = v24;
  v16 = (void *)BATracker.chain(with:)(a1, v21);
  BaseObjectGraph.inject<A>(_:)(v13, v8, v8);
  sub_6C1C4((uint64_t)v13, (uint64_t)v10);
  LinkData.init(actionOrigin:)((uint64_t)v10, (uint64_t)v7);
  sub_D90B4(&qword_3237A8, (uint64_t)&protocol conformance descriptor for LinkData);
  sub_D90B4(&qword_3237B0, (uint64_t)&protocol conformance descriptor for LinkData);
  BATracker.push<A>(data:traits:file:line:)(v7, 0, 0xD000000000000082);
  v17 = type metadata accessor for HostProxy(0);
  BaseObjectGraph.inject<A>(_:)(&v24, v17, v17);
  v18 = v24;
  *v4 = v16;
  swift_storeEnumTagMultiPayload(v4, v22, 2);
  v19 = v16;
  PassthroughSubject.send(_:)(v4);

  sub_6C188((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  sub_B5AE4((uint64_t)v13);
  swift_release(v18);
  return v19;
}

unint64_t sub_D9068()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3237A0;
  if (!qword_3237A0)
  {
    v1 = sub_667D0(&qword_323798);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_3237A0);
  }
  return result;
}

uint64_t sub_D90B4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LinkData(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_D90F4()
{
  _QWORD v1[2];

  v1[0] = sub_667D0(&qword_323798);
  v1[1] = sub_D9068();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.tracker(_:)>>, 1);
}

uint64_t sub_D9140@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, _QWORD *a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t inited;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  int *v115;
  _QWORD *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  int *v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  __n128 v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  char v160;
  uint64_t *v161;
  uint64_t v162;
  int *v163;
  char *v164;
  _QWORD *v165;
  int *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  void (*v216)(uint64_t, char *, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __n128 v237;
  void (*v238)(uint64_t, uint64_t);
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t AssociatedTypeWitness;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  void (*v256)(char *, uint64_t);
  unint64_t v257;
  unsigned int (*v258)(char *, uint64_t, uint64_t);
  uint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  char *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  _QWORD *v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  char *v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  unsigned __int8 *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void (*v316)(uint64_t, uint64_t);
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  uint64_t AssociatedConformanceWitness;
  uint64_t v321;
  __int128 v322;
  void (*v323)(_QWORD, _QWORD, _QWORD);
  void *v324;
  unsigned __int8 *v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD v329[3];
  char *v330;
  uint64_t v331;
  unsigned __int8 v332;
  char v333;
  unsigned __int8 v334;
  unsigned __int8 v335;

  v316 = a2;
  v310 = (uint64_t *)a7;
  v280 = a4;
  v281 = a5;
  v317 = a3;
  v265 = a9;
  v14 = sub_5C154(&qword_3239B0);
  v263 = *(_QWORD *)(v14 - 8);
  v264 = v14;
  __chkstk_darwin(v14);
  v262 = (char *)&v255 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_322F98);
  __chkstk_darwin(v16);
  v289 = (uint64_t)&v255 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PageMetrics(0);
  v292 = *(_QWORD *)(v18 - 8);
  v293 = v18;
  __chkstk_darwin(v18);
  v301 = (uint64_t)&v255 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PageData(0);
  v290 = *(_QWORD *)(v20 - 8);
  v291 = v20;
  __chkstk_darwin(v20);
  v300 = (uint64_t)&v255 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v22);
  v295 = (uint64_t)&v255 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v296 = (uint64_t)&v255 - v25;
  __chkstk_darwin(v26);
  v299 = (uint64_t)&v255 - v27;
  v288 = type metadata accessor for LocalizerRequest(0);
  v298 = *(_QWORD *)(v288 - 8);
  __chkstk_darwin(v288);
  v297 = (char *)&v255 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287 = sub_5C154(&qword_3239B8);
  v284 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287);
  v304 = (char *)&v255 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v307 = type metadata accessor for SeriesRoomPageIntent(0);
  v309 = *(unsigned __int8 **)(v307 - 8);
  __chkstk_darwin(v307);
  v276 = v30;
  v277 = (uint64_t)&v255 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = sub_5C154(&qword_3239C0);
  v283 = *(_QWORD *)(v286 - 8);
  v31 = __chkstk_darwin(v286);
  v303 = (char *)&v255 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v302 = type metadata accessor for AppAnalyticsAction.Type(0, v31);
  v275 = *(_QWORD *)(v302 - 8);
  __chkstk_darwin(v302);
  v261 = (uint64_t *)((char *)&v255 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v34);
  v285 = (uint64_t *)((char *)&v255 - v35);
  v312 = type metadata accessor for SeriesData(0);
  v294 = *(_QWORD *)(v312 - 8);
  __chkstk_darwin(v312);
  v282 = (uint64_t)&v255 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v311 = (uint64_t)&v255 - v38;
  v274 = (int *)type metadata accessor for JSAction(0);
  __chkstk_darwin(v274);
  v273 = (uint64_t *)((char *)&v255 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v40);
  v272 = (char *)&v255 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for ActionMetrics(0);
  v270 = *(_QWORD *)(v42 - 8);
  v271 = v42;
  __chkstk_darwin(v42);
  v266 = (char *)&v255 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v44);
  v308 = (char *)&v255 - v46;
  v47 = type metadata accessor for MResourceType(0, v45);
  v268 = *(_QWORD *)(v47 - 8);
  v269 = v47;
  __chkstk_darwin(v47);
  v267 = (uint64_t *)((char *)&v255 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_5C154(&qword_3239C8);
  __chkstk_darwin(v49);
  v51 = (void (*)(char *, char *, uint64_t))((char *)&v255 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_5C154(&qword_3239D0);
  __chkstk_darwin(v52);
  v306 = (uint64_t)&v255 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5C154(&qword_320A40);
  __chkstk_darwin(v54);
  v278 = (uint64_t)&v255 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v58 = (char *)&v255 - v57;
  v59 = type metadata accessor for SeriesListSortOrder(0);
  v313 = *(_QWORD *)(v59 - 8);
  v314 = v59;
  __chkstk_darwin(v59);
  v279 = (char *)&v255 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61);
  v63 = (char *)&v255 - v62;
  v64 = type metadata accessor for Shelf(0);
  v65 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  *(_QWORD *)&v305 = (char *)&v255 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v67);
  v69 = (char *)&v255 - v68;
  v70 = *a6;
  static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:additionalStoreAssetsForEnrichment:)(a1, v316, v317);
  if (!v327)
  {
    sub_5E09C((uint64_t)&v326, &qword_320918);
    v75 = sub_E2804();
    v76 = swift_allocError(&type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPageIntentImplementationError, v75, 0, 0);
    return swift_willThrow(v76);
  }
  v317 = a8;
  sub_5DC98(&v326, (uint64_t)v329);
  if (v70 == 3)
    v71 = 0;
  else
    v71 = v70;
  v72 = v330;
  v73 = v331;
  sub_66898(v329, (uint64_t)v330);
  v74 = v315;
  SeriesInfo.getPromotionState()(v72, v73, (uint64_t)&v326);
  if (v74)
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v329);
  LODWORD(v316) = v71;
  static Shelf.seriesHeader(from:seriesPromotionState:with:)(v329, (uint64_t)&v326, v317, (uint64_t)v69);
  v315 = 0;
  v259 = a11;
  sub_8307C(&v326);
  v78 = sub_572A8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v79 = v78;
  v81 = *(_QWORD *)(v78 + 16);
  v80 = *(_QWORD *)(v78 + 24);
  if (v81 >= v80 >> 1)
    v79 = sub_572A8(v80 > 1, v81 + 1, 1, v78);
  v82 = (uint64_t)v309;
  *(_QWORD *)(v79 + 16) = v81 + 1;
  v83 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v260 = v79;
  v257 = v83;
  v84 = *(_QWORD *)(v65 + 72);
  sub_5E160((uint64_t)v69, v79 + v83 + v84 * v81, type metadata accessor for Shelf);
  v335 = v316;
  sub_5E1A4((uint64_t)v310, (uint64_t)v58, &qword_320A40);
  sub_5E0D8((uint64_t)v329, (uint64_t)&v326);
  v85 = v313;
  v86 = v314;
  v258 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v313 + 48);
  if (v258(v58, 1, v314) == 1)
  {
    v87 = v327;
    v88 = v328;
    sub_66898(&v326, v327);
    v89 = v88;
    v86 = v314;
    SeriesInfo.currentSortOrder.getter(v87, v89);
    sub_5E09C((uint64_t)v58, &qword_320A40);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v63, v58, v86);
  }
  v90 = v315;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v326);
  LOBYTE(v322) = 0;
  sub_5E11C(v259, (uint64_t)v51, type metadata accessor for SeriesRoomPageIntent);
  (*(void (**)(void (*)(char *, char *, uint64_t), _QWORD, uint64_t, uint64_t))(v82 + 56))(v51, 0, 1, v307);
  v91 = v306;
  sub_DAAD0(v329, v51, v306);
  sub_5E09C((uint64_t)v51, &qword_3239C8);
  v92 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v91, 0, 1, v92);
  v93 = v305;
  sub_11C0A4(v329, &v335, (uint64_t)v63, (unsigned __int8 *)&v322, v91, 0, v305);
  if (v90)
  {
    sub_5E09C(v91, &qword_3239D0);
    (*(void (**)(char *, uint64_t))(v313 + 8))(v63, v86);
    swift_bridgeObjectRelease(v260);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v329);
  }
  sub_5E09C(v91, &qword_3239D0);
  v256 = *(void (**)(char *, uint64_t))(v313 + 8);
  v256(v63, v86);
  v94 = v260;
  v96 = *(_QWORD *)(v260 + 16);
  v95 = *(_QWORD *)(v260 + 24);
  if (v96 >= v95 >> 1)
    v94 = sub_572A8(v95 > 1, v96 + 1, 1, v260);
  v97 = v267;
  v267 = a10;
  *(_QWORD *)(v94 + 16) = v96 + 1;
  v260 = v94;
  sub_5E160(v93, v94 + v257 + v96 * v84, type metadata accessor for Shelf);
  v325 = (unsigned __int8 *)&_swiftEmptyDictionarySingleton;
  v98 = (uint64_t)v330;
  v99 = v331;
  sub_66898(v329, (uint64_t)v330);
  v100 = sub_234A28(v98, v99);
  v315 = 0;
  if ((v100 & 1) != 0)
  {
    type metadata accessor for MAudiobookSeries(0);
    v101 = static MAudiobookSeries.type.getter();
  }
  else
  {
    type metadata accessor for MBookSeries(0);
    v101 = static MBookSeries.type.getter();
  }
  v102 = MResourceType.name.getter(v101);
  v104 = v103;
  v105.n128_f64[0] = (*(double (**)(_QWORD *, uint64_t))(v268 + 8))(v97, v269);
  static ActionMetrics.notInstrumented.getter(v105);
  v106 = sub_5C154(&qword_31F598);
  inited = swift_initStackObject(v106, &v321);
  v305 = xmmword_255F00;
  *(_OWORD *)(inited + 16) = xmmword_255F00;
  *(_QWORD *)(inited + 32) = 25705;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  v108 = (uint64_t)v330;
  v109 = v331;
  sub_66898(v329, (uint64_t)v330);
  *(_QWORD *)(inited + 48) = ContentInfo.id.getter(v108, *(_QWORD *)(v109 + 8));
  *(_QWORD *)(inited + 56) = v110;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 1701869940;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  *(_QWORD *)(inited + 96) = v102;
  *(_QWORD *)(inited + 104) = v104;
  v111 = sub_52A54(inited);
  v112 = type metadata accessor for ClickData(0);
  v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56);
  v114 = (uint64_t)v272;
  v113(v272, 1, 1, v112);
  v115 = v274;
  v323 = (void (*)(_QWORD, _QWORD, _QWORD))v274;
  v324 = (void *)sub_648E0(&qword_3200B0, type metadata accessor for JSAction, (uint64_t)&protocol conformance descriptor for JSAction);
  v116 = sub_668BC(&v322);
  v117 = v273;
  v118 = (char *)v273 + v115[7];
  v113(v118, 1, 1, v112);
  (*(void (**)(_QWORD *, char *, uint64_t))(v270 + 32))(v117, v308, v271);
  v119 = (char *)v117 + v115[5];
  strcpy(v119, "RecentlyViewed");
  v119[15] = -18;
  *(_QWORD *)((char *)v117 + v115[6]) = v111;
  sub_66814(v114, (uint64_t)v118);
  sub_5E160((uint64_t)v117, (uint64_t)v116, type metadata accessor for JSAction);
  sub_12A778((uint64_t)&v322, 0);
  v120 = v330;
  v121 = v331;
  sub_66898(v329, (uint64_t)v330);
  sub_2344B0(v120, v121, v311);
  static ActionMetrics.notInstrumented.getter(v122);
  v272 = (char *)sub_5C154(&qword_31EF10);
  v123 = swift_allocObject(v272, 112, 7);
  *(_OWORD *)(v123 + 16) = v305;
  v124 = v330;
  v125 = v331;
  sub_66898(v329, (uint64_t)v330);
  v126 = v285;
  sub_2344B0(v124, v125, (uint64_t)v285);
  v127 = *(int **)(v275 + 104);
  v128.n128_f64[0] = ((double (*)(_QWORD *, _QWORD, uint64_t))v127)(v126, enum case for AppAnalyticsAction.Type.reportSeriesDetailsView(_:), v302);
  v129 = type metadata accessor for AppAnalyticsAction(0, v128);
  *(_QWORD *)(v123 + 56) = v129;
  v130 = sub_648E0(&qword_31F5A0, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
  *(_QWORD *)(v123 + 64) = v130;
  sub_668BC((_QWORD *)(v123 + 32));
  AppAnalyticsAction.init(type:)(v126);
  v273 = (_QWORD *)(v123 + 72);
  v131 = (char *)v126 + *(int *)(sub_5C154(&qword_3239E0) + 48);
  v132 = v312;
  v126[3] = v312;
  v307 = sub_648E0(&qword_3239E8, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
  v126[4] = v307;
  v306 = sub_648E0(&qword_3239F0, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
  v126[5] = v306;
  v133 = sub_668BC(v126);
  v134 = v132;
  v135 = v129;
  v275 = *(_QWORD *)(v294 + 16);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v275)(v133, v311, v134);
  v136 = enum case for ScenePhase.active(_:);
  v137 = type metadata accessor for ScenePhase(0);
  v138 = v131;
  v139 = (_QWORD *)v130;
  v140 = v302;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 104))(v138, v136, v137);
  v274 = v127;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v127)(v126, enum case for AppAnalyticsAction.Type.popData(_:), v140);
  *(_QWORD *)(v123 + 96) = v129;
  *(_QWORD *)(v123 + 104) = v139;
  sub_668BC(v273);
  AppAnalyticsAction.init(type:)(v126);
  v141 = type metadata accessor for CompoundAction(0);
  v323 = (void (*)(_QWORD, _QWORD, _QWORD))v141;
  v324 = &protocol witness table for CompoundAction;
  sub_668BC(&v322);
  CompoundAction.init(actionMetrics:subactions:)(v308, v123);
  sub_12A778((uint64_t)&v322, 3);
  if ((_DWORD)v316)
  {
    v143 = v312;
    v144 = v307;
    v126[3] = v312;
    v126[4] = v144;
    v126[5] = v306;
    v145 = sub_668BC(v126);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v275)(v145, v311, v143);
    ((void (*)(_QWORD *, _QWORD, uint64_t))v274)(v126, enum case for AppAnalyticsAction.Type.pushData(_:), v140);
    v323 = (void (*)(_QWORD, _QWORD, _QWORD))v135;
    v324 = v139;
    sub_668BC(&v322);
    AppAnalyticsAction.init(type:)(v126);
  }
  else
  {
    v271 = v141;
    v273 = v139;
    v308 = (char *)v129;
    static ActionMetrics.notInstrumented.getter(v142);
    v146 = swift_allocObject(v272, 112, 7);
    *(_OWORD *)(v146 + 16) = v305;
    v147 = (uint64_t)v330;
    v148 = v331;
    sub_66898(v329, (uint64_t)v330);
    v149 = ContentInfo.id.getter(v147, *(_QWORD *)(v148 + 8));
    v151 = v150;
    v152 = (uint64_t)v330;
    v153 = v331;
    sub_66898(v329, (uint64_t)v330);
    SeriesInfo.assetCount.getter(v152, v153);
    v155 = v154;
    v156 = (uint64_t)v330;
    v157 = v331;
    sub_66898(v329, (uint64_t)v330);
    if ((v155 & 1) != 0)
    {
      v158 = (_QWORD *)(v146 + 32);
      v159 = SeriesInfo.assetMinimumCount.getter(v156, v157);
    }
    else
    {
      v158 = (_QWORD *)(v146 + 32);
      v159 = SeriesInfo.assetCount.getter(v156, v157);
    }
    v161 = v261;
    *v261 = v149;
    v161[1] = v151;
    v161[2] = v159;
    *((_BYTE *)v161 + 24) = v160 & 1;
    v162 = v302;
    v163 = v274;
    ((void (*)(uint64_t *, _QWORD, uint64_t))v274)(v161, enum case for AppAnalyticsAction.Type.reportAllInSeriesView(_:), v302);
    v164 = v308;
    v165 = v273;
    *(_QWORD *)(v146 + 56) = v308;
    *(_QWORD *)(v146 + 64) = v165;
    sub_668BC(v158);
    AppAnalyticsAction.init(type:)(v161);
    v166 = v163;
    v167 = v312;
    v168 = v285;
    v169 = v307;
    v285[3] = v312;
    v168[4] = v169;
    v168[5] = v306;
    v170 = sub_668BC(v168);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v275)(v170, v311, v167);
    ((void (*)(_QWORD *, _QWORD, uint64_t))v166)(v168, enum case for AppAnalyticsAction.Type.pushData(_:), v162);
    *(_QWORD *)(v146 + 96) = v164;
    *(_QWORD *)(v146 + 104) = v165;
    sub_668BC((_QWORD *)(v146 + 72));
    AppAnalyticsAction.init(type:)(v168);
    v323 = (void (*)(_QWORD, _QWORD, _QWORD))v271;
    v324 = &protocol witness table for CompoundAction;
    sub_668BC(&v322);
    CompoundAction.init(actionMetrics:subactions:)(v266, v146);
  }
  sub_12A778((uint64_t)&v322, 2);
  v171 = type metadata accessor for HostProxy(0);
  BaseObjectGraph.inject<A>(_:)(&v322, v171, v171);
  v172 = v322;
  v173 = v267;
  v174 = v267[3];
  v175 = v267[4];
  sub_66898(v267, v174);
  v176 = (uint64_t)v330;
  v177 = v331;
  sub_66898(v329, (uint64_t)v330);
  v178 = ContentInfo.id.getter(v176, *(_QWORD *)(v177 + 8));
  v180 = v179;
  v181 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v175 + 40);
  swift_retain(v172);
  v182 = v181(v178, v180, v172, v174, v175);
  swift_bridgeObjectRelease(v180);
  swift_release(v172);
  *(_QWORD *)&v318 = v182;
  sub_5E0D8((uint64_t)v329, (uint64_t)&v322);
  v183 = v277;
  sub_5E11C(v259, v277, type metadata accessor for SeriesRoomPageIntent);
  v184 = v309[80];
  v308 = (char *)(((v184 + 56) & ~v184) + v276);
  v309 = (unsigned __int8 *)((v184 + 56) & ~v184);
  v185 = (uint64_t)v309;
  *(_QWORD *)&v305 = v184 | 7;
  v186 = swift_allocObject(&unk_2EC098, v308, v184 | 7);
  sub_5DC98(&v322, v186 + 16);
  sub_5E160(v183, v186 + v185, type metadata accessor for SeriesRoomPageIntent);
  v187 = sub_5C154(&qword_3239F8);
  v188 = sub_5C154(&qword_3200B8);
  v302 = v188;
  v189 = sub_67060(&qword_323A00, &qword_3239F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_E284C, v186, v187, v188, v189);
  swift_release(v186);
  swift_release(v318);
  v190 = v173[3];
  v191 = v173[4];
  sub_66898(v173, v190);
  v192 = (uint64_t)v330;
  v193 = v331;
  sub_66898(v329, (uint64_t)v330);
  v194 = ContentInfo.id.getter(v192, *(_QWORD *)(v193 + 8));
  v196 = v195;
  v197 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 48);
  swift_retain(v172);
  v198 = v197(v194, v196, v172, v190, v191);
  swift_bridgeObjectRelease(v196);
  v317 = v172;
  swift_release(v172);
  *(_QWORD *)&v318 = v198;
  sub_5E0D8((uint64_t)v329, (uint64_t)&v322);
  sub_5E11C(v259, v183, type metadata accessor for SeriesRoomPageIntent);
  v199 = swift_allocObject(&unk_2EC0C0, v308, v305);
  sub_5DC98(&v322, v199 + 16);
  sub_5E160(v183, (uint64_t)&v309[v199], type metadata accessor for SeriesRoomPageIntent);
  v200 = sub_5C154(&qword_323A08);
  v201 = sub_67060(&qword_323A10, &qword_323A08, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_E284C, v199, v200, v302, v201);
  swift_release(v199);
  swift_release(v318);
  v202 = (uint64_t)v330;
  v203 = v331;
  sub_66898(v329, (uint64_t)v330);
  v204 = ContentInfo.title.getter(v202, *(_QWORD *)(v203 + 8));
  v206 = v205;
  v207 = v297;
  static LocalizerRequest.verbatim(_:)(v204);
  swift_bridgeObjectRelease(v206);
  v208 = v299;
  sub_14FAF4(v329, v299);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v290 + 16))(v300, v280, v291);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v292 + 16))(v301, v281, v293);
  v209 = sub_5C154(&qword_31EEA8);
  v210 = swift_allocObject(v209, 80, 7);
  *(_OWORD *)(v210 + 16) = xmmword_258070;
  v211 = v330;
  v212 = v331;
  sub_66898(v329, (uint64_t)v330);
  v213 = v307;
  *(_QWORD *)(v210 + 56) = v312;
  *(_QWORD *)(v210 + 64) = v213;
  *(_QWORD *)(v210 + 72) = v306;
  v214 = sub_668BC((_QWORD *)(v210 + 32));
  sub_2344B0(v211, v212, (uint64_t)v214);
  v334 = 0;
  v215 = v298;
  v216 = *(void (**)(uint64_t, char *, uint64_t))(v298 + 16);
  v217 = v296;
  v218 = v288;
  v216(v296, v207, v288);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v215 + 56))(v217, 0, 1, v218);
  sub_5E1A4(v208, v295, &qword_3217B8);
  v309 = v325;
  v219 = sub_5C154(&qword_323A18);
  v220 = v289;
  v221 = v289 + *(int *)(v219 + 48);
  v216(v289, v207, v218);
  sub_5E1A4(v208, v221, &qword_3217B8);
  v222 = enum case for ToolbarPrincipalType.series(_:);
  v223 = type metadata accessor for ToolbarPrincipalType(0);
  v224 = *(_QWORD *)(v223 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v224 + 104))(v220, v222, v223);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v224 + 56))(v220, 0, 1, v223);
  v333 = 0;
  v225 = v330;
  v226 = v331;
  sub_66898(v329, (uint64_t)v330);
  v227 = v282;
  sub_2344B0(v225, v226, v282);
  v332 = v316;
  v228 = v278;
  sub_5E1A4((uint64_t)v310, v278, &qword_320A40);
  sub_5E0D8((uint64_t)v329, (uint64_t)&v322);
  v229 = v314;
  if (v258((char *)v228, 1, v314) == 1)
  {
    v230 = (uint64_t)v323;
    v231 = v324;
    sub_66898(&v322, (uint64_t)v323);
    v232 = (unint64_t)v279;
    SeriesInfo.currentSortOrder.getter(v230, v231);
    sub_5E09C(v228, &qword_320A40);
  }
  else
  {
    v232 = (unint64_t)v279;
    (*(void (**)(char *, uint64_t, uint64_t))(v313 + 32))(v279, v228, v229);
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v322);
  v233 = v315;
  v234 = sub_1A738C(v329, (void (*)(char *))&v333, v227, &v332, v232);
  v236 = v311;
  v235 = v312;
  v315 = v233;
  if (!v233)
  {
    v313 = v234;
    v256((char *)v232, v314);
    v316 = *(void (**)(uint64_t, uint64_t))(v294 + 8);
    v316(v227, v235);
    v239 = sub_67060(&qword_323A20, &qword_3239C0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v240 = sub_67060(&qword_323A28, &qword_3239B8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v241 = v262;
    Publisher.merge<A>(with:)(v304, v286, v287, v239, v240);
    v242 = sub_67060(&qword_323A30, &qword_3239B0, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
    v243 = v264;
    v314 = Publisher.eraseToAnyPublisher()(v264, v242);
    (*(void (**)(char *, uint64_t))(v263 + 8))(v241, v243);
    v245 = (uint64_t)v330;
    v244 = (char *)v331;
    sub_66898(v329, (uint64_t)v330);
    v308 = v244;
    v246 = *((_QWORD *)v244 + 1);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v246);
    v248 = type metadata accessor for Optional(0, AssociatedTypeWitness);
    v310 = &v255;
    v249 = *(_QWORD *)(v248 - 8);
    __chkstk_darwin(v248);
    v251 = (char *)&v255 - v250;
    ContentInfo.libraryData.getter(v245, v246);
    v252 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v253 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v252 + 48))(v251, 1, AssociatedTypeWitness);
    if (v253 == 1)
    {
      (*(void (**)(char *, uint64_t))(v249 + 8))(v251, v248);
      AssociatedConformanceWitness = 0;
      v318 = 0u;
      v319 = 0u;
    }
    else
    {
      *((_QWORD *)&v319 + 1) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v308, v245, AssociatedTypeWitness, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
      v254 = sub_668BC(&v318);
      (*(void (**)(_QWORD *, char *, uint64_t))(v252 + 32))(v254, v251, AssociatedTypeWitness);
    }
    sub_5E09C((uint64_t)&v318, &qword_320910);
    swift_beginAccess(&byte_3207D8, &v322, 0, 0);
    LOBYTE(v318) = byte_3207D8;
    sub_134734(v300, v301, v210, &v334, v260, 0, 0, v296, v265, v295, (unsigned __int8 *)&v318, 1u, (uint64_t)v309, v289, (uint64_t)_swiftEmptyArrayStorage, v313, v314, v253 != 1);
    swift_release(v317);
    sub_5E09C(v299, &qword_3217B8);
    (*(void (**)(char *, uint64_t))(v298 + 8))(v297, v288);
    (*(void (**)(char *, uint64_t))(v284 + 8))(v304, v287);
    (*(void (**)(char *, uint64_t))(v283 + 8))(v303, v286);
    v316(v311, v312);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v329);
  }
  swift_release(v317);
  swift_bridgeObjectRelease(v210);
  swift_bridgeObjectRelease(v260);
  v237 = swift_bridgeObjectRelease(v309);
  ((void (*)(unint64_t, uint64_t, __n128))v256)(v232, v314, v237);
  v238 = *(void (**)(uint64_t, uint64_t))(v294 + 8);
  v238(v227, v235);
  sub_5E09C(v220, &qword_322F98);
  sub_5E09C(v295, &qword_3217B8);
  sub_5E09C(v296, &qword_3217B8);
  (*(void (**)(uint64_t, uint64_t))(v292 + 8))(v301, v293);
  (*(void (**)(uint64_t, uint64_t))(v290 + 8))(v300, v291);
  sub_5E09C(v299, &qword_3217B8);
  (*(void (**)(char *, uint64_t))(v298 + 8))(v297, v218);
  (*(void (**)(char *, uint64_t))(v284 + 8))(v304, v287);
  (*(void (**)(char *, uint64_t))(v283 + 8))(v303, v286);
  v238(v236, v235);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v329);
}

uint64_t sub_DAAD0@<X0>(_QWORD *a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  _QWORD *v91;
  void (*v92)(char *, uint64_t, uint64_t, _QWORD *);
  void (*v93)(uint64_t, char *, uint64_t);
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, char *, uint64_t);
  char *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t, __n128);
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __n128 v151;
  char *v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  void (*v175)(char *, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __n128 v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  __n128 v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t);
  int *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  void (*v212)(char *, uint64_t);
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  int *v228;
  unsigned int v229;
  void (*v230)(char *, _QWORD, uint64_t);
  void (*v231)(char *, char *, uint64_t);
  uint64_t v232;
  void (*v233)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  void (*v246)(char *, uint64_t);
  void (*v247)(char *, uint64_t, uint64_t, uint64_t);
  char *v248;
  uint64_t v249;
  void (*v250)(char *, char *, uint64_t);
  _QWORD *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(char *, char *, uint64_t);
  _QWORD *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  __int128 v277;
  int *v278;
  uint64_t v279;
  _QWORD *v280;

  v257 = a2;
  v249 = a3;
  v262 = sub_5C154(&qword_322820);
  v261 = *(_QWORD *)(v262 - 8);
  __chkstk_darwin(v262);
  v260 = (char *)&v219 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_323A40);
  v6 = __chkstk_darwin(v5);
  v248 = (char *)&v219 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MappedSeriesInfo(0, v6);
  v266 = *(_QWORD *)(v8 - 8);
  v267 = v8;
  __chkstk_darwin(v8);
  v264 = (char *)&v219 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_323A48);
  __chkstk_darwin(v10);
  v222 = (uint64_t)&v219 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v227 = (uint64_t)&v219 - v13;
  v14 = sub_5C154(&qword_3239C8);
  __chkstk_darwin(v14);
  v256 = (uint64_t)&v219 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for SeriesRoomPageIntent(0);
  v255 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v16);
  v225 = (uint64_t)&v219 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v219 = (uint64_t)&v219 - v19;
  __chkstk_darwin(v20);
  v245 = (uint64_t)&v219 - v21;
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v219 - v23);
  v274 = type metadata accessor for Metrics.NavigationType(0);
  v272 = *(_QWORD *)(v274 - 8);
  __chkstk_darwin(v274);
  v275 = (char *)&v219 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5C154(&qword_321BA8);
  __chkstk_darwin(v26);
  v244 = (uint64_t)&v219 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v265 = (char *)&v219 - v29;
  __chkstk_darwin(v30);
  v239 = (uint64_t)&v219 - v31;
  __chkstk_darwin(v32);
  v34 = (char *)&v219 - v33;
  v276 = type metadata accessor for SeriesType(0);
  v269 = *(_QWORD *)(v276 - 8);
  __chkstk_darwin(v276);
  v242 = (char *)&v219 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v223 = (char *)&v219 - v37;
  __chkstk_darwin(v38);
  v240 = (char *)&v219 - v39;
  __chkstk_darwin(v40);
  v238 = (char *)&v219 - v41;
  __chkstk_darwin(v42);
  v44 = (char *)&v219 - v43;
  v45 = type metadata accessor for ContentKind(0);
  v46 = *(_QWORD *)(v45 - 8);
  v270 = v45;
  v271 = v46;
  __chkstk_darwin(v45);
  v243 = (char *)&v219 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v263 = (char *)&v219 - v49;
  __chkstk_darwin(v50);
  v226 = (char *)&v219 - v51;
  __chkstk_darwin(v52);
  v253 = (char *)&v219 - v53;
  v273 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  v254 = *(_QWORD *)(v273 - 8);
  __chkstk_darwin(v273);
  v259 = (uint64_t)&v219 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v224 = (uint64_t)&v219 - v56;
  __chkstk_darwin(v57);
  v241 = (char *)&v219 - v58;
  __chkstk_darwin(v59);
  v221 = (uint64_t)&v219 - v60;
  __chkstk_darwin(v61);
  v220 = (char *)&v219 - v62;
  __chkstk_darwin(v63);
  v252 = (char *)&v219 - v64;
  __chkstk_darwin(v65);
  v268 = (uint64_t *)((char *)&v219 - v66);
  v280 = _swiftEmptyArrayStorage;
  v67 = a1[3];
  v68 = a1[4];
  sub_66898(a1, v67);
  dispatch thunk of SeriesInfo.contentKind.getter(v67, v68);
  v69 = a1[3];
  v70 = a1[4];
  sub_66898(a1, v69);
  v250 = (void (*)(char *, char *, uint64_t))ContentInfo.id.getter(v69, *(_QWORD *)(v70 + 8));
  v72 = v71;
  v74 = a1[3];
  v73 = a1[4];
  v258 = a1;
  sub_66898(a1, v74);
  v75 = v44;
  dispatch thunk of SeriesInfo.seriesType.getter(v74, v73, v76);
  v77 = v269;
  v78 = v276;
  v247 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v269 + 56);
  v247(v34, 1, 1, v276);
  v79 = *(void (**)(_QWORD))(v272 + 104);
  v229 = enum case for Metrics.NavigationType.forward(_:);
  v230 = (void (*)(char *, _QWORD, uint64_t))v79;
  v79(v275);
  v278 = v16;
  v234 = sub_648E0(&qword_31FFA0, type metadata accessor for SeriesRoomPageIntent, (uint64_t)&protocol conformance descriptor for SeriesRoomPageIntent);
  v279 = v234;
  v251 = sub_668BC(&v277);
  v80 = v16[8];
  v81 = type metadata accessor for MSeries(0);
  *(uint64_t *)((char *)v24 + v80) = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v81);
  *v24 = (uint64_t)v250;
  v24[1] = v72;
  v82 = (char *)v24 + v16[5];
  v250 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v250(v82, v75, v78);
  v83 = (uint64_t *)((char *)v24 + v16[6]);
  *v83 = 0;
  v83[1] = 0;
  sub_5E1A4((uint64_t)v34, (uint64_t)v24 + v16[7], &qword_321BA8);
  v232 = v81;
  v84 = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v81);
  v236 = v34;
  sub_5E09C((uint64_t)v34, &qword_321BA8);
  v85 = *(void (**)(char *, uint64_t))(v77 + 8);
  v235 = v75;
  v246 = v85;
  v85(v75, v78);

  *(uint64_t *)((char *)v24 + v80) = v84;
  v86 = (char *)v24 + v16[9];
  v87 = (uint64_t)v252;
  v231 = *(void (**)(char *, char *, uint64_t))(v272 + 32);
  v231(v86, v275, v274);
  v237 = v24;
  sub_5E160((uint64_t)v24, (uint64_t)v251, type metadata accessor for SeriesRoomPageIntent);
  v88 = (uint64_t)v268;
  *v268 = 0;
  *(_QWORD *)(v88 + 8) = 0;
  v89 = (int *)v273;
  v90 = v88 + *(int *)(v273 + 20);
  v91 = (_QWORD *)type metadata accessor for LocalizerRequest(0);
  v92 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *))(*(v91 - 1) + 56);
  v251 = v91;
  v233 = v92;
  ((void (*)(uint64_t, uint64_t, uint64_t))v92)(v90, 1, 1);
  *(_BYTE *)(v88 + v89[6]) = 0;
  v93 = *(void (**)(uint64_t, char *, uint64_t))(v271 + 32);
  v93(v88 + v89[7], v253, v270);
  sub_5DC98(&v277, v88 + v89[8]);
  sub_5E11C(v88, v87, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  v94 = (unint64_t)v280;
  if ((swift_isUniquelyReferenced_nonNull_native(v280) & 1) == 0)
    v94 = sub_572D0(0, *(_QWORD *)(v94 + 16) + 1, 1, v94);
  v96 = *(_QWORD *)(v94 + 16);
  v95 = *(_QWORD *)(v94 + 24);
  v97 = v258;
  if (v96 >= v95 >> 1)
    v94 = sub_572D0(v95 > 1, v96 + 1, 1, v94);
  *(_QWORD *)(v94 + 16) = v96 + 1;
  v98 = (*(unsigned __int8 *)(v254 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80);
  v254 = *(_QWORD *)(v254 + 72);
  sub_5E160(v87, v94 + v98 + v254 * v96, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  v280 = (_QWORD *)v94;
  v99 = v256;
  sub_5E1A4((uint64_t)v257, v256, &qword_3239C8);
  v100 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v255 + 48))(v99, 1, v16);
  v272 = v98;
  v228 = v16;
  if (v100 == 1)
  {
    sub_5E09C(v99, &qword_3239C8);
    v101 = v276;
LABEL_11:
    v108 = v97[3];
    v109 = v97[4];
    sub_66898(v97, v108);
    v110 = v248;
    SeriesInfo.mappedSeriesInfo.getter(v108, v109);
    v112 = v266;
    v111 = v267;
    v113 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v266 + 48))(v110, 1, v267);
    v114 = (uint64_t)v265;
    if (v113 == 1)
    {
      v115 = &qword_323A40;
      v116 = (uint64_t)v110;
LABEL_13:
      sub_5E09C(v116, v115);
      v117 = v249;
      goto LABEL_38;
    }
    (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v264, v110, v111);
    v118 = v247;
    v119 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v247)(v114, 1, 1, v101);
    v120 = v263;
    MappedSeriesInfo.contentKind.getter(v119);
    v121 = v271;
    v122 = v243;
    v123 = v120;
    v124 = v270;
    v257 = *(void (**)(char *, char *, uint64_t))(v271 + 16);
    v257(v243, v123, v270);
    v125 = (*(uint64_t (**)(char *, uint64_t))(v121 + 88))(v122, v124);
    if (v125 == enum case for ContentKind.audiobook(_:))
    {
      sub_5E09C(v114, &qword_321BA8);
      v126 = v269;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v269 + 104))(v114, enum case for SeriesType.audiobook(_:), v101);
      v118((char *)v114, 0, 1, v101);
    }
    else if (v125 == enum case for ContentKind.regularBook(_:))
    {
      sub_5E09C(v114, &qword_321BA8);
      v126 = v269;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v269 + 104))(v114, enum case for SeriesType.book(_:), v101);
      v118 = v247;
      v247((char *)v114, 0, 1, v101);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v124);
      v118 = v247;
      v126 = v269;
    }
    v138 = v244;
    sub_5E1A4(v114, v244, &qword_321BA8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v138, 1, v101) == 1)
    {
      (*(void (**)(char *, uint64_t))(v121 + 8))(v263, v124);
      sub_5E09C(v114, &qword_321BA8);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v264, v111);
      sub_5E09C(v138, &qword_321BA8);
      v117 = v249;
      v88 = (uint64_t)v268;
    }
    else
    {
      v139 = v242;
      v140 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v126 + 32))(v242, v138, v101);
      v269 = MappedSeriesInfo.id.getter(v140);
      v256 = v141;
      v142 = v235;
      v250(v235, v139, v101);
      v143 = v97[3];
      v144 = v97[4];
      sub_66898(v97, v143);
      v145 = ContentInfo.id.getter(v143, *(_QWORD *)(v144 + 8));
      v255 = v146;
      v147 = v118;
      v148 = v97[3];
      v149 = v97[4];
      sub_66898(v97, v148);
      v150 = (uint64_t)v236;
      dispatch thunk of SeriesInfo.seriesType.getter(v148, v149, v151);
      v147((char *)v150, 0, 1, v276);
      v153 = v274;
      v152 = v275;
      v230(v275, v229, v274);
      v154 = v228;
      v155 = v228[8];
      v156 = v232;
      v157 = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v232);
      v158 = v237;
      *(uint64_t *)((char *)v237 + v155) = v157;
      v159 = v256;
      *v158 = v269;
      v158[1] = v159;
      v250((char *)v158 + v154[5], v142, v276);
      v160 = (uint64_t *)((char *)v158 + v154[6]);
      v161 = v255;
      *v160 = v145;
      v160[1] = v161;
      v162 = (int *)v273;
      sub_5E1A4(v150, (uint64_t)v158 + v154[7], &qword_321BA8);
      v163 = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v156);
      sub_5E09C(v150, &qword_321BA8);
      v246(v142, v276);

      *(uint64_t *)((char *)v158 + v155) = v163;
      v231((char *)v158 + v154[9], v152, v153);
      v164 = (uint64_t)v158;
      v165 = v225;
      sub_5E160(v164, v225, type metadata accessor for SeriesRoomPageIntent);
      v166 = v241;
      v167 = v270;
      ((void (*)(char *, char *))v257)(&v241[v162[7]], v263);
      v168 = &v166[v162[8]];
      v169 = v234;
      *((_QWORD *)v168 + 3) = v154;
      *((_QWORD *)v168 + 4) = v169;
      v170 = sub_668BC(v168);
      sub_5E11C(v165, (uint64_t)v170, type metadata accessor for SeriesRoomPageIntent);
      *(_QWORD *)v166 = 0;
      *((_QWORD *)v166 + 1) = 0;
      v233(&v166[v162[5]], 1, 1, v251);
      v166[v162[6]] = 0;
      v171 = v224;
      sub_5E11C((uint64_t)v166, v224, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      v172 = (unint64_t)v280;
      if ((swift_isUniquelyReferenced_nonNull_native(v280) & 1) == 0)
        v172 = sub_572D0(0, *(_QWORD *)(v172 + 16) + 1, 1, v172);
      v174 = *(_QWORD *)(v172 + 16);
      v173 = *(_QWORD *)(v172 + 24);
      v117 = v249;
      v88 = (uint64_t)v268;
      v175 = v246;
      v176 = (uint64_t)v265;
      if (v174 >= v173 >> 1)
        v172 = sub_572D0(v173 > 1, v174 + 1, 1, v172);
      *(_QWORD *)(v172 + 16) = v174 + 1;
      sub_5E160(v171, v172 + v272 + v174 * v254, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      v280 = (_QWORD *)v172;
      sub_6685C((uint64_t)v241, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      sub_6685C(v165, type metadata accessor for SeriesRoomPageIntent);
      v175(v242, v276);
      (*(void (**)(char *, uint64_t))(v271 + 8))(v263, v167);
      sub_5E09C(v176, &qword_321BA8);
      (*(void (**)(char *, uint64_t))(v266 + 8))(v264, v267);
    }
    goto LABEL_38;
  }
  v102 = v99;
  v103 = v245;
  sub_5E160(v102, v245, type metadata accessor for SeriesRoomPageIntent);
  v104 = v103 + v16[6];
  v105 = *(_QWORD *)(v104 + 8);
  v101 = v276;
  if (!v105)
  {
    sub_6685C(v103, type metadata accessor for SeriesRoomPageIntent);
    goto LABEL_11;
  }
  v257 = *(void (**)(char *, char *, uint64_t))v104;
  v106 = v239;
  sub_5E1A4(v103 + v16[7], v239, &qword_321BA8);
  v107 = v269;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v269 + 48))(v106, 1, v101) == 1)
  {
    sub_6685C(v103, type metadata accessor for SeriesRoomPageIntent);
    sub_5E09C(v106, &qword_321BA8);
    goto LABEL_11;
  }
  v127 = v238;
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v238, v106, v101);
  v128 = v107;
  v129 = v240;
  v130 = v250;
  v250(v240, v127, v101);
  v131 = v223;
  v130(v223, v129, v101);
  v132 = (*(uint64_t (**)(char *, uint64_t))(v128 + 88))(v131, v101);
  v256 = v105;
  if (v132 == enum case for SeriesType.audiobook(_:))
  {
    v134 = v270;
    v133 = v271;
    v135 = v227;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v271 + 104))(v227, enum case for ContentKind.audiobook(_:), v270);
    v136 = v134;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v133 + 56))(v135, 0, 1, v134);
    swift_bridgeObjectRetain(v105);
    v137 = (void (*)(char *, uint64_t, __n128))v246;
  }
  else
  {
    v133 = v271;
    v135 = v227;
    v137 = (void (*)(char *, uint64_t, __n128))v246;
    if (v132 == enum case for SeriesType.book(_:))
    {
      v177 = v270;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v271 + 104))(v227, enum case for ContentKind.regularBook(_:), v270);
      v136 = v177;
      v178 = v177;
      v137 = (void (*)(char *, uint64_t, __n128))v246;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v133 + 56))(v135, 0, 1, v178);
      swift_bridgeObjectRetain(v105);
    }
    else
    {
      v136 = v270;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v271 + 56))(v227, 1, 1);
      v179 = swift_bridgeObjectRetain(v105);
      v137(v223, v101, v179);
    }
  }
  v180 = v222;
  sub_5E1A4(v135, v222, &qword_323A48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v180, 1, v136) == 1)
  {
    swift_bridgeObjectRelease(v256);
    sub_5E09C(v135, &qword_323A48);
    ((void (*)(char *, uint64_t))v137)(v240, v101);
    ((void (*)(char *, uint64_t))v137)(v238, v101);
    sub_6685C(v245, type metadata accessor for SeriesRoomPageIntent);
    v116 = v180;
    v115 = &qword_323A48;
    goto LABEL_13;
  }
  v93((uint64_t)v226, (char *)v180, v136);
  v181 = v235;
  v250(v235, v240, v101);
  v182 = v97[3];
  v183 = v97[4];
  sub_66898(v97, v182);
  v269 = ContentInfo.id.getter(v182, *(_QWORD *)(v183 + 8));
  v267 = v184;
  v185 = v97[3];
  v186 = v97[4];
  sub_66898(v97, v185);
  v187 = (uint64_t)v236;
  v188 = v185;
  v189 = (int *)v273;
  dispatch thunk of SeriesInfo.seriesType.getter(v188, v186, v190);
  v247((char *)v187, 0, 1, v276);
  v191 = v274;
  v192 = (void (*)(char *, uint64_t))v137;
  v230(v275, v229, v274);
  v193 = v228;
  v194 = v228[8];
  v195 = v232;
  v196 = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v232);
  v197 = v237;
  *(uint64_t *)((char *)v237 + v194) = v196;
  v198 = v256;
  *v197 = (uint64_t)v257;
  v197[1] = v198;
  v250((char *)v197 + v193[5], v181, v276);
  v199 = (uint64_t *)((char *)v197 + v193[6]);
  v200 = v267;
  *v199 = v269;
  v199[1] = v200;
  sub_5E1A4(v187, (uint64_t)v197 + v193[7], &qword_321BA8);
  v201 = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v195);
  sub_5E09C(v187, &qword_321BA8);
  v192(v181, v276);

  *(uint64_t *)((char *)v197 + v194) = v201;
  v231((char *)v197 + v193[9], v275, v191);
  v202 = v219;
  sub_5E160((uint64_t)v197, v219, type metadata accessor for SeriesRoomPageIntent);
  v203 = v220;
  v204 = v270;
  (*(void (**)(char *, char *))(v271 + 16))(&v220[v189[7]], v226);
  v205 = &v203[v189[8]];
  v206 = v234;
  *((_QWORD *)v205 + 3) = v193;
  *((_QWORD *)v205 + 4) = v206;
  v207 = sub_668BC(v205);
  sub_5E11C(v202, (uint64_t)v207, type metadata accessor for SeriesRoomPageIntent);
  *(_QWORD *)v203 = 0;
  *((_QWORD *)v203 + 1) = 0;
  v233(&v203[v189[5]], 1, 1, v251);
  v203[v189[6]] = 0;
  sub_5E11C((uint64_t)v203, v221, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  v208 = (unint64_t)v280;
  if ((swift_isUniquelyReferenced_nonNull_native(v280) & 1) == 0)
    v208 = sub_572D0(0, *(_QWORD *)(v208 + 16) + 1, 1, v208);
  v209 = v272;
  v211 = *(_QWORD *)(v208 + 16);
  v210 = *(_QWORD *)(v208 + 24);
  v117 = v249;
  v88 = (uint64_t)v268;
  v212 = v246;
  if (v211 >= v210 >> 1)
    v208 = sub_572D0(v210 > 1, v211 + 1, 1, v208);
  *(_QWORD *)(v208 + 16) = v211 + 1;
  sub_5E160(v221, v208 + v209 + v211 * v254, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  v280 = (_QWORD *)v208;
  sub_6685C((uint64_t)v220, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  sub_6685C(v202, type metadata accessor for SeriesRoomPageIntent);
  (*(void (**)(char *, uint64_t))(v271 + 8))(v226, v204);
  sub_5E09C(v227, &qword_323A48);
  v213 = v276;
  v212(v240, v276);
  v212(v238, v213);
  sub_6685C(v245, type metadata accessor for SeriesRoomPageIntent);
LABEL_38:
  sub_10CFBC((unint64_t *)&v280);
  v214 = v280;
  v215 = v259;
  sub_5E11C(v88, v259, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  v216 = sub_648E0((unint64_t *)&unk_3228A0, type metadata accessor for SeriesRoomListHeaderSegmentedItem, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderSegmentedItem);
  v217 = v260;
  SegmentedControlViewModel.init(pickerItems:selection:)(v214, v215, v273, v216);
  sub_6685C(v88, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v261 + 32))(v117, v217, v262);
}

_QWORD *sub_DC178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  _QWORD v20[5];
  char v21;
  _QWORD v22[5];

  v5 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E0D8(a2, (uint64_t)v20);
  v22[3] = type metadata accessor for SeriesRoomPageIntent(0);
  v22[4] = sub_648E0(&qword_31FFA0, type metadata accessor for SeriesRoomPageIntent, (uint64_t)&protocol conformance descriptor for SeriesRoomPageIntent);
  v11 = sub_668BC(v22);
  sub_5E11C(a3, (uint64_t)v11, type metadata accessor for SeriesRoomPageIntent);
  v21 = 0;
  static ActionMetrics.notInstrumented.getter(v12);
  v19[3] = &type metadata for SeriesListShelfUpdateIntent;
  v19[4] = sub_E29B4();
  v19[0] = swift_allocObject(&unk_2EC0E8, 104, 7);
  sub_E2A2C((uint64_t)v20, v19[0] + 16);
  v13 = type metadata accessor for ClickData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
  v14 = type metadata accessor for Page(0);
  v15 = type metadata accessor for Shelf(0);
  v16 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v17 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateAction.init(actionMetrics:instructionIntent:animated:clickData:)(v10, v19, 1, v7, v14, v15, v16, v17);
  return sub_E2A68(v20);
}

uint64_t SeriesRoomPageIntentImplementation.performSync(_:objectGraph:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[6];
  uint64_t v57;

  v41 = a3;
  v42 = type metadata accessor for Page(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v51 = (uint64_t *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5C154(&qword_3237B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for PageMetrics(0);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v50 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for PageData(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v49 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_320A40);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_320908);
  BaseObjectGraph.inject<A>(_:)(v53, v14, v14);
  v16 = v54;
  v15 = v55;
  sub_66898(v53, v54);
  v17 = *a1;
  v18 = a1[1];
  v57 = 4;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v15 + 16))(v56, v17, v18, &v57, v16, v15);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v53);
  if (v56[3] || (objc_msgSend((id)objc_opt_self(BKReachability), "isOffline") & 1) == 0)
  {
    v23 = sub_5C154(&qword_320A48);
    v44 = a2;
    BaseObjectGraph.inject<A>(_:)(v53, v23, v23);
    v24 = v54;
    v25 = v55;
    sub_66898(v53, v54);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 24))(&v57, v17, v18, v24, v25);
    v43 = v57;
    v26 = v54;
    v27 = v55;
    sub_66898(v53, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 32))(v17, v18, v26, v27);
    v28 = swift_bridgeObjectRetain(v18);
    v29 = (uint64_t)v49;
    PageData.init(pageID:pageType:)(v17, v18, 0x6150736569726553, 0xEA00000000006567, v28);
    v30 = type metadata accessor for SeriesRoomPageIntent(0);
    v31 = (char *)a1 + *(int *)(v30 + 36);
    v32 = type metadata accessor for JSNetworkPerformanceMetrics(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v8, 1, 1, v32);
    v33 = (uint64_t)v50;
    static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(0x736569726553, 0xE600000000000000, v17, v18, v31, v8, 1, 1);
    sub_5E09C((uint64_t)v8, &qword_3237B8);
    v34 = *(void **)((char *)a1 + *(int *)(v30 + 32));
    LOBYTE(v57) = v43;
    v35 = v34;
    v37 = v51;
    v36 = v52;
    sub_D9140((uint64_t)v56, (void (*)(uint64_t, uint64_t))v34, 0, v29, v33, (unsigned __int8 *)&v57, (uint64_t)v13, v44, v51, v53, (uint64_t)a1);
    if (v36)
    {

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v33, v48);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v29, v47);
      sub_5E09C((uint64_t)v13, &qword_320A40);
      sub_5E09C((uint64_t)v56, &qword_320910);
      v57 = v36;
      swift_errorRetain(v36);
      v38 = sub_5C154((uint64_t *)&unk_321CD0);
      if (swift_dynamicCast(v38, &v57, v38, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPageIntentImplementationError, 0))
      {
        swift_errorRelease(v36);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, 1, 1, v42);
      }
      swift_errorRelease(v57);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v33, v48);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v29, v47);
      sub_5E09C((uint64_t)v13, &qword_320A40);
      sub_5E09C((uint64_t)v56, &qword_320910);
      v39 = v41;
      sub_5E160((uint64_t)v37, v41, type metadata accessor for Page);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v39, 0, 1, v42);
    }
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v53);
  }
  else
  {
    v19 = sub_DC8BC();
    v20 = swift_allocError(&type metadata for PageError, v19, 0, 0);
    *v21 = 3;
    swift_willThrow(v20);
    return sub_5E09C((uint64_t)v56, &qword_320910);
  }
}

unint64_t sub_DC8BC()
{
  unint64_t result;

  result = qword_3237C0;
  if (!qword_3237C0)
  {
    result = swift_getWitnessTable(&unk_260800, &type metadata for PageError);
    atomic_store(result, (unint64_t *)&qword_3237C0);
  }
  return result;
}

uint64_t sub_DC904@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SeriesRoomPageIntentImplementation.performSync(_:objectGraph:)(a1, a2, a3);
}

unint64_t sub_DC918@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __n128 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  unint64_t result;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v50 = a1;
  v51 = a2;
  v3 = sub_5C154(&qword_320A40);
  v4 = __chkstk_darwin(v3);
  v54 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for MResourceType(0, v4);
  v53 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SeriesType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_323970);
  inited = swift_initStackObject(v12, &v59);
  *(_OWORD *)(inited + 16) = xmmword_25D600;
  *(_QWORD *)(inited + 32) = 0x4449736569726573;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v14 = v2[1];
  *(_QWORD *)(inited + 48) = *v2;
  *(_QWORD *)(inited + 56) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x7954736569726573;
  *(_QWORD *)(inited + 88) = 0xEA00000000006570;
  v52 = type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent(0);
  v49 = v2;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for SeriesType.audiobook(_:), v8);
  v15 = sub_648E0((unint64_t *)&qword_323978, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesType, (uint64_t)&protocol conformance descriptor for SeriesType);
  swift_bridgeObjectRetain(v14);
  dispatch thunk of RawRepresentable.rawValue.getter(&v57, v8, v15);
  dispatch thunk of RawRepresentable.rawValue.getter(&v55, v8, v15);
  v16 = v58;
  v17 = v56;
  if (v57 == v55 && v58 == v56)
  {
    swift_bridgeObjectRelease_n(v58, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
    type metadata accessor for MAudiobookSeries(0);
    v20 = static MAudiobookSeries.type.getter();
    goto LABEL_7;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v55, v56, 0);
  swift_bridgeObjectRelease(v16);
  v19 = swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v19);
  if ((v18 & 1) != 0)
    goto LABEL_5;
  type metadata accessor for MBookSeries(0);
  v20 = static MBookSeries.type.getter();
LABEL_7:
  v22 = v50;
  v21 = v51;
  v24 = v48;
  v23 = v49;
  v25 = MResourceType.name.getter(v20);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v24);
  *(_QWORD *)(inited + 96) = v25;
  *(_QWORD *)(inited + 104) = v27;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x7344496D616461;
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  v28 = v52;
  v29 = *(_QWORD **)((char *)v23 + *(int *)(v52 + 24));
  v30 = sub_5C154(&qword_31F730);
  v31 = _swiftEmptyArrayStorage;
  if (v29)
    v31 = v29;
  *(_QWORD *)(inited + 144) = v31;
  *(_QWORD *)(inited + 168) = v30;
  *(_QWORD *)(inited + 176) = 0x6564724F74726F73;
  *(_QWORD *)(inited + 184) = 0xE900000000000072;
  v32 = v54;
  sub_5E1A4((uint64_t)v23 + *(int *)(v28 + 28), v54, &qword_320A40);
  v33 = type metadata accessor for SeriesListSortOrder(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33);
  v36 = swift_bridgeObjectRetain(v29);
  if (v35 == 1)
  {
    sub_5E09C(v32, &qword_320A40);
    v37 = (uint64_t *)(inited + 192);
    *(_QWORD *)(inited + 216) = &type metadata for String;
LABEL_13:
    *v37 = 0;
    v42 = 0xE000000000000000;
    goto LABEL_14;
  }
  v38 = SeriesListSortOrder.rawValue.getter(v36);
  v39 = v32;
  v40 = v38;
  v42 = v41;
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v39, v33);
  v37 = (uint64_t *)(inited + 192);
  *(_QWORD *)(inited + 216) = &type metadata for String;
  if (!v42)
    goto LABEL_13;
  *v37 = v40;
LABEL_14:
  *(_QWORD *)(inited + 200) = v42;
  v57 = sub_52E00(inited);
  v43 = v22;
  v44 = sub_5C154(&qword_320660);
  v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v57, v44);
  v46 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", v45, v43);
  swift_unknownObjectRelease(v45);

  v21[3] = sub_5C154(&qword_323810);
  result = sub_E0584();
  v21[4] = result;
  *v21 = v46;
  return result;
}

void sub_DCD7C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000000025D700;
}

unint64_t sub_DCD9C@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_DC918(a1, a2);
}

void sub_DCDB0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v31 = a2;
  v3 = type metadata accessor for Page(0);
  __chkstk_darwin(v3);
  v32 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_5C154(&qword_323980);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(v11 + 20);
  v13 = type metadata accessor for MSeries(0);
  v14 = (void *)_MResourceDecoder_OrNil.init(wrappedValue:)(0, v13);
  v35 = a1;
  v36 = v12;
  v34 = v10;
  *(_QWORD *)&v10[v12] = v14;
  v16 = a1[3];
  v15 = a1[4];
  sub_66898(a1, v16);
  v17 = sub_E27C0();
  v18 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys, v17, v16, v15);
  if (v18)
  {
    v23 = v36;
    v24 = (uint64_t)v34;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);

  }
  else
  {
    v19 = v5;
    LOBYTE(v39) = 0;
    v20 = sub_648E0(&qword_323990, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
    v21 = v32;
    v22 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v3, &v39, v33, v3, v20);
    v25 = (uint64_t)v21;
    v26 = (uint64_t)v34;
    sub_5E160(v25, (uint64_t)v34, type metadata accessor for Page);
    v27 = sub_5C154(&qword_321BC8);
    v38 = 1;
    v28 = sub_67060((unint64_t *)&qword_321BD0, &qword_321BC8, (uint64_t)&protocol conformance descriptor for _MResourceDecoder_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v27, &v38, v22, v27, v28);

    *(_QWORD *)(v26 + v36) = v39;
    v29 = sub_5C154(&qword_323998);
    v38 = 2;
    v30 = sub_67060(&qword_3239A0, &qword_323998, (uint64_t)&protocol conformance descriptor for _MResourceDecoder_Many<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v29, &v38, v22, v29, v30);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v22);
    *(_QWORD *)(v26 + *(int *)(v8 + 24)) = v39;
    sub_5E11C(v26, v31, type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v35);
    sub_6685C(v26, type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage);
  }
}

uint64_t sub_DD108()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000013;
  if (*v0 != 1)
    v1 = 0x737465737361;
  if (*v0)
    return v1;
  else
    return 1701273968;
}

uint64_t sub_DD15C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_E2C40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_DD180(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E27C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_DD1A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E27C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_DD1D0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_DCDB0(a1, a2);
}

uint64_t SeriesRoomPageIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v3[83] = a3;
  v3[82] = a2;
  v3[81] = a1;
  v4 = type metadata accessor for Page(0);
  v3[84] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[85] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[86] = swift_task_alloc(v6);
  v3[87] = swift_task_alloc(v6);
  v3[88] = swift_task_alloc(v6);
  v7 = type metadata accessor for PageMetrics(0);
  v3[89] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[90] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[91] = swift_task_alloc(v9);
  v3[92] = swift_task_alloc(v9);
  v10 = type metadata accessor for PageData(0);
  v3[93] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[94] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[95] = swift_task_alloc(v12);
  v3[96] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3237B8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[97] = swift_task_alloc(v13);
  v3[98] = swift_task_alloc(v13);
  v14 = type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage(0);
  v3[99] = v14;
  v3[100] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_3237D0);
  v3[101] = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[102] = swift_task_alloc(v16);
  v3[103] = swift_task_alloc(v16);
  v17 = type metadata accessor for SeriesType(0);
  v3[104] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[105] = v18;
  v3[106] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent(0);
  v3[107] = v19;
  v3[108] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SeriesListSortOrder(0);
  v3[109] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[110] = v21;
  v3[111] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_320A40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[112] = swift_task_alloc(v22);
  v3[113] = swift_task_alloc(v22);
  v3[114] = swift_task_alloc(v22);
  v23 = type metadata accessor for MonotonicTime(0);
  v3[115] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[116] = v24;
  v3[117] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_3237D8);
  v3[118] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v3[119] = v26;
  v3[120] = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for PageRenderEvent(0, v27);
  v3[121] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v3[122] = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[123] = swift_task_alloc(v30);
  v3[124] = swift_task_alloc(v30);
  v31 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3237E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[125] = swift_task_alloc(v31);
  v3[126] = swift_task_alloc(v31);
  v3[127] = swift_task_alloc(v31);
  v32 = sub_5C154(&qword_3237E8);
  v3[128] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v32 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for PageIntentInstrumentation(0);
  v3[129] = v33;
  v34 = *(_QWORD *)(v33 - 8);
  v3[130] = v34;
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[131] = swift_task_alloc(v35);
  v3[132] = swift_task_alloc(v35);
  v36 = sub_5C154(&qword_320A48);
  v37 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[133] = v37;
  *v37 = v3;
  v37[1] = sub_DD588;
  return BaseObjectGraph.inject<A>(_:)(v3 + 23, v36, v36);
}

uint64_t sub_DD588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1064);
  *(_QWORD *)(*(_QWORD *)v1 + 1072) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_DF004;
  else
    v3 = sub_DD5EC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_DD5EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  int *v12;

  v1 = v0[83];
  v2 = (uint64_t *)v0[82];
  v3 = sub_5C154(&qword_320908);
  v4 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v0 + 13, v3, v1, v3, v4);
  v5 = v0[16];
  v6 = v0[17];
  sub_66898(v0 + 13, v5);
  v7 = *v2;
  v8 = v2[1];
  v0[80] = 4;
  v9 = *(int **)(v6 + 8);
  v12 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  v0[135] = v10;
  *v10 = v0;
  v10[1] = sub_DD6E0;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))v12)(v0 + 8, v7, v8, v0 + 80, v5, v6);
}

uint64_t sub_DD6E0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1080));
  return swift_task_switch(sub_DD734, 0, 0);
}

uint64_t sub_DD734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;

  v1 = *(_QWORD *)(v0 + 1040);
  v2 = *(_QWORD *)(v0 + 1032);
  v3 = *(_QWORD *)(v0 + 1024);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 104));
  BaseObjectGraph.optional<A>(_:)(v2, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  v5 = *(_QWORD *)(v0 + 1056);
  v6 = *(_QWORD *)(v0 + 1040);
  v7 = *(_QWORD *)(v0 + 1032);
  v8 = *(_QWORD *)(v0 + 1024);
  if (v4 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for PageIntentInstrumentation.notInstrumented(_:), v7);
    sub_5E09C(v8, &qword_3237E8);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 32))(v5, *(_QWORD *)(v0 + 1024), v7);
  }
  v9 = *(_QWORD *)(v0 + 1048);
  v10 = *(_QWORD *)(v0 + 1040);
  v11 = *(_QWORD *)(v0 + 1032);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v9, *(_QWORD *)(v0 + 1056), v11);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11);
  if (v12 == enum case for PageIntentInstrumentation.primaryData(_:))
  {
    v13 = *(_QWORD *)(v0 + 1048);
    v14 = *(_QWORD *)(v0 + 1016);
    v15 = *(_QWORD *)(v0 + 976);
    v16 = *(_QWORD *)(v0 + 968);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 1040) + 96))(v13, *(_QWORD *)(v0 + 1032));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v14, v13, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v16);
  }
  else
  {
    v17 = v12;
    if (v12 == enum case for PageIntentInstrumentation.secondaryData(_:))
    {
      v18 = *(_QWORD *)(v0 + 1048);
      v19 = *(_QWORD *)(v0 + 1040);
      v20 = *(_QWORD *)(v0 + 1032);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 976) + 56))(*(_QWORD *)(v0 + 1016), 1, 1, *(_QWORD *)(v0 + 968));
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    }
    else
    {
      v21 = enum case for PageIntentInstrumentation.notInstrumented(_:);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 976) + 56))(*(_QWORD *)(v0 + 1016), 1, 1, *(_QWORD *)(v0 + 968));
      if (v17 != v21)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1040) + 8))(*(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1032));
    }
  }
  v22 = *(_QWORD *)(v0 + 1008);
  v23 = *(_QWORD *)(v0 + 976);
  v24 = *(_QWORD *)(v0 + 968);
  sub_5E1A4(*(_QWORD *)(v0 + 1016), v22, &qword_3237E0);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  *(_QWORD *)(v0 + 1088) = v25;
  if (v25(v22, 1, v24) == 1)
  {
    sub_5E09C(*(_QWORD *)(v0 + 1008), &qword_3237E0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 976) + 32))(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 968));
    if (qword_31E750 != -1)
      swift_once(&qword_31E750, sub_1F0950);
    v26 = *(_QWORD *)(v0 + 992);
    v51 = *(_QWORD *)(v0 + 976);
    v52 = *(_QWORD *)(v0 + 968);
    v27 = *(_QWORD *)(v0 + 960);
    v28 = *(_QWORD *)(v0 + 952);
    v29 = *(_QWORD *)(v0 + 944);
    v30 = *(_QWORD *)(v0 + 936);
    v49 = *(_QWORD *)(v0 + 928);
    v50 = *(_QWORD *)(v0 + 920);
    v31 = *(_QWORD *)(v0 + 656);
    v32 = sub_5240C(v29, (uint64_t)qword_3460A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v32, v29);
    v33 = *(_QWORD *)(v31 + *(int *)(type metadata accessor for SeriesRoomPageIntent(0) + 32));
    sub_5E1A4(v0 + 64, v0 + 144, &qword_320910);
    if (v33 | *(_QWORD *)(v0 + 168))
      v34 = 1;
    else
      v34 = 2;
    v35 = sub_5E09C(v0 + 144, &qword_320910);
    *(_BYTE *)(v0 + 58) = v34;
    v36 = PageRenderEvent.id.getter(v35);
    v38 = v37;
    static MonotonicTime.now.getter(v36);
    v39 = sub_E0540();
    PageRenderField<>.callAsFunction(_:for:at:)(v0 + 58, v36, v38, v30, v29, v39);
    v40 = swift_bridgeObjectRelease(v38);
    (*(void (**)(uint64_t, uint64_t, __n128))(v49 + 8))(v30, v50, v40);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v26, v52);
  }
  v41 = *(uint64_t **)(v0 + 656);
  v42 = *(_QWORD *)(v0 + 208);
  v43 = *(_QWORD *)(v0 + 216);
  sub_66898((_QWORD *)(v0 + 184), v42);
  v44 = *v41;
  v45 = v41[1];
  v46 = *(int **)(v43 + 64);
  v53 = (int *)((char *)v46 + *v46);
  v47 = (_QWORD *)swift_task_alloc(v46[1]);
  *(_QWORD *)(v0 + 1096) = v47;
  *v47 = v0;
  v47[1] = sub_DDB50;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v53)(*(_QWORD *)(v0 + 912), v44, v45, v42, v43);
}

uint64_t sub_DDB50()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1096));
  return swift_task_switch(sub_DDBA4, 0, 0);
}

uint64_t sub_DDBA4()
{
  char *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  char **v7;
  uint64_t (*v9)(char *, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)*((_QWORD *)v0 + 82);
  v2 = *((_QWORD *)v0 + 26);
  v3 = *((_QWORD *)v0 + 27);
  sub_66898((_QWORD *)v0 + 23, v2);
  v4 = *v1;
  v5 = v1[1];
  v6 = *(int **)(v3 + 56);
  v9 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (char **)swift_task_alloc(v6[1]);
  *((_QWORD *)v0 + 138) = v7;
  *v7 = v0;
  v7[1] = (char *)sub_DDC48;
  return v9(v0 + 57, v4, v5, v2, v3);
}

uint64_t sub_DDC48()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1104));
  return swift_task_switch(sub_DDC9C, 0, 0);
}

uint64_t sub_DDC9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  *(_BYTE *)(v0 + 59) = *(_BYTE *)(v0 + 57);
  sub_5E1A4(v0 + 64, v0 + 264, &qword_320910);
  if (!*(_QWORD *)(v0 + 288))
  {
    v11 = &qword_320910;
    v12 = v0 + 264;
LABEL_7:
    sub_5E09C(v12, v11);
    v13 = _swiftEmptyArrayStorage;
    goto LABEL_8;
  }
  sub_5DC98((__int128 *)(v0 + 264), v0 + 224);
  static ContentInfoUtilities.seriesInfo(librarySeries:)(v0 + 224);
  if (!*(_QWORD *)(v0 + 568))
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
    v11 = &qword_320918;
    v12 = v0 + 544;
    goto LABEL_7;
  }
  v1 = (_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 1072);
  sub_5DC98((__int128 *)(v0 + 544), v0 + 504);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 536);
  sub_66898((_QWORD *)(v0 + 504), v3);
  v5 = SeriesInfo.assets.getter(v3, v4);
  if (v2)
  {
    v6 = *(_QWORD *)(v0 + 1056);
    v7 = *(_QWORD *)(v0 + 1040);
    v8 = *(_QWORD *)(v0 + 1032);
    v9 = *(_QWORD *)(v0 + 1016);
    v10 = *(_QWORD *)(v0 + 912);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
    sub_5E09C(v10, &qword_320A40);
    sub_5E09C(v9, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_5E09C(v0 + 64, &qword_320910);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 504));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 184));
    v70 = *(_QWORD *)(v0 + 1048);
    v71 = *(_QWORD *)(v0 + 1024);
    v72 = *(_QWORD *)(v0 + 1016);
    v73 = *(_QWORD *)(v0 + 1008);
    v74 = *(_QWORD *)(v0 + 1000);
    v75 = *(_QWORD *)(v0 + 992);
    v76 = *(_QWORD *)(v0 + 984);
    v77 = *(_QWORD *)(v0 + 960);
    v78 = *(_QWORD *)(v0 + 936);
    v94 = *(_QWORD *)(v0 + 912);
    v95 = *(_QWORD *)(v0 + 904);
    v96 = *(_QWORD *)(v0 + 896);
    v97 = *(_QWORD *)(v0 + 888);
    v98 = *(_QWORD *)(v0 + 864);
    v99 = *(_QWORD *)(v0 + 848);
    v100 = *(_QWORD *)(v0 + 824);
    v101 = *(_QWORD *)(v0 + 816);
    v102 = *(_QWORD *)(v0 + 800);
    v103 = *(_QWORD *)(v0 + 784);
    v104 = *(_QWORD *)(v0 + 776);
    v105 = *(_QWORD *)(v0 + 768);
    v106 = *(_QWORD *)(v0 + 760);
    v108 = *(_QWORD *)(v0 + 736);
    v110 = *(_QWORD *)(v0 + 728);
    v112 = *(_QWORD *)(v0 + 704);
    v114 = *(_QWORD *)(v0 + 696);
    v115 = *(_QWORD *)(v0 + 688);
    swift_task_dealloc(*(_QWORD *)(v0 + 1056));
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v36 = v5;
  v37 = *(_QWORD *)(v0 + 912);
  v38 = *(_QWORD *)(v0 + 904);
  v107 = *(_QWORD *)(v0 + 880);
  v109 = *(_QWORD *)(v0 + 872);
  v111 = (__int128 *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v40 = sub_5C154(&qword_31EF60);
  v41 = _arrayForceCast<A, B>(_:)(v36, AssociatedTypeWitness, v40);
  swift_bridgeObjectRelease(v36);
  sub_195B20(v41);
  v116 = v42;
  swift_bridgeObjectRelease(v41);
  sub_5E1A4(v37, v38, &qword_320A40);
  v113 = (_QWORD *)(v0 + 224);
  sub_5E0D8(v0 + 224, v0 + 584);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v38, 1, v109);
  v44 = *(_QWORD *)(v0 + 904);
  v45 = *(_QWORD *)(v0 + 888);
  v46 = *(_QWORD *)(v0 + 880);
  v47 = *(_QWORD *)(v0 + 872);
  if (v43 == 1)
  {
    v48 = *(_QWORD *)(v0 + 608);
    v49 = *(_QWORD *)(v0 + 616);
    sub_66898((_QWORD *)(v0 + 584), v48);
    v50 = dispatch thunk of LibrarySeriesInfo.isOrdered.getter(v48, v49);
    v51 = (unsigned int *)&enum case for SeriesListSortOrder.ascending(_:);
    if ((v50 & 1) == 0)
      v51 = (unsigned int *)&enum case for SeriesListSortOrder.popular(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v45, *v51, v47);
    sub_5E09C(v44, &qword_320A40);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v46 + 32))(*(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 872));
  }
  v52 = *(_QWORD *)(v0 + 888);
  v53 = *(_QWORD *)(v0 + 880);
  v54 = *(_QWORD *)(v0 + 872);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 584));
  v55 = SeriesListSortOrder.sortedAssets(for:)(v116);
  v56 = swift_bridgeObjectRelease(v116);
  (*(void (**)(uint64_t, uint64_t, __n128))(v53 + 8))(v52, v54, v56);
  if (*(_QWORD *)(v55 + 16) >= 0xAuLL)
    v57 = 10;
  else
    v57 = *(_QWORD *)(v55 + 16);
  if (v57)
  {
    sub_20C95C(0, v57, 0);
    v58 = 0;
    v13 = _swiftEmptyArrayStorage;
    v117 = 40 * v57;
    do
    {
      v59 = v55;
      sub_5E0D8(v55 + v58 + 32, v0 + 464);
      v61 = *(_QWORD *)(v0 + 488);
      v60 = *(_QWORD *)(v0 + 496);
      sub_66898((_QWORD *)(v0 + 464), v61);
      v62 = ContentInfo.id.getter(v61, *(_QWORD *)(v60 + 8));
      v64 = v63;
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 464));
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      {
        sub_20C95C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v13 = _swiftEmptyArrayStorage;
      }
      v66 = _swiftEmptyArrayStorage[2];
      v65 = _swiftEmptyArrayStorage[3];
      if (v66 >= v65 >> 1)
      {
        sub_20C95C(v65 > 1, v66 + 1, 1);
        v13 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v66 + 1;
      v67 = &_swiftEmptyArrayStorage[2 * v66];
      v67[4] = v62;
      v67[5] = v64;
      v58 += 40;
      v55 = v59;
    }
    while (v117 != v58);
    swift_bridgeObjectRelease(v59);
    v1 = (_QWORD *)(v0 + 504);
  }
  else
  {
    swift_bridgeObjectRelease(v55);
    v13 = _swiftEmptyArrayStorage;
  }
  v68 = *(char **)(v0 + 528);
  v69 = *(_QWORD *)(v0 + 536);
  sub_66898(v1, (uint64_t)v68);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  SeriesInfo.getPromotionState()(v68, v69, (uint64_t)v111);
  if (*(_BYTE *)(v0 + 56) == 4)
  {
    sub_5DC98(v111, v0 + 304);
    v81 = *(_QWORD *)(v0 + 328);
    v80 = *(_QWORD *)(v0 + 336);
    sub_66898((_QWORD *)(v0 + 304), v81);
    v82 = ContentInfo.id.getter(v81, *(_QWORD *)(v80 + 8));
    v84 = v83;
    LOBYTE(v80) = sub_DF8F8(v82, v83, _swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if ((v80 & 1) == 0)
    {
      v85 = v1;
      v87 = *(_QWORD *)(v0 + 328);
      v86 = *(_QWORD *)(v0 + 336);
      sub_66898((_QWORD *)(v0 + 304), v87);
      v88 = ContentInfo.id.getter(v87, *(_QWORD *)(v86 + 8));
      v90 = v89;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        v13 = sub_572E4(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
      v92 = v13[2];
      v91 = v13[3];
      if (v92 >= v91 >> 1)
        v13 = sub_572E4((_QWORD *)(v91 > 1), v92 + 1, 1, v13);
      v13[2] = v92 + 1;
      v93 = &v13[2 * v92];
      v93[4] = v88;
      v93[5] = v90;
      v1 = v85;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v113);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 304));
  }
  else
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v113);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    sub_8307C(v111);
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1);
LABEL_8:
  v14 = *(_QWORD *)(v0 + 848);
  v15 = *(_QWORD *)(v0 + 840);
  v16 = *(_QWORD *)(v0 + 832);
  v17 = *(char **)(v0 + 656);
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v20 = type metadata accessor for SeriesRoomPageIntent(0);
  *(_QWORD *)(v0 + 1112) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v14, &v17[*(int *)(v20 + 20)], v16);
  if (!v13[2])
  {
    swift_bridgeObjectRetain(v18);
    v21 = swift_bridgeObjectRelease(v13);
    v13 = 0;
    if (*(_QWORD *)(v0 + 88))
      goto LABEL_10;
LABEL_12:
    sub_5E1A4(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 896), &qword_320A40);
    goto LABEL_13;
  }
  v21 = swift_bridgeObjectRetain(v18);
  if (!*(_QWORD *)(v0 + 88))
    goto LABEL_12;
LABEL_10:
  v22 = *(_QWORD *)(v0 + 896);
  v23 = *(_QWORD *)(v0 + 880);
  v24 = *(_QWORD *)(v0 + 872);
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v23 + 104))(v22, enum case for SeriesListSortOrder.releaseDate(_:), v24, v21);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v22, 0, 1, v24);
LABEL_13:
  v25 = *(_QWORD *)(v0 + 896);
  v26 = *(char **)(v0 + 864);
  v27 = *(int **)(v0 + 856);
  v28 = *(_QWORD *)(v0 + 848);
  v29 = *(_QWORD *)(v0 + 840);
  v30 = *(_QWORD *)(v0 + 832);
  *(_QWORD *)v26 = v19;
  *((_QWORD *)v26 + 1) = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(&v26[v27[5]], v28, v30);
  *(_QWORD *)&v26[v27[6]] = v13;
  sub_66F14(v25, (uint64_t)&v26[v27[7]], &qword_320A40);
  v31 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  *(_QWORD *)(v0 + 1120) = v31;
  *(_QWORD *)(v0 + 632) = v31;
  v32 = (_QWORD *)swift_task_alloc(async function pointer to CustomIntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  *(_QWORD *)(v0 + 1128) = v32;
  v33 = sub_DFC80();
  v34 = sub_648E0(&qword_3237F0, (uint64_t (*)(uint64_t))sub_DFC80, (uint64_t)&protocol conformance descriptor for JSABridge);
  v35 = sub_648E0(&qword_3237F8, type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent, (uint64_t)&unk_25D8B0);
  *v32 = v0;
  v32[1] = sub_DE604;
  return CustomIntentDispatcher.dispatch<A>(_:objectGraph:)(*(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 664), v33, *(_QWORD *)(v0 + 856), v34, v35);
}

uint64_t sub_DE604()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1128);
  *(_QWORD *)(*v1 + 1136) = v0;
  swift_task_dealloc(v3);

  if (v0)
    v4 = sub_DF1CC;
  else
    v4 = sub_DE678;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_DE678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned __int8 v150[17];

  v145 = v0 + 64;
  v148 = (_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 800);
  sub_66F14(*(_QWORD *)(v0 + 816), v1, &qword_3237D0);
  sub_5E11C(v1, v3, type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage);
  v4 = *(_QWORD *)(v1 + *(int *)(v2 + 36));
  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for JSNetworkPerformanceMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (v5)
  {
    (*(void (**)(_QWORD, unint64_t, uint64_t))(v7 + 16))(*(_QWORD *)(v0 + 784), v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  v10 = *(_QWORD *)(v0 + 1016);
  v11 = *(_QWORD *)(v0 + 1000);
  v12 = *(_QWORD *)(v0 + 968);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v7 + 56))(*(_QWORD *)(v0 + 784), v8, 1, v6);
  sub_5E1A4(v10, v11, &qword_3237E0);
  if (v9(v11, 1, v12) == 1)
  {
    sub_5E09C(*(_QWORD *)(v0 + 1000), &qword_3237E0);
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 976) + 32))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 968));
    static MonotonicTime.now.getter(v13);
    if (qword_31E740 != -1)
      swift_once(&qword_31E740, sub_1F08BC);
    v14 = sub_5C154(&qword_323800);
    sub_5240C(v14, (uint64_t)qword_346078);
    v15 = PageRenderEvent.id.getter();
    v17 = v16;
    PageRenderField<>.startTime(for:at:)(v15);
    swift_bridgeObjectRelease(v17);
    if (qword_31E748 != -1)
      swift_once(&qword_31E748, sub_1F08D4);
    v18 = *(_QWORD *)(v0 + 984);
    v19 = *(_QWORD *)(v0 + 976);
    v20 = *(_QWORD *)(v0 + 968);
    v21 = *(_QWORD *)(v0 + 936);
    v22 = *(_QWORD *)(v0 + 928);
    v23 = *(_QWORD *)(v0 + 920);
    sub_5240C(v14, (uint64_t)qword_346090);
    v24 = PageRenderEvent.id.getter();
    v26 = v25;
    PageRenderField<>.startTime(for:at:)(v24);
    v27 = swift_bridgeObjectRelease(v26);
    (*(void (**)(uint64_t, uint64_t, __n128))(v22 + 8))(v21, v23, v27);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  v142 = *(_QWORD *)(v0 + 1136);
  v28 = *(_QWORD *)(v0 + 1112);
  v122 = *(_BYTE *)(v0 + 59);
  v137 = *(_QWORD *)(v0 + 912);
  v29 = *(_QWORD *)(v0 + 800);
  v30 = *(_QWORD *)(v0 + 792);
  v31 = *(_QWORD *)(v0 + 784);
  v32 = *(_QWORD *)(v0 + 768);
  v33 = *(_QWORD *)(v0 + 736);
  v127 = *(uint64_t **)(v0 + 704);
  v132 = *(_QWORD *)(v0 + 664);
  v34 = *(uint64_t **)(v0 + 656);
  v36 = *v34;
  v35 = v34[1];
  v37 = swift_bridgeObjectRetain(v35);
  PageData.init(pageID:pageType:)(v36, v35, 0x6150736569726553, 0xEA00000000006567, v37);
  static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(0x736569726553, 0xE600000000000000, v36, v35, (char *)v34 + *(int *)(v28 + 36), v31, 1, 1);
  v38 = *(void **)(v29 + *(int *)(v30 + 20));
  v39 = *(_QWORD *)(v29 + *(int *)(v30 + 24));
  v150[0] = v122;
  v40 = v38;
  swift_bridgeObjectRetain(v39);
  sub_D9140(v145, (void (*)(uint64_t, uint64_t))v38, v39, v32, v33, v150, v137, v132, v127, v148, (uint64_t)v34);
  if (v142)
  {
    v138 = *(_QWORD *)(v0 + 1056);
    v128 = *(_QWORD *)(v0 + 1040);
    v133 = *(_QWORD *)(v0 + 1032);
    v118 = *(_QWORD *)(v0 + 864);
    v123 = *(_QWORD *)(v0 + 912);
    v110 = *(_QWORD *)(v0 + 800);
    v114 = *(_QWORD *)(v0 + 824);
    v102 = *(_QWORD *)(v0 + 1016);
    v106 = *(_QWORD *)(v0 + 784);
    v41 = *(_QWORD *)(v0 + 768);
    v42 = *(_QWORD *)(v0 + 752);
    v43 = *(_QWORD *)(v0 + 744);
    v44 = *(_QWORD *)(v0 + 736);
    v45 = *(_QWORD *)(v0 + 720);
    v46 = *(_QWORD *)(v0 + 712);
    swift_bridgeObjectRelease(v39);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    sub_DFA2C(v102);
    sub_5E09C(v106, &qword_3237B8);
    sub_6685C(v110, type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage);
    sub_5E09C(v114, &qword_3237D0);
    sub_6685C(v118, type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent);
    sub_5E09C(v123, &qword_320A40);
    sub_5E09C(v102, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v138, v133);
    sub_5E09C(v145, &qword_320910);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v148);
    v47 = *(_QWORD *)(v0 + 1048);
    v48 = *(_QWORD *)(v0 + 1024);
    v49 = *(_QWORD *)(v0 + 1016);
    v50 = *(_QWORD *)(v0 + 1008);
    v51 = *(_QWORD *)(v0 + 1000);
    v52 = *(_QWORD *)(v0 + 992);
    v53 = *(_QWORD *)(v0 + 984);
    v54 = *(_QWORD *)(v0 + 960);
    v55 = *(_QWORD *)(v0 + 936);
    v87 = *(_QWORD *)(v0 + 912);
    v89 = *(_QWORD *)(v0 + 904);
    v91 = *(_QWORD *)(v0 + 896);
    v93 = *(_QWORD *)(v0 + 888);
    v95 = *(_QWORD *)(v0 + 864);
    v97 = *(_QWORD *)(v0 + 848);
    v99 = *(_QWORD *)(v0 + 824);
    v103 = *(_QWORD *)(v0 + 816);
    v107 = *(_QWORD *)(v0 + 800);
    v111 = *(_QWORD *)(v0 + 784);
    v115 = *(_QWORD *)(v0 + 776);
    v119 = *(_QWORD *)(v0 + 768);
    v124 = *(_QWORD *)(v0 + 760);
    v129 = *(_QWORD *)(v0 + 736);
    v134 = *(_QWORD *)(v0 + 728);
    v139 = *(_QWORD *)(v0 + 704);
    v146 = *(_QWORD *)(v0 + 696);
    v149 = *(_QWORD *)(v0 + 688);
    swift_task_dealloc(*(_QWORD *)(v0 + 1056));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v103);
    swift_task_dealloc(v107);
    swift_task_dealloc(v111);
    swift_task_dealloc(v115);
    swift_task_dealloc(v119);
    swift_task_dealloc(v124);
    swift_task_dealloc(v129);
    swift_task_dealloc(v134);
    swift_task_dealloc(v139);
    swift_task_dealloc(v146);
    swift_task_dealloc(v149);
    v56 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v57 = *(_QWORD *)(v0 + 800);
    v58 = *(_QWORD *)(v0 + 704);
    v59 = *(_QWORD *)(v0 + 696);
    v60 = *(_QWORD *)(v0 + 672);
    swift_bridgeObjectRelease(v39);

    v61 = *(_QWORD *)(v57 + *(int *)(v60 + 52));
    v62 = *(_QWORD *)(v61 + 16);
    sub_5E11C(v58, v59, type metadata accessor for Page);
    if (v62)
    {
      v63 = (_QWORD *)(*(_QWORD *)(v0 + 696) + *(int *)(v60 + 52));
      swift_bridgeObjectRetain_n(v61, 2);
      sub_E00C8(v61, (uint64_t (*)(void))sub_572A8, type metadata accessor for Shelf);
      v64 = *v63;
      swift_bridgeObjectRetain(*v63);
      v66 = sub_DFE1C(v65);
      swift_bridgeObjectRelease_n(v64, 2);
      swift_bridgeObjectRelease(v61);
      *v63 = v66;
    }
    v143 = *(_QWORD *)(v0 + 1056);
    v135 = *(_QWORD *)(v0 + 1040);
    v140 = *(_QWORD *)(v0 + 1032);
    v125 = *(_QWORD *)(v0 + 864);
    v130 = *(_QWORD *)(v0 + 912);
    v116 = *(_QWORD *)(v0 + 800);
    v120 = *(_QWORD *)(v0 + 824);
    v108 = *(_QWORD *)(v0 + 1016);
    v112 = *(_QWORD *)(v0 + 784);
    v67 = *(_QWORD *)(v0 + 768);
    v68 = *(_QWORD *)(v0 + 752);
    v69 = *(_QWORD *)(v0 + 744);
    v70 = *(_QWORD *)(v0 + 736);
    v71 = *(_QWORD *)(v0 + 720);
    v72 = *(_QWORD *)(v0 + 712);
    v73 = *(_QWORD *)(v0 + 704);
    v74 = *(_QWORD *)(v0 + 696);
    v100 = *(_QWORD *)(v0 + 680);
    v104 = *(_QWORD *)(v0 + 672);
    v75 = *(_QWORD *)(v0 + 648);
    sub_6685C(v73, type metadata accessor for Page);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    sub_5E160(v74, v73, type metadata accessor for Page);
    sub_5E160(v73, v75, type metadata accessor for Page);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v75, 0, 1, v104);
    sub_DFA2C(v108);
    sub_5E09C(v112, &qword_3237B8);
    sub_6685C(v116, type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage);
    sub_5E09C(v120, &qword_3237D0);
    sub_6685C(v125, type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent);
    sub_5E09C(v130, &qword_320A40);
    sub_5E09C(v108, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v143, v140);
    sub_5E09C(v145, &qword_320910);
    v76 = *(_QWORD *)(v0 + 1056);
    v77 = *(_QWORD *)(v0 + 1048);
    v78 = *(_QWORD *)(v0 + 1024);
    v79 = *(_QWORD *)(v0 + 1016);
    v80 = *(_QWORD *)(v0 + 1008);
    v81 = *(_QWORD *)(v0 + 1000);
    v82 = *(_QWORD *)(v0 + 992);
    v83 = *(_QWORD *)(v0 + 984);
    v84 = *(_QWORD *)(v0 + 960);
    v86 = *(_QWORD *)(v0 + 936);
    v88 = *(_QWORD *)(v0 + 912);
    v90 = *(_QWORD *)(v0 + 904);
    v92 = *(_QWORD *)(v0 + 896);
    v94 = *(_QWORD *)(v0 + 888);
    v96 = *(_QWORD *)(v0 + 864);
    v98 = *(_QWORD *)(v0 + 848);
    v101 = *(_QWORD *)(v0 + 824);
    v105 = *(_QWORD *)(v0 + 816);
    v109 = *(_QWORD *)(v0 + 800);
    v113 = *(_QWORD *)(v0 + 784);
    v117 = *(_QWORD *)(v0 + 776);
    v121 = *(_QWORD *)(v0 + 768);
    v126 = *(_QWORD *)(v0 + 760);
    v131 = *(_QWORD *)(v0 + 736);
    v136 = *(_QWORD *)(v0 + 728);
    v141 = *(_QWORD *)(v0 + 704);
    v144 = *(_QWORD *)(v0 + 696);
    v147 = *(_QWORD *)(v0 + 688);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v148);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v105);
    swift_task_dealloc(v109);
    swift_task_dealloc(v113);
    swift_task_dealloc(v117);
    swift_task_dealloc(v121);
    swift_task_dealloc(v126);
    swift_task_dealloc(v131);
    swift_task_dealloc(v136);
    swift_task_dealloc(v141);
    swift_task_dealloc(v144);
    swift_task_dealloc(v147);
    v56 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v56();
}

uint64_t sub_DF004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(_QWORD *)(v0 + 1024);
  v3 = *(_QWORD *)(v0 + 1016);
  v4 = *(_QWORD *)(v0 + 1008);
  v5 = *(_QWORD *)(v0 + 1000);
  v6 = *(_QWORD *)(v0 + 992);
  v7 = *(_QWORD *)(v0 + 984);
  v8 = *(_QWORD *)(v0 + 960);
  v9 = *(_QWORD *)(v0 + 936);
  v11 = *(_QWORD *)(v0 + 912);
  v12 = *(_QWORD *)(v0 + 904);
  v13 = *(_QWORD *)(v0 + 896);
  v14 = *(_QWORD *)(v0 + 888);
  v15 = *(_QWORD *)(v0 + 864);
  v16 = *(_QWORD *)(v0 + 848);
  v17 = *(_QWORD *)(v0 + 824);
  v18 = *(_QWORD *)(v0 + 816);
  v19 = *(_QWORD *)(v0 + 800);
  v20 = *(_QWORD *)(v0 + 784);
  v21 = *(_QWORD *)(v0 + 776);
  v22 = *(_QWORD *)(v0 + 768);
  v23 = *(_QWORD *)(v0 + 760);
  v24 = *(_QWORD *)(v0 + 736);
  v25 = *(_QWORD *)(v0 + 728);
  v26 = *(_QWORD *)(v0 + 704);
  v27 = *(_QWORD *)(v0 + 696);
  v28 = *(_QWORD *)(v0 + 688);
  swift_task_dealloc(*(_QWORD *)(v0 + 1056));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_DF1CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98[17];

  if (!*(_QWORD *)(*(_QWORD *)(v1 + 656) + *(int *)(*(_QWORD *)(v1 + 1112) + 24) + 8))
    goto LABEL_5;
  sub_5E1A4(v1 + 64, v1 + 384, &qword_320910);
  if (!*(_QWORD *)(v1 + 408))
  {
    a1 = sub_5E09C(v1 + 384, &qword_320910);
LABEL_5:
    v19 = *(_QWORD *)(v1 + 1056);
    v20 = *(_QWORD *)(v1 + 1040);
    v21 = *(_QWORD *)(v1 + 1032);
    v22 = *(_QWORD *)(v1 + 1016);
    v23 = *(_QWORD *)(v1 + 912);
    v24 = *(_QWORD *)(v1 + 864);
    swift_willThrow(a1);
    sub_6685C(v24, type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent);
    sub_5E09C(v23, &qword_320A40);
    sub_5E09C(v22, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    sub_5E09C(v1 + 64, &qword_320910);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 184));
    v25 = *(_QWORD *)(v1 + 1048);
    v26 = *(_QWORD *)(v1 + 1024);
    v27 = *(_QWORD *)(v1 + 1016);
    v28 = *(_QWORD *)(v1 + 1008);
    v29 = *(_QWORD *)(v1 + 1000);
    v30 = *(_QWORD *)(v1 + 992);
    v31 = *(_QWORD *)(v1 + 984);
    v32 = *(_QWORD *)(v1 + 960);
    v33 = *(_QWORD *)(v1 + 936);
    v48 = *(_QWORD *)(v1 + 912);
    v50 = *(_QWORD *)(v1 + 904);
    v52 = *(_QWORD *)(v1 + 896);
    v54 = *(_QWORD *)(v1 + 888);
    v56 = *(_QWORD *)(v1 + 864);
    v58 = *(_QWORD *)(v1 + 848);
    v61 = *(_QWORD *)(v1 + 824);
    v64 = *(_QWORD *)(v1 + 816);
    v68 = *(_QWORD *)(v1 + 800);
    v71 = *(_QWORD *)(v1 + 784);
    v75 = *(_QWORD *)(v1 + 776);
    v79 = *(_QWORD *)(v1 + 768);
    v83 = *(_QWORD *)(v1 + 760);
    v87 = *(_QWORD *)(v1 + 736);
    v91 = *(_QWORD *)(v1 + 728);
    v93 = *(_QWORD *)(v1 + 704);
    v95 = *(_QWORD *)(v1 + 696);
    v97 = *(_QWORD *)(v1 + 688);
    swift_task_dealloc(*(_QWORD *)(v1 + 1056));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    swift_task_dealloc(v75);
    swift_task_dealloc(v79);
    swift_task_dealloc(v83);
    swift_task_dealloc(v87);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    v45 = *(uint64_t (**)(void))(v1 + 8);
    return v45();
  }
  v2 = *(_QWORD *)(v1 + 1112);
  v77 = *(_BYTE *)(v1 + 59);
  v89 = *(_QWORD *)(v1 + 912);
  v3 = *(_QWORD *)(v1 + 776);
  v73 = *(_QWORD *)(v1 + 760);
  v4 = *(_QWORD *)(v1 + 728);
  v81 = *(uint64_t **)(v1 + 688);
  v85 = *(_QWORD *)(v1 + 664);
  v5 = *(uint64_t **)(v1 + 656);
  sub_5DC98((__int128 *)(v1 + 384), v1 + 344);
  v6 = *v5;
  v7 = v5[1];
  v8 = swift_bridgeObjectRetain(v7);
  PageData.init(pageID:pageType:)(v6, v7, 0x6150736569726553, 0xEA00000000006567, v8);
  v9 = (char *)v5 + *(int *)(v2 + 36);
  v10 = type metadata accessor for JSNetworkPerformanceMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v3, 1, 1, v10);
  static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(0x736569726553, 0xE600000000000000, v6, v7, v9, v3, 1, 1);
  sub_5E09C(v3, &qword_3237B8);
  sub_5E0D8(v1 + 344, v1 + 424);
  v11 = *(void **)((char *)v5 + *(int *)(v2 + 32));
  v98[0] = v77;
  v12 = v11;
  sub_D9140(v1 + 424, (void (*)(uint64_t, uint64_t))v11, 0, v73, v4, v98, v89, v85, v81, (_QWORD *)(v1 + 184), (uint64_t)v5);
  v13 = *(_QWORD *)(v1 + 1136);
  v90 = *(_QWORD *)(v1 + 1056);
  v82 = *(_QWORD *)(v1 + 1040);
  v86 = *(_QWORD *)(v1 + 1032);
  v74 = *(_QWORD *)(v1 + 912);
  v78 = *(_QWORD *)(v1 + 1016);
  v67 = *(_QWORD *)(v1 + 760);
  v70 = *(_QWORD *)(v1 + 864);
  v14 = *(_QWORD *)(v1 + 752);
  v15 = *(_QWORD *)(v1 + 744);
  v16 = *(_QWORD *)(v1 + 728);
  v17 = *(_QWORD *)(v1 + 720);
  v18 = *(_QWORD *)(v1 + 712);
  v59 = *(_QWORD *)(v1 + 688);
  v62 = *(_QWORD *)(v1 + 680);
  v65 = *(_QWORD *)(v1 + 672);
  v35 = *(_QWORD *)(v1 + 648);

  swift_errorRelease(v13);
  sub_5E09C(v1 + 424, &qword_320910);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v67, v15);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 344));
  sub_6685C(v70, type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent);
  sub_5E09C(v74, &qword_320A40);
  sub_5E09C(v78, &qword_3237E0);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v90, v86);
  sub_5E09C(v1 + 64, &qword_320910);
  sub_5E160(v59, v35, type metadata accessor for Page);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v35, 0, 1, v65);
  v36 = *(_QWORD *)(v1 + 1056);
  v37 = *(_QWORD *)(v1 + 1048);
  v38 = *(_QWORD *)(v1 + 1024);
  v39 = *(_QWORD *)(v1 + 1016);
  v40 = *(_QWORD *)(v1 + 1008);
  v41 = *(_QWORD *)(v1 + 1000);
  v42 = *(_QWORD *)(v1 + 992);
  v43 = *(_QWORD *)(v1 + 984);
  v44 = *(_QWORD *)(v1 + 960);
  v46 = *(_QWORD *)(v1 + 936);
  v47 = *(_QWORD *)(v1 + 912);
  v49 = *(_QWORD *)(v1 + 904);
  v51 = *(_QWORD *)(v1 + 896);
  v53 = *(_QWORD *)(v1 + 888);
  v55 = *(_QWORD *)(v1 + 864);
  v57 = *(_QWORD *)(v1 + 848);
  v60 = *(_QWORD *)(v1 + 824);
  v63 = *(_QWORD *)(v1 + 816);
  v66 = *(_QWORD *)(v1 + 800);
  v69 = *(_QWORD *)(v1 + 784);
  v72 = *(_QWORD *)(v1 + 776);
  v76 = *(_QWORD *)(v1 + 768);
  v80 = *(_QWORD *)(v1 + 760);
  v84 = *(_QWORD *)(v1 + 736);
  v88 = *(_QWORD *)(v1 + 728);
  v92 = *(_QWORD *)(v1 + 704);
  v94 = *(_QWORD *)(v1 + 696);
  v96 = *(_QWORD *)(v1 + 688);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + 184));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v60);
  swift_task_dealloc(v63);
  swift_task_dealloc(v66);
  swift_task_dealloc(v69);
  swift_task_dealloc(v72);
  swift_task_dealloc(v76);
  swift_task_dealloc(v80);
  swift_task_dealloc(v84);
  swift_task_dealloc(v88);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v96);
  v45 = *(uint64_t (**)(void))(v1 + 8);
  return v45();
}

uint64_t sub_DF8F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_DF9BC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return v2 & 1;
  if (*(_BYTE *)(a2 + 32) == (result & 1))
    return 1;
  if (v2 == 1)
    return 0;
  v3 = 33;
  while (1)
  {
    v4 = v3 - 31;
    if (__OFADD__(v3 - 32, 1))
      break;
    v5 = *(_BYTE *)(a2 + v3) ^ result;
    if ((v5 & 1) != 0)
    {
      ++v3;
      if (v4 != v2)
        continue;
    }
    LOBYTE(v2) = v5 ^ 1;
    return v2 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_DFA2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;

  v2 = type metadata accessor for MonotonicTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_3237E0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PageRenderEvent(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(a1, (uint64_t)v9, &qword_3237E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_5E09C((uint64_t)v9, &qword_3237E0);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  static MonotonicTime.now.getter(v15);
  if (qword_31E740 != -1)
    swift_once(&qword_31E740, sub_1F08BC);
  v16 = sub_5C154(&qword_323800);
  sub_5240C(v16, (uint64_t)qword_346078);
  v17 = PageRenderEvent.id.getter();
  v19 = v18;
  PageRenderField<>.endTime(for:at:)(v17);
  swift_bridgeObjectRelease(v19);
  if (qword_31E748 != -1)
    swift_once(&qword_31E748, sub_1F08D4);
  sub_5240C(v16, (uint64_t)qword_346090);
  v20 = PageRenderEvent.id.getter();
  v22 = v21;
  PageRenderField<>.endTime(for:at:)(v20);
  v23 = swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage(uint64_t a1)
{
  return sub_64960(a1, qword_323928, (uint64_t)&nominal type descriptor for SeriesRoomPageIntentImplementation.SeriesRoomPage);
}

uint64_t type metadata accessor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_323888, (uint64_t)&nominal type descriptor for SeriesRoomPageIntentImplementation.JSSeriesRoomPageIntent);
}

unint64_t sub_DFC80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_31FFD0;
  if (!qword_31FFD0)
  {
    v1 = objc_opt_self(JSABridge);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_31FFD0);
  }
  return result;
}

uint64_t sub_DFCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_3237CC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_64780;
  return SeriesRoomPageIntentImplementation.perform(_:objectGraph:)(a1, a2, a3);
}

unint64_t BATracker.jsRepresentation(in:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v4;
  unint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", v2, a1);
  a2[3] = sub_5C154(&qword_323810);
  result = sub_E0584();
  a2[4] = result;
  *a2 = v4;
  return result;
}

unint64_t sub_DFDA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  id v4;
  unint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", *v2, a1);
  a2[3] = sub_5C154(&qword_323810);
  result = sub_E0584();
  a2[4] = result;
  *a2 = v4;
  return result;
}

_QWORD *sub_DFE1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;

  v2 = type metadata accessor for Shelf(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v32 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_3239A8);
  __chkstk_darwin(v5);
  v31 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v26 - v8);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v26 - v11);
  v33 = &_swiftEmptyArrayStorage;
  sub_20C82C(0, 0, 0);
  v13 = v33;
  v14 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v30 = v14;
  v27 = a1;
  if (v14)
  {
    v15 = 0;
    v16 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v28 = *(_QWORD *)(v3 + 72);
    v29 = v16;
    v17 = a1 + v16;
    v18 = v32;
    do
    {
      v19 = (uint64_t)&v31[*(int *)(v5 + 48)];
      sub_5E11C(v17, v19, type metadata accessor for Shelf);
      v20 = (uint64_t)v9 + *(int *)(v5 + 48);
      *v9 = v15;
      sub_5E160(v19, v20, type metadata accessor for Shelf);
      sub_66F14((uint64_t)v9, (uint64_t)v12, &qword_3239A8);
      Shelf.withMetricsIndex(_:)(*v12, v18);
      sub_5E09C((uint64_t)v12, &qword_3239A8);
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      {
        sub_20C82C(0, v13[2] + 1, 1);
        v13 = v33;
      }
      v22 = v13[2];
      v21 = v13[3];
      if (v22 >= v21 >> 1)
      {
        sub_20C82C(v21 > 1, v22 + 1, 1);
        v13 = v33;
      }
      ++v15;
      v13[2] = v22 + 1;
      v23 = v28;
      v24 = (uint64_t)v13 + v29 + v22 * v28;
      v18 = v32;
      sub_5E160(v32, v24, type metadata accessor for Shelf);
      v17 += v23;
    }
    while (v30 != v15);
  }
  swift_bridgeObjectRelease(v27);
  return v13;
}

uint64_t sub_E008C(uint64_t a1)
{
  return sub_E00C8(a1, (uint64_t (*)(void))sub_56DD8, (uint64_t (*)(_QWORD))&type metadata accessor for ToolbarActionMenuItem);
}

void sub_E00A0(uint64_t a1)
{
  sub_E03CC(a1, (uint64_t (*)(void))sub_57168, &qword_31EF60);
}

uint64_t sub_E00B4(uint64_t a1)
{
  return sub_E00C8(a1, (uint64_t (*)(void))sub_572A8, type metadata accessor for Shelf);
}

uint64_t sub_E00C8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  char v27;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3)
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  v12 = (*(_QWORD *)(v5 + 24) >> 1) - v11;
  v13 = a3(0);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v5 + v15 + v16 * v11;
  v18 = a1 + v15;
  v19 = v16 * v10;
  v20 = v17 + v19;
  v21 = v18 + v19;
  if (v18 < v20 && v17 < v21)
    goto LABEL_21;
  swift_arrayInitWithCopy(v17);
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v10);
  v25 = v23 + v10;
  if (!v24)
  {
    *(_QWORD *)(v5 + 16) = v25;
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v27 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v27, 1092, 0);
  __break(1u);
  return result;
}

void sub_E0244(uint64_t a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_572BC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[40 * v9 + 32];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  sub_5C154(&qword_31EF38);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = *((_QWORD *)v3 + 2);
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    *((_QWORD *)v3 + 2) = v14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

void sub_E03B8(uint64_t a1)
{
  sub_E03CC(a1, (uint64_t (*)(void))sub_5700C, &qword_31F110);
}

void sub_E03CC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  if ((*(_QWORD *)(v5 + 24) >> 1) - v10 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v5 + 40 * v10 + 32;
  if (a1 + 32 < v11 + 40 * v4 && v11 < a1 + 32 + 40 * v4)
    goto LABEL_21;
  sub_5C154(a3);
  swift_arrayInitWithCopy(v11);
  if (!v4)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return;
  }
  v13 = *(_QWORD *)(v5 + 16);
  v14 = __OFADD__(v13, v4);
  v15 = v13 + v4;
  if (!v14)
  {
    *(_QWORD *)(v5 + 16) = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

unint64_t sub_E0540()
{
  unint64_t result;

  result = qword_323808;
  if (!qword_323808)
  {
    result = swift_getWitnessTable(&unk_266D10, &type metadata for BooksPagePreloadStatus);
    atomic_store(result, (unint64_t *)&qword_323808);
  }
  return result;
}

unint64_t sub_E0584()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323818;
  if (!qword_323818)
  {
    v1 = sub_667D0(&qword_323810);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_323818);
  }
  return result;
}

uint64_t sub_E05E0()
{
  return sub_648E0((unint64_t *)&unk_323820, type metadata accessor for SeriesRoomPageIntent, (uint64_t)&protocol conformance descriptor for SeriesRoomPageIntent);
}

uint64_t sub_E060C()
{
  return sub_648E0(&qword_31FFA0, type metadata accessor for SeriesRoomPageIntent, (uint64_t)&protocol conformance descriptor for SeriesRoomPageIntent);
}

ValueMetadata *type metadata accessor for SeriesRoomPageIntentImplementation()
{
  return &type metadata for SeriesRoomPageIntentImplementation;
}

uint64_t *sub_E0648(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SeriesType(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    v14 = a3[6];
    v15 = a3[7];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v16;
    v17 = (char *)v4 + v15;
    v18 = (char *)a2 + v15;
    v19 = type metadata accessor for SeriesListSortOrder(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
    v22 = swift_bridgeObjectRetain(v16);
    if (v21(v18, 1, v19, v22))
    {
      v23 = sub_5C154(&qword_320A40);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return v4;
}

uint64_t sub_E0788(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for SeriesType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v6 = a1 + a2[7];
  v7 = type metadata accessor for SeriesListSortOrder(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

_QWORD *sub_E0834(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SeriesType(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = v15;
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  v18 = type metadata accessor for SeriesListSortOrder(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v19 + 48);
  v21 = swift_bridgeObjectRetain(v15);
  if (v20(v17, 1, v18, v21))
  {
    v22 = sub_5C154(&qword_320A40);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

_QWORD *sub_E0948(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SeriesType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = *(_QWORD *)((char *)a1 + v12);
  v14 = *(_QWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for SeriesListSortOrder(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v10) = v20(v16, 1, v18);
  v21 = v20(v17, 1, v18);
  if (!(_DWORD)v10)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_5C154(&qword_320A40);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

_OWORD *sub_E0AB8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SeriesType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SeriesListSortOrder(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_5C154(&qword_320A40);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

_QWORD *sub_E0BB0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SeriesType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for SeriesListSortOrder(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_5C154(&qword_320A40);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_E0D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E0D14);
}

uint64_t sub_E0D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesType(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_320A40);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_E0DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E0DC4);
}

uint64_t sub_E0DC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesType(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_320A40);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_E0E64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_25D738;
  v2 = type metadata accessor for SeriesType(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_25D750;
    sub_E0EFC(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_E0EFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_323898)
  {
    v2 = type metadata accessor for SeriesListSortOrder(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_323898);
  }
}

_QWORD *sub_E0F50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  char *v70;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = (int *)type metadata accessor for Page(0);
    v8 = v7[5];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v6);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_5C154(&qword_3217B8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = v7[6];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)((char *)a2 + v17, 1, v11))
    {
      v20 = sub_5C154(&qword_3217B8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
    }
    *((_BYTE *)v4 + v7[7]) = *((_BYTE *)a2 + v7[7]);
    *((_BYTE *)v4 + v7[8]) = *((_BYTE *)a2 + v7[8]);
    v21 = v7[9];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for ToolbarPrincipalType(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_5C154(&qword_322F98);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = v7[10];
    v28 = *(_QWORD *)((char *)a2 + v27);
    *(_QWORD *)((char *)v4 + v27) = v28;
    v29 = v7[11];
    v30 = *(_QWORD *)((char *)a2 + v29);
    *(_QWORD *)((char *)v4 + v29) = v30;
    *((_BYTE *)v4 + v7[12]) = *((_BYTE *)a2 + v7[12]);
    v31 = v7[13];
    v32 = *(_QWORD *)((char *)a2 + v31);
    *(_QWORD *)((char *)v4 + v31) = v32;
    v33 = v7[14];
    v34 = (_QWORD *)((char *)v4 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = v7[15];
    v70 = (char *)v4 + v37;
    v38 = (char *)a2 + v37;
    v39 = type metadata accessor for PageData(0);
    v40 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v39 - 8) + 16);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v32);
    v41 = swift_bridgeObjectRetain(v36);
    v40(v70, v38, v39, v41);
    v42 = v7[16];
    v43 = *(_QWORD *)((char *)a2 + v42);
    *(_QWORD *)((char *)v4 + v42) = v43;
    v44 = v7[17];
    v45 = (char *)v4 + v44;
    v46 = (char *)a2 + v44;
    v47 = type metadata accessor for PageMetrics(0);
    v48 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
    v49 = swift_bridgeObjectRetain(v43);
    v48(v45, v46, v47, v49);
    *((_BYTE *)v4 + v7[18]) = *((_BYTE *)a2 + v7[18]);
    v50 = v7[19];
    v51 = *(_QWORD *)((char *)a2 + v50);
    *(_QWORD *)((char *)v4 + v50) = v51;
    v52 = v7[20];
    v53 = *(_QWORD *)((char *)a2 + v52);
    *(_QWORD *)((char *)v4 + v52) = v53;
    *((_BYTE *)v4 + v7[21]) = *((_BYTE *)a2 + v7[21]);
    v54 = v7[22];
    v55 = (_QWORD *)((char *)v4 + v54);
    v56 = (_QWORD *)((char *)a2 + v54);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = v7[23];
    v59 = (char *)v4 + v58;
    v60 = (char *)a2 + v58;
    v61 = *(_QWORD *)((char *)a2 + v58 + 8);
    swift_bridgeObjectRetain(v51);
    swift_retain(v53);
    swift_bridgeObjectRetain(v57);
    if (v61)
    {
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = v61;
      *((_OWORD *)v59 + 1) = *((_OWORD *)v60 + 1);
      v62 = *((_QWORD *)v60 + 4);
      *((_QWORD *)v59 + 4) = v62;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v62);
    }
    else
    {
      v63 = *((_OWORD *)v60 + 1);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *((_OWORD *)v59 + 1) = v63;
      *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
    }
    v64 = *(int *)(a3 + 20);
    v65 = *(int *)(a3 + 24);
    v66 = *(void **)((char *)a2 + v64);
    *(_QWORD *)((char *)v4 + v64) = v66;
    v67 = *(_QWORD *)((char *)a2 + v65);
    *(_QWORD *)((char *)v4 + v65) = v67;
    v68 = v66;
    swift_bridgeObjectRetain(v67);
  }
  return v4;
}

double sub_E1320(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (int *)type metadata accessor for Page(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[6];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  v10 = a1 + v4[9];
  v11 = type metadata accessor for ToolbarPrincipalType(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[14] + 8));
  v13 = a1 + v4[15];
  v14 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[16]));
  v15 = a1 + v4[17];
  v16 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[19]));
  swift_release(*(_QWORD *)(a1 + v4[20]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[22] + 8));
  v17 = a1 + v4[23];
  v18 = *(_QWORD *)(v17 + 8);
  if (v18)
  {
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + 32));
  }

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24))).n128_u64[0];
  return result;
}

_QWORD *sub_E14F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t, __n128);
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t, __n128);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  id v66;
  char *v68;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (int *)type metadata accessor for Page(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v5);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_5C154(&qword_3217B8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = v6[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v12)((char *)a2 + v15, 1, v10))
  {
    v18 = sub_5C154(&qword_3217B8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v19 = v6[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for ToolbarPrincipalType(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_5C154(&qword_322F98);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = v6[10];
  v26 = *(_QWORD *)((char *)a2 + v25);
  *(_QWORD *)((char *)a1 + v25) = v26;
  v27 = v6[11];
  v28 = *(_QWORD *)((char *)a2 + v27);
  *(_QWORD *)((char *)a1 + v27) = v28;
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  v29 = v6[13];
  v30 = *(_QWORD *)((char *)a2 + v29);
  *(_QWORD *)((char *)a1 + v29) = v30;
  v31 = v6[14];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = v6[15];
  v68 = (char *)a1 + v35;
  v36 = (char *)a2 + v35;
  v37 = type metadata accessor for PageData(0);
  v38 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v37 - 8) + 16);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  v39 = swift_bridgeObjectRetain(v34);
  v38(v68, v36, v37, v39);
  v40 = v6[16];
  v41 = *(_QWORD *)((char *)a2 + v40);
  *(_QWORD *)((char *)a1 + v40) = v41;
  v42 = v6[17];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for PageMetrics(0);
  v46 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v45 - 8) + 16);
  v47 = swift_bridgeObjectRetain(v41);
  v46(v43, v44, v45, v47);
  *((_BYTE *)a1 + v6[18]) = *((_BYTE *)a2 + v6[18]);
  v48 = v6[19];
  v49 = *(_QWORD *)((char *)a2 + v48);
  *(_QWORD *)((char *)a1 + v48) = v49;
  v50 = v6[20];
  v51 = *(_QWORD *)((char *)a2 + v50);
  *(_QWORD *)((char *)a1 + v50) = v51;
  *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
  v52 = v6[22];
  v53 = (_QWORD *)((char *)a1 + v52);
  v54 = (_QWORD *)((char *)a2 + v52);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = v6[23];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = *(_QWORD *)((char *)a2 + v56 + 8);
  swift_bridgeObjectRetain(v49);
  swift_retain(v51);
  swift_bridgeObjectRetain(v55);
  if (v59)
  {
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    *((_OWORD *)v57 + 1) = *((_OWORD *)v58 + 1);
    v60 = *((_QWORD *)v58 + 4);
    *((_QWORD *)v57 + 4) = v60;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
  }
  else
  {
    v61 = *((_OWORD *)v58 + 1);
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *((_OWORD *)v57 + 1) = v61;
    *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
  }
  v62 = *(int *)(a3 + 20);
  v63 = *(int *)(a3 + 24);
  v64 = *(void **)((char *)a2 + v62);
  *(_QWORD *)((char *)a1 + v62) = v64;
  v65 = *(_QWORD *)((char *)a2 + v63);
  *(_QWORD *)((char *)a1 + v63) = v65;
  v66 = v64;
  swift_bridgeObjectRetain(v65);
  return a1;
}

char *sub_E189C(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for Page(0);
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for LocalizerRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_5C154(&qword_3217B8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = v8[6];
  v19 = &a1[v18];
  v20 = (char *)a2 + v18;
  v21 = v14(&a1[v18], 1, v12);
  v22 = v14(v20, 1, v12);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v20, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
LABEL_12:
    v23 = sub_5C154(&qword_3217B8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v19, v20, v12);
LABEL_13:
  a1[v8[7]] = *((_BYTE *)a2 + v8[7]);
  a1[v8[8]] = *((_BYTE *)a2 + v8[8]);
  v24 = v8[9];
  v25 = &a1[v24];
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for ToolbarPrincipalType(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    v32 = sub_5C154(&qword_322F98);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_19:
  v33 = v8[10];
  v34 = *(_QWORD *)((char *)a2 + v33);
  v35 = *(_QWORD *)&a1[v33];
  *(_QWORD *)&a1[v33] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = v8[11];
  v37 = *(_QWORD *)((char *)a2 + v36);
  v38 = *(_QWORD *)&a1[v36];
  *(_QWORD *)&a1[v36] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  a1[v8[12]] = *((_BYTE *)a2 + v8[12]);
  v39 = v8[13];
  v40 = *(_QWORD *)((char *)a2 + v39);
  v41 = *(_QWORD *)&a1[v39];
  *(_QWORD *)&a1[v39] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = v8[14];
  v43 = &a1[v42];
  v44 = (_QWORD *)((char *)a2 + v42);
  *(_QWORD *)v43 = *v44;
  v45 = v44[1];
  v46 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v8[15];
  v48 = &a1[v47];
  v49 = (char *)a2 + v47;
  v50 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  v51 = v8[16];
  v52 = *(_QWORD *)((char *)a2 + v51);
  v53 = *(_QWORD *)&a1[v51];
  *(_QWORD *)&a1[v51] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v54 = v8[17];
  v55 = &a1[v54];
  v56 = (char *)a2 + v54;
  v57 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 24))(v55, v56, v57);
  a1[v8[18]] = *((_BYTE *)a2 + v8[18]);
  v58 = v8[19];
  v59 = *(_QWORD *)((char *)a2 + v58);
  v60 = *(_QWORD *)&a1[v58];
  *(_QWORD *)&a1[v58] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v8[20];
  v62 = *(_QWORD *)((char *)a2 + v61);
  v63 = *(_QWORD *)&a1[v61];
  *(_QWORD *)&a1[v61] = v62;
  swift_retain(v62);
  swift_release(v63);
  a1[v8[21]] = *((_BYTE *)a2 + v8[21]);
  v64 = v8[22];
  v65 = &a1[v64];
  v66 = (_QWORD *)((char *)a2 + v64);
  *(_QWORD *)v65 = *v66;
  v67 = v66[1];
  v68 = *((_QWORD *)v65 + 1);
  *((_QWORD *)v65 + 1) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  v69 = v8[23];
  v70 = &a1[v69];
  v71 = (_QWORD *)((char *)a2 + v69);
  v72 = *(_QWORD *)&a1[v69 + 8];
  v73 = *(_QWORD *)((char *)a2 + v69 + 8);
  if (v72)
  {
    if (v73)
    {
      *(_QWORD *)v70 = *v71;
      v74 = v71[1];
      *((_QWORD *)v70 + 1) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v72);
      *((_QWORD *)v70 + 2) = v71[2];
      *((_QWORD *)v70 + 3) = v71[3];
      v75 = v71[4];
      v76 = *((_QWORD *)v70 + 4);
      *((_QWORD *)v70 + 4) = v75;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRelease(v76);
    }
    else
    {
      sub_984B0((uint64_t)v70);
      v79 = v71[4];
      v80 = *((_OWORD *)v71 + 1);
      *(_OWORD *)v70 = *(_OWORD *)v71;
      *((_OWORD *)v70 + 1) = v80;
      *((_QWORD *)v70 + 4) = v79;
    }
  }
  else if (v73)
  {
    *(_QWORD *)v70 = *v71;
    v77 = v71[1];
    *((_QWORD *)v70 + 1) = v77;
    *((_QWORD *)v70 + 2) = v71[2];
    *((_QWORD *)v70 + 3) = v71[3];
    v78 = v71[4];
    *((_QWORD *)v70 + 4) = v78;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v78);
  }
  else
  {
    v81 = *(_OWORD *)v71;
    v82 = *((_OWORD *)v71 + 1);
    *((_QWORD *)v70 + 4) = v71[4];
    *(_OWORD *)v70 = v81;
    *((_OWORD *)v70 + 1) = v82;
  }
  v83 = *(int *)(a3 + 20);
  v84 = *(void **)&a1[v83];
  v85 = *(void **)((char *)a2 + v83);
  *(_QWORD *)&a1[v83] = v85;
  v86 = v85;

  v87 = *(int *)(a3 + 24);
  v88 = *(_QWORD *)((char *)a2 + v87);
  v89 = *(_QWORD *)&a1[v87];
  *(_QWORD *)&a1[v87] = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease(v89);
  return a1;
}

_OWORD *sub_E1DE8(_OWORD *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;

  *a1 = *(_OWORD *)a2;
  v6 = (int *)type metadata accessor for Page(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_5C154(&qword_3217B8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[6];
  v15 = (char *)a1 + v14;
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v10))
  {
    v17 = sub_5C154(&qword_3217B8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *((_BYTE *)a1 + v6[7]) = a2[v6[7]];
  *((_BYTE *)a1 + v6[8]) = a2[v6[8]];
  v18 = v6[9];
  v19 = (char *)a1 + v18;
  v20 = &a2[v18];
  v21 = type metadata accessor for ToolbarPrincipalType(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_5C154(&qword_322F98);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)((char *)a1 + v6[10]) = *(_QWORD *)&a2[v6[10]];
  *(_QWORD *)((char *)a1 + v6[11]) = *(_QWORD *)&a2[v6[11]];
  *((_BYTE *)a1 + v6[12]) = a2[v6[12]];
  *(_QWORD *)((char *)a1 + v6[13]) = *(_QWORD *)&a2[v6[13]];
  *(_OWORD *)((char *)a1 + v6[14]) = *(_OWORD *)&a2[v6[14]];
  v24 = v6[15];
  v25 = (char *)a1 + v24;
  v26 = &a2[v24];
  v27 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  *(_QWORD *)((char *)a1 + v6[16]) = *(_QWORD *)&a2[v6[16]];
  v28 = v6[17];
  v29 = (char *)a1 + v28;
  v30 = &a2[v28];
  v31 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  *((_BYTE *)a1 + v6[18]) = a2[v6[18]];
  *(_QWORD *)((char *)a1 + v6[19]) = *(_QWORD *)&a2[v6[19]];
  *(_QWORD *)((char *)a1 + v6[20]) = *(_QWORD *)&a2[v6[20]];
  *((_BYTE *)a1 + v6[21]) = a2[v6[21]];
  *(_OWORD *)((char *)a1 + v6[22]) = *(_OWORD *)&a2[v6[22]];
  v32 = v6[23];
  v33 = (char *)a1 + v32;
  v34 = &a2[v32];
  v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((_QWORD *)v33 + 4) = *((_QWORD *)v34 + 4);
  v36 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)&a2[v36];
  return a1;
}

char *sub_E20E0(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;

  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for Page(0);
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for LocalizerRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_5C154(&qword_3217B8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = v8[6];
  v19 = &a1[v18];
  v20 = (char *)a2 + v18;
  v21 = v14(&a1[v18], 1, v12);
  v22 = v14(v20, 1, v12);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v20, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
LABEL_12:
    v23 = sub_5C154(&qword_3217B8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v19, v20, v12);
LABEL_13:
  a1[v8[7]] = *((_BYTE *)a2 + v8[7]);
  a1[v8[8]] = *((_BYTE *)a2 + v8[8]);
  v24 = v8[9];
  v25 = &a1[v24];
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for ToolbarPrincipalType(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    v32 = sub_5C154(&qword_322F98);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_19:
  v33 = v8[10];
  v34 = *(_QWORD *)&a1[v33];
  *(_QWORD *)&a1[v33] = *(_QWORD *)((char *)a2 + v33);
  swift_bridgeObjectRelease(v34);
  v35 = v8[11];
  v36 = *(_QWORD *)&a1[v35];
  *(_QWORD *)&a1[v35] = *(_QWORD *)((char *)a2 + v35);
  swift_bridgeObjectRelease(v36);
  a1[v8[12]] = *((_BYTE *)a2 + v8[12]);
  v37 = v8[13];
  v38 = *(_QWORD *)&a1[v37];
  *(_QWORD *)&a1[v37] = *(_QWORD *)((char *)a2 + v37);
  swift_bridgeObjectRelease(v38);
  v39 = v8[14];
  v40 = &a1[v39];
  v41 = (_QWORD *)((char *)a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  v44 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease(v44);
  v45 = v8[15];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  v49 = v8[16];
  v50 = *(_QWORD *)&a1[v49];
  *(_QWORD *)&a1[v49] = *(_QWORD *)((char *)a2 + v49);
  swift_bridgeObjectRelease(v50);
  v51 = v8[17];
  v52 = &a1[v51];
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  a1[v8[18]] = *((_BYTE *)a2 + v8[18]);
  v55 = v8[19];
  v56 = *(_QWORD *)&a1[v55];
  *(_QWORD *)&a1[v55] = *(_QWORD *)((char *)a2 + v55);
  swift_bridgeObjectRelease(v56);
  v57 = v8[20];
  v58 = *(_QWORD *)&a1[v57];
  *(_QWORD *)&a1[v57] = *(_QWORD *)((char *)a2 + v57);
  swift_release(v58);
  a1[v8[21]] = *((_BYTE *)a2 + v8[21]);
  v59 = v8[22];
  v60 = &a1[v59];
  v61 = (_QWORD *)((char *)a2 + v59);
  v63 = *v61;
  v62 = v61[1];
  v64 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v60 = v63;
  *((_QWORD *)v60 + 1) = v62;
  swift_bridgeObjectRelease(v64);
  v65 = v8[23];
  v66 = (uint64_t)&a1[v65];
  v67 = (char *)a2 + v65;
  v68 = *(_QWORD *)&a1[v65 + 8];
  if (!v68)
  {
LABEL_23:
    v72 = *((_OWORD *)v67 + 1);
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *(_OWORD *)(v66 + 16) = v72;
    *(_QWORD *)(v66 + 32) = *((_QWORD *)v67 + 4);
    goto LABEL_24;
  }
  v69 = *((_QWORD *)v67 + 1);
  if (!v69)
  {
    sub_984B0(v66);
    goto LABEL_23;
  }
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *(_QWORD *)(v66 + 8) = v69;
  swift_bridgeObjectRelease(v68);
  *(_QWORD *)(v66 + 16) = *((_QWORD *)v67 + 2);
  v70 = *((_QWORD *)v67 + 4);
  v71 = *(_QWORD *)(v66 + 32);
  *(_QWORD *)(v66 + 24) = *((_QWORD *)v67 + 3);
  *(_QWORD *)(v66 + 32) = v70;
  swift_bridgeObjectRelease(v71);
LABEL_24:
  v73 = *(int *)(a3 + 20);
  v74 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = *(_QWORD *)((char *)a2 + v73);

  v75 = *(int *)(a3 + 24);
  v76 = *(_QWORD *)&a1[v75];
  *(_QWORD *)&a1[v75] = *(_QWORD *)((char *)a2 + v75);
  swift_bridgeObjectRelease(v76);
  return a1;
}

uint64_t sub_E2550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E255C);
}

uint64_t sub_E255C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Page(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_E25D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E25E4);
}

uint64_t sub_E25E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Page(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_E265C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Page(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_25D750;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeriesRoomPageIntentImplementation.SeriesRoomPageIntentImplementationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_E271C + 4 * byte_25D610[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_E273C + 4 * byte_25D615[v4]))();
}

_BYTE *sub_E271C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_E273C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_E2744(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_E274C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_E2754(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_E275C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPageIntentImplementationError()
{
  return &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPageIntentImplementationError;
}

unint64_t sub_E277C()
{
  unint64_t result;

  result = qword_323968;
  if (!qword_323968)
  {
    result = swift_getWitnessTable(&unk_25D828, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPageIntentImplementationError);
    atomic_store(result, (unint64_t *)&qword_323968);
  }
  return result;
}

unint64_t sub_E27C0()
{
  unint64_t result;

  result = qword_323988;
  if (!qword_323988)
  {
    result = swift_getWitnessTable(&unk_25D9C4, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_323988);
  }
  return result;
}

unint64_t sub_E2804()
{
  unint64_t result;

  result = qword_3239D8;
  if (!qword_3239D8)
  {
    result = swift_getWitnessTable(&unk_25D7A8, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPageIntentImplementationError);
    atomic_store(result, (unint64_t *)&qword_3239D8);
  }
  return result;
}

_QWORD *sub_E284C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesRoomPageIntent(0) - 8) + 80);
  return sub_DC178(a1, v1 + 16, v1 + ((v3 + 56) & ~v3));
}

uint64_t sub_E28A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for SeriesRoomPageIntent(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for SeriesType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  v12 = v0 + v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v9 + 48))(v12, 1, v8, v11))
    v10(v12, v8);

  v13 = v6 + v1[9];
  v14 = type metadata accessor for Metrics.NavigationType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

unint64_t sub_E29B4()
{
  unint64_t result;

  result = qword_323A38;
  if (!qword_323A38)
  {
    result = swift_getWitnessTable(&unk_25FB4C, &type metadata for SeriesListShelfUpdateIntent);
    atomic_store(result, (unint64_t *)&qword_323A38);
  }
  return result;
}

uint64_t sub_E29F8()
{
  _QWORD *v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  if (v0[11])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_E2A2C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SeriesListShelfUpdateIntent(a2, a1);
  return a2;
}

_QWORD *sub_E2A68(_QWORD *a1)
{
  destroy for SeriesListShelfUpdateIntent(a1);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_E2AE8 + 4 * byte_25D61F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_E2B1C + 4 * byte_25D61A[v4]))();
}

uint64_t sub_E2B1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E2B24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE2B2CLL);
  return result;
}

uint64_t sub_E2B38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE2B40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_E2B44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E2B4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys()
{
  return &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys;
}

unint64_t sub_E2B6C()
{
  unint64_t result;

  result = qword_323A50;
  if (!qword_323A50)
  {
    result = swift_getWitnessTable(&unk_25D99C, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_323A50);
  }
  return result;
}

unint64_t sub_E2BB4()
{
  unint64_t result;

  result = qword_323A58;
  if (!qword_323A58)
  {
    result = swift_getWitnessTable(&unk_25D90C, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_323A58);
  }
  return result;
}

unint64_t sub_E2BFC()
{
  unint64_t result;

  result = qword_323A60;
  if (!qword_323A60)
  {
    result = swift_getWitnessTable(&unk_25D934, &type metadata for SeriesRoomPageIntentImplementation.SeriesRoomPage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_323A60);
  }
  return result;
}

uint64_t sub_E2C40(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701273968 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701273968, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x8000000000270B10;
    if (a2 == 0x8000000000270B10)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000270B10, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x737465737361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x737465737361, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t SeriesRoomListHeaderComponent.content(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;

  v93 = a2;
  v4 = sub_5C154(&qword_323A68);
  __chkstk_darwin(v4);
  v92 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v91 = (char *)&v77 - v8;
  v9 = type metadata accessor for SizeConstants.Spacing(0, v7);
  v89 = *(_QWORD *)(v9 - 8);
  v90 = v9;
  __chkstk_darwin(v9);
  v86 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for SizeConstants(0);
  v85 = *(_QWORD *)(v87 - 8);
  v11 = __chkstk_darwin(v87);
  v80 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SegmentedControlStyle(0, v11);
  v78 = *(_QWORD *)(v13 - 8);
  v79 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_322820);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5C154(&qword_323A70);
  v82 = *(_QWORD *)(v20 - 8);
  v83 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5C154(&qword_323A78);
  __chkstk_darwin(v81);
  v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_5C154(&qword_323A80);
  v25 = __chkstk_darwin(v88);
  v84 = (uint64_t)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v19, a1, v16, v25);
  v27 = v2 + *(int *)(type metadata accessor for SeriesRoomListHeaderComponent(0) + 20);
  v28 = *(_QWORD *)v27;
  v29 = *(_QWORD *)(v27 + 8);
  LOBYTE(v17) = *(_BYTE *)(v27 + 16);
  sub_E33B0(*(_QWORD *)v27, v29, v17);
  v30 = sub_7843C(v28, v29, v17);
  v32 = v31;
  sub_79534(v28, v29, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v15, enum case for SegmentedControlStyle.label(_:), v79);
  v33 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  v34 = sub_648E0((unint64_t *)&unk_3228A0, type metadata accessor for SeriesRoomListHeaderSegmentedItem, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderSegmentedItem);
  v35 = SegmentedControl.init(model:containingShelfID:style:)(v19, v30, v32, v15, v33, v34);
  LODWORD(v79) = static Edge.Set.top.getter(v35);
  v36 = v80;
  v37 = sub_76D64(v80);
  v38 = v86;
  SizeConstants.spacing.getter(v37);
  v85 = *(_QWORD *)(v85 + 8);
  v39 = v87;
  v40 = ((uint64_t (*)(uint64_t, uint64_t))v85)(v36, v87);
  v41 = SizeConstants.Spacing.xl.getter(v40);
  v42 = v90;
  v43 = *(void (**)(char *, uint64_t))(v89 + 8);
  v43(v38, v90);
  v44 = EdgeInsets.init(_all:)(v41);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = v82;
  v52 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v24, v22, v83);
  v53 = &v24[*(int *)(v81 + 36)];
  *v53 = v79;
  *((double *)v53 + 1) = v44;
  *((_QWORD *)v53 + 2) = v46;
  *((_QWORD *)v53 + 3) = v48;
  *((_QWORD *)v53 + 4) = v50;
  v53[40] = 0;
  v54 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v22, v52);
  LOBYTE(v51) = static Edge.Set.bottom.getter(v54);
  v55 = sub_76D64(v36);
  SizeConstants.spacing.getter(v55);
  v56 = ((uint64_t (*)(uint64_t, uint64_t))v85)(v36, v39);
  v57 = SizeConstants.Spacing.l.getter(v56);
  v43(v38, v42);
  v58 = EdgeInsets.init(_all:)(v57);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  v65 = v84;
  sub_E33C0((uint64_t)v24, v84);
  v66 = v88;
  v67 = v65 + *(int *)(v88 + 36);
  *(_BYTE *)v67 = v51;
  *(double *)(v67 + 8) = v58;
  *(_QWORD *)(v67 + 16) = v60;
  *(_QWORD *)(v67 + 24) = v62;
  *(_QWORD *)(v67 + 32) = v64;
  *(_BYTE *)(v67 + 40) = 0;
  sub_5E09C((uint64_t)v24, &qword_323A78);
  v68 = enum case for DynamicTypeSize.large(_:);
  v69 = type metadata accessor for DynamicTypeSize(0);
  v70 = *(_QWORD *)(v69 - 8);
  v71 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 104);
  v72 = (uint64_t)v91;
  v71(v91, v68, v69);
  v73 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56);
  v73(v72, 0, 1, v69);
  v74 = (uint64_t)v92;
  v71(v92, enum case for DynamicTypeSize.xxxLarge(_:), v69);
  v73(v74, 0, 1, v69);
  v75 = sub_D643C(&qword_323A88, &qword_323A80, (void (*)(void))sub_E3408);
  View.restrictedDynamicTypeSize(min:max:)(v72, v74, v66, v75);
  sub_5E09C(v74, &qword_323A68);
  sub_5E09C(v72, &qword_323A68);
  return sub_5E09C(v65, &qword_323A80);
}

uint64_t type metadata accessor for SeriesRoomListHeaderComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_323B08;
  if (!qword_323B08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesRoomListHeaderComponent);
  return result;
}

uint64_t sub_E331C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_E3BF4(v5, (uint64_t)v4);
  v6 = sub_648E0((unint64_t *)&unk_32A070, type metadata accessor for SeriesRoomListHeaderComponent, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderComponent);
  return _ComponentBody.init(_:)(v4, a1, v6);
}

uint64_t sub_E33B0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(a2);
  else
    return swift_retain(a1);
}

uint64_t sub_E33C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_323A78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_E3408()
{
  return sub_D643C(&qword_323A90, &qword_323A78, (void (*)(void))sub_E3424);
}

unint64_t sub_E3424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323A98;
  if (!qword_323A98)
  {
    v1 = sub_667D0(&qword_323A70);
    result = swift_getWitnessTable(&protocol conformance descriptor for SegmentedControl<A>, v1);
    atomic_store(result, (unint64_t *)&qword_323A98);
  }
  return result;
}

uint64_t sub_E3470()
{
  return sub_648E0(&qword_323AA0, type metadata accessor for SeriesRoomListHeaderComponent, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderComponent);
}

uint64_t sub_E349C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SeriesRoomListHeaderComponent.content(for:)>>, 1);
}

uint64_t sub_E34AC()
{
  return sub_648E0(&qword_323AA8, type metadata accessor for SeriesRoomListHeaderComponentModel, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderComponentModel);
}

uint64_t sub_E34D8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_648E0((unint64_t *)&unk_32A070, type metadata accessor for SeriesRoomListHeaderComponent, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderComponent);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Component.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SeriesRoomListHeaderComponent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = *((_QWORD *)v16 + 1);
    v19 = v16[16];
    sub_E33B0(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *((_QWORD *)v15 + 1) = v18;
    v15[16] = v19;
  }
  return a1;
}

uint64_t destroy for SeriesRoomListHeaderComponent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  return sub_79534(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)), *(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8), *((_BYTE *)a1 + *(int *)(a2 + 20) + 16));
}

uint64_t *initializeWithCopy for SeriesRoomListHeaderComponent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v6 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for SizeConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = *((_QWORD *)v14 + 1);
  v17 = v14[16];
  sub_E33B0(*(_QWORD *)v14, v16, v17);
  *(_QWORD *)v13 = v15;
  *((_QWORD *)v13 + 1) = v16;
  v13[16] = v17;
  return a1;
}

uint64_t *assignWithCopy for SeriesRoomListHeaderComponent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_320160);
    v6 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for SizeConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = *((_QWORD *)v14 + 1);
  v17 = v14[16];
  sub_E33B0(*(_QWORD *)v14, v16, v17);
  v18 = *(_QWORD *)v13;
  v19 = *((_QWORD *)v13 + 1);
  v20 = v13[16];
  *(_QWORD *)v13 = v15;
  *((_QWORD *)v13 + 1) = v16;
  v13[16] = v17;
  sub_79534(v18, v19, v20);
  return a1;
}

char *initializeWithTake for SeriesRoomListHeaderComponent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v9[16] = v10[16];
  return a1;
}

char *assignWithTake for SeriesRoomListHeaderComponent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_320160);
    v6 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = v10[16];
  v12 = *(_QWORD *)v9;
  v13 = *((_QWORD *)v9 + 1);
  v14 = v9[16];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v9[16] = v11;
  sub_79534(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesRoomListHeaderComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E3A14);
}

uint64_t sub_E3A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_5C154(&qword_3201B0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeriesRoomListHeaderComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E3AA0);
}

uint64_t sub_E3AA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5C154(&qword_3201B0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 16) = -(char)a2;
  return result;
}

void sub_E3B20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_774D4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_25DB00;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_E3B90()
{
  _QWORD v1[2];

  v1[0] = sub_667D0(&qword_323A80);
  v1[1] = sub_D643C(&qword_323A88, &qword_323A80, (void (*)(void))sub_E3408);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.restrictedDynamicTypeSize(min:max:)>>, 1);
}

uint64_t sub_E3BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesRoomListHeaderComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_E3C38()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_E3C58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for DynamicTypeSize(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.dynamicTypeSize.setter(v4);
}

uint64_t sub_E3CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v56 = a3;
  v57 = a4;
  v58 = a2;
  v7 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v55 = (uint64_t)&v55 - v12;
  v13 = type metadata accessor for DataStackID(0, v11);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ShelfGridBreakpoint(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v55 - v22;
  *a5 = swift_getKeyPath(&unk_25DC38);
  v24 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(a5, v24, 0);
  v25 = (int *)type metadata accessor for ShelfView(0);
  v26 = (_QWORD *)((char *)a5 + v25[5]);
  *v26 = swift_getKeyPath(&unk_25DC68);
  v27 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = (_QWORD *)((char *)a5 + v25[6]);
  *v28 = swift_getKeyPath(&unk_25DC98);
  v29 = sub_5C154(&qword_320308);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = (_QWORD *)((char *)a5 + v25[8]);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v23, enum case for ShelfGridBreakpoint.xs(_:), v17);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v23, v17);
  v31 = v30;
  v32 = a1;
  v33 = v20;
  v34 = v56;
  State.init(wrappedValue:)(v31, v33, v17);
  v35 = *(void (**)(char *, uint64_t))(v18 + 8);
  v36 = v57;
  v35(v23, v17);
  v37 = (char *)a5 + v25[9];
  *(_QWORD *)v37 = swift_getKeyPath(&unk_25DCC8);
  v37[8] = 0;
  v38 = (char *)a5 + v25[10];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_25DCF8);
  v38[8] = 0;
  v39 = (char *)a5 + v25[11];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_25DD28);
  v39[8] = 0;
  v40 = (char *)a5 + v25[12];
  *(_QWORD *)v40 = swift_getKeyPath(&unk_25DD58);
  v40[8] = 0;
  v41 = (char *)a5 + v25[13];
  *(_QWORD *)v41 = swift_getKeyPath(&unk_25DD80);
  v41[8] = 0;
  v42 = (_QWORD *)((char *)a5 + v25[14]);
  *v42 = swift_getKeyPath(&unk_25DDB0);
  v43 = sub_5C154(&qword_323BF0);
  swift_storeEnumTagMultiPayload(v42, v43, 0);
  v44 = (char *)a5 + v25[15];
  *(_QWORD *)v44 = swift_getKeyPath(&unk_25DDE0);
  v44[40] = 0;
  v45 = (char *)a5 + v25[16];
  *(_QWORD *)v45 = swift_getKeyPath(&unk_25DE18);
  v45[8] = 0;
  v46 = (_QWORD *)((char *)a5 + v25[17]);
  *v46 = swift_getKeyPath(&unk_25DE48);
  v47 = sub_5C154(&qword_3202B8);
  swift_storeEnumTagMultiPayload(v46, v47, 0);
  v48 = (char *)a5 + v25[18];
  *(_QWORD *)v48 = swift_getKeyPath(&unk_25DE78);
  v48[40] = 0;
  static DataStackID.additionalEventData.getter();
  AppAnalyticsData.init(_:)(v16);
  v49 = (char *)a5 + v25[20];
  *(_QWORD *)v49 = swift_getKeyPath(&unk_25DEA8);
  *((_WORD *)v49 + 4) = 0;
  *((_QWORD *)v49 + 2) = 0;
  v50 = v58;
  sub_5E11C(a1, (uint64_t)a5 + v25[21], type metadata accessor for Shelf);
  *(_QWORD *)((char *)a5 + v25[22]) = v50;
  sub_5E1A4(v34, (uint64_t)a5 + v25[7], &qword_323248);
  *(_QWORD *)((char *)a5 + v25[23]) = v36;
  v51 = type metadata accessor for Shelf(0);
  sub_5E1A4(a1 + *(int *)(v51 + 76), (uint64_t)v9, (uint64_t *)&unk_326100);
  v52 = type metadata accessor for SectionData(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v9, 1, v52);
  if ((_DWORD)result)
  {
    swift_retain(v36);
LABEL_6:
    v54 = v55;
    sub_66F14((uint64_t)v9, v55, (uint64_t *)&unk_326100);
    swift_release(v36);
    sub_5E09C(v34, &qword_323248);
    sub_6685C(v32, type metadata accessor for Shelf);
    return sub_66F14(v54, (uint64_t)a5 + v25[24], (uint64_t *)&unk_326100);
  }
  if (v50 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v50 <= 0x7FFFFFFF)
  {
    swift_retain(v36);
    SectionData.exposureIndex.setter(v50);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t ShelfView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __n128 v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  void (*v77)(char *, uint64_t, __n128);
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115[16];
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v2 = v1;
  v113 = a1;
  v3 = sub_5C154((uint64_t *)&unk_326100);
  v4 = __chkstk_darwin(v3);
  v109 = (uint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DataStackID(0, v4);
  v111 = *(_QWORD *)(v6 - 8);
  v112 = v6;
  __chkstk_darwin(v6);
  v110 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v8);
  v93 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v96 = (char *)&v85 - v11;
  v94 = sub_5C154(&qword_323B48);
  __chkstk_darwin(v94);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v85 - v15;
  v90 = (char *)&v85 - v15;
  v114 = sub_5C154(&qword_323B50);
  v95 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v92 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_323B58);
  v103 = *(_QWORD *)(v18 - 8);
  v104 = v18;
  __chkstk_darwin(v18);
  v100 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_5C154(&qword_323B60);
  v106 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v105 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_5C154(&qword_323B68);
  __chkstk_darwin(v97);
  v107 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_5C154(&qword_323B70);
  __chkstk_darwin(v99);
  v102 = (uint64_t)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v101 = (uint64_t)&v85 - v24;
  v91 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v91);
  v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_E4A7C((uint64_t)v26);
  sub_E4C58((uint64_t)v16);
  sub_E4E6C((uint64_t)v13);
  v98 = v26;
  v116 = v26;
  v117 = v1;
  v88 = sub_5C154(&qword_323B78);
  v27 = sub_E5DC4();
  v87 = sub_667D0(&qword_323B98);
  v86 = type metadata accessor for BaseObjectGraph(255);
  v28 = sub_667D0(&qword_323BA0);
  v29 = sub_667D0(&qword_323BA8);
  v31 = type metadata accessor for GenericGeometryReferenceBuilder(255, v30);
  v32 = sub_667D0(&qword_323BB0);
  v33 = type metadata accessor for SectionExposureEvent(255);
  v34 = sub_667D0(&qword_323BB8);
  v35 = sub_67060(&qword_323BC0, &qword_323BB8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v118 = v34;
  v119 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.shelfGridDebugOverlay(breakpoint:gridType:dynamicTypeSize:padding:spacing:maxContentWidth:)>>, 1);
  v37 = v2;
  v38 = sub_648E0(&qword_323BC8, (uint64_t (*)(uint64_t))&type metadata accessor for SectionExposureEvent, (uint64_t)&protocol conformance descriptor for SectionExposureEvent);
  v118 = v32;
  v119 = v33;
  v120 = OpaqueTypeConformance2;
  v121 = v38;
  v39 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.emitAppAnalyticsExposureEvent<A>(_:)>>, 1);
  v40 = sub_648E0(&qword_323BD0, (uint64_t (*)(uint64_t))&type metadata accessor for GenericGeometryReferenceBuilder, (uint64_t)&protocol conformance descriptor for GenericGeometryReferenceBuilder);
  v118 = v29;
  v119 = v31;
  v41 = (uint64_t)v93;
  v42 = v92;
  v120 = v39;
  v121 = v40;
  v43 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.cacheGeometry<A>(for:referenceBuilder:)>>, 1);
  v118 = v28;
  v119 = v43;
  v44 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.shelfGridBreakpoint(_:gridType:maxContentWidth:)>>, 1);
  v118 = v87;
  v119 = v86;
  v120 = v44;
  v45 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(with:implementations:)>>, 1);
  Section<>.init(header:footer:content:)(v90, v89, sub_E5DBC, v115, v94, v88, v94, v27, v45, v27);
  v46 = type metadata accessor for ShelfView(0);
  v47 = (uint64_t *)(v2 + *(int *)(v46 + 84));
  sub_5E1A4((uint64_t)v47 + *(int *)(v91 + 36), v41, &qword_323B40);
  v49 = type metadata accessor for Metrics.Location(0, v48);
  v50 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v41, 1, v49) == 1)
  {
    v51 = (uint64_t)v96;
    static Metrics.Location.genericSection.getter();
    sub_5E09C(v41, &qword_323B40);
  }
  else
  {
    v51 = (uint64_t)v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v96, v41, v49);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v51, 0, 1, v49);
  v52 = sub_E5EC8();
  v53 = v100;
  v54 = v114;
  View.figaroLocation(_:)(v51, v114, v52);
  sub_5E09C(v51, &qword_323B40);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v42, v54);
  v55 = v37 + *(int *)(v46 + 96);
  v56 = *v47;
  v57 = v47[1];
  swift_bridgeObjectRetain(v57);
  v58 = v110;
  DataStackID.init(stringLiteral:)(v56, v57);
  v59 = sub_5C154(&qword_321F20);
  v60 = swift_allocObject(v59, 80, 7);
  *(_OWORD *)(v60 + 16) = xmmword_258070;
  v61 = (_QWORD *)(v60 + 32);
  v62 = v109;
  sub_5E1A4(v55, v109, (uint64_t *)&unk_326100);
  v63 = type metadata accessor for SectionData(0);
  v64 = *(_QWORD *)(v63 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63) == 1)
  {
    sub_5E09C(v62, (uint64_t *)&unk_326100);
    *(_OWORD *)v61 = 0u;
    *(_OWORD *)(v60 + 48) = 0u;
    *(_OWORD *)(v60 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v60 + 56) = v63;
    *(_QWORD *)(v60 + 64) = sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    *(_QWORD *)(v60 + 72) = sub_648E0((unint64_t *)&unk_322500, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    v65 = sub_668BC(v61);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v64 + 32))(v65, v62, v63);
  }
  v118 = v114;
  v119 = v52;
  v66 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.figaroLocation(_:)>>, 1);
  v67 = v104;
  v68 = v105;
  View.appAnalyticsData(_:for:)(v60, v58, v104, v66);
  v69 = swift_bridgeObjectRelease(v60);
  (*(void (**)(char *, uint64_t, __n128))(v111 + 8))(v58, v112, v69);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v53, v67);
  KeyPath = swift_getKeyPath(&unk_25DB18);
  v72 = *v47;
  v71 = v47[1];
  v74 = v106;
  v73 = (uint64_t)v107;
  v75 = v108;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v107, v68, v108);
  v76 = (uint64_t *)(v73 + *(int *)(v97 + 36));
  *v76 = KeyPath;
  v76[1] = v72;
  v76[2] = v71;
  v77 = *(void (**)(char *, uint64_t, __n128))(v74 + 8);
  v78 = swift_bridgeObjectRetain(v71);
  v77(v68, v75, v78);
  v80 = *v47;
  v79 = v47[1];
  v81 = v102;
  sub_5E1A4(v73, v102, &qword_323B68);
  v82 = (_QWORD *)(v81 + *(int *)(v99 + 52));
  *v82 = v80;
  v82[1] = v79;
  swift_bridgeObjectRetain(v79);
  sub_5E09C(v73, &qword_323B68);
  v83 = v101;
  sub_66F14(v81, v101, &qword_323B70);
  sub_66F14(v83, v113, &qword_323B70);
  return sub_6685C((uint64_t)v98, type metadata accessor for Shelf);
}

uint64_t sub_E4A7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23[16];
  void *v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  _QWORD *v28;
  _BYTE v29[40];

  v22 = a1;
  v2 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DataStack(0);
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShelfView(0);
  v9 = v1 + *(int *)(v8 + 84);
  v10 = v1 + *(int *)(v8 + 64);
  v11 = *(id *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  sub_AAFF4(*(id *)v10, v12);
  v13 = (void *)sub_77EB0(v11, v12);
  sub_794D8(v11, v12);
  sub_78BF0((uint64_t)v7);
  sub_78C1C((uint64_t)v29);
  v14 = sub_EA710();
  sub_5E11C(v9, (uint64_t)v4, type metadata accessor for Shelf);
  v15 = *(_QWORD *)(v9 + *(int *)(v2 + 64));
  v24 = v13;
  v25 = v9;
  v26 = v7;
  v27 = v29;
  v28 = v14;
  swift_bridgeObjectRetain(v15);
  v16 = sub_1DD9D8((void (*)(_QWORD *__return_ptr, uint64_t))sub_F1320, (uint64_t)v23, v15);
  swift_bridgeObjectRelease(v15);
  v17 = *(int *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v17]);
  *(_QWORD *)&v4[v17] = v16;
  sub_5E160((uint64_t)v4, v22, type metadata accessor for Shelf);
  swift_bridgeObjectRelease(v14);

  sub_5E09C((uint64_t)v29, &qword_320300);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v7, v21);
}

uint64_t sub_E4C58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v23[5];
  __int128 v24[2];
  _QWORD v25[5];

  v3 = sub_5C154(&qword_329DD0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_323B48);
  __chkstk_darwin(v7);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + *(int *)(type metadata accessor for ShelfView(0) + 84);
  v11 = type metadata accessor for Shelf(0);
  sub_5E1A4(v10 + *(int *)(v11 + 52), (uint64_t)v24, &qword_323F40);
  sub_5DC98(v24, (uint64_t)v25);
  sub_5E0D8((uint64_t)v25, (uint64_t)v24);
  v12 = sub_F0B00();
  ComponentView.init(_:content:)(v24, sub_EA958, 0, &type metadata for _ComponentContentByType, v12);
  sub_5E0D8((uint64_t)v25, (uint64_t)v24);
  v13 = sub_5C154(&qword_31EF38);
  v14 = sub_5C154(&qword_323F50);
  v15 = swift_dynamicCast(v23, v24, v13, v14, 6);
  if (v15)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  v16 = v15 ^ 1;
  KeyPath = swift_getKeyPath(&unk_25DD58);
  v18 = swift_getKeyPath(&unk_25DCF8);
  v19 = swift_getKeyPath(&unk_25DCC8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v3);
  v20 = &v9[*(int *)(v7 + 36)];
  *(_QWORD *)v20 = KeyPath;
  v20[8] = 0;
  *((_QWORD *)v20 + 2) = v18;
  v20[24] = 0;
  *((_QWORD *)v20 + 4) = v19;
  v20[40] = 0;
  v20[41] = v16;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
  return sub_66F14((uint64_t)v9, a1, &qword_323B48);
}

uint64_t sub_E4E6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v23[5];
  __int128 v24[2];
  _QWORD v25[5];

  v3 = sub_5C154(&qword_329DD0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_323B48);
  __chkstk_darwin(v7);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + *(int *)(type metadata accessor for ShelfView(0) + 84);
  v11 = type metadata accessor for Shelf(0);
  sub_5E1A4(v10 + *(int *)(v11 + 56), (uint64_t)v24, &qword_323F40);
  sub_5DC98(v24, (uint64_t)v25);
  sub_5E0D8((uint64_t)v25, (uint64_t)v24);
  v12 = sub_F0B00();
  ComponentView.init(_:content:)(v24, sub_EAC78, 0, &type metadata for _ComponentContentByType, v12);
  sub_5E0D8((uint64_t)v25, (uint64_t)v24);
  v13 = sub_5C154(&qword_31EF38);
  v14 = sub_5C154(&qword_323F50);
  v15 = swift_dynamicCast(v23, v24, v13, v14, 6);
  if (v15)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  v16 = v15 ^ 1;
  KeyPath = swift_getKeyPath(&unk_25DD58);
  v18 = swift_getKeyPath(&unk_25DCF8);
  v19 = swift_getKeyPath(&unk_25DCC8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v3);
  v20 = &v9[*(int *)(v7 + 36)];
  *(_QWORD *)v20 = KeyPath;
  v20[8] = 0;
  *((_QWORD *)v20 + 2) = v18;
  v20[24] = 0;
  *((_QWORD *)v20 + 4) = v19;
  v20[40] = 0;
  v20[41] = v16;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
  return sub_66F14((uint64_t)v9, a1, &qword_323B48);
}

uint64_t sub_E5080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint8_t *v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __n128 v63;
  char *v64;
  uint64_t v65;
  char v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t OpaqueTypeConformance2;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  int *v99;
  uint64_t v100;
  char v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  char *v156;
  uint64_t *v157;
  int *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v152 = a3;
  v5 = sub_5C154(&qword_323D30);
  v6 = __chkstk_darwin(v5);
  v163 = (uint64_t *)((char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v151 = type metadata accessor for GenericGeometryReferenceBuilder(0, v6);
  v143 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v142 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for ShelfGridSpacing(0);
  v137 = *(_QWORD *)(v139 - 8);
  v9 = __chkstk_darwin(v139);
  v136 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for ShelfGridPadding(0, v9);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for DynamicTypeSize(0);
  v131 = *(_QWORD *)(v132 - 8);
  v12 = __chkstk_darwin(v132);
  v157 = (uint64_t *)((char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v162 = type metadata accessor for ShelfGridType(0, v12);
  v129 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v150 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v156 = (char *)&v122 - v17;
  v127 = type metadata accessor for ShelfGridBreakpoint(0, v16);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v155 = (uint64_t *)((char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_5C154(&qword_323D38);
  __chkstk_darwin(v19);
  v21 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_5C154(&qword_323D40);
  __chkstk_darwin(v124);
  v23 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_5C154(&qword_323BB8);
  __chkstk_darwin(v164);
  v153 = (uint64_t)&v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_5C154(&qword_323BB0);
  v125 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v154 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_5C154(&qword_323BA8);
  v140 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v138 = (char *)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_5C154(&qword_323BA0);
  v141 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v160 = (char *)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_5C154(&qword_323B98);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v122 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_5C154(&qword_323B78);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v144 = (char *)&v122 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_E60B0(a1, a2, (uint64_t)v21);
  v30 = type metadata accessor for ShelfView(0);
  v32 = *(int *)(v30 + 80);
  v31 = *(int *)(v30 + 84);
  v158 = (int *)v30;
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a2 + v31 + 8);
  v123 = *(_QWORD *)(a2 + v31);
  v35 = *(_QWORD *)(a2 + v32);
  v36 = *(unsigned __int8 *)(a2 + v32 + 8);
  v37 = *(unsigned __int8 *)(a2 + v32 + 9);
  v122 = *(_QWORD *)(a2 + v32 + 16);
  swift_bridgeObjectRetain(v34);
  sub_EBB1C(v35, v36, v37);
  v38 = sub_78C48(v35, v36 | (v37 << 8));
  v40 = v39;
  v41 = sub_79528(v35, v36, v37);
  if ((v40 & 1) != 0)
  {
    if (qword_31E5E8 != -1)
      swift_once(&qword_31E5E8, sub_1269C0);
    v43 = type metadata accessor for Logger(0);
    v44 = sub_5240C(v43, (uint64_t)qword_325160);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.fault.getter(v45);
    v47 = os_log_type_enabled(v45, v46);
    v42 = v158;
    if (v47)
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      swift_slowDealloc(v48, -1, -1);
    }

    v41 = Namespace.wrappedValue.getter(v122);
    v38 = v41;
  }
  else
  {
    v42 = v158;
  }
  v49 = static MatchedGeometryProperties.position.getter(v41);
  v50 = static UnitPoint.top.getter();
  v52 = v51;
  sub_5E1A4((uint64_t)v21, (uint64_t)v23, &qword_323D38);
  v53 = &v23[*(int *)(v124 + 36)];
  *(_QWORD *)v53 = v123;
  *((_QWORD *)v53 + 1) = v34;
  *((_QWORD *)v53 + 2) = v38;
  *((_DWORD *)v53 + 6) = v49;
  *((double *)v53 + 4) = v50;
  *((_QWORD *)v53 + 5) = v52;
  v53[48] = 1;
  sub_5E09C((uint64_t)v21, &qword_323D38);
  v54 = v33 + *(int *)(type metadata accessor for Shelf(0) + 40);
  v55 = v153;
  sub_5E1A4((uint64_t)v23, v153, &qword_323D40);
  sub_5DCB0(v54, v55 + *(int *)(v164 + 52));
  sub_5E09C((uint64_t)v23, &qword_323D40);
  v56 = a2 + v42[8];
  v123 = sub_5C154(&qword_323BE8);
  v124 = v56;
  State.wrappedValue.getter(v155, v123);
  v57 = *(_QWORD *)(v33 + 24);
  v58 = swift_conformsToProtocol2(v57, &protocol descriptor for ShelfGridLayoutConfiguring);
  if (v58)
    v59 = v58;
  else
    v59 = 0;
  if (v58)
    v60 = v57;
  else
    v60 = 0;
  v61 = (uint64_t)v136;
  if (v60)
    dispatch thunk of static ShelfGridLayoutConfiguring.shelfGridType.getter();
  else
    static ShelfGridType.vertical.getter(0, v59);
  v62 = v133;
  sub_78618((uint64_t)v157);
  sub_E77B0();
  sub_E87BC(v61, v63);
  v64 = (char *)(a2 + v42[12]);
  v65 = *(_QWORD *)v64;
  v133 = v64;
  v66 = v64[8];
  sub_64DD8(v65, v66);
  sub_7864C(v65, v66, &v169);
  sub_64FFC(v65, v66);
  v67 = v169;
  v128 = a2;
  if (v169 == 2)
  {
    v68 = 0;
  }
  else
  {
    v69 = a2 + v42[11];
    v70 = *(_QWORD *)v69;
    v71 = *(_BYTE *)(v69 + 8);
    sub_64DD8(*(_QWORD *)v69, v71);
    sub_768E8(v70, v71);
    sub_64FFC(v70, v71);
    v68 = 0x7FF0000000000000;
  }
  v72 = sub_67060(&qword_323BC0, &qword_323BB8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v73 = v155;
  v74 = v156;
  v75 = (void (*)(_QWORD, _QWORD))v157;
  v76 = v68;
  v77 = v153;
  View.shelfGridDebugOverlay(breakpoint:gridType:dynamicTypeSize:padding:spacing:maxContentWidth:)(v155, v156, v157, v62, v61, v76, v67 == 2, v164, v72);
  (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v61, v139);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v62, v135);
  (*(void (**)(_QWORD, uint64_t))(v131 + 8))(v75, v132);
  v157 = *(uint64_t **)(v129 + 8);
  ((void (*)(char *, uint64_t))v157)(v74, v162);
  (*(void (**)(_QWORD *, uint64_t))(v126 + 8))(v73, v127);
  sub_5E09C(v77, &qword_323BB8);
  if (*(_BYTE *)(v33 + 40) == 1)
    v78 = type metadata accessor for SectionExposureEvent(0);
  else
    v78 = 0;
  v79 = type metadata accessor for SectionExposureEvent(0);
  v169 = v164;
  v170 = v72;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v169, &opaque type descriptor for <<opaque return type of View.shelfGridDebugOverlay(breakpoint:gridType:dynamicTypeSize:padding:spacing:maxContentWidth:)>>, 1);
  v81 = sub_648E0(&qword_323BC8, (uint64_t (*)(uint64_t))&type metadata accessor for SectionExposureEvent, (uint64_t)&protocol conformance descriptor for SectionExposureEvent);
  v82 = v138;
  v83 = v78;
  v84 = v130;
  v85 = v154;
  View.emitAppAnalyticsExposureEvent<A>(_:)(v83, v130, v79, OpaqueTypeConformance2, v81);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v85, v84);
  v86 = *(_QWORD *)(v33 + 8);
  v165 = *(_QWORD *)v33;
  v166 = v86;
  swift_bridgeObjectRetain(v86);
  v87 = AnyHashable.init<A>(_:)(&v165, &type metadata for String, &protocol witness table for String);
  v88 = v142;
  static GeometryReferenceBuilding<>.generic.getter(v87);
  v165 = v84;
  v166 = v79;
  v167 = OpaqueTypeConformance2;
  v168 = v81;
  v89 = swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.emitAppAnalyticsExposureEvent<A>(_:)>>, 1);
  v90 = sub_648E0(&qword_323BD0, (uint64_t (*)(uint64_t))&type metadata accessor for GenericGeometryReferenceBuilder, (uint64_t)&protocol conformance descriptor for GenericGeometryReferenceBuilder);
  v91 = v159;
  v92 = v151;
  View.cacheGeometry<A>(for:referenceBuilder:)(&v169, v88, v159, v151, v89, v90);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v88, v92);
  sub_5E09C((uint64_t)&v169, &qword_323D48);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v82, v91);
  State.projectedValue.getter(v163, v123);
  v93 = *(_QWORD *)(v33 + 24);
  v94 = swift_conformsToProtocol2(v93, &protocol descriptor for ShelfGridLayoutConfiguring);
  if (v94)
    v95 = v94;
  else
    v95 = 0;
  if (v94)
    v96 = v93;
  else
    v96 = 0;
  v97 = v128;
  v98 = v150;
  if (v96)
    dispatch thunk of static ShelfGridLayoutConfiguring.shelfGridType.getter();
  else
    static ShelfGridType.vertical.getter(0, v95);
  v99 = v158;
  v100 = *(_QWORD *)v133;
  v101 = v133[8];
  sub_64DD8(*(_QWORD *)v133, v101);
  sub_7864C(v100, v101, &v169);
  sub_64FFC(v100, v101);
  v102 = v169;
  if (v169 == 2)
  {
    v103 = 0;
  }
  else
  {
    v104 = v97 + v99[11];
    v105 = *(_QWORD *)v104;
    v106 = *(_BYTE *)(v104 + 8);
    sub_64DD8(*(_QWORD *)v104, v106);
    sub_768E8(v105, v106);
    sub_64FFC(v105, v106);
    v103 = 0x7FF0000000000000;
  }
  v169 = v159;
  v170 = v92;
  v171 = v89;
  v172 = v90;
  v107 = swift_getOpaqueTypeConformance2(&v169, &opaque type descriptor for <<opaque return type of View.cacheGeometry<A>(for:referenceBuilder:)>>, 1);
  v108 = v147;
  v109 = v163;
  v110 = v103;
  v111 = v160;
  v112 = v161;
  View.shelfGridBreakpoint(_:gridType:maxContentWidth:)(v163, v98, v110, v102 == 2, v161, v107);
  ((void (*)(char *, uint64_t))v157)(v98, v162);
  sub_5E09C((uint64_t)v109, &qword_323D30);
  v113 = (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v111, v112);
  v114 = *(_QWORD *)(v97 + v99[23]);
  __chkstk_darwin(v113);
  v121 = v97;
  BaseObjectGraph.inject<A>(_:)(&v169, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if (v169 == 1)
  {
    swift_retain(v114);
  }
  else
  {
    v115 = type metadata accessor for MetricsPipeline(0);
    v114 = dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(v115);
  }
  v116 = type metadata accessor for BaseObjectGraph(0);
  v169 = v161;
  v170 = v107;
  v117 = swift_getOpaqueTypeConformance2(&v169, &opaque type descriptor for <<opaque return type of View.shelfGridBreakpoint(_:gridType:maxContentWidth:)>>, 1);
  v118 = v144;
  v119 = v149;
  View.actionDispatcher<A>(with:implementations:)(v114, sub_F02C0, &v122 - 4, v149, v116, v117);
  swift_release(v114);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v108, v119);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v145 + 32))(v152, v118, v146);
}

uint64_t sub_E5DBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_E5080(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_E5DC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323B80;
  if (!qword_323B80)
  {
    v1 = sub_667D0(&qword_323B48);
    sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
    sub_E5E48();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323B80);
  }
  return result;
}

unint64_t sub_E5E48()
{
  unint64_t result;

  result = qword_323B90;
  if (!qword_323B90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageMarginViewModifier, &type metadata for PageMarginViewModifier);
    atomic_store(result, (unint64_t *)&qword_323B90);
  }
  return result;
}

uint64_t type metadata accessor for ShelfView(uint64_t a1)
{
  uint64_t result;

  result = qword_323C78;
  if (!qword_323C78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfView);
  return result;
}

unint64_t sub_E5EC8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = qword_323BD8;
  if (!qword_323BD8)
  {
    v15 = sub_667D0(&qword_323B50);
    sub_E5DC4();
    v14 = sub_667D0(&qword_323B98);
    v1 = type metadata accessor for BaseObjectGraph(255);
    v2 = sub_667D0(&qword_323BA0);
    v3 = sub_667D0(&qword_323BA8);
    v5 = type metadata accessor for GenericGeometryReferenceBuilder(255, v4);
    v6 = sub_667D0(&qword_323BB0);
    v7 = type metadata accessor for SectionExposureEvent(255);
    v16 = sub_667D0(&qword_323BB8);
    v17 = sub_67060(&qword_323BC0, &qword_323BB8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.shelfGridDebugOverlay(breakpoint:gridType:dynamicTypeSize:padding:spacing:maxContentWidth:)>>, 1);
    v9 = sub_648E0(&qword_323BC8, (uint64_t (*)(uint64_t))&type metadata accessor for SectionExposureEvent, (uint64_t)&protocol conformance descriptor for SectionExposureEvent);
    v16 = v6;
    v17 = v7;
    v18 = OpaqueTypeConformance2;
    v19 = v9;
    v10 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.emitAppAnalyticsExposureEvent<A>(_:)>>, 1);
    v11 = sub_648E0(&qword_323BD0, (uint64_t (*)(uint64_t))&type metadata accessor for GenericGeometryReferenceBuilder, (uint64_t)&protocol conformance descriptor for GenericGeometryReferenceBuilder);
    v16 = v3;
    v17 = v5;
    v18 = v10;
    v19 = v11;
    v12 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.cacheGeometry<A>(for:referenceBuilder:)>>, 1);
    v16 = v2;
    v17 = v12;
    v13 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.shelfGridBreakpoint(_:gridType:maxContentWidth:)>>, 1);
    v16 = v14;
    v17 = v1;
    v18 = v13;
    swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(with:implementations:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v15);
    atomic_store(result, (unint64_t *)&qword_323BD8);
  }
  return result;
}

uint64_t sub_E60B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  double v140;
  char v141;
  char v142;
  void (*v143)(char *, uint64_t);
  char *v144;
  uint64_t v145;
  double v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char *v160;
  uint64_t v161;
  double v162;
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t OpaqueTypeConformance2;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t KeyPath;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  double v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;

  v300 = a2;
  v301 = a1;
  v299 = a3;
  v304 = type metadata accessor for ShelfView(0);
  v287 = *(_QWORD *)(v304 - 8);
  __chkstk_darwin(v304);
  v289 = (uint64_t)&v233 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = v3;
  __chkstk_darwin(v4);
  v288 = (uint64_t)&v233 - v5;
  v6 = type metadata accessor for ShelfGridSpacing(0);
  __chkstk_darwin(v6);
  v292 = (uint64_t)&v233 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ShelfGridLayout(0, v8, v9);
  __chkstk_darwin(v10);
  v303 = (uint64_t *)((char *)&v233 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v12);
  v302 = (uint64_t)&v233 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = sub_5C154(&qword_323D60);
  v291 = *(_QWORD *)(v298 - 8);
  __chkstk_darwin(v298);
  v290 = (char *)&v233 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for PlainListStyle(0);
  v257 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v254 = (char *)&v233 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_5C154(&qword_323D68);
  v247 = *(_QWORD *)(v248 - 8);
  __chkstk_darwin(v248);
  v246 = (char *)&v233 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = sub_5C154(&qword_323D70);
  v250 = *(_QWORD *)(v251 - 8);
  __chkstk_darwin(v251);
  v249 = (char *)&v233 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = sub_5C154(&qword_323D78);
  v256 = *(_QWORD *)(v258 - 8);
  __chkstk_darwin(v258);
  v253 = (char *)&v233 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = sub_5C154(&qword_323D80);
  v243 = *(_QWORD *)(v245 - 8);
  __chkstk_darwin(v245);
  v255 = (char *)&v233 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = sub_5C154(&qword_323D88);
  __chkstk_darwin(v284);
  v252 = (char *)&v233 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v259 = (uint64_t)&v233 - v23;
  v276 = type metadata accessor for ListItemViewModel.PerfHacks(0, v22);
  v275 = *(_QWORD *)(v276 - 8);
  __chkstk_darwin(v276);
  v274 = (char *)&v233 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v273 = (char *)&v233 - v26;
  v294 = sub_5C154(&qword_323D90);
  __chkstk_darwin(v294);
  v297 = (uint64_t)&v233 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = sub_5C154(&qword_323D98);
  __chkstk_darwin(v278);
  v279 = (uint64_t)&v233 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = sub_5C154(&qword_323DA0);
  v29 = __chkstk_darwin(v296);
  v283 = (char *)&v233 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = type metadata accessor for ShelfGridPadding(0, v29);
  v270 = *(_QWORD *)(v272 - 8);
  __chkstk_darwin(v272);
  v286 = (char *)&v233 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v271 = (char *)&v233 - v33;
  __chkstk_darwin(v34);
  v269 = (char *)&v233 - v35;
  v36 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v36);
  v262 = (uint64_t)&v233 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5C154(&qword_31F480);
  v39 = __chkstk_darwin(v38);
  v263 = (uint64_t)&v233 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = type metadata accessor for ImpressionsCalculator.Configuration(0, v39);
  v280 = *(_QWORD *)(v282 - 8);
  __chkstk_darwin(v282);
  v281 = (char *)&v233 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = sub_5C154(&qword_329DD0);
  v261 = *(_QWORD *)(v293 - 8);
  __chkstk_darwin(v293);
  v260 = (char *)&v233 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_5C154(&qword_323DA8);
  v265 = *(_QWORD *)(v266 - 8);
  __chkstk_darwin(v266);
  v264 = (char *)&v233 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = sub_5C154(&qword_323DB0);
  v267 = *(_QWORD *)(v268 - 8);
  __chkstk_darwin(v268);
  v45 = (char *)&v233 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_5C154(&qword_323DB8);
  __chkstk_darwin(v46);
  v48 = (char *)&v233 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5C154(&qword_320310);
  __chkstk_darwin(v49);
  v51 = (char *)&v233 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = sub_5C154(&qword_320318);
  __chkstk_darwin(v277);
  v53 = (char *)&v233 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v56 = (char *)&v233 - v55;
  v57 = sub_5C154(&qword_323C00);
  __chkstk_darwin(v57);
  v59 = (char *)&v233 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for ContentUnavailableComponentModel(0);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  __chkstk_darwin((char *)&v233 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = *(_QWORD *)(*(_QWORD *)(v66 + *(int *)(v65 + 64)) + 16);
  v295 = v65;
  if (v68)
  {
LABEL_4:
    v70 = v66;
    v71 = v300;
    v72 = v300 + *(int *)(v67 + 84);
    v73 = *(_QWORD *)(v72 + 24);
    v74 = swift_conformsToProtocol2(v73, &protocol descriptor for ShelfRenderModeConfiguring);
    if (v74)
      v75 = v74;
    else
      v75 = 0;
    if (v74)
      v76 = v73;
    else
      v76 = 0;
    if (!v76)
      goto LABEL_13;
    if (((*(uint64_t (**)(void))(v75 + 8))() & 1) == 0)
      goto LABEL_13;
    v77 = v273;
    v78 = static ListItemViewModel.perfHacks.getter();
    v79 = v274;
    static ListItemViewModel.PerfHacks.disableSwiftUIList.getter(v78);
    v80 = sub_648E0(&qword_323E80, (uint64_t (*)(uint64_t))&type metadata accessor for ListItemViewModel.PerfHacks, (uint64_t)&protocol conformance descriptor for ListItemViewModel.PerfHacks);
    v81 = v276;
    v82 = dispatch thunk of SetAlgebra.isSuperset(of:)(v79, v276, v80);
    v83 = *(void (**)(char *, uint64_t))(v275 + 8);
    v83(v79, v81);
    v84 = ((uint64_t (*)(char *, uint64_t))v83)(v77, v81);
    if ((v82 & 1) == 0)
    {
      v180 = v243;
      __chkstk_darwin(v84);
      v231 = v70;
      v232 = v71;
      v181 = sub_5C154(&qword_323E88);
      v182 = sub_F08F4();
      v183 = v246;
      List<>.init(content:)(sub_F08EC, &v229, v181, v182);
      v184 = sub_67060(&qword_323E60, &qword_323D68, (uint64_t)&protocol conformance descriptor for List<A, B>);
      v185 = v249;
      v186 = v248;
      View.listHasStackBehavior()(v248, v184);
      v187 = (*(uint64_t (**)(char *, uint64_t))(v247 + 8))(v183, v186);
      v188 = v254;
      PlainListStyle.init()(v187);
      v305 = v186;
      v306 = v184;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v305, &opaque type descriptor for <<opaque return type of View.listHasStackBehavior()>>, 1);
      v190 = v253;
      v191 = v251;
      v192 = v244;
      View.listStyle<A>(_:)(v188, v251, v244, OpaqueTypeConformance2, &protocol witness table for PlainListStyle);
      (*(void (**)(char *, uint64_t))(v257 + 8))(v188, v192);
      v193 = (*(uint64_t (**)(char *, uint64_t))(v250 + 8))(v185, v191);
      v194 = v281;
      static ImpressionsCalculator.Configuration.tenth.getter(v193);
      v195 = v72 + *(int *)(v295 + 32);
      v305 = v191;
      v306 = v192;
      v307 = OpaqueTypeConformance2;
      v308 = &protocol witness table for PlainListStyle;
      v196 = swift_getOpaqueTypeConformance2(&v305, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
      v197 = v255;
      v198 = v258;
      View.impressionable(_:configuration:position:definesParentContext:)(v195, v194, 0, 1, 0, v258, v196);
      (*(void (**)(char *, uint64_t))(v280 + 8))(v194, v282);
      (*(void (**)(char *, uint64_t))(v256 + 8))(v190, v198);
      KeyPath = swift_getKeyPath(&unk_25DED0);
      v200 = (uint64_t)v252;
      v201 = v245;
      (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v252, v197, v245);
      v202 = v284;
      v203 = v200 + *(int *)(v284 + 36);
      *(_QWORD *)v203 = KeyPath;
      *(_BYTE *)(v203 + 8) = 1;
      (*(void (**)(char *, uint64_t))(v180 + 8))(v197, v201);
      v204 = v259;
      sub_66F14(v200, v259, &qword_323D88);
      v205 = v279;
      sub_5E1A4(v204, v279, &qword_323D88);
      swift_storeEnumTagMultiPayload(v205, v278, 1);
      v206 = sub_F05FC();
      v207 = sub_F07B0();
      v208 = (uint64_t)v283;
      _ConditionalContent<>.init(storage:)(v205, v277, v202, v206, v207);
      v209 = v297;
      sub_5E1A4(v208, v297, &qword_323DA0);
      swift_storeEnumTagMultiPayload(v209, v294, 0);
      v210 = sub_F0590();
      v211 = sub_67060(&qword_323E78, &qword_323D60, (uint64_t)&protocol conformance descriptor for ShelfGrid<A, B, C>);
      _ConditionalContent<>.init(storage:)(v209, v296, v298, v210, v211);
      sub_5E09C(v208, &qword_323DA0);
      return sub_5E09C(v204, &qword_323D88);
    }
    else
    {
LABEL_13:
      sub_5E11C(v70, v302, type metadata accessor for Shelf);
      sub_E8418(v303);
      v85 = v286;
      sub_E77B0();
      v86 = v292;
      sub_E87BC(v292, v87);
      v88 = v288;
      sub_5E11C(v71, v288, type metadata accessor for ShelfView);
      v89 = *(unsigned __int8 *)(v287 + 80);
      v90 = (v89 + 16) & ~v89;
      v91 = v90 + v285;
      v92 = v89 | 7;
      v93 = swift_allocObject(&unk_2EC3C8, v90 + v285, v89 | 7);
      sub_5E160(v88, v93 + v90, type metadata accessor for ShelfView);
      v94 = v71;
      v95 = v289;
      sub_5E11C(v94, v289, type metadata accessor for ShelfView);
      v96 = swift_allocObject(&unk_2EC3F0, v91, v92);
      sub_5E160(v95, v96 + v90, type metadata accessor for ShelfView);
      v97 = sub_5C154(&qword_323DC0);
      v98 = sub_5C154(&qword_323DC8);
      v99 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
      v100 = sub_667D0(&qword_323DD0);
      v101 = sub_667D0(&qword_323DD8);
      v102 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
      v305 = v293;
      v306 = v102;
      v103 = swift_getOpaqueTypeConformance2(&v305, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)>>, 1);
      v305 = v101;
      v306 = v103;
      v104 = swift_getOpaqueTypeConformance2(&v305, &opaque type descriptor for <<opaque return type of View.figaroLocationPositionOverride(_:)>>, 1);
      v305 = v100;
      v306 = v104;
      v105 = swift_getOpaqueTypeConformance2(&v305, &opaque type descriptor for <<opaque return type of View.shelfItemDebugBorder()>>, 1);
      v106 = sub_F03C8(&qword_323DE0, &qword_323DC8, (void (*)(void))sub_F03AC);
      v230 = v99;
      v107 = v290;
      ShelfGrid.init(_:layout:padding:spacing:shelfPosition:itemContent:itemDivider:)(v302, v303, v85, v86, 0, 1, sub_F0310, v93, sub_F0360, v96, v295, v97, v98, v230, v105, v106);
      v108 = v291;
      v110 = v297;
      v109 = v298;
      (*(void (**)(uint64_t, char *, uint64_t))(v291 + 16))(v297, v107, v298);
      swift_storeEnumTagMultiPayload(v110, v294, 1);
      v111 = sub_F0590();
      v112 = sub_67060(&qword_323E78, &qword_323D60, (uint64_t)&protocol conformance descriptor for ShelfGrid<A, B, C>);
      _ConditionalContent<>.init(storage:)(v110, v296, v109, v111, v112);
      return (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v107, v109);
    }
  }
  v234 = v63;
  v235 = v46;
  v236 = v45;
  v237 = v49;
  v238 = v48;
  v239 = v53;
  v240 = v51;
  v242 = (uint64_t)&v233 - v64;
  v241 = v56;
  v69 = v66;
  sub_5E1A4(v66 + *(int *)(v65 + 60), (uint64_t)v59, &qword_323C00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60) == 1)
  {
    sub_5E09C((uint64_t)v59, &qword_323C00);
    v67 = v304;
    v66 = v69;
    goto LABEL_4;
  }
  v114 = v242;
  sub_5E160((uint64_t)v59, v242, type metadata accessor for ContentUnavailableComponentModel);
  v308 = (void *)v60;
  v309 = sub_648E0(&qword_320030, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
  v115 = sub_668BC(&v305);
  sub_5E11C(v114, (uint64_t)v115, type metadata accessor for ContentUnavailableComponentModel);
  v116 = sub_F0B00();
  v117 = v260;
  ComponentView.init(_:content:)(&v305, sub_E76F0, 0, &type metadata for _ComponentContentByType, v116);
  v118 = v234;
  v119 = sub_5E11C(v114, v234, type metadata accessor for ContentUnavailableComponentModel);
  v120 = v281;
  static ImpressionsCalculator.Configuration.half.getter(v119);
  v121 = v262;
  sub_5E1A4(v118 + *(int *)(v60 + 44), v262, &qword_321EA8);
  v122 = v121;
  v123 = v263;
  sub_66F14(v122, v263, &qword_31F480);
  v124 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
  v125 = v264;
  v126 = v293;
  View.impressionable(_:configuration:position:definesParentContext:)(v123, v120, 0, 1, 0, v293, v124);
  sub_5E09C(v123, &qword_31F480);
  v127 = *(void (**)(char *, uint64_t))(v280 + 8);
  v128 = v282;
  v127(v120, v282);
  (*(void (**)(char *, uint64_t))(v261 + 8))(v117, v126);
  v129 = sub_6685C(v118, type metadata accessor for ContentUnavailableComponentModel);
  v130 = v300;
  v131 = v300 + *(int *)(v304 + 84);
  static ImpressionsCalculator.Configuration.tenth.getter(v129);
  v132 = v131 + *(int *)(v295 + 32);
  v305 = v126;
  v306 = v124;
  v133 = swift_getOpaqueTypeConformance2(&v305, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  v134 = v236;
  v135 = v266;
  View.impressionable(_:configuration:position:definesParentContext:)(v132, v120, 0, 1, 0, v266, v133);
  v127(v120, v128);
  v136 = (*(uint64_t (**)(char *, uint64_t))(v265 + 8))(v125, v135);
  v137 = static Edge.Set.leading.getter(v136);
  v138 = v269;
  v139 = sub_E77B0();
  v140 = COERCE_DOUBLE(ShelfGridPadding.leading.getter(v139));
  v142 = v141;
  v143 = *(void (**)(char *, uint64_t))(v270 + 8);
  v144 = v138;
  v145 = v272;
  v143(v144, v272);
  v146 = 0.0;
  v147 = 0.0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if ((v142 & 1) == 0)
  {
    v147 = EdgeInsets.init(_all:)(v140);
    v148 = v151;
    v149 = v152;
    v150 = v153;
  }
  v154 = v267;
  v155 = (uint64_t)v238;
  v156 = v268;
  (*(void (**)(char *, char *, uint64_t))(v267 + 16))(v238, v134, v268);
  v157 = v155 + *(int *)(v235 + 36);
  *(_BYTE *)v157 = v137;
  *(double *)(v157 + 8) = v147;
  *(_QWORD *)(v157 + 16) = v148;
  *(_QWORD *)(v157 + 24) = v149;
  *(_QWORD *)(v157 + 32) = v150;
  *(_BYTE *)(v157 + 40) = v142 & 1;
  v158 = (*(uint64_t (**)(char *, uint64_t))(v154 + 8))(v134, v156);
  v159 = static Edge.Set.trailing.getter(v158);
  v160 = v271;
  v161 = sub_E77B0();
  v162 = COERCE_DOUBLE(ShelfGridPadding.trailing.getter(v161));
  v164 = v163;
  v143(v160, v145);
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = (uint64_t)v240;
  v169 = (uint64_t)v239;
  if ((v164 & 1) == 0)
  {
    v146 = EdgeInsets.init(_all:)(v162);
    v165 = v170;
    v166 = v171;
    v167 = v172;
  }
  sub_5E1A4(v155, v168, &qword_323DB8);
  v173 = v168 + *(int *)(v237 + 36);
  *(_BYTE *)v173 = v159;
  *(double *)(v173 + 8) = v146;
  *(_QWORD *)(v173 + 16) = v165;
  *(_QWORD *)(v173 + 24) = v166;
  *(_QWORD *)(v173 + 32) = v167;
  *(_BYTE *)(v173 + 40) = v164 & 1;
  sub_5E09C(v155, &qword_323DB8);
  v174 = Shelf.insetsPageMargin.getter();
  if ((v174 & 1) != 0)
  {
    v175 = v304;
    v176 = v130 + *(int *)(v304 + 48);
    v177 = *(_QWORD *)v176;
    v178 = *(_BYTE *)(v176 + 8);
    sub_64DD8(*(_QWORD *)v176, v178);
    sub_7864C(v177, v178, &v305);
    v174 = sub_64FFC(v177, v178);
    v179 = v305 == 2;
    if (v305 == 2)
    {
      v215 = 0.0;
    }
    else
    {
      v212 = v130 + *(int *)(v175 + 44);
      v213 = *(_QWORD *)v212;
      v214 = *(_BYTE *)(v212 + 8);
      sub_64DD8(*(_QWORD *)v212, v214);
      sub_768E8(v213, v214);
      v174 = sub_64FFC(v213, v214);
      v215 = INFINITY;
    }
  }
  else
  {
    v215 = 0.0;
    v179 = 1;
  }
  v216 = v294;
  v217 = v279;
  v218 = v278;
  v219 = v277;
  v220 = static Alignment.center.getter(v174);
  sub_74618(0.0, 1, 0.0, 1, v215, v179, 0.0, 1, v169, 0.0, 1, 0.0, 1, v220, v221);
  sub_5E09C(v168, &qword_320310);
  v222 = (uint64_t)v241;
  sub_66F14(v169, (uint64_t)v241, &qword_320318);
  sub_5E1A4(v222, v217, &qword_320318);
  swift_storeEnumTagMultiPayload(v217, v218, 0);
  v223 = sub_F05FC();
  v224 = sub_F07B0();
  v225 = (uint64_t)v283;
  _ConditionalContent<>.init(storage:)(v217, v219, v284, v223, v224);
  v226 = v297;
  sub_5E1A4(v225, v297, &qword_323DA0);
  swift_storeEnumTagMultiPayload(v226, v216, 0);
  v227 = sub_F0590();
  v228 = sub_67060(&qword_323E78, &qword_323D60, (uint64_t)&protocol conformance descriptor for ShelfGrid<A, B, C>);
  _ConditionalContent<>.init(storage:)(v226, v296, v298, v227, v228);
  sub_5E09C(v225, &qword_323DA0);
  sub_5E09C(v222, &qword_320318);
  return sub_6685C(v242, type metadata accessor for ContentUnavailableComponentModel);
}

uint64_t sub_E76F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;

  KeyPath = swift_getKeyPath(&unk_25DF00);
  v3 = type metadata accessor for HostProxy(0);
  v4 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v5 = Environment.init<A>(_:)(v3, v3, v4);
  v9 = (unint64_t)KeyPath;
  v10 = 0;
  v11 = v5;
  v12 = v6 & 1;
  swift_retain(KeyPath);
  v7 = sub_1E7510(&v9, (uint64_t)&_swiftEmptyDictionarySingleton);
  swift_release_n(KeyPath, 2);
  result = swift_release(v5);
  *a1 = v7;
  return result;
}

uint64_t sub_E77B0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  double v16;
  char v18;

  v1 = v0;
  v2 = (int *)type metadata accessor for ShelfView(0);
  v3 = 0.0;
  if (Shelf.insetsPageMargin.getter())
  {
    v4 = v0 + v2[12];
    v5 = *(_QWORD *)v4;
    v6 = *(_BYTE *)(v4 + 8);
    sub_64DD8(*(_QWORD *)v4, v6);
    sub_7864C(v5, v6, &v18);
    sub_64FFC(v5, v6);
    v7 = v18;
    if (v18 != 2)
    {
      v8 = v1 + v2[10];
      v9 = *(_QWORD *)v8;
      v10 = *(_BYTE *)(v8 + 8);
      sub_64DD8(*(_QWORD *)v8, v10);
      v11 = sub_768E8(v9, v10);
      sub_64FFC(v9, v10);
      v12 = v1 + v2[9];
      v13 = *(_QWORD *)v12;
      v14 = *(_BYTE *)(v12 + 8);
      sub_64DD8(*(_QWORD *)v12, v14);
      v15 = sub_768E8(v13, v14);
      sub_64FFC(v13, v14);
      v16 = 16.0;
      if ((v7 & 1) == 0)
        v16 = 32.0;
      if ((v11 & 1) == 0)
        v16 = 40.0;
      if ((v15 & 1) != 0)
        v3 = 32.0;
      else
        v3 = v16;
    }
  }
  return ShelfGridPadding.init(floatLiteral:)(v3);
}

uint64_t sub_E7900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for ShelfView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_5C154(&qword_323EE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Shelf(0) + 64));
  swift_bridgeObjectRetain(v22);
  v10 = sub_5C154(&qword_323EE8);
  v11 = sub_67060(&qword_323EF0, &qword_323EE8, (uint64_t)&protocol conformance descriptor for [A]);
  IndexedRandomAccessCollection.init(_:)(&v22, v10, v11);
  KeyPath = swift_getKeyPath(&unk_25DF28);
  sub_5E11C(a2, (uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ShelfView);
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_2EC418, v14 + v6, v13 | 7);
  sub_5E160((uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for ShelfView);
  v16 = swift_allocObject(&unk_2EC440, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_F0B54;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = sub_5C154(&qword_323EA0);
  v18 = sub_67060(&qword_323EF8, &qword_323EE0, (uint64_t)&protocol conformance descriptor for IndexedRandomAccessCollection<A>);
  v19 = sub_F0958();
  return ForEach<>.init(_:id:content:)(v9, KeyPath, sub_F0BCC, v16, v7, v17, v18, &protocol witness table for AnyHashable, v19);
}

uint64_t sub_E7B00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t DynamicType;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[40];
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v93 = a3;
  v78 = a1;
  v91 = a4;
  v5 = type metadata accessor for AutomationSemantics(0);
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  __chkstk_darwin(v5);
  v88 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_31F480);
  v8 = __chkstk_darwin(v7);
  v80 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for ImpressionsCalculator.Configuration(0, v8);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v73 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_5C154(&qword_323F00);
  v77 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v76 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_329DD0);
  v71 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_323DD8);
  v72 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5C154(&qword_323DD0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_5C154(&qword_323EA8);
  __chkstk_darwin(v92);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_5C154(&qword_323F08);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_5C154(&qword_323EA0);
  __chkstk_darwin(v83);
  v84 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E0D8((uint64_t)a2, (uint64_t)&v98);
  v24 = sub_F0B00();
  ComponentView.init(_:content:)(&v98, sub_E8284, 0, &type metadata for _ComponentContentByType, v24);
  sub_5E0D8((uint64_t)a2, (uint64_t)v94);
  v25 = sub_5C154(&qword_31EF38);
  v26 = sub_5C154(&qword_323F10);
  if ((swift_dynamicCast(&v95, v94, v25, v26, 6) & 1) != 0)
  {
    v27 = *((_QWORD *)&v96 + 1);
    v28 = v97;
    v29 = sub_66898(&v95, *((uint64_t *)&v96 + 1));
    *((_QWORD *)&v99 + 1) = v27;
    v100 = *(_QWORD *)(v28 + 8);
    v30 = sub_668BC(&v98);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v30, v29, v27);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v95);
  }
  else
  {
    v97 = 0;
    v95 = 0u;
    v96 = 0u;
    sub_5E09C((uint64_t)&v95, &qword_323F18);
    v98 = 0u;
    v99 = 0u;
    v100 = 0;
  }
  v70 = type metadata accessor for ShelfView(0);
  sub_789DC((uint64_t)&v95);
  v31 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
  View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)(&v98, &v95, v12, v31);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v95);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v14, v12);
  sub_5E09C((uint64_t)&v98, &qword_323F20);
  *(_QWORD *)&v98 = v12;
  *((_QWORD *)&v98 + 1) = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)>>, 1);
  View.figaroLocationPositionOverride(_:)(v78, v15, OpaqueTypeConformance2);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v17, v15);
  v34 = static Alignment.center.getter(v33);
  v36 = v35;
  v37 = (uint64_t)v21;
  v38 = &v21[*(int *)(v92 + 36)];
  v39 = v73;
  static ImpressionsCalculator.Configuration.half.getter();
  v41 = a2[3];
  v40 = a2[4];
  sub_66898(a2, v41);
  v42 = (uint64_t)v80;
  dispatch thunk of ViewModel.impressionMetrics.getter(v41, *(_QWORD *)(v40 + 8));
  v43 = v76;
  View.impressionable(_:configuration:position:definesParentContext:)(v42, v39, 0, 1, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
  sub_5E09C(v42, &qword_31F480);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v39, v82);
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v38, v43, v79);
  v44 = (uint64_t *)&v38[*(int *)(sub_5C154(&qword_323EC0) + 36)];
  *v44 = v34;
  v44[1] = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v37, v19, v75);
  v45 = a2[3];
  v46 = sub_66898(a2, v45);
  DynamicType = swift_getDynamicType(v46, v45, 1);
  v48 = _typeName(_:qualified:)(DynamicType, 0);
  v50 = v49;
  v51 = a2[3];
  v52 = a2[4];
  sub_66898(a2, v51);
  v53 = dispatch thunk of ComponentModel.id.getter(&v98, v51, v52);
  v54 = AnyHashable.description.getter(v53);
  v56 = v55;
  sub_5DCEC((uint64_t)&v98);
  *((_QWORD *)&v99 + 1) = &type metadata for String;
  *(_QWORD *)&v98 = v54;
  *((_QWORD *)&v98 + 1) = v56;
  v57 = (uint64_t *)(v93 + *(int *)(v70 + 84));
  v59 = *v57;
  v58 = v57[1];
  *((_QWORD *)&v96 + 1) = &type metadata for String;
  *(_QWORD *)&v95 = v59;
  *((_QWORD *)&v95 + 1) = v58;
  v60 = swift_bridgeObjectRetain(v58);
  v61 = v88;
  static AutomationSemantics.shelfItem(itemKind:id:parentId:)(v48, v50, &v98, &v95, v60);
  swift_bridgeObjectRelease(v50);
  sub_5E09C((uint64_t)&v95, &qword_31F8B0);
  sub_5E09C((uint64_t)&v98, &qword_31F8B0);
  v62 = sub_F0A04();
  v63 = v85;
  View.automationSemantics(_:)(v61, v92, v62);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v61, v90);
  sub_5E09C(v37, &qword_323EA8);
  v64 = v86;
  v65 = (uint64_t)v84;
  v66 = v87;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v84, v63, v87);
  v67 = v65 + *(int *)(v83 + 36);
  *(_BYTE *)(v67 + 32) = 0;
  *(_OWORD *)v67 = 0u;
  *(_OWORD *)(v67 + 16) = 0u;
  (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v66);
  return sub_66F14(v65, v91, &qword_323EA0);
}

uint64_t sub_E8284@<X0>(uint64_t *a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  char v16;
  uint64_t v17;
  char v18;

  KeyPath = swift_getKeyPath(&unk_25DF00);
  v3 = type metadata accessor for HostProxy(0);
  v4 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v5 = Environment.init<A>(_:)(v3, v3, v4);
  v7 = v6;
  v8 = (void *)swift_getKeyPath(&unk_25DE18);
  v9 = swift_getKeyPath(&unk_25DF58);
  v10 = (void *)swift_getKeyPath(&unk_25DE18);
  v15 = (unint64_t)KeyPath;
  v16 = 0;
  v17 = v5;
  v18 = v7 & 1;
  swift_retain(KeyPath);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  v11 = sub_1E7510(&v15, (uint64_t)&_swiftEmptyDictionarySingleton);
  swift_release(KeyPath);
  v12 = sub_1E783C(v8, 0, v9, 0, v11);
  swift_release(v9);
  swift_release(v8);
  swift_bridgeObjectRelease(v11);
  v13 = sub_1E76C8(v10, 0, v12);
  swift_bridgeObjectRelease(v12);
  swift_release(KeyPath);
  swift_release(v9);
  swift_release(v8);
  swift_release_n(v10, 2);
  result = swift_release(v5);
  *a1 = v13;
  return result;
}

uint64_t sub_E8418@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;

  v2 = v1;
  v54 = a1;
  v3 = type metadata accessor for ViewSizeConditions(0);
  v4 = __chkstk_darwin(v3);
  v53 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SizeConstants.Environment(0, v4);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for SizeConstants(0);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = __chkstk_darwin(v11);
  v46 = (uint64_t)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ShelfGridType(0, v12);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ShelfGridBreakpoint(0, v15);
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = type metadata accessor for ShelfGridLayoutContext(0, v19);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v2 + *(int *)(type metadata accessor for ShelfView(0) + 84);
  sub_5E11C(v27, (uint64_t)v26, type metadata accessor for Shelf);
  v45 = *(_QWORD *)(*(_QWORD *)(v27 + *(int *)(v24 + 64)) + 16);
  v28 = sub_5C154(&qword_323BE8);
  State.wrappedValue.getter(v21, v28);
  v29 = *(_QWORD *)(v27 + 24);
  v30 = swift_conformsToProtocol2(v29, &protocol descriptor for ShelfGridLayoutConfiguring);
  if (v30)
    v31 = v30;
  else
    v31 = 0;
  if (v30)
    v32 = v29;
  else
    v32 = 0;
  if (v32)
    dispatch thunk of static ShelfGridLayoutConfiguring.shelfGridType.getter();
  else
    static ShelfGridType.vertical.getter(0, v31);
  v33 = v46;
  sub_78618(v46);
  v34 = sub_76D64((uint64_t)v10);
  SizeConstants.env.getter(v34);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v10, v49);
  v36 = v53;
  SizeConstants.Environment.viewSizeConditions.getter(v35);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v52);
  ShelfGridLayoutContext.init(itemsCount:breakpoint:gridType:dynamicTypeSize:viewSizeConditions:)(v45, v21, v17, v33, v36);
  v37 = *((_QWORD *)v26 + 3);
  v38 = swift_conformsToProtocol2(v37, &protocol descriptor for ShelfGridLayoutConfiguring);
  if (v38)
    v39 = v38;
  else
    v39 = 0;
  if (v38)
    v40 = v37;
  else
    v40 = 0;
  if (v40)
  {
    dispatch thunk of static ShelfGridLayoutConfiguring.shelfGridLayout(context:)(v23);
  }
  else
  {
    v41 = v54;
    *v54 = 1;
    v42 = enum case for ShelfGridLayout.vertical(_:);
    v43 = type metadata accessor for ShelfGridLayout(0, 0, v39);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v41, v42, v43);
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v50);
  return sub_6685C((uint64_t)v26, type metadata accessor for Shelf);
}

uint64_t sub_E87BC@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v37 = a1;
  v4 = type metadata accessor for SizeConstants.Spacing(0, a2);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for SizeConstants.Environment(0, v5);
  v8 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SizeConstants(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_323BF8);
  __chkstk_darwin(v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v3 + *(int *)(type metadata accessor for ShelfView(0) + 84);
  v19 = type metadata accessor for Shelf(0);
  sub_5E1A4(v18 + *(int *)(v19 + 44), (uint64_t)v17, &qword_323BF8);
  v20 = type metadata accessor for ShelfGridSpacing(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v20) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v37, v17, v20);
  sub_5E09C((uint64_t)v17, &qword_323BF8);
  v22 = sub_76D64((uint64_t)v14);
  SizeConstants.env.getter(v22);
  v23 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v24 = v23(v14, v11);
  v25 = SizeConstants.Environment.isCompact.getter(v24);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v34);
  v26 = sub_76D64((uint64_t)v14);
  SizeConstants.spacing.getter(v26);
  v27 = v23(v14, v11);
  v28 = v36;
  v29 = v35;
  if ((v25 & 1) != 0)
    v30 = SizeConstants.Spacing.l.getter(v27);
  else
    v30 = SizeConstants.Spacing.xxl.getter(v27);
  v32 = v30;
  v33 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v7, v28);
  return ShelfGridSpacing.init(floatLiteral:)(v33, v32);
}

uint64_t sub_E8A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v51 = a3;
  v43 = type metadata accessor for ShelfView(0);
  v5 = *(_QWORD *)(v43 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v43);
  v8 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ShelfGridItem(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_5C154(&qword_329DD0);
  v41 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5C154(&qword_323DD8);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_5C154(&qword_323DD0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v39 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_5C154(&qword_323DC0);
  v44 = *(_QWORD *)(v46 - 8);
  v18 = __chkstk_darwin(v46);
  v42 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, a1, v9, v18);
  v45 = a2;
  sub_5E11C(a2, (uint64_t)v8, type metadata accessor for ShelfView);
  v20 = *(unsigned __int8 *)(v5 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = swift_allocObject(&unk_2EC468, v21 + v6, v20 | 7);
  v23 = sub_5E160((uint64_t)v8, v22 + v21, type metadata accessor for ShelfView);
  ShelfGridItem.model.getter(&v55, v23);
  v24 = sub_F0B00();
  ComponentView.init(_:content:)(&v55, sub_F12CC, v22, &type metadata for _ComponentContentByType, v24);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  ShelfGridItem.model.getter(&v55, v25);
  v26 = sub_5C154(&qword_31EF38);
  v27 = sub_5C154(&qword_323F48);
  if ((swift_dynamicCast(v53, &v55, v26, v27, 6) & 1) == 0)
  {
    v54 = 0;
    memset(v53, 0, sizeof(v53));
  }
  sub_789DC((uint64_t)v52);
  v28 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
  v29 = v40;
  View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)(v53, v52, v40, v28);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v52);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v29);
  v30 = sub_5E09C((uint64_t)v53, &qword_323F20);
  v31 = ShelfGridItem.offset.getter(v30);
  v55 = v29;
  v56 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)>>, 1);
  v33 = v39;
  v34 = v49;
  View.figaroLocationPositionOverride(_:)(v31, v49, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v34);
  v55 = v34;
  v56 = OpaqueTypeConformance2;
  v35 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.figaroLocationPositionOverride(_:)>>, 1);
  v36 = v42;
  v37 = v50;
  View.shelfItemDebugBorder()(v50, v35);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v37);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v51, v36, v46);
}

uint64_t sub_E8E4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t KeyPath;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int *v43;
  uint64_t v44;
  int *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  char *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (**v96)(_QWORD, _QWORD, _QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t *v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  __int128 v118;
  char v119;
  uint64_t v120;
  char v121;

  v110 = a2;
  v109 = type metadata accessor for TextComponent(0);
  __chkstk_darwin(v109);
  v107 = (uint64_t *)((char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v108 = (uint64_t)&v90 - v5;
  v105 = type metadata accessor for SheetHeaderComponent(0);
  __chkstk_darwin(v105);
  v104 = (uint64_t *)((char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v106 = (uint64_t)&v90 - v8;
  v103 = type metadata accessor for SeriesRoomHeaderComponent(0);
  __chkstk_darwin(v103);
  v101 = (uint64_t *)((char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v100 = (int *)type metadata accessor for ReviewBrickComponent(0);
  __chkstk_darwin(v100);
  v11 = (char **)((char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __chkstk_darwin(v12);
  v114 = (uint64_t)&v90 - v14;
  v97 = type metadata accessor for Font.TextStyle(0, v13);
  v96 = *(void (***)(_QWORD, _QWORD, _QWORD))(v97 - 8);
  __chkstk_darwin(v97);
  v92 = (uint64_t)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = (int *)type metadata accessor for InfoItemComponent(0);
  __chkstk_darwin(v91);
  v17 = (char **)((char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v115 = (uint64_t)&v90 - v19;
  v20 = sub_5C154(&qword_323248);
  v95 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (int *)type metadata accessor for DescriptionHeaderComponent(0);
  __chkstk_darwin(v23);
  v25 = (char **)((char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v28 = (char *)&v90 - v27;
  v111 = (uint64_t)&v90 - v27;
  KeyPath = swift_getKeyPath(&unk_25DF00);
  v112 = KeyPath;
  v30 = type metadata accessor for HostProxy(0);
  v99 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  v98 = v30;
  v113 = Environment.init<A>(_:)(v30, v30, v99);
  v102 = v31;
  v94 = a1 + *(int *)(type metadata accessor for ShelfView(0) + 28);
  swift_retain(KeyPath);
  v90 = v22;
  Binding.projectedValue.getter(v20);
  *v25 = swift_getKeyPath(&unk_25DC68);
  v32 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v25, v32, 0);
  v33 = (_QWORD *)((char *)v25 + v23[5]);
  *v33 = swift_getKeyPath(&unk_25DF88);
  v34 = sub_5C154(&qword_320290);
  v93 = v34;
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  v35 = (_QWORD *)((char *)v25 + v23[6]);
  *v35 = swift_getKeyPath(&unk_25DC38);
  v36 = sub_5C154(&qword_320160);
  v37 = v35;
  v38 = v36;
  swift_storeEnumTagMultiPayload(v37, v36, 0);
  sub_66F14((uint64_t)v22, (uint64_t)v25 + v23[7], &qword_323248);
  sub_5E160((uint64_t)v25, (uint64_t)v28, type metadata accessor for DescriptionHeaderComponent);
  *v17 = swift_getKeyPath(&unk_25DF88);
  swift_storeEnumTagMultiPayload(v17, v34, 0);
  v39 = (_QWORD *)((char *)v17 + v91[5]);
  *v39 = swift_getKeyPath(&unk_25DC68);
  v40 = v32;
  swift_storeEnumTagMultiPayload(v39, v32, 0);
  *(_QWORD *)&v118 = 0x4014000000000000;
  v41 = v92;
  v96[13](v92, enum case for Font.TextStyle.largeTitle(_:), v97);
  v42 = sub_8C30C();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v118, v41, &type metadata for Double, v42);
  sub_5E160((uint64_t)v17, v115, type metadata accessor for InfoItemComponent);
  v43 = (int *)swift_getKeyPath(&unk_25DE18);
  v91 = v43;
  v44 = swift_getKeyPath(&unk_25DF58);
  v92 = v44;
  *v11 = swift_getKeyPath(&unk_25DC68);
  swift_storeEnumTagMultiPayload(v11, v40, 0);
  v45 = v100;
  v46 = (char *)v11 + v100[5];
  *(_QWORD *)v46 = swift_getKeyPath(&unk_25DF58);
  v46[8] = 0;
  v47 = (_QWORD *)((char *)v11 + v45[6]);
  *v47 = swift_getKeyPath(&unk_25DC38);
  swift_storeEnumTagMultiPayload(v47, v38, 0);
  v48 = (char *)v11 + v45[7];
  *(_QWORD *)v48 = swift_getKeyPath(&unk_25DFB8);
  v48[8] = 0;
  sub_5E160((uint64_t)v11, v114, type metadata accessor for ReviewBrickComponent);
  v49 = type metadata accessor for ProfileRestrictions(0);
  v50 = sub_648E0((unint64_t *)&qword_321CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  swift_retain(v43);
  swift_retain(v44);
  v96 = (void (**)(_QWORD, _QWORD, _QWORD))EnvironmentObject.init()(v49, v50);
  v97 = v51;
  v100 = v96;
  v52 = (uint64_t)v90;
  Binding.projectedValue.getter(v95);
  v53 = Environment.init<A>(_:)(v98, v98, v99);
  v54 = (uint64_t)v101;
  *v101 = v53;
  *(_BYTE *)(v54 + 8) = v55 & 1;
  v56 = (int *)v103;
  v57 = (_QWORD *)(v54 + *(int *)(v103 + 20));
  *v57 = swift_getKeyPath(&unk_25E000);
  v58 = sub_5C154(&qword_3202E8);
  swift_storeEnumTagMultiPayload(v57, v58, 0);
  v59 = v54 + v56[6];
  *(_QWORD *)v59 = swift_getKeyPath(&unk_25DCF8);
  *(_BYTE *)(v59 + 8) = 0;
  v60 = v54 + v56[7];
  *(_QWORD *)v60 = swift_getKeyPath(&unk_25DEA8);
  *(_WORD *)(v60 + 8) = 0;
  *(_QWORD *)(v60 + 16) = 0;
  sub_66F14(v52, v54 + v56[8], &qword_323248);
  v61 = swift_getKeyPath(&unk_25DC68);
  v62 = (uint64_t)v104;
  *v104 = v61;
  swift_storeEnumTagMultiPayload(v62, v40, 0);
  v63 = v105;
  v64 = (_QWORD *)(v62 + *(int *)(v105 + 20));
  *v64 = swift_getKeyPath(&unk_25DF88);
  v65 = v93;
  swift_storeEnumTagMultiPayload(v64, v93, 0);
  v66 = (_QWORD *)(v62 + *(int *)(v63 + 24));
  *v66 = swift_getKeyPath(&unk_25DC38);
  swift_storeEnumTagMultiPayload(v66, v38, 0);
  v67 = v106;
  sub_5E160(v62, v106, type metadata accessor for SheetHeaderComponent);
  v68 = swift_getKeyPath(&unk_25DC68);
  v69 = (uint64_t)v107;
  *v107 = v68;
  swift_storeEnumTagMultiPayload(v69, v40, 0);
  v70 = (_QWORD *)(v69 + *(int *)(v109 + 20));
  *v70 = swift_getKeyPath(&unk_25DF88);
  swift_storeEnumTagMultiPayload(v70, v65, 0);
  v71 = v108;
  sub_5E160(v69, v108, type metadata accessor for TextComponent);
  v72 = v112;
  v118 = (unint64_t)v112;
  v119 = 0;
  v120 = v113;
  v121 = v102 & 1;
  v73 = sub_1E7510(&v118, (uint64_t)&_swiftEmptyDictionarySingleton);
  swift_release(v72);
  v74 = sub_1E7C6C(v111, v73);
  swift_bridgeObjectRelease(v73);
  v75 = sub_1E7C50(v74);
  swift_bridgeObjectRelease(v74);
  v76 = sub_1E7C34(v75);
  swift_bridgeObjectRelease(v75);
  v77 = sub_1E7C10(v115, v76);
  swift_bridgeObjectRelease(v76);
  v117 = 0;
  v116 = 0;
  v78 = v91;
  v79 = v92;
  v80 = sub_1E783C(v91, 0, v92, 0, v77);
  swift_release(v79);
  swift_release(v78);
  swift_bridgeObjectRelease(v77);
  v81 = sub_1E7BF4(v80);
  swift_bridgeObjectRelease(v80);
  v82 = v114;
  v83 = sub_1E7BD0(v114, v81);
  swift_bridgeObjectRelease(v81);
  v84 = sub_1E7A70(v96, v97, v83);
  v85 = v100;

  swift_bridgeObjectRelease(v83);
  v86 = sub_1E7A4C(v54, v84);
  swift_bridgeObjectRelease(v84);
  v87 = sub_1E7A28(v67, v86);
  swift_bridgeObjectRelease(v86);
  v88 = sub_1E7A04(v71, v87);
  swift_bridgeObjectRelease(v87);
  swift_release(v112);
  swift_release(v79);
  swift_release(v78);

  swift_release(v113);
  sub_6685C(v71, type metadata accessor for TextComponent);
  sub_6685C(v67, type metadata accessor for SheetHeaderComponent);
  sub_6685C(v54, type metadata accessor for SeriesRoomHeaderComponent);
  sub_6685C(v82, type metadata accessor for ReviewBrickComponent);
  sub_6685C(v115, type metadata accessor for InfoItemComponent);
  result = sub_6685C(v111, type metadata accessor for DescriptionHeaderComponent);
  *v110 = v88;
  return result;
}

double sub_E987C@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t KeyPath;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  double result;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  char v96;
  _BYTE v97[7];
  char v98;
  _BYTE v99[7];
  char v100;
  _BYTE v101[7];
  char v102;
  _BYTE v103[7];
  char v104;
  _BYTE v105[7];
  char v106;
  int v107;
  __int16 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[2];
  _OWORD v118[8];
  _OWORD v119[2];
  _OWORD v120[8];
  _OWORD v121[2];
  _QWORD v122[5];
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _OWORD v137[3];

  v94 = a1;
  v95 = a2;
  v85 = type metadata accessor for Font.TextStyle(0, a3);
  v92 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v91 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DynamicTypeSize(0);
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  __chkstk_darwin(v4);
  v84 = (uint64_t)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SizeConstants(0);
  v89 = *(_QWORD *)(v6 - 8);
  v90 = v6;
  __chkstk_darwin(v6);
  v88 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorConstants(0);
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  __chkstk_darwin(v8);
  v81 = (uint64_t)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeeAllFooterComponentModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for ShelfView(0);
  __chkstk_darwin(v13);
  v93 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_323F28);
  __chkstk_darwin(v15);
  v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ListItemComponentModel(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ShelfGridItem.model.getter(v122, v22);
  v23 = sub_5C154(&qword_31EF38);
  if ((swift_dynamicCast(v17, v122, v23, v18, 6) & 1) != 0)
  {
    v80 = v23;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    v24 = sub_5E160((uint64_t)v17, (uint64_t)v21, type metadata accessor for ListItemComponentModel);
    v25 = ShelfGridItem.isInLastRow.getter(v24);
    v26 = v93;
    v27 = v94;
    sub_5E11C(v94, v93, type metadata accessor for ShelfView);
    v28 = (uint64_t)v21;
    if ((v25 & 1) != 0)
    {
      v29 = v13[21];
      v30 = type metadata accessor for Shelf(0);
      sub_5E1A4(v26 + v29 + *(int *)(v30 + 56), (uint64_t)&v129, &qword_323F40);
      sub_5DC98(&v129, (uint64_t)v118);
      sub_6685C(v26, type metadata accessor for ShelfView);
      v31 = swift_dynamicCast(v12, v118, v80, v10, 6);
      v32 = v95;
      if (!v31)
      {
        sub_F0C18((uint64_t)&v129);
        sub_66F14((uint64_t)&v129, (uint64_t)v120, &qword_323F38);
        v71 = sub_5C154(&qword_323E00);
        v72 = sub_F0434();
        _ConditionalContent<>.init(storage:)(v120, v71, &type metadata for EmptyView, v72, &protocol witness table for EmptyView);
        goto LABEL_9;
      }
      sub_6685C((uint64_t)v12, type metadata accessor for SeeAllFooterComponentModel);
    }
    else
    {
      sub_6685C(v26, type metadata accessor for ShelfView);
      v32 = v95;
    }
    v35 = v81;
    v36 = sub_76AA0(v81);
    v93 = ColorConstants.booksSeparator.getter(v36);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 8))(v35, v83);
    LODWORD(v83) = static Edge.Set.leading.getter(v37);
    v38 = v88;
    sub_76D64(v88);
    v95 = v21;
    v39 = v27 + v13[10];
    v40 = *(_QWORD *)v39;
    v41 = *(_BYTE *)(v39 + 8);
    sub_64DD8(*(_QWORD *)v39, v41);
    v42 = sub_768E8(v40, v41);
    sub_64FFC(v40, v41);
    v43 = v84;
    v44 = sub_78618(v84);
    LOBYTE(v40) = DynamicTypeSize.isAccessibilitySize.getter(v44);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v43, v87);
    *(_QWORD *)&v120[0] = ListItemViewModel.unscaledDividerInset(isCompact:isAX:)(v42 & 1, v40 & 1);
    v46 = v91;
    v45 = v92;
    v47 = v85;
    (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v91, enum case for Font.TextStyle.body(_:), v85);
    v48 = sub_79620();
    SizeConstants.scaledValue<A>(_:relativeTo:)(&v129, v120, v46, &type metadata for CGFloat, v48);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v38, v90);
    v49 = EdgeInsets.init(_all:)(*(double *)&v129);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v56 = v27 + v13[13];
    v57 = *(_QWORD *)v56;
    LOBYTE(v47) = *(_BYTE *)(v56 + 8);
    sub_64DD8(*(_QWORD *)v56, v47);
    v58 = sub_7881C(v57, v47);
    v59 = sub_64FFC(v57, v47);
    v60 = static Alignment.center.getter(v59);
    _FrameLayout.init(width:height:alignment:)(&v123, 0, 1, *(_QWORD *)&v58, 0, v60, v61);
    v62 = v123;
    LOBYTE(v45) = v124;
    v63 = v125;
    LOBYTE(v46) = v126;
    v64 = v127;
    v65 = v128;
    KeyPath = swift_getKeyPath(&unk_25DD58);
    v67 = swift_getKeyPath(&unk_25DCF8);
    v68 = swift_getKeyPath(&unk_25DCC8);
    v106 = 0;
    v104 = v45;
    v102 = (char)v46;
    v100 = 0;
    v98 = 0;
    v96 = 0;
    *(_QWORD *)&v129 = v93;
    WORD4(v129) = 256;
    *(_DWORD *)((char *)&v129 + 10) = v107;
    HIWORD(v129) = v108;
    LOBYTE(v130) = v83;
    *(_DWORD *)((char *)&v130 + 1) = v118[0];
    DWORD1(v130) = *(_DWORD *)((char *)v118 + 3);
    *((double *)&v130 + 1) = v49;
    *(_QWORD *)&v131 = v51;
    *((_QWORD *)&v131 + 1) = v53;
    *(_QWORD *)&v132 = v55;
    BYTE8(v132) = 0;
    HIDWORD(v132) = *(_DWORD *)&v105[3];
    *(_DWORD *)((char *)&v132 + 9) = *(_DWORD *)v105;
    *(_QWORD *)&v133 = v62;
    BYTE8(v133) = v45;
    HIDWORD(v133) = *(_DWORD *)&v103[3];
    *(_DWORD *)((char *)&v133 + 9) = *(_DWORD *)v103;
    *(_QWORD *)&v134 = v63;
    BYTE8(v134) = (_BYTE)v46;
    HIDWORD(v134) = *(_DWORD *)&v101[3];
    *(_DWORD *)((char *)&v134 + 9) = *(_DWORD *)v101;
    *(_QWORD *)&v135 = v64;
    *((_QWORD *)&v135 + 1) = v65;
    *(_QWORD *)&v136 = KeyPath;
    v28 = (uint64_t)v95;
    BYTE8(v136) = 0;
    HIDWORD(v136) = *(_DWORD *)&v99[3];
    *(_DWORD *)((char *)&v136 + 9) = *(_DWORD *)v99;
    *(_QWORD *)&v137[0] = v67;
    BYTE8(v137[0]) = 0;
    HIDWORD(v137[0]) = *(_DWORD *)&v97[3];
    *(_DWORD *)((char *)v137 + 9) = *(_DWORD *)v97;
    *(_QWORD *)&v137[1] = v68;
    WORD4(v137[1]) = 256;
    sub_F0C08((uint64_t)&v129);
    sub_66F14((uint64_t)&v129, (uint64_t)v120, &qword_323F38);
    v69 = sub_5C154(&qword_323E00);
    v70 = sub_F0434();
    _ConditionalContent<>.init(storage:)(v120, v69, &type metadata for EmptyView, v70, &protocol witness table for EmptyView);
LABEL_9:
    v120[6] = v115;
    v120[7] = v116;
    v121[0] = v117[0];
    *(_OWORD *)((char *)v121 + 11) = *(_OWORD *)((char *)v117 + 11);
    v120[2] = v111;
    v120[3] = v112;
    v120[4] = v113;
    v120[5] = v114;
    v120[0] = v109;
    v120[1] = v110;
    sub_F0C10((uint64_t)v120);
    sub_66F14((uint64_t)v120, (uint64_t)&v129, &qword_323F30);
    v73 = sub_5C154(&qword_323DF0);
    v74 = sub_F03AC();
    _ConditionalContent<>.init(storage:)(&v129, v73, &type metadata for EmptyView, v74, &protocol witness table for EmptyView);
    sub_6685C(v28, type metadata accessor for ListItemComponentModel);
    v135 = v118[6];
    v136 = v118[7];
    v137[0] = v119[0];
    *(_OWORD *)((char *)v137 + 12) = *(_OWORD *)((char *)v119 + 12);
    v131 = v118[2];
    v132 = v118[3];
    v133 = v118[4];
    v134 = v118[5];
    v129 = v118[0];
    v130 = v118[1];
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  sub_5E09C((uint64_t)v17, &qword_323F28);
  sub_F0BFC((uint64_t)v120);
  sub_66F14((uint64_t)v120, (uint64_t)v118, &qword_323F30);
  v33 = sub_5C154(&qword_323DF0);
  v34 = sub_F03AC();
  _ConditionalContent<>.init(storage:)(v118, v33, &type metadata for EmptyView, v34, &protocol witness table for EmptyView);
  v32 = v95;
LABEL_10:
  v75 = v136;
  v32[6] = v135;
  v32[7] = v75;
  v32[8] = v137[0];
  *(_OWORD *)((char *)v32 + 140) = *(_OWORD *)((char *)v137 + 12);
  v76 = v132;
  v32[2] = v131;
  v32[3] = v76;
  v77 = v134;
  v32[4] = v133;
  v32[5] = v77;
  result = *(double *)&v129;
  v79 = v130;
  *v32 = v129;
  v32[1] = v79;
  return result;
}

uint64_t sub_EA110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;

  v45 = a1;
  v1 = sub_5C154(&qword_323D50);
  __chkstk_darwin(v1);
  v44 = (uint64_t)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - v10;
  v12 = sub_5C154(&qword_31FE40);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - v17;
  __chkstk_darwin(v19);
  v46 = (char *)&v40 - v20;
  type metadata accessor for ShelfView(0);
  v21 = Shelf.cardSetData.getter();
  if (v21)
  {
    v22 = v21;
    v23 = type metadata accessor for BaseObjectGraph(0);
    ActionDispatcher.init()(v23);
    v47 = v22;
    v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v24(v18, v15, v12);
    v25 = sub_F02C8();
    ActionDispatcher.add<A>(_:)(&v47, v12, &type metadata for FlowActionCardSetPresentationImplementation, v25);
    v42 = *(void (**)(char *, uint64_t))(v13 + 8);
    v42(v15, v12);
    swift_bridgeObjectRelease(v22);
    v26 = sub_5C154(&qword_320150);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = (v27 + 32) & ~v27;
    v43 = v28 + *(_QWORD *)(v13 + 72);
    v41 = v27 | 7;
    v29 = swift_allocObject(v26, v43, v27 | 7);
    v24((char *)(v29 + v28), v18, v12);
    v40 = v23;
    ActionDispatcher.init()(v23);
    ActionDispatcher.add(contentsOf:)(v29 + v28, v12);
    swift_setDeallocating(v29);
    swift_arrayDestroy(v29 + v28, 1, v12);
    swift_deallocClassInstance(v29, 32, 7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v5, 0, 1, v12);
    v30 = v44;
    sub_5E1A4((uint64_t)v5, v44, &qword_323D50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v30, 1, v12) == 1)
    {
      v31 = v46;
      ActionDispatcher.init()(v40);
      sub_5E09C(v30, &qword_323D50);
    }
    else
    {
      v31 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v46, v30, v12);
    }
    sub_5E09C((uint64_t)v5, &qword_323D50);
    v42(v18, v12);
    v33 = v43;
    v34 = v41;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    sub_5E1A4((uint64_t)v11, (uint64_t)v8, &qword_323D50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) == 1)
    {
      v32 = type metadata accessor for BaseObjectGraph(0);
      ActionDispatcher.init()(v32);
      sub_5E09C((uint64_t)v8, &qword_323D50);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v46, v8, v12);
    }
    sub_5E09C((uint64_t)v11, &qword_323D50);
    v35 = *(unsigned __int8 *)(v13 + 80);
    v28 = (v35 + 32) & ~v35;
    v33 = v28 + *(_QWORD *)(v13 + 72);
    v34 = v35 | 7;
    v31 = v46;
  }
  v36 = sub_5C154(&qword_320150);
  v37 = swift_allocObject(v36, v33, v34);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v37 + v28, v31, v12);
  v38 = type metadata accessor for BaseObjectGraph(0);
  ActionDispatcher.init()(v38);
  ActionDispatcher.add(contentsOf:)(v37 + v28, v12);
  swift_setDeallocating(v37);
  swift_arrayDestroy(v37 + v28, 1, v12);
  swift_deallocClassInstance(v37, 32, 7);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v31, v12);
}

uint64_t EnvironmentValues.shelfID.getter()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_EA694();
  EnvironmentValues.subscript.getter(&type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v0);
  return v2;
}

double sub_EA59C@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_EA694();
  EnvironmentValues.subscript.getter(&type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

double sub_EA5E8@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_EA694();
  EnvironmentValues.subscript.getter(&type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_EA634(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[2];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = sub_EA694();
  swift_bridgeObjectRetain(v1);
  return EnvironmentValues.subscript.setter(v4, &type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v2);
}

unint64_t sub_EA694()
{
  unint64_t result;

  result = qword_323BE0;
  if (!qword_323BE0)
  {
    result = swift_getWitnessTable(&unk_25DBFC, &type metadata for ShelfIDKey);
    atomic_store(result, (unint64_t *)&qword_323BE0);
  }
  return result;
}

uint64_t EnvironmentValues.shelfID.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD v4[2];

  v4[0] = a1;
  v4[1] = a2;
  v2 = sub_EA694();
  return EnvironmentValues.subscript.setter(v4, &type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v2);
}

_QWORD *sub_EA710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(char *, char *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SectionData(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - v10;
  v12 = type metadata accessor for ShelfView(0);
  v13 = (_QWORD *)AppAnalyticsData.wrappedValue.getter();
  sub_5E1A4(v1 + *(int *)(v12 + 96), (uint64_t)v4, (uint64_t *)&unk_326100);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_5E09C((uint64_t)v4, (uint64_t *)&unk_326100);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    v14 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v14(v8, v11, v5);
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_573F0(0, v13[2] + 1, 1, v13);
    v16 = v13[2];
    v15 = v13[3];
    if (v16 >= v15 >> 1)
      v13 = sub_573F0((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    v21 = v5;
    v22 = sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    v23 = sub_648E0((unint64_t *)&unk_322500, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
    v17 = (char *)sub_668BC(&v20);
    v14(v17, v8, v5);
    v13[2] = v16 + 1;
    sub_F1344(&v20, &v13[6 * v16 + 4]);
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v8, v5);
    v18(v11, v5);
  }
  return v13;
}

uint64_t sub_EA958@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t *v33;

  v33 = a1;
  v1 = type metadata accessor for SeriesRoomListHeaderComponent(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - v5;
  v7 = (int *)type metadata accessor for ReviewsHeaderComponent(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for DefaultHeaderComponent(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - v17;
  *v15 = swift_getKeyPath(&unk_25DC38);
  v19 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v15, v19, 0);
  sub_5E160((uint64_t)v15, (uint64_t)v18, type metadata accessor for DefaultHeaderComponent);
  *(_QWORD *)v9 = swift_getKeyPath(&unk_25DB18);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v20 = &v9[v7[5]];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_25DC68);
  v21 = sub_5C154((uint64_t *)&unk_32A010);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = &v9[v7[6]];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_25E030);
  v22[40] = 0;
  v23 = &v9[v7[7]];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_25E060);
  v24 = sub_5C154(&qword_326110);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  sub_5E160((uint64_t)v9, (uint64_t)v12, type metadata accessor for ReviewsHeaderComponent);
  *v3 = swift_getKeyPath(&unk_25DC38);
  swift_storeEnumTagMultiPayload(v3, v19, 0);
  v25 = (char *)v3 + *(int *)(v1 + 20);
  *(_QWORD *)v25 = swift_getKeyPath(&unk_25DB18);
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 0;
  sub_5E160((uint64_t)v3, (uint64_t)v6, type metadata accessor for SeriesRoomListHeaderComponent);
  v26 = sub_1E7CF4((uint64_t)v18, (uint64_t)&_swiftEmptyDictionarySingleton);
  v27 = sub_1E7C34(v26);
  swift_bridgeObjectRelease(v26);
  v28 = sub_1E7CD0((uint64_t)v12, v27);
  swift_bridgeObjectRelease(v27);
  v29 = sub_1E7CAC((uint64_t)v6, v28);
  swift_bridgeObjectRelease(v28);
  v30 = sub_1E7C90(v29);
  swift_bridgeObjectRelease(v29);
  sub_6685C((uint64_t)v6, type metadata accessor for SeriesRoomListHeaderComponent);
  sub_6685C((uint64_t)v12, type metadata accessor for ReviewsHeaderComponent);
  result = sub_6685C((uint64_t)v18, type metadata accessor for DefaultHeaderComponent);
  *v33 = v30;
  return result;
}

uint64_t sub_EAC78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = type metadata accessor for DefaultFooterComponent(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - v6;
  *v4 = swift_getKeyPath(&unk_25DC38);
  v8 = sub_5C154(&qword_320160);
  swift_storeEnumTagMultiPayload(v4, v8, 0);
  sub_5E160((uint64_t)v4, (uint64_t)v7, type metadata accessor for DefaultFooterComponent);
  v9 = sub_1E7E88((uint64_t)v7, (uint64_t)&_swiftEmptyDictionarySingleton);
  v10 = sub_1E7C34(v9);
  swift_bridgeObjectRelease(v9);
  v11 = sub_1E7D18(v10);
  swift_bridgeObjectRelease(v10);
  result = sub_6685C((uint64_t)v7, type metadata accessor for DefaultFooterComponent);
  *a1 = v11;
  return result;
}

uint64_t sub_EAD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_F0264();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void (*EnvironmentValues.shelfID.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = sub_EA694();
  v3[5] = v4;
  EnvironmentValues.subscript.getter(&type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v4);
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return sub_EAE48;
}

void sub_EAE48(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v2[2] = v4;
  v5 = v2[5];
  v2[3] = v3;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(v3);
    EnvironmentValues.subscript.setter(v2 + 2, &type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v5);
    swift_bridgeObjectRelease(v2[1]);
  }
  else
  {
    EnvironmentValues.subscript.setter(v2 + 2, &type metadata for ShelfIDKey, &type metadata for ShelfIDKey, v5);
  }
  free(v2);
}

uint64_t sub_EAEC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ShelfView.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ShelfView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  id v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v120)(char *, uint64_t, uint64_t);
  __n128 v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  char *v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t);
  __n128 v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int (*v183)(char *, uint64_t, uint64_t, __n128);
  __n128 v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int (*v197)(char *, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v206;
  char *v207;
  void (*v208)(char *, char *, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int (*v212)(char *, uint64_t, uint64_t);
  _QWORD *v213;
  int *v214;
  _QWORD *v215;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for SizeConstants(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v9);
    v13 = a3[5];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = v14;
      v19 = v16;
      v20 = 1;
    }
    else
    {
      v21 = *v15;
      *v14 = *v15;
      swift_retain(v21);
      v18 = v14;
      v19 = v16;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
    v22 = a3[6];
    v23 = (_QWORD *)((char *)a1 + v22);
    v24 = (_QWORD *)((char *)a2 + v22);
    v25 = sub_5C154(&qword_320308);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = v23;
      v28 = v25;
      v29 = 1;
    }
    else
    {
      v30 = *v24;
      *v23 = *v24;
      swift_retain(v30);
      v27 = v23;
      v28 = v25;
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    v31 = a3[7];
    v32 = (_QWORD *)((char *)a1 + v31);
    v33 = (char *)a2 + v31;
    v34 = *(_QWORD *)((char *)a2 + v31);
    v35 = *(_QWORD *)((char *)a2 + v31 + 8);
    *v32 = v34;
    v32[1] = v35;
    swift_retain(v34);
    swift_retain(v35);
    v36 = *(int *)(sub_5C154(&qword_323248) + 32);
    v37 = (char *)v32 + v36;
    v38 = &v33[v36];
    v39 = type metadata accessor for NavigationBarTransitionInfo(0);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = sub_5C154(&qword_323250);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      v42.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    v43 = a3[8];
    v44 = (char *)a1 + v43;
    v45 = (char *)a2 + v43;
    v46 = type metadata accessor for ShelfGridBreakpoint(0, v42);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
    v47 = *(int *)(sub_5C154(&qword_323BE8) + 28);
    v48 = *(_QWORD *)&v45[v47];
    *(_QWORD *)&v44[v47] = v48;
    v49 = a3[9];
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    v52 = *(_QWORD *)v51;
    LOBYTE(v45) = v51[8];
    swift_retain(v48);
    sub_64DD8(v52, (char)v45);
    *(_QWORD *)v50 = v52;
    v50[8] = (char)v45;
    v53 = a3[10];
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    v56 = *(_QWORD *)v55;
    LOBYTE(v45) = v55[8];
    sub_64DD8(*(_QWORD *)v55, (char)v45);
    *(_QWORD *)v54 = v56;
    v54[8] = (char)v45;
    v57 = a3[11];
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    v60 = *(_QWORD *)v59;
    LOBYTE(v45) = v59[8];
    sub_64DD8(*(_QWORD *)v59, (char)v45);
    *(_QWORD *)v58 = v60;
    v58[8] = (char)v45;
    v61 = a3[12];
    v62 = (char *)a1 + v61;
    v63 = (char *)a2 + v61;
    v64 = *(_QWORD *)v63;
    LOBYTE(v45) = v63[8];
    sub_64DD8(*(_QWORD *)v63, (char)v45);
    *(_QWORD *)v62 = v64;
    v62[8] = (char)v45;
    v65 = a3[13];
    v66 = (char *)a1 + v65;
    v67 = (char *)a2 + v65;
    v68 = *(_QWORD *)v67;
    LOBYTE(v45) = v67[8];
    sub_64DD8(*(_QWORD *)v67, (char)v45);
    *(_QWORD *)v66 = v68;
    v66[8] = (char)v45;
    v69 = a3[14];
    v70 = (_QWORD *)((char *)a1 + v69);
    v71 = (_QWORD *)((char *)a2 + v69);
    v72 = sub_5C154(&qword_323BF0);
    if (swift_getEnumCaseMultiPayload(v71, v72) == 1)
    {
      v73 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v70, v71, v73);
      v74 = 1;
    }
    else
    {
      v75 = *v71;
      *v70 = *v71;
      swift_retain(v75);
      v74 = 0;
    }
    swift_storeEnumTagMultiPayload(v70, v72, v74);
    v76 = a3[15];
    v77 = (char *)a1 + v76;
    v78 = (char *)a2 + v76;
    v79 = *((_BYTE *)a2 + v76 + 40);
    if ((v79 & 1) != 0)
    {
      v80 = *(_OWORD *)(v78 + 24);
      *(_OWORD *)(v77 + 24) = v80;
      (**(void (***)(char *))(v80 - 8))(v77);
    }
    else
    {
      v81 = *(_QWORD *)v78;
      *(_QWORD *)v77 = *(_QWORD *)v78;
      swift_retain(v81);
    }
    v77[40] = v79;
    v82 = a3[16];
    v83 = (char *)a1 + v82;
    v84 = (char *)a2 + v82;
    v85 = *(id *)v84;
    v86 = v84[8];
    sub_AAFF4(*(id *)v84, v86);
    *(_QWORD *)v83 = v85;
    v83[8] = v86;
    v87 = a3[17];
    v88 = (_QWORD *)((char *)a1 + v87);
    v89 = (_QWORD *)((char *)a2 + v87);
    v90 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v89, v90) == 1)
    {
      v91 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v88, v89, v91);
      v92 = 1;
    }
    else
    {
      v93 = *v89;
      *v88 = *v89;
      swift_retain(v93);
      v92 = 0;
    }
    swift_storeEnumTagMultiPayload(v88, v90, v92);
    v94 = a3[18];
    v95 = (char *)a1 + v94;
    v96 = (char *)a2 + v94;
    if ((*((_BYTE *)a2 + v94 + 40) & 1) != 0)
    {
      v97 = *((_QWORD *)v96 + 3);
      if (v97)
      {
        v98 = *((_QWORD *)v96 + 4);
        *((_QWORD *)v95 + 3) = v97;
        *((_QWORD *)v95 + 4) = v98;
        (**(void (***)(char *))(v97 - 8))(v95);
      }
      else
      {
        v100 = *((_OWORD *)v96 + 1);
        *(_OWORD *)v95 = *(_OWORD *)v96;
        *((_OWORD *)v95 + 1) = v100;
        *((_QWORD *)v95 + 4) = *((_QWORD *)v96 + 4);
      }
      v95[40] = 1;
    }
    else
    {
      v99 = *(_QWORD *)v96;
      *(_QWORD *)v95 = *(_QWORD *)v96;
      v95[40] = 0;
      swift_retain(v99);
    }
    v101 = a3[19];
    v102 = (char *)a1 + v101;
    v103 = (char *)a2 + v101;
    v104 = type metadata accessor for AppAnalyticsData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
    v105 = a3[20];
    v106 = (char *)a1 + v105;
    v107 = (char *)a2 + v105;
    v108 = *(_QWORD *)((char *)a2 + v105);
    LOBYTE(v103) = *((_BYTE *)a2 + v105 + 9);
    v109 = *((_BYTE *)a2 + v105 + 8);
    sub_EBB1C(v108, v109, (char)v103);
    *(_QWORD *)v106 = v108;
    v106[8] = v109;
    v106[9] = (char)v103;
    *((_QWORD *)v106 + 2) = *((_QWORD *)v107 + 2);
    v110 = a3[21];
    v213 = a1;
    v111 = (char *)a1 + v110;
    v215 = a2;
    v112 = (char *)a2 + v110;
    v113 = *(_QWORD *)((char *)a2 + v110 + 8);
    *(_QWORD *)v111 = *(_QWORD *)((char *)a2 + v110);
    *((_QWORD *)v111 + 1) = v113;
    v111[16] = *((_BYTE *)a2 + v110 + 16);
    *(_OWORD *)(v111 + 24) = *(_OWORD *)((char *)a2 + v110 + 24);
    v111[40] = *((_BYTE *)a2 + v110 + 40);
    v114 = (int *)type metadata accessor for Shelf(0);
    v115 = v114[8];
    v116 = &v111[v115];
    v117 = &v112[v115];
    v118 = type metadata accessor for ImpressionMetrics(0);
    v119 = *(_QWORD *)(v118 - 8);
    v120 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, __n128))(v119 + 48);
    v121 = swift_bridgeObjectRetain(v113);
    v212 = (unsigned int (*)(char *, uint64_t, uint64_t))v120;
    v211 = v119;
    if (v120(v117, 1, v118, v121))
    {
      v122 = sub_5C154(&qword_31F480);
      memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v116, v117, v118);
      v123.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
    }
    v124 = v114[9];
    v125 = &v111[v124];
    v126 = &v112[v124];
    v127 = type metadata accessor for Metrics.Location(0, v123);
    v128 = *(_QWORD *)(v127 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
    {
      v129 = sub_5C154(&qword_323B40);
      memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v125, v126, v127);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
    }
    v130 = v114[10];
    v131 = *(_OWORD *)&v112[v130 + 24];
    *(_OWORD *)&v111[v130 + 24] = v131;
    (**(void (***)(void))(v131 - 8))();
    v132 = v114[11];
    v133 = &v111[v132];
    v134 = &v112[v132];
    v135 = type metadata accessor for ShelfGridSpacing(0);
    v136 = *(_QWORD *)(v135 - 8);
    v214 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_5C154(&qword_323BF8);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v133, v134, v135);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v138 = v114[12];
    v139 = &v111[v138];
    v140 = &v112[v138];
    v141 = type metadata accessor for ShelfBackgroundViewModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
    v142 = v114[13];
    v143 = *(_OWORD *)&v112[v142 + 24];
    *(_OWORD *)&v111[v142 + 24] = v143;
    (**(void (***)(void))(v143 - 8))();
    v144 = v114[14];
    v145 = *(_OWORD *)&v112[v144 + 24];
    *(_OWORD *)&v111[v144 + 24] = v145;
    (**(void (***)(void))(v145 - 8))();
    v146 = v114[15];
    v147 = &v111[v146];
    v148 = &v112[v146];
    v149 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
    v150 = *((_QWORD *)v149 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v150 + 48))(v148, 1, v149))
    {
      v151 = sub_5C154(&qword_323C00);
      memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      v11 = v213;
    }
    else
    {
      v209 = v150;
      v210 = v118;
      v152 = *((_QWORD *)v148 + 1);
      *(_QWORD *)v147 = *(_QWORD *)v148;
      *((_QWORD *)v147 + 1) = v152;
      v153 = v149[5];
      v206 = &v148[v153];
      v207 = &v147[v153];
      v154 = type metadata accessor for LocalizerRequest(0);
      v155 = *(_QWORD *)(v154 - 8);
      v156 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v155 + 16);
      v157 = swift_bridgeObjectRetain(v152);
      v158 = v207;
      v208 = (void (*)(char *, char *, uint64_t))v156;
      v156(v158, v206, v154, v157);
      v159 = v149[6];
      v160 = &v147[v159];
      v161 = &v148[v159];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(&v148[v159], 1, v154))
      {
        v162 = sub_5C154(&qword_3217B8);
        memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
      }
      else
      {
        v208(v160, v161, v154);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v160, 0, 1, v154);
      }
      v163 = v149[7];
      v164 = &v147[v163];
      v165 = &v148[v163];
      *(_OWORD *)v164 = *(_OWORD *)v165;
      v164[16] = v165[16];
      v147[v149[8]] = v148[v149[8]];
      v166 = v149[9];
      v167 = &v147[v166];
      v168 = &v148[v166];
      v169 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 16))(v167, v168, v169);
      v170 = v149[10];
      v171 = *(_OWORD *)&v148[v170 + 24];
      *(_OWORD *)&v147[v170 + 24] = v171;
      (**(void (***)(void))(v171 - 8))();
      v172 = v149[11];
      v173 = &v147[v172];
      v174 = &v148[v172];
      v11 = v213;
      if (v212(&v148[v172], 1, v210))
      {
        v175 = sub_5C154(&qword_31F480);
        memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v211 + 16))(v173, v174, v210);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v211 + 56))(v173, 0, 1, v210);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v209 + 56))(v147, 0, 1, v149);
    }
    v176 = v114[16];
    v177 = *(_QWORD *)&v112[v176];
    *(_QWORD *)&v111[v176] = v177;
    v178 = v114[17];
    v179 = &v111[v178];
    v180 = &v112[v178];
    v181 = type metadata accessor for PaginationInfo(0);
    v182 = *(_QWORD *)(v181 - 8);
    v183 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v182 + 48);
    v184 = swift_bridgeObjectRetain(v177);
    if (v183(v180, 1, v181, v184))
    {
      v185 = sub_5C154(&qword_323C08);
      memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v179, v180, v181);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v179, 0, 1, v181);
    }
    v186 = v114[18];
    v187 = &v111[v186];
    v188 = &v112[v186];
    v189 = *(_QWORD *)&v112[v186 + 24];
    if (v189)
    {
      v190 = *((_QWORD *)v188 + 4);
      *((_QWORD *)v187 + 3) = v189;
      *((_QWORD *)v187 + 4) = v190;
      (**(void (***)(void))(v189 - 8))();
    }
    else
    {
      v191 = *((_OWORD *)v188 + 1);
      *(_OWORD *)v187 = *(_OWORD *)v188;
      *((_OWORD *)v187 + 1) = v191;
      *((_QWORD *)v187 + 4) = *((_QWORD *)v188 + 4);
    }
    v192 = v114[19];
    v193 = &v111[v192];
    v194 = &v112[v192];
    v195 = type metadata accessor for SectionData(0);
    v196 = *(_QWORD *)(v195 - 8);
    v197 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48);
    if (v197(v194, 1, v195))
    {
      v198 = sub_5C154((uint64_t *)&unk_326100);
      memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v193, v194, v195);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v193, 0, 1, v195);
    }
    v199 = v214[23];
    *(_QWORD *)((char *)v11 + v214[22]) = *(_QWORD *)((char *)v215 + v214[22]);
    v200 = *(_QWORD *)((char *)v215 + v199);
    *(_QWORD *)((char *)v11 + v199) = v200;
    v201 = v214[24];
    v202 = (char *)v11 + v201;
    v203 = (char *)v215 + v201;
    swift_retain(v200);
    if (v197(v203, 1, v195))
    {
      v204 = sub_5C154((uint64_t *)&unk_326100);
      memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v202, v203, v195);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v202, 0, 1, v195);
    }
  }
  return v11;
}

uint64_t sub_EBB1C(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for ShelfView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  int *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t result;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;

  v4 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)a1 + a2[6]);
  v10 = sub_5C154(&qword_320308);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)a1 + a2[7]);
  swift_release(*v12);
  swift_release(v12[1]);
  v13 = (char *)v12 + *(int *)(sub_5C154(&qword_323248) + 32);
  v14 = type metadata accessor for NavigationBarTransitionInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    v16.n128_f64[0] = (*(double (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  v17 = (char *)a1 + a2[8];
  v18 = type metadata accessor for ShelfGridBreakpoint(0, v16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = sub_5C154(&qword_323BE8);
  swift_release(*(_QWORD *)&v17[*(int *)(v19 + 28)]);
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[11]), *((_BYTE *)a1 + a2[11] + 8));
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[12]), *((_BYTE *)a1 + a2[12] + 8));
  sub_64FFC(*(_QWORD *)((char *)a1 + a2[13]), *((_BYTE *)a1 + a2[13] + 8));
  v20 = (_QWORD *)((char *)a1 + a2[14]);
  v21 = sub_5C154(&qword_323BF0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  v23 = (_QWORD *)((char *)a1 + a2[15]);
  if ((v23[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v23);
  else
    swift_release(*v23);
  sub_794D8(*(id *)((char *)a1 + a2[16]), *((_BYTE *)a1 + a2[16] + 8));
  v24 = (_QWORD *)((char *)a1 + a2[17]);
  v25 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  v27 = (_QWORD *)((char *)a1 + a2[18]);
  if ((v27[5] & 1) != 0)
  {
    if (v27[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v27);
  }
  else
  {
    swift_release(*v27);
  }
  v28 = (char *)a1 + a2[19];
  v29 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  sub_79528(*(_QWORD *)((char *)a1 + a2[20]), *((unsigned __int8 *)a1 + a2[20] + 8), *((_BYTE *)a1 + a2[20] + 9));
  v30 = (char *)a1 + a2[21];
  swift_bridgeObjectRelease(*((_QWORD *)v30 + 1));
  v31 = (int *)type metadata accessor for Shelf(0);
  v32 = &v30[v31[8]];
  v33 = type metadata accessor for ImpressionMetrics(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (!v35(v32, 1, v33))
    v36.n128_f64[0] = (*(double (**)(char *, uint64_t))(v34 + 8))(v32, v33);
  v37 = &v30[v31[9]];
  v38 = type metadata accessor for Metrics.Location(0, v36);
  v39 = *(_QWORD *)(v38 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v30[v31[10]]);
  v40 = &v30[v31[11]];
  v41 = type metadata accessor for ShelfGridSpacing(0);
  v42 = *(_QWORD *)(v41 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
  v43 = &v30[v31[12]];
  v44 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v30[v31[13]]);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v30[v31[14]]);
  v45 = &v30[v31[15]];
  v46 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v46 - 1) + 48))(v45, 1, v46))
  {
    v65 = v35;
    v66 = v34;
    v67 = v33;
    swift_bridgeObjectRelease(*((_QWORD *)v45 + 1));
    v47 = &v45[v46[5]];
    v48 = type metadata accessor for LocalizerRequest(0);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(void (**)(char *, uint64_t))(v49 + 8);
    v50(v47, v48);
    v51 = &v45[v46[6]];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v51, 1, v48))
      v50(v51, v48);
    v52 = &v45[v46[9]];
    v53 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v45[v46[10]]);
    v54 = &v45[v46[11]];
    if (!v65(v54, 1, v67))
      (*(void (**)(char *, uint64_t))(v66 + 8))(v54, v67);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v30[v31[16]]);
  v55 = &v30[v31[17]];
  v56 = type metadata accessor for PaginationInfo(0);
  v57 = *(_QWORD *)(v56 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v56);
  v58 = &v30[v31[18]];
  if (*((_QWORD *)v58 + 3))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v58);
  v59 = &v30[v31[19]];
  v60 = type metadata accessor for SectionData(0);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  if (!v62(v59, 1, v60))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v59, v60);
  swift_release(*(_QWORD *)((char *)a1 + a2[23]));
  v63 = (char *)a1 + a2[24];
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v62)(v63, 1, v60);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v63, v60);
  return result;
}

_QWORD *initializeWithCopy for ShelfView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  id v82;
  char v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unsigned __int8 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int (*v117)(char *, uint64_t, uint64_t);
  __n128 v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  char *v144;
  char *v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  __n128 v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int (*v180)(char *, uint64_t, uint64_t, __n128);
  __n128 v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int (*v194)(char *, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v203;
  char *v204;
  void (*v205)(char *, char *, uint64_t);
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unsigned int (*v210)(char *, uint64_t, uint64_t);
  int *v211;
  _QWORD *v212;

  v6 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v8);
  v10 = a3[5];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorConstants(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = v11;
    v16 = v13;
    v17 = 1;
  }
  else
  {
    v18 = *v12;
    *v11 = *v12;
    swift_retain(v18);
    v15 = v11;
    v16 = v13;
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v16, v17);
  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = sub_5C154(&qword_320308);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
    v24 = v20;
    v25 = v22;
    v26 = 1;
  }
  else
  {
    v27 = *v21;
    *v20 = *v21;
    swift_retain(v27);
    v24 = v20;
    v25 = v22;
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v25, v26);
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (char *)a2 + v28;
  v31 = *(_QWORD *)((char *)a2 + v28);
  v32 = *(_QWORD *)((char *)a2 + v28 + 8);
  *v29 = v31;
  v29[1] = v32;
  swift_retain(v31);
  swift_retain(v32);
  v33 = *(int *)(sub_5C154(&qword_323248) + 32);
  v34 = (char *)v29 + v33;
  v35 = &v30[v33];
  v36 = type metadata accessor for NavigationBarTransitionInfo(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = sub_5C154(&qword_323250);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    v39.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v40 = a3[8];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = type metadata accessor for ShelfGridBreakpoint(0, v39);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  v44 = *(int *)(sub_5C154(&qword_323BE8) + 28);
  v45 = *(_QWORD *)&v42[v44];
  *(_QWORD *)&v41[v44] = v45;
  v46 = a3[9];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  LOBYTE(v42) = v48[8];
  swift_retain(v45);
  sub_64DD8(v49, (char)v42);
  *(_QWORD *)v47 = v49;
  v47[8] = (char)v42;
  v50 = a3[10];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = *(_QWORD *)v52;
  LOBYTE(v42) = v52[8];
  sub_64DD8(*(_QWORD *)v52, (char)v42);
  *(_QWORD *)v51 = v53;
  v51[8] = (char)v42;
  v54 = a3[11];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = *(_QWORD *)v56;
  LOBYTE(v42) = v56[8];
  sub_64DD8(*(_QWORD *)v56, (char)v42);
  *(_QWORD *)v55 = v57;
  v55[8] = (char)v42;
  v58 = a3[12];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  v61 = *(_QWORD *)v60;
  LOBYTE(v42) = v60[8];
  sub_64DD8(*(_QWORD *)v60, (char)v42);
  *(_QWORD *)v59 = v61;
  v59[8] = (char)v42;
  v62 = a3[13];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  v65 = *(_QWORD *)v64;
  LOBYTE(v42) = v64[8];
  sub_64DD8(*(_QWORD *)v64, (char)v42);
  *(_QWORD *)v63 = v65;
  v63[8] = (char)v42;
  v66 = a3[14];
  v67 = (_QWORD *)((char *)a1 + v66);
  v68 = (_QWORD *)((char *)a2 + v66);
  v69 = sub_5C154(&qword_323BF0);
  if (swift_getEnumCaseMultiPayload(v68, v69) == 1)
  {
    v70 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v67, v68, v70);
    v71 = 1;
  }
  else
  {
    v72 = *v68;
    *v67 = *v68;
    swift_retain(v72);
    v71 = 0;
  }
  swift_storeEnumTagMultiPayload(v67, v69, v71);
  v73 = a3[15];
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = *((_BYTE *)a2 + v73 + 40);
  if ((v76 & 1) != 0)
  {
    v77 = *(_OWORD *)(v75 + 24);
    *(_OWORD *)(v74 + 24) = v77;
    (**(void (***)(char *))(v77 - 8))(v74);
  }
  else
  {
    v78 = *(_QWORD *)v75;
    *(_QWORD *)v74 = *(_QWORD *)v75;
    swift_retain(v78);
  }
  v74[40] = v76;
  v79 = a3[16];
  v80 = (char *)a1 + v79;
  v81 = (char *)a2 + v79;
  v82 = *(id *)v81;
  v83 = v81[8];
  sub_AAFF4(*(id *)v81, v83);
  *(_QWORD *)v80 = v82;
  v80[8] = v83;
  v84 = a3[17];
  v85 = (_QWORD *)((char *)a1 + v84);
  v86 = (_QWORD *)((char *)a2 + v84);
  v87 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v86, v87) == 1)
  {
    v88 = type metadata accessor for DataStack(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v85, v86, v88);
    v89 = 1;
  }
  else
  {
    v90 = *v86;
    *v85 = *v86;
    swift_retain(v90);
    v89 = 0;
  }
  swift_storeEnumTagMultiPayload(v85, v87, v89);
  v91 = a3[18];
  v92 = (char *)a1 + v91;
  v93 = (char *)a2 + v91;
  if ((*((_BYTE *)a2 + v91 + 40) & 1) != 0)
  {
    v94 = *((_QWORD *)v93 + 3);
    if (v94)
    {
      v95 = *((_QWORD *)v93 + 4);
      *((_QWORD *)v92 + 3) = v94;
      *((_QWORD *)v92 + 4) = v95;
      (**(void (***)(char *))(v94 - 8))(v92);
    }
    else
    {
      v97 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v97;
      *((_QWORD *)v92 + 4) = *((_QWORD *)v93 + 4);
    }
    v92[40] = 1;
  }
  else
  {
    v96 = *(_QWORD *)v93;
    *(_QWORD *)v92 = *(_QWORD *)v93;
    v92[40] = 0;
    swift_retain(v96);
  }
  v98 = a3[19];
  v99 = (char *)a1 + v98;
  v100 = (char *)a2 + v98;
  v101 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
  v102 = a3[20];
  v103 = (char *)a1 + v102;
  v104 = (char *)a2 + v102;
  v105 = *(_QWORD *)((char *)a2 + v102);
  LOBYTE(v100) = *((_BYTE *)a2 + v102 + 9);
  v106 = *((_BYTE *)a2 + v102 + 8);
  sub_EBB1C(v105, v106, (char)v100);
  *(_QWORD *)v103 = v105;
  v103[8] = v106;
  v103[9] = (char)v100;
  *((_QWORD *)v103 + 2) = *((_QWORD *)v104 + 2);
  v211 = a3;
  v212 = a2;
  v107 = a3[21];
  v108 = (char *)a1 + v107;
  v109 = (char *)a2 + v107;
  v110 = *(_QWORD *)((char *)a2 + v107 + 8);
  *(_QWORD *)v108 = *(_QWORD *)((char *)a2 + v107);
  *((_QWORD *)v108 + 1) = v110;
  v108[16] = *((_BYTE *)a2 + v107 + 16);
  *(_OWORD *)(v108 + 24) = *(_OWORD *)((char *)a2 + v107 + 24);
  v108[40] = *((_BYTE *)a2 + v107 + 40);
  v111 = (int *)type metadata accessor for Shelf(0);
  v112 = v111[8];
  v113 = &v108[v112];
  v114 = &v109[v112];
  v115 = type metadata accessor for ImpressionMetrics(0);
  v116 = *(_QWORD *)(v115 - 8);
  v117 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48);
  v118 = swift_bridgeObjectRetain(v110);
  v210 = v117;
  v209 = v116;
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v117)(v114, 1, v115, v118))
  {
    v119 = sub_5C154(&qword_31F480);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v113, v114, v115);
    v120.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
  }
  v121 = v111[9];
  v122 = &v108[v121];
  v123 = &v109[v121];
  v124 = type metadata accessor for Metrics.Location(0, v120);
  v125 = *(_QWORD *)(v124 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
  {
    v126 = sub_5C154(&qword_323B40);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v122, v123, v124);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
  }
  v127 = v111[10];
  v128 = *(_OWORD *)&v109[v127 + 24];
  *(_OWORD *)&v108[v127 + 24] = v128;
  (**(void (***)(void))(v128 - 8))();
  v129 = v111[11];
  v130 = &v108[v129];
  v131 = &v109[v129];
  v132 = type metadata accessor for ShelfGridSpacing(0);
  v133 = *(_QWORD *)(v132 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
  {
    v134 = sub_5C154(&qword_323BF8);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v130, v131, v132);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
  }
  v135 = v111[12];
  v136 = &v108[v135];
  v137 = &v109[v135];
  v138 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16))(v136, v137, v138);
  v139 = v111[13];
  v140 = *(_OWORD *)&v109[v139 + 24];
  *(_OWORD *)&v108[v139 + 24] = v140;
  (**(void (***)(void))(v140 - 8))();
  v141 = v111[14];
  v142 = *(_OWORD *)&v109[v141 + 24];
  *(_OWORD *)&v108[v141 + 24] = v142;
  (**(void (***)(void))(v142 - 8))();
  v143 = v111[15];
  v144 = &v108[v143];
  v145 = &v109[v143];
  v146 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v147 = *((_QWORD *)v146 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v147 + 48))(v145, 1, v146))
  {
    v148 = sub_5C154(&qword_323C00);
    memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
  }
  else
  {
    v206 = v147;
    v207 = v115;
    v208 = a1;
    v149 = *((_QWORD *)v145 + 1);
    *(_QWORD *)v144 = *(_QWORD *)v145;
    *((_QWORD *)v144 + 1) = v149;
    v150 = v146[5];
    v203 = &v145[v150];
    v204 = &v144[v150];
    v151 = type metadata accessor for LocalizerRequest(0);
    v152 = *(_QWORD *)(v151 - 8);
    v153 = *(void (**)(char *, char *, uint64_t))(v152 + 16);
    v154 = swift_bridgeObjectRetain(v149);
    v155 = v204;
    v205 = v153;
    ((void (*)(char *, char *, uint64_t, __n128))v153)(v155, v203, v151, v154);
    v156 = v146[6];
    v157 = &v144[v156];
    v158 = &v145[v156];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(&v145[v156], 1, v151))
    {
      v159 = sub_5C154(&qword_3217B8);
      memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    }
    else
    {
      v205(v157, v158, v151);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v157, 0, 1, v151);
    }
    v160 = v146[7];
    v161 = &v144[v160];
    v162 = &v145[v160];
    *(_OWORD *)v161 = *(_OWORD *)v162;
    v161[16] = v162[16];
    v144[v146[8]] = v145[v146[8]];
    v163 = v146[9];
    v164 = &v144[v163];
    v165 = &v145[v163];
    v166 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v164, v165, v166);
    v167 = v146[10];
    v168 = *(_OWORD *)&v145[v167 + 24];
    *(_OWORD *)&v144[v167 + 24] = v168;
    (**(void (***)(void))(v168 - 8))();
    v169 = v146[11];
    v170 = &v144[v169];
    v171 = &v145[v169];
    a1 = v208;
    if (v210(&v145[v169], 1, v207))
    {
      v172 = sub_5C154(&qword_31F480);
      memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v170, v171, v207);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v170, 0, 1, v207);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v206 + 56))(v144, 0, 1, v146);
  }
  v173 = v111[16];
  v174 = *(_QWORD *)&v109[v173];
  *(_QWORD *)&v108[v173] = v174;
  v175 = v111[17];
  v176 = &v108[v175];
  v177 = &v109[v175];
  v178 = type metadata accessor for PaginationInfo(0);
  v179 = *(_QWORD *)(v178 - 8);
  v180 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v179 + 48);
  v181 = swift_bridgeObjectRetain(v174);
  if (v180(v177, 1, v178, v181))
  {
    v182 = sub_5C154(&qword_323C08);
    memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v176, v177, v178);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
  }
  v183 = v111[18];
  v184 = &v108[v183];
  v185 = &v109[v183];
  v186 = *(_QWORD *)&v109[v183 + 24];
  if (v186)
  {
    v187 = *((_QWORD *)v185 + 4);
    *((_QWORD *)v184 + 3) = v186;
    *((_QWORD *)v184 + 4) = v187;
    (**(void (***)(void))(v186 - 8))();
  }
  else
  {
    v188 = *((_OWORD *)v185 + 1);
    *(_OWORD *)v184 = *(_OWORD *)v185;
    *((_OWORD *)v184 + 1) = v188;
    *((_QWORD *)v184 + 4) = *((_QWORD *)v185 + 4);
  }
  v189 = v111[19];
  v190 = &v108[v189];
  v191 = &v109[v189];
  v192 = type metadata accessor for SectionData(0);
  v193 = *(_QWORD *)(v192 - 8);
  v194 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48);
  if (v194(v191, 1, v192))
  {
    v195 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v190, v191, v192);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
  }
  v196 = v211[23];
  *(_QWORD *)((char *)a1 + v211[22]) = *(_QWORD *)((char *)v212 + v211[22]);
  v197 = *(_QWORD *)((char *)v212 + v196);
  *(_QWORD *)((char *)a1 + v196) = v197;
  v198 = v211[24];
  v199 = (char *)a1 + v198;
  v200 = (char *)v212 + v198;
  swift_retain(v197);
  if (v194(v200, 1, v192))
  {
    v201 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v199, v200, v192);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v199, 0, 1, v192);
  }
  return a1;
}

_QWORD *assignWithCopy for ShelfView(uint64_t a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  id v99;
  char v100;
  void *v101;
  char v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t (*v138)(char *, uint64_t, uint64_t);
  int v139;
  __n128 v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t (*v148)(char *, uint64_t, uint64_t);
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(char *, uint64_t, uint64_t);
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int *v168;
  uint64_t v169;
  uint64_t (*v170)(char *, uint64_t, int *);
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(char *, char *, uint64_t, __n128);
  __n128 v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  size_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t (*v193)(void);
  int v194;
  size_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  __int128 v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t (*v220)(char *, uint64_t, uint64_t);
  int v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t (*v234)(char *, uint64_t, uint64_t);
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v248;
  char *v249;
  char *v250;
  __int128 v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  int v259;
  void (*v260)(char *, char *, uint64_t);
  char *v261;
  uint64_t v262;
  _QWORD *v263;
  char *v264;
  char *__dsta;
  char *__dst;
  uint64_t (*v267)(char *, uint64_t, uint64_t);
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  int *v271;
  int *v272;
  uint64_t v273;

  v5 = (_QWORD *)a1;
  if ((_QWORD *)a1 != a2)
  {
    sub_5E09C(a1, &qword_320160);
    v6 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for SizeConstants(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, a2, v7);
      v8 = v5;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *v5 = *a2;
      swift_retain(v11);
      v8 = v5;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)v5 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_5E09C((uint64_t)v5 + v12, (uint64_t *)&unk_32A010);
    v15 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorConstants(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v21 = a3[6];
    v22 = (_QWORD *)((char *)v5 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    sub_5E09C((uint64_t)v5 + v21, &qword_320308);
    v24 = sub_5C154(&qword_320308);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = v22;
      v27 = v24;
      v28 = 1;
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v26 = v22;
      v27 = v24;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  v30 = a3[7];
  v31 = (char *)v5 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)v5 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30);
  *(_QWORD *)((char *)v5 + v30) = v34;
  swift_retain(v34);
  swift_release(v33);
  v35 = *((_QWORD *)v32 + 1);
  v36 = *((_QWORD *)v31 + 1);
  *((_QWORD *)v31 + 1) = v35;
  swift_retain(v35);
  swift_release(v36);
  v37 = *(int *)(sub_5C154(&qword_323248) + 32);
  v38 = &v31[v37];
  v39 = &v32[v37];
  v40 = type metadata accessor for NavigationBarTransitionInfo(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v40);
LABEL_17:
    v46 = sub_5C154(&qword_323250);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v38, v39, v40);
LABEL_18:
  v47 = a3[8];
  v48 = (char *)v5 + v47;
  v49 = (char *)a2 + v47;
  v50 = type metadata accessor for ShelfGridBreakpoint(0, v45);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  v51 = *(int *)(sub_5C154(&qword_323BE8) + 28);
  v52 = *(_QWORD *)&v48[v51];
  v53 = *(_QWORD *)&v49[v51];
  *(_QWORD *)&v48[v51] = v53;
  swift_retain(v53);
  swift_release(v52);
  v54 = a3[9];
  v55 = (char *)v5 + v54;
  v56 = (char *)a2 + v54;
  v57 = *(_QWORD *)v56;
  LOBYTE(v49) = v56[8];
  sub_64DD8(*(_QWORD *)v56, (char)v49);
  v58 = *(_QWORD *)v55;
  v59 = v55[8];
  *(_QWORD *)v55 = v57;
  v55[8] = (char)v49;
  sub_64FFC(v58, v59);
  v60 = a3[10];
  v61 = (char *)v5 + v60;
  v62 = (char *)a2 + v60;
  v63 = *(_QWORD *)v62;
  LOBYTE(v49) = v62[8];
  sub_64DD8(*(_QWORD *)v62, (char)v49);
  v64 = *(_QWORD *)v61;
  v65 = v61[8];
  *(_QWORD *)v61 = v63;
  v61[8] = (char)v49;
  sub_64FFC(v64, v65);
  v66 = a3[11];
  v67 = (char *)v5 + v66;
  v68 = (char *)a2 + v66;
  v69 = *(_QWORD *)v68;
  LOBYTE(v49) = v68[8];
  sub_64DD8(*(_QWORD *)v68, (char)v49);
  v70 = *(_QWORD *)v67;
  v71 = v67[8];
  *(_QWORD *)v67 = v69;
  v67[8] = (char)v49;
  sub_64FFC(v70, v71);
  v72 = a3[12];
  v73 = (char *)v5 + v72;
  v74 = (char *)a2 + v72;
  v75 = *(_QWORD *)v74;
  LOBYTE(v49) = v74[8];
  sub_64DD8(*(_QWORD *)v74, (char)v49);
  v76 = *(_QWORD *)v73;
  v77 = v73[8];
  *(_QWORD *)v73 = v75;
  v73[8] = (char)v49;
  sub_64FFC(v76, v77);
  v78 = a3[13];
  v79 = (char *)v5 + v78;
  v80 = (char *)a2 + v78;
  v81 = *(_QWORD *)v80;
  LOBYTE(v49) = v80[8];
  sub_64DD8(*(_QWORD *)v80, (char)v49);
  v82 = *(_QWORD *)v79;
  v83 = v79[8];
  *(_QWORD *)v79 = v81;
  v79[8] = (char)v49;
  sub_64FFC(v82, v83);
  if (v5 != a2)
  {
    v84 = a3[14];
    v85 = (_QWORD *)((char *)v5 + v84);
    v86 = (_QWORD *)((char *)a2 + v84);
    sub_5E09C((uint64_t)v5 + v84, &qword_323BF0);
    v87 = sub_5C154(&qword_323BF0);
    if (swift_getEnumCaseMultiPayload(v86, v87) == 1)
    {
      v88 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v85, v86, v88);
      v89 = 1;
    }
    else
    {
      v90 = *v86;
      *v85 = *v86;
      swift_retain(v90);
      v89 = 0;
    }
    swift_storeEnumTagMultiPayload(v85, v87, v89);
    v91 = a3[15];
    v92 = (char *)v5 + v91;
    v93 = (char *)a2 + v91;
    sub_5E09C((uint64_t)v5 + v91, &qword_3202F0);
    if ((v93[40] & 1) != 0)
    {
      v94 = *((_QWORD *)v93 + 3);
      *((_QWORD *)v92 + 3) = v94;
      *((_QWORD *)v92 + 4) = *((_QWORD *)v93 + 4);
      (**(void (***)(char *, char *))(v94 - 8))(v92, v93);
      v92[40] = 1;
    }
    else
    {
      v95 = *(_QWORD *)v93;
      *(_QWORD *)v92 = *(_QWORD *)v93;
      v92[40] = 0;
      swift_retain(v95);
    }
  }
  v96 = a3[16];
  v97 = (char *)v5 + v96;
  v98 = (char *)a2 + v96;
  v99 = *(id *)v98;
  v100 = v98[8];
  sub_AAFF4(*(id *)v98, v100);
  v101 = *(void **)v97;
  v102 = v97[8];
  *(_QWORD *)v97 = v99;
  v97[8] = v100;
  sub_794D8(v101, v102);
  if (v5 != a2)
  {
    v103 = a3[17];
    v104 = (_QWORD *)((char *)v5 + v103);
    v105 = (_QWORD *)((char *)a2 + v103);
    sub_5E09C((uint64_t)v5 + v103, &qword_3202B8);
    v106 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v105, v106) == 1)
    {
      v107 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v104, v105, v107);
      v108 = 1;
    }
    else
    {
      v109 = *v105;
      *v104 = *v105;
      swift_retain(v109);
      v108 = 0;
    }
    swift_storeEnumTagMultiPayload(v104, v106, v108);
    v110 = a3[18];
    v111 = (char *)v5 + v110;
    v112 = (char *)a2 + v110;
    sub_5E09C((uint64_t)v5 + v110, &qword_3202F8);
    if ((v112[40] & 1) != 0)
    {
      v113 = *((_QWORD *)v112 + 3);
      if (v113)
      {
        *((_QWORD *)v111 + 3) = v113;
        *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
        (**(void (***)(char *, char *))(v113 - 8))(v111, v112);
      }
      else
      {
        v115 = *(_OWORD *)v112;
        v116 = *((_OWORD *)v112 + 1);
        *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
        *(_OWORD *)v111 = v115;
        *((_OWORD *)v111 + 1) = v116;
      }
      v111[40] = 1;
    }
    else
    {
      v114 = *(_QWORD *)v112;
      *(_QWORD *)v111 = *(_QWORD *)v112;
      v111[40] = 0;
      swift_retain(v114);
    }
  }
  v117 = a3[19];
  v118 = (char *)v5 + v117;
  v119 = (char *)a2 + v117;
  v120 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 24))(v118, v119, v120);
  v121 = a3[20];
  v122 = (char *)v5 + v121;
  v123 = (char *)a2 + v121;
  v124 = *(_QWORD *)((char *)a2 + v121);
  LOBYTE(v119) = *((_BYTE *)a2 + v121 + 9);
  v125 = *((_BYTE *)a2 + v121 + 8);
  sub_EBB1C(v124, v125, (char)v119);
  v126 = *(_QWORD *)v122;
  v127 = v122[9];
  *(_QWORD *)v122 = v124;
  v128 = v122[8];
  v122[8] = v125;
  v122[9] = (char)v119;
  sub_79528(v126, v128, v127);
  *((_QWORD *)v122 + 2) = *((_QWORD *)v123 + 2);
  v129 = a3[21];
  v130 = (char *)v5 + v129;
  v131 = (char *)a2 + v129;
  *(_QWORD *)v130 = *(_QWORD *)((char *)a2 + v129);
  v132 = *(_QWORD *)((char *)a2 + v129 + 8);
  v133 = *(_QWORD *)((char *)v5 + v129 + 8);
  *((_QWORD *)v130 + 1) = v132;
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRelease(v133);
  v130[16] = v131[16];
  *(_OWORD *)(v130 + 24) = *(_OWORD *)(v131 + 24);
  v130[40] = v131[40];
  v272 = (int *)type metadata accessor for Shelf(0);
  v134 = v272[8];
  v135 = &v130[v134];
  v136 = &v131[v134];
  v137 = type metadata accessor for ImpressionMetrics(0);
  v269 = *(_QWORD *)(v137 - 8);
  v138 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v269 + 48);
  LODWORD(v119) = v138(v135, 1, v137);
  v267 = v138;
  v139 = v138(v136, 1, v137);
  v270 = a2;
  v271 = a3;
  v268 = v137;
  if ((_DWORD)v119)
  {
    if (!v139)
    {
      (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v135, v136, v137);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v269 + 56))(v135, 0, 1, v137);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v139)
  {
    (*(void (**)(char *, uint64_t))(v269 + 8))(v135, v137);
LABEL_41:
    v141 = sub_5C154(&qword_31F480);
    memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v269 + 24))(v135, v136, v137);
LABEL_42:
  v142 = v272;
  v143 = v272[9];
  v144 = &v130[v143];
  v145 = &v131[v143];
  v146 = type metadata accessor for Metrics.Location(0, v140);
  v147 = *(_QWORD *)(v146 - 8);
  v148 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v147 + 48);
  v149 = v148(v144, 1, v146);
  v150 = v148(v145, 1, v146);
  if (v149)
  {
    if (!v150)
    {
      (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v144, v145, v146);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v150)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v144, v146);
LABEL_47:
    v151 = sub_5C154(&qword_323B40);
    memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v147 + 24))(v144, v145, v146);
LABEL_48:
  sub_65938(&v130[v272[10]], &v131[v272[10]]);
  v152 = v272[11];
  v153 = &v130[v152];
  v154 = &v131[v152];
  v155 = type metadata accessor for ShelfGridSpacing(0);
  v156 = *(_QWORD *)(v155 - 8);
  v157 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 48);
  v158 = v157(v153, 1, v155);
  v159 = v157(v154, 1, v155);
  if (v158)
  {
    if (!v159)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v153, v154, v155);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v159)
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v153, v155);
LABEL_53:
    v160 = sub_5C154(&qword_323BF8);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v156 + 24))(v153, v154, v155);
LABEL_54:
  v161 = v272[12];
  v162 = &v130[v161];
  v163 = &v131[v161];
  v164 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 24))(v162, v163, v164);
  sub_65938(&v130[v272[13]], &v131[v272[13]]);
  sub_65938(&v130[v272[14]], &v131[v272[14]]);
  v165 = v272[15];
  v166 = &v130[v165];
  v167 = &v131[v165];
  v168 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v169 = *((_QWORD *)v168 - 1);
  v170 = *(uint64_t (**)(char *, uint64_t, int *))(v169 + 48);
  LODWORD(v162) = v170(v166, 1, v168);
  v171 = v170(v167, 1, v168);
  if (!(_DWORD)v162)
  {
    if (v171)
    {
      sub_6685C((uint64_t)v166, type metadata accessor for ContentUnavailableComponentModel);
      goto LABEL_60;
    }
    *(_QWORD *)v166 = *(_QWORD *)v167;
    v184 = *((_QWORD *)v167 + 1);
    v185 = *((_QWORD *)v166 + 1);
    *((_QWORD *)v166 + 1) = v184;
    swift_bridgeObjectRetain(v184);
    swift_bridgeObjectRelease(v185);
    v186 = v168[5];
    v187 = &v166[v186];
    v188 = &v167[v186];
    v189 = type metadata accessor for LocalizerRequest(0);
    v190 = *(_QWORD *)(v189 - 8);
    v260 = *(void (**)(char *, char *, uint64_t))(v190 + 24);
    v260(v187, v188, v189);
    v191 = v168[6];
    v192 = &v167[v191];
    v262 = v190;
    v264 = &v166[v191];
    v193 = *(uint64_t (**)(void))(v190 + 48);
    LODWORD(v190) = v193();
    v194 = ((uint64_t (*)(char *, uint64_t, uint64_t))v193)(v192, 1, v189);
    if ((_DWORD)v190)
    {
      if (!v194)
      {
        (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v264, v192, v189);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v262 + 56))(v264, 0, 1, v189);
        goto LABEL_107;
      }
      v195 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v196 = v264;
    }
    else
    {
      if (!v194)
      {
        v260(v264, v192, v189);
        goto LABEL_107;
      }
      (*(void (**)(char *, uint64_t))(v262 + 8))(v264, v189);
      v195 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v196 = v264;
    }
    memcpy(v196, v192, v195);
LABEL_107:
    v248 = v168[7];
    v249 = &v166[v248];
    v250 = &v167[v248];
    v251 = *(_OWORD *)v250;
    v249[16] = v250[16];
    *(_OWORD *)v249 = v251;
    v166[v168[8]] = v167[v168[8]];
    v252 = v168[9];
    v253 = &v166[v252];
    v254 = &v167[v252];
    v255 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v255 - 8) + 24))(v253, v254, v255);
    sub_65938(&v166[v168[10]], &v167[v168[10]]);
    v256 = v168[11];
    v257 = &v166[v256];
    v258 = &v167[v256];
    LODWORD(v253) = v267(v257, 1, v268);
    v259 = v267(v258, 1, v268);
    if ((_DWORD)v253)
    {
      v142 = v272;
      if (!v259)
      {
        (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v257, v258, v268);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v269 + 56))(v257, 0, 1, v268);
        goto LABEL_73;
      }
    }
    else
    {
      v142 = v272;
      if (!v259)
      {
        (*(void (**)(char *, char *, uint64_t))(v269 + 24))(v257, v258, v268);
        goto LABEL_73;
      }
      (*(void (**)(char *, uint64_t))(v269 + 8))(v257, v268);
    }
    v181 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_31F480) - 8) + 64);
    v182 = v257;
    v183 = v258;
LABEL_61:
    memcpy(v182, v183, v181);
    goto LABEL_73;
  }
  if (v171)
  {
LABEL_60:
    v181 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_323C00) - 8) + 64);
    v182 = v166;
    v183 = v167;
    goto LABEL_61;
  }
  v273 = v169;
  *(_QWORD *)v166 = *(_QWORD *)v167;
  v172 = *((_QWORD *)v167 + 1);
  *((_QWORD *)v166 + 1) = v172;
  v173 = v168[5];
  v263 = v5;
  __dsta = &v166[v173];
  v261 = &v167[v173];
  v174 = type metadata accessor for LocalizerRequest(0);
  v175 = *(_QWORD *)(v174 - 8);
  v176 = *(void (**)(char *, char *, uint64_t, __n128))(v175 + 16);
  v177 = swift_bridgeObjectRetain(v172);
  v176(__dsta, v261, v174, v177);
  v178 = v168[6];
  __dst = &v166[v178];
  v179 = &v167[v178];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(&v167[v178], 1, v174))
  {
    v180 = sub_5C154(&qword_3217B8);
    memcpy(__dst, v179, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v176)(__dst, v179, v174);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(__dst, 0, 1, v174);
  }
  v197 = v168[7];
  v198 = &v166[v197];
  v199 = &v167[v197];
  v200 = *(_OWORD *)v199;
  v198[16] = v199[16];
  *(_OWORD *)v198 = v200;
  v166[v168[8]] = v167[v168[8]];
  v201 = v168[9];
  v202 = &v166[v201];
  v203 = &v167[v201];
  v204 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 16))(v202, v203, v204);
  v205 = v168[10];
  v206 = &v166[v205];
  v207 = *(_QWORD *)&v167[v205 + 24];
  *((_QWORD *)v206 + 3) = v207;
  *((_QWORD *)v206 + 4) = *(_QWORD *)&v167[v205 + 32];
  (**(void (***)(void))(v207 - 8))();
  v208 = v168[11];
  v209 = &v166[v208];
  v210 = &v167[v208];
  v5 = v263;
  if (v267(&v167[v208], 1, v268))
  {
    v211 = sub_5C154(&qword_31F480);
    memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v209, v210, v268);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v269 + 56))(v209, 0, 1, v268);
  }
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v273 + 56))(v166, 0, 1, v168);
LABEL_73:
  v212 = v142[16];
  v213 = *(_QWORD *)&v131[v212];
  v214 = *(_QWORD *)&v130[v212];
  *(_QWORD *)&v130[v212] = v213;
  swift_bridgeObjectRetain(v213);
  swift_bridgeObjectRelease(v214);
  v215 = v142[17];
  v216 = &v130[v215];
  v217 = &v131[v215];
  v218 = type metadata accessor for PaginationInfo(0);
  v219 = *(_QWORD *)(v218 - 8);
  v220 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v219 + 48);
  LODWORD(v214) = v220(v216, 1, v218);
  v221 = v220(v217, 1, v218);
  if ((_DWORD)v214)
  {
    if (!v221)
    {
      (*(void (**)(char *, char *, uint64_t))(v219 + 16))(v216, v217, v218);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v221)
  {
    (*(void (**)(char *, uint64_t))(v219 + 8))(v216, v218);
LABEL_78:
    v222 = sub_5C154(&qword_323C08);
    memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v219 + 24))(v216, v217, v218);
LABEL_79:
  v223 = v142[18];
  v224 = &v130[v223];
  v225 = &v131[v223];
  v226 = *(_QWORD *)&v131[v223 + 24];
  if (*(_QWORD *)&v130[v223 + 24])
  {
    if (v226)
    {
      sub_65938(v224, v225);
      goto LABEL_86;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v224);
  }
  else if (v226)
  {
    *((_QWORD *)v224 + 3) = v226;
    *((_QWORD *)v224 + 4) = *((_QWORD *)v225 + 4);
    (**(void (***)(char *, char *))(v226 - 8))(v224, v225);
    goto LABEL_86;
  }
  v227 = *(_OWORD *)v225;
  v228 = *((_OWORD *)v225 + 1);
  *((_QWORD *)v224 + 4) = *((_QWORD *)v225 + 4);
  *(_OWORD *)v224 = v227;
  *((_OWORD *)v224 + 1) = v228;
LABEL_86:
  v229 = v142[19];
  v230 = &v130[v229];
  v231 = &v131[v229];
  v232 = type metadata accessor for SectionData(0);
  v233 = *(_QWORD *)(v232 - 8);
  v234 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v233 + 48);
  v235 = v234(v230, 1, v232);
  v236 = v234(v231, 1, v232);
  if (v235)
  {
    if (!v236)
    {
      (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v230, v231, v232);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v233 + 56))(v230, 0, 1, v232);
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  if (v236)
  {
    (*(void (**)(char *, uint64_t))(v233 + 8))(v230, v232);
LABEL_91:
    v237 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
    goto LABEL_92;
  }
  (*(void (**)(char *, char *, uint64_t))(v233 + 24))(v230, v231, v232);
LABEL_92:
  *(_QWORD *)((char *)v5 + v271[22]) = *(_QWORD *)((char *)v270 + v271[22]);
  v238 = v271[23];
  v239 = *(_QWORD *)((char *)v270 + v238);
  v240 = *(_QWORD *)((char *)v5 + v238);
  *(_QWORD *)((char *)v5 + v238) = v239;
  swift_retain(v239);
  swift_release(v240);
  v241 = v271[24];
  v242 = (char *)v5 + v241;
  v243 = (char *)v270 + v241;
  v244 = v234((char *)v5 + v241, 1, v232);
  v245 = v234(v243, 1, v232);
  if (!v244)
  {
    if (!v245)
    {
      (*(void (**)(char *, char *, uint64_t))(v233 + 24))(v242, v243, v232);
      return v5;
    }
    (*(void (**)(char *, uint64_t))(v233 + 8))(v242, v232);
    goto LABEL_97;
  }
  if (v245)
  {
LABEL_97:
    v246 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
    return v5;
  }
  (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v242, v243, v232);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v233 + 56))(v242, 0, 1, v232);
  return v5;
}

char *initializeWithTake for ShelfView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int (*v157)(char *, uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  void (*v165)(char *, char *, uint64_t);
  char *__srca;
  char *__src;
  uint64_t v168;
  int *v169;
  char *__dsta;
  char *__dst;
  uint64_t v172;
  unsigned int (*v173)(char *, uint64_t, uint64_t);
  uint64_t v174;

  v6 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for SizeConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorConstants(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_5C154(&qword_320308);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a2[v18 + 8];
  *(_QWORD *)v19 = *(_QWORD *)&a2[v18];
  *((_QWORD *)v19 + 1) = v21;
  v22 = *(int *)(sub_5C154(&qword_323248) + 32);
  v23 = &v19[v22];
  v24 = &v20[v22];
  v25 = type metadata accessor for NavigationBarTransitionInfo(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_5C154(&qword_323250);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    v28.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v29 = a3[8];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = type metadata accessor for ShelfGridBreakpoint(0, v28);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  v33 = sub_5C154(&qword_323BE8);
  *(_QWORD *)&v30[*(int *)(v33 + 28)] = *(_QWORD *)&v31[*(int *)(v33 + 28)];
  v34 = a3[9];
  v35 = a3[10];
  v36 = &a1[v34];
  v37 = &a2[v34];
  v36[8] = v37[8];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v38 = &a1[v35];
  v39 = &a2[v35];
  v38[8] = v39[8];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = a3[11];
  v41 = a3[12];
  v42 = &a1[v40];
  v43 = &a2[v40];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = &a1[v41];
  v45 = &a2[v41];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  v46 = a3[13];
  v47 = a3[14];
  v48 = &a1[v46];
  v49 = &a2[v46];
  v48[8] = v49[8];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v50 = &a1[v47];
  v51 = &a2[v47];
  v52 = sub_5C154(&qword_323BF0);
  if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
  {
    v53 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v50, v51, v53);
    swift_storeEnumTagMultiPayload(v50, v52, 1);
  }
  else
  {
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  v54 = a3[15];
  v55 = a3[16];
  v56 = &a1[v54];
  v57 = &a2[v54];
  v58 = *((_OWORD *)v57 + 1);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  *((_OWORD *)v56 + 1) = v58;
  *(_OWORD *)(v56 + 25) = *(_OWORD *)(v57 + 25);
  v59 = &a1[v55];
  v60 = &a2[v55];
  v59[8] = v60[8];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v61 = a3[17];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v64 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
  {
    v65 = type metadata accessor for DataStack(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v62, v63, v65);
    swift_storeEnumTagMultiPayload(v62, v64, 1);
  }
  else
  {
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  v66 = a3[18];
  v67 = a3[19];
  v68 = &a1[v66];
  v69 = &a2[v66];
  v70 = *((_OWORD *)v69 + 1);
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *((_OWORD *)v68 + 1) = v70;
  *(_OWORD *)(v68 + 25) = *(_OWORD *)(v69 + 25);
  v71 = &a1[v67];
  v72 = &a2[v67];
  v73 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = a3[20];
  v75 = a3[21];
  v76 = &a1[v74];
  v77 = &a2[v74];
  *(_OWORD *)v76 = *(_OWORD *)v77;
  *((_QWORD *)v76 + 2) = *((_QWORD *)v77 + 2);
  v78 = &a1[v75];
  v79 = &a2[v75];
  *(_OWORD *)v78 = *(_OWORD *)&a2[v75];
  v78[16] = a2[v75 + 16];
  *(_OWORD *)(v78 + 24) = *(_OWORD *)&a2[v75 + 24];
  v78[40] = a2[v75 + 40];
  v80 = (int *)type metadata accessor for Shelf(0);
  v81 = v80[8];
  v82 = &v78[v81];
  v83 = &v79[v81];
  v84 = type metadata accessor for ImpressionMetrics(0);
  v85 = *(_QWORD *)(v84 - 8);
  v173 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
  v174 = v84;
  v172 = v85;
  if (v173(v83, 1, v84))
  {
    v86 = sub_5C154(&qword_31F480);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v82, v83, v84);
    v87.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
  }
  v88 = v80[9];
  v89 = &v78[v88];
  v90 = &v79[v88];
  v91 = type metadata accessor for Metrics.Location(0, v87);
  v92 = *(_QWORD *)(v91 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
  {
    v93 = sub_5C154(&qword_323B40);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v89, v90, v91);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
  }
  v94 = v80[10];
  v95 = &v78[v94];
  v96 = &v79[v94];
  v97 = *((_OWORD *)v96 + 1);
  *(_OWORD *)v95 = *(_OWORD *)v96;
  *((_OWORD *)v95 + 1) = v97;
  *((_QWORD *)v95 + 4) = *((_QWORD *)v96 + 4);
  v98 = v80[11];
  v99 = &v78[v98];
  v100 = &v79[v98];
  v101 = type metadata accessor for ShelfGridSpacing(0);
  v102 = *(_QWORD *)(v101 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
  {
    v103 = sub_5C154(&qword_323BF8);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v99, v100, v101);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
  }
  v104 = v80[12];
  v105 = &v78[v104];
  v106 = &v79[v104];
  v107 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
  v108 = v80[13];
  v109 = &v78[v108];
  v110 = &v79[v108];
  v111 = *((_OWORD *)v110 + 1);
  *(_OWORD *)v109 = *(_OWORD *)v110;
  *((_OWORD *)v109 + 1) = v111;
  *((_QWORD *)v109 + 4) = *((_QWORD *)v110 + 4);
  v112 = v80[14];
  v113 = &v78[v112];
  v114 = &v79[v112];
  v115 = *((_OWORD *)v114 + 1);
  *(_OWORD *)v113 = *(_OWORD *)v114;
  *((_OWORD *)v113 + 1) = v115;
  *((_QWORD *)v113 + 4) = *((_QWORD *)v114 + 4);
  v116 = v80[15];
  v117 = &v78[v116];
  v118 = &v79[v116];
  v119 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  v120 = *((_QWORD *)v119 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v120 + 48))(v118, 1, v119))
  {
    v121 = sub_5C154(&qword_323C00);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
  }
  else
  {
    v168 = v120;
    v169 = a3;
    *(_OWORD *)v117 = *(_OWORD *)v118;
    v122 = v119[5];
    __dsta = &v117[v122];
    __srca = &v118[v122];
    v123 = type metadata accessor for LocalizerRequest(0);
    v124 = *(_QWORD *)(v123 - 8);
    v165 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    v165(__dsta, __srca, v123);
    v125 = v119[6];
    __dst = &v117[v125];
    __src = &v118[v125];
    if ((*(unsigned int (**)(void))(v124 + 48))())
    {
      v126 = sub_5C154(&qword_3217B8);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    }
    else
    {
      v165(__dst, __src, v123);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(__dst, 0, 1, v123);
    }
    v127 = v119[7];
    v128 = &v117[v127];
    v129 = &v118[v127];
    *(_OWORD *)v128 = *(_OWORD *)v129;
    v128[16] = v129[16];
    v117[v119[8]] = v118[v119[8]];
    v130 = v119[9];
    v131 = &v117[v130];
    v132 = &v118[v130];
    v133 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32))(v131, v132, v133);
    v134 = v119[10];
    v135 = &v117[v134];
    v136 = &v118[v134];
    v137 = *((_OWORD *)v136 + 1);
    *(_OWORD *)v135 = *(_OWORD *)v136;
    *((_OWORD *)v135 + 1) = v137;
    *((_QWORD *)v135 + 4) = *((_QWORD *)v136 + 4);
    v138 = v119[11];
    v139 = &v117[v138];
    v140 = &v118[v138];
    if (v173(&v118[v138], 1, v174))
    {
      v141 = sub_5C154(&qword_31F480);
      memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v139, v140, v174);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v172 + 56))(v139, 0, 1, v174);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v168 + 56))(v117, 0, 1, v119);
    a3 = v169;
  }
  *(_QWORD *)&v78[v80[16]] = *(_QWORD *)&v79[v80[16]];
  v142 = v80[17];
  v143 = &v78[v142];
  v144 = &v79[v142];
  v145 = type metadata accessor for PaginationInfo(0);
  v146 = *(_QWORD *)(v145 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
  {
    v147 = sub_5C154(&qword_323C08);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v143, v144, v145);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
  }
  v148 = v80[18];
  v149 = &v78[v148];
  v150 = &v79[v148];
  v151 = *((_OWORD *)v150 + 1);
  *(_OWORD *)v149 = *(_OWORD *)v150;
  *((_OWORD *)v149 + 1) = v151;
  *((_QWORD *)v149 + 4) = *((_QWORD *)v150 + 4);
  v152 = v80[19];
  v153 = &v78[v152];
  v154 = &v79[v152];
  v155 = type metadata accessor for SectionData(0);
  v156 = *(_QWORD *)(v155 - 8);
  v157 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48);
  if (v157(v154, 1, v155))
  {
    v158 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v153, v154, v155);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
  }
  v159 = a3[23];
  *(_QWORD *)&a1[a3[22]] = *(_QWORD *)&a2[a3[22]];
  *(_QWORD *)&a1[v159] = *(_QWORD *)&a2[v159];
  v160 = a3[24];
  v161 = &a1[v160];
  v162 = &a2[v160];
  if (v157(v162, 1, v155))
  {
    v163 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v161, v162, v155);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v161, 0, 1, v155);
  }
  return a1;
}

char *assignWithTake for ShelfView(char *a1, char *a2, int *a3)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void *v82;
  char v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  __n128 v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(char *, uint64_t, uint64_t);
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(char *, uint64_t, uint64_t);
  int v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int *v157;
  uint64_t (*v158)(char *, uint64_t, int *);
  int v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  size_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(char *, char *, uint64_t);
  uint64_t v180;
  char *v181;
  uint64_t (*v182)(void);
  int v183;
  size_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  __int128 v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t (*v208)(char *, uint64_t, uint64_t);
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  __int128 v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t (*v221)(char *, uint64_t, uint64_t);
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  __int128 v244;
  uint64_t v245;
  char *v246;
  char *v247;
  int v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  _QWORD *__src;
  uint64_t (*v254)(char *, uint64_t, uint64_t);
  uint64_t v255;
  uint64_t v256;
  int *v257;
  char *v258;
  void (*v259)(char *, char *, uint64_t);
  int *v260;

  v4 = a2;
  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_320160);
    v6 = sub_5C154(&qword_320160);
    if (swift_getEnumCaseMultiPayload(v4, v6) == 1)
    {
      v7 = type metadata accessor for SizeConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v4, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, v4, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &v4[v8];
    sub_5E09C((uint64_t)&a1[v8], (uint64_t *)&unk_32A010);
    v11 = sub_5C154((uint64_t *)&unk_32A010);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorConstants(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = a3[6];
    v14 = &a1[v13];
    v15 = &v4[v13];
    sub_5E09C((uint64_t)&a1[v13], &qword_320308);
    v16 = sub_5C154(&qword_320308);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &v4[v18];
  v21 = *(_QWORD *)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&v4[v18];
  swift_release(v21);
  v22 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_release(v22);
  v23 = *(int *)(sub_5C154(&qword_323248) + 32);
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = type metadata accessor for NavigationBarTransitionInfo(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_16:
    v32 = sub_5C154(&qword_323250);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_17:
  v33 = a3[8];
  v34 = &a1[v33];
  v35 = &v4[v33];
  v36 = type metadata accessor for ShelfGridBreakpoint(0, v31);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  v37 = *(int *)(sub_5C154(&qword_323BE8) + 28);
  v38 = *(_QWORD *)&v34[v37];
  *(_QWORD *)&v34[v37] = *(_QWORD *)&v35[v37];
  swift_release(v38);
  v39 = a3[9];
  v40 = &a1[v39];
  v41 = &v4[v39];
  v42 = *(_QWORD *)v41;
  LOBYTE(v41) = v41[8];
  v43 = *(_QWORD *)v40;
  v44 = v40[8];
  *(_QWORD *)v40 = v42;
  v40[8] = (char)v41;
  sub_64FFC(v43, v44);
  v45 = a3[10];
  v46 = &a1[v45];
  v47 = &v4[v45];
  v48 = *(_QWORD *)v47;
  LOBYTE(v47) = v47[8];
  v49 = *(_QWORD *)v46;
  v50 = v46[8];
  *(_QWORD *)v46 = v48;
  v46[8] = (char)v47;
  sub_64FFC(v49, v50);
  v51 = a3[11];
  v52 = &a1[v51];
  v53 = &v4[v51];
  v54 = *(_QWORD *)v53;
  LOBYTE(v53) = v53[8];
  v55 = *(_QWORD *)v52;
  v56 = v52[8];
  *(_QWORD *)v52 = v54;
  v52[8] = (char)v53;
  sub_64FFC(v55, v56);
  v57 = a3[12];
  v58 = &a1[v57];
  v59 = &v4[v57];
  v60 = *(_QWORD *)v59;
  LOBYTE(v59) = v59[8];
  v61 = *(_QWORD *)v58;
  v62 = v58[8];
  *(_QWORD *)v58 = v60;
  v58[8] = (char)v59;
  sub_64FFC(v61, v62);
  v63 = a3[13];
  v64 = &a1[v63];
  v65 = &v4[v63];
  v66 = *(_QWORD *)v65;
  LOBYTE(v65) = v65[8];
  v67 = *(_QWORD *)v64;
  v68 = v64[8];
  *(_QWORD *)v64 = v66;
  v64[8] = (char)v65;
  sub_64FFC(v67, v68);
  if (a1 != v4)
  {
    v69 = a3[14];
    v70 = &a1[v69];
    v71 = &v4[v69];
    sub_5E09C((uint64_t)&a1[v69], &qword_323BF0);
    v72 = sub_5C154(&qword_323BF0);
    if (swift_getEnumCaseMultiPayload(v71, v72) == 1)
    {
      v73 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v70, v71, v73);
      swift_storeEnumTagMultiPayload(v70, v72, 1);
    }
    else
    {
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    v74 = a3[15];
    v75 = &v4[v74];
    v76 = &a1[v74];
    sub_5E09C((uint64_t)&a1[v74], &qword_3202F0);
    v77 = *((_OWORD *)v75 + 1);
    *(_OWORD *)v76 = *(_OWORD *)v75;
    *((_OWORD *)v76 + 1) = v77;
    *(_OWORD *)(v76 + 25) = *(_OWORD *)(v75 + 25);
  }
  v78 = a3[16];
  v79 = &a1[v78];
  v80 = &v4[v78];
  v81 = *(_QWORD *)v80;
  LOBYTE(v80) = v80[8];
  v82 = *(void **)v79;
  v83 = v79[8];
  *(_QWORD *)v79 = v81;
  v79[8] = (char)v80;
  sub_794D8(v82, v83);
  if (a1 != v4)
  {
    v84 = a3[17];
    v85 = &a1[v84];
    v86 = &v4[v84];
    sub_5E09C((uint64_t)&a1[v84], &qword_3202B8);
    v87 = sub_5C154(&qword_3202B8);
    if (swift_getEnumCaseMultiPayload(v86, v87) == 1)
    {
      v88 = type metadata accessor for DataStack(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v85, v86, v88);
      swift_storeEnumTagMultiPayload(v85, v87, 1);
    }
    else
    {
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
    v89 = a3[18];
    v90 = &v4[v89];
    v91 = &a1[v89];
    sub_5E09C((uint64_t)&a1[v89], &qword_3202F8);
    v92 = *((_OWORD *)v90 + 1);
    *(_OWORD *)v91 = *(_OWORD *)v90;
    *((_OWORD *)v91 + 1) = v92;
    *(_OWORD *)(v91 + 25) = *(_OWORD *)(v90 + 25);
  }
  v93 = a3[19];
  v94 = &a1[v93];
  v95 = &v4[v93];
  v96 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 40))(v94, v95, v96);
  v97 = a3[20];
  v98 = &a1[v97];
  v99 = &v4[v97];
  v100 = v4[v97 + 8];
  v101 = v4[v97 + 9];
  v102 = *(_QWORD *)&a1[v97];
  v103 = a1[v97 + 9];
  *(_QWORD *)v98 = *(_QWORD *)&v4[v97];
  v104 = a1[v97 + 8];
  v98[8] = v100;
  v98[9] = v101;
  sub_79528(v102, v104, v103);
  *((_QWORD *)v98 + 2) = *((_QWORD *)v99 + 2);
  v105 = a3[21];
  v258 = a1;
  v106 = &a1[v105];
  v107 = &v4[v105];
  v108 = *(_QWORD *)&v4[v105 + 8];
  v109 = *(_QWORD *)&a1[v105 + 8];
  *(_QWORD *)v106 = *(_QWORD *)&v4[v105];
  *((_QWORD *)v106 + 1) = v108;
  swift_bridgeObjectRelease(v109);
  v106[16] = v107[16];
  *(_OWORD *)(v106 + 24) = *(_OWORD *)(v107 + 24);
  v106[40] = v107[40];
  v110 = type metadata accessor for Shelf(0);
  v111 = *(int *)(v110 + 32);
  v112 = &v106[v111];
  v113 = &v107[v111];
  v114 = type metadata accessor for ImpressionMetrics(0);
  v256 = *(_QWORD *)(v114 - 8);
  v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v256 + 48);
  LODWORD(v95) = v115(v112, 1, v114);
  v254 = v115;
  v116 = v115(v113, 1, v114);
  v257 = a3;
  v255 = v114;
  if ((_DWORD)v95)
  {
    if (!v116)
    {
      (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v112, v113, v114);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v112, 0, 1, v114);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v116)
  {
    (*(void (**)(char *, uint64_t))(v256 + 8))(v112, v114);
LABEL_32:
    v118 = sub_5C154(&qword_31F480);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v256 + 40))(v112, v113, v114);
LABEL_33:
  v119 = v258;
  v260 = (int *)v110;
  v120 = *(int *)(v110 + 36);
  v121 = &v106[v120];
  v122 = &v107[v120];
  v123 = type metadata accessor for Metrics.Location(0, v117);
  v124 = *(_QWORD *)(v123 - 8);
  v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48);
  v126 = v125(v121, 1, v123);
  v127 = v125(v122, 1, v123);
  if (v126)
  {
    if (!v127)
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v121, v122, v123);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v127)
  {
    (*(void (**)(char *, uint64_t))(v124 + 8))(v121, v123);
LABEL_38:
    v128 = sub_5C154(&qword_323B40);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
    goto LABEL_39;
  }
  (*(void (**)(char *, char *, uint64_t))(v124 + 40))(v121, v122, v123);
LABEL_39:
  v129 = v260[10];
  v130 = &v106[v129];
  v131 = &v107[v129];
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v106[v129]);
  v132 = *((_OWORD *)v131 + 1);
  *(_OWORD *)v130 = *(_OWORD *)v131;
  *((_OWORD *)v130 + 1) = v132;
  *((_QWORD *)v130 + 4) = *((_QWORD *)v131 + 4);
  v133 = v260[11];
  v134 = &v106[v133];
  v135 = &v107[v133];
  v136 = type metadata accessor for ShelfGridSpacing(0);
  v137 = *(_QWORD *)(v136 - 8);
  v138 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 48);
  LODWORD(v130) = v138(v134, 1, v136);
  v139 = v138(v135, 1, v136);
  if ((_DWORD)v130)
  {
    if (!v139)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v134, v135, v136);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v134, 0, 1, v136);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v139)
  {
    (*(void (**)(char *, uint64_t))(v137 + 8))(v134, v136);
LABEL_44:
    v140 = sub_5C154(&qword_323BF8);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(char *, char *, uint64_t))(v137 + 40))(v134, v135, v136);
LABEL_45:
  v141 = v260;
  v142 = v260[12];
  v143 = &v106[v142];
  v144 = &v107[v142];
  v145 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 40))(v143, v144, v145);
  v146 = v260[13];
  v147 = &v106[v146];
  v148 = &v107[v146];
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v106[v146]);
  v149 = *((_OWORD *)v148 + 1);
  *(_OWORD *)v147 = *(_OWORD *)v148;
  *((_OWORD *)v147 + 1) = v149;
  *((_QWORD *)v147 + 4) = *((_QWORD *)v148 + 4);
  v150 = v260[14];
  v151 = &v106[v150];
  v152 = &v107[v150];
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v106[v150]);
  v153 = *((_OWORD *)v152 + 1);
  *(_OWORD *)v151 = *(_OWORD *)v152;
  *((_OWORD *)v151 + 1) = v153;
  *((_QWORD *)v151 + 4) = *((_QWORD *)v152 + 4);
  v154 = v260[15];
  v155 = &v106[v154];
  v156 = &v107[v154];
  v157 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  __src = (_QWORD *)*((_QWORD *)v157 - 1);
  v158 = (uint64_t (*)(char *, uint64_t, int *))__src[6];
  LODWORD(v151) = v158(v155, 1, v157);
  v159 = v158(v156, 1, v157);
  if (!(_DWORD)v151)
  {
    if (v159)
    {
      sub_6685C((uint64_t)v155, type metadata accessor for ContentUnavailableComponentModel);
      goto LABEL_51;
    }
    v252 = v4;
    v172 = *((_QWORD *)v156 + 1);
    v173 = *((_QWORD *)v155 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v172;
    swift_bridgeObjectRelease(v173);
    v174 = v157[5];
    v175 = &v155[v174];
    v176 = &v156[v174];
    v177 = type metadata accessor for LocalizerRequest(0);
    v178 = *(_QWORD *)(v177 - 8);
    v179 = *(void (**)(char *, char *, uint64_t))(v178 + 40);
    v179(v175, v176, v177);
    v180 = v157[6];
    v181 = &v156[v180];
    v249 = v178;
    v250 = &v155[v180];
    v182 = *(uint64_t (**)(void))(v178 + 48);
    LODWORD(v175) = v182();
    v183 = ((uint64_t (*)(char *, uint64_t, uint64_t))v182)(v181, 1, v177);
    if ((_DWORD)v175)
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v249 + 32))(v250, v181, v177);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v249 + 56))(v250, 0, 1, v177);
        goto LABEL_94;
      }
      v184 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v185 = v250;
    }
    else
    {
      if (!v183)
      {
        v179(v250, v181, v177);
        goto LABEL_94;
      }
      (*(void (**)(char *, uint64_t))(v249 + 8))(v250, v177);
      v184 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3217B8) - 8) + 64);
      v185 = v250;
    }
    memcpy(v185, v181, v184);
LABEL_94:
    v234 = v157[7];
    v235 = &v155[v234];
    v236 = &v156[v234];
    *(_OWORD *)v235 = *(_OWORD *)v236;
    v235[16] = v236[16];
    v155[v157[8]] = v156[v157[8]];
    v237 = v157[9];
    v238 = &v155[v237];
    v239 = &v156[v237];
    v240 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 40))(v238, v239, v240);
    v241 = v157[10];
    v242 = &v155[v241];
    v243 = &v156[v241];
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v155[v241]);
    v244 = *((_OWORD *)v243 + 1);
    *(_OWORD *)v242 = *(_OWORD *)v243;
    *((_OWORD *)v242 + 1) = v244;
    *((_QWORD *)v242 + 4) = *((_QWORD *)v243 + 4);
    v245 = v157[11];
    v246 = &v155[v245];
    v247 = &v156[v245];
    LODWORD(v242) = v254(v246, 1, v255);
    v248 = v254(v247, 1, v255);
    v4 = v252;
    if ((_DWORD)v242)
    {
      v119 = v258;
      v141 = v260;
      if (!v248)
      {
        (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v246, v247, v255);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v246, 0, 1, v255);
        goto LABEL_65;
      }
    }
    else
    {
      v119 = v258;
      v141 = v260;
      if (!v248)
      {
        (*(void (**)(char *, char *, uint64_t))(v256 + 40))(v246, v247, v255);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v256 + 8))(v246, v255);
    }
    v169 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_31F480) - 8) + 64);
    v170 = v246;
    v171 = v247;
LABEL_52:
    memcpy(v170, v171, v169);
    goto LABEL_65;
  }
  if (v159)
  {
LABEL_51:
    v169 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_323C00) - 8) + 64);
    v170 = v155;
    v171 = v156;
    goto LABEL_52;
  }
  v251 = v4;
  *(_OWORD *)v155 = *(_OWORD *)v156;
  v160 = v157[5];
  v161 = &v155[v160];
  v162 = &v156[v160];
  v163 = type metadata accessor for LocalizerRequest(0);
  v164 = *(_QWORD *)(v163 - 8);
  v259 = *(void (**)(char *, char *, uint64_t))(v164 + 32);
  v259(v161, v162, v163);
  v165 = v157[6];
  v166 = &v155[v165];
  v167 = &v156[v165];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(&v156[v165], 1, v163))
  {
    v168 = sub_5C154(&qword_3217B8);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
  }
  else
  {
    v259(v166, v167, v163);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v166, 0, 1, v163);
  }
  v186 = v157[7];
  v187 = &v155[v186];
  v188 = &v156[v186];
  *(_OWORD *)v187 = *(_OWORD *)v188;
  v187[16] = v188[16];
  v155[v157[8]] = v156[v157[8]];
  v189 = v157[9];
  v190 = &v155[v189];
  v191 = &v156[v189];
  v192 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v190, v191, v192);
  v193 = v157[10];
  v194 = &v155[v193];
  v195 = &v156[v193];
  v196 = *((_OWORD *)v195 + 1);
  *(_OWORD *)v194 = *(_OWORD *)v195;
  *((_OWORD *)v194 + 1) = v196;
  *((_QWORD *)v194 + 4) = *((_QWORD *)v195 + 4);
  v197 = v157[11];
  v198 = &v155[v197];
  v199 = &v156[v197];
  v4 = v251;
  if (v254(&v156[v197], 1, v255))
  {
    v200 = sub_5C154(&qword_31F480);
    memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v198, v199, v255);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v198, 0, 1, v255);
  }
  ((void (*)(char *, _QWORD, uint64_t, int *))__src[7])(v155, 0, 1, v157);
  v141 = v260;
LABEL_65:
  v201 = v141[16];
  v202 = *(_QWORD *)&v106[v201];
  *(_QWORD *)&v106[v201] = *(_QWORD *)&v107[v201];
  swift_bridgeObjectRelease(v202);
  v203 = v141[17];
  v204 = &v106[v203];
  v205 = &v107[v203];
  v206 = type metadata accessor for PaginationInfo(0);
  v207 = *(_QWORD *)(v206 - 8);
  v208 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v207 + 48);
  v209 = v208(v204, 1, v206);
  v210 = v208(v205, 1, v206);
  if (v209)
  {
    if (!v210)
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v204, v205, v206);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v210)
  {
    (*(void (**)(char *, uint64_t))(v207 + 8))(v204, v206);
LABEL_70:
    v211 = sub_5C154(&qword_323C08);
    memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v207 + 40))(v204, v205, v206);
LABEL_71:
  v212 = v260[18];
  v213 = &v106[v212];
  v214 = &v107[v212];
  if (*(_QWORD *)&v106[v212 + 24])
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v213);
  v215 = *((_OWORD *)v214 + 1);
  *(_OWORD *)v213 = *(_OWORD *)v214;
  *((_OWORD *)v213 + 1) = v215;
  *((_QWORD *)v213 + 4) = *((_QWORD *)v214 + 4);
  v216 = v260[19];
  v217 = &v106[v216];
  v218 = &v107[v216];
  v219 = type metadata accessor for SectionData(0);
  v220 = *(_QWORD *)(v219 - 8);
  v221 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v220 + 48);
  v222 = v221(v217, 1, v219);
  v223 = v221(v218, 1, v219);
  if (v222)
  {
    if (!v223)
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 32))(v217, v218, v219);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v217, 0, 1, v219);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v223)
  {
    (*(void (**)(char *, uint64_t))(v220 + 8))(v217, v219);
LABEL_78:
    v224 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v220 + 40))(v217, v218, v219);
LABEL_79:
  v225 = v257[23];
  *(_QWORD *)&v119[v257[22]] = *(_QWORD *)&v4[v257[22]];
  v226 = *(_QWORD *)&v119[v225];
  *(_QWORD *)&v119[v225] = *(_QWORD *)&v4[v225];
  swift_release(v226);
  v227 = v257[24];
  v228 = &v119[v227];
  v229 = &v4[v227];
  v230 = v221(&v119[v227], 1, v219);
  v231 = v221(v229, 1, v219);
  if (!v230)
  {
    if (!v231)
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 40))(v228, v229, v219);
      return v119;
    }
    (*(void (**)(char *, uint64_t))(v220 + 8))(v228, v219);
    goto LABEL_84;
  }
  if (v231)
  {
LABEL_84:
    v232 = sub_5C154((uint64_t *)&unk_326100);
    memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
    return v119;
  }
  (*(void (**)(char *, char *, uint64_t))(v220 + 32))(v228, v229, v219);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v228, 0, 1, v219);
  return v119;
}

uint64_t getEnumTagSinglePayload for ShelfView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_EFB20);
}

uint64_t sub_EFB20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = sub_5C154(&qword_3201B0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5C154(&qword_31F498);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_24:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_5C154(&qword_3215C8);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_24;
  }
  v15 = sub_5C154(&qword_323248);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_24;
  }
  v16 = sub_5C154(&qword_323BE8);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[8];
    goto LABEL_24;
  }
  v17 = sub_5C154(&qword_323C10);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[14];
    goto LABEL_24;
  }
  v18 = sub_5C154(&qword_323C18);
  v12 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v18;
    v13 = a3[17];
    goto LABEL_24;
  }
  v19 = type metadata accessor for AppAnalyticsData(0);
  v12 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v19;
    v13 = a3[19];
    goto LABEL_24;
  }
  v20 = type metadata accessor for Shelf(0);
  v12 = *(_QWORD *)(v20 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v20;
    v13 = a3[21];
    goto LABEL_24;
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5C154((uint64_t *)&unk_326100);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[24];
    goto LABEL_24;
  }
  v21 = *(_QWORD *)(a1 + a3[23]);
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  return (v21 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_EFD14);
}

uint64_t sub_EFD14(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v8 = sub_5C154(&qword_3201B0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5C154(&qword_31F498);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_5C154(&qword_3215C8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_5C154(&qword_323248);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_5C154(&qword_323BE8);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_5C154(&qword_323C10);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[14];
            }
            else
            {
              v20 = sub_5C154(&qword_323C18);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[17];
              }
              else
              {
                v21 = type metadata accessor for AppAnalyticsData(0);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[19];
                }
                else
                {
                  result = type metadata accessor for Shelf(0);
                  v14 = *(_QWORD *)(result - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = result;
                    v15 = a4[21];
                  }
                  else
                  {
                    if (a3 == 0x7FFFFFFF)
                    {
                      *(_QWORD *)(a1 + a4[23]) = (a2 - 1);
                      return result;
                    }
                    v10 = sub_5C154((uint64_t *)&unk_326100);
                    v14 = *(_QWORD *)(v10 - 8);
                    v15 = a4[24];
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_EFEF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[21];

  sub_8C25C(319, (unint64_t *)&qword_320220, (uint64_t (*)(uint64_t))&type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v22[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8C25C(319, (unint64_t *)&qword_31F510, (uint64_t (*)(uint64_t))&type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v22[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8C25C(319, (unint64_t *)&unk_321638, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v22[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_D372C(319);
        if (v9 <= 0x3F)
        {
          v22[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8C25C(319, &qword_323C88, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfGridBreakpoint, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
          if (v11 <= 0x3F)
          {
            v22[4] = *(_QWORD *)(v10 - 8) + 64;
            v22[5] = "\t";
            v22[6] = "\t";
            v22[7] = "\t";
            v22[8] = "\t";
            v22[9] = "\t";
            sub_8C25C(319, &qword_323C90, (uint64_t (*)(uint64_t))&type metadata accessor for ShelfBackgroundViewModel.BackgroundKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
            if (v13 <= 0x3F)
            {
              v22[10] = *(_QWORD *)(v12 - 8) + 64;
              v22[11] = &unk_25DBC0;
              v22[12] = "\t";
              sub_8C25C(319, &qword_323C98, (uint64_t (*)(uint64_t))&type metadata accessor for DataStack, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
              if (v15 <= 0x3F)
              {
                v22[13] = *(_QWORD *)(v14 - 8) + 64;
                v22[14] = &unk_25DBC0;
                v16 = type metadata accessor for AppAnalyticsData(319);
                if (v17 <= 0x3F)
                {
                  v22[15] = *(_QWORD *)(v16 - 8) + 64;
                  v22[16] = &unk_25DBD8;
                  v18 = type metadata accessor for Shelf(319);
                  if (v19 <= 0x3F)
                  {
                    v22[17] = *(_QWORD *)(v18 - 8) + 64;
                    v22[18] = (char *)&value witness table for Builtin.Int64 + 64;
                    v22[19] = (char *)&value witness table for Builtin.NativeObject + 64;
                    sub_8C25C(319, (unint64_t *)&unk_323CA0, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                    if (v21 <= 0x3F)
                    {
                      v22[20] = *(_QWORD *)(v20 - 8) + 64;
                      swift_initStructMetadata(a1, 256, 21, v22, a1 + 16);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_F014C()
{
  return sub_67060(&qword_323D20, &qword_323B70, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
}

ValueMetadata *type metadata accessor for ShelfIDKey()
{
  return &type metadata for ShelfIDKey;
}

uint64_t sub_F018C()
{
  return EnvironmentValues.colors.getter();
}

uint64_t sub_F01AC()
{
  return EnvironmentValues.colors.getter();
}

uint64_t sub_F01CC()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

void sub_F020C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.pixelLength.getter();
}

unint64_t sub_F0264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323D28;
  if (!qword_323D28)
  {
    v1 = sub_667D0(&qword_320958);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_323D28);
  }
  return result;
}

uint64_t sub_F02C0@<X0>(uint64_t a1@<X8>)
{
  return sub_EA110(a1);
}

unint64_t sub_F02C8()
{
  unint64_t result;

  result = qword_323D58;
  if (!qword_323D58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowActionCardSetPresentationImplementation, &type metadata for FlowActionCardSetPresentationImplementation);
    atomic_store(result, (unint64_t *)&qword_323D58);
  }
  return result;
}

uint64_t sub_F0310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShelfView(0) - 8) + 80);
  return sub_E8A14(a1, v2 + ((v5 + 16) & ~v5), a2);
}

double sub_F0360@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShelfView(0) - 8) + 80);
  return sub_E987C(v1 + ((v3 + 16) & ~v3), a1, v4);
}

uint64_t sub_F03AC()
{
  return sub_F03C8(&qword_323DE8, &qword_323DF0, (void (*)(void))sub_F0434);
}

uint64_t sub_F03C8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_667D0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_F0434()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323DF8;
  if (!qword_323DF8)
  {
    v1 = sub_667D0(&qword_323E00);
    sub_F04A0();
    sub_E5E48();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323DF8);
  }
  return result;
}

unint64_t sub_F04A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323E08;
  if (!qword_323E08)
  {
    v1 = sub_667D0(&qword_323E10);
    sub_F050C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E08);
  }
  return result;
}

unint64_t sub_F050C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323E18;
  if (!qword_323E18)
  {
    v1 = sub_667D0(&qword_323E20);
    sub_67060(&qword_323E28, &qword_323E30, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E18);
  }
  return result;
}

unint64_t sub_F0590()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323E38;
  if (!qword_323E38)
  {
    v1 = sub_667D0(&qword_323DA0);
    sub_F05FC();
    sub_F07B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E38);
  }
  return result;
}

unint64_t sub_F05FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323E40;
  if (!qword_323E40)
  {
    v1 = sub_667D0(&qword_320318);
    sub_F0668();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E40);
  }
  return result;
}

unint64_t sub_F0668()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323E48;
  if (!qword_323E48)
  {
    v1 = sub_667D0(&qword_320310);
    sub_F06D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E48);
  }
  return result;
}

unint64_t sub_F06D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_323E50;
  if (!qword_323E50)
  {
    v1 = sub_667D0(&qword_323DB8);
    v2 = sub_667D0(&qword_323DA8);
    v4 = sub_667D0(&qword_329DD0);
    v5 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E50);
  }
  return result;
}

unint64_t sub_F07B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  result = qword_323E58;
  if (!qword_323E58)
  {
    v1 = sub_667D0(&qword_323D88);
    v2 = sub_667D0(&qword_323D78);
    v3 = sub_667D0(&qword_323D70);
    v4 = type metadata accessor for PlainListStyle(255);
    v7 = sub_667D0(&qword_323D68);
    v8 = sub_67060(&qword_323E60, &qword_323D68, (uint64_t)&protocol conformance descriptor for List<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.listHasStackBehavior()>>, 1);
    v7 = v3;
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v10 = &protocol witness table for PlainListStyle;
    v6 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v7 = v2;
    v8 = v6;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E58);
  }
  return result;
}

uint64_t sub_F08EC()
{
  uint64_t v0;

  return sub_E7900(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_F08F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323E90;
  if (!qword_323E90)
  {
    v1 = sub_667D0(&qword_323E88);
    sub_F0958();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_323E90);
  }
  return result;
}

unint64_t sub_F0958()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_323E98;
  if (!qword_323E98)
  {
    v1 = sub_667D0(&qword_323EA0);
    v2[0] = sub_667D0(&qword_323EA8);
    v2[1] = sub_F0A04();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
    sub_67060(&qword_323EC8, &qword_323ED0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323E98);
  }
  return result;
}

unint64_t sub_F0A04()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_323EB0;
  if (!qword_323EB0)
  {
    v1 = sub_667D0(&qword_323EA8);
    v2 = sub_667D0(&qword_323DD8);
    v4 = sub_667D0(&qword_329DD0);
    v5 = sub_67060(&qword_323B88, &qword_329DD0, (uint64_t)&protocol conformance descriptor for ComponentView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.figaroLocationPositionOverride(_:)>>, 1);
    sub_67060(&qword_323EB8, &qword_323EC0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323EB0);
  }
  return result;
}

unint64_t sub_F0B00()
{
  unint64_t result;

  result = qword_323ED8;
  if (!qword_323ED8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _ComponentContentByType, &type metadata for _ComponentContentByType);
    atomic_store(result, (unint64_t *)&qword_323ED8);
  }
  return result;
}

uint64_t sub_F0B54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShelfView(0) - 8) + 80);
  return sub_E7B00(a1, a2, v3 + ((v7 + 16) & ~v7), a3);
}

uint64_t sub_F0BA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_F0BCC(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD *))(v1 + 16))(*a1, a1 + 1);
}

uint64_t sub_F0BFC(uint64_t result)
{
  *(_BYTE *)(result + 155) = 1;
  return result;
}

uint64_t sub_F0C08(uint64_t result)
{
  *(_BYTE *)(result + 154) = 0;
  return result;
}

uint64_t sub_F0C10(uint64_t result)
{
  *(_BYTE *)(result + 155) = 0;
  return result;
}

uint64_t sub_F0C18(uint64_t result)
{
  *(_BYTE *)(result + 154) = 1;
  return result;
}

uint64_t sub_F0C28()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;

  v1 = v0;
  v2 = (int *)type metadata accessor for ShelfView(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v71 = *(_QWORD *)(v3 + 64);
  v72 = (v4 + 16) & ~v4;
  v5 = (_QWORD *)(v0 + v72);
  v6 = sub_5C154(&qword_320160);
  if (swift_getEnumCaseMultiPayload(v0 + v72, v6) == 1)
  {
    v7 = type metadata accessor for SizeConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  v8 = (_QWORD *)((char *)v5 + v2[5]);
  v9 = sub_5C154((uint64_t *)&unk_32A010);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorConstants(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)((char *)v5 + v2[6]);
  v12 = sub_5C154(&qword_320308);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)((char *)v5 + v2[7]);
  swift_release(*v14);
  swift_release(v14[1]);
  v15 = (char *)v14 + *(int *)(sub_5C154(&qword_323248) + 32);
  v16 = type metadata accessor for NavigationBarTransitionInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    v18.n128_f64[0] = (*(double (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  v19 = (char *)v5 + v2[8];
  v20 = type metadata accessor for ShelfGridBreakpoint(0, v18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = sub_5C154(&qword_323BE8);
  swift_release(*(_QWORD *)&v19[*(int *)(v21 + 28)]);
  sub_64FFC(*(_QWORD *)((char *)v5 + v2[9]), *((_BYTE *)v5 + v2[9] + 8));
  sub_64FFC(*(_QWORD *)((char *)v5 + v2[10]), *((_BYTE *)v5 + v2[10] + 8));
  sub_64FFC(*(_QWORD *)((char *)v5 + v2[11]), *((_BYTE *)v5 + v2[11] + 8));
  sub_64FFC(*(_QWORD *)((char *)v5 + v2[12]), *((_BYTE *)v5 + v2[12] + 8));
  sub_64FFC(*(_QWORD *)((char *)v5 + v2[13]), *((_BYTE *)v5 + v2[13] + 8));
  v22 = (_QWORD *)((char *)v5 + v2[14]);
  v23 = sub_5C154(&qword_323BF0);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  v25 = (_QWORD *)((char *)v5 + v2[15]);
  if ((v25[5] & 1) != 0)
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
  else
    swift_release(*v25);
  sub_794D8(*(id *)((char *)v5 + v2[16]), *((_BYTE *)v5 + v2[16] + 8));
  v26 = (_QWORD *)((char *)v5 + v2[17]);
  v27 = sub_5C154(&qword_3202B8);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v26, v28);
  }
  else
  {
    swift_release(*v26);
  }
  v29 = (_QWORD *)((char *)v5 + v2[18]);
  if ((v29[5] & 1) != 0)
  {
    if (v29[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v29);
  }
  else
  {
    swift_release(*v29);
  }
  v30 = (char *)v5 + v2[19];
  v31 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
  sub_79528(*(_QWORD *)((char *)v5 + v2[20]), *((unsigned __int8 *)v5 + v2[20] + 8), *((_BYTE *)v5 + v2[20] + 9));
  v32 = (char *)v5 + v2[21];
  swift_bridgeObjectRelease(*((_QWORD *)v32 + 1));
  v33 = (int *)type metadata accessor for Shelf(0);
  v34 = &v32[v33[8]];
  v35 = type metadata accessor for ImpressionMetrics(0);
  v36 = *(_QWORD *)(v35 - 8);
  v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  if (!v70(v34, 1, v35))
    v37.n128_f64[0] = (*(double (**)(char *, uint64_t))(v36 + 8))(v34, v35);
  v69 = v36;
  v38 = &v32[v33[9]];
  v39 = type metadata accessor for Metrics.Location(0, v37);
  v40 = *(_QWORD *)(v39 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32[v33[10]]);
  v41 = &v32[v33[11]];
  v42 = type metadata accessor for ShelfGridSpacing(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
  v44 = &v32[v33[12]];
  v45 = type metadata accessor for ShelfBackgroundViewModel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32[v33[13]]);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v32[v33[14]]);
  v46 = &v32[v33[15]];
  v47 = (int *)type metadata accessor for ContentUnavailableComponentModel(0);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v47 - 1) + 48))(v46, 1, v47))
  {
    v66 = v35;
    v67 = v4;
    v68 = v1;
    swift_bridgeObjectRelease(*((_QWORD *)v46 + 1));
    v48 = &v46[v47[5]];
    v49 = type metadata accessor for LocalizerRequest(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(void (**)(char *, uint64_t))(v50 + 8);
    v51(v48, v49);
    v52 = &v46[v47[6]];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v52, 1, v49))
      v51(v52, v49);
    v53 = &v46[v47[9]];
    v54 = type metadata accessor for _CodeAnyActionModel_OrNil(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v46[v47[10]]);
    v55 = &v46[v47[11]];
    v4 = v67;
    v1 = v68;
    if (!v70(v55, 1, v66))
      (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v66);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v32[v33[16]]);
  v56 = &v32[v33[17]];
  v57 = type metadata accessor for PaginationInfo(0);
  v58 = *(_QWORD *)(v57 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
  v59 = &v32[v33[18]];
  if (*((_QWORD *)v59 + 3))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v59);
  v60 = &v32[v33[19]];
  v61 = type metadata accessor for SectionData(0);
  v62 = *(_QWORD *)(v61 - 8);
  v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  if (!v63(v60, 1, v61))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v61);
  swift_release(*(_QWORD *)((char *)v5 + v2[23]));
  v64 = (char *)v5 + v2[24];
  if (!v63(v64, 1, v61))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
  return swift_deallocObject(v1, v72 + v71, v4 | 7);
}

uint64_t sub_F12CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShelfView(0) - 8) + 80);
  return sub_E8E4C(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_F1320@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1DDD04(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

_OWORD *sub_F1344(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_F135C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, char *)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void (*v16)(__n128);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v12 = *(_QWORD *)(a4 - 8);
  v13 = __chkstk_darwin(a1);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v13);
  *a6 = a1;
  a6[4] = a4;
  a6[5] = a5;
  v17 = sub_668BC(a6 + 1);
  (*(void (**)(_QWORD *, char *, uint64_t))(v12 + 16))(v17, v15, a4);
  if (a2)
  {
    swift_retain(a1);
    sub_6C24C((uint64_t)a2, a3);
    v18 = a2(a1, v15);
    v20 = v19;
    sub_6C2DC((uint64_t)a2, a3);
    sub_6C2DC((uint64_t)a2, a3);
    swift_release(a1);
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, a4);
  a6[6] = v18;
  a6[7] = v20;
  return result;
}

uint64_t RootHostingController.DependencyInjectionView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t OpaqueTypeConformance2;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSString v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;

  v2 = v1;
  v41 = a1;
  v3 = sub_5C154(&qword_323F58);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_323F60);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_323F68);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_323F70);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5C154(&qword_323F78);
  v42 = *(_QWORD *)(v16 - 8);
  v43 = v16;
  __chkstk_darwin(v16);
  v40 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v2[4];
  v19 = v2[5];
  v20 = sub_66898(v2 + 1, v18);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v24 + 16))(v23, v21);
  v25 = AnyView.init<A>(_:)(v23, v18, v19);
  v26 = *v2;
  sub_F17EC(*v2, v25, (uint64_t)v5);
  swift_release(v25);
  sub_F1BF8(v26, (uint64_t)v8);
  sub_5E09C((uint64_t)v5, &qword_323F58);
  sub_F1F50(*v2, (uint64_t)v11);
  sub_5E09C((uint64_t)v8, &qword_323F60);
  sub_F24F4((uint64_t)v15);
  sub_5E09C((uint64_t)v11, &qword_323F68);
  v27 = sub_667D0(&qword_323F80);
  v28 = sub_F26F4();
  v45 = v27;
  v46 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of View.fontDesign(_:)>>, 1);
  v30 = v40;
  View.rootForViewSizeConditions()(v12, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v31 = sub_5C154(&qword_3240A0);
  v32 = v41;
  v33 = v41 + *(int *)(v31 + 36);
  v34 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v35 = String._bridgeToObjectiveC()();
  NSNotificationCenter.publisher(for:object:)(v35, 0);

  v36 = v33 + *(int *)(type metadata accessor for ObserveReachabilityViewModifier(0) + 20);
  v44 = objc_msgSend((id)objc_opt_self(BKReachability), "isOffline") ^ 1;
  State.init(wrappedValue:)(&v45, &v44, &type metadata for Bool);
  v37 = v46;
  *(_BYTE *)v36 = v45;
  *(_QWORD *)(v36 + 8) = v37;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v32, v30, v43);
}

uint64_t sub_F17EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[7];

  v46 = a3;
  v5 = sub_5C154(&qword_324048);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_5C154(&qword_324040);
  v42 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_324100);
  v43 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_5C154(&qword_324038);
  __chkstk_darwin(v41);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_5C154(&qword_324028);
  __chkstk_darwin(v45);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[5] = a2;
  v17 = sub_5C154(&qword_31FE28);
  v18 = a1;
  BaseObjectGraph.inject<A>(_:)(v52, v17, v17);
  v19 = type metadata accessor for GeometryCache(0);
  v20 = v18;
  BaseObjectGraph.inject<A>(_:)(&v48, v19, v19);
  v21 = v48;
  v50 = v19;
  v51 = sub_648E0(&qword_324108, (uint64_t (*)(uint64_t))&type metadata accessor for GeometryCache, (uint64_t)&protocol conformance descriptor for GeometryCache);
  v40 = v21;
  v48 = v21;
  swift_retain(v21);
  View.appAnalyticsSizeProvider(_:)(&v48, &type metadata for AnyView, &protocol witness table for AnyView);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v48);
  v48 = &type metadata for AnyView;
  v49 = &protocol witness table for AnyView;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v48, &opaque type descriptor for <<opaque return type of View.appAnalyticsSizeProvider(_:)>>, 1);
  View.exposureCollecting(from:)(v20, v5, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v5);
  v48 = (void *)v5;
  v49 = (void *)OpaqueTypeConformance2;
  v23 = swift_getOpaqueTypeConformance2(&v48, &opaque type descriptor for <<opaque return type of View.exposureCollecting(from:)>>, 1);
  v24 = v39;
  View._localizerForAnalytics(_:)(v52, v39, v23);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v24);
  KeyPath = swift_getKeyPath(&unk_25E288);
  v47 = 0;
  State.init(wrappedValue:)(&v48, &v47, &type metadata for Bool);
  LOBYTE(OpaqueTypeConformance2) = (_BYTE)v48;
  v26 = v49;
  v28 = v43;
  v27 = v44;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v14, v12, v44);
  v29 = &v14[*(int *)(v41 + 36)];
  *(_QWORD *)v29 = KeyPath;
  v29[8] = 0;
  v29[16] = OpaqueTypeConformance2;
  *((_QWORD *)v29 + 3) = v26;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v27);
  BaseObjectGraph.inject<A>(_:)(&v48, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  LOBYTE(OpaqueTypeConformance2) = (_BYTE)v48;
  v30 = swift_getKeyPath(&unk_25E2B8);
  sub_5E1A4((uint64_t)v14, (uint64_t)v16, &qword_324038);
  v31 = &v16[*(int *)(v45 + 36)];
  *(_QWORD *)v31 = v30;
  v31[8] = OpaqueTypeConformance2;
  sub_5E09C((uint64_t)v14, &qword_324038);
  v32 = swift_getKeyPath(&unk_25E288);
  v33 = type metadata accessor for HostingControllerVisibilityStateManager(0);
  BaseObjectGraph.inject<A>(_:)(&v48, v33, v33);
  v34 = (uint64_t)v48;
  v35 = v46;
  sub_5E1A4((uint64_t)v16, v46, &qword_324028);
  swift_release(v40);
  v36 = (uint64_t *)(v35 + *(int *)(sub_5C154(&qword_323F58) + 36));
  *v36 = v32;
  v36[1] = v34;
  sub_5E09C((uint64_t)v16, &qword_324028);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v52);
}

uint64_t sub_F1BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v41 = a2;
  v3 = sub_5C154(&qword_324010);
  v33 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5C154(&qword_324008);
  v34 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_5C154(&qword_324000);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_3240F8);
  v39 = *(_QWORD *)(v10 - 8);
  v40 = v10;
  __chkstk_darwin(v10);
  v38 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  BaseObjectGraph.inject<A>(_:)(&v42, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if (v42 == 1)
  {
    swift_retain(a1);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for MetricsPipeline(0);
    v12 = dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(v13);
  }
  v14 = sub_5C154(&qword_323F58);
  v15 = type metadata accessor for BaseObjectGraph(0);
  v16 = sub_F2C4C();
  View.actionDispatcher<A>(from:)(v12, v14, v15, v16);
  swift_release(v12);
  v42 = v14;
  v43 = v15;
  v44 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(from:)>>, 1);
  View.localizer(from:)(a1, v3, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v3);
  v42 = v3;
  v43 = OpaqueTypeConformance2;
  v18 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.localizer(from:)>>, 1);
  v19 = v36;
  View.intentDispatcher(from:)(a1, v36, v18);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v19);
  v42 = v19;
  v43 = v18;
  v20 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.intentDispatcher(from:)>>, 1);
  v21 = v37;
  v22 = v38;
  View.synchronousNativeIntentDispatcher(from:)(a1, v37, v20);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v21);
  v23 = type metadata accessor for HostProxy(0);
  v24 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  swift_retain(a1);
  v25 = Environment.init<A>(_:)(v23, v23, v24);
  LOBYTE(v24) = v26;
  v28 = v39;
  v27 = v40;
  v29 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v41, v22, v40);
  v30 = v29 + *(int *)(sub_5C154(&qword_323F60) + 36);
  *(_QWORD *)v30 = v25;
  *(_BYTE *)(v30 + 8) = v24 & 1;
  *(_QWORD *)(v30 + 16) = a1;
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v22, v27);
}

uint64_t sub_F1F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD v52[2];
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  ValueMetadata *v70;
  unint64_t v71;

  v66 = a2;
  v3 = sub_5C154(&qword_323FF0);
  __chkstk_darwin(v3);
  v5 = (char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[0] = sub_5C154(&qword_323FD8);
  __chkstk_darwin(v52[0]);
  v7 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_323FD0);
  v55 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_323FC8);
  v12 = *(_QWORD *)(v11 - 8);
  v56 = v11;
  v57 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5C154(&qword_323FC0);
  v16 = *(_QWORD *)(v15 - 8);
  v59 = v15;
  v60 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5C154(&qword_323FB8);
  v20 = *(_QWORD *)(v19 - 8);
  v62 = v19;
  v63 = v20;
  __chkstk_darwin(v19);
  v53 = (char *)v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5C154(&qword_3240D8);
  v64 = *(_QWORD *)(v22 - 8);
  v65 = v22;
  __chkstk_darwin(v22);
  v54 = (char *)v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5C154(&qword_323FB0);
  __chkstk_darwin(v61);
  v58 = (char *)v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_25E200);
  v26 = sub_5C154(&qword_3228D0);
  v27 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(&v67, v26, a1, v26, v27);
  v28 = (uint64_t *)&v5[*(int *)(v3 + 36)];
  sub_5E0D8((uint64_t)&v67, (uint64_t)(v28 + 1));
  *v28 = KeyPath;
  sub_5E1A4(v52[1], (uint64_t)v5, &qword_323F60);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v67);
  sub_215324((uint64_t)v7);
  sub_5E09C((uint64_t)v5, &qword_323FF0);
  v29 = sub_F2A18();
  v30 = v52[0];
  View.geometryCache(from:)(a1, v52[0], v29);
  sub_5E09C((uint64_t)v7, &qword_323FD8);
  v31 = type metadata accessor for HostProxy(0);
  BaseObjectGraph.inject<A>(_:)(&v67, v31, v31);
  v32 = v67;
  swift_retain(v67);
  v67 = v30;
  v68 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.geometryCache(from:)>>, 1);
  v34 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
  View.environment<A>(_:)(v32, v8, v31, OpaqueTypeConformance2, v34);
  swift_release_n(v32, 2);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v8);
  v67 = v8;
  v68 = v31;
  v69 = OpaqueTypeConformance2;
  v70 = (ValueMetadata *)v34;
  v35 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v36 = v56;
  View.imageResourceProvider(from:)(a1, v56, v35);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v36);
  v67 = v36;
  v68 = v35;
  v37 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 1);
  v38 = v53;
  v39 = v59;
  View.profileRestrictions(from:)(a1, v59, v37);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v18, v39);
  v67 = v39;
  v68 = v37;
  v40 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 1);
  v41 = v54;
  v42 = v62;
  View.sharedWithYouController(from:)(a1, v62, v40);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v42);
  v43 = swift_getKeyPath(&unk_25E228);
  BaseObjectGraph.inject<A>(_:)(&v67, v31, v31);
  v70 = &type metadata for ConvertRectFromGlobalHandler;
  v71 = sub_F3884();
  v44 = (uint64_t)v58;
  v45 = (uint64_t *)&v58[*(int *)(v61 + 36)];
  sub_5E1A4((uint64_t)&v67, (uint64_t)(v45 + 1), &qword_3240E8);
  *v45 = v43;
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v44, v41, v65);
  sub_5E09C((uint64_t)&v67, &qword_3240E8);
  v46 = swift_getKeyPath(&unk_25E258);
  v47 = sub_5C154(&qword_31FE88);
  BaseObjectGraph.inject<A>(_:)(&v67, v47, v47);
  v48 = sub_5C154(&qword_323F68);
  v49 = v66;
  v50 = (uint64_t *)(v66 + *(int *)(v48 + 36));
  sub_5E1A4((uint64_t)&v67, (uint64_t)(v50 + 1), &qword_3240F0);
  *v50 = v46;
  sub_5E1A4(v44, v49, &qword_323FB0);
  sub_5E09C((uint64_t)&v67, &qword_3240F0);
  return sub_5E09C(v44, &qword_323FB0);
}

uint64_t sub_F24F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t KeyPath;
  char v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  _QWORD v23[4];

  v2 = v1;
  v22[1] = a1;
  v3 = sub_5C154(&qword_31F7E8);
  __chkstk_darwin(v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_323F98);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_323F80);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BaseObjectGraph.inject<A>(_:)(v23, &type metadata for RootHostingControllerConfiguration, &type metadata for RootHostingControllerConfiguration);
  v12 = (_BYTE *)v23[0];
  v13 = v23[3];
  KeyPath = swift_getKeyPath(&unk_25E1A0);
  v15 = v12[OBJC_IVAR___BSUINavigationContext_isInCard];
  sub_5E1A4(v2, (uint64_t)v8, &qword_323F68);
  v16 = &v8[*(int *)(v6 + 36)];
  *(_QWORD *)v16 = KeyPath;
  v16[8] = v15;
  v17 = swift_getKeyPath(&unk_25E1D0);
  LOBYTE(v6) = v12[OBJC_IVAR___BSUINavigationContext_isInModal];
  sub_5E1A4((uint64_t)v8, (uint64_t)v11, &qword_323F98);
  v18 = &v11[*(int *)(v9 + 36)];
  *(_QWORD *)v18 = v17;
  v18[8] = v6;
  v19 = sub_5E09C((uint64_t)v8, &qword_323F98);
  static Font.Design.defaultIfUnsupported.getter(v19);
  v20 = sub_F26F4();
  View.fontDesign(_:)(v5, v9, v20);

  swift_bridgeObjectRelease(v13);
  sub_5E09C((uint64_t)v5, &qword_31F7E8);
  return sub_5E09C((uint64_t)v11, &qword_323F80);
}

unint64_t sub_F26F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323F88;
  if (!qword_323F88)
  {
    v1 = sub_667D0(&qword_323F80);
    sub_F2778();
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323F88);
  }
  return result;
}

unint64_t sub_F2778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323F90;
  if (!qword_323F90)
  {
    v1 = sub_667D0(&qword_323F98);
    sub_F27FC();
    sub_67060(&qword_323E68, &qword_323E70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323F90);
  }
  return result;
}

unint64_t sub_F27FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323FA0;
  if (!qword_323FA0)
  {
    v1 = sub_667D0(&qword_323F68);
    sub_F2880();
    sub_67060(&qword_324090, &qword_324098, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323FA0);
  }
  return result;
}

unint64_t sub_F2880()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = qword_323FA8;
  if (!qword_323FA8)
  {
    v1 = sub_667D0(&qword_323FB0);
    v2 = sub_667D0(&qword_323FB8);
    v3 = sub_667D0(&qword_323FC0);
    v4 = sub_667D0(&qword_323FC8);
    v5 = sub_667D0(&qword_323FD0);
    v6 = type metadata accessor for HostProxy(255);
    v12 = sub_667D0(&qword_323FD8);
    v13 = sub_F2A18();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.geometryCache(from:)>>, 1);
    v8 = sub_648E0(&qword_31F838, type metadata accessor for HostProxy, (uint64_t)&protocol conformance descriptor for HostProxy);
    v12 = v5;
    v13 = v6;
    v14 = OpaqueTypeConformance2;
    v15 = v8;
    v9 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    v12 = v4;
    v13 = v9;
    v10 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.imageResourceProvider(from:)>>, 1);
    v12 = v3;
    v13 = v10;
    v11 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.profileRestrictions(from:)>>, 1);
    v12 = v2;
    v13 = v11;
    swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.sharedWithYouController(from:)>>, 1);
    sub_67060(&qword_324080, &qword_324088, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323FA8);
  }
  return result;
}

unint64_t sub_F2A18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323FE0;
  if (!qword_323FE0)
  {
    v1 = sub_667D0(&qword_323FD8);
    sub_F2A9C();
    sub_67060(&qword_3228F0, &qword_3228E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323FE0);
  }
  return result;
}

unint64_t sub_F2A9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_323FE8;
  if (!qword_323FE8)
  {
    v1 = sub_667D0(&qword_323FF0);
    sub_F2B20();
    sub_67060(&qword_3228E0, &qword_3228D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323FE8);
  }
  return result;
}

unint64_t sub_F2B20()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = qword_323FF8;
  if (!qword_323FF8)
  {
    v1 = sub_667D0(&qword_323F60);
    v2 = sub_667D0(&qword_324000);
    v3 = sub_667D0(&qword_324008);
    v4 = sub_667D0(&qword_324010);
    v8 = sub_667D0(&qword_323F58);
    v9 = type metadata accessor for BaseObjectGraph(255);
    v10 = sub_F2C4C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(from:)>>, 1);
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.localizer(from:)>>, 1);
    v8 = v3;
    v9 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.intentDispatcher(from:)>>, 1);
    v8 = v2;
    v9 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.synchronousNativeIntentDispatcher(from:)>>, 1);
    sub_F2E80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_323FF8);
  }
  return result;
}

unint64_t sub_F2C4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324018;
  if (!qword_324018)
  {
    v1 = sub_667D0(&qword_323F58);
    sub_F2CD0();
    sub_67060(&qword_324068, &qword_324070, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_324018);
  }
  return result;
}

unint64_t sub_F2CD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324020;
  if (!qword_324020)
  {
    v1 = sub_667D0(&qword_324028);
    sub_F2D54();
    sub_67060(&qword_324058, &qword_324060, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_324020);
  }
  return result;
}

unint64_t sub_F2D54()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  void *v6;
  void *v7;

  result = qword_324030;
  if (!qword_324030)
  {
    v1 = sub_667D0(&qword_324038);
    v2 = sub_667D0(&qword_324040);
    v3 = sub_667D0(&qword_324048);
    v6 = &type metadata for AnyView;
    v7 = &protocol witness table for AnyView;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.appAnalyticsSizeProvider(_:)>>, 1);
    v6 = (void *)v3;
    v7 = (void *)OpaqueTypeConformance2;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.exposureCollecting(from:)>>, 1);
    v6 = (void *)v2;
    v7 = (void *)v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View._localizerForAnalytics(_:)>>, 1);
    sub_F2E3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_324030);
  }
  return result;
}

unint64_t sub_F2E3C()
{
  unint64_t result;

  result = qword_324050;
  if (!qword_324050)
  {
    result = swift_getWitnessTable(&unk_264290, &type metadata for JetViewAppearanceViewModifier);
    atomic_store(result, (unint64_t *)&qword_324050);
  }
  return result;
}

unint64_t sub_F2E80()
{
  unint64_t result;

  result = qword_324078;
  if (!qword_324078)
  {
    result = swift_getWitnessTable(&unk_25E14C, &type metadata for JetSceneSessionViewModifier);
    atomic_store(result, (unint64_t *)&qword_324078);
  }
  return result;
}

uint64_t sub_F2EC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of RootHostingController.DependencyInjectionView.body>>, 1);
}

double _s11descr2EC6B1V23DependencyInjectionViewVwxx(_QWORD *a1)
{
  double result;

  swift_release(*a1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[7]).n128_u64[0];
  return result;
}

uint64_t _s11descr2EC6B1V23DependencyInjectionViewVwcp(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t *, uint64_t);
  uint64_t v9;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v6 - 8);
  swift_retain(v4);
  v8(a1 + 8, v5, v7);
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *_s11descr2EC6B1V23DependencyInjectionViewVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  sub_65938(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  v6 = a2[7];
  v7 = a1[7];
  a1[7] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 _s11descr2EC6B1V23DependencyInjectionViewVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *_s11descr2EC6B1V23DependencyInjectionViewVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  v5 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t _s11descr2EC6B1V23DependencyInjectionViewVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11descr2EC6B1V23DependencyInjectionViewVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RootHostingController.DependencyInjectionView()
{
  return &type metadata for RootHostingController.DependencyInjectionView;
}

unint64_t sub_F3114()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_3240A8;
  if (!qword_3240A8)
  {
    v1 = sub_667D0(&qword_3240A0);
    v2 = sub_667D0(&qword_323F70);
    v4 = sub_667D0(&qword_323F80);
    v5 = sub_F26F4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.fontDesign(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.rootForViewSizeConditions()>>, 1);
    sub_648E0((unint64_t *)&qword_3240B0, type metadata accessor for ObserveReachabilityViewModifier, (uint64_t)&unk_2689A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3240A8);
  }
  return result;
}

uint64_t destroy for JetSceneSessionViewModifier(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[2]);
}

uint64_t _s11BookStoreUI27JetSceneSessionViewModifierVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for JetSceneSessionViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = a1[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

uint64_t *assignWithTake for JetSceneSessionViewModifier(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JetSceneSessionViewModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JetSceneSessionViewModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JetSceneSessionViewModifier()
{
  return &type metadata for JetSceneSessionViewModifier;
}

uint64_t sub_F33A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B71B0, 1);
}

uint64_t sub_F33B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a1;
  v27 = a4;
  v6 = sub_5C154(&qword_3240B8);
  v25 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_3240C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_3240C8);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_F3614(a2, a3 & 1);
  if (v16)
  {
    v17 = (void *)v16;
    v18 = sub_67060(&qword_3240D0, &qword_3240B8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    View.jetSceneSession(_:)(v17, v6, v18);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v15, v12);
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v28 = v6;
    v29 = v18;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.jetSceneSession(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v11, v12, v6, OpaqueTypeConformance2, v18);

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    v21 = v25;
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    v22(v8, v26, v6);
    v22(v11, (uint64_t)v8, v6);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v23 = sub_67060(&qword_3240D0, &qword_3240B8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v28 = v6;
    v29 = v23;
    v24 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.jetSceneSession(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v11, v12, v6, v24, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  }
}

uint64_t sub_F3614(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint8_t *v19;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v3 = a2 & 1;
  v4 = swift_retain(a1);
  v5 = sub_78264(v4, v3);
  swift_release(a1);
  sub_A20B8();
  v7 = v6;
  swift_release(v5);
  if (!v7)
  {
    if (qword_31E590 != -1)
      swift_once(&qword_31E590, sub_126700);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_5240C(v8, (uint64_t)qword_325058);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.fault.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "RootHostingController does not have a UISceneSession when rendering DependencyInjectionView", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = sub_5C154(&qword_31FE18);
    BaseObjectGraph.inject<A>(_:)(v21, v13, v13);
    v14 = v22;
    v15 = v23;
    sub_66898(v21, v22);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
    v16 = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v21);
    if (!v7)
    {
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.fault.getter(v17);
      if (os_log_type_enabled(v17, (os_log_type_t)v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_0, v17, (os_log_type_t)v18, "Could not find a fallback UISceneSession", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      return 0;
    }
  }
  return v7;
}

uint64_t sub_F37F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_F33B8(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t sub_F3828()
{
  return EnvironmentValues.convertRectFromGlobalHandler.getter();
}

uint64_t sub_F3848(uint64_t a1)
{
  _BYTE v2[40];

  sub_5E1A4(a1, (uint64_t)v2, &qword_3240E8);
  return EnvironmentValues.convertRectFromGlobalHandler.setter(v2);
}

unint64_t sub_F3884()
{
  unint64_t result;

  result = qword_3240E0;
  if (!qword_3240E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConvertRectFromGlobalHandler, &type metadata for ConvertRectFromGlobalHandler);
    atomic_store(result, (unint64_t *)&qword_3240E0);
  }
  return result;
}

unint64_t sub_F38E4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_324110;
  if (!qword_324110)
  {
    v1 = sub_667D0(&qword_324118);
    v2[0] = sub_667D0(&qword_3240B8);
    v2[1] = sub_67060(&qword_3240D0, &qword_3240B8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.jetSceneSession(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_324110);
  }
  return result;
}

uint64_t PageContent.initialPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v4, v5);
  sub_5E1A4((uint64_t)v4 + *(int *)(v2 + 20), a1, &qword_3217C0);
  return sub_6685C((uint64_t)v4, type metadata accessor for PageContent.PageInfo);
}

uint64_t type metadata accessor for PageContent.PageInfo(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_3242C8, (uint64_t)&nominal type descriptor for PageContent.PageInfo);
}

uint64_t PageContent.init(pageIntent:initialPage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35[2];

  v31 = (_QWORD *)a1;
  v32 = a2;
  v33 = a3;
  v4 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v34 = (uint64_t)&v30 - v11;
  v12 = type metadata accessor for PageAlert(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - v16;
  v18 = (_QWORD *)(a3 + *(int *)(type metadata accessor for PageContent(0) + 20));
  v19 = type metadata accessor for BooksAlertAction(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v14, 1, 1, v19);
  sub_5E09C((uint64_t)v14, &qword_322FA0);
  v20(v14, 1, 1, v19);
  sub_5E160((uint64_t)v14, (uint64_t)v17, type metadata accessor for PageAlert);
  sub_5E11C((uint64_t)v17, (uint64_t)v14, type metadata accessor for PageAlert);
  State.init(wrappedValue:)(v18, v14, v12);
  sub_6685C((uint64_t)v17, type metadata accessor for PageAlert);
  v21 = v31;
  sub_5E0D8((uint64_t)v31, (uint64_t)v35);
  v22 = v32;
  sub_5E1A4(v32, (uint64_t)v6, &qword_3217C0);
  v23 = (uint64_t)&v9[v7[5]];
  v24 = type metadata accessor for Page(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  v25((uint64_t)&v9[v7[6]], 1, 1, v24);
  v9[v7[7]] = 0;
  static IntentResult.empty.getter(v24);
  v25((uint64_t)&v9[v7[9]], 1, 1, v24);
  sub_5DC98(v35, (uint64_t)v9);
  sub_F7500((uint64_t)v6, v23);
  v26 = v34;
  sub_5E160((uint64_t)v9, v34, type metadata accessor for PageContent.PageInfo);
  sub_5E09C(v22, &qword_3217C0);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v21);
  v27 = sub_5C154(&qword_3217C8);
  v28 = v33;
  *(_QWORD *)(v33 + *(int *)(v27 + 28)) = 0;
  return sub_5E160(v26, v28, type metadata accessor for PageContent.PageInfo);
}

uint64_t PageContent.contentType.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v30 = a1;
  v1 = sub_5C154(&qword_322E30);
  v29 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5C154(&qword_323078);
  __chkstk_darwin(v28);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v27 - v13);
  v15 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v14, v15);
  sub_F605C((uint64_t)v8);
  sub_6685C((uint64_t)v14, type metadata accessor for PageContent.PageInfo);
  v16 = type metadata accessor for Page(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v8, 1, v16);
  sub_5E09C((uint64_t)v8, &qword_3217C0);
  if (v17 == 1)
  {
    v18 = v30;
    State.wrappedValue.getter(v11, v15);
    v19 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v3, &v11[*(int *)(v9 + 32)], v1);
    sub_6685C((uint64_t)v11, type metadata accessor for PageContent.PageInfo);
    v20 = IntentResult.error.getter(v1);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v1);
    if (v20)
    {
      *v18 = v20;
      v21 = type metadata accessor for PageContent.ContentType(0);
      v22 = v18;
      v23 = 1;
    }
    else
    {
      v21 = type metadata accessor for PageContent.ContentType(0);
      v22 = v18;
      v23 = 2;
    }
  }
  else
  {
    State.projectedValue.getter(v5, v15);
    KeyPath = swift_getKeyPath(&unk_25E2E0);
    v25 = v30;
    Binding.subscript.getter(KeyPath, v28);
    swift_release(KeyPath);
    sub_5E09C((uint64_t)v5, &qword_323078);
    v21 = type metadata accessor for PageContent.ContentType(0);
    v22 = v25;
    v23 = 0;
  }
  return swift_storeEnumTagMultiPayload(v22, v21, v23);
}

Swift::Void __swiftcall PageContent.refresh(resetToLoading:)(Swift::Bool resetToLoading)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v4, v5);
  sub_5C154(&qword_322E30);
  IntentResult.invalidate(clearing:)(resetToLoading);
  sub_F56F4();
  State.wrappedValue.setter(v4, v5);
}

uint64_t View.dispatch(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];

  v25 = a2;
  v23[1] = a3;
  v24 = a1;
  v23[0] = type metadata accessor for Spring(0);
  v3 = *(_QWORD *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_323078);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_5C154(&qword_323080);
  __chkstk_darwin(v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v23 - v13);
  v15 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v15);
  v17 = (_QWORD *)((char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v17, v18);
  sub_5E0D8((uint64_t)v17, (uint64_t)v26);
  sub_6685C((uint64_t)v17, type metadata accessor for PageContent.PageInfo);
  State.projectedValue.getter(v8, v18);
  KeyPath = swift_getKeyPath(&unk_25E308);
  Binding.subscript.getter(KeyPath, v6);
  swift_release(KeyPath);
  sub_5E09C((uint64_t)v8, &qword_323078);
  Spring.init(mass:stiffness:damping:allowOverDamping:)(0, 1.0, 300.0, 35.0);
  v20 = static Animation.spring(_:blendDuration:)(v5, 0.0);
  (*(void (**)(char *, _QWORD))(v3 + 8))(v5, v23[0]);
  Binding.animation(_:)(v14, v20, v9);
  swift_release(v20);
  sub_5E09C((uint64_t)v11, &qword_323080);
  v21 = type metadata accessor for Page(0);
  sub_F8524(v26, (uint64_t)v14, v24, v21, v25);
  sub_5E09C((uint64_t)v14, &qword_323080);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v26);
}

uint64_t PageContent.dispatchState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_5C154(&qword_322E30);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, &v6[*(int *)(v4 + 32)], v0);
  sub_6685C((uint64_t)v6, type metadata accessor for PageContent.PageInfo);
  IntentResult.dispatchState.getter(v0);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t PageContent.isLoadingNewPageIntent.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v2, v3);
  v4 = *((unsigned __int8 *)v2 + *(int *)(v0 + 28));
  sub_6685C((uint64_t)v2, type metadata accessor for PageContent.PageInfo);
  return v4;
}

uint64_t PageContent.update(with:animated:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __int128 *v47;
  void (*v48)(char *, uint64_t, uint64_t, __n128);
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  __n128 v54;
  void (*v55)(char *, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  __int128 *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(__int128 *, uint64_t);
  uint64_t v163;
  int v164;
  uint64_t (*v165)(__int128 *, uint64_t);
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;

  v146 = a2;
  v161 = a1;
  v141 = type metadata accessor for AnimationCompletionCriteria(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (char *)&v129 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for Spring(0);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = (char *)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v4);
  v155 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v149 = (uint64_t)&v129 - v7;
  v152 = type metadata accessor for PageContent(0);
  v150 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v156 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v145 = (uint64_t)&v129 - v10;
  __chkstk_darwin(v11);
  v135 = (uint64_t)&v129 - v12;
  __chkstk_darwin(v13);
  v134 = (uint64_t)&v129 - v14;
  __chkstk_darwin(v15);
  v153 = (uint64_t)&v129 - v16;
  v151 = v17;
  __chkstk_darwin(v18);
  v147 = (uint64_t)&v129 - v19;
  v157 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v157);
  v154 = (uint64_t *)((char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v148 = (uint64_t *)((char *)&v129 - v22);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v129 - v24);
  v159 = sub_5C154(&qword_3217C8);
  __chkstk_darwin(v159);
  v27 = (char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5C154(&qword_31EF08);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v142 = (__int128 *)((char *)&v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  v143 = (char *)&v129 - v32;
  __chkstk_darwin(v33);
  v35 = (__int128 *)((char *)&v129 - v34);
  __chkstk_darwin(v36);
  v144 = (char *)&v129 - v37;
  __chkstk_darwin(v38);
  v40 = (__int128 *)((char *)&v129 - v39);
  __chkstk_darwin(v41);
  v43 = (char *)&v129 - v42;
  v45 = __chkstk_darwin(v44);
  v47 = (__int128 *)((char *)&v129 - v46);
  v48 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16);
  v48((char *)&v129 - v46, v161, v28, v45);
  v165 = *(uint64_t (**)(__int128 *, uint64_t))(v29 + 88);
  v49 = v165(v47, v28);
  v164 = enum case for PageUpdateInstruction.replacePage<A, B>(_:);
  if (v49 == enum case for PageUpdateInstruction.replacePage<A, B>(_:))
  {
    (*(void (**)(__int128 *, uint64_t))(v29 + 96))(v47, v28);
    sub_5DC98(v47, (uint64_t)&v176);
    sub_5E0D8((uint64_t)&v176, (uint64_t)&v173);
    sub_5E1A4(v158, (uint64_t)v27, &qword_3217C8);
    v50 = v159;
    State.wrappedValue.getter(v25, v159);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v25);
    sub_5DC98(&v173, (uint64_t)v25);
    *((_BYTE *)v25 + *(int *)(v157 + 28)) = 1;
    State.wrappedValue.setter(v25, v50);
    sub_5E09C((uint64_t)v27, &qword_3217C8);
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v176);
  }
  v132 = v27;
  v133 = v25;
  if (v49 != enum case for PageUpdateInstruction.compound<A, B>(_:))
  {
    (*(void (**)(__int128 *, uint64_t))(v29 + 8))(v47, v28);
    v57 = v158;
    v58 = v159;
    v59 = (uint64_t)v156;
    v60 = (uint64_t)v155;
    v61 = v160;
LABEL_54:
    v105 = type metadata accessor for Page(0);
    v106 = ((uint64_t (*)(void))swift_allocBox)();
    v108 = v107;
    v109 = v154;
    State.wrappedValue.getter(v154, v58);
    sub_F605C(v60);
    sub_6685C((uint64_t)v109, type metadata accessor for PageContent.PageInfo);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 48))(v60, 1, v105) == 1)
    {
      sub_5E09C(v60, &qword_3217C0);
      return swift_deallocBox(v106);
    }
    else
    {
      sub_5E160(v60, v108, type metadata accessor for Page);
      v110 = type metadata accessor for PageAlert(0);
      v111 = swift_allocBox(v110);
      v113 = v112;
      v114 = sub_5C154(&qword_322F80);
      State.wrappedValue.getter(v113, v114);
      sub_F7840(v108, (uint64_t)v113, v161);
      if (v61)
      {
        swift_release(v106);
        return swift_release(v111);
      }
      else
      {
        v160 = 0;
        v115 = v145;
        sub_5E11C(v57, v145, type metadata accessor for PageContent);
        sub_5E11C(v115, v59, type metadata accessor for PageContent);
        v116 = *(unsigned __int8 *)(v150 + 80);
        v117 = (v116 + 16) & ~v116;
        v118 = (v151 + v117 + 7) & 0xFFFFFFFFFFFFFFF8;
        v119 = (v118 + 15) & 0xFFFFFFFFFFFFFFF8;
        v120 = swift_allocObject(&unk_2EC728, v119 + 8, v116 | 7);
        sub_5E160(v115, v120 + v117, type metadata accessor for PageContent);
        *(_QWORD *)(v120 + v118) = v106;
        *(_QWORD *)(v120 + v119) = v111;
        swift_retain(v111);
        swift_retain(v106);
        if ((v146 & 1) != 0)
        {
          sub_6685C(v59, type metadata accessor for PageContent);
          v121 = v136;
          Spring.init(mass:stiffness:damping:allowOverDamping:)(0, 1.0, 300.0, 35.0);
          v122 = static Animation.spring(_:blendDuration:)(v121, 0.0);
          v123 = (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v121, v138);
          __chkstk_darwin(v123);
          *(&v129 - 2) = (uint64_t)sub_F8660;
          *(&v129 - 1) = v120;
          v124 = swift_retain(v120);
          v125 = v139;
          static AnimationCompletionCriteria.logicallyComplete.getter(v124);
          withAnimation<A>(_:completionCriteria:_:completion:)(v122, v125, sub_F8664, &v129 - 4, SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame(), 0, (char *)&type metadata for () + 8);
          swift_release(v120);
          swift_release(v122);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v125, v141);
          swift_release(v106);
          swift_release(v111);
          return swift_release(v120);
        }
        else
        {
          sub_F8180(v59, v106, v111);
          sub_6685C(v59, type metadata accessor for PageContent);
          swift_release(v106);
          swift_release(v111);
          return swift_release(v120);
        }
      }
    }
  }
  v162 = *(void (**)(__int128 *, uint64_t))(v29 + 96);
  v162(v47, v28);
  v179 = *(_QWORD *)v47;
  v131 = *(_QWORD *)(v179 + 16);
  if (!v131)
  {
LABEL_25:
    v178 = 0;
    v176 = 0u;
    v177 = 0u;
    swift_bridgeObjectRelease(v179);
    v57 = v158;
    v59 = (uint64_t)v156;
    v60 = (uint64_t)v155;
    if (!*((_QWORD *)&v177 + 1))
      goto LABEL_49;
    goto LABEL_26;
  }
  v130 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v51 = v179 + v130;
  v163 = *(_QWORD *)(v29 + 72);
  v52 = v131;
  while (1)
  {
    ((void (*)(char *, unint64_t, uint64_t))v48)(v43, v51, v28);
    ((void (*)(__int128 *, char *, uint64_t))v48)(v40, v43, v28);
    v53 = v165(v40, v28);
    if (v53 == v164)
    {
      v162(v40, v28);
      sub_5DC98(v40, (uint64_t)&v170);
      sub_5DC98(&v170, (uint64_t)&v173);
      v54 = swift_bridgeObjectRetain(v179);
      v55 = *(void (**)(char *, uint64_t, __n128))(v29 + 8);
      v55(v43, v28, v54);
    }
    else
    {
      v56 = swift_bridgeObjectRetain(v179);
      v55 = *(void (**)(char *, uint64_t, __n128))(v29 + 8);
      v55((char *)v40, v28, v56);
      v173 = 0u;
      v174 = 0u;
      v175 = 0;
      v55(v43, v28, (__n128)0);
    }
    if (*((_QWORD *)&v174 + 1))
    {
      sub_5DC98(&v173, (uint64_t)&v170);
    }
    else
    {
      v170 = v173;
      v171 = (unint64_t)v174;
      v172 = v175;
    }
    swift_bridgeObjectRelease(v179);
    if (*((_QWORD *)&v171 + 1))
      break;
    v51 += v163;
    if (!--v52)
      goto LABEL_25;
  }
  result = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v170);
  v63 = v131 + 1;
  v64 = v179 + v130 + v163 * (v131 - 1);
  v65 = -v163;
  v66 = v144;
  while (1)
  {
    if (v63 - 2 >= *(_QWORD *)(v179 + 16))
    {
      __break(1u);
      goto LABEL_64;
    }
    ((void (*)(char *, unint64_t, uint64_t))v48)(v66, v64, v28);
    ((void (*)(__int128 *, char *, uint64_t))v48)(v35, v66, v28);
    v67 = v165(v35, v28);
    if (v67 == v164)
    {
      v162(v35, v28);
      sub_5DC98(v35, (uint64_t)&v170);
      sub_5DC98(&v170, (uint64_t)&v173);
    }
    else
    {
      ((void (*)(__int128 *, uint64_t))v55)(v35, v28);
      v173 = 0u;
      v174 = 0u;
      v175 = 0;
    }
    result = ((uint64_t (*)(char *, uint64_t))v55)(v66, v28);
    if (*((_QWORD *)&v174 + 1))
      break;
    --v63;
    v64 += v65;
    if (v63 < 2)
    {
      __break(1u);
      goto LABEL_25;
    }
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v173);
  v89 = v143;
  ((void (*)(char *, unint64_t, uint64_t))v48)(v143, v64, v28);
  v90 = v142;
  ((void (*)(__int128 *, char *, uint64_t))v48)(v142, v89, v28);
  v91 = v165(v90, v28);
  if (v91 == v164)
  {
    v162(v90, v28);
    sub_5DC98(v90, (uint64_t)&v170);
    sub_5DC98(&v170, (uint64_t)&v173);
  }
  else
  {
    ((void (*)(__int128 *, uint64_t))v55)(v90, v28);
    v173 = 0u;
    v174 = 0u;
    v175 = 0;
  }
  v57 = v158;
  v59 = (uint64_t)v156;
  v60 = (uint64_t)v155;
  result = ((uint64_t (*)(char *, uint64_t))v55)(v89, v28);
  if (*((_QWORD *)&v174 + 1))
  {
    result = sub_5DC98(&v173, (uint64_t)&v170);
    if (*((_QWORD *)&v171 + 1))
    {
      result = sub_5E0D8((uint64_t)&v170, (uint64_t)&v167);
      goto LABEL_45;
    }
  }
  else
  {
    v170 = v173;
    v171 = (unint64_t)v174;
    v172 = v175;
  }
  v167 = v170;
  v168 = v171;
  v169 = v172;
LABEL_45:
  if (!*((_QWORD *)&v168 + 1))
  {
LABEL_64:
    __break(1u);
    return result;
  }
  sub_5DC98(&v167, (uint64_t)&v173);
  if (*((_QWORD *)&v171 + 1))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v170);
  sub_5DC98(&v173, (uint64_t)&v176);
  swift_bridgeObjectRelease(v179);
  if (!*((_QWORD *)&v177 + 1))
  {
LABEL_49:
    v170 = v176;
    v171 = v177;
    v172 = v178;
    goto LABEL_50;
  }
LABEL_26:
  sub_5E0D8((uint64_t)&v176, (uint64_t)&v170);
  if (!*((_QWORD *)&v171 + 1))
  {
LABEL_50:
    if (*((_QWORD *)&v177 + 1))
    {
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v176);
      if (*((_QWORD *)&v171 + 1))
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v170);
    }
    v61 = v160;
    v58 = v159;
    goto LABEL_54;
  }
  sub_5DC98(&v170, (uint64_t)&v173);
  v68 = v147;
  sub_5E11C(v57, v147, type metadata accessor for PageContent);
  sub_5E0D8((uint64_t)&v173, (uint64_t)&v170);
  sub_5E11C(v68, v153, type metadata accessor for PageContent);
  sub_5E0D8((uint64_t)&v170, (uint64_t)&v167);
  v69 = *(unsigned __int8 *)(v150 + 80);
  v70 = (v69 + 16) & ~v69;
  v71 = (v151 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  v165 = (uint64_t (*)(__int128 *, uint64_t))(v69 | 7);
  v72 = swift_allocObject(&unk_2EC750, v71 + 40, v69 | 7);
  v179 = v70;
  sub_5E160(v68, v72 + v70, type metadata accessor for PageContent);
  sub_5DC98(&v170, v72 + v71);
  v73 = type metadata accessor for Page(0);
  v74 = swift_allocBox(v73);
  v76 = v75;
  v77 = v148;
  State.wrappedValue.getter(v148, v159);
  v78 = v149;
  sub_F605C(v149);
  v79 = v78;
  sub_6685C((uint64_t)v77, type metadata accessor for PageContent.PageInfo);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v78, 1, v73) == 1)
  {
    sub_5E09C(v78, &qword_3217C0);
    swift_deallocBox(v74);
    v80 = v72;
    goto LABEL_29;
  }
  v81 = v74;
  sub_5E160(v79, v76, type metadata accessor for Page);
  v82 = type metadata accessor for PageAlert(0);
  v83 = swift_allocBox(v82);
  v84 = v57;
  v86 = v85;
  v87 = sub_5C154(&qword_322F80);
  State.wrappedValue.getter(v86, v87);
  v88 = v160;
  sub_F7840(v76, (uint64_t)v86, v161);
  if (!v88)
  {
    v160 = 0;
    v92 = v134;
    sub_5E11C(v84, v134, type metadata accessor for PageContent);
    v93 = v135;
    sub_5E11C(v92, v135, type metadata accessor for PageContent);
    v94 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8;
    v95 = swift_allocObject(&unk_2EC778, v94 + 8, v165);
    v96 = v92;
    v97 = v95;
    sub_5E160(v96, v95 + v179, type metadata accessor for PageContent);
    *(_QWORD *)(v97 + v71) = v81;
    *(_QWORD *)(v97 + v94) = v83;
    swift_retain(v83);
    swift_retain(v81);
    v98 = v72;
    if ((v146 & 1) != 0)
    {
      sub_6685C(v93, type metadata accessor for PageContent);
      v99 = v136;
      Spring.init(mass:stiffness:damping:allowOverDamping:)(0, 1.0, 300.0, 35.0);
      v100 = static Animation.spring(_:blendDuration:)(v99, 0.0);
      v101 = (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v99, v138);
      __chkstk_darwin(v101);
      *(&v129 - 2) = (uint64_t)sub_F8660;
      *(&v129 - 1) = v97;
      v102 = swift_retain(v97);
      v103 = v139;
      static AnimationCompletionCriteria.logicallyComplete.getter(v102);
      v104 = v160;
      withAnimation<A>(_:completionCriteria:_:completion:)(v100, v103, sub_106318, &v129 - 4, sub_F8CC4, v98, (char *)&type metadata for () + 8);
      v160 = v104;
      swift_release(v97);
      swift_release(v100);
      (*(void (**)(char *, uint64_t))(v140 + 8))(v103, v141);
      swift_release(v98);
      swift_release(v81);
      swift_release(v83);
      swift_release(v97);
    }
    else
    {
      sub_F8180(v93, v81, v83);
      sub_6685C(v93, type metadata accessor for PageContent);
      sub_5E0D8((uint64_t)&v167, (uint64_t)&v166);
      v126 = (uint64_t)v132;
      sub_5E1A4(v153, (uint64_t)v132, &qword_3217C8);
      v127 = v133;
      v128 = v159;
      State.wrappedValue.getter(v133, v159);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v127);
      sub_5DC98(&v166, (uint64_t)v127);
      *((_BYTE *)v127 + *(int *)(v157 + 28)) = 1;
      State.wrappedValue.setter(v127, v128);
      sub_5E09C(v126, &qword_3217C8);
      swift_release(v72);
      swift_release(v81);
      swift_release(v83);
      v80 = v97;
LABEL_29:
      swift_release(v80);
    }
    sub_6685C(v153, type metadata accessor for PageContent);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v167);
    result = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v173);
    if (!*((_QWORD *)&v177 + 1))
      return result;
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v176);
  }
  swift_release(v72);
  swift_release(v81);
  swift_release(v83);
  sub_6685C(v153, type metadata accessor for PageContent);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v167);
  result = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v173);
  if (*((_QWORD *)&v177 + 1))
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v176);
  return result;
}

uint64_t sub_F56F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  int *v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;

  v87 = type metadata accessor for Page(0);
  v85 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v79 = (uint64_t)&v77 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v2);
  v84 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v80 = (uint64_t)&v77 - v5;
  __chkstk_darwin(v6);
  v81 = (uint64_t)&v77 - v7;
  __chkstk_darwin(v8);
  v78 = (uint64_t)&v77 - v9;
  v10 = type metadata accessor for IntentDispatcherError(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_324320);
  __chkstk_darwin(v14);
  v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_323048);
  __chkstk_darwin(v17);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v77 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v77 - v24;
  v86 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v26 = v86[8];
  v88 = v0;
  v27 = (uint64_t)v0 + v26;
  v82 = sub_5C154(&qword_322E30);
  v83 = v27;
  v28 = ((uint64_t (*)(void))IntentResult.error.getter)();
  if (!v28)
    goto LABEL_16;
  v29 = v28;
  v90 = v28;
  swift_errorRetain(v28);
  v30 = sub_5C154((uint64_t *)&unk_321CD0);
  v31 = swift_dynamicCast(v25, &v90, v30, v10, 6);
  v32 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
  v32(v25, v31 ^ 1u, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v22, enum case for IntentDispatcherError.unsupported(_:), v10);
  v32(v22, 0, 1, v10);
  v33 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_5E1A4((uint64_t)v25, (uint64_t)v16, &qword_323048);
  sub_5E1A4((uint64_t)v22, v33, &qword_323048);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v34((uint64_t)v16, 1, v10) == 1)
  {
    sub_5E09C((uint64_t)v22, &qword_323048);
    v35 = v34(v33, 1, v10);
    v36 = v87;
    if (v35 == 1)
    {
      sub_5E09C((uint64_t)v16, &qword_323048);
      sub_5E09C((uint64_t)v25, &qword_323048);
      v37 = v86;
      v38 = v88;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  sub_5E1A4((uint64_t)v16, (uint64_t)v19, &qword_323048);
  if (v34(v33, 1, v10) == 1)
  {
    sub_5E09C((uint64_t)v22, &qword_323048);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
LABEL_7:
    sub_5E09C((uint64_t)v16, &qword_324320);
    sub_5E09C((uint64_t)v25, &qword_323048);
    v38 = v88;
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v13, v33, v10);
  v39 = sub_1062D0();
  v40 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v13, v10, v39);
  v41 = *(void (**)(char *, uint64_t))(v11 + 8);
  v41(v13, v10);
  sub_5E09C((uint64_t)v22, &qword_323048);
  v41(v19, v10);
  sub_5E09C((uint64_t)v16, &qword_323048);
  sub_5E09C((uint64_t)v25, &qword_323048);
  v37 = v86;
  v36 = v87;
  v38 = v88;
  if ((v40 & 1) != 0)
  {
LABEL_9:
    v42 = v78;
    sub_5E1A4((uint64_t)v38 + v37[5], v78, &qword_3217C0);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v42, 1, v36);
    sub_5E09C(v42, &qword_3217C0);
    if (v43 != 1)
    {
LABEL_14:
      swift_errorRelease(v29);
      goto LABEL_16;
    }
  }
LABEL_10:
  v44 = v38[3];
  v45 = v38[4];
  sub_66898(v38, v44);
  v46 = dispatch thunk of IntentModel.kind.getter(v44, v45);
  v48 = v47;
  if (qword_31E5E8 != -1)
    swift_once(&qword_31E5E8, sub_1269C0);
  v49 = type metadata accessor for Logger(0);
  sub_5240C(v49, (uint64_t)qword_325160);
  swift_errorRetain(v29);
  swift_errorRetain(v29);
  swift_bridgeObjectRetain(v48);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc(22, -1);
    v54 = (uint64_t *)swift_slowAlloc(8, -1);
    v55 = swift_slowAlloc(32, -1);
    v90 = v55;
    *(_DWORD *)v53 = 136315394;
    swift_bridgeObjectRetain(v48);
    v89 = sub_57CD8(v46, v48, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease_n(v48, 3);
    *(_WORD *)(v53 + 12) = 2112;
    v56 = _convertErrorToNSError(_:)(v29);
    v89 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v53 + 14, v53 + 22);
    *v54 = v56;
    swift_errorRelease(v29);
    swift_errorRelease(v29);
    _os_log_impl(&dword_0, v51, v52, "Error occurred when loading page intent %s: %@", (uint8_t *)v53, 0x16u);
    v57 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v54, 1, v57);
    swift_slowDealloc(v54, -1, -1);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v53, -1, -1);

    goto LABEL_14;
  }
  swift_errorRelease(v29);
  swift_bridgeObjectRelease_n(v48, 2);
  swift_errorRelease(v29);
  swift_errorRelease(v29);

LABEL_16:
  v58 = v82;
  v59 = IntentResult.error.getter(v82);
  swift_errorRelease(v59);
  if (v59)
  {
    v60 = v86;
    v61 = v88;
    v62 = v80;
    sub_5E1A4((uint64_t)v88 + v86[9], v80, &qword_3217C0);
    v63 = v85;
    v64 = v87;
    v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v62, 1, v87);
    v66 = (uint64_t)v84;
    v67 = v81;
    if (v65 == 1)
    {
      sub_5E1A4((uint64_t)v61 + v60[5], v81, &qword_3217C0);
      sub_5E09C(v62, &qword_3217C0);
    }
    else
    {
      sub_5E160(v62, v81, type metadata accessor for Page);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v67, 0, 1, v64);
    }
    sub_F7500(v67, (uint64_t)v61 + v60[6]);
  }
  else
  {
    v60 = v86;
    v61 = v88;
    v68 = (uint64_t)v88 + v86[6];
    sub_5E09C(v68, &qword_3217C0);
    v63 = v85;
    v64 = v87;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v68, 1, 1, v87);
    v66 = (uint64_t)v84;
  }
  v69 = v60[7];
  if (*((_BYTE *)v61 + v69) == 1)
  {
    *((_BYTE *)v61 + v69) = 0;
    v70 = (uint64_t)v61 + v60[5];
    sub_5E09C(v70, &qword_3217C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v70, 1, 1, v64);
  }
  IntentResult.data.getter(v58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v66, 1, v64) == 1)
  {
    sub_5E09C(v66, &qword_3217C0);
    v71 = (uint64_t)v61 + v60[9];
    sub_5E09C(v71, &qword_3217C0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v71, 1, 1, v64);
  }
  else
  {
    v73 = v79;
    sub_5E160(v66, v79, type metadata accessor for Page);
    v74 = (uint64_t)v61 + v60[9];
    sub_5E09C(v74, &qword_3217C0);
    sub_5E160(v73, v74, type metadata accessor for Page);
    v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
    v75(v74, 0, 1, v64);
    v76 = (uint64_t)v61 + v60[5];
    sub_5E09C(v76, &qword_3217C0);
    return v75(v76, 1, 1, v64);
  }
}

uint64_t sub_F6010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageContent.PageInfo(0) + 32);
  v4 = sub_5C154(&qword_322E30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_F605C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - v11;
  v13 = sub_5C154(&qword_322E30);
  v14 = IntentResult.error.getter(v13);
  swift_errorRelease(v14);
  if (v14)
  {
    v15 = v2 + *(int *)(v4 + 20);
    sub_5E1A4(v15, (uint64_t)v9, &qword_3217C0);
    v16 = type metadata accessor for Page(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v16) == 1)
    {
      sub_5E09C((uint64_t)v9, &qword_3217C0);
    }
    else
    {
      v21 = v9[*(int *)(v16 + 72)];
      sub_6685C((uint64_t)v9, type metadata accessor for Page);
      if (v21 == 1)
        return sub_5E1A4(v15, a1, &qword_3217C0);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a1, 1, 1, v16);
  }
  else
  {
    sub_5E1A4(v2 + *(int *)(v4 + 36), (uint64_t)v12, &qword_3217C0);
    sub_5E11C(v2, (uint64_t)v6, type metadata accessor for PageContent.PageInfo);
    v18 = type metadata accessor for Page(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) == 1)
    {
      sub_5E1A4((uint64_t)&v6[*(int *)(v4 + 20)], a1, &qword_3217C0);
      sub_6685C((uint64_t)v6, type metadata accessor for PageContent.PageInfo);
      return sub_5E09C((uint64_t)v12, &qword_3217C0);
    }
    else
    {
      sub_6685C((uint64_t)v6, type metadata accessor for PageContent.PageInfo);
      sub_5E160((uint64_t)v12, a1, type metadata accessor for Page);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
    }
  }
}

uint64_t sub_F62C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;

  v2 = v1;
  v4 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - v8;
  v10 = type metadata accessor for Page(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v56 = (uint64_t *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v53 - v14);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v53 - v17);
  sub_5E1A4(a1, (uint64_t)v9, &qword_3217C0);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v19(v9, 1, v10) == 1)
  {
    sub_5E09C(a1, &qword_3217C0);
    return sub_5E09C((uint64_t)v9, &qword_3217C0);
  }
  v55 = v15;
  sub_5E160((uint64_t)v9, (uint64_t)v18, type metadata accessor for Page);
  v21 = type metadata accessor for PageContent.PageInfo(0);
  v22 = v2 + *(int *)(v21 + 36);
  sub_5E1A4(v22, (uint64_t)v6, &qword_3217C0);
  v23 = v19(v6, 1, v10);
  sub_5E09C((uint64_t)v6, &qword_3217C0);
  if (v23 != 1)
  {
    sub_5E09C(a1, &qword_3217C0);
    sub_5E09C(v22, &qword_3217C0);
    sub_5E160((uint64_t)v18, v22, type metadata accessor for Page);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
  }
  v24 = sub_5C154(&qword_322E30);
  v25 = IntentResult.error.getter(v24);
  swift_errorRelease(v25);
  if (v25 && *((_BYTE *)v18 + *(int *)(v10 + 72)) == 1)
  {
    sub_5E09C(a1, &qword_3217C0);
    v26 = v2 + *(int *)(v21 + 20);
    sub_5E09C(v26, &qword_3217C0);
    sub_5E160((uint64_t)v18, v26, type metadata accessor for Page);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v10);
  }
  v27 = IntentResult.error.getter(v24);
  if (!v27)
  {
    if (qword_31E5E8 != -1)
      swift_once(&qword_31E5E8, sub_1269C0);
    v42 = type metadata accessor for Logger(0);
    sub_5240C(v42, (uint64_t)qword_325160);
    v43 = v56;
    v44 = sub_5E11C((uint64_t)v18, (uint64_t)v56, type metadata accessor for Page);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(12, -1);
      v55 = v18;
      v48 = (uint8_t *)v47;
      v49 = swift_slowAlloc(32, -1);
      v58 = v49;
      *(_DWORD *)v48 = 136315138;
      v50 = a1;
      v51 = *v43;
      v52 = v43[1];
      swift_bridgeObjectRetain(v52);
      v57 = sub_57CD8(v51, v52, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease(v52);
      sub_6685C((uint64_t)v43, type metadata accessor for Page);
      _os_log_impl(&dword_0, v45, v46, "Received updated page model for %s, but the page intent result hasn't been loaded yet.", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      sub_5E09C(v50, &qword_3217C0);
      v41 = (uint64_t)v55;
      return sub_6685C(v41, type metadata accessor for Page);
    }

    sub_6685C((uint64_t)v43, type metadata accessor for Page);
LABEL_19:
    sub_5E09C(a1, &qword_3217C0);
    v41 = (uint64_t)v18;
    return sub_6685C(v41, type metadata accessor for Page);
  }
  v28 = v27;
  if (qword_31E5E8 != -1)
    swift_once(&qword_31E5E8, sub_1269C0);
  v29 = type metadata accessor for Logger(0);
  sub_5240C(v29, (uint64_t)qword_325160);
  v30 = v55;
  sub_5E11C((uint64_t)v18, (uint64_t)v55, type metadata accessor for Page);
  swift_errorRetain(v28);
  v31 = swift_errorRetain(v28);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v32, v33))
  {

    swift_errorRelease(v28);
    swift_errorRelease(v28);
    sub_6685C((uint64_t)v30, type metadata accessor for Page);
    swift_errorRelease(v28);
    goto LABEL_19;
  }
  v34 = swift_slowAlloc(22, -1);
  v35 = (uint64_t *)swift_slowAlloc(8, -1);
  v54 = swift_slowAlloc(32, -1);
  v58 = v54;
  *(_DWORD *)v34 = 136315394;
  v56 = (uint64_t *)a1;
  v37 = *v30;
  v36 = v30[1];
  swift_bridgeObjectRetain(v36);
  v57 = sub_57CD8(v37, v36, &v58);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v34 + 4, v34 + 12);
  swift_bridgeObjectRelease(v36);
  sub_6685C((uint64_t)v30, type metadata accessor for Page);
  *(_WORD *)(v34 + 12) = 2112;
  v38 = _convertErrorToNSError(_:)(v28);
  v57 = v38;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v34 + 14, v34 + 22);
  *v35 = v38;
  swift_errorRelease(v28);
  swift_errorRelease(v28);
  _os_log_impl(&dword_0, v32, v33, "Received updated page model for %s, but the intent is in error state (%@) and the page is invalid as an error fallback.", (uint8_t *)v34, 0x16u);
  v39 = sub_5C154(&qword_32A000);
  swift_arrayDestroy(v35, 1, v39);
  swift_slowDealloc(v35, -1, -1);
  v40 = v54;
  swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v40, -1, -1);
  swift_slowDealloc(v34, -1, -1);

  swift_errorRelease(v28);
  sub_5E09C((uint64_t)v56, &qword_3217C0);
  v41 = (uint64_t)v18;
  return sub_6685C(v41, type metadata accessor for Page);
}

uint64_t sub_F6990@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[3];

  v2 = v1;
  v64 = sub_5C154(&qword_324330);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_322F98);
  __chkstk_darwin(v6);
  v65 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v8);
  v63 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v61 = (char *)&v59 - v11;
  v12 = type metadata accessor for PageMetrics(0);
  __chkstk_darwin(v12);
  v60 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PageData(0);
  __chkstk_darwin(v14);
  v59 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v59 - v20;
  v22 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v22);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v59 - v26;
  v28 = sub_5C154(&qword_322E30);
  v29 = IntentResult.error.getter(v28);
  swift_errorRelease(v29);
  if (v29)
  {
    v30 = a1;
    sub_F605C((uint64_t)v24);
    sub_5E11C(v2, (uint64_t)v21, type metadata accessor for PageContent.PageInfo);
    v31 = type metadata accessor for Page(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v24, 1, v31) == 1)
    {
      sub_5E1A4((uint64_t)&v21[*(int *)(v16 + 24)], (uint64_t)v27, &qword_3217C0);
      sub_6685C((uint64_t)v21, type metadata accessor for PageContent.PageInfo);
      sub_5E09C((uint64_t)v24, &qword_3217C0);
    }
    else
    {
      sub_6685C((uint64_t)v21, type metadata accessor for PageContent.PageInfo);
      sub_5E160((uint64_t)v24, (uint64_t)v27, type metadata accessor for Page);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v27, 0, 1, v31);
    }
    a1 = v30;
  }
  else
  {
    sub_F605C((uint64_t)v27);
  }
  v33 = type metadata accessor for Page(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v27, 1, v33) != 1)
    return sub_5E160((uint64_t)v27, (uint64_t)a1, type metadata accessor for Page);
  sub_5E09C((uint64_t)v27, &qword_3217C0);
  if (qword_31E5E8 != -1)
    swift_once(&qword_31E5E8, sub_1269C0);
  v34 = type metadata accessor for Logger(0);
  sub_5240C(v34, (uint64_t)qword_325160);
  v35 = sub_5E11C(v2, (uint64_t)v18, type metadata accessor for PageContent.PageInfo);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.fault.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v68[0] = v39;
    *(_DWORD *)v38 = 136315138;
    v40 = sub_F7018();
    v42 = v41;
    v66 = sub_57CD8(v40, v41, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease(v42);
    sub_6685C((uint64_t)v18, type metadata accessor for PageContent.PageInfo);
    _os_log_impl(&dword_0, v36, v37, "Trying to get a page from %s when the page isn't loaded. Probably a bug in RootView.", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    sub_6685C((uint64_t)v18, type metadata accessor for PageContent.PageInfo);
  }

  v44 = (uint64_t)v59;
  v46 = PageData.init(pageID:pageType:)(0, 0, 0, 0xE000000000000000, v45);
  v47 = (uint64_t)v60;
  static PageMetrics.notInstrumented.getter(v46);
  LOBYTE(v66) = 0;
  v48 = type metadata accessor for LocalizerRequest(0);
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
  v50 = (uint64_t)v61;
  v49(v61, 1, 1, v48);
  v51 = (uint64_t)v63;
  v49(v63, 1, 1, v48);
  v52 = type metadata accessor for ToolbarPrincipalType(0);
  v53 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v65, 1, 1, v52);
  v54 = sub_5C154(&qword_3200B8);
  Empty.init(completeImmediately:)(1, v54, &type metadata for Never, &protocol witness table for Never);
  v55 = sub_67060((unint64_t *)&qword_324338, &qword_324330, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
  v56 = v64;
  v57 = Publisher.eraseToAnyPublisher()(v64, v55);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v5, v56);
  swift_beginAccess(&byte_3207D8, v68, 0, 0);
  HIBYTE(v67) = byte_3207D8;
  v58 = sub_5BD18((uint64_t)_swiftEmptyArrayStorage);
  return sub_134734(v44, v47, (uint64_t)_swiftEmptyArrayStorage, (unsigned __int8 *)&v66, (uint64_t)_swiftEmptyArrayStorage, 0, 0, v50, a1, v51, (unsigned __int8 *)&v67 + 7, 0, v58, v53, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v57, 0);
}

unint64_t sub_F7018()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  void *object;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;

  v1 = v0;
  v2 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v2);
  v56 = (uint64_t)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Page(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v8);
  v59 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v55 - v11);
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v55 - v17;
  v58 = v2;
  v19 = sub_5C154(&qword_322E30);
  IntentResult.data.getter(v19);
  sub_5E1A4((uint64_t)v18, (uint64_t)v15, &qword_3217C0);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v60 = v4;
  v57 = v20;
  v21 = 0;
  v22 = 0;
  if (v20((uint64_t)v15, 1, v4) != 1)
  {
    sub_5E160((uint64_t)v15, (uint64_t)v7, type metadata accessor for Page);
    v61 = 0x203A646564616F6CLL;
    v62 = 0xE800000000000000;
    v23 = *v7;
    v24 = (void *)v7[1];
    swift_bridgeObjectRetain(v24);
    v25._countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v21 = v61;
    v22 = (void *)v62;
    sub_6685C((uint64_t)v7, type metadata accessor for Page);
  }
  sub_5E09C((uint64_t)v18, &qword_3217C0);
  v26 = v56;
  sub_5E11C((uint64_t)v1, v56, type metadata accessor for PageContent.PageInfo);
  if (v22)
  {
    v27 = v58;
  }
  else
  {
    v27 = v58;
    v28 = IntentResult.error.getter(v19);
    v22 = (void *)0xE700000000000000;
    if (v28)
    {
      v29 = v28;
      v61 = 0x203A726F727265;
      v62 = 0xE700000000000000;
      v30 = (void *)_convertErrorToNSError(_:)(v28);
      v31 = objc_msgSend(v30, "description");
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

      v35._countAndFlagsBits = v32;
      v35._object = v34;
      String.append(_:)(v35);

      swift_bridgeObjectRelease(v34);
      swift_errorRelease(v29);
      v21 = v61;
      v22 = (void *)v62;
    }
    else
    {
      v21 = 0x676E6964616F6CLL;
    }
  }
  sub_6685C(v26, type metadata accessor for PageContent.PageInfo);
  v61 = 0;
  v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(v62);
  v61 = 0xD000000000000015;
  v62 = 0x8000000000270B60;
  v36 = v1[3];
  v37 = v1[4];
  sub_66898(v1, v36);
  v38._countAndFlagsBits = dispatch thunk of IntentModel.kind.getter(v36, v37);
  object = v38._object;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(object);
  v40._countAndFlagsBits = 8236;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = v21;
  v41._object = v22;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v22);
  v42._countAndFlagsBits = 0x616974696E69202CLL;
  v42._object = (void *)0xEB00000000203A6CLL;
  String.append(_:)(v42);
  v43 = (uint64_t)v1 + *(int *)(v27 + 20);
  sub_5E1A4(v43, (uint64_t)v12, &qword_3217C0);
  v44 = v60;
  v45 = v57;
  if (v57((uint64_t)v12, 1, v60) == 1)
  {
    sub_5E09C((uint64_t)v12, &qword_3217C0);
    v46 = (void *)0xE300000000000000;
    v47 = 7104878;
  }
  else
  {
    v47 = *v12;
    v46 = (void *)v12[1];
    swift_bridgeObjectRetain(v46);
    sub_6685C((uint64_t)v12, type metadata accessor for Page);
  }
  v48._countAndFlagsBits = v47;
  v48._object = v46;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v46);
  v49 = v59;
  sub_5E1A4(v43, v59, &qword_3217C0);
  if (v45(v49, 1, v44) == 1)
  {
    sub_5E09C(v49, &qword_3217C0);
    v50 = 0;
    v51 = 0xE000000000000000;
  }
  else
  {
    v52 = *(unsigned __int8 *)(v49 + *(int *)(v44 + 72));
    sub_6685C(v49, type metadata accessor for Page);
    if (v52)
      v50 = 0xD000000000000010;
    else
      v50 = 0;
    if (v52)
      v51 = 0x8000000000270B80;
    else
      v51 = 0xE000000000000000;
  }
  v53 = v51;
  String.append(_:)(*(Swift::String *)&v50);
  swift_bridgeObjectRelease(v51);
  return v61;
}

uint64_t type metadata accessor for PageContent(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_324178, (uint64_t)&nominal type descriptor for PageContent);
}

uint64_t sub_F7500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3217C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PageContent.ContentType(uint64_t a1)
{
  return sub_64960(a1, (uint64_t *)&unk_324230, (uint64_t)&nominal type descriptor for PageContent.ContentType);
}

uint64_t sub_F755C@<X0>(uint64_t *a1@<X8>)
{
  return sub_F6990(a1);
}

uint64_t sub_F757C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Page(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E11C(a1, (uint64_t)v8, type metadata accessor for Page);
  sub_5E11C((uint64_t)v8, (uint64_t)v4, type metadata accessor for Page);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  sub_F62C4((uint64_t)v4);
  return sub_6685C((uint64_t)v8, type metadata accessor for Page);
}

uint64_t PageContent.contentTransitionAnimation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for Spring(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Spring.init(mass:stiffness:damping:allowOverDamping:)(0, 1.0, 300.0, 35.0);
  v4 = static Animation.spring(_:blendDuration:)(v3, 0.0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_F7728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  __int128 v12[2];

  v4 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_5C154(&qword_3217C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E0D8(a2, (uint64_t)v12);
  sub_5E1A4(a1, (uint64_t)v9, &qword_3217C8);
  State.wrappedValue.getter(v6, v7);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v6);
  sub_5DC98(v12, (uint64_t)v6);
  *((_BYTE *)v6 + *(int *)(v4 + 28)) = 1;
  State.wrappedValue.setter(v6, v7);
  return sub_5E09C((uint64_t)v9, &qword_3217C8);
}

void sub_F7840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, __n128);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v96 = a1;
  v91 = a2;
  v95 = type metadata accessor for Page(0);
  __chkstk_darwin(v95);
  v89 = (uint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v90 = (uint64_t)&v88 - v6;
  __chkstk_darwin(v7);
  v92 = (uint64_t)&v88 - v8;
  __chkstk_darwin(v9);
  v93 = (uint64_t)&v88 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v88 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v88 - v15;
  __chkstk_darwin(v17);
  v94 = (uint64_t)&v88 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v88 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v88 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v88 - v26;
  v28 = sub_5C154(&qword_31EF08);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v88 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v31);
  v34 = (uint64_t *)((char *)&v88 - v33);
  v35 = a3;
  v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16);
  v36((char *)&v88 - v33, v35, v28, v32);
  v37 = (*(uint64_t (**)(uint64_t *, uint64_t))(v29 + 88))(v34, v28);
  if (v37 == enum case for PageUpdateInstruction.replacePage<A, B>(_:))
    goto LABEL_2;
  if (v37 == enum case for PageUpdateInstruction.appendShelves<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
    v38 = *v34;
    v39 = *(_QWORD *)(*v34 + 16);
    v40 = v96;
    sub_5E11C(v96, (uint64_t)v27, type metadata accessor for Page);
    if (v39)
    {
      v41 = &v27[*(int *)(v95 + 52)];
      swift_bridgeObjectRetain(v38);
      sub_E00B4(v42);
      v43 = *(_QWORD *)v41;
      swift_bridgeObjectRetain(*(_QWORD *)v41);
      v45 = sub_DFE1C(v44);
      swift_bridgeObjectRelease_n(v43, 2);
      *(_QWORD *)v41 = v45;
    }
    sub_6685C(v40, type metadata accessor for Page);
    swift_bridgeObjectRelease(v38);
    v57 = (uint64_t)v27;
    v58 = v40;
    goto LABEL_39;
  }
  if (v37 == enum case for PageUpdateInstruction.replaceShelves<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
    v46 = *v34;
    v47 = v96;
    v48 = v97;
    Page.updatingShelves(from:)(v46, (uint64_t)v24);
    if (v48)
    {
LABEL_8:
      swift_bridgeObjectRelease(v46);
      return;
    }
    sub_6685C(v47, type metadata accessor for Page);
    swift_bridgeObjectRelease(v46);
    v57 = (uint64_t)v24;
    v58 = v47;
LABEL_39:
    sub_5E160(v57, v58, type metadata accessor for Page);
    return;
  }
  if (v37 == enum case for PageUpdateInstruction.removeShelves<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
    v49 = *v34;
    v50 = sub_2332E4(*v34);
    swift_bridgeObjectRelease(v49);
    v51 = *(_QWORD *)(v50 + 16);
    v52 = v96;
    sub_5E11C(v96, (uint64_t)v21, type metadata accessor for Page);
    if (!v51)
    {
LABEL_28:
      swift_bridgeObjectRelease(v50);
      sub_6685C(v52, type metadata accessor for Page);
      v57 = (uint64_t)v21;
      v58 = v52;
      goto LABEL_39;
    }
    v53 = (unint64_t *)&v21[*(int *)(v95 + 52)];
    swift_bridgeObjectRetain(v50);
    sub_13D870(v53, v50);
    v55 = v54;
    swift_bridgeObjectRelease(v50);
    v56 = *(_QWORD *)(*v53 + 16);
    if (v56 >= v55)
    {
      sub_13DD30(v55, v56);
      goto LABEL_28;
    }
    __break(1u);
    goto LABEL_65;
  }
  if (v37 == enum case for PageUpdateInstruction.removeShelvesAfter<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
    v59 = v34[1];
    v60 = v96;
    v61 = *(_QWORD *)(v96 + *(int *)(v95 + 52));
    v62 = *(_QWORD *)(v61 + 16);
    if (!v62)
      goto LABEL_35;
    v63 = *v34;
    v64 = 0;
    v65 = *(_QWORD *)(type metadata accessor for Shelf(0) - 8);
    v66 = *(_QWORD *)(v65 + 72);
    v67 = (uint64_t *)(((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))
                    + v61
                    + 8);
    while (1)
    {
      v68 = *(v67 - 1);
      v69 = *v67;
      v70 = v68 == v63 && v69 == v59;
      if (v70 || (_stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, v63, v59, 0) & 1) != 0)
        break;
      v67 = (uint64_t *)((char *)v67 + v66);
      if (v62 == ++v64)
        goto LABEL_35;
    }
    v75 = v62 - v64;
    if (v62 > v64)
    {
      v76 = v94;
      sub_5E11C(v60, v94, type metadata accessor for Page);
      if (__OFSUB__(v75, 1))
      {
LABEL_65:
        __break(1u);
        return;
      }
      sub_13A7DC(v75 - 1);
    }
    else
    {
LABEL_35:
      v76 = v94;
      sub_5E11C(v60, v94, type metadata accessor for Page);
    }
    swift_bridgeObjectRelease(v59);
    sub_6685C(v60, type metadata accessor for Page);
    goto LABEL_37;
  }
  if (v37 == enum case for PageUpdateInstruction.appendItems<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
    v46 = *v34;
    v71 = v96;
    v72 = v97;
    Page.appendingItems(from:)(v46, (uint64_t)v16);
    if (v72)
      goto LABEL_8;
    sub_6685C(v71, type metadata accessor for Page);
    swift_bridgeObjectRelease(v46);
    v57 = (uint64_t)v16;
    v58 = v71;
    goto LABEL_39;
  }
  if (v37 != enum case for PageUpdateInstruction.removeItems<A, B>(_:))
  {
    v60 = v96;
    if (v37 == enum case for PageUpdateInstruction.replaceItems<A, B>(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
      v46 = *v34;
      v76 = v93;
      v77 = v97;
      Page.updatingItems(from:)(v46, v93);
    }
    else
    {
      v78 = v97;
      if (v37 == enum case for PageUpdateInstruction.replaceTrailingToolbarItems<A, B>(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
        v79 = *v34;
        v80 = v92;
        sub_5E11C(v60, v92, type metadata accessor for Page);
        v81 = *(int *)(v95 + 44);
        swift_bridgeObjectRelease(*(_QWORD *)(v80 + v81));
        *(_QWORD *)(v80 + v81) = v79;
        sub_6685C(v60, type metadata accessor for Page);
        v57 = v80;
        goto LABEL_38;
      }
      if (v37 == enum case for PageUpdateInstruction.replaceShelfHeaders<A, B>(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
        v46 = *v34;
        v76 = v90;
        v77 = v78;
        Page.updatingShelfHeader(from:)(v46, v90);
      }
      else
      {
        if (v37 != enum case for PageUpdateInstruction.replaceShelfFooters<A, B>(_:))
        {
          if (v37 == enum case for PageUpdateInstruction.presentAlert<A, B>(_:))
          {
            (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
            v82 = v91;
            sub_5E09C(v91, &qword_322FA0);
            v83 = type metadata accessor for BooksAlertAction(0);
            v84 = *(_QWORD *)(v83 - 8);
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(v84 + 32))(v82, v34, v83);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v82, 0, 1, v83);
          }
          else
          {
            if (v37 == enum case for PageUpdateInstruction.compound<A, B>(_:))
            {
              (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
              v46 = *v34;
              v85 = *(_QWORD *)(v46 + 16);
              if (v85)
              {
                v86 = v46
                    + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
                v95 = *(_QWORD *)(v29 + 72);
                v87 = v88;
                while (1)
                {
                  ((void (*)(char *, unint64_t, uint64_t))v36)(v87, v86, v28);
                  sub_F7840(v60, v91, v87);
                  if (v78)
                    break;
                  (*(void (**)(char *, uint64_t))(v29 + 8))(v87, v28);
                  v86 += v95;
                  if (!--v85)
                    goto LABEL_8;
                }
                (*(void (**)(char *, uint64_t))(v29 + 8))(v87, v28);
              }
              goto LABEL_8;
            }
            if (v37 == enum case for PageUpdateInstruction.startPendingData<A, B>(_:))
            {
              *(_BYTE *)(v96 + *(int *)(v95 + 84)) = 1;
            }
            else
            {
              if (v37 != enum case for PageUpdateInstruction.stopPendingData<A, B>(_:))
              {
LABEL_2:
                (*(void (**)(uint64_t *, uint64_t))(v29 + 8))(v34, v28);
                return;
              }
              *(_BYTE *)(v96 + *(int *)(v95 + 84)) = 0;
            }
          }
          return;
        }
        (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
        v46 = *v34;
        v76 = v89;
        v77 = v78;
        Page.updatingShelfFooter(from:)(v46, v89);
      }
    }
    if (v77)
      goto LABEL_8;
    sub_6685C(v60, type metadata accessor for Page);
    swift_bridgeObjectRelease(v46);
LABEL_37:
    v57 = v76;
LABEL_38:
    v58 = v60;
    goto LABEL_39;
  }
  (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v34, v28);
  v46 = *v34;
  v73 = v96;
  v74 = v97;
  Page.removingItems(from:)(v46, (uint64_t)v13);
  if (v74)
    goto LABEL_8;
  sub_6685C(v73, type metadata accessor for Page);
  swift_bridgeObjectRelease(v46);
  sub_5E160((uint64_t)v13, v73, type metadata accessor for Page);
}

uint64_t sub_F8180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[24];
  _BYTE v24[24];

  v5 = type metadata accessor for PageAlert(0);
  __chkstk_darwin(v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v10 = &v23[-v9];
  v11 = type metadata accessor for PageContent.PageInfo(0);
  __chkstk_darwin(v11);
  v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_5C154(&qword_3217C0);
  __chkstk_darwin(v14);
  v16 = &v23[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for Page(0);
  v18 = swift_projectBox(a2);
  v19 = swift_projectBox(a3);
  swift_beginAccess(v18, v24, 0, 0);
  sub_5E11C(v18, (uint64_t)v16, type metadata accessor for Page);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
  v20 = sub_5C154(&qword_3217C8);
  State.wrappedValue.getter(v13, v20);
  sub_F62C4((uint64_t)v16);
  State.wrappedValue.setter(v13, v20);
  swift_beginAccess(v19, v23, 0, 0);
  sub_5E11C(v19, (uint64_t)v10, type metadata accessor for PageAlert);
  type metadata accessor for PageContent(0);
  sub_5E11C((uint64_t)v10, (uint64_t)v7, type metadata accessor for PageAlert);
  v21 = sub_5C154(&qword_322F80);
  State.wrappedValue.setter(v7, v21);
  return sub_6685C((uint64_t)v10, type metadata accessor for PageAlert);
}

uint64_t sub_F839C(uint64_t a1, int a2)
{
  return PageContent.update(with:animated:)(a1, a2);
}

uint64_t sub_F83B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

uint64_t sub_F83C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for PageContent.PageInfo(0) + 32);
  v4 = sub_5C154(&qword_322E30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_F8418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for PageContent.PageInfo(0) + 32);
  v4 = sub_5C154(&qword_322E30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_F8468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_5C154(&qword_322E30);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = type metadata accessor for PageContent.PageInfo(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 32), v8, v4);
  sub_F56F4();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_F8524(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v22;

  v22 = a5;
  v9 = type metadata accessor for AnyIntentModel(0, a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v15 = sub_66898(a1, v14);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v19 + 16))(v18, v16);
  AnyIntentModel.init<A>(_:)(v18, a4, v14, v13);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyIntentModel<A>, v9);
  View.dispatch<A>(_:into:)(v12, a2, a3, v9, v22, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_F8664()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_F8684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  unsigned int (*v9)(uint64_t, uint64_t, int *);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = v0;
  v2 = type metadata accessor for PageContent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v66 = v2;
  v67 = *(_QWORD *)(v3 + 64);
  v68 = (v4 + 16) & ~v4;
  v5 = v0 + v68;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v68));
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v0 + v68 + v6[5];
  v8 = (int *)type metadata accessor for Page(0);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48);
  if (!v9(v7, 1, v8))
  {
    v64 = v0;
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
    v11 = v7 + v8[5];
    v12 = type metadata accessor for LocalizerRequest(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (!v14(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    v15 = v7 + v8[6];
    if (!v14(v15, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v12);
    v16 = v7 + v8[9];
    v17 = type metadata accessor for ToolbarPrincipalType(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[14] + 8));
    v19 = v7 + v8[15];
    v20 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[16]));
    v21 = v7 + v8[17];
    v22 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[19]));
    swift_release(*(_QWORD *)(v7 + v8[20]));
    v10 = swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[22] + 8));
    v23 = v7 + v8[23];
    v24 = *(_QWORD *)(v23 + 8);
    v1 = v64;
    if (v24)
    {
      swift_bridgeObjectRelease(v24);
      v10 = swift_bridgeObjectRelease(*(_QWORD *)(v23 + 32));
    }
  }
  v25 = v5 + v6[6];
  if (!((unsigned int (*)(uint64_t, uint64_t, int *, __n128))v9)(v25, 1, v8, v10))
  {
    v65 = v1;
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + 8));
    v26 = v25 + v8[5];
    v27 = type metadata accessor for LocalizerRequest(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (!v29(v26, 1, v27))
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    v30 = v25 + v8[6];
    if (!v29(v30, 1, v27))
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
    v31 = v25 + v8[9];
    v32 = type metadata accessor for ToolbarPrincipalType(0);
    v33 = *(_QWORD *)(v32 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[14] + 8));
    v34 = v25 + v8[15];
    v35 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[16]));
    v36 = v25 + v8[17];
    v37 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[19]));
    swift_release(*(_QWORD *)(v25 + v8[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v8[22] + 8));
    v38 = v25 + v8[23];
    v39 = *(_QWORD *)(v38 + 8);
    v1 = v65;
    if (v39)
    {
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(*(_QWORD *)(v38 + 32));
    }
  }
  v40 = v5 + v6[8];
  v41 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
  v42 = v5 + v6[9];
  if (!v9(v42, 1, v8))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + 8));
    v43 = v42 + v8[5];
    v44 = type metadata accessor for LocalizerRequest(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (!v46(v43, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    v47 = v42 + v8[6];
    if (!v46(v47, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v44);
    v48 = v42 + v8[9];
    v49 = type metadata accessor for ToolbarPrincipalType(0);
    v50 = *(_QWORD *)(v49 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[14] + 8));
    v51 = v42 + v8[15];
    v52 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[16]));
    v53 = v42 + v8[17];
    v54 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[19]));
    swift_release(*(_QWORD *)(v42 + v8[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v8[22] + 8));
    v55 = v42 + v8[23];
    v56 = *(_QWORD *)(v55 + 8);
    if (v56)
    {
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(*(_QWORD *)(v55 + 32));
    }
  }
  v57 = sub_5C154(&qword_3217C8);
  swift_release(*(_QWORD *)(v5 + *(int *)(v57 + 28)));
  v58 = v5 + *(int *)(v66 + 20);
  v59 = type metadata accessor for BooksAlertAction(0);
  v60 = *(_QWORD *)(v59 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
  v61 = (v67 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = sub_5C154(&qword_322F80);
  swift_release(*(_QWORD *)(v58 + *(int *)(v62 + 28)));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v1 + v61));
  return swift_deallocObject(v1, v61 + 40, v4 | 7);
}

uint64_t sub_F8CC4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for PageContent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_F7728(v0 + v2, v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_F8D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  unsigned int (*v8)(uint64_t, uint64_t, int *);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = type metadata accessor for PageContent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v68 = v1;
  v69 = *(_QWORD *)(v2 + 64);
  v70 = (v3 + 16) & ~v3;
  v4 = v0 + v70;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v70));
  v5 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v6 = v0 + v70 + v5[5];
  v7 = (int *)type metadata accessor for Page(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48);
  if (!v8(v6, 1, v7))
  {
    v66 = v0;
    v10 = v3;
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
    v11 = v6 + v7[5];
    v12 = type metadata accessor for LocalizerRequest(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (!v14(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    v15 = v6 + v7[6];
    if (!v14(v15, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v12);
    v16 = v6 + v7[9];
    v17 = type metadata accessor for ToolbarPrincipalType(0);
    v18 = *(_QWORD *)(v17 - 8);
    v3 = v10;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[14] + 8));
    v19 = v6 + v7[15];
    v20 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[16]));
    v21 = v6 + v7[17];
    v22 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[19]));
    swift_release(*(_QWORD *)(v6 + v7[20]));
    v9 = swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[22] + 8));
    v23 = v6 + v7[23];
    v24 = *(_QWORD *)(v23 + 8);
    v0 = v66;
    if (v24)
    {
      swift_bridgeObjectRelease(v24);
      v9 = swift_bridgeObjectRelease(*(_QWORD *)(v23 + 32));
    }
  }
  v25 = v4 + v5[6];
  if (!((unsigned int (*)(uint64_t, uint64_t, int *, __n128))v8)(v25, 1, v7, v9))
  {
    v67 = v0;
    v26 = v3;
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + 8));
    v27 = v25 + v7[5];
    v28 = type metadata accessor for LocalizerRequest(0);
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
    if (!v30(v27, 1, v28))
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    v31 = v25 + v7[6];
    if (!v30(v31, 1, v28))
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v28);
    v32 = v25 + v7[9];
    v33 = type metadata accessor for ToolbarPrincipalType(0);
    v34 = *(_QWORD *)(v33 - 8);
    v3 = v26;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v7[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v7[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v7[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v7[14] + 8));
    v35 = v25 + v7[15];
    v36 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v7[16]));
    v37 = v25 + v7[17];
    v38 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v7[19]));
    swift_release(*(_QWORD *)(v25 + v7[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v7[22] + 8));
    v39 = v25 + v7[23];
    v40 = *(_QWORD *)(v39 + 8);
    v0 = v67;
    if (v40)
    {
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(*(_QWORD *)(v39 + 32));
    }
  }
  v41 = v4 + v5[8];
  v42 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
  v43 = v4 + v5[9];
  if (!v8(v43, 1, v7))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + 8));
    v44 = v43 + v7[5];
    v45 = type metadata accessor for LocalizerRequest(0);
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
    if (!v47(v44, 1, v45))
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
    v48 = v43 + v7[6];
    if (!v47(v48, 1, v45))
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v45);
    v49 = v43 + v7[9];
    v50 = type metadata accessor for ToolbarPrincipalType(0);
    v51 = *(_QWORD *)(v50 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v7[10]));
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v7[11]));
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v7[13]));
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v7[14] + 8));
    v52 = v43 + v7[15];
    v53 = type metadata accessor for PageData(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v7[16]));
    v54 = v43 + v7[17];
    v55 = type metadata accessor for PageMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v7[19]));
    swift_release(*(_QWORD *)(v43 + v7[20]));
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v7[22] + 8));
    v56 = v43 + v7[23];
    v57 = *(_QWORD *)(v56 + 8);
    if (v57)
    {
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(*(_QWORD *)(v56 + 32));
    }
  }
  v58 = sub_5C154(&qword_3217C8);
  swift_release(*(_QWORD *)(v4 + *(int *)(v58 + 28)));
  v59 = v4 + *(int *)(v68 + 20);
  v60 = type metadata accessor for BooksAlertAction(0);
  v61 = *(_QWORD *)(v60 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v60);
  v62 = (v69 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
  v64 = sub_5C154(&qword_322F80);
  swift_release(*(_QWORD *)(v59 + *(int *)(v64 + 28)));
  swift_release(*(_QWORD *)(v0 + v62));
  swift_release(*(_QWORD *)(v0 + v63));
  return swift_deallocObject(v0, v63 + 8, v3 | 7);
}

uint64_t sub_F9364()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for PageContent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_F8180(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t dispatch thunk of PageUpdateInstructionHandling.update(with:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

_QWORD *initializeBufferWithCopyOfBuffer for PageContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  __int128 v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  unsigned int (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t, __n128);
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t, __n128);
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int (*v147)(char *, uint64_t, uint64_t, __n128);
  __n128 v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t, __n128);
  __n128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t, __n128);
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  char *v209;
  char *v210;
  unsigned int (*v211)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v212)(_QWORD, _QWORD, _QWORD);
  int *v213;
  int *v214;
  char *v215;
  uint64_t v217;
  uint64_t *v218;
  _QWORD *v219;

  v3 = a2;
  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    v7 = (int *)type metadata accessor for PageContent.PageInfo(0);
    v8 = v7[5];
    v9 = (_QWORD *)((char *)v4 + v8);
    v10 = (uint64_t *)((char *)v3 + v8);
    v11 = (int *)type metadata accessor for Page(0);
    v217 = *((_QWORD *)v11 - 1);
    v12 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v217 + 48);
    v218 = v3;
    v219 = v4;
    if (v12(v10, 1, v11))
    {
      v13 = sub_5C154(&qword_3217C0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v211 = v12;
      v213 = v7;
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = v11[5];
      v17 = (char *)v9 + v16;
      v18 = (char *)v10 + v16;
      v19 = type metadata accessor for LocalizerRequest(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
      v22 = swift_bridgeObjectRetain(v15);
      if (v21(v18, 1, v19, v22))
      {
        v23 = sub_5C154(&qword_3217B8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v24 = v11[6];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v21)((char *)v10 + v24, 1, v19))
      {
        v27 = sub_5C154(&qword_3217B8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v26, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, 0, 1, v19);
      }
      *((_BYTE *)v9 + v11[7]) = *((_BYTE *)v10 + v11[7]);
      *((_BYTE *)v9 + v11[8]) = *((_BYTE *)v10 + v11[8]);
      v28 = v11[9];
      v29 = (char *)v9 + v28;
      v30 = (char *)v10 + v28;
      v31 = type metadata accessor for ToolbarPrincipalType(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = sub_5C154(&qword_322F98);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v34 = v11[10];
      v35 = *(_QWORD *)((char *)v10 + v34);
      *(_QWORD *)((char *)v9 + v34) = v35;
      v36 = v11[11];
      v37 = *(_QWORD *)((char *)v10 + v36);
      *(_QWORD *)((char *)v9 + v36) = v37;
      *((_BYTE *)v9 + v11[12]) = *((_BYTE *)v10 + v11[12]);
      v38 = v11[13];
      v39 = *(_QWORD *)((char *)v10 + v38);
      *(_QWORD *)((char *)v9 + v38) = v39;
      v40 = v11[14];
      v41 = (_QWORD *)((char *)v9 + v40);
      v42 = (_QWORD *)((char *)v10 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = v11[15];
      v45 = (char *)v9 + v44;
      v209 = (char *)v10 + v44;
      v46 = type metadata accessor for PageData(0);
      v47 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v39);
      v48 = swift_bridgeObjectRetain(v43);
      v47(v45, v209, v46, v48);
      v49 = v11[16];
      v50 = *(_QWORD *)((char *)v10 + v49);
      *(_QWORD *)((char *)v9 + v49) = v50;
      v51 = v11[17];
      v52 = (char *)v9 + v51;
      v53 = (char *)v10 + v51;
      v54 = type metadata accessor for PageMetrics(0);
      v55 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v54 - 8) + 16);
      v56 = swift_bridgeObjectRetain(v50);
      v55(v52, v53, v54, v56);
      *((_BYTE *)v9 + v11[18]) = *((_BYTE *)v10 + v11[18]);
      v57 = v11[19];
      v58 = *(_QWORD *)((char *)v10 + v57);
      *(_QWORD *)((char *)v9 + v57) = v58;
      v59 = v11[20];
      v60 = *(_QWORD *)((char *)v10 + v59);
      *(_QWORD *)((char *)v9 + v59) = v60;
      *((_BYTE *)v9 + v11[21]) = *((_BYTE *)v10 + v11[21]);
      v61 = v11[22];
      v62 = (_QWORD *)((char *)v9 + v61);
      v63 = (_QWORD *)((char *)v10 + v61);
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      v65 = v11[23];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      v68 = *(_QWORD *)((char *)v10 + v65 + 8);
      swift_bridgeObjectRetain(v58);
      swift_retain(v60);
      swift_bridgeObjectRetain(v64);
      if (v68)
      {
        *(_QWORD *)v66 = *(_QWORD *)v67;
        *((_QWORD *)v66 + 1) = v68;
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        v69 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 4) = v69;
        swift_bridgeObjectRetain(v68);
        v70 = swift_bridgeObjectRetain(v69);
      }
      else
      {
        v70 = *(__n128 *)v67;
        v71 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v71;
        *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
      }
      v3 = v218;
      v4 = v219;
      v12 = v211;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v217 + 56))(v9, 0, 1, v11, v70);
      v7 = v213;
    }
    v72 = v7[6];
    v73 = (_QWORD *)((char *)v4 + v72);
    v74 = (uint64_t *)((char *)v3 + v72);
    if (v12((char *)v3 + v72, 1, v11))
    {
      v75 = sub_5C154(&qword_3217C0);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v212 = v12;
      v214 = v7;
      v76 = v74[1];
      *v73 = *v74;
      v73[1] = v76;
      v77 = v11[5];
      v78 = (char *)v73 + v77;
      v79 = (char *)v74 + v77;
      v80 = type metadata accessor for LocalizerRequest(0);
      v81 = *(_QWORD *)(v80 - 8);
      v82 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v81 + 48);
      v83 = swift_bridgeObjectRetain(v76);
      if (v82(v79, 1, v80, v83))
      {
        v84 = sub_5C154(&qword_3217B8);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v79, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      }
      v85 = v11[6];
      v86 = (char *)v73 + v85;
      v87 = (char *)v74 + v85;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v82)((char *)v74 + v85, 1, v80))
      {
        v88 = sub_5C154(&qword_3217B8);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v86, v87, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v86, 0, 1, v80);
      }
      *((_BYTE *)v73 + v11[7]) = *((_BYTE *)v74 + v11[7]);
      *((_BYTE *)v73 + v11[8]) = *((_BYTE *)v74 + v11[8]);
      v89 = v11[9];
      v90 = (char *)v73 + v89;
      v91 = (char *)v74 + v89;
      v92 = type metadata accessor for ToolbarPrincipalType(0);
      v93 = *(_QWORD *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        v94 = sub_5C154(&qword_322F98);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v90, v91, v92);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
      }
      v95 = v11[10];
      v96 = *(_QWORD *)((char *)v74 + v95);
      *(_QWORD *)((char *)v73 + v95) = v96;
      v97 = v11[11];
      v98 = *(_QWORD *)((char *)v74 + v97);
      *(_QWORD *)((char *)v73 + v97) = v98;
      *((_BYTE *)v73 + v11[12]) = *((_BYTE *)v74 + v11[12]);
      v99 = v11[13];
      v100 = *(_QWORD *)((char *)v74 + v99);
      *(_QWORD *)((char *)v73 + v99) = v100;
      v101 = v11[14];
      v102 = (_QWORD *)((char *)v73 + v101);
      v103 = (_QWORD *)((char *)v74 + v101);
      v104 = v103[1];
      *v102 = *v103;
      v102[1] = v104;
      v105 = v11[15];
      v210 = (char *)v73 + v105;
      v106 = (char *)v74 + v105;
      v107 = type metadata accessor for PageData(0);
      v108 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v107 - 8) + 16);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v100);
      v109 = swift_bridgeObjectRetain(v104);
      v108(v210, v106, v107, v109);
      v110 = v11[16];
      v111 = *(_QWORD *)((char *)v74 + v110);
      *(_QWORD *)((char *)v73 + v110) = v111;
      v112 = v11[17];
      v113 = (char *)v73 + v112;
      v114 = (char *)v74 + v112;
      v115 = type metadata accessor for PageMetrics(0);
      v116 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v115 - 8) + 16);
      v117 = swift_bridgeObjectRetain(v111);
      v116(v113, v114, v115, v117);
      *((_BYTE *)v73 + v11[18]) = *((_BYTE *)v74 + v11[18]);
      v118 = v11[19];
      v119 = *(_QWORD *)((char *)v74 + v118);
      *(_QWORD *)((char *)v73 + v118) = v119;
      v120 = v11[20];
      v121 = *(_QWORD *)((char *)v74 + v120);
      *(_QWORD *)((char *)v73 + v120) = v121;
      *((_BYTE *)v73 + v11[21]) = *((_BYTE *)v74 + v11[21]);
      v122 = v11[22];
      v123 = (_QWORD *)((char *)v73 + v122);
      v124 = (_QWORD *)((char *)v74 + v122);
      v125 = v124[1];
      *v123 = *v124;
      v123[1] = v125;
      v126 = v11[23];
      v127 = (char *)v73 + v126;
      v128 = (char *)v74 + v126;
      v129 = *(_QWORD *)((char *)v74 + v126 + 8);
      swift_bridgeObjectRetain(v119);
      swift_retain(v121);
      swift_bridgeObjectRetain(v125);
      if (v129)
      {
        *(_QWORD *)v127 = *(_QWORD *)v128;
        *((_QWORD *)v127 + 1) = v129;
        *((_OWORD *)v127 + 1) = *((_OWORD *)v128 + 1);
        v130 = *((_QWORD *)v128 + 4);
        *((_QWORD *)v127 + 4) = v130;
        swift_bridgeObjectRetain(v129);
        v131 = swift_bridgeObjectRetain(v130);
      }
      else
      {
        v131 = *(__n128 *)v128;
        v132 = *((_OWORD *)v128 + 1);
        *(_OWORD *)v127 = *(_OWORD *)v128;
        *((_OWORD *)v127 + 1) = v132;
        *((_QWORD *)v127 + 4) = *((_QWORD *)v128 + 4);
      }
      v3 = v218;
      v4 = v219;
      v12 = v212;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v217 + 56))(v73, 0, 1, v11, v131);
      v7 = v214;
    }
    *((_BYTE *)v4 + v7[7]) = *((_BYTE *)v3 + v7[7]);
    v133 = v7[8];
    v134 = (char *)v4 + v133;
    v135 = (uint64_t)v3 + v133;
    v136 = sub_5C154(&qword_322E30);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 16))(v134, v135, v136);
    v137 = v7[9];
    v138 = (_QWORD *)((char *)v4 + v137);
    v139 = (uint64_t *)((char *)v3 + v137);
    if (v12((char *)v3 + v137, 1, v11))
    {
      v140 = sub_5C154(&qword_3217C0);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v141 = v139[1];
      *v138 = *v139;
      v138[1] = v141;
      v142 = v11[5];
      v143 = (char *)v138 + v142;
      v144 = (char *)v139 + v142;
      v145 = type metadata accessor for LocalizerRequest(0);
      v146 = *(_QWORD *)(v145 - 8);
      v147 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v146 + 48);
      v148 = swift_bridgeObjectRetain(v141);
      if (v147(v144, 1, v145, v148))
      {
        v149 = sub_5C154(&qword_3217B8);
        memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v143, v144, v145);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
      }
      v150 = v11[6];
      v151 = (char *)v138 + v150;
      v152 = (char *)v139 + v150;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v147)((char *)v139 + v150, 1, v145))
      {
        v153 = sub_5C154(&qword_3217B8);
        memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v151, v152, v145);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v151, 0, 1, v145);
      }
      *((_BYTE *)v138 + v11[7]) = *((_BYTE *)v139 + v11[7]);
      *((_BYTE *)v138 + v11[8]) = *((_BYTE *)v139 + v11[8]);
      v154 = v11[9];
      v155 = (char *)v138 + v154;
      v156 = (char *)v139 + v154;
      v157 = type metadata accessor for ToolbarPrincipalType(0);
      v158 = *(_QWORD *)(v157 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
      {
        v159 = sub_5C154(&qword_322F98);
        memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v155, v156, v157);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
      }
      v160 = v11[10];
      v161 = *(_QWORD *)((char *)v139 + v160);
      *(_QWORD *)((char *)v138 + v160) = v161;
      v162 = v11[11];
      v163 = *(_QWORD *)((char *)v139 + v162);
      *(_QWORD *)((char *)v138 + v162) = v163;
      *((_BYTE *)v138 + v11[12]) = *((_BYTE *)v139 + v11[12]);
      v164 = v11[13];
      v165 = *(_QWORD *)((char *)v139 + v164);
      *(_QWORD *)((char *)v138 + v164) = v165;
      v166 = v11[14];
      v167 = (_QWORD *)((char *)v138 + v166);
      v168 = (_QWORD *)((char *)v139 + v166);
      v169 = v168[1];
      *v167 = *v168;
      v167[1] = v169;
      v170 = v11[15];
      v215 = (char *)v138 + v170;
      v171 = (char *)v139 + v170;
      v172 = type metadata accessor for PageData(0);
      v173 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v172 - 8) + 16);
      swift_bridgeObjectRetain(v161);
      swift_bridgeObjectRetain(v163);
      swift_bridgeObjectRetain(v165);
      v174 = swift_bridgeObjectRetain(v169);
      v173(v215, v171, v172, v174);
      v175 = v11[16];
      v176 = *(_QWORD *)((char *)v139 + v175);
      *(_QWORD *)((char *)v138 + v175) = v176;
      v177 = v11[17];
      v178 = (char *)v138 + v177;
      v179 = (char *)v139 + v177;
      v180 = type metadata accessor for PageMetrics(0);
      v181 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v180 - 8) + 16);
      v182 = swift_bridgeObjectRetain(v176);
      v181(v178, v179, v180, v182);
      *((_BYTE *)v138 + v11[18]) = *((_BYTE *)v139 + v11[18]);
      v183 = v11[19];
      v184 = *(_QWORD *)((char *)v139 + v183);
      *(_QWORD *)((char *)v138 + v183) = v184;
      v185 = v11[20];
      v186 = *(_QWORD *)((char *)v139 + v185);
      *(_QWORD *)((char *)v138 + v185) = v186;
      *((_BYTE *)v138 + v11[21]) = *((_BYTE *)v139 + v11[21]);
      v187 = v11[22];
      v188 = (_QWORD *)((char *)v138 + v187);
      v189 = (_QWORD *)((char *)v139 + v187);
      v190 = v189[1];
      *v188 = *v189;
      v188[1] = v190;
      v191 = v11[23];
      v192 = (char *)v138 + v191;
      v193 = (char *)v139 + v191;
      v194 = *(_QWORD *)((char *)v139 + v191 + 8);
      swift_bridgeObjectRetain(v184);
      swift_retain(v186);
      swift_bridgeObjectRetain(v190);
      if (v194)
      {
        *(_QWORD *)v192 = *(_QWORD *)v193;
        *((_QWORD *)v192 + 1) = v194;
        *((_OWORD *)v192 + 1) = *((_OWORD *)v193 + 1);
        v195 = *((_QWORD *)v193 + 4);
        *((_QWORD *)v192 + 4) = v195;
        swift_bridgeObjectRetain(v194);
        v196 = swift_bridgeObjectRetain(v195);
      }
      else
      {
        v196 = *(__n128 *)v193;
        v197 = *((_OWORD *)v193 + 1);
        *(_OWORD *)v192 = *(_OWORD *)v193;
        *((_OWORD *)v192 + 1) = v197;
        *((_QWORD *)v192 + 4) = *((_QWORD *)v193 + 4);
      }
      v3 = v218;
      v4 = v219;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v217 + 56))(v138, 0, 1, v11, v196);
    }
    v198 = *(int *)(sub_5C154(&qword_3217C8) + 28);
    v199 = *(uint64_t *)((char *)v3 + v198);
    *(_QWORD *)((char *)v4 + v198) = v199;
    v200 = *(int *)(a3 + 20);
    v201 = (char *)v4 + v200;
    v202 = (char *)v3 + v200;
    v203 = type metadata accessor for BooksAlertAction(0);
    v204 = *(_QWORD *)(v203 - 8);
    v205 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48);
    swift_retain(v199);
    if (v205(v202, 1, v203))
    {
      v206 = sub_5C154(&qword_322FA0);
      memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v201, v202, v203);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v201, 0, 1, v203);
    }
    v207 = *(int *)(sub_5C154(&qword_322F80) + 28);
    v14 = *(_QWORD *)&v202[v207];
    *(_QWORD *)&v201[v207] = v14;
  }
  swift_retain(v14);
  return v4;
}

uint64_t destroy for PageContent(_QWORD *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  int *v6;
  unsigned int (*v7)(char *, uint64_t, int *);
  __n128 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v5 = (char *)a1 + v4[5];
  v6 = (int *)type metadata accessor for Page(0);
  v7 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48);
  if (!v7(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v5 + 1));
    v9 = &v5[v6[5]];
    v10 = type metadata accessor for LocalizerRequest(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v13 = &v5[v6[6]];
    if (!v12(v13, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v14 = &v5[v6[9]];
    v15 = type metadata accessor for ToolbarPrincipalType(0);
    v16 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[14] + 8]);
    v17 = &v5[v6[15]];
    v18 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[16]]);
    v19 = &v5[v6[17]];
    v20 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[19]]);
    swift_release(*(_QWORD *)&v5[v6[20]]);
    v8 = swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[22] + 8]);
    v21 = &v5[v6[23]];
    v22 = *((_QWORD *)v21 + 1);
    if (v22)
    {
      swift_bridgeObjectRelease(v22);
      v8 = swift_bridgeObjectRelease(*((_QWORD *)v21 + 4));
    }
  }
  v23 = (char *)a1 + v4[6];
  if (!((unsigned int (*)(char *, uint64_t, int *, __n128))v7)(v23, 1, v6, v8))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v23 + 1));
    v24 = &v23[v6[5]];
    v25 = type metadata accessor for LocalizerRequest(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (!v27(v24, 1, v25))
      (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
    v28 = &v23[v6[6]];
    if (!v27(v28, 1, v25))
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    v29 = &v23[v6[9]];
    v30 = type metadata accessor for ToolbarPrincipalType(0);
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[14] + 8]);
    v32 = &v23[v6[15]];
    v33 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[16]]);
    v34 = &v23[v6[17]];
    v35 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[19]]);
    swift_release(*(_QWORD *)&v23[v6[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v23[v6[22] + 8]);
    v36 = &v23[v6[23]];
    v37 = *((_QWORD *)v36 + 1);
    if (v37)
    {
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(*((_QWORD *)v36 + 4));
    }
  }
  v38 = (char *)a1 + v4[8];
  v39 = sub_5C154(&qword_322E30);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  v40 = (char *)a1 + v4[9];
  if (!v7(v40, 1, v6))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v40 + 1));
    v41 = &v40[v6[5]];
    v42 = type metadata accessor for LocalizerRequest(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    if (!v44(v41, 1, v42))
      (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
    v45 = &v40[v6[6]];
    if (!v44(v45, 1, v42))
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    v46 = &v40[v6[9]];
    v47 = type metadata accessor for ToolbarPrincipalType(0);
    v48 = *(_QWORD *)(v47 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[14] + 8]);
    v49 = &v40[v6[15]];
    v50 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[16]]);
    v51 = &v40[v6[17]];
    v52 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[19]]);
    swift_release(*(_QWORD *)&v40[v6[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v40[v6[22] + 8]);
    v53 = &v40[v6[23]];
    v54 = *((_QWORD *)v53 + 1);
    if (v54)
    {
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(*((_QWORD *)v53 + 4));
    }
  }
  v55 = sub_5C154(&qword_3217C8);
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(v55 + 28)));
  v56 = (char *)a1 + *(int *)(a2 + 20);
  v57 = type metadata accessor for BooksAlertAction(0);
  v58 = *(_QWORD *)(v57 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
  v59 = *(_QWORD *)&v56[*(int *)(sub_5C154(&qword_322F80) + 28)];
  return swift_release(v59);
}

uint64_t initializeWithCopy for PageContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t, __n128);
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t, __n128);
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(char *, uint64_t, uint64_t, __n128);
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t, __n128);
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  void (*v179)(char *, char *, uint64_t, __n128);
  __n128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  __n128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int (*v203)(char *, uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v208;
  char *v209;
  unsigned int (*v210)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v211)(_QWORD, _QWORD, _QWORD);
  int *v212;
  int *v213;
  char *v214;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v3 = a2;
  v4 = a1;
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  (**(void (***)(void))(v5 - 8))();
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v6[5];
  v8 = (_QWORD *)(v4 + v7);
  v9 = (_QWORD *)(v3 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v216 = *((_QWORD *)v10 - 1);
  v11 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v216 + 48);
  v217 = v3;
  v218 = v4;
  if (v11(v9, 1, v10))
  {
    v12 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v210 = v11;
    v212 = v6;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = v10[5];
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = type metadata accessor for LocalizerRequest(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17, v20))
    {
      v21 = sub_5C154(&qword_3217B8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v22 = v10[6];
    v23 = (char *)v8 + v22;
    v24 = (char *)v9 + v22;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)((char *)v9 + v22, 1, v17))
    {
      v25 = sub_5C154(&qword_3217B8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v24, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
    }
    *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
    *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
    v26 = v10[9];
    v27 = (char *)v8 + v26;
    v28 = (char *)v9 + v26;
    v29 = type metadata accessor for ToolbarPrincipalType(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_5C154(&qword_322F98);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v10[10];
    v33 = *(_QWORD *)((char *)v9 + v32);
    *(_QWORD *)((char *)v8 + v32) = v33;
    v34 = v10[11];
    v35 = *(_QWORD *)((char *)v9 + v34);
    *(_QWORD *)((char *)v8 + v34) = v35;
    *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
    v36 = v10[13];
    v37 = *(_QWORD *)((char *)v9 + v36);
    *(_QWORD *)((char *)v8 + v36) = v37;
    v38 = v10[14];
    v39 = (_QWORD *)((char *)v8 + v38);
    v40 = (_QWORD *)((char *)v9 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = v10[15];
    v43 = (char *)v8 + v42;
    v208 = (char *)v9 + v42;
    v44 = type metadata accessor for PageData(0);
    v45 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 16);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v37);
    v46 = swift_bridgeObjectRetain(v41);
    v45(v43, v208, v44, v46);
    v47 = v10[16];
    v48 = *(_QWORD *)((char *)v9 + v47);
    *(_QWORD *)((char *)v8 + v47) = v48;
    v49 = v10[17];
    v50 = (char *)v8 + v49;
    v51 = (char *)v9 + v49;
    v52 = type metadata accessor for PageMetrics(0);
    v53 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
    v54 = swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52, v54);
    *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
    v55 = v10[19];
    v56 = *(_QWORD *)((char *)v9 + v55);
    *(_QWORD *)((char *)v8 + v55) = v56;
    v57 = v10[20];
    v58 = *(_QWORD *)((char *)v9 + v57);
    *(_QWORD *)((char *)v8 + v57) = v58;
    *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
    v59 = v10[22];
    v60 = (_QWORD *)((char *)v8 + v59);
    v61 = (_QWORD *)((char *)v9 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = v10[23];
    v64 = (char *)v8 + v63;
    v65 = (char *)v9 + v63;
    v66 = *(_QWORD *)((char *)v9 + v63 + 8);
    swift_bridgeObjectRetain(v56);
    swift_retain(v58);
    swift_bridgeObjectRetain(v62);
    if (v66)
    {
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *((_QWORD *)v64 + 1) = v66;
      *((_OWORD *)v64 + 1) = *((_OWORD *)v65 + 1);
      v67 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 4) = v67;
      swift_bridgeObjectRetain(v66);
      v68 = swift_bridgeObjectRetain(v67);
    }
    else
    {
      v68 = *(__n128 *)v65;
      v69 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v69;
      *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
    }
    v3 = v217;
    v4 = v218;
    v11 = v210;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v216 + 56))(v8, 0, 1, v10, v68);
    v6 = v212;
  }
  v70 = v6[6];
  v71 = (_QWORD *)(v4 + v70);
  v72 = (_QWORD *)(v3 + v70);
  if (v11(v3 + v70, 1, v10))
  {
    v73 = sub_5C154(&qword_3217C0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    v211 = v11;
    v213 = v6;
    v74 = v72[1];
    *v71 = *v72;
    v71[1] = v74;
    v75 = v10[5];
    v76 = (char *)v71 + v75;
    v77 = (char *)v72 + v75;
    v78 = type metadata accessor for LocalizerRequest(0);
    v79 = *(_QWORD *)(v78 - 8);
    v80 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v79 + 48);
    v81 = swift_bridgeObjectRetain(v74);
    if (v80(v77, 1, v78, v81))
    {
      v82 = sub_5C154(&qword_3217B8);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    }
    v83 = v10[6];
    v84 = (char *)v71 + v83;
    v85 = (char *)v72 + v83;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v80)((char *)v72 + v83, 1, v78))
    {
      v86 = sub_5C154(&qword_3217B8);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v84, v85, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v84, 0, 1, v78);
    }
    *((_BYTE *)v71 + v10[7]) = *((_BYTE *)v72 + v10[7]);
    *((_BYTE *)v71 + v10[8]) = *((_BYTE *)v72 + v10[8]);
    v87 = v10[9];
    v88 = (char *)v71 + v87;
    v89 = (char *)v72 + v87;
    v90 = type metadata accessor for ToolbarPrincipalType(0);
    v91 = *(_QWORD *)(v90 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
    {
      v92 = sub_5C154(&qword_322F98);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v88, v89, v90);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
    }
    v93 = v10[10];
    v94 = *(_QWORD *)((char *)v72 + v93);
    *(_QWORD *)((char *)v71 + v93) = v94;
    v95 = v10[11];
    v96 = *(_QWORD *)((char *)v72 + v95);
    *(_QWORD *)((char *)v71 + v95) = v96;
    *((_BYTE *)v71 + v10[12]) = *((_BYTE *)v72 + v10[12]);
    v97 = v10[13];
    v98 = *(_QWORD *)((char *)v72 + v97);
    *(_QWORD *)((char *)v71 + v97) = v98;
    v99 = v10[14];
    v100 = (_QWORD *)((char *)v71 + v99);
    v101 = (_QWORD *)((char *)v72 + v99);
    v102 = v101[1];
    *v100 = *v101;
    v100[1] = v102;
    v103 = v10[15];
    v209 = (char *)v71 + v103;
    v104 = (char *)v72 + v103;
    v105 = type metadata accessor for PageData(0);
    v106 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v105 - 8) + 16);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v98);
    v107 = swift_bridgeObjectRetain(v102);
    v106(v209, v104, v105, v107);
    v108 = v10[16];
    v109 = *(_QWORD *)((char *)v72 + v108);
    *(_QWORD *)((char *)v71 + v108) = v109;
    v110 = v10[17];
    v111 = (char *)v71 + v110;
    v112 = (char *)v72 + v110;
    v113 = type metadata accessor for PageMetrics(0);
    v114 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v113 - 8) + 16);
    v115 = swift_bridgeObjectRetain(v109);
    v114(v111, v112, v113, v115);
    *((_BYTE *)v71 + v10[18]) = *((_BYTE *)v72 + v10[18]);
    v116 = v10[19];
    v117 = *(_QWORD *)((char *)v72 + v116);
    *(_QWORD *)((char *)v71 + v116) = v117;
    v118 = v10[20];
    v119 = *(_QWORD *)((char *)v72 + v118);
    *(_QWORD *)((char *)v71 + v118) = v119;
    *((_BYTE *)v71 + v10[21]) = *((_BYTE *)v72 + v10[21]);
    v120 = v10[22];
    v121 = (_QWORD *)((char *)v71 + v120);
    v122 = (_QWORD *)((char *)v72 + v120);
    v123 = v122[1];
    *v121 = *v122;
    v121[1] = v123;
    v124 = v10[23];
    v125 = (char *)v71 + v124;
    v126 = (char *)v72 + v124;
    v127 = *(_QWORD *)((char *)v72 + v124 + 8);
    swift_bridgeObjectRetain(v117);
    swift_retain(v119);
    swift_bridgeObjectRetain(v123);
    if (v127)
    {
      *(_QWORD *)v125 = *(_QWORD *)v126;
      *((_QWORD *)v125 + 1) = v127;
      *((_OWORD *)v125 + 1) = *((_OWORD *)v126 + 1);
      v128 = *((_QWORD *)v126 + 4);
      *((_QWORD *)v125 + 4) = v128;
      swift_bridgeObjectRetain(v127);
      v129 = swift_bridgeObjectRetain(v128);
    }
    else
    {
      v129 = *(__n128 *)v126;
      v130 = *((_OWORD *)v126 + 1);
      *(_OWORD *)v125 = *(_OWORD *)v126;
      *((_OWORD *)v125 + 1) = v130;
      *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
    }
    v3 = v217;
    v4 = v218;
    v11 = v211;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v216 + 56))(v71, 0, 1, v10, v129);
    v6 = v213;
  }
  *(_BYTE *)(v4 + v6[7]) = *(_BYTE *)(v3 + v6[7]);
  v131 = v6[8];
  v132 = v4 + v131;
  v133 = v3 + v131;
  v134 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v132, v133, v134);
  v135 = v6[9];
  v136 = (_QWORD *)(v4 + v135);
  v137 = (_QWORD *)(v3 + v135);
  if (v11(v3 + v135, 1, v10))
  {
    v138 = sub_5C154(&qword_3217C0);
    memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
  }
  else
  {
    v139 = v137[1];
    *v136 = *v137;
    v136[1] = v139;
    v140 = v10[5];
    v141 = (char *)v136 + v140;
    v142 = (char *)v137 + v140;
    v143 = type metadata accessor for LocalizerRequest(0);
    v144 = *(_QWORD *)(v143 - 8);
    v145 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v144 + 48);
    v146 = swift_bridgeObjectRetain(v139);
    if (v145(v142, 1, v143, v146))
    {
      v147 = sub_5C154(&qword_3217B8);
      memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v142, v143);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
    }
    v148 = v10[6];
    v149 = (char *)v136 + v148;
    v150 = (char *)v137 + v148;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v145)((char *)v137 + v148, 1, v143))
    {
      v151 = sub_5C154(&qword_3217B8);
      memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v149, v150, v143);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v149, 0, 1, v143);
    }
    *((_BYTE *)v136 + v10[7]) = *((_BYTE *)v137 + v10[7]);
    *((_BYTE *)v136 + v10[8]) = *((_BYTE *)v137 + v10[8]);
    v152 = v10[9];
    v153 = (char *)v136 + v152;
    v154 = (char *)v137 + v152;
    v155 = type metadata accessor for ToolbarPrincipalType(0);
    v156 = *(_QWORD *)(v155 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
    {
      v157 = sub_5C154(&qword_322F98);
      memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v153, v154, v155);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
    }
    v158 = v10[10];
    v159 = *(_QWORD *)((char *)v137 + v158);
    *(_QWORD *)((char *)v136 + v158) = v159;
    v160 = v10[11];
    v161 = *(_QWORD *)((char *)v137 + v160);
    *(_QWORD *)((char *)v136 + v160) = v161;
    *((_BYTE *)v136 + v10[12]) = *((_BYTE *)v137 + v10[12]);
    v162 = v10[13];
    v163 = *(_QWORD *)((char *)v137 + v162);
    *(_QWORD *)((char *)v136 + v162) = v163;
    v164 = v10[14];
    v165 = (_QWORD *)((char *)v136 + v164);
    v166 = (_QWORD *)((char *)v137 + v164);
    v167 = v166[1];
    *v165 = *v166;
    v165[1] = v167;
    v168 = v10[15];
    v214 = (char *)v136 + v168;
    v169 = (char *)v137 + v168;
    v170 = type metadata accessor for PageData(0);
    v171 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v170 - 8) + 16);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v161);
    swift_bridgeObjectRetain(v163);
    v172 = swift_bridgeObjectRetain(v167);
    v171(v214, v169, v170, v172);
    v173 = v10[16];
    v174 = *(_QWORD *)((char *)v137 + v173);
    *(_QWORD *)((char *)v136 + v173) = v174;
    v175 = v10[17];
    v176 = (char *)v136 + v175;
    v177 = (char *)v137 + v175;
    v178 = type metadata accessor for PageMetrics(0);
    v179 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v178 - 8) + 16);
    v180 = swift_bridgeObjectRetain(v174);
    v179(v176, v177, v178, v180);
    *((_BYTE *)v136 + v10[18]) = *((_BYTE *)v137 + v10[18]);
    v181 = v10[19];
    v182 = *(_QWORD *)((char *)v137 + v181);
    *(_QWORD *)((char *)v136 + v181) = v182;
    v183 = v10[20];
    v184 = *(_QWORD *)((char *)v137 + v183);
    *(_QWORD *)((char *)v136 + v183) = v184;
    *((_BYTE *)v136 + v10[21]) = *((_BYTE *)v137 + v10[21]);
    v185 = v10[22];
    v186 = (_QWORD *)((char *)v136 + v185);
    v187 = (_QWORD *)((char *)v137 + v185);
    v188 = v187[1];
    *v186 = *v187;
    v186[1] = v188;
    v189 = v10[23];
    v190 = (char *)v136 + v189;
    v191 = (char *)v137 + v189;
    v192 = *(_QWORD *)((char *)v137 + v189 + 8);
    swift_bridgeObjectRetain(v182);
    swift_retain(v184);
    swift_bridgeObjectRetain(v188);
    if (v192)
    {
      *(_QWORD *)v190 = *(_QWORD *)v191;
      *((_QWORD *)v190 + 1) = v192;
      *((_OWORD *)v190 + 1) = *((_OWORD *)v191 + 1);
      v193 = *((_QWORD *)v191 + 4);
      *((_QWORD *)v190 + 4) = v193;
      swift_bridgeObjectRetain(v192);
      v194 = swift_bridgeObjectRetain(v193);
    }
    else
    {
      v194 = *(__n128 *)v191;
      v195 = *((_OWORD *)v191 + 1);
      *(_OWORD *)v190 = *(_OWORD *)v191;
      *((_OWORD *)v190 + 1) = v195;
      *((_QWORD *)v190 + 4) = *((_QWORD *)v191 + 4);
    }
    v3 = v217;
    v4 = v218;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v216 + 56))(v136, 0, 1, v10, v194);
  }
  v196 = *(int *)(sub_5C154(&qword_3217C8) + 28);
  v197 = *(_QWORD *)(v3 + v196);
  *(_QWORD *)(v4 + v196) = v197;
  v198 = *(int *)(a3 + 20);
  v199 = (char *)(v4 + v198);
  v200 = (char *)(v3 + v198);
  v201 = type metadata accessor for BooksAlertAction(0);
  v202 = *(_QWORD *)(v201 - 8);
  v203 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48);
  swift_retain(v197);
  if (v203(v200, 1, v201))
  {
    v204 = sub_5C154(&qword_322FA0);
    memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v199, v200, v201);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v199, 0, 1, v201);
  }
  v205 = *(int *)(sub_5C154(&qword_322F80) + 28);
  v206 = *(_QWORD *)&v200[v205];
  *(_QWORD *)&v199[v205] = v206;
  swift_retain(v206);
  return v4;
}

_QWORD *assignWithCopy for PageContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t (*v11)(_QWORD *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t, __n128);
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(char *, uint64_t, uint64_t, __n128);
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(_QWORD *, uint64_t, int *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t, uint64_t);
  int v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t, __n128);
  __n128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t, __n128);
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __n128 v156;
  __int128 v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int (*v172)(char *, uint64_t, uint64_t, __n128);
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(char *, uint64_t, uint64_t);
  int v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  void (*v208)(char *, char *, uint64_t, __n128);
  __n128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  void (*v216)(char *, char *, uint64_t, __n128);
  __n128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __n128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t (*v242)(char *, uint64_t, uint64_t);
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t (*v273)(char *, uint64_t, uint64_t);
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t (*v282)(char *, uint64_t, uint64_t);
  int v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t (*v291)(char *, uint64_t, uint64_t);
  int v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  char *v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  char *v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  __int128 v436;
  uint64_t v437;
  __int128 v438;
  uint64_t v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  char *v447;
  char *v448;
  uint64_t (*v449)(_QWORD *, uint64_t, int *);
  uint64_t (*v450)(_QWORD *, uint64_t, int *);
  uint64_t (*v451)(_QWORD *, uint64_t, int *);
  int *v452;
  int *v453;
  int *v454;
  int *v455;
  char *v456;
  _QWORD *v457;
  _QWORD *v458;
  _QWORD *v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  _QWORD *v463;

  v4 = a2;
  v5 = a1;
  sub_65938(a1, a2);
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v6[5];
  v8 = (_QWORD *)((char *)v5 + v7);
  v9 = (_QWORD *)((char *)v4 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v461 = *((_QWORD *)v10 - 1);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v461 + 48);
  v12 = v11(v8, 1, v10);
  v13 = v11(v9, 1, v10);
  v462 = a3;
  v463 = v4;
  if (v12)
  {
    if (!v13)
    {
      v449 = v11;
      v457 = v5;
      *v8 = *v9;
      v14 = v9[1];
      v8[1] = v14;
      v15 = v10[5];
      v16 = (char *)v8 + v15;
      v17 = (char *)v9 + v15;
      v18 = type metadata accessor for LocalizerRequest(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v19 + 48);
      v21 = swift_bridgeObjectRetain(v14);
      if (v20(v17, 1, v18, v21))
      {
        v22 = sub_5C154(&qword_3217B8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v35 = v10[6];
      v36 = (char *)v8 + v35;
      v37 = (char *)v9 + v35;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v20)((char *)v9 + v35, 1, v18))
      {
        v38 = sub_5C154(&qword_3217B8);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v36, v37, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v36, 0, 1, v18);
      }
      *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
      *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
      v39 = v10[9];
      v40 = (char *)v8 + v39;
      v41 = (char *)v9 + v39;
      v42 = type metadata accessor for ToolbarPrincipalType(0);
      v43 = *(_QWORD *)(v42 - 8);
      v453 = v6;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = sub_5C154(&qword_322F98);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v45 = v10[10];
      v46 = *(_QWORD *)((char *)v9 + v45);
      *(_QWORD *)((char *)v8 + v45) = v46;
      v47 = v10[11];
      v48 = *(_QWORD *)((char *)v9 + v47);
      *(_QWORD *)((char *)v8 + v47) = v48;
      *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
      v49 = v10[13];
      v50 = *(_QWORD *)((char *)v9 + v49);
      *(_QWORD *)((char *)v8 + v49) = v50;
      v51 = v10[14];
      v52 = (_QWORD *)((char *)v8 + v51);
      v53 = (_QWORD *)((char *)v9 + v51);
      *v52 = *v53;
      v54 = v53[1];
      v52[1] = v54;
      v55 = v10[15];
      v447 = (char *)v8 + v55;
      v56 = (char *)v9 + v55;
      v57 = type metadata accessor for PageData(0);
      v58 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v57 - 8) + 16);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v50);
      v59 = swift_bridgeObjectRetain(v54);
      v58(v447, v56, v57, v59);
      v60 = v10[16];
      v61 = *(_QWORD *)((char *)v9 + v60);
      *(_QWORD *)((char *)v8 + v60) = v61;
      v62 = v10[17];
      v63 = (char *)v8 + v62;
      v64 = (char *)v9 + v62;
      v65 = type metadata accessor for PageMetrics(0);
      v66 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v65 - 8) + 16);
      v67 = swift_bridgeObjectRetain(v61);
      v66(v63, v64, v65, v67);
      *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
      v68 = v10[19];
      v69 = *(_QWORD *)((char *)v9 + v68);
      *(_QWORD *)((char *)v8 + v68) = v69;
      v70 = v10[20];
      v71 = *(_QWORD *)((char *)v9 + v70);
      *(_QWORD *)((char *)v8 + v70) = v71;
      *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
      v72 = v10[22];
      v73 = (_QWORD *)((char *)v8 + v72);
      v74 = (_QWORD *)((char *)v9 + v72);
      *v73 = *v74;
      v75 = v74[1];
      v73[1] = v75;
      v76 = v10[23];
      v77 = (_QWORD *)((char *)v8 + v76);
      v78 = (_QWORD *)((char *)v9 + v76);
      v79 = *(_QWORD *)((char *)v9 + v76 + 8);
      swift_bridgeObjectRetain(v69);
      swift_retain(v71);
      swift_bridgeObjectRetain(v75);
      if (v79)
      {
        *v77 = *v78;
        v80 = v78[1];
        v77[1] = v80;
        v77[2] = v78[2];
        v77[3] = v78[3];
        v81 = v78[4];
        v77[4] = v81;
        swift_bridgeObjectRetain(v80);
        v82 = swift_bridgeObjectRetain(v81);
      }
      else
      {
        v82 = *(__n128 *)v78;
        v83 = *((_OWORD *)v78 + 1);
        v77[4] = v78[4];
        *(__n128 *)v77 = v82;
        *((_OWORD *)v77 + 1) = v83;
      }
      v5 = v457;
      v4 = v463;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v461 + 56))(v8, 0, 1, v10, v82);
      v11 = v449;
      v6 = v453;
      goto LABEL_22;
    }
LABEL_7:
    v23 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_22;
  }
  if (v13)
  {
    sub_6685C((uint64_t)v8, type metadata accessor for Page);
    goto LABEL_7;
  }
  v450 = v11;
  v452 = v6;
  v24 = v5;
  *v8 = *v9;
  v25 = v9[1];
  v26 = v8[1];
  v8[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v10[5];
  v28 = (char *)v8 + v27;
  v29 = (char *)v9 + v27;
  v30 = type metadata accessor for LocalizerRequest(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_74:
    v249 = sub_5C154(&qword_3217B8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v28, v29, v30);
LABEL_75:
  v250 = v10[6];
  v251 = (char *)v8 + v250;
  v252 = (char *)v9 + v250;
  v253 = v32((char *)v8 + v250, 1, v30);
  v254 = v32(v252, 1, v30);
  if (v253)
  {
    if (!v254)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v251, v252, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v251, 0, 1, v30);
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  if (v254)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v251, v30);
LABEL_92:
    v267 = sub_5C154(&qword_3217B8);
    memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v267 - 8) + 64));
    goto LABEL_93;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v251, v252, v30);
LABEL_93:
  *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
  *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
  v268 = v10[9];
  v269 = (char *)v8 + v268;
  v270 = (char *)v9 + v268;
  v271 = type metadata accessor for ToolbarPrincipalType(0);
  v272 = *(_QWORD *)(v271 - 8);
  v273 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v272 + 48);
  v274 = v273(v269, 1, v271);
  v275 = v273(v270, 1, v271);
  if (v274)
  {
    if (!v275)
    {
      (*(void (**)(char *, char *, uint64_t))(v272 + 16))(v269, v270, v271);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v269, 0, 1, v271);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v275)
  {
    (*(void (**)(char *, uint64_t))(v272 + 8))(v269, v271);
LABEL_110:
    v294 = sub_5C154(&qword_322F98);
    memcpy(v269, v270, *(_QWORD *)(*(_QWORD *)(v294 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v272 + 24))(v269, v270, v271);
LABEL_111:
  v295 = v10[10];
  v296 = *(_QWORD *)((char *)v9 + v295);
  v297 = *(_QWORD *)((char *)v8 + v295);
  *(_QWORD *)((char *)v8 + v295) = v296;
  swift_bridgeObjectRetain(v296);
  swift_bridgeObjectRelease(v297);
  v298 = v10[11];
  v299 = *(_QWORD *)((char *)v9 + v298);
  v300 = *(_QWORD *)((char *)v8 + v298);
  *(_QWORD *)((char *)v8 + v298) = v299;
  swift_bridgeObjectRetain(v299);
  swift_bridgeObjectRelease(v300);
  *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
  v301 = v10[13];
  v302 = *(_QWORD *)((char *)v9 + v301);
  v303 = *(_QWORD *)((char *)v8 + v301);
  *(_QWORD *)((char *)v8 + v301) = v302;
  swift_bridgeObjectRetain(v302);
  swift_bridgeObjectRelease(v303);
  v304 = v10[14];
  v305 = (_QWORD *)((char *)v8 + v304);
  v306 = (_QWORD *)((char *)v9 + v304);
  *v305 = *v306;
  v307 = v306[1];
  v308 = v305[1];
  v305[1] = v307;
  swift_bridgeObjectRetain(v307);
  swift_bridgeObjectRelease(v308);
  v309 = v10[15];
  v310 = (char *)v8 + v309;
  v311 = (char *)v9 + v309;
  v312 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v312 - 8) + 24))(v310, v311, v312);
  v313 = v10[16];
  v314 = *(_QWORD *)((char *)v9 + v313);
  v315 = *(_QWORD *)((char *)v8 + v313);
  *(_QWORD *)((char *)v8 + v313) = v314;
  swift_bridgeObjectRetain(v314);
  swift_bridgeObjectRelease(v315);
  v316 = v10[17];
  v317 = (char *)v8 + v316;
  v318 = (char *)v9 + v316;
  v319 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v319 - 8) + 24))(v317, v318, v319);
  *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
  v320 = v10[19];
  v321 = *(_QWORD *)((char *)v9 + v320);
  v322 = *(_QWORD *)((char *)v8 + v320);
  *(_QWORD *)((char *)v8 + v320) = v321;
  swift_bridgeObjectRetain(v321);
  swift_bridgeObjectRelease(v322);
  v323 = v10[20];
  v324 = *(_QWORD *)((char *)v9 + v323);
  v325 = *(_QWORD *)((char *)v8 + v323);
  *(_QWORD *)((char *)v8 + v323) = v324;
  swift_retain(v324);
  swift_release(v325);
  *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
  v326 = v10[22];
  v327 = (_QWORD *)((char *)v8 + v326);
  v328 = (_QWORD *)((char *)v9 + v326);
  *v327 = *v328;
  v329 = v328[1];
  v330 = v327[1];
  v327[1] = v329;
  swift_bridgeObjectRetain(v329);
  swift_bridgeObjectRelease(v330);
  v331 = v10[23];
  v332 = (_QWORD *)((char *)v8 + v331);
  v333 = (_QWORD *)((char *)v9 + v331);
  v334 = v332[1];
  v335 = v333[1];
  v5 = v24;
  v4 = v463;
  if (v334)
  {
    v6 = v452;
    if (v335)
    {
      *v332 = *v333;
      v336 = v333[1];
      v332[1] = v336;
      swift_bridgeObjectRetain(v336);
      swift_bridgeObjectRelease(v334);
      v332[2] = v333[2];
      v332[3] = v333[3];
      v337 = v333[4];
      v338 = v332[4];
      v332[4] = v337;
      swift_bridgeObjectRetain(v337);
      swift_bridgeObjectRelease(v338);
    }
    else
    {
      sub_984B0((uint64_t)v332);
      v435 = v333[4];
      v436 = *((_OWORD *)v333 + 1);
      *(_OWORD *)v332 = *(_OWORD *)v333;
      *((_OWORD *)v332 + 1) = v436;
      v332[4] = v435;
    }
    v11 = v450;
  }
  else
  {
    v6 = v452;
    if (v335)
    {
      *v332 = *v333;
      v429 = v333[1];
      v332[1] = v429;
      v332[2] = v333[2];
      v332[3] = v333[3];
      v430 = v333[4];
      v332[4] = v430;
      swift_bridgeObjectRetain(v429);
      swift_bridgeObjectRetain(v430);
    }
    else
    {
      v441 = *(_OWORD *)v333;
      v442 = *((_OWORD *)v333 + 1);
      v332[4] = v333[4];
      *(_OWORD *)v332 = v441;
      *((_OWORD *)v332 + 1) = v442;
    }
    v11 = v450;
  }
LABEL_22:
  v84 = v6[6];
  v85 = (char *)v5 + v84;
  v86 = (_QWORD *)((char *)v4 + v84);
  v87 = v11((_QWORD *)((char *)v5 + v84), 1, v10);
  v88 = v11(v86, 1, v10);
  if (!v87)
  {
    if (v88)
    {
      sub_6685C((uint64_t)v85, type metadata accessor for Page);
      goto LABEL_28;
    }
    v454 = v6;
    v459 = v5;
    v99 = v11;
    *(_QWORD *)v85 = *v86;
    v100 = v86[1];
    v101 = *((_QWORD *)v85 + 1);
    *((_QWORD *)v85 + 1) = v100;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRelease(v101);
    v102 = v10[5];
    v103 = &v85[v102];
    v104 = (char *)v86 + v102;
    v105 = type metadata accessor for LocalizerRequest(0);
    v106 = *(_QWORD *)(v105 - 8);
    v107 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48);
    LODWORD(v101) = v107(v103, 1, v105);
    v108 = v107(v104, 1, v105);
    if ((_DWORD)v101)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v104, v105);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        goto LABEL_81;
      }
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 24))(v103, v104, v105);
LABEL_81:
        v256 = v10[6];
        v257 = &v85[v256];
        v258 = (char *)v86 + v256;
        v259 = v107(&v85[v256], 1, v105);
        v260 = v107(v258, 1, v105);
        if (v259)
        {
          if (!v260)
          {
            (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v257, v258, v105);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v257, 0, 1, v105);
            goto LABEL_99;
          }
        }
        else
        {
          if (!v260)
          {
            (*(void (**)(char *, char *, uint64_t))(v106 + 24))(v257, v258, v105);
LABEL_99:
            v85[v10[7]] = *((_BYTE *)v86 + v10[7]);
            v85[v10[8]] = *((_BYTE *)v86 + v10[8]);
            v277 = v10[9];
            v278 = &v85[v277];
            v279 = (char *)v86 + v277;
            v280 = type metadata accessor for ToolbarPrincipalType(0);
            v281 = *(_QWORD *)(v280 - 8);
            v282 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v281 + 48);
            v283 = v282(v278, 1, v280);
            v284 = v282(v279, 1, v280);
            v11 = v99;
            if (v283)
            {
              if (!v284)
              {
                (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v278, v279, v280);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v281 + 56))(v278, 0, 1, v280);
                goto LABEL_118;
              }
            }
            else
            {
              if (!v284)
              {
                (*(void (**)(char *, char *, uint64_t))(v281 + 24))(v278, v279, v280);
LABEL_118:
                v6 = v454;
                v340 = v10[10];
                v341 = *(_QWORD *)((char *)v86 + v340);
                v342 = *(_QWORD *)&v85[v340];
                *(_QWORD *)&v85[v340] = v341;
                swift_bridgeObjectRetain(v341);
                swift_bridgeObjectRelease(v342);
                v343 = v10[11];
                v344 = *(_QWORD *)((char *)v86 + v343);
                v345 = *(_QWORD *)&v85[v343];
                *(_QWORD *)&v85[v343] = v344;
                swift_bridgeObjectRetain(v344);
                swift_bridgeObjectRelease(v345);
                v85[v10[12]] = *((_BYTE *)v86 + v10[12]);
                v346 = v10[13];
                v347 = *(_QWORD *)((char *)v86 + v346);
                v348 = *(_QWORD *)&v85[v346];
                *(_QWORD *)&v85[v346] = v347;
                swift_bridgeObjectRetain(v347);
                swift_bridgeObjectRelease(v348);
                v349 = v10[14];
                v350 = &v85[v349];
                v351 = (_QWORD *)((char *)v86 + v349);
                *(_QWORD *)v350 = *v351;
                v352 = v351[1];
                v353 = *((_QWORD *)v350 + 1);
                *((_QWORD *)v350 + 1) = v352;
                swift_bridgeObjectRetain(v352);
                swift_bridgeObjectRelease(v353);
                v354 = v10[15];
                v355 = &v85[v354];
                v356 = (char *)v86 + v354;
                v357 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v357 - 8) + 24))(v355, v356, v357);
                v358 = v10[16];
                v359 = *(_QWORD *)((char *)v86 + v358);
                v360 = *(_QWORD *)&v85[v358];
                *(_QWORD *)&v85[v358] = v359;
                swift_bridgeObjectRetain(v359);
                swift_bridgeObjectRelease(v360);
                v361 = v10[17];
                v362 = &v85[v361];
                v363 = (char *)v86 + v361;
                v364 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v364 - 8) + 24))(v362, v363, v364);
                v85[v10[18]] = *((_BYTE *)v86 + v10[18]);
                v365 = v10[19];
                v366 = *(_QWORD *)((char *)v86 + v365);
                v367 = *(_QWORD *)&v85[v365];
                *(_QWORD *)&v85[v365] = v366;
                swift_bridgeObjectRetain(v366);
                swift_bridgeObjectRelease(v367);
                v368 = v10[20];
                v369 = *(_QWORD *)((char *)v86 + v368);
                v370 = *(_QWORD *)&v85[v368];
                *(_QWORD *)&v85[v368] = v369;
                swift_retain(v369);
                swift_release(v370);
                v85[v10[21]] = *((_BYTE *)v86 + v10[21]);
                v371 = v10[22];
                v372 = &v85[v371];
                v373 = (_QWORD *)((char *)v86 + v371);
                *(_QWORD *)v372 = *v373;
                v374 = v373[1];
                v375 = *((_QWORD *)v372 + 1);
                *((_QWORD *)v372 + 1) = v374;
                swift_bridgeObjectRetain(v374);
                swift_bridgeObjectRelease(v375);
                v376 = v10[23];
                v377 = &v85[v376];
                v378 = (_QWORD *)((char *)v86 + v376);
                v379 = *((_QWORD *)v377 + 1);
                v380 = v378[1];
                v5 = v459;
                v4 = v463;
                if (v379)
                {
                  if (v380)
                  {
                    *(_QWORD *)v377 = *v378;
                    v381 = v378[1];
                    *((_QWORD *)v377 + 1) = v381;
                    swift_bridgeObjectRetain(v381);
                    swift_bridgeObjectRelease(v379);
                    *((_QWORD *)v377 + 2) = v378[2];
                    *((_QWORD *)v377 + 3) = v378[3];
                    v382 = v378[4];
                    v383 = *((_QWORD *)v377 + 4);
                    *((_QWORD *)v377 + 4) = v382;
                    swift_bridgeObjectRetain(v382);
                    swift_bridgeObjectRelease(v383);
                  }
                  else
                  {
                    sub_984B0((uint64_t)v377);
                    v437 = v378[4];
                    v438 = *((_OWORD *)v378 + 1);
                    *(_OWORD *)v377 = *(_OWORD *)v378;
                    *((_OWORD *)v377 + 1) = v438;
                    *((_QWORD *)v377 + 4) = v437;
                  }
                }
                else if (v380)
                {
                  *(_QWORD *)v377 = *v378;
                  v431 = v378[1];
                  *((_QWORD *)v377 + 1) = v431;
                  *((_QWORD *)v377 + 2) = v378[2];
                  *((_QWORD *)v377 + 3) = v378[3];
                  v432 = v378[4];
                  *((_QWORD *)v377 + 4) = v432;
                  swift_bridgeObjectRetain(v431);
                  swift_bridgeObjectRetain(v432);
                }
                else
                {
                  v443 = *(_OWORD *)v378;
                  v444 = *((_OWORD *)v378 + 1);
                  *((_QWORD *)v377 + 4) = v378[4];
                  *(_OWORD *)v377 = v443;
                  *((_OWORD *)v377 + 1) = v444;
                }
                goto LABEL_43;
              }
              (*(void (**)(char *, uint64_t))(v281 + 8))(v278, v280);
            }
            v339 = sub_5C154(&qword_322F98);
            memcpy(v278, v279, *(_QWORD *)(*(_QWORD *)(v339 - 8) + 64));
            goto LABEL_118;
          }
          (*(void (**)(char *, uint64_t))(v106 + 8))(v257, v105);
        }
        v276 = sub_5C154(&qword_3217B8);
        memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v276 - 8) + 64));
        goto LABEL_99;
      }
      (*(void (**)(char *, uint64_t))(v106 + 8))(v103, v105);
    }
    v255 = sub_5C154(&qword_3217B8);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
    goto LABEL_81;
  }
  if (v88)
  {
LABEL_28:
    v98 = sub_5C154(&qword_3217C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_43;
  }
  v451 = v11;
  v458 = v5;
  *(_QWORD *)v85 = *v86;
  v89 = v86[1];
  *((_QWORD *)v85 + 1) = v89;
  v90 = v10[5];
  v91 = &v85[v90];
  v92 = (char *)v86 + v90;
  v93 = type metadata accessor for LocalizerRequest(0);
  v94 = *(_QWORD *)(v93 - 8);
  v95 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v94 + 48);
  v96 = swift_bridgeObjectRetain(v89);
  if (v95(v92, 1, v93, v96))
  {
    v97 = sub_5C154(&qword_3217B8);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v91, v92, v93);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
  }
  v109 = v10[6];
  v110 = &v85[v109];
  v111 = (char *)v86 + v109;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v95)((char *)v86 + v109, 1, v93))
  {
    v112 = sub_5C154(&qword_3217B8);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v110, v111, v93);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v110, 0, 1, v93);
  }
  v85[v10[7]] = *((_BYTE *)v86 + v10[7]);
  v85[v10[8]] = *((_BYTE *)v86 + v10[8]);
  v113 = v10[9];
  v114 = &v85[v113];
  v115 = (char *)v86 + v113;
  v116 = type metadata accessor for ToolbarPrincipalType(0);
  v117 = *(_QWORD *)(v116 - 8);
  v455 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    v118 = sub_5C154(&qword_322F98);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v114, v115, v116);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
  }
  v119 = v10[10];
  v120 = *(_QWORD *)((char *)v86 + v119);
  *(_QWORD *)&v85[v119] = v120;
  v121 = v10[11];
  v122 = *(_QWORD *)((char *)v86 + v121);
  *(_QWORD *)&v85[v121] = v122;
  v85[v10[12]] = *((_BYTE *)v86 + v10[12]);
  v123 = v10[13];
  v124 = *(_QWORD *)((char *)v86 + v123);
  *(_QWORD *)&v85[v123] = v124;
  v125 = v10[14];
  v126 = &v85[v125];
  v127 = (_QWORD *)((char *)v86 + v125);
  *(_QWORD *)v126 = *v127;
  v128 = v127[1];
  *((_QWORD *)v126 + 1) = v128;
  v129 = v10[15];
  v448 = &v85[v129];
  v130 = (char *)v86 + v129;
  v131 = type metadata accessor for PageData(0);
  v132 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v131 - 8) + 16);
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRetain(v124);
  v133 = swift_bridgeObjectRetain(v128);
  v132(v448, v130, v131, v133);
  v134 = v10[16];
  v135 = *(_QWORD *)((char *)v86 + v134);
  *(_QWORD *)&v85[v134] = v135;
  v136 = v10[17];
  v137 = &v85[v136];
  v138 = (char *)v86 + v136;
  v139 = type metadata accessor for PageMetrics(0);
  v140 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v139 - 8) + 16);
  v141 = swift_bridgeObjectRetain(v135);
  v140(v137, v138, v139, v141);
  v85[v10[18]] = *((_BYTE *)v86 + v10[18]);
  v142 = v10[19];
  v143 = *(_QWORD *)((char *)v86 + v142);
  *(_QWORD *)&v85[v142] = v143;
  v144 = v10[20];
  v145 = *(_QWORD *)((char *)v86 + v144);
  *(_QWORD *)&v85[v144] = v145;
  v85[v10[21]] = *((_BYTE *)v86 + v10[21]);
  v146 = v10[22];
  v147 = &v85[v146];
  v148 = (_QWORD *)((char *)v86 + v146);
  *(_QWORD *)v147 = *v148;
  v149 = v148[1];
  *((_QWORD *)v147 + 1) = v149;
  v150 = v10[23];
  v151 = &v85[v150];
  v152 = (_QWORD *)((char *)v86 + v150);
  v153 = *(_QWORD *)((char *)v86 + v150 + 8);
  swift_bridgeObjectRetain(v143);
  swift_retain(v145);
  swift_bridgeObjectRetain(v149);
  if (v153)
  {
    *(_QWORD *)v151 = *v152;
    v154 = v152[1];
    *((_QWORD *)v151 + 1) = v154;
    *((_QWORD *)v151 + 2) = v152[2];
    *((_QWORD *)v151 + 3) = v152[3];
    v155 = v152[4];
    *((_QWORD *)v151 + 4) = v155;
    swift_bridgeObjectRetain(v154);
    v156 = swift_bridgeObjectRetain(v155);
  }
  else
  {
    v156 = *(__n128 *)v152;
    v157 = *((_OWORD *)v152 + 1);
    *((_QWORD *)v151 + 4) = v152[4];
    *(__n128 *)v151 = v156;
    *((_OWORD *)v151 + 1) = v157;
  }
  v5 = v458;
  v4 = v463;
  (*(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v461 + 56))(v85, 0, 1, v10, v156);
  v11 = v451;
  v6 = v455;
LABEL_43:
  *((_BYTE *)v5 + v6[7]) = *((_BYTE *)v4 + v6[7]);
  v158 = v6[8];
  v159 = (char *)v5 + v158;
  v160 = (char *)v4 + v158;
  v161 = sub_5C154(&qword_322E30);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 24))(v159, v160, v161);
  v162 = v6[9];
  v163 = (char *)v5 + v162;
  v164 = (_QWORD *)((char *)v4 + v162);
  LODWORD(v159) = v11((_QWORD *)((char *)v5 + v162), 1, v10);
  v165 = v11(v164, 1, v10);
  if (!(_DWORD)v159)
  {
    if (v165)
    {
      sub_6685C((uint64_t)v163, type metadata accessor for Page);
      goto LABEL_49;
    }
    *(_QWORD *)v163 = *v164;
    v176 = v164[1];
    v177 = *((_QWORD *)v163 + 1);
    *((_QWORD *)v163 + 1) = v176;
    swift_bridgeObjectRetain(v176);
    swift_bridgeObjectRelease(v177);
    v178 = v10[5];
    v179 = &v163[v178];
    v180 = (char *)v164 + v178;
    v181 = type metadata accessor for LocalizerRequest(0);
    v182 = *(_QWORD *)(v181 - 8);
    v183 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v182 + 48);
    LODWORD(v177) = v183(v179, 1, v181);
    v184 = v183(v180, 1, v181);
    if ((_DWORD)v177)
    {
      if (!v184)
      {
        (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v179, v180, v181);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v179, 0, 1, v181);
        goto LABEL_87;
      }
    }
    else
    {
      if (!v184)
      {
        (*(void (**)(char *, char *, uint64_t))(v182 + 24))(v179, v180, v181);
LABEL_87:
        v262 = v10[6];
        v263 = &v163[v262];
        v264 = (char *)v164 + v262;
        v265 = v183(&v163[v262], 1, v181);
        v266 = v183(v264, 1, v181);
        if (v265)
        {
          if (!v266)
          {
            (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v263, v264, v181);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v263, 0, 1, v181);
            goto LABEL_105;
          }
        }
        else
        {
          if (!v266)
          {
            (*(void (**)(char *, char *, uint64_t))(v182 + 24))(v263, v264, v181);
LABEL_105:
            v163[v10[7]] = *((_BYTE *)v164 + v10[7]);
            v163[v10[8]] = *((_BYTE *)v164 + v10[8]);
            v286 = v10[9];
            v287 = &v163[v286];
            v288 = (char *)v164 + v286;
            v289 = type metadata accessor for ToolbarPrincipalType(0);
            v290 = *(_QWORD *)(v289 - 8);
            v291 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v290 + 48);
            v292 = v291(v287, 1, v289);
            v293 = v291(v288, 1, v289);
            if (v292)
            {
              if (!v293)
              {
                (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v287, v288, v289);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v287, 0, 1, v289);
                goto LABEL_124;
              }
            }
            else
            {
              if (!v293)
              {
                (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v287, v288, v289);
LABEL_124:
                v385 = v10[10];
                v386 = *(_QWORD *)((char *)v164 + v385);
                v387 = *(_QWORD *)&v163[v385];
                *(_QWORD *)&v163[v385] = v386;
                swift_bridgeObjectRetain(v386);
                swift_bridgeObjectRelease(v387);
                v388 = v10[11];
                v389 = *(_QWORD *)((char *)v164 + v388);
                v390 = *(_QWORD *)&v163[v388];
                *(_QWORD *)&v163[v388] = v389;
                swift_bridgeObjectRetain(v389);
                swift_bridgeObjectRelease(v390);
                v163[v10[12]] = *((_BYTE *)v164 + v10[12]);
                v391 = v10[13];
                v392 = *(_QWORD *)((char *)v164 + v391);
                v393 = *(_QWORD *)&v163[v391];
                *(_QWORD *)&v163[v391] = v392;
                swift_bridgeObjectRetain(v392);
                swift_bridgeObjectRelease(v393);
                v394 = v10[14];
                v395 = &v163[v394];
                v396 = (_QWORD *)((char *)v164 + v394);
                *(_QWORD *)v395 = *v396;
                v397 = v396[1];
                v398 = *((_QWORD *)v395 + 1);
                *((_QWORD *)v395 + 1) = v397;
                swift_bridgeObjectRetain(v397);
                swift_bridgeObjectRelease(v398);
                v399 = v10[15];
                v400 = &v163[v399];
                v401 = (char *)v164 + v399;
                v402 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v402 - 8) + 24))(v400, v401, v402);
                v403 = v10[16];
                v404 = *(_QWORD *)((char *)v164 + v403);
                v405 = *(_QWORD *)&v163[v403];
                *(_QWORD *)&v163[v403] = v404;
                swift_bridgeObjectRetain(v404);
                swift_bridgeObjectRelease(v405);
                v406 = v10[17];
                v407 = &v163[v406];
                v408 = (char *)v164 + v406;
                v409 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v409 - 8) + 24))(v407, v408, v409);
                v163[v10[18]] = *((_BYTE *)v164 + v10[18]);
                v410 = v10[19];
                v411 = *(_QWORD *)((char *)v164 + v410);
                v412 = *(_QWORD *)&v163[v410];
                *(_QWORD *)&v163[v410] = v411;
                swift_bridgeObjectRetain(v411);
                swift_bridgeObjectRelease(v412);
                v413 = v10[20];
                v414 = *(_QWORD *)((char *)v164 + v413);
                v415 = *(_QWORD *)&v163[v413];
                *(_QWORD *)&v163[v413] = v414;
                swift_retain(v414);
                swift_release(v415);
                v163[v10[21]] = *((_BYTE *)v164 + v10[21]);
                v416 = v10[22];
                v417 = &v163[v416];
                v418 = (_QWORD *)((char *)v164 + v416);
                *(_QWORD *)v417 = *v418;
                v419 = v418[1];
                v420 = *((_QWORD *)v417 + 1);
                *((_QWORD *)v417 + 1) = v419;
                swift_bridgeObjectRetain(v419);
                swift_bridgeObjectRelease(v420);
                v421 = v10[23];
                v422 = &v163[v421];
                v423 = (_QWORD *)((char *)v164 + v421);
                v424 = *(_QWORD *)&v163[v421 + 8];
                v425 = *(_QWORD *)((char *)v164 + v421 + 8);
                v4 = v463;
                if (v424)
                {
                  if (v425)
                  {
                    *(_QWORD *)v422 = *v423;
                    v426 = v423[1];
                    *((_QWORD *)v422 + 1) = v426;
                    swift_bridgeObjectRetain(v426);
                    swift_bridgeObjectRelease(v424);
                    *((_QWORD *)v422 + 2) = v423[2];
                    *((_QWORD *)v422 + 3) = v423[3];
                    v427 = v423[4];
                    v428 = *((_QWORD *)v422 + 4);
                    *((_QWORD *)v422 + 4) = v427;
                    swift_bridgeObjectRetain(v427);
                    swift_bridgeObjectRelease(v428);
                  }
                  else
                  {
                    sub_984B0((uint64_t)v422);
                    v439 = v423[4];
                    v440 = *((_OWORD *)v423 + 1);
                    *(_OWORD *)v422 = *(_OWORD *)v423;
                    *((_OWORD *)v422 + 1) = v440;
                    *((_QWORD *)v422 + 4) = v439;
                  }
                }
                else if (v425)
                {
                  *(_QWORD *)v422 = *v423;
                  v433 = v423[1];
                  *((_QWORD *)v422 + 1) = v433;
                  *((_QWORD *)v422 + 2) = v423[2];
                  *((_QWORD *)v422 + 3) = v423[3];
                  v434 = v423[4];
                  *((_QWORD *)v422 + 4) = v434;
                  swift_bridgeObjectRetain(v433);
                  swift_bridgeObjectRetain(v434);
                }
                else
                {
                  v445 = *(_OWORD *)v423;
                  v446 = *((_OWORD *)v423 + 1);
                  *((_QWORD *)v422 + 4) = v423[4];
                  *(_OWORD *)v422 = v445;
                  *((_OWORD *)v422 + 1) = v446;
                }
                goto LABEL_64;
              }
              (*(void (**)(char *, uint64_t))(v290 + 8))(v287, v289);
            }
            v384 = sub_5C154(&qword_322F98);
            memcpy(v287, v288, *(_QWORD *)(*(_QWORD *)(v384 - 8) + 64));
            goto LABEL_124;
          }
          (*(void (**)(char *, uint64_t))(v182 + 8))(v263, v181);
        }
        v285 = sub_5C154(&qword_3217B8);
        memcpy(v263, v264, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
        goto LABEL_105;
      }
      (*(void (**)(char *, uint64_t))(v182 + 8))(v179, v181);
    }
    v261 = sub_5C154(&qword_3217B8);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
    goto LABEL_87;
  }
  if (v165)
  {
LABEL_49:
    v175 = sub_5C154(&qword_3217C0);
    memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    goto LABEL_64;
  }
  *(_QWORD *)v163 = *v164;
  v166 = v164[1];
  *((_QWORD *)v163 + 1) = v166;
  v167 = v10[5];
  v168 = &v163[v167];
  v169 = (char *)v164 + v167;
  v170 = type metadata accessor for LocalizerRequest(0);
  v171 = *(_QWORD *)(v170 - 8);
  v172 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v171 + 48);
  v173 = swift_bridgeObjectRetain(v166);
  if (v172(v169, 1, v170, v173))
  {
    v174 = sub_5C154(&qword_3217B8);
    memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v168, v169, v170);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v168, 0, 1, v170);
  }
  v185 = v10[6];
  v186 = &v163[v185];
  v187 = (char *)v164 + v185;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v172)((char *)v164 + v185, 1, v170))
  {
    v188 = sub_5C154(&qword_3217B8);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v186, v187, v170);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v186, 0, 1, v170);
  }
  v163[v10[7]] = *((_BYTE *)v164 + v10[7]);
  v163[v10[8]] = *((_BYTE *)v164 + v10[8]);
  v189 = v10[9];
  v190 = &v163[v189];
  v191 = (char *)v164 + v189;
  v192 = type metadata accessor for ToolbarPrincipalType(0);
  v193 = *(_QWORD *)(v192 - 8);
  v460 = v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
  {
    v194 = sub_5C154(&qword_322F98);
    memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v190, v191, v192);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
  }
  v195 = v10[10];
  v196 = *(_QWORD *)((char *)v164 + v195);
  *(_QWORD *)&v163[v195] = v196;
  v197 = v10[11];
  v198 = *(_QWORD *)((char *)v164 + v197);
  *(_QWORD *)&v163[v197] = v198;
  v163[v10[12]] = *((_BYTE *)v164 + v10[12]);
  v199 = v10[13];
  v200 = *(_QWORD *)((char *)v164 + v199);
  *(_QWORD *)&v163[v199] = v200;
  v201 = v10[14];
  v202 = &v163[v201];
  v203 = (_QWORD *)((char *)v164 + v201);
  *(_QWORD *)v202 = *v203;
  v204 = v203[1];
  *((_QWORD *)v202 + 1) = v204;
  v205 = v10[15];
  v456 = &v163[v205];
  v206 = (char *)v164 + v205;
  v207 = type metadata accessor for PageData(0);
  v208 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v207 - 8) + 16);
  swift_bridgeObjectRetain(v196);
  swift_bridgeObjectRetain(v198);
  swift_bridgeObjectRetain(v200);
  v209 = swift_bridgeObjectRetain(v204);
  v208(v456, v206, v207, v209);
  v210 = v10[16];
  v211 = *(_QWORD *)((char *)v164 + v210);
  *(_QWORD *)&v163[v210] = v211;
  v212 = v10[17];
  v213 = &v163[v212];
  v214 = (char *)v164 + v212;
  v215 = type metadata accessor for PageMetrics(0);
  v216 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v215 - 8) + 16);
  v217 = swift_bridgeObjectRetain(v211);
  v216(v213, v214, v215, v217);
  v163[v10[18]] = *((_BYTE *)v164 + v10[18]);
  v218 = v10[19];
  v219 = *(_QWORD *)((char *)v164 + v218);
  *(_QWORD *)&v163[v218] = v219;
  v220 = v10[20];
  v221 = *(_QWORD *)((char *)v164 + v220);
  *(_QWORD *)&v163[v220] = v221;
  v163[v10[21]] = *((_BYTE *)v164 + v10[21]);
  v222 = v10[22];
  v223 = &v163[v222];
  v224 = (_QWORD *)((char *)v164 + v222);
  *(_QWORD *)v223 = *v224;
  v225 = v224[1];
  *((_QWORD *)v223 + 1) = v225;
  v226 = v10[23];
  v227 = &v163[v226];
  v228 = (_QWORD *)((char *)v164 + v226);
  v229 = v228[1];
  swift_bridgeObjectRetain(v219);
  swift_retain(v221);
  swift_bridgeObjectRetain(v225);
  if (v229)
  {
    *(_QWORD *)v227 = *v228;
    v230 = v228[1];
    *((_QWORD *)v227 + 1) = v230;
    *((_QWORD *)v227 + 2) = v228[2];
    *((_QWORD *)v227 + 3) = v228[3];
    v231 = v228[4];
    *((_QWORD *)v227 + 4) = v231;
    swift_bridgeObjectRetain(v230);
    v232 = swift_bridgeObjectRetain(v231);
  }
  else
  {
    v232 = *(__n128 *)v228;
    v233 = *((_OWORD *)v228 + 1);
    *((_QWORD *)v227 + 4) = v228[4];
    *(__n128 *)v227 = v232;
    *((_OWORD *)v227 + 1) = v233;
  }
  v5 = v460;
  v4 = v463;
  (*(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v461 + 56))(v163, 0, 1, v10, v232);
LABEL_64:
  v234 = *(int *)(sub_5C154(&qword_3217C8) + 28);
  v235 = *(_QWORD *)((char *)v5 + v234);
  v236 = *(_QWORD *)((char *)v4 + v234);
  *(_QWORD *)((char *)v5 + v234) = v236;
  swift_retain(v236);
  swift_release(v235);
  v237 = *(int *)(v462 + 20);
  v238 = (char *)v5 + v237;
  v239 = (char *)v4 + v237;
  v240 = type metadata accessor for BooksAlertAction(0);
  v241 = *(_QWORD *)(v240 - 8);
  v242 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v241 + 48);
  LODWORD(v235) = v242(v238, 1, v240);
  v243 = v242(v239, 1, v240);
  if (!(_DWORD)v235)
  {
    if (!v243)
    {
      (*(void (**)(char *, char *, uint64_t))(v241 + 24))(v238, v239, v240);
      goto LABEL_70;
    }
    (*(void (**)(char *, uint64_t))(v241 + 8))(v238, v240);
    goto LABEL_69;
  }
  if (v243)
  {
LABEL_69:
    v244 = sub_5C154(&qword_322FA0);
    memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v238, v239, v240);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v241 + 56))(v238, 0, 1, v240);
LABEL_70:
  v245 = *(int *)(sub_5C154(&qword_322F80) + 28);
  v246 = *(_QWORD *)&v238[v245];
  v247 = *(_QWORD *)&v239[v245];
  *(_QWORD *)&v238[v245] = v247;
  swift_retain(v247);
  swift_release(v246);
  return v5;
}

uint64_t initializeWithTake for PageContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  int *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v121)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v122)(_QWORD, _QWORD, _QWORD);
  int *v123;
  int *v124;
  uint64_t v126;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v7 = v6[5];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v126 = *((_QWORD *)v10 - 1);
  v11 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v126 + 48);
  if (v11(v9, 1, v10))
  {
    v12 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v121 = v11;
    v123 = v6;
    *v8 = *v9;
    v13 = v10[5];
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v16 = type metadata accessor for LocalizerRequest(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      v19 = sub_5C154(&qword_3217B8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = v10[6];
    v21 = (char *)v8 + v20;
    v22 = (char *)v9 + v20;
    if (v18((char *)v9 + v20, 1, v16))
    {
      v23 = sub_5C154(&qword_3217B8);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v22, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
    }
    *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
    *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
    v24 = v10[9];
    v25 = (char *)v8 + v24;
    v26 = (char *)v9 + v24;
    v27 = type metadata accessor for ToolbarPrincipalType(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = sub_5C154(&qword_322F98);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v6 = v123;
    *(_QWORD *)((char *)v8 + v10[10]) = *(_QWORD *)((char *)v9 + v10[10]);
    *(_QWORD *)((char *)v8 + v10[11]) = *(_QWORD *)((char *)v9 + v10[11]);
    *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    *(_OWORD *)((char *)v8 + v10[14]) = *(_OWORD *)((char *)v9 + v10[14]);
    v30 = v10[15];
    v31 = (char *)v8 + v30;
    v32 = (char *)v9 + v30;
    v33 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    v34 = v10[17];
    v35 = (char *)v8 + v34;
    v36 = (char *)v9 + v34;
    v37 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
    *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
    *(_QWORD *)((char *)v8 + v10[19]) = *(_QWORD *)((char *)v9 + v10[19]);
    *(_QWORD *)((char *)v8 + v10[20]) = *(_QWORD *)((char *)v9 + v10[20]);
    *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
    *(_OWORD *)((char *)v8 + v10[22]) = *(_OWORD *)((char *)v9 + v10[22]);
    v38 = v10[23];
    v39 = (char *)v8 + v38;
    v40 = (char *)v9 + v38;
    v41 = *((_OWORD *)v40 + 1);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    *((_OWORD *)v39 + 1) = v41;
    *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v126 + 56))(v8, 0, 1, v10);
    v11 = v121;
  }
  v42 = v6[6];
  v43 = (_OWORD *)(a1 + v42);
  v44 = (_OWORD *)(a2 + v42);
  if (v11(a2 + v42, 1, v10))
  {
    v45 = sub_5C154(&qword_3217C0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v122 = v11;
    v124 = v6;
    *v43 = *v44;
    v46 = v10[5];
    v47 = (char *)v43 + v46;
    v48 = (char *)v44 + v46;
    v49 = type metadata accessor for LocalizerRequest(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
    if (v51(v48, 1, v49))
    {
      v52 = sub_5C154(&qword_3217B8);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    v53 = v10[6];
    v54 = (char *)v43 + v53;
    v55 = (char *)v44 + v53;
    if (v51((char *)v44 + v53, 1, v49))
    {
      v56 = sub_5C154(&qword_3217B8);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v54, v55, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v54, 0, 1, v49);
    }
    *((_BYTE *)v43 + v10[7]) = *((_BYTE *)v44 + v10[7]);
    *((_BYTE *)v43 + v10[8]) = *((_BYTE *)v44 + v10[8]);
    v57 = v10[9];
    v58 = (char *)v43 + v57;
    v59 = (char *)v44 + v57;
    v60 = type metadata accessor for ToolbarPrincipalType(0);
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      v62 = sub_5C154(&qword_322F98);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
    }
    v6 = v124;
    *(_QWORD *)((char *)v43 + v10[10]) = *(_QWORD *)((char *)v44 + v10[10]);
    *(_QWORD *)((char *)v43 + v10[11]) = *(_QWORD *)((char *)v44 + v10[11]);
    *((_BYTE *)v43 + v10[12]) = *((_BYTE *)v44 + v10[12]);
    *(_QWORD *)((char *)v43 + v10[13]) = *(_QWORD *)((char *)v44 + v10[13]);
    *(_OWORD *)((char *)v43 + v10[14]) = *(_OWORD *)((char *)v44 + v10[14]);
    v63 = v10[15];
    v64 = (char *)v43 + v63;
    v65 = (char *)v44 + v63;
    v66 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
    *(_QWORD *)((char *)v43 + v10[16]) = *(_QWORD *)((char *)v44 + v10[16]);
    v67 = v10[17];
    v68 = (char *)v43 + v67;
    v69 = (char *)v44 + v67;
    v70 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
    *((_BYTE *)v43 + v10[18]) = *((_BYTE *)v44 + v10[18]);
    *(_QWORD *)((char *)v43 + v10[19]) = *(_QWORD *)((char *)v44 + v10[19]);
    *(_QWORD *)((char *)v43 + v10[20]) = *(_QWORD *)((char *)v44 + v10[20]);
    *((_BYTE *)v43 + v10[21]) = *((_BYTE *)v44 + v10[21]);
    *(_OWORD *)((char *)v43 + v10[22]) = *(_OWORD *)((char *)v44 + v10[22]);
    v71 = v10[23];
    v72 = (char *)v43 + v71;
    v73 = (char *)v44 + v71;
    v74 = *((_OWORD *)v73 + 1);
    *(_OWORD *)v72 = *(_OWORD *)v73;
    *((_OWORD *)v72 + 1) = v74;
    *((_QWORD *)v72 + 4) = *((_QWORD *)v73 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v126 + 56))(v43, 0, 1, v10);
    v11 = v122;
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  v75 = v6[8];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v78 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
  v79 = v6[9];
  v80 = (_OWORD *)(a1 + v79);
  v81 = (_OWORD *)(a2 + v79);
  if (v11(a2 + v79, 1, v10))
  {
    v82 = sub_5C154(&qword_3217C0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    *v80 = *v81;
    v83 = v10[5];
    v84 = (char *)v80 + v83;
    v85 = (char *)v81 + v83;
    v86 = type metadata accessor for LocalizerRequest(0);
    v87 = *(_QWORD *)(v86 - 8);
    v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
    if (v88(v85, 1, v86))
    {
      v89 = sub_5C154(&qword_3217B8);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
    }
    v90 = v10[6];
    v91 = (char *)v80 + v90;
    v92 = (char *)v81 + v90;
    if (v88((char *)v81 + v90, 1, v86))
    {
      v93 = sub_5C154(&qword_3217B8);
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v91, v92, v86);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v91, 0, 1, v86);
    }
    *((_BYTE *)v80 + v10[7]) = *((_BYTE *)v81 + v10[7]);
    *((_BYTE *)v80 + v10[8]) = *((_BYTE *)v81 + v10[8]);
    v94 = v10[9];
    v95 = (char *)v80 + v94;
    v96 = (char *)v81 + v94;
    v97 = type metadata accessor for ToolbarPrincipalType(0);
    v98 = *(_QWORD *)(v97 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
    {
      v99 = sub_5C154(&qword_322F98);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
    }
    *(_QWORD *)((char *)v80 + v10[10]) = *(_QWORD *)((char *)v81 + v10[10]);
    *(_QWORD *)((char *)v80 + v10[11]) = *(_QWORD *)((char *)v81 + v10[11]);
    *((_BYTE *)v80 + v10[12]) = *((_BYTE *)v81 + v10[12]);
    *(_QWORD *)((char *)v80 + v10[13]) = *(_QWORD *)((char *)v81 + v10[13]);
    *(_OWORD *)((char *)v80 + v10[14]) = *(_OWORD *)((char *)v81 + v10[14]);
    v100 = v10[15];
    v101 = (char *)v80 + v100;
    v102 = (char *)v81 + v100;
    v103 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
    *(_QWORD *)((char *)v80 + v10[16]) = *(_QWORD *)((char *)v81 + v10[16]);
    v104 = v10[17];
    v105 = (char *)v80 + v104;
    v106 = (char *)v81 + v104;
    v107 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
    *((_BYTE *)v80 + v10[18]) = *((_BYTE *)v81 + v10[18]);
    *(_QWORD *)((char *)v80 + v10[19]) = *(_QWORD *)((char *)v81 + v10[19]);
    *(_QWORD *)((char *)v80 + v10[20]) = *(_QWORD *)((char *)v81 + v10[20]);
    *((_BYTE *)v80 + v10[21]) = *((_BYTE *)v81 + v10[21]);
    *(_OWORD *)((char *)v80 + v10[22]) = *(_OWORD *)((char *)v81 + v10[22]);
    v108 = v10[23];
    v109 = (char *)v80 + v108;
    v110 = (char *)v81 + v108;
    v111 = *((_OWORD *)v110 + 1);
    *(_OWORD *)v109 = *(_OWORD *)v110;
    *((_OWORD *)v109 + 1) = v111;
    *((_QWORD *)v109 + 4) = *((_QWORD *)v110 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v126 + 56))(v80, 0, 1, v10);
  }
  v112 = sub_5C154(&qword_3217C8);
  *(_QWORD *)(a1 + *(int *)(v112 + 28)) = *(_QWORD *)(a2 + *(int *)(v112 + 28));
  v113 = *(int *)(a3 + 20);
  v114 = (char *)(a1 + v113);
  v115 = (char *)(a2 + v113);
  v116 = type metadata accessor for BooksAlertAction(0);
  v117 = *(_QWORD *)(v116 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    v118 = sub_5C154(&qword_322FA0);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v114, v115, v116);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
  }
  v119 = sub_5C154(&qword_322F80);
  *(_QWORD *)&v114[*(int *)(v119 + 28)] = *(_QWORD *)&v115[*(int *)(v119 + 28)];
  return a1;
}

uint64_t assignWithTake for PageContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  int v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t (*v129)(char *, uint64_t, uint64_t);
  int v130;
  int v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(char *, uint64_t, uint64_t);
  int v167;
  size_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  int v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int (*v223)(char *, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t (*v232)(char *, uint64_t, uint64_t);
  int v233;
  int v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t (*v269)(char *, uint64_t, uint64_t);
  int v270;
  size_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t (*v320)(char *, uint64_t, uint64_t);
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v327;
  uint64_t v328;
  _QWORD *__src;
  void *__srca;
  _QWORD *__srcb;
  int *v332;
  int *v333;
  int *v334;
  int *v335;
  uint64_t (*v336)(char *, uint64_t, int *);
  uint64_t (*v337)(char *, uint64_t, int *);
  uint64_t (*v338)(char *, uint64_t, int *);
  uint64_t (*v339)(char *, uint64_t, int *);
  void *v340;
  _QWORD *v341;
  _QWORD *v342;
  uint64_t v343;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = (int *)type metadata accessor for PageContent.PageInfo(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for Page(0);
  v341 = (_QWORD *)*((_QWORD *)v11 - 1);
  v12 = (uint64_t (*)(char *, uint64_t, int *))v341[6];
  v13 = v12((char *)v9, 1, v11);
  v14 = v12(v10, 1, v11);
  v343 = a3;
  if (v13)
  {
    if (!v14)
    {
      v332 = v7;
      v336 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v15 = v11[5];
      v16 = (char *)v9 + v15;
      v17 = &v10[v15];
      v18 = type metadata accessor for LocalizerRequest(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      if (v20(v17, 1, v18))
      {
        v21 = sub_5C154(&qword_3217B8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v32 = v11[6];
      v33 = (char *)v9 + v32;
      v34 = &v10[v32];
      if (v20(&v10[v32], 1, v18))
      {
        v35 = sub_5C154(&qword_3217B8);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v33, v34, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v33, 0, 1, v18);
      }
      v7 = v332;
      *((_BYTE *)v9 + v11[7]) = v10[v11[7]];
      *((_BYTE *)v9 + v11[8]) = v10[v11[8]];
      v36 = v11[9];
      v37 = (char *)v9 + v36;
      v38 = &v10[v36];
      v39 = type metadata accessor for ToolbarPrincipalType(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = sub_5C154(&qword_322F98);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      *(_QWORD *)((char *)v9 + v11[10]) = *(_QWORD *)&v10[v11[10]];
      *(_QWORD *)((char *)v9 + v11[11]) = *(_QWORD *)&v10[v11[11]];
      *((_BYTE *)v9 + v11[12]) = v10[v11[12]];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)&v10[v11[13]];
      *(_OWORD *)((char *)v9 + v11[14]) = *(_OWORD *)&v10[v11[14]];
      v42 = v11[15];
      v43 = (char *)v9 + v42;
      v44 = &v10[v42];
      v45 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)&v10[v11[16]];
      v46 = v11[17];
      v47 = (char *)v9 + v46;
      v48 = &v10[v46];
      v49 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
      *((_BYTE *)v9 + v11[18]) = v10[v11[18]];
      *(_QWORD *)((char *)v9 + v11[19]) = *(_QWORD *)&v10[v11[19]];
      *(_QWORD *)((char *)v9 + v11[20]) = *(_QWORD *)&v10[v11[20]];
      *((_BYTE *)v9 + v11[21]) = v10[v11[21]];
      *(_OWORD *)((char *)v9 + v11[22]) = *(_OWORD *)&v10[v11[22]];
      v50 = v11[23];
      v51 = (char *)v9 + v50;
      v52 = &v10[v50];
      v53 = *((_OWORD *)v52 + 1);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *((_OWORD *)v51 + 1) = v53;
      *((_QWORD *)v51 + 4) = *((_QWORD *)v52 + 4);
      ((void (*)(char *, _QWORD, uint64_t, int *))v341[7])((char *)v9, 0, 1, v11);
      v12 = (uint64_t (*)(char *, uint64_t, int *))v336;
      goto LABEL_39;
    }
LABEL_7:
    v22 = sub_5C154(&qword_3217C0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_39;
  }
  if (v14)
  {
    sub_6685C((uint64_t)v9, type metadata accessor for Page);
    goto LABEL_7;
  }
  v333 = v7;
  v337 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
  v23 = *((_QWORD *)v10 + 1);
  v24 = v9[1];
  *v9 = *(_QWORD *)v10;
  v9[1] = v23;
  swift_bridgeObjectRelease(v24);
  v25 = v11[5];
  v26 = (char *)v9 + v25;
  v27 = &v10[v25];
  v28 = type metadata accessor for LocalizerRequest(0);
  __src = *(_QWORD **)(v28 - 8);
  v29 = (uint64_t (*)(char *, uint64_t, uint64_t))__src[6];
  v30 = v29(v26, 1, v28);
  v31 = v29(v27, 1, v28);
  if (v30)
  {
    if (!v31)
    {
      ((void (*)(char *, char *, uint64_t))__src[4])(v26, v27, v28);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v26, 0, 1, v28);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v31)
  {
    ((void (*)(char *, uint64_t))__src[1])(v26, v28);
LABEL_21:
    v54 = sub_5C154(&qword_3217B8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_22;
  }
  ((void (*)(char *, char *, uint64_t))__src[5])(v26, v27, v28);
LABEL_22:
  v55 = v11[6];
  v56 = (char *)v9 + v55;
  v57 = &v10[v55];
  v58 = v29((char *)v9 + v55, 1, v28);
  v59 = v29(v57, 1, v28);
  v328 = a2;
  if (v58)
  {
    if (!v59)
    {
      ((void (*)(char *, char *, uint64_t))__src[4])(v56, v57, v28);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v56, 0, 1, v28);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v59)
  {
    ((void (*)(char *, uint64_t))__src[1])(v56, v28);
LABEL_27:
    v60 = sub_5C154(&qword_3217B8);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_28;
  }
  ((void (*)(char *, char *, uint64_t))__src[5])(v56, v57, v28);
LABEL_28:
  *((_BYTE *)v9 + v11[7]) = v10[v11[7]];
  *((_BYTE *)v9 + v11[8]) = v10[v11[8]];
  v61 = v11[9];
  v62 = (char *)v9 + v61;
  v63 = &v10[v61];
  v64 = type metadata accessor for ToolbarPrincipalType(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  v67 = v66(v62, 1, v64);
  __srca = v63;
  v68 = v66(v63, 1, v64);
  if (!v67)
  {
    v12 = (uint64_t (*)(char *, uint64_t, int *))v337;
    a2 = v328;
    if (!v68)
    {
      (*(void (**)(char *, void *, uint64_t))(v65 + 40))(v62, __srca, v64);
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v64);
    goto LABEL_33;
  }
  v12 = (uint64_t (*)(char *, uint64_t, int *))v337;
  a2 = v328;
  if (v68)
  {
LABEL_33:
    v69 = sub_5C154(&qword_322F98);
    memcpy(v62, __srca, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, void *, uint64_t))(v65 + 32))(v62, __srca, v64);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
LABEL_34:
  v70 = v11[10];
  v71 = *(_QWORD *)((char *)v9 + v70);
  *(_QWORD *)((char *)v9 + v70) = *(_QWORD *)&v10[v70];
  swift_bridgeObjectRelease(v71);
  v72 = v11[11];
  v73 = *(_QWORD *)((char *)v9 + v72);
  *(_QWORD *)((char *)v9 + v72) = *(_QWORD *)&v10[v72];
  swift_bridgeObjectRelease(v73);
  *((_BYTE *)v9 + v11[12]) = v10[v11[12]];
  v74 = v11[13];
  v75 = *(_QWORD *)((char *)v9 + v74);
  *(_QWORD *)((char *)v9 + v74) = *(_QWORD *)&v10[v74];
  swift_bridgeObjectRelease(v75);
  v76 = v11[14];
  v77 = (_QWORD *)((char *)v9 + v76);
  v78 = (uint64_t *)&v10[v76];
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v11[15];
  v83 = (char *)v9 + v82;
  v84 = &v10[v82];
  v85 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 40))(v83, v84, v85);
  v86 = v11[16];
  v87 = *(_QWORD *)((char *)v9 + v86);
  *(_QWORD *)((char *)v9 + v86) = *(_QWORD *)&v10[v86];
  swift_bridgeObjectRelease(v87);
  v88 = v11[17];
  v89 = (char *)v9 + v88;
  v90 = &v10[v88];
  v91 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 40))(v89, v90, v91);
  *((_BYTE *)v9 + v11[18]) = v10[v11[18]];
  v92 = v11[19];
  v93 = *(_QWORD *)((char *)v9 + v92);
  *(_QWORD *)((char *)v9 + v92) = *(_QWORD *)&v10[v92];
  swift_bridgeObjectRelease(v93);
  v94 = v11[20];
  v95 = *(_QWORD *)((char *)v9 + v94);
  *(_QWORD *)((char *)v9 + v94) = *(_QWORD *)&v10[v94];
  swift_release(v95);
  *((_BYTE *)v9 + v11[21]) = v10[v11[21]];
  v96 = v11[22];
  v97 = (_QWORD *)((char *)v9 + v96);
  v98 = (uint64_t *)&v10[v96];
  v100 = *v98;
  v99 = v98[1];
  v101 = v97[1];
  *v97 = v100;
  v97[1] = v99;
  swift_bridgeObjectRelease(v101);
  v102 = v11[23];
  v103 = (_QWORD *)((char *)v9 + v102);
  v104 = &v10[v102];
  v105 = v103[1];
  v7 = v333;
  if (v105)
  {
    v106 = *((_QWORD *)v104 + 1);
    if (v106)
    {
      *v103 = *(_QWORD *)v104;
      v103[1] = v106;
      swift_bridgeObjectRelease(v105);
      v103[2] = *((_QWORD *)v104 + 2);
      v107 = *((_QWORD *)v104 + 4);
      v108 = v103[4];
      v103[3] = *((_QWORD *)v104 + 3);
      v103[4] = v107;
      swift_bridgeObjectRelease(v108);
      goto LABEL_39;
    }
    sub_984B0((uint64_t)v103);
  }
  v109 = *((_OWORD *)v104 + 1);
  *(_OWORD *)v103 = *(_OWORD *)v104;
  *((_OWORD *)v103 + 1) = v109;
  v103[4] = *((_QWORD *)v104 + 4);
LABEL_39:
  v110 = v7[6];
  v111 = (_QWORD *)(a1 + v110);
  v112 = (char *)(a2 + v110);
  v113 = v12((char *)(a1 + v110), 1, v11);
  v114 = v12(v112, 1, v11);
  if (v113)
  {
    if (!v114)
    {
      v334 = v7;
      v338 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
      *(_OWORD *)v111 = *(_OWORD *)v112;
      v115 = v11[5];
      v116 = (char *)v111 + v115;
      v117 = &v112[v115];
      v118 = type metadata accessor for LocalizerRequest(0);
      v119 = *(_QWORD *)(v118 - 8);
      v120 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
      if (v120(v117, 1, v118))
      {
        v121 = sub_5C154(&qword_3217B8);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v116, v117, v118);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
      }
      v132 = v11[6];
      v133 = (char *)v111 + v132;
      v134 = &v112[v132];
      if (v120(&v112[v132], 1, v118))
      {
        v135 = sub_5C154(&qword_3217B8);
        memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v133, v134, v118);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v133, 0, 1, v118);
      }
      v7 = v334;
      *((_BYTE *)v111 + v11[7]) = v112[v11[7]];
      *((_BYTE *)v111 + v11[8]) = v112[v11[8]];
      v136 = v11[9];
      v137 = (char *)v111 + v136;
      v138 = &v112[v136];
      v139 = type metadata accessor for ToolbarPrincipalType(0);
      v140 = *(_QWORD *)(v139 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
      {
        v141 = sub_5C154(&qword_322F98);
        memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v137, v138, v139);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
      }
      *(_QWORD *)((char *)v111 + v11[10]) = *(_QWORD *)&v112[v11[10]];
      *(_QWORD *)((char *)v111 + v11[11]) = *(_QWORD *)&v112[v11[11]];
      *((_BYTE *)v111 + v11[12]) = v112[v11[12]];
      *(_QWORD *)((char *)v111 + v11[13]) = *(_QWORD *)&v112[v11[13]];
      *(_OWORD *)((char *)v111 + v11[14]) = *(_OWORD *)&v112[v11[14]];
      v142 = v11[15];
      v143 = (char *)v111 + v142;
      v144 = &v112[v142];
      v145 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      *(_QWORD *)((char *)v111 + v11[16]) = *(_QWORD *)&v112[v11[16]];
      v146 = v11[17];
      v147 = (char *)v111 + v146;
      v148 = &v112[v146];
      v149 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
      *((_BYTE *)v111 + v11[18]) = v112[v11[18]];
      *(_QWORD *)((char *)v111 + v11[19]) = *(_QWORD *)&v112[v11[19]];
      *(_QWORD *)((char *)v111 + v11[20]) = *(_QWORD *)&v112[v11[20]];
      *((_BYTE *)v111 + v11[21]) = v112[v11[21]];
      *(_OWORD *)((char *)v111 + v11[22]) = *(_OWORD *)&v112[v11[22]];
      v150 = v11[23];
      v151 = (char *)v111 + v150;
      v152 = &v112[v150];
      v153 = *((_OWORD *)v152 + 1);
      *(_OWORD *)v151 = *(_OWORD *)v152;
      *((_OWORD *)v151 + 1) = v153;
      *((_QWORD *)v151 + 4) = *((_QWORD *)v152 + 4);
      ((void (*)(_QWORD *, _QWORD, uint64_t, int *))v341[7])(v111, 0, 1, v11);
      v12 = (uint64_t (*)(char *, uint64_t, int *))v338;
      goto LABEL_84;
    }
LABEL_45:
    v122 = sub_5C154(&qword_3217C0);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    goto LABEL_84;
  }
  if (v114)
  {
    sub_6685C((uint64_t)v111, type metadata accessor for Page);
    goto LABEL_45;
  }
  v335 = v7;
  v339 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
  v123 = *((_QWORD *)v112 + 1);
  v124 = v111[1];
  *v111 = *(_QWORD *)v112;
  v111[1] = v123;
  swift_bridgeObjectRelease(v124);
  v125 = v11[5];
  v126 = (char *)v111 + v125;
  v127 = &v112[v125];
  v128 = type metadata accessor for LocalizerRequest(0);
  __srcb = *(_QWORD **)(v128 - 8);
  v129 = (uint64_t (*)(char *, uint64_t, uint64_t))__srcb[6];
  v130 = v129(v126, 1, v128);
  v131 = v129(v127, 1, v128);
  if (v130)
  {
    if (!v131)
    {
      ((void (*)(char *, char *, uint64_t))__srcb[4])(v126, v127, v128);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcb[7])(v126, 0, 1, v128);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v131)
  {
    ((void (*)(char *, uint64_t))__srcb[1])(v126, v128);
LABEL_59:
    v154 = sub_5C154(&qword_3217B8);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    goto LABEL_60;
  }
  ((void (*)(char *, char *, uint64_t))__srcb[5])(v126, v127, v128);
LABEL_60:
  v155 = v11[6];
  v156 = (char *)v111 + v155;
  v157 = &v112[v155];
  v158 = v129((char *)v111 + v155, 1, v128);
  v159 = v129(v157, 1, v128);
  if (v158)
  {
    if (!v159)
    {
      ((void (*)(char *, char *, uint64_t))__srcb[4])(v156, v157, v128);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcb[7])(v156, 0, 1, v128);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v159)
  {
    ((void (*)(char *, uint64_t))__srcb[1])(v156, v128);
LABEL_65:
    v160 = sub_5C154(&qword_3217B8);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_66;
  }
  ((void (*)(char *, char *, uint64_t))__srcb[5])(v156, v157, v128);
LABEL_66:
  *((_BYTE *)v111 + v11[7]) = v112[v11[7]];
  *((_BYTE *)v111 + v11[8]) = v112[v11[8]];
  v161 = v11[9];
  v162 = (char *)v111 + v161;
  v163 = &v112[v161];
  v164 = type metadata accessor for ToolbarPrincipalType(0);
  v165 = *(_QWORD *)(v164 - 8);
  v166 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v165 + 48);
  v327 = v162;
  LODWORD(v162) = v166(v162, 1, v164);
  v167 = v166(v163, 1, v164);
  if ((_DWORD)v162)
  {
    v12 = (uint64_t (*)(char *, uint64_t, int *))v339;
    if (!v167)
    {
      (*(void (**)(void *, char *, uint64_t))(v165 + 32))(v327, v163, v164);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v327, 0, 1, v164);
      goto LABEL_79;
    }
    v168 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v169 = v327;
  }
  else
  {
    v12 = (uint64_t (*)(char *, uint64_t, int *))v339;
    if (!v167)
    {
      (*(void (**)(void *, char *, uint64_t))(v165 + 40))(v327, v163, v164);
      goto LABEL_79;
    }
    (*(void (**)(void *, uint64_t))(v165 + 8))(v327, v164);
    v168 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v169 = v327;
  }
  memcpy(v169, v163, v168);
LABEL_79:
  v170 = v11[10];
  v171 = *(_QWORD *)((char *)v111 + v170);
  *(_QWORD *)((char *)v111 + v170) = *(_QWORD *)&v112[v170];
  swift_bridgeObjectRelease(v171);
  v172 = v11[11];
  v173 = *(_QWORD *)((char *)v111 + v172);
  *(_QWORD *)((char *)v111 + v172) = *(_QWORD *)&v112[v172];
  swift_bridgeObjectRelease(v173);
  *((_BYTE *)v111 + v11[12]) = v112[v11[12]];
  v174 = v11[13];
  v175 = *(_QWORD *)((char *)v111 + v174);
  *(_QWORD *)((char *)v111 + v174) = *(_QWORD *)&v112[v174];
  swift_bridgeObjectRelease(v175);
  v176 = v11[14];
  v177 = (_QWORD *)((char *)v111 + v176);
  v178 = (uint64_t *)&v112[v176];
  v180 = *v178;
  v179 = v178[1];
  v181 = v177[1];
  *v177 = v180;
  v177[1] = v179;
  swift_bridgeObjectRelease(v181);
  v182 = v11[15];
  v183 = (char *)v111 + v182;
  v184 = &v112[v182];
  v185 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 40))(v183, v184, v185);
  v186 = v11[16];
  v187 = *(_QWORD *)((char *)v111 + v186);
  *(_QWORD *)((char *)v111 + v186) = *(_QWORD *)&v112[v186];
  swift_bridgeObjectRelease(v187);
  v188 = v11[17];
  v189 = (char *)v111 + v188;
  v190 = &v112[v188];
  v191 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 40))(v189, v190, v191);
  *((_BYTE *)v111 + v11[18]) = v112[v11[18]];
  v192 = v11[19];
  v193 = *(_QWORD *)((char *)v111 + v192);
  *(_QWORD *)((char *)v111 + v192) = *(_QWORD *)&v112[v192];
  swift_bridgeObjectRelease(v193);
  v194 = v11[20];
  v195 = *(_QWORD *)((char *)v111 + v194);
  *(_QWORD *)((char *)v111 + v194) = *(_QWORD *)&v112[v194];
  swift_release(v195);
  *((_BYTE *)v111 + v11[21]) = v112[v11[21]];
  v196 = v11[22];
  v197 = (_QWORD *)((char *)v111 + v196);
  v198 = (uint64_t *)&v112[v196];
  v200 = *v198;
  v199 = v198[1];
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  v202 = v11[23];
  v203 = (_QWORD *)((char *)v111 + v202);
  v204 = &v112[v202];
  v205 = v203[1];
  v7 = v335;
  if (v205)
  {
    v206 = *((_QWORD *)v204 + 1);
    if (v206)
    {
      *v203 = *(_QWORD *)v204;
      v203[1] = v206;
      swift_bridgeObjectRelease(v205);
      v203[2] = *((_QWORD *)v204 + 2);
      v207 = *((_QWORD *)v204 + 4);
      v208 = v203[4];
      v203[3] = *((_QWORD *)v204 + 3);
      v203[4] = v207;
      swift_bridgeObjectRelease(v208);
      goto LABEL_84;
    }
    sub_984B0((uint64_t)v203);
  }
  v209 = *((_OWORD *)v204 + 1);
  *(_OWORD *)v203 = *(_OWORD *)v204;
  *((_OWORD *)v203 + 1) = v209;
  v203[4] = *((_QWORD *)v204 + 4);
LABEL_84:
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v210 = v7[8];
  v211 = a1 + v210;
  v212 = a2 + v210;
  v213 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v213 - 8) + 40))(v211, v212, v213);
  v214 = v7[9];
  v215 = (_QWORD *)(a1 + v214);
  v216 = (char *)(a2 + v214);
  LODWORD(v211) = v12((char *)(a1 + v214), 1, v11);
  v217 = v12(v216, 1, v11);
  if ((_DWORD)v211)
  {
    if (!v217)
    {
      *(_OWORD *)v215 = *(_OWORD *)v216;
      v218 = v11[5];
      v219 = (char *)v215 + v218;
      v220 = &v216[v218];
      v221 = type metadata accessor for LocalizerRequest(0);
      v222 = *(_QWORD *)(v221 - 8);
      v223 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v222 + 48);
      if (v223(v220, 1, v221))
      {
        v224 = sub_5C154(&qword_3217B8);
        memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v222 + 32))(v219, v220, v221);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v219, 0, 1, v221);
      }
      v235 = v11[6];
      v236 = (char *)v215 + v235;
      v237 = &v216[v235];
      if (v223(&v216[v235], 1, v221))
      {
        v238 = sub_5C154(&qword_3217B8);
        memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v222 + 32))(v236, v237, v221);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v236, 0, 1, v221);
      }
      *((_BYTE *)v215 + v11[7]) = v216[v11[7]];
      *((_BYTE *)v215 + v11[8]) = v216[v11[8]];
      v239 = v11[9];
      v240 = (char *)v215 + v239;
      v241 = &v216[v239];
      v242 = type metadata accessor for ToolbarPrincipalType(0);
      v243 = *(_QWORD *)(v242 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48))(v241, 1, v242))
      {
        v244 = sub_5C154(&qword_322F98);
        memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v243 + 32))(v240, v241, v242);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v240, 0, 1, v242);
      }
      *(_QWORD *)((char *)v215 + v11[10]) = *(_QWORD *)&v216[v11[10]];
      *(_QWORD *)((char *)v215 + v11[11]) = *(_QWORD *)&v216[v11[11]];
      *((_BYTE *)v215 + v11[12]) = v216[v11[12]];
      *(_QWORD *)((char *)v215 + v11[13]) = *(_QWORD *)&v216[v11[13]];
      *(_OWORD *)((char *)v215 + v11[14]) = *(_OWORD *)&v216[v11[14]];
      v245 = v11[15];
      v246 = (char *)v215 + v245;
      v247 = &v216[v245];
      v248 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 32))(v246, v247, v248);
      *(_QWORD *)((char *)v215 + v11[16]) = *(_QWORD *)&v216[v11[16]];
      v249 = v11[17];
      v250 = (char *)v215 + v249;
      v251 = &v216[v249];
      v252 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 32))(v250, v251, v252);
      *((_BYTE *)v215 + v11[18]) = v216[v11[18]];
      *(_QWORD *)((char *)v215 + v11[19]) = *(_QWORD *)&v216[v11[19]];
      *(_QWORD *)((char *)v215 + v11[20]) = *(_QWORD *)&v216[v11[20]];
      *((_BYTE *)v215 + v11[21]) = v216[v11[21]];
      *(_OWORD *)((char *)v215 + v11[22]) = *(_OWORD *)&v216[v11[22]];
      v253 = v11[23];
      v254 = (char *)v215 + v253;
      v255 = &v216[v253];
      v256 = *((_OWORD *)v255 + 1);
      *(_OWORD *)v254 = *(_OWORD *)v255;
      *((_OWORD *)v254 + 1) = v256;
      *((_QWORD *)v254 + 4) = *((_QWORD *)v255 + 4);
      ((void (*)(_QWORD *, _QWORD, uint64_t, int *))v341[7])(v215, 0, 1, v11);
      goto LABEL_126;
    }
LABEL_90:
    v225 = sub_5C154(&qword_3217C0);
    memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
    goto LABEL_126;
  }
  if (v217)
  {
    sub_6685C((uint64_t)v215, type metadata accessor for Page);
    goto LABEL_90;
  }
  v226 = *((_QWORD *)v216 + 1);
  v227 = v215[1];
  *v215 = *(_QWORD *)v216;
  v215[1] = v226;
  swift_bridgeObjectRelease(v227);
  v228 = v11[5];
  v229 = (char *)v215 + v228;
  v230 = &v216[v228];
  v231 = type metadata accessor for LocalizerRequest(0);
  v342 = *(_QWORD **)(v231 - 8);
  v232 = (uint64_t (*)(char *, uint64_t, uint64_t))v342[6];
  v233 = v232(v229, 1, v231);
  v234 = v232(v230, 1, v231);
  if (v233)
  {
    if (!v234)
    {
      ((void (*)(char *, char *, uint64_t))v342[4])(v229, v230, v231);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v342[7])(v229, 0, 1, v231);
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  if (v234)
  {
    ((void (*)(char *, uint64_t))v342[1])(v229, v231);
LABEL_104:
    v257 = sub_5C154(&qword_3217B8);
    memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    goto LABEL_105;
  }
  ((void (*)(char *, char *, uint64_t))v342[5])(v229, v230, v231);
LABEL_105:
  v258 = v11[6];
  v259 = (char *)v215 + v258;
  v260 = &v216[v258];
  v261 = v232((char *)v215 + v258, 1, v231);
  v262 = v232(v260, 1, v231);
  if (v261)
  {
    if (!v262)
    {
      ((void (*)(char *, char *, uint64_t))v342[4])(v259, v260, v231);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v342[7])(v259, 0, 1, v231);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v262)
  {
    ((void (*)(char *, uint64_t))v342[1])(v259, v231);
LABEL_110:
    v263 = sub_5C154(&qword_3217B8);
    memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v263 - 8) + 64));
    goto LABEL_111;
  }
  ((void (*)(char *, char *, uint64_t))v342[5])(v259, v260, v231);
LABEL_111:
  *((_BYTE *)v215 + v11[7]) = v216[v11[7]];
  *((_BYTE *)v215 + v11[8]) = v216[v11[8]];
  v264 = v11[9];
  v265 = (char *)v215 + v264;
  v266 = &v216[v264];
  v267 = type metadata accessor for ToolbarPrincipalType(0);
  v268 = *(_QWORD *)(v267 - 8);
  v269 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v268 + 48);
  v340 = v265;
  LODWORD(v265) = v269(v265, 1, v267);
  v270 = v269(v266, 1, v267);
  if ((_DWORD)v265)
  {
    if (!v270)
    {
      (*(void (**)(void *, char *, uint64_t))(v268 + 32))(v340, v266, v267);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v340, 0, 1, v267);
      goto LABEL_121;
    }
    v271 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v272 = v340;
  }
  else
  {
    if (!v270)
    {
      (*(void (**)(void *, char *, uint64_t))(v268 + 40))(v340, v266, v267);
      goto LABEL_121;
    }
    (*(void (**)(void *, uint64_t))(v268 + 8))(v340, v267);
    v271 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
    v272 = v340;
  }
  memcpy(v272, v266, v271);
LABEL_121:
  v273 = v11[10];
  v274 = *(_QWORD *)((char *)v215 + v273);
  *(_QWORD *)((char *)v215 + v273) = *(_QWORD *)&v216[v273];
  swift_bridgeObjectRelease(v274);
  v275 = v11[11];
  v276 = *(_QWORD *)((char *)v215 + v275);
  *(_QWORD *)((char *)v215 + v275) = *(_QWORD *)&v216[v275];
  swift_bridgeObjectRelease(v276);
  *((_BYTE *)v215 + v11[12]) = v216[v11[12]];
  v277 = v11[13];
  v278 = *(_QWORD *)((char *)v215 + v277);
  *(_QWORD *)((char *)v215 + v277) = *(_QWORD *)&v216[v277];
  swift_bridgeObjectRelease(v278);
  v279 = v11[14];
  v280 = (_QWORD *)((char *)v215 + v279);
  v281 = (uint64_t *)&v216[v279];
  v283 = *v281;
  v282 = v281[1];
  v284 = v280[1];
  *v280 = v283;
  v280[1] = v282;
  swift_bridgeObjectRelease(v284);
  v285 = v11[15];
  v286 = (char *)v215 + v285;
  v287 = &v216[v285];
  v288 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v288 - 8) + 40))(v286, v287, v288);
  v289 = v11[16];
  v290 = *(_QWORD *)((char *)v215 + v289);
  *(_QWORD *)((char *)v215 + v289) = *(_QWORD *)&v216[v289];
  swift_bridgeObjectRelease(v290);
  v291 = v11[17];
  v292 = (char *)v215 + v291;
  v293 = &v216[v291];
  v294 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v294 - 8) + 40))(v292, v293, v294);
  *((_BYTE *)v215 + v11[18]) = v216[v11[18]];
  v295 = v11[19];
  v296 = *(_QWORD *)((char *)v215 + v295);
  *(_QWORD *)((char *)v215 + v295) = *(_QWORD *)&v216[v295];
  swift_bridgeObjectRelease(v296);
  v297 = v11[20];
  v298 = *(_QWORD *)((char *)v215 + v297);
  *(_QWORD *)((char *)v215 + v297) = *(_QWORD *)&v216[v297];
  swift_release(v298);
  *((_BYTE *)v215 + v11[21]) = v216[v11[21]];
  v299 = v11[22];
  v300 = (_QWORD *)((char *)v215 + v299);
  v301 = (uint64_t *)&v216[v299];
  v303 = *v301;
  v302 = v301[1];
  v304 = v300[1];
  *v300 = v303;
  v300[1] = v302;
  swift_bridgeObjectRelease(v304);
  v305 = v11[23];
  v306 = (_QWORD *)((char *)v215 + v305);
  v307 = &v216[v305];
  v308 = *(_QWORD *)((char *)v215 + v305 + 8);
  if (v308)
  {
    v309 = *((_QWORD *)v307 + 1);
    if (v309)
    {
      *v306 = *(_QWORD *)v307;
      v306[1] = v309;
      swift_bridgeObjectRelease(v308);
      v306[2] = *((_QWORD *)v307 + 2);
      v310 = *((_QWORD *)v307 + 4);
      v311 = v306[4];
      v306[3] = *((_QWORD *)v307 + 3);
      v306[4] = v310;
      swift_bridgeObjectRelease(v311);
      goto LABEL_126;
    }
    sub_984B0((uint64_t)v306);
  }
  v312 = *((_OWORD *)v307 + 1);
  *(_OWORD *)v306 = *(_OWORD *)v307;
  *((_OWORD *)v306 + 1) = v312;
  v306[4] = *((_QWORD *)v307 + 4);
LABEL_126:
  v313 = *(int *)(sub_5C154(&qword_3217C8) + 28);
  v314 = *(_QWORD *)(a1 + v313);
  *(_QWORD *)(a1 + v313) = *(_QWORD *)(a2 + v313);
  swift_release(v314);
  v315 = *(int *)(v343 + 20);
  v316 = (char *)(a1 + v315);
  v317 = (char *)(a2 + v315);
  v318 = type metadata accessor for BooksAlertAction(0);
  v319 = *(_QWORD *)(v318 - 8);
  v320 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v319 + 48);
  v321 = v320(v316, 1, v318);
  v322 = v320(v317, 1, v318);
  if (!v321)
  {
    if (!v322)
    {
      (*(void (**)(char *, char *, uint64_t))(v319 + 40))(v316, v317, v318);
      goto LABEL_132;
    }
    (*(void (**)(char *, uint64_t))(v319 + 8))(v316, v318);
    goto LABEL_131;
  }
  if (v322)
  {
LABEL_131:
    v323 = sub_5C154(&qword_322FA0);
    memcpy(v316, v317, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
    goto LABEL_132;
  }
  (*(void (**)(char *, char *, uint64_t))(v319 + 32))(v316, v317, v318);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v319 + 56))(v316, 0, 1, v318);
LABEL_132:
  v324 = *(int *)(sub_5C154(&qword_322F80) + 28);
  v325 = *(_QWORD *)&v316[v324];
  *(_QWORD *)&v316[v324] = *(_QWORD *)&v317[v324];
  swift_release(v325);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_FF0C8);
}

uint64_t sub_FF0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5C154(&qword_3217C8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5C154(&qword_322F80);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PageContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_FF150);
}

uint64_t sub_FF150(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5C154(&qword_3217C8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5C154(&qword_322F80);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_FF1D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_8C25C(319, &qword_324188, type metadata accessor for PageContent.PageInfo, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8C25C(319, (unint64_t *)&unk_324190, type metadata accessor for PageAlert, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PageContent.ContentType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t, __n128);
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t, __n128);
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  char *v77;
  char *v78;
  uint64_t v79;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v25);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v26 = *a2;
      swift_errorRetain(v26);
      *a1 = v26;
      v27 = a1;
      v28 = a3;
      v29 = 1;
LABEL_20:
      swift_storeEnumTagMultiPayload(v27, v28, v29);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v9 = *a2;
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_retain(v9);
      swift_retain(v10);
      v11 = *(int *)(sub_5C154(&qword_323090) + 32);
      v12 = (uint64_t *)((char *)a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = *(uint64_t *)((char *)a2 + v11 + 8);
      *v12 = *(uint64_t *)((char *)a2 + v11);
      v12[1] = v14;
      v15 = (int *)type metadata accessor for Page(0);
      v16 = v15[5];
      v17 = (char *)v12 + v16;
      v18 = &v13[v16];
      v19 = type metadata accessor for LocalizerRequest(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = v14;
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
      v23 = swift_bridgeObjectRetain(v21);
      if (v22(v18, 1, v19, v23))
      {
        v24 = sub_5C154(&qword_3217B8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v30 = v15[6];
      v31 = (char *)v12 + v30;
      v32 = &v13[v30];
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v22)(&v13[v30], 1, v19))
      {
        v33 = sub_5C154(&qword_3217B8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v31, v32, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v31, 0, 1, v19);
      }
      *((_BYTE *)v12 + v15[7]) = v13[v15[7]];
      *((_BYTE *)v12 + v15[8]) = v13[v15[8]];
      v34 = v15[9];
      v35 = (char *)v12 + v34;
      v36 = &v13[v34];
      v37 = type metadata accessor for ToolbarPrincipalType(0);
      v38 = *(_QWORD *)(v37 - 8);
      v79 = a3;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        v39 = sub_5C154(&qword_322F98);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      v40 = v15[10];
      v41 = *(_QWORD *)&v13[v40];
      *(_QWORD *)((char *)v12 + v40) = v41;
      v42 = v15[11];
      v43 = *(_QWORD *)&v13[v42];
      *(_QWORD *)((char *)v12 + v42) = v43;
      *((_BYTE *)v12 + v15[12]) = v13[v15[12]];
      v44 = v15[13];
      v45 = *(_QWORD *)&v13[v44];
      *(_QWORD *)((char *)v12 + v44) = v45;
      v46 = v15[14];
      v47 = (_QWORD *)((char *)v12 + v46);
      v48 = &v13[v46];
      v49 = *((_QWORD *)v48 + 1);
      *v47 = *(_QWORD *)v48;
      v47[1] = v49;
      v50 = v15[15];
      v77 = &v13[v50];
      v78 = (char *)v12 + v50;
      v51 = type metadata accessor for PageData(0);
      v52 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v51 - 8) + 16);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v45);
      v53 = swift_bridgeObjectRetain(v49);
      v52(v78, v77, v51, v53);
      v54 = v15[16];
      v55 = *(_QWORD *)&v13[v54];
      *(_QWORD *)((char *)v12 + v54) = v55;
      v56 = v15[17];
      v57 = (char *)v12 + v56;
      v58 = &v13[v56];
      v59 = type metadata accessor for PageMetrics(0);
      v60 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v59 - 8) + 16);
      v61 = swift_bridgeObjectRetain(v55);
      v60(v57, v58, v59, v61);
      *((_BYTE *)v12 + v15[18]) = v13[v15[18]];
      v62 = v15[19];
      v63 = *(_QWORD *)&v13[v62];
      *(_QWORD *)((char *)v12 + v62) = v63;
      v64 = v15[20];
      v65 = *(_QWORD *)&v13[v64];
      *(_QWORD *)((char *)v12 + v64) = v65;
      *((_BYTE *)v12 + v15[21]) = v13[v15[21]];
      v66 = v15[22];
      v67 = (_QWORD *)((char *)v12 + v66);
      v68 = &v13[v66];
      v69 = *((_QWORD *)v68 + 1);
      *v67 = *(_QWORD *)v68;
      v67[1] = v69;
      v70 = v15[23];
      v71 = (char *)v12 + v70;
      v72 = &v13[v70];
      v73 = *(_QWORD *)&v13[v70 + 8];
      swift_bridgeObjectRetain(v63);
      swift_retain(v65);
      swift_bridgeObjectRetain(v69);
      if (v73)
      {
        *(_QWORD *)v71 = *(_QWORD *)v72;
        *((_QWORD *)v71 + 1) = v73;
        *((_OWORD *)v71 + 1) = *((_OWORD *)v72 + 1);
        v74 = *((_QWORD *)v72 + 4);
        *((_QWORD *)v71 + 4) = v74;
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v74);
      }
      else
      {
        v75 = *((_OWORD *)v72 + 1);
        *(_OWORD *)v71 = *(_OWORD *)v72;
        *((_OWORD *)v71 + 1) = v75;
        *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
      }
      v28 = v79;
      v27 = a1;
      v29 = 0;
      goto LABEL_20;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void destroy for PageContent.ContentType(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 1)
  {
    swift_errorRelease(*a1);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_release(*a1);
    swift_release(a1[1]);
    v4 = (char *)a1 + *(int *)(sub_5C154(&qword_323090) + 32);
    swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
    v5 = (int *)type metadata accessor for Page(0);
    v6 = &v4[v5[5]];
    v7 = type metadata accessor for LocalizerRequest(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v10 = &v4[v5[6]];
    if (!v9(v10, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v11 = &v4[v5[9]];
    v12 = type metadata accessor for ToolbarPrincipalType(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[14] + 8]);
    v14 = &v4[v5[15]];
    v15 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[16]]);
    v16 = &v4[v5[17]];
    v17 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[19]]);
    swift_release(*(_QWORD *)&v4[v5[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[22] + 8]);
    v18 = &v4[v5[23]];
    v19 = *((_QWORD *)v18 + 1);
    if (v19)
    {
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(*((_QWORD *)v18 + 4));
    }
  }
}

uint64_t *initializeWithCopy for PageContent.ContentType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t, __n128);
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  char *v74;
  uint64_t v75;
  uint64_t *v76;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v22 = *a2;
    swift_errorRetain(v22);
    *a1 = v22;
    v23 = a1;
    v24 = a3;
    v25 = 1;
LABEL_18:
    swift_storeEnumTagMultiPayload(v23, v24, v25);
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v75 = a3;
    v7 = *a2;
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain(v7);
    swift_retain(v8);
    v9 = *(int *)(sub_5C154(&qword_323090) + 32);
    v76 = a1;
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = *(uint64_t *)((char *)a2 + v9 + 8);
    *v10 = *(uint64_t *)((char *)a2 + v9);
    v10[1] = v12;
    v13 = (int *)type metadata accessor for Page(0);
    v14 = v13[5];
    v15 = (char *)v10 + v14;
    v16 = &v11[v14];
    v17 = type metadata accessor for LocalizerRequest(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = swift_bridgeObjectRetain(v12);
    if (v19(v16, 1, v17, v20))
    {
      v21 = sub_5C154(&qword_3217B8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v26 = v13[6];
    v27 = (char *)v10 + v26;
    v28 = &v11[v26];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)(&v11[v26], 1, v17))
    {
      v29 = sub_5C154(&qword_3217B8);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v27, v28, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
    }
    *((_BYTE *)v10 + v13[7]) = v11[v13[7]];
    *((_BYTE *)v10 + v13[8]) = v11[v13[8]];
    v30 = v13[9];
    v31 = (char *)v10 + v30;
    v32 = &v11[v30];
    v33 = type metadata accessor for ToolbarPrincipalType(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = sub_5C154(&qword_322F98);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v36 = v13[10];
    v37 = *(_QWORD *)&v11[v36];
    *(_QWORD *)((char *)v10 + v36) = v37;
    v38 = v13[11];
    v39 = *(_QWORD *)&v11[v38];
    *(_QWORD *)((char *)v10 + v38) = v39;
    *((_BYTE *)v10 + v13[12]) = v11[v13[12]];
    v40 = v13[13];
    v41 = *(_QWORD *)&v11[v40];
    *(_QWORD *)((char *)v10 + v40) = v41;
    v42 = v13[14];
    v43 = (_QWORD *)((char *)v10 + v42);
    v44 = &v11[v42];
    v45 = *((_QWORD *)v44 + 1);
    *v43 = *(_QWORD *)v44;
    v43[1] = v45;
    v46 = v13[15];
    v74 = (char *)v10 + v46;
    v47 = &v11[v46];
    v48 = type metadata accessor for PageData(0);
    v49 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v48 - 8) + 16);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v41);
    v50 = swift_bridgeObjectRetain(v45);
    v49(v74, v47, v48, v50);
    v51 = v13[16];
    v52 = *(_QWORD *)&v11[v51];
    *(_QWORD *)((char *)v10 + v51) = v52;
    v53 = v13[17];
    v54 = (char *)v10 + v53;
    v55 = &v11[v53];
    v56 = type metadata accessor for PageMetrics(0);
    v57 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v56 - 8) + 16);
    v58 = swift_bridgeObjectRetain(v52);
    v57(v54, v55, v56, v58);
    *((_BYTE *)v10 + v13[18]) = v11[v13[18]];
    v59 = v13[19];
    v60 = *(_QWORD *)&v11[v59];
    *(_QWORD *)((char *)v10 + v59) = v60;
    v61 = v13[20];
    v62 = *(_QWORD *)&v11[v61];
    *(_QWORD *)((char *)v10 + v61) = v62;
    *((_BYTE *)v10 + v13[21]) = v11[v13[21]];
    v63 = v13[22];
    v64 = (_QWORD *)((char *)v10 + v63);
    v65 = &v11[v63];
    v66 = *((_QWORD *)v65 + 1);
    *v64 = *(_QWORD *)v65;
    v64[1] = v66;
    v67 = v13[23];
    v68 = (char *)v10 + v67;
    v69 = &v11[v67];
    v70 = *((_QWORD *)v69 + 1);
    swift_bridgeObjectRetain(v60);
    swift_retain(v62);
    swift_bridgeObjectRetain(v66);
    if (v70)
    {
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *((_QWORD *)v68 + 1) = v70;
      *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
      v71 = *((_QWORD *)v69 + 4);
      *((_QWORD *)v68 + 4) = v71;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v71);
    }
    else
    {
      v72 = *((_OWORD *)v69 + 1);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *((_OWORD *)v68 + 1) = v72;
      *((_QWORD *)v68 + 4) = *((_QWORD *)v69 + 4);
    }
    v24 = v75;
    a1 = v76;
    v23 = v76;
    v25 = 0;
    goto LABEL_18;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for PageContent.ContentType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  char *v75;
  char *v76;
  uint64_t v77;

  if (a1 != a2)
  {
    sub_6685C((uint64_t)a1, type metadata accessor for PageContent.ContentType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v22 = *a2;
      swift_errorRetain(v22);
      *a1 = v22;
      v23 = a1;
      v24 = a3;
      v25 = 1;
LABEL_19:
      swift_storeEnumTagMultiPayload(v23, v24, v25);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v77 = a3;
      v7 = *a2;
      *a1 = *a2;
      v8 = a2[1];
      a1[1] = v8;
      swift_retain(v7);
      swift_retain(v8);
      v9 = *(int *)(sub_5C154(&qword_323090) + 32);
      v10 = (uint64_t *)((char *)a1 + v9);
      v11 = (char *)a2 + v9;
      *v10 = *(uint64_t *)((char *)a2 + v9);
      v12 = *(uint64_t *)((char *)a2 + v9 + 8);
      v10[1] = v12;
      v13 = (int *)type metadata accessor for Page(0);
      v14 = v13[5];
      v15 = (char *)v10 + v14;
      v16 = &v11[v14];
      v17 = type metadata accessor for LocalizerRequest(0);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
      v20 = swift_bridgeObjectRetain(v12);
      if (v19(v16, 1, v17, v20))
      {
        v21 = sub_5C154(&qword_3217B8);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v26 = v13[6];
      v27 = (char *)v10 + v26;
      v28 = &v11[v26];
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)(&v11[v26], 1, v17))
      {
        v29 = sub_5C154(&qword_3217B8);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v27, v28, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
      }
      *((_BYTE *)v10 + v13[7]) = v11[v13[7]];
      *((_BYTE *)v10 + v13[8]) = v11[v13[8]];
      v30 = v13[9];
      v31 = (char *)v10 + v30;
      v32 = &v11[v30];
      v33 = type metadata accessor for ToolbarPrincipalType(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = sub_5C154(&qword_322F98);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v36 = v13[10];
      v37 = *(_QWORD *)&v11[v36];
      *(_QWORD *)((char *)v10 + v36) = v37;
      v38 = v13[11];
      v39 = *(_QWORD *)&v11[v38];
      *(_QWORD *)((char *)v10 + v38) = v39;
      *((_BYTE *)v10 + v13[12]) = v11[v13[12]];
      v40 = v13[13];
      v41 = *(_QWORD *)&v11[v40];
      *(_QWORD *)((char *)v10 + v40) = v41;
      v42 = v13[14];
      v43 = (_QWORD *)((char *)v10 + v42);
      v44 = &v11[v42];
      *v43 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v43[1] = v45;
      v46 = v13[15];
      v75 = &v11[v46];
      v76 = (char *)v10 + v46;
      v47 = type metadata accessor for PageData(0);
      v48 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v41);
      v49 = swift_bridgeObjectRetain(v45);
      v48(v76, v75, v47, v49);
      v50 = v13[16];
      v51 = *(_QWORD *)&v11[v50];
      *(_QWORD *)((char *)v10 + v50) = v51;
      v52 = v13[17];
      v53 = (char *)v10 + v52;
      v54 = &v11[v52];
      v55 = type metadata accessor for PageMetrics(0);
      v56 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v55 - 8) + 16);
      v57 = swift_bridgeObjectRetain(v51);
      v56(v53, v54, v55, v57);
      *((_BYTE *)v10 + v13[18]) = v11[v13[18]];
      v58 = v13[19];
      v59 = *(_QWORD *)&v11[v58];
      *(_QWORD *)((char *)v10 + v58) = v59;
      v60 = v13[20];
      v61 = *(_QWORD *)&v11[v60];
      *(_QWORD *)((char *)v10 + v60) = v61;
      *((_BYTE *)v10 + v13[21]) = v11[v13[21]];
      v62 = v13[22];
      v63 = (_QWORD *)((char *)v10 + v62);
      v64 = &v11[v62];
      *v63 = *(_QWORD *)v64;
      v65 = *((_QWORD *)v64 + 1);
      v63[1] = v65;
      v66 = v13[23];
      v67 = (_QWORD *)((char *)v10 + v66);
      v68 = &v11[v66];
      v69 = *((_QWORD *)v68 + 1);
      swift_bridgeObjectRetain(v59);
      swift_retain(v61);
      swift_bridgeObjectRetain(v65);
      if (v69)
      {
        *v67 = *(_QWORD *)v68;
        v70 = *((_QWORD *)v68 + 1);
        v67[1] = v70;
        v67[2] = *((_QWORD *)v68 + 2);
        v67[3] = *((_QWORD *)v68 + 3);
        v71 = *((_QWORD *)v68 + 4);
        v67[4] = v71;
        swift_bridgeObjectRetain(v70);
        swift_bridgeObjectRetain(v71);
      }
      else
      {
        v72 = *(_OWORD *)v68;
        v73 = *((_OWORD *)v68 + 1);
        v67[4] = *((_QWORD *)v68 + 4);
        *(_OWORD *)v67 = v72;
        *((_OWORD *)v67 + 1) = v73;
      }
      v23 = a1;
      v24 = v77;
      v25 = 0;
      goto LABEL_19;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *initializeWithTake for PageContent.ContentType(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = *(int *)(sub_5C154(&qword_323090) + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
    v10 = (int *)type metadata accessor for Page(0);
    v11 = v10[5];
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = type metadata accessor for LocalizerRequest(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v16(v13, 1, v14))
    {
      v17 = sub_5C154(&qword_3217B8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v18 = v10[6];
    v19 = &v8[v18];
    v20 = &v9[v18];
    if (v16(&v9[v18], 1, v14))
    {
      v21 = sub_5C154(&qword_3217B8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v20, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
    }
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v22 = v10[9];
    v23 = &v8[v22];
    v24 = &v9[v22];
    v25 = type metadata accessor for ToolbarPrincipalType(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_5C154(&qword_322F98);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
    *(_QWORD *)&v8[v10[11]] = *(_QWORD *)&v9[v10[11]];
    v8[v10[12]] = v9[v10[12]];
    *(_QWORD *)&v8[v10[13]] = *(_QWORD *)&v9[v10[13]];
    *(_OWORD *)&v8[v10[14]] = *(_OWORD *)&v9[v10[14]];
    v28 = v10[15];
    v29 = &v8[v28];
    v30 = &v9[v28];
    v31 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
    *(_QWORD *)&v8[v10[16]] = *(_QWORD *)&v9[v10[16]];
    v32 = v10[17];
    v33 = &v8[v32];
    v34 = &v9[v32];
    v35 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    v8[v10[18]] = v9[v10[18]];
    *(_QWORD *)&v8[v10[19]] = *(_QWORD *)&v9[v10[19]];
    *(_QWORD *)&v8[v10[20]] = *(_QWORD *)&v9[v10[20]];
    v8[v10[21]] = v9[v10[21]];
    *(_OWORD *)&v8[v10[22]] = *(_OWORD *)&v9[v10[22]];
    v36 = v10[23];
    v37 = &v8[v36];
    v38 = &v9[v36];
    v39 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v39;
    *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *assignWithTake for PageContent.ContentType(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;

  if (a1 != a2)
  {
    sub_6685C((uint64_t)a1, type metadata accessor for PageContent.ContentType);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = *(int *)(sub_5C154(&qword_323090) + 32);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
      v10 = (int *)type metadata accessor for Page(0);
      v11 = v10[5];
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = type metadata accessor for LocalizerRequest(0);
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      if (v16(v13, 1, v14))
      {
        v17 = sub_5C154(&qword_3217B8);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      if (v16(&v9[v18], 1, v14))
      {
        v21 = sub_5C154(&qword_3217B8);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v20, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
      }
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v22 = v10[9];
      v23 = &v8[v22];
      v24 = &v9[v22];
      v25 = type metadata accessor for ToolbarPrincipalType(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = sub_5C154(&qword_322F98);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
      *(_QWORD *)&v8[v10[11]] = *(_QWORD *)&v9[v10[11]];
      v8[v10[12]] = v9[v10[12]];
      *(_QWORD *)&v8[v10[13]] = *(_QWORD *)&v9[v10[13]];
      *(_OWORD *)&v8[v10[14]] = *(_OWORD *)&v9[v10[14]];
      v28 = v10[15];
      v29 = &v8[v28];
      v30 = &v9[v28];
      v31 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      *(_QWORD *)&v8[v10[16]] = *(_QWORD *)&v9[v10[16]];
      v32 = v10[17];
      v33 = &v8[v32];
      v34 = &v9[v32];
      v35 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      v8[v10[18]] = v9[v10[18]];
      *(_QWORD *)&v8[v10[19]] = *(_QWORD *)&v9[v10[19]];
      *(_QWORD *)&v8[v10[20]] = *(_QWORD *)&v9[v10[20]];
      v8[v10[21]] = v9[v10[21]];
      *(_OWORD *)&v8[v10[22]] = *(_OWORD *)&v9[v10[22]];
      v36 = v10[23];
      v37 = &v8[v36];
      v38 = &v9[v36];
      v39 = *((_OWORD *)v38 + 1);
      *(_OWORD *)v37 = *(_OWORD *)v38;
      *((_OWORD *)v37 + 1) = v39;
      *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void sub_1007C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_8C25C(319, (unint64_t *)&unk_324240, type metadata accessor for Page, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
  }
}

uint64_t sub_10084C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v3[4];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = sub_667D0(&qword_322F60);
  v3[2] = v1;
  v3[3] = sub_67060(&qword_322F68, &qword_322F60, (uint64_t)&protocol conformance descriptor for AnyIntentModel<A>);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.dispatch<A>(_:into:)>>, 1);
}

_QWORD *sub_1008C0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  unsigned int (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t, __n128);
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t, __n128);
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int (*v147)(char *, uint64_t, uint64_t, __n128);
  __n128 v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t, __n128);
  __n128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t, __n128);
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  __int128 v197;
  char *v199;
  char *v200;
  unsigned int (*v201)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v202)(_QWORD, _QWORD, _QWORD);
  uint64_t *v203;
  uint64_t *v204;
  int *v205;
  int *v206;
  char *v207;
  uint64_t v208;
  _QWORD *v209;

  v3 = a2;
  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v6 = a3;
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = v6[5];
    v9 = (_QWORD *)((char *)v4 + v8);
    v10 = (uint64_t *)((char *)v3 + v8);
    v11 = (int *)type metadata accessor for Page(0);
    v208 = *((_QWORD *)v11 - 1);
    v12 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v208 + 48);
    v209 = v4;
    if (v12(v10, 1, v11))
    {
      v13 = sub_5C154(&qword_3217C0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v201 = v12;
      v203 = v3;
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = v11[5];
      v17 = (char *)v9 + v16;
      v18 = (char *)v10 + v16;
      v19 = type metadata accessor for LocalizerRequest(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
      v22 = swift_bridgeObjectRetain(v15);
      if (v21(v18, 1, v19, v22))
      {
        v23 = sub_5C154(&qword_3217B8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v24 = v11[6];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v21)((char *)v10 + v24, 1, v19))
      {
        v27 = sub_5C154(&qword_3217B8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v26, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, 0, 1, v19);
      }
      *((_BYTE *)v9 + v11[7]) = *((_BYTE *)v10 + v11[7]);
      *((_BYTE *)v9 + v11[8]) = *((_BYTE *)v10 + v11[8]);
      v28 = v11[9];
      v29 = (char *)v9 + v28;
      v30 = (char *)v10 + v28;
      v31 = type metadata accessor for ToolbarPrincipalType(0);
      v32 = *(_QWORD *)(v31 - 8);
      v205 = v6;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = sub_5C154(&qword_322F98);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v34 = v11[10];
      v35 = *(_QWORD *)((char *)v10 + v34);
      *(_QWORD *)((char *)v9 + v34) = v35;
      v36 = v11[11];
      v37 = *(_QWORD *)((char *)v10 + v36);
      *(_QWORD *)((char *)v9 + v36) = v37;
      *((_BYTE *)v9 + v11[12]) = *((_BYTE *)v10 + v11[12]);
      v38 = v11[13];
      v39 = *(_QWORD *)((char *)v10 + v38);
      *(_QWORD *)((char *)v9 + v38) = v39;
      v40 = v11[14];
      v41 = (_QWORD *)((char *)v9 + v40);
      v42 = (_QWORD *)((char *)v10 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = v11[15];
      v199 = (char *)v9 + v44;
      v45 = (char *)v10 + v44;
      v46 = type metadata accessor for PageData(0);
      v47 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v39);
      v48 = swift_bridgeObjectRetain(v43);
      v47(v199, v45, v46, v48);
      v49 = v11[16];
      v50 = *(_QWORD *)((char *)v10 + v49);
      *(_QWORD *)((char *)v9 + v49) = v50;
      v51 = v11[17];
      v52 = (char *)v9 + v51;
      v53 = (char *)v10 + v51;
      v54 = type metadata accessor for PageMetrics(0);
      v55 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v54 - 8) + 16);
      v56 = swift_bridgeObjectRetain(v50);
      v55(v52, v53, v54, v56);
      *((_BYTE *)v9 + v11[18]) = *((_BYTE *)v10 + v11[18]);
      v57 = v11[19];
      v58 = *(_QWORD *)((char *)v10 + v57);
      *(_QWORD *)((char *)v9 + v57) = v58;
      v59 = v11[20];
      v60 = *(_QWORD *)((char *)v10 + v59);
      *(_QWORD *)((char *)v9 + v59) = v60;
      *((_BYTE *)v9 + v11[21]) = *((_BYTE *)v10 + v11[21]);
      v61 = v11[22];
      v62 = (_QWORD *)((char *)v9 + v61);
      v63 = (_QWORD *)((char *)v10 + v61);
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      v65 = v11[23];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      v68 = *(_QWORD *)((char *)v10 + v65 + 8);
      swift_bridgeObjectRetain(v58);
      swift_retain(v60);
      swift_bridgeObjectRetain(v64);
      if (v68)
      {
        *(_QWORD *)v66 = *(_QWORD *)v67;
        *((_QWORD *)v66 + 1) = v68;
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        v69 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 4) = v69;
        swift_bridgeObjectRetain(v68);
        v70 = swift_bridgeObjectRetain(v69);
      }
      else
      {
        v70 = *(__n128 *)v67;
        v71 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v71;
        *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
      }
      v12 = v201;
      v3 = v203;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v208 + 56))(v9, 0, 1, v11, v70);
      v4 = v209;
      v6 = v205;
    }
    v72 = v6[6];
    v73 = (_QWORD *)((char *)v4 + v72);
    v74 = (uint64_t *)((char *)v3 + v72);
    if (v12((char *)v3 + v72, 1, v11))
    {
      v75 = sub_5C154(&qword_3217C0);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v202 = v12;
      v204 = v3;
      v206 = v6;
      v76 = v74[1];
      *v73 = *v74;
      v73[1] = v76;
      v77 = v11[5];
      v78 = (char *)v73 + v77;
      v79 = (char *)v74 + v77;
      v80 = type metadata accessor for LocalizerRequest(0);
      v81 = *(_QWORD *)(v80 - 8);
      v82 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v81 + 48);
      v83 = swift_bridgeObjectRetain(v76);
      if (v82(v79, 1, v80, v83))
      {
        v84 = sub_5C154(&qword_3217B8);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v79, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      }
      v85 = v11[6];
      v86 = (char *)v73 + v85;
      v87 = (char *)v74 + v85;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v82)((char *)v74 + v85, 1, v80))
      {
        v88 = sub_5C154(&qword_3217B8);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v86, v87, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v86, 0, 1, v80);
      }
      *((_BYTE *)v73 + v11[7]) = *((_BYTE *)v74 + v11[7]);
      *((_BYTE *)v73 + v11[8]) = *((_BYTE *)v74 + v11[8]);
      v89 = v11[9];
      v90 = (char *)v73 + v89;
      v91 = (char *)v74 + v89;
      v92 = type metadata accessor for ToolbarPrincipalType(0);
      v93 = *(_QWORD *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        v94 = sub_5C154(&qword_322F98);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v90, v91, v92);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
      }
      v95 = v11[10];
      v96 = *(_QWORD *)((char *)v74 + v95);
      *(_QWORD *)((char *)v73 + v95) = v96;
      v97 = v11[11];
      v98 = *(_QWORD *)((char *)v74 + v97);
      *(_QWORD *)((char *)v73 + v97) = v98;
      *((_BYTE *)v73 + v11[12]) = *((_BYTE *)v74 + v11[12]);
      v99 = v11[13];
      v100 = *(_QWORD *)((char *)v74 + v99);
      *(_QWORD *)((char *)v73 + v99) = v100;
      v101 = v11[14];
      v102 = (_QWORD *)((char *)v73 + v101);
      v103 = (_QWORD *)((char *)v74 + v101);
      v104 = v103[1];
      *v102 = *v103;
      v102[1] = v104;
      v105 = v11[15];
      v200 = (char *)v73 + v105;
      v106 = (char *)v74 + v105;
      v107 = type metadata accessor for PageData(0);
      v108 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v107 - 8) + 16);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v100);
      v109 = swift_bridgeObjectRetain(v104);
      v108(v200, v106, v107, v109);
      v110 = v11[16];
      v111 = *(_QWORD *)((char *)v74 + v110);
      *(_QWORD *)((char *)v73 + v110) = v111;
      v112 = v11[17];
      v113 = (char *)v73 + v112;
      v114 = (char *)v74 + v112;
      v115 = type metadata accessor for PageMetrics(0);
      v116 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v115 - 8) + 16);
      v117 = swift_bridgeObjectRetain(v111);
      v116(v113, v114, v115, v117);
      *((_BYTE *)v73 + v11[18]) = *((_BYTE *)v74 + v11[18]);
      v118 = v11[19];
      v119 = *(_QWORD *)((char *)v74 + v118);
      *(_QWORD *)((char *)v73 + v118) = v119;
      v120 = v11[20];
      v121 = *(_QWORD *)((char *)v74 + v120);
      *(_QWORD *)((char *)v73 + v120) = v121;
      *((_BYTE *)v73 + v11[21]) = *((_BYTE *)v74 + v11[21]);
      v122 = v11[22];
      v123 = (_QWORD *)((char *)v73 + v122);
      v124 = (_QWORD *)((char *)v74 + v122);
      v125 = v124[1];
      *v123 = *v124;
      v123[1] = v125;
      v126 = v11[23];
      v127 = (char *)v73 + v126;
      v128 = (char *)v74 + v126;
      v129 = *(_QWORD *)((char *)v74 + v126 + 8);
      swift_bridgeObjectRetain(v119);
      swift_retain(v121);
      swift_bridgeObjectRetain(v125);
      if (v129)
      {
        *(_QWORD *)v127 = *(_QWORD *)v128;
        *((_QWORD *)v127 + 1) = v129;
        *((_OWORD *)v127 + 1) = *((_OWORD *)v128 + 1);
        v130 = *((_QWORD *)v128 + 4);
        *((_QWORD *)v127 + 4) = v130;
        swift_bridgeObjectRetain(v129);
        v131 = swift_bridgeObjectRetain(v130);
      }
      else
      {
        v131 = *(__n128 *)v128;
        v132 = *((_OWORD *)v128 + 1);
        *(_OWORD *)v127 = *(_OWORD *)v128;
        *((_OWORD *)v127 + 1) = v132;
        *((_QWORD *)v127 + 4) = *((_QWORD *)v128 + 4);
      }
      v12 = v202;
      v3 = v204;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v208 + 56))(v73, 0, 1, v11, v131);
      v4 = v209;
      v6 = v206;
    }
    v133 = v6[8];
    *((_BYTE *)v4 + v6[7]) = *((_BYTE *)v3 + v6[7]);
    v134 = (char *)v4 + v133;
    v135 = (uint64_t)v3 + v133;
    v136 = sub_5C154(&qword_322E30);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 16))(v134, v135, v136);
    v137 = v6[9];
    v138 = (_QWORD *)((char *)v4 + v137);
    v139 = (uint64_t *)((char *)v3 + v137);
    if (v12((char *)v3 + v137, 1, v11))
    {
      v140 = sub_5C154(&qword_3217C0);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v141 = v139[1];
      *v138 = *v139;
      v138[1] = v141;
      v142 = v11[5];
      v143 = (char *)v138 + v142;
      v144 = (char *)v139 + v142;
      v145 = type metadata accessor for LocalizerRequest(0);
      v146 = *(_QWORD *)(v145 - 8);
      v147 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v146 + 48);
      v148 = swift_bridgeObjectRetain(v141);
      if (v147(v144, 1, v145, v148))
      {
        v149 = sub_5C154(&qword_3217B8);
        memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v143, v144, v145);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
      }
      v150 = v11[6];
      v151 = (char *)v138 + v150;
      v152 = (char *)v139 + v150;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v147)((char *)v139 + v150, 1, v145))
      {
        v153 = sub_5C154(&qword_3217B8);
        memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v151, v152, v145);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v151, 0, 1, v145);
      }
      *((_BYTE *)v138 + v11[7]) = *((_BYTE *)v139 + v11[7]);
      *((_BYTE *)v138 + v11[8]) = *((_BYTE *)v139 + v11[8]);
      v154 = v11[9];
      v155 = (char *)v138 + v154;
      v156 = (char *)v139 + v154;
      v157 = type metadata accessor for ToolbarPrincipalType(0);
      v158 = *(_QWORD *)(v157 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
      {
        v159 = sub_5C154(&qword_322F98);
        memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v155, v156, v157);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
      }
      v160 = v11[10];
      v161 = *(_QWORD *)((char *)v139 + v160);
      *(_QWORD *)((char *)v138 + v160) = v161;
      v162 = v11[11];
      v163 = *(_QWORD *)((char *)v139 + v162);
      *(_QWORD *)((char *)v138 + v162) = v163;
      *((_BYTE *)v138 + v11[12]) = *((_BYTE *)v139 + v11[12]);
      v164 = v11[13];
      v165 = *(_QWORD *)((char *)v139 + v164);
      *(_QWORD *)((char *)v138 + v164) = v165;
      v166 = v11[14];
      v167 = (_QWORD *)((char *)v138 + v166);
      v168 = (_QWORD *)((char *)v139 + v166);
      v169 = v168[1];
      *v167 = *v168;
      v167[1] = v169;
      v170 = v11[15];
      v207 = (char *)v138 + v170;
      v171 = (char *)v139 + v170;
      v172 = type metadata accessor for PageData(0);
      v173 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v172 - 8) + 16);
      swift_bridgeObjectRetain(v161);
      swift_bridgeObjectRetain(v163);
      swift_bridgeObjectRetain(v165);
      v174 = swift_bridgeObjectRetain(v169);
      v173(v207, v171, v172, v174);
      v175 = v11[16];
      v176 = *(_QWORD *)((char *)v139 + v175);
      *(_QWORD *)((char *)v138 + v175) = v176;
      v177 = v11[17];
      v178 = (char *)v138 + v177;
      v179 = (char *)v139 + v177;
      v180 = type metadata accessor for PageMetrics(0);
      v181 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v180 - 8) + 16);
      v182 = swift_bridgeObjectRetain(v176);
      v181(v178, v179, v180, v182);
      *((_BYTE *)v138 + v11[18]) = *((_BYTE *)v139 + v11[18]);
      v183 = v11[19];
      v184 = *(_QWORD *)((char *)v139 + v183);
      *(_QWORD *)((char *)v138 + v183) = v184;
      v185 = v11[20];
      v186 = *(_QWORD *)((char *)v139 + v185);
      *(_QWORD *)((char *)v138 + v185) = v186;
      *((_BYTE *)v138 + v11[21]) = *((_BYTE *)v139 + v11[21]);
      v187 = v11[22];
      v188 = (_QWORD *)((char *)v138 + v187);
      v189 = (_QWORD *)((char *)v139 + v187);
      v190 = v189[1];
      *v188 = *v189;
      v188[1] = v190;
      v191 = v11[23];
      v192 = (char *)v138 + v191;
      v193 = (char *)v139 + v191;
      v194 = *(_QWORD *)((char *)v139 + v191 + 8);
      swift_bridgeObjectRetain(v184);
      swift_retain(v186);
      swift_bridgeObjectRetain(v190);
      if (v194)
      {
        *(_QWORD *)v192 = *(_QWORD *)v193;
        *((_QWORD *)v192 + 1) = v194;
        *((_OWORD *)v192 + 1) = *((_OWORD *)v193 + 1);
        v195 = *((_QWORD *)v193 + 4);
        *((_QWORD *)v192 + 4) = v195;
        swift_bridgeObjectRetain(v194);
        v196 = swift_bridgeObjectRetain(v195);
      }
      else
      {
        v196 = *(__n128 *)v193;
        v197 = *((_OWORD *)v193 + 1);
        *(_OWORD *)v192 = *(_OWORD *)v193;
        *((_OWORD *)v192 + 1) = v197;
        *((_QWORD *)v192 + 4) = *((_QWORD *)v193 + 4);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v208 + 56))(v138, 0, 1, v11, v196);
      return v209;
    }
  }
  return v4;
}

double sub_101468(_QWORD *a1, int *a2)
{
  char *v4;
  int *v5;
  unsigned int (*v6)(char *, uint64_t, int *);
  __n128 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  double result;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v4 = (char *)a1 + a2[5];
  v5 = (int *)type metadata accessor for Page(0);
  v6 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48);
  if (!v6(v4, 1, v5))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
    v8 = &v4[v5[5]];
    v9 = type metadata accessor for LocalizerRequest(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    if (!v11(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v12 = &v4[v5[6]];
    if (!v11(v12, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v13 = &v4[v5[9]];
    v14 = type metadata accessor for ToolbarPrincipalType(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[14] + 8]);
    v16 = &v4[v5[15]];
    v17 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[16]]);
    v18 = &v4[v5[17]];
    v19 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[19]]);
    swift_release(*(_QWORD *)&v4[v5[20]]);
    v7 = swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[22] + 8]);
    v20 = &v4[v5[23]];
    v21 = *((_QWORD *)v20 + 1);
    if (v21)
    {
      swift_bridgeObjectRelease(v21);
      v7 = swift_bridgeObjectRelease(*((_QWORD *)v20 + 4));
    }
  }
  v22 = (char *)a1 + a2[6];
  if (!((unsigned int (*)(char *, uint64_t, int *, __n128))v6)(v22, 1, v5, v7))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v22 + 1));
    v23 = &v22[v5[5]];
    v24 = type metadata accessor for LocalizerRequest(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    if (!v26(v23, 1, v24))
      (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
    v27 = &v22[v5[6]];
    if (!v26(v27, 1, v24))
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    v28 = &v22[v5[9]];
    v29 = type metadata accessor for ToolbarPrincipalType(0);
    v30 = *(_QWORD *)(v29 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v5[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v5[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v5[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v5[14] + 8]);
    v31 = &v22[v5[15]];
    v32 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v5[16]]);
    v33 = &v22[v5[17]];
    v34 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v5[19]]);
    swift_release(*(_QWORD *)&v22[v5[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v5[22] + 8]);
    v35 = &v22[v5[23]];
    v36 = *((_QWORD *)v35 + 1);
    if (v36)
    {
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(*((_QWORD *)v35 + 4));
    }
  }
  v37 = (char *)a1 + a2[8];
  v38 = sub_5C154(&qword_322E30);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  v39 = (char *)a1 + a2[9];
  if (!v6(v39, 1, v5))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v39 + 1));
    v41 = &v39[v5[5]];
    v42 = type metadata accessor for LocalizerRequest(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    if (!v44(v41, 1, v42))
      (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
    v45 = &v39[v5[6]];
    if (!v44(v45, 1, v42))
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    v46 = &v39[v5[9]];
    v47 = type metadata accessor for ToolbarPrincipalType(0);
    v48 = *(_QWORD *)(v47 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
    swift_bridgeObjectRelease(*(_QWORD *)&v39[v5[10]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v39[v5[11]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v39[v5[13]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v39[v5[14] + 8]);
    v49 = &v39[v5[15]];
    v50 = type metadata accessor for PageData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
    swift_bridgeObjectRelease(*(_QWORD *)&v39[v5[16]]);
    v51 = &v39[v5[17]];
    v52 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
    swift_bridgeObjectRelease(*(_QWORD *)&v39[v5[19]]);
    swift_release(*(_QWORD *)&v39[v5[20]]);
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v39[v5[22] + 8]).n128_u64[0];
    v53 = &v39[v5[23]];
    v54 = *((_QWORD *)v53 + 1);
    if (v54)
    {
      swift_bridgeObjectRelease(v54);
      *(_QWORD *)&result = swift_bridgeObjectRelease(*((_QWORD *)v53 + 4)).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_1019D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t, __n128);
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t, __n128);
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(char *, uint64_t, uint64_t, __n128);
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t, __n128);
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  void (*v179)(char *, char *, uint64_t, __n128);
  __n128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  __n128 v194;
  __int128 v195;
  char *v197;
  char *v198;
  unsigned int (*v199)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v200)(_QWORD, _QWORD, _QWORD);
  int *v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;

  v4 = a2;
  v5 = a1;
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = a3[5];
  v8 = (_QWORD *)(v5 + v7);
  v9 = (_QWORD *)(v4 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v206 = *((_QWORD *)v10 - 1);
  v11 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v206 + 48);
  v207 = v5;
  if (v11(v9, 1, v10))
  {
    v12 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v199 = v11;
    v203 = v4;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = v10[5];
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = type metadata accessor for LocalizerRequest(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17, v20))
    {
      v21 = sub_5C154(&qword_3217B8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v22 = v10[6];
    v23 = (char *)v8 + v22;
    v24 = (char *)v9 + v22;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)((char *)v9 + v22, 1, v17))
    {
      v25 = sub_5C154(&qword_3217B8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v24, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
    }
    *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
    *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
    v26 = v10[9];
    v27 = (char *)v8 + v26;
    v28 = (char *)v9 + v26;
    v29 = type metadata accessor for ToolbarPrincipalType(0);
    v30 = *(_QWORD *)(v29 - 8);
    v201 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_5C154(&qword_322F98);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v10[10];
    v33 = *(_QWORD *)((char *)v9 + v32);
    *(_QWORD *)((char *)v8 + v32) = v33;
    v34 = v10[11];
    v35 = *(_QWORD *)((char *)v9 + v34);
    *(_QWORD *)((char *)v8 + v34) = v35;
    *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
    v36 = v10[13];
    v37 = *(_QWORD *)((char *)v9 + v36);
    *(_QWORD *)((char *)v8 + v36) = v37;
    v38 = v10[14];
    v39 = (_QWORD *)((char *)v8 + v38);
    v40 = (_QWORD *)((char *)v9 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = v10[15];
    v43 = (char *)v8 + v42;
    v197 = (char *)v9 + v42;
    v44 = type metadata accessor for PageData(0);
    v45 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 16);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v37);
    v46 = swift_bridgeObjectRetain(v41);
    v45(v43, v197, v44, v46);
    v47 = v10[16];
    v48 = *(_QWORD *)((char *)v9 + v47);
    *(_QWORD *)((char *)v8 + v47) = v48;
    v49 = v10[17];
    v50 = (char *)v8 + v49;
    v51 = (char *)v9 + v49;
    v52 = type metadata accessor for PageMetrics(0);
    v53 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
    v54 = swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52, v54);
    *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
    v55 = v10[19];
    v56 = *(_QWORD *)((char *)v9 + v55);
    *(_QWORD *)((char *)v8 + v55) = v56;
    v57 = v10[20];
    v58 = *(_QWORD *)((char *)v9 + v57);
    *(_QWORD *)((char *)v8 + v57) = v58;
    *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
    v59 = v10[22];
    v60 = (_QWORD *)((char *)v8 + v59);
    v61 = (_QWORD *)((char *)v9 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = v10[23];
    v64 = (char *)v8 + v63;
    v65 = (char *)v9 + v63;
    v66 = *(_QWORD *)((char *)v9 + v63 + 8);
    swift_bridgeObjectRetain(v56);
    swift_retain(v58);
    swift_bridgeObjectRetain(v62);
    if (v66)
    {
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *((_QWORD *)v64 + 1) = v66;
      *((_OWORD *)v64 + 1) = *((_OWORD *)v65 + 1);
      v67 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 4) = v67;
      swift_bridgeObjectRetain(v66);
      v68 = swift_bridgeObjectRetain(v67);
    }
    else
    {
      v68 = *(__n128 *)v65;
      v69 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v69;
      *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
    }
    v4 = v203;
    v11 = v199;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v206 + 56))(v8, 0, 1, v10, v68);
    v5 = v207;
    a3 = v201;
  }
  v70 = a3[6];
  v71 = (_QWORD *)(v5 + v70);
  v72 = (_QWORD *)(v4 + v70);
  if (v11(v4 + v70, 1, v10))
  {
    v73 = sub_5C154(&qword_3217C0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    v200 = v11;
    v202 = a3;
    v204 = v4;
    v74 = v72[1];
    *v71 = *v72;
    v71[1] = v74;
    v75 = v10[5];
    v76 = (char *)v71 + v75;
    v77 = (char *)v72 + v75;
    v78 = type metadata accessor for LocalizerRequest(0);
    v79 = *(_QWORD *)(v78 - 8);
    v80 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v79 + 48);
    v81 = swift_bridgeObjectRetain(v74);
    if (v80(v77, 1, v78, v81))
    {
      v82 = sub_5C154(&qword_3217B8);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    }
    v83 = v10[6];
    v84 = (char *)v71 + v83;
    v85 = (char *)v72 + v83;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v80)((char *)v72 + v83, 1, v78))
    {
      v86 = sub_5C154(&qword_3217B8);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v84, v85, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v84, 0, 1, v78);
    }
    *((_BYTE *)v71 + v10[7]) = *((_BYTE *)v72 + v10[7]);
    *((_BYTE *)v71 + v10[8]) = *((_BYTE *)v72 + v10[8]);
    v87 = v10[9];
    v88 = (char *)v71 + v87;
    v89 = (char *)v72 + v87;
    v90 = type metadata accessor for ToolbarPrincipalType(0);
    v91 = *(_QWORD *)(v90 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
    {
      v92 = sub_5C154(&qword_322F98);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v88, v89, v90);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
    }
    v93 = v10[10];
    v94 = *(_QWORD *)((char *)v72 + v93);
    *(_QWORD *)((char *)v71 + v93) = v94;
    v95 = v10[11];
    v96 = *(_QWORD *)((char *)v72 + v95);
    *(_QWORD *)((char *)v71 + v95) = v96;
    *((_BYTE *)v71 + v10[12]) = *((_BYTE *)v72 + v10[12]);
    v97 = v10[13];
    v98 = *(_QWORD *)((char *)v72 + v97);
    *(_QWORD *)((char *)v71 + v97) = v98;
    v99 = v10[14];
    v100 = (_QWORD *)((char *)v71 + v99);
    v101 = (_QWORD *)((char *)v72 + v99);
    v102 = v101[1];
    *v100 = *v101;
    v100[1] = v102;
    v103 = v10[15];
    v198 = (char *)v71 + v103;
    v104 = (char *)v72 + v103;
    v105 = type metadata accessor for PageData(0);
    v106 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v105 - 8) + 16);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v98);
    v107 = swift_bridgeObjectRetain(v102);
    v106(v198, v104, v105, v107);
    v108 = v10[16];
    v109 = *(_QWORD *)((char *)v72 + v108);
    *(_QWORD *)((char *)v71 + v108) = v109;
    v110 = v10[17];
    v111 = (char *)v71 + v110;
    v112 = (char *)v72 + v110;
    v113 = type metadata accessor for PageMetrics(0);
    v114 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v113 - 8) + 16);
    v115 = swift_bridgeObjectRetain(v109);
    v114(v111, v112, v113, v115);
    *((_BYTE *)v71 + v10[18]) = *((_BYTE *)v72 + v10[18]);
    v116 = v10[19];
    v117 = *(_QWORD *)((char *)v72 + v116);
    *(_QWORD *)((char *)v71 + v116) = v117;
    v118 = v10[20];
    v119 = *(_QWORD *)((char *)v72 + v118);
    *(_QWORD *)((char *)v71 + v118) = v119;
    *((_BYTE *)v71 + v10[21]) = *((_BYTE *)v72 + v10[21]);
    v120 = v10[22];
    v121 = (_QWORD *)((char *)v71 + v120);
    v122 = (_QWORD *)((char *)v72 + v120);
    v123 = v122[1];
    *v121 = *v122;
    v121[1] = v123;
    v124 = v10[23];
    v125 = (char *)v71 + v124;
    v126 = (char *)v72 + v124;
    v127 = *(_QWORD *)((char *)v72 + v124 + 8);
    swift_bridgeObjectRetain(v117);
    swift_retain(v119);
    swift_bridgeObjectRetain(v123);
    if (v127)
    {
      *(_QWORD *)v125 = *(_QWORD *)v126;
      *((_QWORD *)v125 + 1) = v127;
      *((_OWORD *)v125 + 1) = *((_OWORD *)v126 + 1);
      v128 = *((_QWORD *)v126 + 4);
      *((_QWORD *)v125 + 4) = v128;
      swift_bridgeObjectRetain(v127);
      v129 = swift_bridgeObjectRetain(v128);
    }
    else
    {
      v129 = *(__n128 *)v126;
      v130 = *((_OWORD *)v126 + 1);
      *(_OWORD *)v125 = *(_OWORD *)v126;
      *((_OWORD *)v125 + 1) = v130;
      *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
    }
    v4 = v204;
    v11 = v200;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v206 + 56))(v71, 0, 1, v10, v129);
    v5 = v207;
    a3 = v202;
  }
  v131 = a3[8];
  *(_BYTE *)(v5 + a3[7]) = *(_BYTE *)(v4 + a3[7]);
  v132 = v5 + v131;
  v133 = v4 + v131;
  v134 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v132, v133, v134);
  v135 = a3[9];
  v136 = (_QWORD *)(v5 + v135);
  v137 = (_QWORD *)(v4 + v135);
  if (v11(v4 + v135, 1, v10))
  {
    v138 = sub_5C154(&qword_3217C0);
    memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
  }
  else
  {
    v139 = v137[1];
    *v136 = *v137;
    v136[1] = v139;
    v140 = v10[5];
    v141 = (char *)v136 + v140;
    v142 = (char *)v137 + v140;
    v143 = type metadata accessor for LocalizerRequest(0);
    v144 = *(_QWORD *)(v143 - 8);
    v145 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v144 + 48);
    v146 = swift_bridgeObjectRetain(v139);
    if (v145(v142, 1, v143, v146))
    {
      v147 = sub_5C154(&qword_3217B8);
      memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v142, v143);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
    }
    v148 = v10[6];
    v149 = (char *)v136 + v148;
    v150 = (char *)v137 + v148;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v145)((char *)v137 + v148, 1, v143))
    {
      v151 = sub_5C154(&qword_3217B8);
      memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v149, v150, v143);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v149, 0, 1, v143);
    }
    *((_BYTE *)v136 + v10[7]) = *((_BYTE *)v137 + v10[7]);
    *((_BYTE *)v136 + v10[8]) = *((_BYTE *)v137 + v10[8]);
    v152 = v10[9];
    v153 = (char *)v136 + v152;
    v154 = (char *)v137 + v152;
    v155 = type metadata accessor for ToolbarPrincipalType(0);
    v156 = *(_QWORD *)(v155 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
    {
      v157 = sub_5C154(&qword_322F98);
      memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v153, v154, v155);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
    }
    v158 = v10[10];
    v159 = *(_QWORD *)((char *)v137 + v158);
    *(_QWORD *)((char *)v136 + v158) = v159;
    v160 = v10[11];
    v161 = *(_QWORD *)((char *)v137 + v160);
    *(_QWORD *)((char *)v136 + v160) = v161;
    *((_BYTE *)v136 + v10[12]) = *((_BYTE *)v137 + v10[12]);
    v162 = v10[13];
    v163 = *(_QWORD *)((char *)v137 + v162);
    *(_QWORD *)((char *)v136 + v162) = v163;
    v164 = v10[14];
    v165 = (_QWORD *)((char *)v136 + v164);
    v166 = (_QWORD *)((char *)v137 + v164);
    v167 = v166[1];
    *v165 = *v166;
    v165[1] = v167;
    v168 = v10[15];
    v205 = (char *)v136 + v168;
    v169 = (char *)v137 + v168;
    v170 = type metadata accessor for PageData(0);
    v171 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v170 - 8) + 16);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v161);
    swift_bridgeObjectRetain(v163);
    v172 = swift_bridgeObjectRetain(v167);
    v171(v205, v169, v170, v172);
    v173 = v10[16];
    v174 = *(_QWORD *)((char *)v137 + v173);
    *(_QWORD *)((char *)v136 + v173) = v174;
    v175 = v10[17];
    v176 = (char *)v136 + v175;
    v177 = (char *)v137 + v175;
    v178 = type metadata accessor for PageMetrics(0);
    v179 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v178 - 8) + 16);
    v180 = swift_bridgeObjectRetain(v174);
    v179(v176, v177, v178, v180);
    *((_BYTE *)v136 + v10[18]) = *((_BYTE *)v137 + v10[18]);
    v181 = v10[19];
    v182 = *(_QWORD *)((char *)v137 + v181);
    *(_QWORD *)((char *)v136 + v181) = v182;
    v183 = v10[20];
    v184 = *(_QWORD *)((char *)v137 + v183);
    *(_QWORD *)((char *)v136 + v183) = v184;
    *((_BYTE *)v136 + v10[21]) = *((_BYTE *)v137 + v10[21]);
    v185 = v10[22];
    v186 = (_QWORD *)((char *)v136 + v185);
    v187 = (_QWORD *)((char *)v137 + v185);
    v188 = v187[1];
    *v186 = *v187;
    v186[1] = v188;
    v189 = v10[23];
    v190 = (char *)v136 + v189;
    v191 = (char *)v137 + v189;
    v192 = *(_QWORD *)((char *)v137 + v189 + 8);
    swift_bridgeObjectRetain(v182);
    swift_retain(v184);
    swift_bridgeObjectRetain(v188);
    if (v192)
    {
      *(_QWORD *)v190 = *(_QWORD *)v191;
      *((_QWORD *)v190 + 1) = v192;
      *((_OWORD *)v190 + 1) = *((_OWORD *)v191 + 1);
      v193 = *((_QWORD *)v191 + 4);
      *((_QWORD *)v190 + 4) = v193;
      swift_bridgeObjectRetain(v192);
      v194 = swift_bridgeObjectRetain(v193);
    }
    else
    {
      v194 = *(__n128 *)v191;
      v195 = *((_OWORD *)v191 + 1);
      *(_OWORD *)v190 = *(_OWORD *)v191;
      *((_OWORD *)v190 + 1) = v195;
      *((_QWORD *)v190 + 4) = *((_QWORD *)v191 + 4);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v206 + 56))(v136, 0, 1, v10, v194);
    return v207;
  }
  return v5;
}

_QWORD *sub_10254C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t (*v10)(char *, uint64_t, int *);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t, __n128);
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t, __n128);
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int (*v94)(char *, uint64_t, uint64_t, __n128);
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t, uint64_t);
  int v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t, __n128);
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t, __n128);
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  __int128 v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int (*v170)(char *, uint64_t, uint64_t, __n128);
  __n128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(char *, uint64_t, uint64_t);
  int v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t, __n128);
  __n128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  void (*v214)(char *, char *, uint64_t, __n128);
  __n128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __n128 v230;
  __int128 v231;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t (*v257)(char *, uint64_t, uint64_t);
  int v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t (*v266)(char *, uint64_t, uint64_t);
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t (*v275)(char *, uint64_t, uint64_t);
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  uint64_t v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  char *v431;
  char *v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  uint64_t (*v436)(char *, uint64_t, int *);
  uint64_t (*v437)(char *, uint64_t, int *);
  uint64_t (*v438)(char *, uint64_t, int *);
  uint64_t (*v439)(char *, uint64_t, int *);
  int *v440;
  int *v441;
  int *v442;
  int *v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  char *v448;
  uint64_t v449;

  v4 = a2;
  v5 = a1;
  sub_65938(a1, a2);
  v6 = a3[5];
  v7 = (char *)v5 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)type metadata accessor for Page(0);
  v449 = *((_QWORD *)v9 - 1);
  v10 = *(uint64_t (**)(char *, uint64_t, int *))(v449 + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  if (!v11)
  {
    if (v12)
    {
      sub_6685C((uint64_t)v7, type metadata accessor for Page);
      goto LABEL_7;
    }
    v437 = v10;
    v440 = a3;
    v445 = v4;
    v23 = v5;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v24 = *((_QWORD *)v8 + 1);
    v25 = *((_QWORD *)v7 + 1);
    *((_QWORD *)v7 + 1) = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v25);
    v26 = v9[5];
    v27 = &v7[v26];
    v28 = &v8[v26];
    v29 = type metadata accessor for LocalizerRequest(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v32 = v31(v27, 1, v29);
    v33 = v31(v28, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        goto LABEL_68;
      }
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_68:
        v234 = v9[6];
        v235 = &v7[v234];
        v236 = &v8[v234];
        v237 = v31(&v7[v234], 1, v29);
        v238 = v31(v236, 1, v29);
        if (v237)
        {
          if (!v238)
          {
            (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v235, v236, v29);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v235, 0, 1, v29);
            goto LABEL_86;
          }
        }
        else
        {
          if (!v238)
          {
            (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v235, v236, v29);
LABEL_86:
            v7[v9[7]] = v8[v9[7]];
            v7[v9[8]] = v8[v9[8]];
            v252 = v9[9];
            v253 = &v7[v252];
            v254 = &v8[v252];
            v255 = type metadata accessor for ToolbarPrincipalType(0);
            v256 = *(_QWORD *)(v255 - 8);
            v257 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v256 + 48);
            v258 = v257(v253, 1, v255);
            v259 = v257(v254, 1, v255);
            if (v258)
            {
              if (!v259)
              {
                (*(void (**)(char *, char *, uint64_t))(v256 + 16))(v253, v254, v255);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v253, 0, 1, v255);
                goto LABEL_104;
              }
            }
            else
            {
              if (!v259)
              {
                (*(void (**)(char *, char *, uint64_t))(v256 + 24))(v253, v254, v255);
LABEL_104:
                v5 = v23;
                v279 = v9[10];
                v280 = *(_QWORD *)&v8[v279];
                v281 = *(_QWORD *)&v7[v279];
                *(_QWORD *)&v7[v279] = v280;
                swift_bridgeObjectRetain(v280);
                swift_bridgeObjectRelease(v281);
                v282 = v9[11];
                v283 = *(_QWORD *)&v8[v282];
                v284 = *(_QWORD *)&v7[v282];
                *(_QWORD *)&v7[v282] = v283;
                swift_bridgeObjectRetain(v283);
                swift_bridgeObjectRelease(v284);
                v7[v9[12]] = v8[v9[12]];
                v285 = v9[13];
                v286 = *(_QWORD *)&v8[v285];
                v287 = *(_QWORD *)&v7[v285];
                *(_QWORD *)&v7[v285] = v286;
                swift_bridgeObjectRetain(v286);
                swift_bridgeObjectRelease(v287);
                v288 = v9[14];
                v289 = &v7[v288];
                v290 = &v8[v288];
                *(_QWORD *)v289 = *v290;
                v291 = v290[1];
                v292 = *((_QWORD *)v289 + 1);
                *((_QWORD *)v289 + 1) = v291;
                swift_bridgeObjectRetain(v291);
                swift_bridgeObjectRelease(v292);
                v293 = v9[15];
                v294 = &v7[v293];
                v295 = &v8[v293];
                v296 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v296 - 8) + 24))(v294, v295, v296);
                v297 = v9[16];
                v298 = *(_QWORD *)&v8[v297];
                v299 = *(_QWORD *)&v7[v297];
                *(_QWORD *)&v7[v297] = v298;
                swift_bridgeObjectRetain(v298);
                swift_bridgeObjectRelease(v299);
                v300 = v9[17];
                v301 = &v7[v300];
                v302 = &v8[v300];
                v303 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v303 - 8) + 24))(v301, v302, v303);
                v7[v9[18]] = v8[v9[18]];
                v304 = v9[19];
                v305 = *(_QWORD *)&v8[v304];
                v306 = *(_QWORD *)&v7[v304];
                *(_QWORD *)&v7[v304] = v305;
                swift_bridgeObjectRetain(v305);
                swift_bridgeObjectRelease(v306);
                v307 = v9[20];
                v308 = *(_QWORD *)&v8[v307];
                v309 = *(_QWORD *)&v7[v307];
                *(_QWORD *)&v7[v307] = v308;
                swift_retain(v308);
                swift_release(v309);
                v7[v9[21]] = v8[v9[21]];
                v310 = v9[22];
                v311 = &v7[v310];
                v312 = &v8[v310];
                *(_QWORD *)v311 = *v312;
                v313 = v312[1];
                v314 = *((_QWORD *)v311 + 1);
                *((_QWORD *)v311 + 1) = v313;
                swift_bridgeObjectRetain(v313);
                swift_bridgeObjectRelease(v314);
                v315 = v9[23];
                v316 = &v7[v315];
                v317 = &v8[v315];
                v318 = *((_QWORD *)v316 + 1);
                v319 = v317[1];
                v10 = v437;
                a3 = v440;
                if (v318)
                {
                  v4 = v445;
                  if (v319)
                  {
                    *(_QWORD *)v316 = *v317;
                    v320 = v317[1];
                    *((_QWORD *)v316 + 1) = v320;
                    swift_bridgeObjectRetain(v320);
                    swift_bridgeObjectRelease(v318);
                    *((_QWORD *)v316 + 2) = v317[2];
                    *((_QWORD *)v316 + 3) = v317[3];
                    v321 = v317[4];
                    v322 = *((_QWORD *)v316 + 4);
                    *((_QWORD *)v316 + 4) = v321;
                    swift_bridgeObjectRetain(v321);
                    swift_bridgeObjectRelease(v322);
                  }
                  else
                  {
                    sub_984B0((uint64_t)v316);
                    v419 = v317[4];
                    v420 = *((_OWORD *)v317 + 1);
                    *(_OWORD *)v316 = *(_OWORD *)v317;
                    *((_OWORD *)v316 + 1) = v420;
                    *((_QWORD *)v316 + 4) = v419;
                  }
                }
                else
                {
                  v4 = v445;
                  if (v319)
                  {
                    *(_QWORD *)v316 = *v317;
                    v413 = v317[1];
                    *((_QWORD *)v316 + 1) = v413;
                    *((_QWORD *)v316 + 2) = v317[2];
                    *((_QWORD *)v316 + 3) = v317[3];
                    v414 = v317[4];
                    *((_QWORD *)v316 + 4) = v414;
                    swift_bridgeObjectRetain(v413);
                    swift_bridgeObjectRetain(v414);
                  }
                  else
                  {
                    v425 = *(_OWORD *)v317;
                    v426 = *((_OWORD *)v317 + 1);
                    *((_QWORD *)v316 + 4) = v317[4];
                    *(_OWORD *)v316 = v425;
                    *((_OWORD *)v316 + 1) = v426;
                  }
                }
                goto LABEL_22;
              }
              (*(void (**)(char *, uint64_t))(v256 + 8))(v253, v255);
            }
            v278 = sub_5C154(&qword_322F98);
            memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
            goto LABEL_104;
          }
          (*(void (**)(char *, uint64_t))(v30 + 8))(v235, v29);
        }
        v251 = sub_5C154(&qword_3217B8);
        memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
        goto LABEL_86;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
    }
    v233 = sub_5C154(&qword_3217B8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
    goto LABEL_68;
  }
  if (v12)
  {
LABEL_7:
    v22 = sub_5C154(&qword_3217C0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_22;
  }
  v433 = v5;
  v436 = v10;
  v444 = v4;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v13 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v7 + 1) = v13;
  v14 = v9[5];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = type metadata accessor for LocalizerRequest(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
  v20 = swift_bridgeObjectRetain(v13);
  if (v19(v16, 1, v17, v20))
  {
    v21 = sub_5C154(&qword_3217B8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v34 = v9[6];
  v35 = &v7[v34];
  v36 = &v8[v34];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)(&v8[v34], 1, v17))
  {
    v37 = sub_5C154(&qword_3217B8);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v35, v36, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v35, 0, 1, v17);
  }
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v38 = v9[9];
  v39 = &v7[v38];
  v40 = &v8[v38];
  v41 = type metadata accessor for ToolbarPrincipalType(0);
  v42 = *(_QWORD *)(v41 - 8);
  v441 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = sub_5C154(&qword_322F98);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v44 = v9[10];
  v45 = *(_QWORD *)&v8[v44];
  *(_QWORD *)&v7[v44] = v45;
  v46 = v9[11];
  v47 = *(_QWORD *)&v8[v46];
  *(_QWORD *)&v7[v46] = v47;
  v7[v9[12]] = v8[v9[12]];
  v48 = v9[13];
  v49 = *(_QWORD *)&v8[v48];
  *(_QWORD *)&v7[v48] = v49;
  v50 = v9[14];
  v51 = &v7[v50];
  v52 = &v8[v50];
  *(_QWORD *)v51 = *v52;
  v53 = v52[1];
  *((_QWORD *)v51 + 1) = v53;
  v54 = v9[15];
  v431 = &v7[v54];
  v55 = &v8[v54];
  v56 = type metadata accessor for PageData(0);
  v57 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v56 - 8) + 16);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v49);
  v58 = swift_bridgeObjectRetain(v53);
  v57(v431, v55, v56, v58);
  v59 = v9[16];
  v60 = *(_QWORD *)&v8[v59];
  *(_QWORD *)&v7[v59] = v60;
  v61 = v9[17];
  v62 = &v7[v61];
  v63 = &v8[v61];
  v64 = type metadata accessor for PageMetrics(0);
  v65 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v64 - 8) + 16);
  v66 = swift_bridgeObjectRetain(v60);
  v65(v62, v63, v64, v66);
  v7[v9[18]] = v8[v9[18]];
  v67 = v9[19];
  v68 = *(_QWORD *)&v8[v67];
  *(_QWORD *)&v7[v67] = v68;
  v69 = v9[20];
  v70 = *(_QWORD *)&v8[v69];
  *(_QWORD *)&v7[v69] = v70;
  v7[v9[21]] = v8[v9[21]];
  v71 = v9[22];
  v72 = &v7[v71];
  v73 = &v8[v71];
  *(_QWORD *)v72 = *v73;
  v74 = v73[1];
  *((_QWORD *)v72 + 1) = v74;
  v75 = v9[23];
  v76 = &v7[v75];
  v77 = &v8[v75];
  v78 = v77[1];
  swift_bridgeObjectRetain(v68);
  swift_retain(v70);
  swift_bridgeObjectRetain(v74);
  if (v78)
  {
    *(_QWORD *)v76 = *v77;
    v79 = v77[1];
    *((_QWORD *)v76 + 1) = v79;
    *((_QWORD *)v76 + 2) = v77[2];
    *((_QWORD *)v76 + 3) = v77[3];
    v80 = v77[4];
    *((_QWORD *)v76 + 4) = v80;
    swift_bridgeObjectRetain(v79);
    v81 = swift_bridgeObjectRetain(v80);
  }
  else
  {
    v81 = *(__n128 *)v77;
    v82 = *((_OWORD *)v77 + 1);
    *((_QWORD *)v76 + 4) = v77[4];
    *(__n128 *)v76 = v81;
    *((_OWORD *)v76 + 1) = v82;
  }
  v5 = v433;
  v10 = v436;
  v4 = v444;
  (*(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v449 + 56))(v7, 0, 1, v9, v81);
  a3 = v441;
LABEL_22:
  v83 = a3[6];
  v84 = (char *)v5 + v83;
  v85 = (char *)v4 + v83;
  v86 = v10((char *)v5 + v83, 1, v9);
  v87 = v10(v85, 1, v9);
  if (!v86)
  {
    if (v87)
    {
      sub_6685C((uint64_t)v84, type metadata accessor for Page);
      goto LABEL_28;
    }
    v439 = v10;
    v443 = a3;
    v447 = v4;
    *(_QWORD *)v84 = *(_QWORD *)v85;
    v98 = *((_QWORD *)v85 + 1);
    v99 = *((_QWORD *)v84 + 1);
    *((_QWORD *)v84 + 1) = v98;
    swift_bridgeObjectRetain(v98);
    swift_bridgeObjectRelease(v99);
    v100 = v9[5];
    v101 = &v84[v100];
    v102 = &v85[v100];
    v103 = type metadata accessor for LocalizerRequest(0);
    v104 = *(_QWORD *)(v103 - 8);
    v105 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v104 + 48);
    LODWORD(v99) = v105(v101, 1, v103);
    v106 = v105(v102, 1, v103);
    if ((_DWORD)v99)
    {
      if (!v106)
      {
        (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v101, v102, v103);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
        goto LABEL_74;
      }
    }
    else
    {
      if (!v106)
      {
        (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v101, v102, v103);
LABEL_74:
        v240 = v9[6];
        v241 = &v84[v240];
        v242 = &v85[v240];
        v243 = v105(&v84[v240], 1, v103);
        v244 = v105(v242, 1, v103);
        if (v243)
        {
          if (!v244)
          {
            (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v241, v242, v103);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v241, 0, 1, v103);
            goto LABEL_92;
          }
        }
        else
        {
          if (!v244)
          {
            (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v241, v242, v103);
LABEL_92:
            v84[v9[7]] = v85[v9[7]];
            v84[v9[8]] = v85[v9[8]];
            v261 = v9[9];
            v262 = &v84[v261];
            v263 = &v85[v261];
            v264 = type metadata accessor for ToolbarPrincipalType(0);
            v265 = *(_QWORD *)(v264 - 8);
            v266 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v265 + 48);
            v267 = v266(v262, 1, v264);
            v268 = v266(v263, 1, v264);
            if (v267)
            {
              a3 = v443;
              if (!v268)
              {
                (*(void (**)(char *, char *, uint64_t))(v265 + 16))(v262, v263, v264);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v265 + 56))(v262, 0, 1, v264);
                goto LABEL_110;
              }
            }
            else
            {
              a3 = v443;
              if (!v268)
              {
                (*(void (**)(char *, char *, uint64_t))(v265 + 24))(v262, v263, v264);
LABEL_110:
                v324 = v9[10];
                v325 = *(_QWORD *)&v85[v324];
                v326 = *(_QWORD *)&v84[v324];
                *(_QWORD *)&v84[v324] = v325;
                swift_bridgeObjectRetain(v325);
                swift_bridgeObjectRelease(v326);
                v327 = v9[11];
                v328 = *(_QWORD *)&v85[v327];
                v329 = *(_QWORD *)&v84[v327];
                *(_QWORD *)&v84[v327] = v328;
                swift_bridgeObjectRetain(v328);
                swift_bridgeObjectRelease(v329);
                v84[v9[12]] = v85[v9[12]];
                v330 = v9[13];
                v331 = *(_QWORD *)&v85[v330];
                v332 = *(_QWORD *)&v84[v330];
                *(_QWORD *)&v84[v330] = v331;
                swift_bridgeObjectRetain(v331);
                swift_bridgeObjectRelease(v332);
                v333 = v9[14];
                v334 = &v84[v333];
                v335 = &v85[v333];
                *(_QWORD *)v334 = *v335;
                v336 = v335[1];
                v337 = *((_QWORD *)v334 + 1);
                *((_QWORD *)v334 + 1) = v336;
                swift_bridgeObjectRetain(v336);
                swift_bridgeObjectRelease(v337);
                v338 = v9[15];
                v339 = &v84[v338];
                v340 = &v85[v338];
                v341 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v341 - 8) + 24))(v339, v340, v341);
                v342 = v9[16];
                v343 = *(_QWORD *)&v85[v342];
                v344 = *(_QWORD *)&v84[v342];
                *(_QWORD *)&v84[v342] = v343;
                swift_bridgeObjectRetain(v343);
                swift_bridgeObjectRelease(v344);
                v345 = v9[17];
                v346 = &v84[v345];
                v347 = &v85[v345];
                v348 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v348 - 8) + 24))(v346, v347, v348);
                v84[v9[18]] = v85[v9[18]];
                v349 = v9[19];
                v350 = *(_QWORD *)&v85[v349];
                v351 = *(_QWORD *)&v84[v349];
                *(_QWORD *)&v84[v349] = v350;
                swift_bridgeObjectRetain(v350);
                swift_bridgeObjectRelease(v351);
                v352 = v9[20];
                v353 = *(_QWORD *)&v85[v352];
                v354 = *(_QWORD *)&v84[v352];
                *(_QWORD *)&v84[v352] = v353;
                swift_retain(v353);
                swift_release(v354);
                v84[v9[21]] = v85[v9[21]];
                v355 = v9[22];
                v356 = &v84[v355];
                v357 = &v85[v355];
                *(_QWORD *)v356 = *v357;
                v358 = v357[1];
                v359 = *((_QWORD *)v356 + 1);
                *((_QWORD *)v356 + 1) = v358;
                swift_bridgeObjectRetain(v358);
                swift_bridgeObjectRelease(v359);
                v360 = v9[23];
                v361 = &v84[v360];
                v362 = &v85[v360];
                v363 = *((_QWORD *)v361 + 1);
                v364 = v362[1];
                v4 = v447;
                v10 = v439;
                if (v363)
                {
                  if (v364)
                  {
                    *(_QWORD *)v361 = *v362;
                    v365 = v362[1];
                    *((_QWORD *)v361 + 1) = v365;
                    swift_bridgeObjectRetain(v365);
                    swift_bridgeObjectRelease(v363);
                    *((_QWORD *)v361 + 2) = v362[2];
                    *((_QWORD *)v361 + 3) = v362[3];
                    v366 = v362[4];
                    v367 = *((_QWORD *)v361 + 4);
                    *((_QWORD *)v361 + 4) = v366;
                    swift_bridgeObjectRetain(v366);
                    swift_bridgeObjectRelease(v367);
                  }
                  else
                  {
                    sub_984B0((uint64_t)v361);
                    v421 = v362[4];
                    v422 = *((_OWORD *)v362 + 1);
                    *(_OWORD *)v361 = *(_OWORD *)v362;
                    *((_OWORD *)v361 + 1) = v422;
                    *((_QWORD *)v361 + 4) = v421;
                  }
                }
                else if (v364)
                {
                  *(_QWORD *)v361 = *v362;
                  v415 = v362[1];
                  *((_QWORD *)v361 + 1) = v415;
                  *((_QWORD *)v361 + 2) = v362[2];
                  *((_QWORD *)v361 + 3) = v362[3];
                  v416 = v362[4];
                  *((_QWORD *)v361 + 4) = v416;
                  swift_bridgeObjectRetain(v415);
                  swift_bridgeObjectRetain(v416);
                }
                else
                {
                  v427 = *(_OWORD *)v362;
                  v428 = *((_OWORD *)v362 + 1);
                  *((_QWORD *)v361 + 4) = v362[4];
                  *(_OWORD *)v361 = v427;
                  *((_OWORD *)v361 + 1) = v428;
                }
                goto LABEL_43;
              }
              (*(void (**)(char *, uint64_t))(v265 + 8))(v262, v264);
            }
            v323 = sub_5C154(&qword_322F98);
            memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
            goto LABEL_110;
          }
          (*(void (**)(char *, uint64_t))(v104 + 8))(v241, v103);
        }
        v260 = sub_5C154(&qword_3217B8);
        memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
        goto LABEL_92;
      }
      (*(void (**)(char *, uint64_t))(v104 + 8))(v101, v103);
    }
    v239 = sub_5C154(&qword_3217B8);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
    goto LABEL_74;
  }
  if (v87)
  {
LABEL_28:
    v97 = sub_5C154(&qword_3217C0);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_43;
  }
  v438 = v10;
  v442 = a3;
  v446 = v4;
  *(_QWORD *)v84 = *(_QWORD *)v85;
  v88 = *((_QWORD *)v85 + 1);
  *((_QWORD *)v84 + 1) = v88;
  v89 = v9[5];
  v90 = &v84[v89];
  v91 = &v85[v89];
  v92 = type metadata accessor for LocalizerRequest(0);
  v93 = *(_QWORD *)(v92 - 8);
  v94 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v93 + 48);
  v95 = swift_bridgeObjectRetain(v88);
  if (v94(v91, 1, v92, v95))
  {
    v96 = sub_5C154(&qword_3217B8);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v90, v91, v92);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
  }
  v107 = v9[6];
  v108 = &v84[v107];
  v109 = &v85[v107];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v94)(&v85[v107], 1, v92))
  {
    v110 = sub_5C154(&qword_3217B8);
    memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v108, v109, v92);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v108, 0, 1, v92);
  }
  v84[v9[7]] = v85[v9[7]];
  v84[v9[8]] = v85[v9[8]];
  v111 = v9[9];
  v112 = &v84[v111];
  v113 = &v85[v111];
  v114 = type metadata accessor for ToolbarPrincipalType(0);
  v115 = *(_QWORD *)(v114 - 8);
  v434 = v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
  {
    v116 = sub_5C154(&qword_322F98);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v112, v113, v114);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
  }
  v117 = v9[10];
  v118 = *(_QWORD *)&v85[v117];
  *(_QWORD *)&v84[v117] = v118;
  v119 = v9[11];
  v120 = *(_QWORD *)&v85[v119];
  *(_QWORD *)&v84[v119] = v120;
  v84[v9[12]] = v85[v9[12]];
  v121 = v9[13];
  v122 = *(_QWORD *)&v85[v121];
  *(_QWORD *)&v84[v121] = v122;
  v123 = v9[14];
  v124 = &v84[v123];
  v125 = &v85[v123];
  *(_QWORD *)v124 = *v125;
  v126 = v125[1];
  *((_QWORD *)v124 + 1) = v126;
  v127 = v9[15];
  v432 = &v84[v127];
  v128 = &v85[v127];
  v129 = type metadata accessor for PageData(0);
  v130 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v129 - 8) + 16);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v122);
  v131 = swift_bridgeObjectRetain(v126);
  v130(v432, v128, v129, v131);
  v132 = v9[16];
  v133 = *(_QWORD *)&v85[v132];
  *(_QWORD *)&v84[v132] = v133;
  v134 = v9[17];
  v135 = &v84[v134];
  v136 = &v85[v134];
  v137 = type metadata accessor for PageMetrics(0);
  v138 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v137 - 8) + 16);
  v139 = swift_bridgeObjectRetain(v133);
  v138(v135, v136, v137, v139);
  v84[v9[18]] = v85[v9[18]];
  v140 = v9[19];
  v141 = *(_QWORD *)&v85[v140];
  *(_QWORD *)&v84[v140] = v141;
  v142 = v9[20];
  v143 = *(_QWORD *)&v85[v142];
  *(_QWORD *)&v84[v142] = v143;
  v84[v9[21]] = v85[v9[21]];
  v144 = v9[22];
  v145 = &v84[v144];
  v146 = &v85[v144];
  *(_QWORD *)v145 = *v146;
  v147 = v146[1];
  *((_QWORD *)v145 + 1) = v147;
  v148 = v9[23];
  v149 = &v84[v148];
  v150 = &v85[v148];
  v151 = v150[1];
  swift_bridgeObjectRetain(v141);
  swift_retain(v143);
  swift_bridgeObjectRetain(v147);
  if (v151)
  {
    *(_QWORD *)v149 = *v150;
    v152 = v150[1];
    *((_QWORD *)v149 + 1) = v152;
    *((_QWORD *)v149 + 2) = v150[2];
    *((_QWORD *)v149 + 3) = v150[3];
    v153 = v150[4];
    *((_QWORD *)v149 + 4) = v153;
    swift_bridgeObjectRetain(v152);
    v154 = swift_bridgeObjectRetain(v153);
  }
  else
  {
    v154 = *(__n128 *)v150;
    v155 = *((_OWORD *)v150 + 1);
    *((_QWORD *)v149 + 4) = v150[4];
    *(__n128 *)v149 = v154;
    *((_OWORD *)v149 + 1) = v155;
  }
  v5 = v434;
  v10 = v438;
  v4 = v446;
  (*(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v449 + 56))(v84, 0, 1, v9, v154);
  a3 = v442;
LABEL_43:
  *((_BYTE *)v5 + a3[7]) = *((_BYTE *)v4 + a3[7]);
  v156 = a3[8];
  v157 = (char *)v5 + v156;
  v158 = (char *)v4 + v156;
  v159 = sub_5C154(&qword_322E30);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 24))(v157, v158, v159);
  v160 = a3[9];
  v161 = (char *)v5 + v160;
  v162 = (char *)v4 + v160;
  LODWORD(v157) = v10((char *)v5 + v160, 1, v9);
  v163 = v10(v162, 1, v9);
  if (!(_DWORD)v157)
  {
    if (v163)
    {
      sub_6685C((uint64_t)v161, type metadata accessor for Page);
      goto LABEL_49;
    }
    *(_QWORD *)v161 = *(_QWORD *)v162;
    v174 = *((_QWORD *)v162 + 1);
    v175 = *((_QWORD *)v161 + 1);
    *((_QWORD *)v161 + 1) = v174;
    swift_bridgeObjectRetain(v174);
    swift_bridgeObjectRelease(v175);
    v176 = v9[5];
    v177 = &v161[v176];
    v178 = &v162[v176];
    v179 = type metadata accessor for LocalizerRequest(0);
    v180 = *(_QWORD *)(v179 - 8);
    v181 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v180 + 48);
    LODWORD(v175) = v181(v177, 1, v179);
    v182 = v181(v178, 1, v179);
    if ((_DWORD)v175)
    {
      if (!v182)
      {
        (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v177, v178, v179);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
        goto LABEL_80;
      }
    }
    else
    {
      if (!v182)
      {
        (*(void (**)(char *, char *, uint64_t))(v180 + 24))(v177, v178, v179);
LABEL_80:
        v246 = v9[6];
        v247 = &v161[v246];
        v248 = &v162[v246];
        v249 = v181(&v161[v246], 1, v179);
        v250 = v181(v248, 1, v179);
        if (v249)
        {
          if (!v250)
          {
            (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v247, v248, v179);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v247, 0, 1, v179);
            goto LABEL_98;
          }
        }
        else
        {
          if (!v250)
          {
            (*(void (**)(char *, char *, uint64_t))(v180 + 24))(v247, v248, v179);
LABEL_98:
            v161[v9[7]] = v162[v9[7]];
            v161[v9[8]] = v162[v9[8]];
            v270 = v9[9];
            v271 = &v161[v270];
            v272 = &v162[v270];
            v273 = type metadata accessor for ToolbarPrincipalType(0);
            v274 = *(_QWORD *)(v273 - 8);
            v275 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v274 + 48);
            v276 = v275(v271, 1, v273);
            v277 = v275(v272, 1, v273);
            if (v276)
            {
              if (!v277)
              {
                (*(void (**)(char *, char *, uint64_t))(v274 + 16))(v271, v272, v273);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v274 + 56))(v271, 0, 1, v273);
                goto LABEL_116;
              }
            }
            else
            {
              if (!v277)
              {
                (*(void (**)(char *, char *, uint64_t))(v274 + 24))(v271, v272, v273);
LABEL_116:
                v369 = v9[10];
                v370 = *(_QWORD *)&v162[v369];
                v371 = *(_QWORD *)&v161[v369];
                *(_QWORD *)&v161[v369] = v370;
                swift_bridgeObjectRetain(v370);
                swift_bridgeObjectRelease(v371);
                v372 = v9[11];
                v373 = *(_QWORD *)&v162[v372];
                v374 = *(_QWORD *)&v161[v372];
                *(_QWORD *)&v161[v372] = v373;
                swift_bridgeObjectRetain(v373);
                swift_bridgeObjectRelease(v374);
                v161[v9[12]] = v162[v9[12]];
                v375 = v9[13];
                v376 = *(_QWORD *)&v162[v375];
                v377 = *(_QWORD *)&v161[v375];
                *(_QWORD *)&v161[v375] = v376;
                swift_bridgeObjectRetain(v376);
                swift_bridgeObjectRelease(v377);
                v378 = v9[14];
                v379 = &v161[v378];
                v380 = &v162[v378];
                *(_QWORD *)v379 = *v380;
                v381 = v380[1];
                v382 = *((_QWORD *)v379 + 1);
                *((_QWORD *)v379 + 1) = v381;
                swift_bridgeObjectRetain(v381);
                swift_bridgeObjectRelease(v382);
                v383 = v9[15];
                v384 = &v161[v383];
                v385 = &v162[v383];
                v386 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v386 - 8) + 24))(v384, v385, v386);
                v387 = v9[16];
                v388 = *(_QWORD *)&v162[v387];
                v389 = *(_QWORD *)&v161[v387];
                *(_QWORD *)&v161[v387] = v388;
                swift_bridgeObjectRetain(v388);
                swift_bridgeObjectRelease(v389);
                v390 = v9[17];
                v391 = &v161[v390];
                v392 = &v162[v390];
                v393 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v393 - 8) + 24))(v391, v392, v393);
                v161[v9[18]] = v162[v9[18]];
                v394 = v9[19];
                v395 = *(_QWORD *)&v162[v394];
                v396 = *(_QWORD *)&v161[v394];
                *(_QWORD *)&v161[v394] = v395;
                swift_bridgeObjectRetain(v395);
                swift_bridgeObjectRelease(v396);
                v397 = v9[20];
                v398 = *(_QWORD *)&v162[v397];
                v399 = *(_QWORD *)&v161[v397];
                *(_QWORD *)&v161[v397] = v398;
                swift_retain(v398);
                swift_release(v399);
                v161[v9[21]] = v162[v9[21]];
                v400 = v9[22];
                v401 = &v161[v400];
                v402 = &v162[v400];
                *(_QWORD *)v401 = *v402;
                v403 = v402[1];
                v404 = *((_QWORD *)v401 + 1);
                *((_QWORD *)v401 + 1) = v403;
                swift_bridgeObjectRetain(v403);
                swift_bridgeObjectRelease(v404);
                v405 = v9[23];
                v406 = &v161[v405];
                v407 = &v162[v405];
                v408 = *(_QWORD *)&v161[v405 + 8];
                v409 = v407[1];
                if (v408)
                {
                  if (v409)
                  {
                    *(_QWORD *)v406 = *v407;
                    v410 = v407[1];
                    *((_QWORD *)v406 + 1) = v410;
                    swift_bridgeObjectRetain(v410);
                    swift_bridgeObjectRelease(v408);
                    *((_QWORD *)v406 + 2) = v407[2];
                    *((_QWORD *)v406 + 3) = v407[3];
                    v411 = v407[4];
                    v412 = *((_QWORD *)v406 + 4);
                    *((_QWORD *)v406 + 4) = v411;
                    swift_bridgeObjectRetain(v411);
                    swift_bridgeObjectRelease(v412);
                  }
                  else
                  {
                    sub_984B0((uint64_t)v406);
                    v423 = v407[4];
                    v424 = *((_OWORD *)v407 + 1);
                    *(_OWORD *)v406 = *(_OWORD *)v407;
                    *((_OWORD *)v406 + 1) = v424;
                    *((_QWORD *)v406 + 4) = v423;
                  }
                }
                else if (v409)
                {
                  *(_QWORD *)v406 = *v407;
                  v417 = v407[1];
                  *((_QWORD *)v406 + 1) = v417;
                  *((_QWORD *)v406 + 2) = v407[2];
                  *((_QWORD *)v406 + 3) = v407[3];
                  v418 = v407[4];
                  *((_QWORD *)v406 + 4) = v418;
                  swift_bridgeObjectRetain(v417);
                  swift_bridgeObjectRetain(v418);
                }
                else
                {
                  v429 = *(_OWORD *)v407;
                  v430 = *((_OWORD *)v407 + 1);
                  *((_QWORD *)v406 + 4) = v407[4];
                  *(_OWORD *)v406 = v429;
                  *((_OWORD *)v406 + 1) = v430;
                }
                return v5;
              }
              (*(void (**)(char *, uint64_t))(v274 + 8))(v271, v273);
            }
            v368 = sub_5C154(&qword_322F98);
            memcpy(v271, v272, *(_QWORD *)(*(_QWORD *)(v368 - 8) + 64));
            goto LABEL_116;
          }
          (*(void (**)(char *, uint64_t))(v180 + 8))(v247, v179);
        }
        v269 = sub_5C154(&qword_3217B8);
        memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
        goto LABEL_98;
      }
      (*(void (**)(char *, uint64_t))(v180 + 8))(v177, v179);
    }
    v245 = sub_5C154(&qword_3217B8);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
    goto LABEL_80;
  }
  if (v163)
  {
LABEL_49:
    v173 = sub_5C154(&qword_3217C0);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    return v5;
  }
  *(_QWORD *)v161 = *(_QWORD *)v162;
  v164 = *((_QWORD *)v162 + 1);
  *((_QWORD *)v161 + 1) = v164;
  v165 = v9[5];
  v166 = &v161[v165];
  v167 = &v162[v165];
  v168 = type metadata accessor for LocalizerRequest(0);
  v169 = *(_QWORD *)(v168 - 8);
  v170 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v169 + 48);
  v171 = swift_bridgeObjectRetain(v164);
  if (v170(v167, 1, v168, v171))
  {
    v172 = sub_5C154(&qword_3217B8);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v166, v167, v168);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
  }
  v183 = v9[6];
  v184 = &v161[v183];
  v185 = &v162[v183];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v170)(&v162[v183], 1, v168))
  {
    v186 = sub_5C154(&qword_3217B8);
    memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v184, v185, v168);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v184, 0, 1, v168);
  }
  v161[v9[7]] = v162[v9[7]];
  v161[v9[8]] = v162[v9[8]];
  v187 = v9[9];
  v188 = &v161[v187];
  v189 = &v162[v187];
  v190 = type metadata accessor for ToolbarPrincipalType(0);
  v191 = *(_QWORD *)(v190 - 8);
  v435 = v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v191 + 48))(v189, 1, v190))
  {
    v192 = sub_5C154(&qword_322F98);
    memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v191 + 16))(v188, v189, v190);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v191 + 56))(v188, 0, 1, v190);
  }
  v193 = v9[10];
  v194 = *(_QWORD *)&v162[v193];
  *(_QWORD *)&v161[v193] = v194;
  v195 = v9[11];
  v196 = *(_QWORD *)&v162[v195];
  *(_QWORD *)&v161[v195] = v196;
  v161[v9[12]] = v162[v9[12]];
  v197 = v9[13];
  v198 = *(_QWORD *)&v162[v197];
  *(_QWORD *)&v161[v197] = v198;
  v199 = v9[14];
  v200 = &v161[v199];
  v201 = &v162[v199];
  *(_QWORD *)v200 = *v201;
  v202 = v201[1];
  *((_QWORD *)v200 + 1) = v202;
  v203 = v9[15];
  v448 = &v161[v203];
  v204 = &v162[v203];
  v205 = type metadata accessor for PageData(0);
  v206 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v205 - 8) + 16);
  swift_bridgeObjectRetain(v194);
  swift_bridgeObjectRetain(v196);
  swift_bridgeObjectRetain(v198);
  v207 = swift_bridgeObjectRetain(v202);
  v206(v448, v204, v205, v207);
  v208 = v9[16];
  v209 = *(_QWORD *)&v162[v208];
  *(_QWORD *)&v161[v208] = v209;
  v210 = v9[17];
  v211 = &v161[v210];
  v212 = &v162[v210];
  v213 = type metadata accessor for PageMetrics(0);
  v214 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v213 - 8) + 16);
  v215 = swift_bridgeObjectRetain(v209);
  v214(v211, v212, v213, v215);
  v161[v9[18]] = v162[v9[18]];
  v216 = v9[19];
  v217 = *(_QWORD *)&v162[v216];
  *(_QWORD *)&v161[v216] = v217;
  v218 = v9[20];
  v219 = *(_QWORD *)&v162[v218];
  *(_QWORD *)&v161[v218] = v219;
  v161[v9[21]] = v162[v9[21]];
  v220 = v9[22];
  v221 = &v161[v220];
  v222 = &v162[v220];
  *(_QWORD *)v221 = *v222;
  v223 = v222[1];
  *((_QWORD *)v221 + 1) = v223;
  v224 = v9[23];
  v225 = &v161[v224];
  v226 = &v162[v224];
  v227 = v226[1];
  swift_bridgeObjectRetain(v217);
  swift_retain(v219);
  swift_bridgeObjectRetain(v223);
  if (v227)
  {
    *(_QWORD *)v225 = *v226;
    v228 = v226[1];
    *((_QWORD *)v225 + 1) = v228;
    *((_QWORD *)v225 + 2) = v226[2];
    *((_QWORD *)v225 + 3) = v226[3];
    v229 = v226[4];
    *((_QWORD *)v225 + 4) = v229;
    swift_bridgeObjectRetain(v228);
    v230 = swift_bridgeObjectRetain(v229);
  }
  else
  {
    v230 = *(__n128 *)v226;
    v231 = *((_OWORD *)v226 + 1);
    *((_QWORD *)v225 + 4) = v226[4];
    *(__n128 *)v225 = v230;
    *((_OWORD *)v225 + 1) = v231;
  }
  v5 = v435;
  (*(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v449 + 56))(v161, 0, 1, v9, v230);
  return v5;
}

uint64_t sub_10402C(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  unsigned int (*v114)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v115)(_QWORD, _QWORD, _QWORD);
  int *v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v114 = v12;
    v116 = v3;
    v118 = v11;
    *v8 = *v9;
    v14 = v10[5];
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = type metadata accessor for LocalizerRequest(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    if (v19(v16, 1, v17))
    {
      v20 = sub_5C154(&qword_3217B8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v21 = v10[6];
    v22 = (char *)v8 + v21;
    v23 = (char *)v9 + v21;
    if (v19((char *)v9 + v21, 1, v17))
    {
      v24 = sub_5C154(&qword_3217B8);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v23, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
    }
    v11 = v118;
    *((_BYTE *)v8 + v10[7]) = *((_BYTE *)v9 + v10[7]);
    *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
    v25 = v10[9];
    v26 = (char *)v8 + v25;
    v27 = (char *)v9 + v25;
    v28 = type metadata accessor for ToolbarPrincipalType(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_5C154(&qword_322F98);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v3 = v116;
    *(_QWORD *)((char *)v8 + v10[10]) = *(_QWORD *)((char *)v9 + v10[10]);
    *(_QWORD *)((char *)v8 + v10[11]) = *(_QWORD *)((char *)v9 + v10[11]);
    *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    *(_OWORD *)((char *)v8 + v10[14]) = *(_OWORD *)((char *)v9 + v10[14]);
    v31 = v10[15];
    v32 = (char *)v8 + v31;
    v33 = (char *)v9 + v31;
    v34 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    v35 = v10[17];
    v36 = (char *)v8 + v35;
    v37 = (char *)v9 + v35;
    v38 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
    *((_BYTE *)v8 + v10[18]) = *((_BYTE *)v9 + v10[18]);
    *(_QWORD *)((char *)v8 + v10[19]) = *(_QWORD *)((char *)v9 + v10[19]);
    *(_QWORD *)((char *)v8 + v10[20]) = *(_QWORD *)((char *)v9 + v10[20]);
    *((_BYTE *)v8 + v10[21]) = *((_BYTE *)v9 + v10[21]);
    *(_OWORD *)((char *)v8 + v10[22]) = *(_OWORD *)((char *)v9 + v10[22]);
    v39 = v10[23];
    v40 = (char *)v8 + v39;
    v41 = (char *)v9 + v39;
    v42 = *((_OWORD *)v41 + 1);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v42;
    *((_QWORD *)v40 + 4) = *((_QWORD *)v41 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v118 + 56))(v8, 0, 1, v10);
    v12 = v114;
  }
  v43 = v3[6];
  v44 = (_OWORD *)(a1 + v43);
  v45 = (_OWORD *)(a2 + v43);
  if (v12(a2 + v43, 1, v10))
  {
    v46 = sub_5C154(&qword_3217C0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v115 = v12;
    v117 = v3;
    v119 = v11;
    *v44 = *v45;
    v47 = v10[5];
    v48 = (char *)v44 + v47;
    v49 = (char *)v45 + v47;
    v50 = type metadata accessor for LocalizerRequest(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    if (v52(v49, 1, v50))
    {
      v53 = sub_5C154(&qword_3217B8);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    v54 = v10[6];
    v55 = (char *)v44 + v54;
    v56 = (char *)v45 + v54;
    if (v52((char *)v45 + v54, 1, v50))
    {
      v57 = sub_5C154(&qword_3217B8);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v55, v56, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v55, 0, 1, v50);
    }
    v11 = v119;
    *((_BYTE *)v44 + v10[7]) = *((_BYTE *)v45 + v10[7]);
    *((_BYTE *)v44 + v10[8]) = *((_BYTE *)v45 + v10[8]);
    v58 = v10[9];
    v59 = (char *)v44 + v58;
    v60 = (char *)v45 + v58;
    v61 = type metadata accessor for ToolbarPrincipalType(0);
    v62 = *(_QWORD *)(v61 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      v63 = sub_5C154(&qword_322F98);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
    }
    v3 = v117;
    *(_QWORD *)((char *)v44 + v10[10]) = *(_QWORD *)((char *)v45 + v10[10]);
    *(_QWORD *)((char *)v44 + v10[11]) = *(_QWORD *)((char *)v45 + v10[11]);
    *((_BYTE *)v44 + v10[12]) = *((_BYTE *)v45 + v10[12]);
    *(_QWORD *)((char *)v44 + v10[13]) = *(_QWORD *)((char *)v45 + v10[13]);
    *(_OWORD *)((char *)v44 + v10[14]) = *(_OWORD *)((char *)v45 + v10[14]);
    v64 = v10[15];
    v65 = (char *)v44 + v64;
    v66 = (char *)v45 + v64;
    v67 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v65, v66, v67);
    *(_QWORD *)((char *)v44 + v10[16]) = *(_QWORD *)((char *)v45 + v10[16]);
    v68 = v10[17];
    v69 = (char *)v44 + v68;
    v70 = (char *)v45 + v68;
    v71 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v69, v70, v71);
    *((_BYTE *)v44 + v10[18]) = *((_BYTE *)v45 + v10[18]);
    *(_QWORD *)((char *)v44 + v10[19]) = *(_QWORD *)((char *)v45 + v10[19]);
    *(_QWORD *)((char *)v44 + v10[20]) = *(_QWORD *)((char *)v45 + v10[20]);
    *((_BYTE *)v44 + v10[21]) = *((_BYTE *)v45 + v10[21]);
    *(_OWORD *)((char *)v44 + v10[22]) = *(_OWORD *)((char *)v45 + v10[22]);
    v72 = v10[23];
    v73 = (char *)v44 + v72;
    v74 = (char *)v45 + v72;
    v75 = *((_OWORD *)v74 + 1);
    *(_OWORD *)v73 = *(_OWORD *)v74;
    *((_OWORD *)v73 + 1) = v75;
    *((_QWORD *)v73 + 4) = *((_QWORD *)v74 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v119 + 56))(v44, 0, 1, v10);
    v12 = v115;
  }
  v76 = v3[8];
  *(_BYTE *)(a1 + v3[7]) = *(_BYTE *)(a2 + v3[7]);
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = sub_5C154(&qword_322E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
  v80 = v3[9];
  v81 = (_OWORD *)(a1 + v80);
  v82 = (_OWORD *)(a2 + v80);
  if (v12(v82, 1, v10))
  {
    v83 = sub_5C154(&qword_3217C0);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    *v81 = *v82;
    v84 = v10[5];
    v85 = (char *)v81 + v84;
    v86 = (char *)v82 + v84;
    v87 = type metadata accessor for LocalizerRequest(0);
    v88 = *(_QWORD *)(v87 - 8);
    v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    if (v89(v86, 1, v87))
    {
      v90 = sub_5C154(&qword_3217B8);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
    }
    v91 = v10[6];
    v92 = (char *)v81 + v91;
    v93 = (char *)v82 + v91;
    if (v89((char *)v82 + v91, 1, v87))
    {
      v94 = sub_5C154(&qword_3217B8);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v92, v93, v87);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v92, 0, 1, v87);
    }
    *((_BYTE *)v81 + v10[7]) = *((_BYTE *)v82 + v10[7]);
    *((_BYTE *)v81 + v10[8]) = *((_BYTE *)v82 + v10[8]);
    v95 = v10[9];
    v96 = (char *)v81 + v95;
    v97 = (char *)v82 + v95;
    v98 = type metadata accessor for ToolbarPrincipalType(0);
    v99 = *(_QWORD *)(v98 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
    {
      v100 = sub_5C154(&qword_322F98);
      memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v96, v97, v98);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
    }
    *(_QWORD *)((char *)v81 + v10[10]) = *(_QWORD *)((char *)v82 + v10[10]);
    *(_QWORD *)((char *)v81 + v10[11]) = *(_QWORD *)((char *)v82 + v10[11]);
    *((_BYTE *)v81 + v10[12]) = *((_BYTE *)v82 + v10[12]);
    *(_QWORD *)((char *)v81 + v10[13]) = *(_QWORD *)((char *)v82 + v10[13]);
    *(_OWORD *)((char *)v81 + v10[14]) = *(_OWORD *)((char *)v82 + v10[14]);
    v101 = v10[15];
    v102 = (char *)v81 + v101;
    v103 = (char *)v82 + v101;
    v104 = type metadata accessor for PageData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
    *(_QWORD *)((char *)v81 + v10[16]) = *(_QWORD *)((char *)v82 + v10[16]);
    v105 = v10[17];
    v106 = (char *)v81 + v105;
    v107 = (char *)v82 + v105;
    v108 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(v106, v107, v108);
    *((_BYTE *)v81 + v10[18]) = *((_BYTE *)v82 + v10[18]);
    *(_QWORD *)((char *)v81 + v10[19]) = *(_QWORD *)((char *)v82 + v10[19]);
    *(_QWORD *)((char *)v81 + v10[20]) = *(_QWORD *)((char *)v82 + v10[20]);
    *((_BYTE *)v81 + v10[21]) = *((_BYTE *)v82 + v10[21]);
    *(_OWORD *)((char *)v81 + v10[22]) = *(_OWORD *)((char *)v82 + v10[22]);
    v109 = v10[23];
    v110 = (char *)v81 + v109;
    v111 = (char *)v82 + v109;
    v112 = *((_OWORD *)v111 + 1);
    *(_OWORD *)v110 = *(_OWORD *)v111;
    *((_OWORD *)v110 + 1) = v112;
    *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v11 + 56))(v81, 0, 1, v10);
  }
  return a1;
}

_QWORD *sub_1049C4(_QWORD *a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(char *, uint64_t, uint64_t);
  int v122;
  int v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(char *, uint64_t, uint64_t);
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(char *, uint64_t, uint64_t);
  int v180;
  size_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t (*v189)(char *, uint64_t, uint64_t);
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  void *v317;
  _QWORD *v318;
  _QWORD *__src;
  _QWORD *__srca;
  void *__srcb;
  uint64_t (*v322)(char *, uint64_t, int *);
  uint64_t (*v323)(char *, uint64_t, int *);
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int *v328;
  int *v329;
  int *v330;
  int *v331;

  v5 = a1;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *((_OWORD *)v5 + 1) = v6;
  v5[4] = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = (_QWORD *)((char *)v5 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for Page(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12((char *)v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v322 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
      v324 = v11;
      v328 = a3;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v15 = v10[5];
      v16 = (char *)v8 + v15;
      v17 = &v9[v15];
      v18 = type metadata accessor for LocalizerRequest(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      if (v20(v17, 1, v18))
      {
        v21 = sub_5C154(&qword_3217B8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v32 = v10[6];
      v33 = (char *)v8 + v32;
      v34 = &v9[v32];
      if (v20(&v9[v32], 1, v18))
      {
        v35 = sub_5C154(&qword_3217B8);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v33, v34, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v33, 0, 1, v18);
      }
      v11 = v324;
      *((_BYTE *)v8 + v10[7]) = v9[v10[7]];
      *((_BYTE *)v8 + v10[8]) = v9[v10[8]];
      v36 = v10[9];
      v37 = (char *)v8 + v36;
      v38 = &v9[v36];
      v39 = type metadata accessor for ToolbarPrincipalType(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = sub_5C154(&qword_322F98);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      a3 = v328;
      *(_QWORD *)((char *)v8 + v10[10]) = *(_QWORD *)&v9[v10[10]];
      *(_QWORD *)((char *)v8 + v10[11]) = *(_QWORD *)&v9[v10[11]];
      *((_BYTE *)v8 + v10[12]) = v9[v10[12]];
      *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)&v9[v10[13]];
      *(_OWORD *)((char *)v8 + v10[14]) = *(_OWORD *)&v9[v10[14]];
      v42 = v10[15];
      v43 = (char *)v8 + v42;
      v44 = &v9[v42];
      v45 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)&v9[v10[16]];
      v46 = v10[17];
      v47 = (char *)v8 + v46;
      v48 = &v9[v46];
      v49 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
      *((_BYTE *)v8 + v10[18]) = v9[v10[18]];
      *(_QWORD *)((char *)v8 + v10[19]) = *(_QWORD *)&v9[v10[19]];
      *(_QWORD *)((char *)v8 + v10[20]) = *(_QWORD *)&v9[v10[20]];
      *((_BYTE *)v8 + v10[21]) = v9[v10[21]];
      *(_OWORD *)((char *)v8 + v10[22]) = *(_OWORD *)&v9[v10[22]];
      v50 = v10[23];
      v51 = (char *)v8 + v50;
      v52 = &v9[v50];
      v53 = *((_OWORD *)v52 + 1);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *((_OWORD *)v51 + 1) = v53;
      *((_QWORD *)v51 + 4) = *((_QWORD *)v52 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v324 + 56))((char *)v8, 0, 1, v10);
      goto LABEL_19;
    }
LABEL_7:
    v22 = sub_5C154(&qword_3217C0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_20;
  }
  if (v14)
  {
    sub_6685C((uint64_t)v8, type metadata accessor for Page);
    goto LABEL_7;
  }
  v322 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
  v325 = v11;
  v329 = a3;
  v23 = *((_QWORD *)v9 + 1);
  v24 = v8[1];
  *v8 = *(_QWORD *)v9;
  v8[1] = v23;
  swift_bridgeObjectRelease(v24);
  v25 = v10[5];
  v26 = (char *)v8 + v25;
  v27 = &v9[v25];
  v28 = type metadata accessor for LocalizerRequest(0);
  __src = *(_QWORD **)(v28 - 8);
  v29 = (uint64_t (*)(char *, uint64_t, uint64_t))__src[6];
  v30 = v29(v26, 1, v28);
  v31 = v29(v27, 1, v28);
  if (v30)
  {
    if (!v31)
    {
      ((void (*)(char *, char *, uint64_t))__src[4])(v26, v27, v28);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v26, 0, 1, v28);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v31)
  {
    ((void (*)(char *, uint64_t))__src[1])(v26, v28);
LABEL_59:
    v146 = sub_5C154(&qword_3217B8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
    goto LABEL_60;
  }
  ((void (*)(char *, char *, uint64_t))__src[5])(v26, v27, v28);
LABEL_60:
  v147 = v10[6];
  v148 = (char *)v8 + v147;
  v149 = &v9[v147];
  v150 = v29((char *)v8 + v147, 1, v28);
  v151 = v29(v149, 1, v28);
  v318 = v5;
  if (v150)
  {
    if (!v151)
    {
      ((void (*)(char *, char *, uint64_t))__src[4])(v148, v149, v28);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v148, 0, 1, v28);
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (v151)
  {
    ((void (*)(char *, uint64_t))__src[1])(v148, v28);
LABEL_77:
    v164 = sub_5C154(&qword_3217B8);
    memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    goto LABEL_78;
  }
  ((void (*)(char *, char *, uint64_t))__src[5])(v148, v149, v28);
LABEL_78:
  *((_BYTE *)v8 + v10[7]) = v9[v10[7]];
  *((_BYTE *)v8 + v10[8]) = v9[v10[8]];
  v165 = v10[9];
  v166 = (char *)v8 + v165;
  v167 = &v9[v165];
  v168 = type metadata accessor for ToolbarPrincipalType(0);
  v169 = *(_QWORD *)(v168 - 8);
  v170 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 48);
  v171 = v170(v166, 1, v168);
  __srcb = v167;
  v172 = v170(v167, 1, v168);
  if (v171)
  {
    v5 = v318;
    if (!v172)
    {
      (*(void (**)(char *, void *, uint64_t))(v169 + 32))(v166, __srcb, v168);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  v5 = v318;
  if (v172)
  {
    (*(void (**)(char *, uint64_t))(v169 + 8))(v166, v168);
LABEL_95:
    v192 = sub_5C154(&qword_322F98);
    memcpy(v166, __srcb, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
    goto LABEL_96;
  }
  (*(void (**)(char *, void *, uint64_t))(v169 + 40))(v166, __srcb, v168);
LABEL_96:
  v11 = v325;
  v193 = v10[10];
  v194 = *(_QWORD *)((char *)v8 + v193);
  *(_QWORD *)((char *)v8 + v193) = *(_QWORD *)&v9[v193];
  swift_bridgeObjectRelease(v194);
  v195 = v10[11];
  v196 = *(_QWORD *)((char *)v8 + v195);
  *(_QWORD *)((char *)v8 + v195) = *(_QWORD *)&v9[v195];
  swift_bridgeObjectRelease(v196);
  *((_BYTE *)v8 + v10[12]) = v9[v10[12]];
  v197 = v10[13];
  v198 = *(_QWORD *)((char *)v8 + v197);
  *(_QWORD *)((char *)v8 + v197) = *(_QWORD *)&v9[v197];
  swift_bridgeObjectRelease(v198);
  v199 = v10[14];
  v200 = (_QWORD *)((char *)v8 + v199);
  v201 = (uint64_t *)&v9[v199];
  v203 = *v201;
  v202 = v201[1];
  v204 = v200[1];
  *v200 = v203;
  v200[1] = v202;
  swift_bridgeObjectRelease(v204);
  v205 = v10[15];
  v206 = (char *)v8 + v205;
  v207 = &v9[v205];
  v208 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 40))(v206, v207, v208);
  v209 = v10[16];
  v210 = *(_QWORD *)((char *)v8 + v209);
  *(_QWORD *)((char *)v8 + v209) = *(_QWORD *)&v9[v209];
  swift_bridgeObjectRelease(v210);
  v211 = v10[17];
  v212 = (char *)v8 + v211;
  v213 = &v9[v211];
  v214 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v214 - 8) + 40))(v212, v213, v214);
  *((_BYTE *)v8 + v10[18]) = v9[v10[18]];
  v215 = v10[19];
  v216 = *(_QWORD *)((char *)v8 + v215);
  *(_QWORD *)((char *)v8 + v215) = *(_QWORD *)&v9[v215];
  swift_bridgeObjectRelease(v216);
  v217 = v10[20];
  v218 = *(_QWORD *)((char *)v8 + v217);
  *(_QWORD *)((char *)v8 + v217) = *(_QWORD *)&v9[v217];
  swift_release(v218);
  *((_BYTE *)v8 + v10[21]) = v9[v10[21]];
  v219 = v10[22];
  v220 = (_QWORD *)((char *)v8 + v219);
  v221 = (uint64_t *)&v9[v219];
  v223 = *v221;
  v222 = v221[1];
  v224 = v220[1];
  *v220 = v223;
  v220[1] = v222;
  swift_bridgeObjectRelease(v224);
  v225 = v10[23];
  v226 = (uint64_t)v8 + v225;
  v227 = &v9[v225];
  v228 = *(_QWORD *)(v226 + 8);
  if (!v228)
  {
    v272 = *((_OWORD *)v227 + 1);
    *(_OWORD *)v226 = *(_OWORD *)v227;
    *(_OWORD *)(v226 + 16) = v272;
    *(_QWORD *)(v226 + 32) = *((_QWORD *)v227 + 4);
    a3 = v329;
LABEL_19:
    v12 = (uint64_t (*)(char *, uint64_t, int *))v322;
    goto LABEL_20;
  }
  v229 = *((_QWORD *)v227 + 1);
  v12 = (uint64_t (*)(char *, uint64_t, int *))v322;
  if (v229)
  {
    *(_QWORD *)v226 = *(_QWORD *)v227;
    *(_QWORD *)(v226 + 8) = v229;
    swift_bridgeObjectRelease(v228);
    *(_QWORD *)(v226 + 16) = *((_QWORD *)v227 + 2);
    v230 = *((_QWORD *)v227 + 4);
    v231 = *(_QWORD *)(v226 + 32);
    *(_QWORD *)(v226 + 24) = *((_QWORD *)v227 + 3);
    *(_QWORD *)(v226 + 32) = v230;
    swift_bridgeObjectRelease(v231);
  }
  else
  {
    sub_984B0(v226);
    v273 = *((_OWORD *)v227 + 1);
    *(_OWORD *)v226 = *(_OWORD *)v227;
    *(_OWORD *)(v226 + 16) = v273;
    *(_QWORD *)(v226 + 32) = *((_QWORD *)v227 + 4);
  }
  a3 = v329;
LABEL_20:
  v54 = a3[6];
  v55 = (_QWORD *)((char *)v5 + v54);
  v56 = (char *)(a2 + v54);
  v57 = v12((char *)v5 + v54, 1, v10);
  v58 = v12(v56, 1, v10);
  if (v57)
  {
    if (!v58)
    {
      v323 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
      v326 = v11;
      v330 = a3;
      *(_OWORD *)v55 = *(_OWORD *)v56;
      v59 = v10[5];
      v60 = (char *)v55 + v59;
      v61 = &v56[v59];
      v62 = type metadata accessor for LocalizerRequest(0);
      v63 = *(_QWORD *)(v62 - 8);
      v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
      if (v64(v61, 1, v62))
      {
        v65 = sub_5C154(&qword_3217B8);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      }
      v76 = v10[6];
      v77 = (char *)v55 + v76;
      v78 = &v56[v76];
      if (v64(&v56[v76], 1, v62))
      {
        v79 = sub_5C154(&qword_3217B8);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v77, v78, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v77, 0, 1, v62);
      }
      v11 = v326;
      *((_BYTE *)v55 + v10[7]) = v56[v10[7]];
      *((_BYTE *)v55 + v10[8]) = v56[v10[8]];
      v80 = v10[9];
      v81 = (char *)v55 + v80;
      v82 = &v56[v80];
      v83 = type metadata accessor for ToolbarPrincipalType(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = sub_5C154(&qword_322F98);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v81, v82, v83);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
      a3 = v330;
      *(_QWORD *)((char *)v55 + v10[10]) = *(_QWORD *)&v56[v10[10]];
      *(_QWORD *)((char *)v55 + v10[11]) = *(_QWORD *)&v56[v10[11]];
      *((_BYTE *)v55 + v10[12]) = v56[v10[12]];
      *(_QWORD *)((char *)v55 + v10[13]) = *(_QWORD *)&v56[v10[13]];
      *(_OWORD *)((char *)v55 + v10[14]) = *(_OWORD *)&v56[v10[14]];
      v86 = v10[15];
      v87 = (char *)v55 + v86;
      v88 = &v56[v86];
      v89 = type metadata accessor for PageData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v87, v88, v89);
      *(_QWORD *)((char *)v55 + v10[16]) = *(_QWORD *)&v56[v10[16]];
      v90 = v10[17];
      v91 = (char *)v55 + v90;
      v92 = &v56[v90];
      v93 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v91, v92, v93);
      *((_BYTE *)v55 + v10[18]) = v56[v10[18]];
      *(_QWORD *)((char *)v55 + v10[19]) = *(_QWORD *)&v56[v10[19]];
      *(_QWORD *)((char *)v55 + v10[20]) = *(_QWORD *)&v56[v10[20]];
      *((_BYTE *)v55 + v10[21]) = v56[v10[21]];
      *(_OWORD *)((char *)v55 + v10[22]) = *(_OWORD *)&v56[v10[22]];
      v94 = v10[23];
      v95 = (char *)v55 + v94;
      v96 = &v56[v94];
      v97 = *((_OWORD *)v96 + 1);
      *(_OWORD *)v95 = *(_OWORD *)v96;
      *((_OWORD *)v95 + 1) = v97;
      *((_QWORD *)v95 + 4) = *((_QWORD *)v96 + 4);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v326 + 56))(v55, 0, 1, v10);
      goto LABEL_38;
    }
LABEL_26:
    v66 = sub_5C154(&qword_3217C0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_39;
  }
  if (v58)
  {
    sub_6685C((uint64_t)v55, type metadata accessor for Page);
    goto LABEL_26;
  }
  v323 = (uint64_t (*)(_QWORD *, uint64_t, int *))v12;
  v327 = v11;
  v331 = a3;
  v67 = *((_QWORD *)v56 + 1);
  v68 = v55[1];
  *v55 = *(_QWORD *)v56;
  v55[1] = v67;
  swift_bridgeObjectRelease(v68);
  v69 = v10[5];
  v70 = (char *)v55 + v69;
  v71 = &v56[v69];
  v72 = type metadata accessor for LocalizerRequest(0);
  __srca = *(_QWORD **)(v72 - 8);
  v73 = (uint64_t (*)(char *, uint64_t, uint64_t))__srca[6];
  v74 = v73(v70, 1, v72);
  v75 = v73(v71, 1, v72);
  if (v74)
  {
    if (!v75)
    {
      ((void (*)(char *, char *, uint64_t))__srca[4])(v70, v71, v72);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srca[7])(v70, 0, 1, v72);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v75)
  {
    ((void (*)(char *, uint64_t))__srca[1])(v70, v72);
LABEL_65:
    v152 = sub_5C154(&qword_3217B8);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
    goto LABEL_66;
  }
  ((void (*)(char *, char *, uint64_t))__srca[5])(v70, v71, v72);
LABEL_66:
  v153 = v10[6];
  v154 = (char *)v55 + v153;
  v155 = &v56[v153];
  v156 = v73((char *)v55 + v153, 1, v72);
  v157 = v73(v155, 1, v72);
  if (v156)
  {
    if (!v157)
    {
      ((void (*)(char *, char *, uint64_t))__srca[4])(v154, v155, v72);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srca[7])(v154, 0, 1, v72);
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  if (v157)
  {
    ((void (*)(char *, uint64_t))__srca[1])(v154, v72);
LABEL_83:
    v173 = sub_5C154(&qword_3217B8);
    memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_84;
  }
  ((void (*)(char *, char *, uint64_t))__srca[5])(v154, v155, v72);
LABEL_84:
  *((_BYTE *)v55 + v10[7]) = v56[v10[7]];
  *((_BYTE *)v55 + v10[8]) = v56[v10[8]];
  v174 = v10[9];
  v175 = (char *)v55 + v174;
  v176 = &v56[v174];
  v177 = type metadata accessor for ToolbarPrincipalType(0);
  v178 = *(_QWORD *)(v177 - 8);
  v179 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 48);
  v317 = v175;
  LODWORD(v175) = v179(v175, 1, v177);
  v180 = v179(v176, 1, v177);
  if ((_DWORD)v175)
  {
    if (v180)
    {
      v181 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
      v182 = v317;
LABEL_102:
      memcpy(v182, v176, v181);
      goto LABEL_123;
    }
    (*(void (**)(void *, char *, uint64_t))(v178 + 32))(v317, v176, v177);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v317, 0, 1, v177);
  }
  else
  {
    if (v180)
    {
      (*(void (**)(void *, uint64_t))(v178 + 8))(v317, v177);
      v181 = *(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_322F98) - 8) + 64);
      v182 = v317;
      goto LABEL_102;
    }
    (*(void (**)(void *, char *, uint64_t))(v178 + 40))(v317, v176, v177);
  }
LABEL_123:
  v11 = v327;
  v276 = v10[10];
  v277 = *(_QWORD *)((char *)v55 + v276);
  *(_QWORD *)((char *)v55 + v276) = *(_QWORD *)&v56[v276];
  swift_bridgeObjectRelease(v277);
  v278 = v10[11];
  v279 = *(_QWORD *)((char *)v55 + v278);
  *(_QWORD *)((char *)v55 + v278) = *(_QWORD *)&v56[v278];
  swift_bridgeObjectRelease(v279);
  *((_BYTE *)v55 + v10[12]) = v56[v10[12]];
  v280 = v10[13];
  v281 = *(_QWORD *)((char *)v55 + v280);
  *(_QWORD *)((char *)v55 + v280) = *(_QWORD *)&v56[v280];
  swift_bridgeObjectRelease(v281);
  v282 = v10[14];
  v283 = (_QWORD *)((char *)v55 + v282);
  v284 = (uint64_t *)&v56[v282];
  v286 = *v284;
  v285 = v284[1];
  v287 = v283[1];
  *v283 = v286;
  v283[1] = v285;
  swift_bridgeObjectRelease(v287);
  v288 = v10[15];
  v289 = (char *)v55 + v288;
  v290 = &v56[v288];
  v291 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v291 - 8) + 40))(v289, v290, v291);
  v292 = v10[16];
  v293 = *(_QWORD *)((char *)v55 + v292);
  *(_QWORD *)((char *)v55 + v292) = *(_QWORD *)&v56[v292];
  swift_bridgeObjectRelease(v293);
  v294 = v10[17];
  v295 = (char *)v55 + v294;
  v296 = &v56[v294];
  v297 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v297 - 8) + 40))(v295, v296, v297);
  *((_BYTE *)v55 + v10[18]) = v56[v10[18]];
  v298 = v10[19];
  v299 = *(_QWORD *)((char *)v55 + v298);
  *(_QWORD *)((char *)v55 + v298) = *(_QWORD *)&v56[v298];
  swift_bridgeObjectRelease(v299);
  v300 = v10[20];
  v301 = *(_QWORD *)((char *)v55 + v300);
  *(_QWORD *)((char *)v55 + v300) = *(_QWORD *)&v56[v300];
  swift_release(v301);
  *((_BYTE *)v55 + v10[21]) = v56[v10[21]];
  v302 = v10[22];
  v303 = (_QWORD *)((char *)v55 + v302);
  v304 = (uint64_t *)&v56[v302];
  v306 = *v304;
  v305 = v304[1];
  v307 = v303[1];
  *v303 = v306;
  v303[1] = v305;
  swift_bridgeObjectRelease(v307);
  v308 = v10[23];
  v309 = (uint64_t)v55 + v308;
  v310 = &v56[v308];
  v311 = *(_QWORD *)(v309 + 8);
  if (!v311)
  {
    v315 = *((_OWORD *)v310 + 1);
    *(_OWORD *)v309 = *(_OWORD *)v310;
    *(_OWORD *)(v309 + 16) = v315;
    *(_QWORD *)(v309 + 32) = *((_QWORD *)v310 + 4);
    a3 = v331;
LABEL_38:
    v12 = (uint64_t (*)(char *, uint64_t, int *))v323;
    goto LABEL_39;
  }
  v312 = *((_QWORD *)v310 + 1);
  v12 = (uint64_t (*)(char *, uint64_t, int *))v323;
  if (v312)
  {
    *(_QWORD *)v309 = *(_QWORD *)v310;
    *(_QWORD *)(v309 + 8) = v312;
    swift_bridgeObjectRelease(v311);
    *(_QWORD *)(v309 + 16) = *((_QWORD *)v310 + 2);
    v313 = *((_QWORD *)v310 + 4);
    v314 = *(_QWORD *)(v309 + 32);
    *(_QWORD *)(v309 + 24) = *((_QWORD *)v310 + 3);
    *(_QWORD *)(v309 + 32) = v313;
    swift_bridgeObjectRelease(v314);
  }
  else
  {
    sub_984B0(v309);
    v316 = *((_OWORD *)v310 + 1);
    *(_OWORD *)v309 = *(_OWORD *)v310;
    *(_OWORD *)(v309 + 16) = v316;
    *(_QWORD *)(v309 + 32) = *((_QWORD *)v310 + 4);
  }
  a3 = v331;
LABEL_39:
  v98 = a3[8];
  *((_BYTE *)v5 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v99 = (char *)v5 + v98;
  v100 = a2 + v98;
  v101 = sub_5C154(&qword_322E30);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 40))(v99, v100, v101);
  v102 = a3[9];
  v103 = (char *)v5 + v102;
  v104 = (_QWORD *)(a2 + v102);
  LODWORD(v99) = v12((char *)v5 + v102, 1, v10);
  v105 = v12((char *)v104, 1, v10);
  if (!(_DWORD)v99)
  {
    if (v105)
    {
      sub_6685C((uint64_t)v103, type metadata accessor for Page);
      goto LABEL_45;
    }
    v114 = v104[1];
    v115 = *((_QWORD *)v103 + 1);
    *(_QWORD *)v103 = *v104;
    *((_QWORD *)v103 + 1) = v114;
    swift_bridgeObjectRelease(v115);
    v116 = v10[5];
    v117 = &v103[v116];
    v118 = (char *)v104 + v116;
    v119 = type metadata accessor for LocalizerRequest(0);
    v120 = *(_QWORD *)(v119 - 8);
    v121 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48);
    v122 = v121(v117, 1, v119);
    v123 = v121(v118, 1, v119);
    if (v122)
    {
      if (!v123)
      {
        (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v117, v118, v119);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v117, 0, 1, v119);
        goto LABEL_72;
      }
    }
    else
    {
      if (!v123)
      {
        (*(void (**)(char *, char *, uint64_t))(v120 + 40))(v117, v118, v119);
LABEL_72:
        v159 = v10[6];
        v160 = &v103[v159];
        v161 = (char *)v104 + v159;
        v162 = v121(&v103[v159], 1, v119);
        v163 = v121(v161, 1, v119);
        if (v162)
        {
          if (!v163)
          {
            (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v160, v161, v119);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v160, 0, 1, v119);
            goto LABEL_90;
          }
        }
        else
        {
          if (!v163)
          {
            (*(void (**)(char *, char *, uint64_t))(v120 + 40))(v160, v161, v119);
LABEL_90:
            v103[v10[7]] = *((_BYTE *)v104 + v10[7]);
            v103[v10[8]] = *((_BYTE *)v104 + v10[8]);
            v184 = v10[9];
            v185 = &v103[v184];
            v186 = (char *)v104 + v184;
            v187 = type metadata accessor for ToolbarPrincipalType(0);
            v188 = *(_QWORD *)(v187 - 8);
            v189 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v188 + 48);
            v190 = v189(v185, 1, v187);
            v191 = v189(v186, 1, v187);
            if (v190)
            {
              if (!v191)
              {
                (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v185, v186, v187);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v185, 0, 1, v187);
                goto LABEL_106;
              }
            }
            else
            {
              if (!v191)
              {
                (*(void (**)(char *, char *, uint64_t))(v188 + 40))(v185, v186, v187);
LABEL_106:
                v233 = v10[10];
                v234 = *(_QWORD *)&v103[v233];
                *(_QWORD *)&v103[v233] = *(_QWORD *)((char *)v104 + v233);
                swift_bridgeObjectRelease(v234);
                v235 = v10[11];
                v236 = *(_QWORD *)&v103[v235];
                *(_QWORD *)&v103[v235] = *(_QWORD *)((char *)v104 + v235);
                swift_bridgeObjectRelease(v236);
                v103[v10[12]] = *((_BYTE *)v104 + v10[12]);
                v237 = v10[13];
                v238 = *(_QWORD *)&v103[v237];
                *(_QWORD *)&v103[v237] = *(_QWORD *)((char *)v104 + v237);
                swift_bridgeObjectRelease(v238);
                v239 = v10[14];
                v240 = &v103[v239];
                v241 = (_QWORD *)((char *)v104 + v239);
                v243 = *v241;
                v242 = v241[1];
                v244 = *((_QWORD *)v240 + 1);
                *(_QWORD *)v240 = v243;
                *((_QWORD *)v240 + 1) = v242;
                swift_bridgeObjectRelease(v244);
                v245 = v10[15];
                v246 = &v103[v245];
                v247 = (char *)v104 + v245;
                v248 = type metadata accessor for PageData(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 40))(v246, v247, v248);
                v249 = v10[16];
                v250 = *(_QWORD *)&v103[v249];
                *(_QWORD *)&v103[v249] = *(_QWORD *)((char *)v104 + v249);
                swift_bridgeObjectRelease(v250);
                v251 = v10[17];
                v252 = &v103[v251];
                v253 = (char *)v104 + v251;
                v254 = type metadata accessor for PageMetrics(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v254 - 8) + 40))(v252, v253, v254);
                v103[v10[18]] = *((_BYTE *)v104 + v10[18]);
                v255 = v10[19];
                v256 = *(_QWORD *)&v103[v255];
                *(_QWORD *)&v103[v255] = *(_QWORD *)((char *)v104 + v255);
                swift_bridgeObjectRelease(v256);
                v257 = v10[20];
                v258 = *(_QWORD *)&v103[v257];
                *(_QWORD *)&v103[v257] = *(_QWORD *)((char *)v104 + v257);
                swift_release(v258);
                v103[v10[21]] = *((_BYTE *)v104 + v10[21]);
                v259 = v10[22];
                v260 = &v103[v259];
                v261 = (_QWORD *)((char *)v104 + v259);
                v263 = *v261;
                v262 = v261[1];
                v264 = *((_QWORD *)v260 + 1);
                *(_QWORD *)v260 = v263;
                *((_QWORD *)v260 + 1) = v262;
                swift_bridgeObjectRelease(v264);
                v265 = v10[23];
                v266 = &v103[v265];
                v267 = (_QWORD *)((char *)v104 + v265);
                v268 = *(_QWORD *)&v103[v265 + 8];
                if (v268)
                {
                  v269 = v267[1];
                  if (v269)
                  {
                    *(_QWORD *)v266 = *v267;
                    *((_QWORD *)v266 + 1) = v269;
                    swift_bridgeObjectRelease(v268);
                    *((_QWORD *)v266 + 2) = v267[2];
                    v270 = v267[4];
                    v271 = *((_QWORD *)v266 + 4);
                    *((_QWORD *)v266 + 3) = v267[3];
                    *((_QWORD *)v266 + 4) = v270;
                    swift_bridgeObjectRelease(v271);
                    return v5;
                  }
                  sub_984B0((uint64_t)v266);
                }
                v274 = *((_OWORD *)v267 + 1);
                *(_OWORD *)v266 = *(_OWORD *)v267;
                *((_OWORD *)v266 + 1) = v274;
                *((_QWORD *)v266 + 4) = v267[4];
                return v5;
              }
              (*(void (**)(char *, uint64_t))(v188 + 8))(v185, v187);
            }
            v232 = sub_5C154(&qword_322F98);
            memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
            goto LABEL_106;
          }
          (*(void (**)(char *, uint64_t))(v120 + 8))(v160, v119);
        }
        v183 = sub_5C154(&qword_3217B8);
        memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        goto LABEL_90;
      }
      (*(void (**)(char *, uint64_t))(v120 + 8))(v117, v119);
    }
    v158 = sub_5C154(&qword_3217B8);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
    goto LABEL_72;
  }
  if (v105)
  {
LABEL_45:
    v113 = sub_5C154(&qword_3217C0);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    return v5;
  }
  *(_OWORD *)v103 = *(_OWORD *)v104;
  v106 = v10[5];
  v107 = &v103[v106];
  v108 = (char *)v104 + v106;
  v109 = type metadata accessor for LocalizerRequest(0);
  v110 = *(_QWORD *)(v109 - 8);
  v111 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
  if (v111(v108, 1, v109))
  {
    v112 = sub_5C154(&qword_3217B8);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v107, v108, v109);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
  }
  v124 = v10[6];
  v125 = &v103[v124];
  v126 = (char *)v104 + v124;
  if (v111((char *)v104 + v124, 1, v109))
  {
    v127 = sub_5C154(&qword_3217B8);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v125, v126, v109);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v125, 0, 1, v109);
  }
  v103[v10[7]] = *((_BYTE *)v104 + v10[7]);
  v103[v10[8]] = *((_BYTE *)v104 + v10[8]);
  v128 = v10[9];
  v129 = &v103[v128];
  v130 = (char *)v104 + v128;
  v131 = type metadata accessor for ToolbarPrincipalType(0);
  v132 = *(_QWORD *)(v131 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
  {
    v133 = sub_5C154(&qword_322F98);
    memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v129, v130, v131);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
  }
  *(_QWORD *)&v103[v10[10]] = *(_QWORD *)((char *)v104 + v10[10]);
  *(_QWORD *)&v103[v10[11]] = *(_QWORD *)((char *)v104 + v10[11]);
  v103[v10[12]] = *((_BYTE *)v104 + v10[12]);
  *(_QWORD *)&v103[v10[13]] = *(_QWORD *)((char *)v104 + v10[13]);
  *(_OWORD *)&v103[v10[14]] = *(_OWORD *)((char *)v104 + v10[14]);
  v134 = v10[15];
  v135 = &v103[v134];
  v136 = (char *)v104 + v134;
  v137 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v135, v136, v137);
  *(_QWORD *)&v103[v10[16]] = *(_QWORD *)((char *)v104 + v10[16]);
  v138 = v10[17];
  v139 = &v103[v138];
  v140 = (char *)v104 + v138;
  v141 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v139, v140, v141);
  v103[v10[18]] = *((_BYTE *)v104 + v10[18]);
  *(_QWORD *)&v103[v10[19]] = *(_QWORD *)((char *)v104 + v10[19]);
  *(_QWORD *)&v103[v10[20]] = *(_QWORD *)((char *)v104 + v10[20]);
  v103[v10[21]] = *((_BYTE *)v104 + v10[21]);
  *(_OWORD *)&v103[v10[22]] = *(_OWORD *)((char *)v104 + v10[22]);
  v142 = v10[23];
  v143 = &v103[v142];
  v144 = (char *)v104 + v142;
  v145 = *((_OWORD *)v144 + 1);
  *(_OWORD *)v143 = *(_OWORD *)v144;
  *((_OWORD *)v143 + 1) = v145;
  *((_QWORD *)v143 + 4) = *((_QWORD *)v144 + 4);
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v103, 0, 1, v10);
  return v5;
}

uint64_t sub_1060A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1060AC);
}

uint64_t sub_1060AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3217C0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_322E30);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_106154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_106160);
}

uint64_t sub_106160(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = sub_5C154(&qword_3217C0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5C154(&qword_322E30);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_106204(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[6];

  v7[0] = "(";
  sub_8C25C(319, &qword_3242D8, type metadata accessor for Page, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7[1] = v4;
    v7[2] = v4;
    v7[3] = &unk_25E430;
    sub_8C25C(319, (unint64_t *)&unk_3242E0, type metadata accessor for Page, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for IntentResult);
    if (v6 <= 0x3F)
    {
      v7[4] = *(_QWORD *)(v5 - 8) + 64;
      v7[5] = v4;
      swift_initStructMetadata(a1, 256, 6, v7, a1 + 16);
    }
  }
}

unint64_t sub_1062D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324328;
  if (!qword_324328)
  {
    v1 = type metadata accessor for IntentDispatcherError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentDispatcherError, v1);
    atomic_store(result, (unint64_t *)&qword_324328);
  }
  return result;
}

uint64_t sub_106318()
{
  return sub_F8664();
}

uint64_t sub_10632C@<X0>(NSObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSString v13;
  id v14;
  objc_class *v15;
  objc_class *v16;
  void *v17;
  id v18;
  id v19;
  NSString v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v23 = a3;
  v8 = type metadata accessor for LibraryAssetState(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)v4[4];
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "objectForKey:", v13);

  if (v14)
  {
    v15 = (objc_class *)type metadata accessor for LibraryAssetStateObserver(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v23, v8);
    v16 = (objc_class *)v4[2];
    v17 = (void *)v4[3];
    v15 = (objc_class *)type metadata accessor for LibraryAssetStateObserver(0);
    v18 = objc_allocWithZone(v15);
    swift_bridgeObjectRetain(a2);
    swift_unknownObjectRetain(v16);
    LibraryAssetStateObserver.init(id:initialState:libraryItemStateProvider:downloadProgressCenter:)(a1, a2, (uint64_t)v11, v16, v17);
    v14 = v19;
    v20 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setObject:forKey:", v14, v20);

  }
  result = sub_648E0(&qword_3244F0, type metadata accessor for LibraryAssetStateObserver, (uint64_t)&protocol conformance descriptor for LibraryAssetStateObserver);
  a4[3] = v15;
  a4[4] = result;
  *a4 = v14;
  return result;
}

void LibraryAssetStateObserver.__allocating_init(id:initialState:libraryItemStateProvider:downloadProgressCenter:)(NSObject *a1, unint64_t a2, uint64_t a3, objc_class *a4, void *a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  LibraryAssetStateObserver.init(id:initialState:libraryItemStateProvider:downloadProgressCenter:)(a1, a2, a3, a4, a5);
}

void sub_106514(uint64_t a1@<X8>)
{
  _QWORD *v1;
  void *v3;
  NSString v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  id v10;
  void *v11;
  NSString v12;
  NSString v13;
  id v14;
  id v15;
  double v16;
  double v17;
  char v18[24];

  v3 = (void *)v1[4];
  v4 = String._bridgeToObjectiveC()();
  v5 = (char *)objc_msgSend(v3, "objectForKey:", v4);

  if (v5)
  {
    v6 = &v5[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_untrackedLibraryAssetState];
    swift_beginAccess(&v5[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_untrackedLibraryAssetState], v18, 0, 0);
    v7 = type metadata accessor for LibraryAssetState(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v6, v7);

  }
  else
  {
    v8 = (void *)v1[2];
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "itemStateWithIdentifier:", v9);

    v11 = (void *)v1[3];
    v12 = String._bridgeToObjectiveC()();
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v11, "dynamicProgressForKind:instance:parameters:", v12, v13, 0);

    if (v14)
    {
      v15 = objc_msgSend(v14, "progress");
      objc_msgSend(v15, "doubleValue");
      v17 = v16;

      sub_1066D4(v10, a1, v17);
      swift_unknownObjectRelease(v14);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1066D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _BYTE *v24;
  id v25;
  unint64_t v26;
  char *v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  unsigned __int8 v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v39;
  _BYTE v40[12];
  unsigned int v41;
  double *v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  double v48;
  _BOOL4 v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  char v59[40];

  v55 = a2;
  v5 = type metadata accessor for LibraryAssetState.PlayState(0);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  __chkstk_darwin(v5);
  v52 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v7);
  v10 = &v40[-v9];
  v11 = type metadata accessor for LibraryAssetState.LocalState(0, v8);
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  __chkstk_darwin(v11);
  v13 = &v40[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v16 = (double *)&v40[-v15];
  v17 = type metadata accessor for LibraryAssetState.Ownership(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v40[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v24 = &v40[-v23];
  v25 = objc_msgSend(a1, "itemIdentifier", v22);
  _bridgeAnyObjectToAny(_:)(v25);
  swift_unknownObjectRelease(v25);
  if (swift_dynamicCast(v58, v59, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    v51 = v58[0];
    v26 = v58[1];
  }
  else
  {
    v51 = 0;
    v26 = 0xE000000000000000;
  }
  v50 = v26;
  v27 = (char *)objc_msgSend(a1, "download");
  v49 = v27 != (_BYTE *)&dword_0 + 1;
  v28 = a3;
  if (v27 != (_BYTE *)&dword_0 + 1)
    v28 = 0.0;
  v48 = v28;
  sub_108934((uint64_t)v24);
  v42 = v16;
  sub_108A78(v16, a3);
  sub_108E28((uint64_t)v10);
  objc_msgSend(a1, "readingProgressValue");
  v30 = v29;
  v47 = objc_msgSend(a1, "isFinished");
  v45 = objc_msgSend(a1, "hasSpecifiedFinishedDate");
  v46 = objc_msgSend(a1, "isInSamples");
  v43 = objc_msgSend(a1, "isSample");
  v31 = objc_msgSend(a1, "wantToRead");
  v44 = v24;
  v41 = v31;
  v32 = objc_msgSend(a1, "isPurchased");
  v33 = v20;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(v20, v24, v17);
  (*(void (**)(_BYTE *, double *, uint64_t))(v56 + 16))(v13, v16, v57);
  v34 = v17;
  v36 = v52;
  v35 = v53;
  v37 = v54;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v53 + 16))(v52, v10, v54);
  BYTE4(v39) = v32;
  BYTE3(v39) = v45;
  BYTE2(v39) = v47;
  BYTE1(v39) = v41;
  LOBYTE(v39) = v43;
  LibraryAssetState.init(id:ownership:localState:playState:downloadProgress:readingProgress:isInSamples:isLocalSample:isInWantToRead:isFinished:hasSpecifiedFinishedDate:isPurchased:)(v51, v50, v33, v13, v36, *(_QWORD *)&v48, v49, v46, v30, v39);
  swift_unknownObjectRelease(a1);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v10, v37);
  (*(void (**)(double *, uint64_t))(v56 + 8))(v42, v57);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v44, v34);
}

uint64_t sub_106A70()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_106AA4@<X0>(NSObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_10632C(a1, a2, a3, a4);
}

void sub_106AC4(uint64_t a1@<X8>)
{
  sub_106514(a1);
}

uint64_t LibraryAssetStateObserver.libraryAssetState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_25E470);
  v8[0] = v1;
  v4 = sub_648E0(&qword_324348, type metadata accessor for LibraryAssetStateObserver, (uint64_t)&protocol conformance descriptor for LibraryAssetStateObserver);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState, v8, 0, 0);
  v6 = type metadata accessor for LibraryAssetState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_106BA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_25E470);
  v9[0] = v3;
  v5 = sub_648E0(&qword_324348, type metadata accessor for LibraryAssetStateObserver, (uint64_t)&protocol conformance descriptor for LibraryAssetStateObserver);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState;
  swift_beginAccess(v3 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState, v9, 0, 0);
  v7 = type metadata accessor for LibraryAssetState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_106C6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v4 = type metadata accessor for LibraryAssetState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_25E470);
  v14 = v9;
  v15 = v8;
  v16 = v9;
  v11 = sub_648E0(&qword_324348, type metadata accessor for LibraryAssetStateObserver, (uint64_t)&protocol conformance descriptor for LibraryAssetStateObserver);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, KeyPath, sub_1094B4, v13, (char *)&type metadata for () + 8, v11);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_106D78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState, v6, 33, 0);
  v4 = type metadata accessor for LibraryAssetState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

void LibraryAssetStateObserver.init(id:initialState:libraryItemStateProvider:downloadProgressCenter:)(NSObject *a1, unint64_t a2, uint64_t a3, objc_class *a4, void *a5)
{
  void *v5;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject **v22;
  id v23;
  NSString v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t (*v49)(_BYTE *, uint64_t, __n128);
  uint64_t v50;
  char *v51;
  id v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __n128 v60;
  _BYTE *v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _BYTE v73[12];
  int v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  os_log_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  id v84;
  objc_class *ObjectType;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  objc_super v90;

  v87 = a3;
  ObjectType = (objc_class *)swift_getObjectType();
  v10 = sub_5C154(&qword_329740);
  v11 = __chkstk_darwin(v10);
  v13 = &v73[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v80 = type metadata accessor for LibraryAssetState.LocalState(0, v11);
  __chkstk_darwin(v80);
  v79 = &v73[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v77 = type metadata accessor for LibraryAssetState.Ownership(0);
  __chkstk_darwin(v77);
  v76 = &v73[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for LibraryAssetState(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v86 = &v73[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v83 = &v73[-v20];
  v21 = v5;
  ObservationRegistrar.init()(v21);
  v22 = (NSObject **)&v21[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_id];
  *v22 = a1;
  v22[1] = a2;
  *(_QWORD *)&v21[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_libraryItemStateProvider] = a4;
  *(_QWORD *)&v21[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_downloadProgressCenter] = a5;
  v23 = a5;
  swift_bridgeObjectRetain(a2);
  swift_unknownObjectRetain(a4);
  v24 = String._bridgeToObjectiveC()();
  v78 = a1;
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v23, "dynamicProgressForKind:instance:parameters:", v24, v25, 0);

  v84 = v23;
  if (v26)
  {
    v82 = v13;
    v27 = sub_5C154(&qword_324378);
    v28 = swift_allocObject(v27, 44, 7);
    *(_DWORD *)(v28 + 40) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)(v28 + 24) = v26;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)&v21[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_lockProtectedData] = v28;
    v81 = v17;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    v30 = v87;
    v29(&v21[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState], v87, v16);
    v29(&v21[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_untrackedLibraryAssetState], v30, v16);
    swift_unknownObjectRetain(v26);

    v90.receiver = v21;
    v90.super_class = ObjectType;
    v31 = -[NSObject init](&v90, "init");
    v32 = qword_31E5D0;
    v33 = (char *)v31;
    if (v32 != -1)
      swift_once(&qword_31E5D0, sub_126900);
    ObjectType = a4;
    v34 = type metadata accessor for Logger(0);
    sub_5240C(v34, (uint64_t)qword_325118);
    v35 = v83;
    v36 = v87;
    v29(v83, v87, v16);
    v37 = v86;
    v29(v86, v36, v16);
    swift_bridgeObjectRetain(a2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      v42 = swift_slowAlloc(32, -1);
      v75 = swift_slowAlloc(96, -1);
      v89 = v75;
      *(_DWORD *)v42 = 136315650;
      v74 = v41;
      swift_bridgeObjectRetain(a2);
      v88 = sub_57CD8((uint64_t)v78, a2, &v89);
      v78 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v42 + 4, v42 + 12);
      v43 = swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v42 + 12) = 2080;
      v44 = v76;
      LibraryAssetState.ownership.getter(v43);
      v45 = String.init<A>(describing:)(v44, v77);
      v47 = v46;
      v88 = sub_57CD8(v45, v46, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v42 + 14, v42 + 22);
      v48 = swift_bridgeObjectRelease(v47);
      v49 = *(uint64_t (**)(_BYTE *, uint64_t, __n128))(v81 + 8);
      v50 = v49(v35, v16, v48);
      *(_WORD *)(v42 + 22) = 2080;
      v51 = v33;
      v52 = v26;
      v53 = v79;
      v54 = v16;
      v55 = v86;
      LibraryAssetState.localState.getter(v50);
      v56 = v53;
      v26 = v52;
      v33 = v51;
      v57 = String.init<A>(describing:)(v56, v80);
      v59 = v58;
      v88 = sub_57CD8(v57, v58, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v42 + 24, v42 + 32);
      v60 = swift_bridgeObjectRelease(v59);
      v61 = v55;
      v16 = v54;
      v49(v61, v54, v60);
      v62 = v78;
      _os_log_impl(&dword_0, v78, (os_log_type_t)v74, "LibraryAssetState initial: id=%s, ownership=%s, localState=%s", (uint8_t *)v42, 0x20u);
      v63 = v75;
      swift_arrayDestroy(v75, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      v49 = *(uint64_t (**)(_BYTE *, uint64_t, __n128))(v81 + 8);
      ((void (*)(_BYTE *, uint64_t))v49)(v35, v16);
      ((void (*)(_BYTE *, uint64_t))v49)(v37, v16);

    }
    objc_msgSend(v26, "registerProgressObserver:", v33);
    v64 = *(_QWORD *)&v33[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_lockProtectedData];
    swift_retain(v64);
    os_unfair_lock_lock((os_unfair_lock_t)(v64 + 40));
    v65 = objc_msgSend(v26, "progress");
    objc_msgSend(v65, "doubleValue");
    v67 = v66;

    *(_QWORD *)(v64 + 32) = v67;
    os_unfair_lock_unlock((os_unfair_lock_t)(v64 + 40));
    swift_release(v64);
    v68 = type metadata accessor for TaskPriority(0);
    v69 = (uint64_t)v82;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v82, 1, 1, v68);
    v70 = swift_allocObject(&unk_2EC7F8, 24, 7);
    swift_unknownObjectWeakInit(v70 + 16);
    v71 = (_QWORD *)swift_allocObject(&unk_2EC820, 40, 7);
    v71[2] = 0;
    v71[3] = 0;
    v71[4] = v70;
    v72 = sub_1D979C(v69, (uint64_t)&unk_324398, (uint64_t)v71);
    swift_release(v72);

    swift_unknownObjectRelease(ObjectType);
    swift_unknownObjectRelease(v26);
    ((void (*)(uint64_t, uint64_t))v49)(v87, v16);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for LibraryAssetStateObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_3244D8;
  if (!qword_3244D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryAssetStateObserver);
  return result;
}

id LibraryAssetStateObserver.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_lockProtectedData];
  swift_retain(v2);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  objc_msgSend(*(id *)(v2 + 24), "unregisterProgressObserver:", v0);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  swift_release(v2);
  v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_libraryItemStateProvider], "stateCenter");
  objc_msgSend(v3, "removeObserver:", v0);

  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t sub_107698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch(sub_1076B0, 0, 0);
}

uint64_t sub_1076B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  void *v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_libraryItemStateProvider;
    v5 = objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_libraryItemStateProvider), "stateCenter");
    v6 = &v3[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_id];
    v7 = *(_QWORD *)&v3[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_id + 8];
    v8 = v3;
    swift_bridgeObjectRetain(v7);
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "addObserver:forItemIdentifier:", v8, v9, swift_bridgeObjectRelease(v7).n128_f64[0]);

    v10 = *(void **)&v3[v4];
    v11 = *((_QWORD *)v6 + 1);
    swift_bridgeObjectRetain(v11);
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v10, "itemStateWithIdentifier:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

    v14 = *(_QWORD *)&v8[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_lockProtectedData];
    v15 = swift_task_alloc(32);
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(v15 + 24) = v8;
    swift_retain(v14);
    os_unfair_lock_lock((os_unfair_lock_t)(v14 + 40));
    sub_107870((double *)(v14 + 16), *(_QWORD *)(v15 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 40));

    swift_release(v14);
    swift_unknownObjectRelease(v13);
    swift_task_dealloc(v15);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_107870(double *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;

  v4 = sub_5C154(&qword_329740);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LibraryAssetState(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - v12;
  v14 = *a1;
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRelease(*(_QWORD *)&v14);
  *(_QWORD *)a1 = a2;
  v15 = a1[2];
  v16 = (void *)swift_unknownObjectRetain(a2);
  sub_1066D4(v16, (uint64_t)v13, v15);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
  v18 = swift_allocObject(&unk_2EC7F8, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  type metadata accessor for MainActor(0);
  v19 = swift_retain(v18);
  v20 = static MainActor.shared.getter(v19);
  v21 = *(unsigned __int8 *)(v8 + 80);
  v22 = (v21 + 40) & ~v21;
  v23 = (char *)swift_allocObject(&unk_2EC930, v22 + v9, v21 | 7);
  *((_QWORD *)v23 + 2) = v20;
  *((_QWORD *)v23 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v23 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v23[v22], v10, v7);
  swift_release(v18);
  v24 = sub_1D98E8((uint64_t)v6, (uint64_t)&unk_324528, (uint64_t)v23);
  swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_107A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[8] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_107AE8, v7, v8);
}

uint64_t sub_107AE8()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    sub_107B64(*(_QWORD *)(v0 + 56));

  }
  **(_BYTE **)(v0 + 40) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_107B64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void (*v9)(_BYTE *, uint64_t, uint64_t);
  uint64_t v10;
  char v11;
  uint64_t (*v12)(_BYTE *, uint64_t);
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v15;
  _BYTE v16[16];
  _QWORD v17[3];
  _BYTE v18[24];

  v2 = v1;
  v4 = type metadata accessor for LibraryAssetState(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = v1 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_untrackedLibraryAssetState;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_untrackedLibraryAssetState, v18, 0, 0);
  v9 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v9(v7, v8, v4);
  v10 = sub_648E0(&qword_324508, (uint64_t (*)(uint64_t))&type metadata accessor for LibraryAssetState, (uint64_t)&protocol conformance descriptor for LibraryAssetState);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)(v7, a1, v4, v10);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8);
  result = v12(v7, v4);
  if ((v11 & 1) == 0)
  {
    swift_beginAccess(v8, v17, 33, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v8, a1, v4);
    swift_endAccess(v17);
    v9(v7, a1, v4);
    KeyPath = swift_getKeyPath(&unk_25E470);
    __chkstk_darwin(KeyPath);
    *(_QWORD *)&v16[-16] = v2;
    *(_QWORD *)&v16[-8] = v7;
    v17[0] = v2;
    v15 = sub_648E0(&qword_324348, type metadata accessor for LibraryAssetStateObserver, (uint64_t)&protocol conformance descriptor for LibraryAssetStateObserver);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v17, KeyPath, sub_109274, &v16[-32], (char *)&type metadata for () + 8, v15);
    swift_release(KeyPath);
    return v12(v7, v4);
  }
  return result;
}

void LibraryAssetStateObserver.libraryItemStateCenter(_:didUpdate:for:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char *v4;
  os_unfair_lock_s *v8;
  double *p_os_unfair_lock_opaque;
  os_unfair_lock_s *v10;
  __n128 v11;

  v8 = *(os_unfair_lock_s **)&v4[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_lockProtectedData];
  p_os_unfair_lock_opaque = (double *)&v8[4]._os_unfair_lock_opaque;
  v10 = v8 + 10;
  os_unfair_lock_lock(v8 + 10);
  sub_107DC4(p_os_unfair_lock_opaque, a2, v4, a3, a4, v11);
  os_unfair_lock_unlock(v10);
}

uint64_t sub_107DC4(double *a1, uint64_t a2, void *a3, uint64_t a4, char *a5, __n128 a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t (*v56)(char *, uint64_t, __n128);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  uint64_t v63;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;

  v75 = a5;
  v69 = a4;
  v72 = type metadata accessor for LibraryAssetState.LocalState(0, a6);
  __chkstk_darwin(v72);
  v71 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for LibraryAssetState.Ownership(0);
  __chkstk_darwin(v70);
  v68 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_329740);
  __chkstk_darwin(v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v13;
  v14 = type metadata accessor for LibraryAssetState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v74 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v77 = (char *)&v67 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v67 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v67 - v23;
  v25 = *a1;
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRelease(*(_QWORD *)&v25);
  *(_QWORD *)a1 = a2;
  v26 = a1[2];
  v27 = (void *)swift_unknownObjectRetain(a2);
  sub_1066D4(v27, (uint64_t)v24, v26);
  v28 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 1, 1, v28);
  v29 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v29(v21, v24, v14);
  type metadata accessor for MainActor(0);
  v30 = a3;
  v31 = static MainActor.shared.getter(v30);
  v32 = *(unsigned __int8 *)(v15 + 80);
  v33 = (v32 + 40) & ~v32;
  v34 = (char *)swift_allocObject(&unk_2EC908, v33 + v16, v32 | 7);
  *((_QWORD *)v34 + 2) = v31;
  *((_QWORD *)v34 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v34 + 4) = v30;
  v76 = v15;
  v35 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v36 = v14;
  v35(&v34[v33], v21, v14);
  v37 = sub_1D979C((uint64_t)v73, (uint64_t)&unk_324518, (uint64_t)v34);
  swift_release(v37);
  if (qword_31E5D0 != -1)
    swift_once(&qword_31E5D0, sub_126900);
  v38 = type metadata accessor for Logger(0);
  sub_5240C(v38, (uint64_t)qword_325118);
  v39 = v77;
  v29(v77, v24, v14);
  v40 = v74;
  v29(v74, v24, v14);
  v41 = (unint64_t)v75;
  swift_bridgeObjectRetain_n(v75, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.info.getter();
  v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    v46 = swift_slowAlloc(32, -1);
    LODWORD(v73) = v45;
    v47 = v46;
    v67 = swift_slowAlloc(96, -1);
    v79 = v67;
    *(_DWORD *)v47 = 136315650;
    swift_bridgeObjectRetain(v41);
    v78 = sub_57CD8(v69, v41, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 4, v47 + 12);
    v48 = swift_bridgeObjectRelease_n(v41, 3);
    v75 = v24;
    v49 = v40;
    *(_WORD *)(v47 + 12) = 2080;
    v50 = v68;
    v51 = v77;
    LibraryAssetState.ownership.getter(v48);
    v52 = String.init<A>(describing:)(v50, v70);
    v54 = v53;
    v78 = sub_57CD8(v52, v53, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 14, v47 + 22);
    v55 = swift_bridgeObjectRelease(v54);
    v56 = *(uint64_t (**)(char *, uint64_t, __n128))(v76 + 8);
    v57 = v56(v51, v36, v55);
    *(_WORD *)(v47 + 22) = 2080;
    v58 = v71;
    LibraryAssetState.localState.getter(v57);
    v59 = String.init<A>(describing:)(v58, v72);
    v61 = v60;
    v78 = sub_57CD8(v59, v60, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 24, v47 + 32);
    v62 = swift_bridgeObjectRelease(v61);
    v56(v49, v36, v62);
    _os_log_impl(&dword_0, v43, (os_log_type_t)v73, "LibraryAssetState changed: id=%s, ownership=%s, localState=%s", (uint8_t *)v47, 0x20u);
    v63 = v67;
    swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    return ((uint64_t (*)(char *, uint64_t))v56)(v75, v36);
  }
  else
  {
    v65 = v39;

    v66 = *(void (**)(char *, uint64_t))(v76 + 8);
    v66(v40, v36);
    v66(v65, v36);
    swift_bridgeObjectRelease_n(v41, 2);
    return ((uint64_t (*)(char *, uint64_t))v66)(v24, v36);
  }
}

uint64_t sub_1082F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_108364, v7, v8);
}

uint64_t sub_108364()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  sub_107B64(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void LibraryAssetStateObserver.dynamicProgressChanged(_:)(void *a1)
{
  char *v1;
  id v3;
  double v4;
  double v5;
  os_unfair_lock_s *v6;
  double *p_os_unfair_lock_opaque;
  os_unfair_lock_s *v8;

  v3 = objc_msgSend(a1, "progress");
  objc_msgSend(v3, "doubleValue");
  v5 = v4;

  v6 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver_lockProtectedData];
  p_os_unfair_lock_opaque = (double *)&v6[4]._os_unfair_lock_opaque;
  v8 = v6 + 10;
  os_unfair_lock_lock(v6 + 10);
  sub_1084F4(p_os_unfair_lock_opaque, (uint64_t)a1, v1, v5);
  os_unfair_lock_unlock(v8);
}

void sub_1084F4(double *a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  double v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;

  v8 = sub_5C154(&qword_329740);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LibraryAssetState(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v27 - v17;
  if (*((_QWORD *)a1 + 1) == a2)
  {
    a1[2] = a4;
    v19 = *a1;
    if (v19 != 0.0)
    {
      v20 = (void *)swift_unknownObjectRetain_n(*(_QWORD *)&v19, 2, v16);
      sub_1066D4(v20, (uint64_t)v18, a4);
      v21 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v18, v11);
      type metadata accessor for MainActor(0);
      v27 = a3;
      v22 = static MainActor.shared.getter(v27);
      v23 = *(unsigned __int8 *)(v12 + 80);
      v24 = (v23 + 40) & ~v23;
      v25 = (char *)swift_allocObject(&unk_2EC8E0, v24 + v13, v23 | 7);
      *((_QWORD *)v25 + 2) = v22;
      *((_QWORD *)v25 + 3) = &protocol witness table for MainActor;
      *((_QWORD *)v25 + 4) = v27;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v25[v24], v14, v11);
      v26 = sub_1D979C((uint64_t)v10, (uint64_t)&unk_324500, (uint64_t)v25);
      swift_release(v26);
      swift_unknownObjectRelease(*(_QWORD *)&v19);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    }
  }
}

uint64_t sub_1086E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter();
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1094B0, v7, v8);
}

void LibraryAssetStateObserver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.LibraryAssetStateObserver", 37, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_108870@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *v1;
  KeyPath = swift_getKeyPath(&unk_25E470);
  v9[0] = v3;
  v5 = sub_648E0(&qword_324348, type metadata accessor for LibraryAssetStateObserver, (uint64_t)&protocol conformance descriptor for LibraryAssetStateObserver);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState;
  swift_beginAccess(v3 + OBJC_IVAR____TtC11BookStoreUI25LibraryAssetStateObserver__libraryAssetState, v9, 0, 0);
  v7 = type metadata accessor for LibraryAssetState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v6, v7);
}

uint64_t sub_108934@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v10;
  unsigned int *v11;

  if (objc_msgSend(v1, "library") == &dword_4
    || objc_msgSend(v1, "library") == (char *)&dword_0 + 3
    && (objc_msgSend(v1, "assetIsPreorderable") & 1) == 0)
  {
    v3 = (unsigned int *)&enum case for LibraryAssetState.Ownership.purchased(_:);
    goto LABEL_7;
  }
  if (objc_msgSend(v1, "library") == (char *)&dword_4 + 1
    || objc_msgSend(v1, "download") == (char *)&dword_0 + 2 && (objc_msgSend(v1, "isSample") & 1) == 0)
  {
    v3 = (unsigned int *)&enum case for LibraryAssetState.Ownership.sideloaded(_:);
LABEL_7:
    v4 = *v3;
    v5 = type metadata accessor for LibraryAssetState.Ownership(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104);
    v7 = a1;
    v8 = v4;
    return v6(v7, v8, v5);
  }
  if (objc_msgSend(v1, "library") == (char *)&dword_0 + 3)
  {
    v3 = (unsigned int *)&enum case for LibraryAssetState.Ownership.preordered(_:);
    goto LABEL_7;
  }
  v10 = (char *)objc_msgSend(v1, "library");
  v5 = type metadata accessor for LibraryAssetState.Ownership(0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104);
  if (v10 == (_BYTE *)&dword_0 + 2)
    v11 = (unsigned int *)&enum case for LibraryAssetState.Ownership.purchasing(_:);
  else
    v11 = (unsigned int *)&enum case for LibraryAssetState.Ownership.unowned(_:);
  v8 = *v11;
  v7 = a1;
  return v6(v7, v8, v5);
}

uint64_t sub_108A78@<X0>(double *a1@<X8>, double a2@<D0>)
{
  void *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, _QWORD, uint64_t);
  uint64_t v18;
  char v19;
  double (*v20)(char *, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  char v22;
  id v23;
  __n128 v24;
  unsigned int *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(double *, uint64_t, uint64_t);
  double *v30;
  uint64_t v31;
  __n128 v33;
  double *v34;
  id v35;
  __n128 v36;
  unsigned int *v37;
  id v38;
  double *v39;

  v39 = a1;
  v4 = type metadata accessor for LibraryAssetState.Ownership(0);
  v5 = *(_QWORD **)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - v15;
  v38 = v2;
  sub_108934((uint64_t)&v38 - v15);
  v17 = (void (*)(char *, _QWORD, uint64_t))v5[13];
  v17(v13, enum case for LibraryAssetState.Ownership.purchased(_:), v4);
  v18 = sub_648E0(&qword_3244E8, (uint64_t (*)(uint64_t))&type metadata accessor for LibraryAssetState.Ownership, (uint64_t)&protocol conformance descriptor for LibraryAssetState.Ownership);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v4, v18);
  v20 = (double (*)(char *, uint64_t))v5[1];
  v20(v13, v4);
  v21 = (void (*)(char *, char *, uint64_t))v5[2];
  v21(v10, v16, v4);
  if ((v19 & 1) != 0)
  {
    v20(v10, v4);
    v21(v7, v16, v4);
LABEL_4:
    v20(v7, v4);
    goto LABEL_5;
  }
  v17(v13, enum case for LibraryAssetState.Ownership.sideloaded(_:), v4);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v13, v4, v18);
  v20(v13, v4);
  v20(v10, v4);
  v21(v7, v16, v4);
  if ((v22 & 1) != 0)
    goto LABEL_4;
  v17(v13, enum case for LibraryAssetState.Ownership.redownload(_:), v4);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v13, v4, v18);
  v20(v13, v4);
  v20(v7, v4);
  if ((v26 & 1) == 0)
  {
    v20(v16, v4);
    v25 = (unsigned int *)&enum case for LibraryAssetState.LocalState.unavailable(_:);
    goto LABEL_13;
  }
LABEL_5:
  v23 = v38;
  if (objc_msgSend(v38, "isUpdateAvailable"))
  {
    v20(v16, v4);
    v25 = (unsigned int *)&enum case for LibraryAssetState.LocalState.outdated(_:);
LABEL_13:
    v27 = *v25;
    v28 = type metadata accessor for LibraryAssetState.LocalState(0, v24);
    v29 = *(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104);
    v30 = v39;
LABEL_14:
    v31 = v27;
    return v29(v30, v31, v28);
  }
  if (objc_msgSend(v23, "download") == (char *)&dword_0 + 2)
  {
    v20(v16, v4);
    v25 = (unsigned int *)&enum case for LibraryAssetState.LocalState.latest(_:);
    goto LABEL_13;
  }
  if (objc_msgSend(v23, "isStreamable"))
  {
    v20(v16, v4);
    v25 = (unsigned int *)&enum case for LibraryAssetState.LocalState.streamable(_:);
    goto LABEL_13;
  }
  if (objc_msgSend(v23, "download") == (char *)&dword_0 + 1)
  {
    v33.n128_f64[0] = v20(v16, v4);
    v34 = v39;
    *v39 = a2;
    v27 = enum case for LibraryAssetState.LocalState.downloading(_:);
    v28 = type metadata accessor for LibraryAssetState.LocalState(0, v33);
    v29 = *(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104);
    v30 = v34;
    goto LABEL_14;
  }
  v35 = objc_msgSend(v23, "download");
  v36.n128_f64[0] = v20(v16, v4);
  v28 = type metadata accessor for LibraryAssetState.LocalState(0, v36);
  v29 = *(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104);
  if (v35)
    v37 = (unsigned int *)&enum case for LibraryAssetState.LocalState.unavailable(_:);
  else
    v37 = (unsigned int *)&enum case for LibraryAssetState.LocalState.downloadable(_:);
  v31 = *v37;
  v30 = v39;
  return v29(v30, v31, v28);
}

uint64_t sub_108E28@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  char *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (char *)objc_msgSend(v1, "play");
  if (v3 == (_BYTE *)&dword_0 + 2)
  {
    v4 = (unsigned int *)&enum case for LibraryAssetState.PlayState.paused(_:);
    goto LABEL_7;
  }
  if (v3 == (_BYTE *)&dword_0 + 1)
  {
    v4 = (unsigned int *)&enum case for LibraryAssetState.PlayState.playing(_:);
    goto LABEL_7;
  }
  v4 = (unsigned int *)&enum case for LibraryAssetState.PlayState.notActive(_:);
  if (v3)
  {
LABEL_7:
    v5 = *v4;
    goto LABEL_8;
  }
  v5 = enum case for LibraryAssetState.PlayState.notActive(_:);
LABEL_8:
  v6 = type metadata accessor for LibraryAssetState.PlayState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(a1, v5, v6);
}

uint64_t sub_108EAC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_108ED0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_108EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_324394);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_7BFF8;
  v3[5] = v2;
  return swift_task_switch(sub_1076B0, 0, 0);
}

uint64_t sub_108F5C()
{
  return sub_648E0(&qword_324348, type metadata accessor for LibraryAssetStateObserver, (uint64_t)&protocol conformance descriptor for LibraryAssetStateObserver);
}

uint64_t type metadata accessor for LibraryAssetStateObserverProvider()
{
  return objc_opt_self(_TtC11BookStoreUI33LibraryAssetStateObserverProvider);
}

uint64_t sub_108FA8()
{
  return type metadata accessor for LibraryAssetStateObserver(0);
}

uint64_t sub_108FB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = &unk_25E560;
  result = type metadata accessor for LibraryAssetState(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(result - 8) + 64;
    v7 = v6;
    v8 = &unk_25E578;
    v9 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v10 = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v11 = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 7, &v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for LibraryAssetStateObserver(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryAssetStateObserver);
}

uint64_t dispatch thunk of LibraryAssetStateObserver.__allocating_init(id:initialState:libraryItemStateProvider:downloadProgressCenter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t destroy for LibraryAssetStateObserver.LockProtectedData(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  return swift_unknownObjectRelease(a1[1]);
}

uint64_t *_s11BookStoreUI25LibraryAssetStateObserverC17LockProtectedDataVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for LibraryAssetStateObserver.LockProtectedData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v5);
  swift_unknownObjectRelease(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for LibraryAssetStateObserver.LockProtectedData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for LibraryAssetStateObserver.LockProtectedData()
{
  return &type metadata for LibraryAssetStateObserver.LockProtectedData;
}

void sub_1091A0(double *a1)
{
  uint64_t v1;

  sub_1084F4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 32), *(double *)(v1 + 24));
}

uint64_t sub_1091C0(double *a1, __n128 a2)
{
  uint64_t v2;

  return sub_107DC4(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(char **)(v2 + 40), a2);
}

uint64_t sub_1091E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryAssetState(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_3244FC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_7BFF8;
  return sub_1086E4(a1, v5, v6, v7, v8);
}

uint64_t sub_109274()
{
  uint64_t v0;

  return sub_106D78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_109290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for LibraryAssetState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10930C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryAssetState(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_324514);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_64780;
  return sub_1082F8(a1, v5, v6, v7, v8);
}

uint64_t sub_1093A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for LibraryAssetState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10941C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryAssetState(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_324524);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_7BFF8;
  return sub_107A78(a1, v5, v6, v7, v8);
}

uint64_t sub_1094B4()
{
  return sub_109274();
}

id MicaFileProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MicaFileProvider();
  return objc_msgSendSuper2(&v2, "init");
}

id MicaFileProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MicaFileProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1095F8(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  _QWORD v57[4];

  v57[3] = a4;
  if (a1 < 0)
    goto LABEL_44;
  v10 = swift_allocObject(&unk_2EC990, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v54 = swift_allocObject(&unk_2EC9B8, 24, 7);
  *(_QWORD *)(v54 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_109A94(v33 | (v11 << 16), v54, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v34 = v54;
LABEL_41:
    swift_release(v34);
    return (uint64_t)v14;
  }
  v49 = a1;
  v50 = v10;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v48 = v13 | (v12 << 16);
  v55 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v57[0] = v18;
    v57[1] = v19;
    v21 = a3(v57);
    if (v6)
    {
      swift_release(v50);
      swift_release(v54);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
      break;
    v15 = String.index(after:)(v15, a5, a6);
LABEL_11:
    if (v55 == v15 >> 14)
      goto LABEL_31;
  }
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    v15 = String.index(after:)(v15, a5, a6);
    *(_QWORD *)(v54 + 16) = v15;
    v16 = v15;
    v17 = v15;
    goto LABEL_11;
  }
  if (v15 >> 14 < v16 >> 14)
    goto LABEL_43;
  v23 = String.subscript.getter(v16, v15, a5, a6);
  v51 = v24;
  v52 = v23;
  v26 = v25;
  v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
    v14 = sub_57528(0, v14[2] + 1, 1, v14);
  v30 = v14[2];
  v29 = v14[3];
  if (v30 >= v29 >> 1)
    v14 = sub_57528((_QWORD *)(v29 > 1), v30 + 1, 1, v14);
  v14[2] = v30 + 1;
  v31 = &v14[4 * v30];
  v31[4] = v52;
  v31[5] = v26;
  v31[6] = v28;
  v31[7] = v51;
  *(_QWORD *)(v50 + 16) = v14;
  v32 = String.index(after:)(v15, a5, a6);
  v15 = v32;
  *(_QWORD *)(v54 + 16) = v32;
  if (v14[2] != v49)
  {
    v16 = v32;
    v17 = v32;
    goto LABEL_11;
  }
  v17 = v32;
  v16 = v32;
LABEL_31:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v35 = v50;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v35);
    v34 = v54;
    goto LABEL_41;
  }
  if (v55 >= v17 >> 14)
  {
    v36 = String.subscript.getter(v17, v48, a5, a6);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_57528(0, v14[2] + 1, 1, v14);
    v44 = v14[2];
    v43 = v14[3];
    if (v44 >= v43 >> 1)
      v14 = sub_57528((_QWORD *)(v43 > 1), v44 + 1, 1, v14);
    v14[2] = v44 + 1;
    v45 = &v14[4 * v44];
    v45[4] = v36;
    v45[5] = v38;
    v45[6] = v40;
    v45[7] = v42;
    v35 = v50;
    *(_QWORD *)(v50 + 16) = v14;
    goto LABEL_40;
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
LABEL_44:
  LOBYTE(v47) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v47, 1552, 0);
  __break(1u);
  return result;
}

uint64_t sub_109A94(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1)
    return v8 ^ 1u;
  if (a1 >> 14 >= v7 >> 14)
  {
    v10 = String.subscript.getter(v7, a1, a5, a6);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v17 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)(a4 + 16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_57528(0, v17[2] + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      v17 = sub_57528((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v17[2] = v20 + 1;
    v21 = &v17[4 * v20];
    v21[4] = v10;
    v21[5] = v12;
    v21[6] = v14;
    v21[7] = v16;
    return v8 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_109BEC(uint64_t a1, unint64_t a2)
{
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v25;
  id v26;
  id v27;
  _BYTE v28[16];
  _QWORD *v29;
  _QWORD v30[2];

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v4, "pathExtension");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v30[0] = 47;
  v30[1] = 0xE100000000000000;
  v29 = v30;
  swift_bridgeObjectRetain(a2);
  v9 = (_QWORD *)sub_1095F8(0x7FFFFFFFFFFFFFFFLL, 1, sub_109E8C, (uint64_t)v28, a1, a2);
  if (v6 == 1918984547 && v8 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, 1918984547, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v8);
    if ((v11 & 1) == 0)
      goto LABEL_15;
  }
  if (v9[2] != 2)
  {
LABEL_15:
    v22 = v9;
LABEL_16:
    swift_bridgeObjectRelease(v22);
    return 0;
  }
  v12 = v9[4];
  v13 = v9[5];
  v15 = v9[6];
  v14 = v9[7];
  swift_bridgeObjectRetain(v14);
  v16 = swift_bridgeObjectRelease(v9);
  v17 = Substring.init(_:)(1633905005, 0xE400000000000000, v16);
  v21 = v20;
  if (!v14)
  {
    swift_bridgeObjectRelease(v20);
    v22 = 0;
    goto LABEL_16;
  }
  if (v15 == v19 && v14 == v20 && v12 >> 16 == v17 >> 16 && v13 >> 16 == v18 >> 16)
  {
    swift_bridgeObjectRelease_n(v14, 2);
  }
  else
  {
    v25 = _stringCompareInternal(_:_:_:_:expecting:)(v15);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v21);
    if ((v25 & 1) == 0)
      return 0;
  }
  v26 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  v27 = objc_msgSend(v26, "currentPackage");

  if (v27)
  {
    v23 = Package.data(atPath:)(a1, a2);

    return v23;
  }
  return 0;
}

uint64_t type metadata accessor for MicaFileProvider()
{
  return objc_opt_self(BSUIMicaFileProvider);
}

uint64_t method lookup function for MicaFileProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MicaFileProvider);
}

uint64_t dispatch thunk of MicaFileProvider.data(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_20.filesize + (swift_isaMask & *v0)))();
}

uint64_t sub_109E78(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_86850(result, a2);
  return result;
}

uint64_t sub_109E8C(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

uint64_t sub_109EE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_109F04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

ValueMetadata *type metadata accessor for SeriesListFilterActionImplementation()
{
  return &type metadata for SeriesListFilterActionImplementation;
}

unint64_t sub_109F28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324558;
  if (!qword_324558)
  {
    v1 = type metadata accessor for SeriesListFilterAction(255);
    result = swift_getWitnessTable(&unk_264340, v1);
    atomic_store(result, &qword_324558);
  }
  return result;
}

uint64_t sub_109F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3[7] = a1;
  v3[8] = a3;
  v4 = sub_5C154(&qword_320A48);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[9] = v5;
  *v5 = v3;
  v5[1] = sub_109FEC;
  return BaseObjectGraph.inject<A>(_:)(v3 + 2, v4, v4);
}

uint64_t sub_109FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10A1F0;
  else
    v3 = sub_10A050;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10A050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  sub_66898((_QWORD *)(v0 + 16), v2);
  *(_BYTE *)(v0 + 104) = *(_BYTE *)v1;
  v4 = (_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  sub_66898(v4, v5);
  v7 = ContentInfo.id.getter(v5, *(_QWORD *)(v6 + 8));
  v9 = v8;
  *(_QWORD *)(v0 + 88) = v8;
  v10 = *(int **)(v3 + 72);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  *(_QWORD *)(v0 + 96) = v11;
  *v11 = v0;
  v11[1] = sub_10A124;
  return v13(v0 + 104, v7, v9, v2, v3);
}

uint64_t sub_10A124()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10A180, 0, 0);
}

uint64_t sub_10A180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = enum case for ActionOutcome.performed(_:);
  v3 = type metadata accessor for ActionOutcome(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v1, v2, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10A1F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10A1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = sub_5C154(&qword_329740);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SeriesListFilterAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_10A374(a1, (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_2ECA00, v11 + v9, v10 | 7);
  *(_QWORD *)(v12 + 16) = a2;
  sub_10A48C((uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  sub_5C154(&qword_3208F8);
  v13 = swift_retain(a2);
  v14 = Promise.__allocating_init()(v13);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_2ECA28, 56, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = &unk_324568;
  v16[5] = v12;
  v16[6] = v14;
  swift_retain(v14);
  v17 = sub_174AF8((uint64_t)v6, (uint64_t)&unk_320900, (uint64_t)v16);
  swift_release(v17);
  return v14;
}

uint64_t sub_10A374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesListFilterAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10A3B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for SeriesListFilterAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + *(int *)(v1 + 28);
  v7 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v0 + v4 + *(int *)(v1 + 32);
  v9 = type metadata accessor for ClickData(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10A48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesListFilterAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10A4D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesListFilterAction(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_324564);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_64780;
  return sub_109F70(a1, v5, v6);
}

uint64_t sub_10A550()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t ContentKind.segmentedItemTitleForAnalytics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t, __n128);
  int v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for ContentKind(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v13 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16);
  v9((char *)&v13 - v7, v0, v1, v6);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v8, v1);
  if (v10 == enum case for ContentKind.pdf(_:))
    return 4605008;
  if (v10 == enum case for ContentKind.audiobook(_:))
    return 0x6F6F626F69647541;
  if (v10 == enum case for ContentKind.regularBook(_:))
    return 0x736B6F6F42;
  if (v10 == enum case for ContentKind.manga(_:))
    return 0x61676E614DLL;
  if (v10 == enum case for ContentKind.unknownBook(_:))
    return 0x206E776F6E6B6E55;
  ((void (*)(char *, uint64_t, uint64_t))v9)(v4, v0, v1);
  v11 = String.init<A>(reflecting:)(v4, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  return v11;
}

uint64_t SeriesRoomListHeaderSegmentedItem.init(contentKind:pageIntent:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v6 = (int *)type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  *a3 = 0;
  a3[1] = 0;
  v7 = (char *)a3 + v6[5];
  v8 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *((_BYTE *)a3 + v6[6]) = 0;
  v9 = (char *)a3 + v6[7];
  v10 = type metadata accessor for ContentKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a1, v10);
  return sub_5DC98(a2, (uint64_t)a3 + v6[8]);
}

uint64_t type metadata accessor for SeriesRoomListHeaderSegmentedItem(uint64_t a1)
{
  uint64_t result;

  result = qword_3245F0;
  if (!qword_3245F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesRoomListHeaderSegmentedItem);
  return result;
}

void Array<A>.sort()()
{
  unint64_t *v0;

  sub_10CFBC(v0);
}

uint64_t SeriesRoomListHeaderSegmentedItem.localizableSubtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 20), a1, &qword_3217B8);
}

uint64_t SeriesRoomListHeaderSegmentedItem.isDisabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SeriesRoomListHeaderSegmentedItem(0) + 24));
}

uint64_t SeriesRoomListHeaderSegmentedItem.contentKind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesRoomListHeaderSegmentedItem(0) + 28);
  v4 = type metadata accessor for ContentKind(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesRoomListHeaderSegmentedItem.pageIntent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SeriesRoomListHeaderSegmentedItem(0) + 32);
  return sub_5E0D8(v3, a1);
}

uint64_t SeriesRoomListHeaderSegmentedItem.action(with:containingShelfID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  __n128 v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, __n128);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  void (*v75)(uint64_t *, uint64_t, uint64_t, uint64_t);
  char *v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t, uint64_t);
  char *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  unint64_t v91;
  unint64_t v92;
  __n128 v93;
  char **v94;
  void (*v95)(uint64_t, _QWORD, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t *, _QWORD, uint64_t);
  _QWORD *v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  __n128 v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  void (*v128)(char *, char *, uint64_t);
  char *v129;
  unint64_t v130;
  unint64_t v131;
  __n128 v132;
  char **v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  __n128 v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  void (*v157)(_QWORD *, char *, uint64_t);
  _QWORD *v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __n128 v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  _QWORD *v183;
  void (*v184)(char *, uint64_t);
  uint64_t v185;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  char **v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  __int128 v201;
  char **v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  void (*v233)(char *, _QWORD, uint64_t);
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  __int128 v252;
  _QWORD v253[5];
  _QWORD v254[5];

  v237 = a3;
  v223 = a2;
  v243 = a1;
  v222 = a4;
  v214 = type metadata accessor for Metrics.Location(0, a5);
  v213 = *(_QWORD *)(v214 - 8);
  v5 = __chkstk_darwin(v214);
  v212 = (char *)&v187 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for Metrics.ClickActionType(0, v5);
  v210 = *(_QWORD *)(v211 - 8);
  v7 = __chkstk_darwin(v211);
  v209 = (char *)&v187 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for Metrics.TargetType(0, v7);
  v207 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v206 = (char *)&v187 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = type metadata accessor for ContentKind(0);
  v204 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v203 = (char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_324570);
  v242 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v187 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v187 - v15;
  __chkstk_darwin(v17);
  v224 = (uint64_t)&v187 - v18;
  v20 = __chkstk_darwin(v19);
  v225 = (uint64_t)&v187 - v21;
  v200 = type metadata accessor for LinkActionType(0, v20);
  v198 = *(_QWORD *)(v200 - 8);
  v22 = __chkstk_darwin(v200);
  v199 = (char *)&v187 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for ClickData.TargetType(0, v22);
  v195 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v197 = (char *)&v187 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_31F590);
  __chkstk_darwin(v25);
  v229 = (char *)&v187 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5C154(&qword_31EF08);
  v240 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v241 = (char *)&v187 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v238 = (char *)&v187 - v30;
  __chkstk_darwin(v31);
  v202 = (char **)((char *)&v187 - v32);
  __chkstk_darwin(v33);
  v239 = (char *)&v187 - v34;
  __chkstk_darwin(v35);
  v188 = (char *)&v187 - v36;
  __chkstk_darwin(v37);
  v194 = (char **)((char *)&v187 - v38);
  v221 = type metadata accessor for ActionMetrics(0);
  v220 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221);
  v219 = (char *)&v187 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v232 = (char *)&v187 - v41;
  __chkstk_darwin(v42);
  v228 = (char *)&v187 - v43;
  __chkstk_darwin(v44);
  v226 = (char *)&v187 - v45;
  v231 = sub_5C154(&qword_3200B8);
  v230 = *(_QWORD *)(v231 - 8);
  __chkstk_darwin(v231);
  v236 = (char *)&v187 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v235 = (char *)&v187 - v48;
  v49 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
  __chkstk_darwin(v49);
  v51 = (char *)&v187 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  __chkstk_darwin(v227);
  v53 = (char *)&v187 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5C154(&qword_322820);
  v55 = __chkstk_darwin(v54);
  v57 = (char *)&v187 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = v58;
  v59 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v58 + 16);
  v59(v57, v243, v54, v55);
  sub_5E11C(v234, (uint64_t)v53, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  SegmentedControlViewModel.selection.setter(v53, v54);
  v215 = v57;
  v217 = v54;
  ((void (*)(char *, char *, uint64_t))v59)(v51, v57, v54);
  v60 = sub_5C154(&qword_324578);
  v61 = *(unsigned __int8 *)(v242 + 80);
  v62 = (v61 + 32) & ~v61;
  v243 = *(_QWORD *)(v242 + 72);
  v193 = 2 * v243;
  v190 = v60;
  v189 = v61 | 7;
  v63 = swift_allocObject(v60, v62 + 2 * v243, v61 | 7);
  v201 = xmmword_255F00;
  *(_OWORD *)(v63 + 16) = xmmword_255F00;
  v191 = v62;
  v187 = v63;
  v64 = (uint64_t *)(v63 + v62);
  v218 = v51;
  if (v237)
  {
    v65 = sub_5C154(&qword_324580);
    v66 = *(_QWORD *)(sub_5C154(&qword_324588) - 8);
    v67 = swift_allocObject(v65, ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72), *(unsigned __int8 *)(v66 + 80) | 7);
    *(_OWORD *)(v67 + 16) = xmmword_258070;
    v249 = v49;
    v250 = sub_648E0(&qword_323AA8, type metadata accessor for SeriesRoomListHeaderComponentModel, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderComponentModel);
    v68 = sub_668BC(&v248);
    sub_5E11C((uint64_t)v51, (uint64_t)v68, type metadata accessor for SeriesRoomListHeaderComponentModel);
    v242 = type metadata accessor for Page(0);
    v69 = type metadata accessor for Shelf(0);
    v70 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
    v71 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
    v72 = v237;
    v73 = swift_bridgeObjectRetain(v237);
    PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.init(model:shelfID:)(&v248, v223, v72, v242, v69, v70, v71, v73);
    *v64 = v67;
    v74 = v240;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v240 + 104))(v64, enum case for PageUpdateInstruction.replaceShelfHeaders<A, B>(_:), v27);
    v75 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v74 + 56);
    v75(v64, 0, 1, v27);
  }
  else
  {
    v74 = v240;
    v75 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v240 + 56);
    v75(v64, 1, 1, v27);
  }
  v76 = (char *)v64 + v243;
  sub_5E0D8(v234 + *(int *)(v227 + 32), (uint64_t)v64 + v243);
  v233 = *(void (**)(char *, _QWORD, uint64_t))(v74 + 104);
  v233(v76, enum case for PageUpdateInstruction.replacePage<A, B>(_:), v27);
  v192 = v75;
  v77.n128_f64[0] = ((double (*)(char *, _QWORD, uint64_t, uint64_t))v75)(v76, 0, 1, v27);
  static ActionMetrics.notInstrumented.getter(v77);
  v78 = (uint64_t)v64;
  v79 = v225;
  sub_5E1A4(v78, v225, &qword_324570);
  v80 = v224;
  v81 = v240;
  sub_66F14(v79, v224, &qword_324570);
  v242 = *(_QWORD *)(v81 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v242)(v80, 1, v27) == 1)
  {
    sub_5E09C(v80, &qword_324570);
    v82 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    v83 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
    v84 = v188;
    v83(v188, v80, v27);
    v83(v239, (uint64_t)v84, v27);
    v82 = (char *)_swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      v82 = (char *)sub_57648(0, _swiftEmptyArrayStorage[2] + 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v86 = *((_QWORD *)v82 + 2);
    v85 = *((_QWORD *)v82 + 3);
    if (v86 >= v85 >> 1)
      v82 = (char *)sub_57648(v85 > 1, v86 + 1, 1, (unint64_t)v82);
    *((_QWORD *)v82 + 2) = v86 + 1;
    v83(&v82[((*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80))+ *(_QWORD *)(v240 + 72) * v86], (uint64_t)v239, v27);
    v80 = v224;
  }
  v87 = (uint64_t)v76;
  v88 = v225;
  sub_5E1A4(v87, v225, &qword_324570);
  sub_66F14(v88, v80, &qword_324570);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v242)(v80, 1, v27) == 1)
  {
    sub_5E09C(v80, &qword_324570);
  }
  else
  {
    v89 = *(void (**)(char *, uint64_t, uint64_t))(v240 + 32);
    v90 = v188;
    v89(v188, v80, v27);
    v89(v239, (uint64_t)v90, v27);
    if ((swift_isUniquelyReferenced_nonNull_native(v82) & 1) == 0)
      v82 = (char *)sub_57648(0, *((_QWORD *)v82 + 2) + 1, 1, (unint64_t)v82);
    v92 = *((_QWORD *)v82 + 2);
    v91 = *((_QWORD *)v82 + 3);
    if (v92 >= v91 >> 1)
      v82 = (char *)sub_57648(v91 > 1, v92 + 1, 1, (unint64_t)v82);
    *((_QWORD *)v82 + 2) = v92 + 1;
    v89(&v82[((*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80))+ *(_QWORD *)(v240 + 72) * v92], (uint64_t)v239, v27);
  }
  v93 = swift_bridgeObjectRelease(v187);
  v94 = v194;
  *v194 = v82;
  LODWORD(v188) = enum case for PageUpdateInstruction.compound<A, B>(_:);
  v95 = (void (*)(uint64_t, _QWORD, uint64_t))v233;
  ((void (*)(char **, __n128))v233)(v94, v93);
  v96 = v197;
  (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v197, enum case for ClickData.TargetType.navigate(_:), v196);
  v97 = v199;
  (*(void (**)(char *, _QWORD, uint64_t))(v198 + 104))(v199, enum case for LinkActionType.click(_:), v200);
  v98 = v229;
  ClickData.init(with:linkActionType:index:url:)(v96, v97, 0, 0, 0);
  v99 = type metadata accessor for ClickData(0);
  v100 = *(char **)(*(_QWORD *)(v99 - 8) + 56);
  v200 = v99;
  v199 = v100;
  ((void (*)(char *, _QWORD, uint64_t))v100)(v98, 0, 1);
  v101 = type metadata accessor for Page(0);
  v102 = type metadata accessor for Shelf(0);
  v103 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v104 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  v105 = v226;
  v226 = (char *)v102;
  v225 = v103;
  v224 = v104;
  PageUpdateAction.init(actionMetrics:instruction:animated:clickData:)(v105, v94, 1, v98, v101, v102, v103, v104);
  v106 = v243;
  v107 = v191;
  v108 = swift_allocObject(v190, v191 + 3 * v243, v189);
  *(_OWORD *)(v108 + 16) = xmmword_2584B0;
  v198 = v108;
  v109 = v108 + v107;
  v95(v108 + v107, enum case for PageUpdateInstruction.startPendingData<A, B>(_:), v27);
  v110 = v192;
  v192((uint64_t *)v109, 0, 1, v27);
  v111 = (uint64_t *)(v109 + v106);
  v239 = (char *)v101;
  if (v237)
  {
    v112 = sub_5C154(&qword_324580);
    v113 = *(_QWORD *)(sub_5C154(&qword_324588) - 8);
    v114 = swift_allocObject(v112, ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80))+ *(_QWORD *)(v113 + 72), *(unsigned __int8 *)(v113 + 80) | 7);
    *(_OWORD *)(v114 + 16) = xmmword_258070;
    v115 = (void (*)(uint64_t *, _QWORD, uint64_t))v233;
    v249 = type metadata accessor for DefaultFooterComponentModel(0);
    v250 = sub_648E0(&qword_323230, type metadata accessor for DefaultFooterComponentModel, (uint64_t)&unk_25D008);
    v116 = sub_668BC(&v248);
    sub_D1C0C((uint64_t)v116);
    v117 = v237;
    v118 = swift_bridgeObjectRetain(v237);
    v119 = v223;
    PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.init(model:shelfID:)(&v248, v223, v117, v239, v226, v225, v224, v118);
    *v111 = v114;
    v115(v111, enum case for PageUpdateInstruction.replaceShelfFooters<A, B>(_:), v27);
    v110(v111, 0, 1, v27);
    v120 = (uint64_t *)(v109 + v193);
    *v120 = v119;
    v120[1] = v117;
    v115(v120, enum case for PageUpdateInstruction.removeShelvesAfter<A, B>(_:), v27);
    v121 = v120;
    v122 = 0;
  }
  else
  {
    v110((uint64_t *)(v109 + v106), 1, 1, v27);
    v121 = (uint64_t *)(v109 + v193);
    v122 = 1;
  }
  v110(v121, v122, 1, v27);
  v123 = swift_bridgeObjectRetain(v237);
  static ActionMetrics.notInstrumented.getter(v123);
  v124 = (char *)_swiftEmptyArrayStorage;
  v125 = 3;
  v126 = v240;
  v127 = v239;
  do
  {
    sub_5E1A4(v109, (uint64_t)v16, &qword_324570);
    sub_66F14((uint64_t)v16, (uint64_t)v13, &qword_324570);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v242)(v13, 1, v27) == 1)
    {
      sub_5E09C((uint64_t)v13, &qword_324570);
    }
    else
    {
      v128 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
      v129 = v238;
      v128(v238, v13, v27);
      v128(v241, v129, v27);
      if ((swift_isUniquelyReferenced_nonNull_native(v124) & 1) == 0)
        v124 = (char *)sub_57648(0, *((_QWORD *)v124 + 2) + 1, 1, (unint64_t)v124);
      v131 = *((_QWORD *)v124 + 2);
      v130 = *((_QWORD *)v124 + 3);
      if (v131 >= v130 >> 1)
        v124 = (char *)sub_57648(v130 > 1, v131 + 1, 1, (unint64_t)v124);
      *((_QWORD *)v124 + 2) = v131 + 1;
      v126 = v240;
      v128(&v124[((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80))+ *(_QWORD *)(v240 + 72) * v131], v241, v27);
      v127 = v239;
    }
    v109 += v243;
    --v125;
  }
  while (v125);
  v132 = swift_bridgeObjectRelease(v198);
  v133 = v202;
  *v202 = v124;
  ((void (*)(char **, _QWORD, uint64_t, __n128))v233)(v133, v188, v27, v132);
  v134 = v229;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v199)(v229, 1, 1, v200);
  PageUpdateAction.init(actionMetrics:instruction:animated:clickData:)(v228, v133, 0, v134, v127, v226, v225, v224);
  v135 = v204;
  v136 = v203;
  v137 = v205;
  (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v203, v234 + *(int *)(v227 + 28), v205);
  v138 = (*(uint64_t (**)(char *, uint64_t))(v135 + 88))(v136, v137);
  if (v138 == enum case for ContentKind.pdf(_:))
    goto LABEL_31;
  if (v138 == enum case for ContentKind.audiobook(_:))
  {
    v139 = 0xEA0000000000736BLL;
    v140 = 0x6F6F626F69647541;
    goto LABEL_36;
  }
  if (v138 != enum case for ContentKind.regularBook(_:))
  {
    if (v138 != enum case for ContentKind.manga(_:))
    {
      if (v138 == enum case for ContentKind.unknownBook(_:))
        goto LABEL_35;
      (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v137);
    }
LABEL_31:
    v139 = 0xE700000000000000;
    v140 = 0x6E776F6E6B6E55;
    goto LABEL_36;
  }
LABEL_35:
  v139 = 0xE500000000000000;
  v140 = 0x736B6F6F42;
LABEL_36:
  v141 = v207;
  v142 = v206;
  v143 = v208;
  (*(void (**)(char *, _QWORD, uint64_t))(v207 + 104))(v206, enum case for Metrics.TargetType.filter(_:), v208);
  v144 = v210;
  v145 = v209;
  v146 = v211;
  v147 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v210 + 104))(v209, enum case for Metrics.ClickActionType.navigate(_:), v211);
  v148 = v212;
  static Metrics.Location.genericButton.getter(v147);
  v149 = v232;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v140, v139, v142, v145, 0, 0, 0, v148);
  v150 = swift_bridgeObjectRelease(v139);
  (*(void (**)(char *, uint64_t, __n128))(v213 + 8))(v148, v214, v150);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v145, v146);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v143);
  v151 = v220;
  v152 = v219;
  v153 = v221;
  (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v219, v149, v221);
  v252 = v201;
  v154 = v231;
  v253[3] = v231;
  v155 = sub_B02A0();
  v253[4] = v155;
  v156 = sub_668BC(v253);
  v157 = *(void (**)(_QWORD *, char *, uint64_t))(v230 + 16);
  v157(v156, v235, v154);
  v254[3] = v154;
  v254[4] = v155;
  v158 = sub_668BC(v254);
  v157(v158, v236, v154);
  v251 = (char *)_swiftEmptyArrayStorage;
  sub_5E1A4((uint64_t)v253, (uint64_t)&v248, (uint64_t *)&unk_326210);
  sub_66F14((uint64_t)&v248, (uint64_t)&v244, (uint64_t *)&unk_326210);
  if (v245)
  {
    sub_5DC98(&v244, (uint64_t)&v247);
    sub_5DC98(&v247, (uint64_t)&v244);
    v159 = (char *)_swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    {
      v159 = sub_57634(0, _swiftEmptyArrayStorage[2] + 1, 1, (char *)_swiftEmptyArrayStorage);
      v251 = v159;
    }
    v161 = *((_QWORD *)v159 + 2);
    v160 = *((_QWORD *)v159 + 3);
    if (v161 >= v160 >> 1)
      v251 = sub_57634((char *)(v160 > 1), v161 + 1, 1, v159);
    v162 = v245;
    v163 = v246;
    v164 = sub_7EEDC((uint64_t)&v244, v245);
    v165 = __chkstk_darwin(v164);
    v167 = (char *)&v187 - ((v166 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v168 + 16))(v167, v165);
    sub_10F098(v161, (uint64_t)v167, (uint64_t *)&v251, v162, v163);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v244);
  }
  else
  {
    sub_5E09C((uint64_t)&v244, (uint64_t *)&unk_326210);
  }
  sub_5E1A4((uint64_t)v254, (uint64_t)&v248, (uint64_t *)&unk_326210);
  sub_66F14((uint64_t)&v248, (uint64_t)&v244, (uint64_t *)&unk_326210);
  if (v245)
  {
    sub_5DC98(&v244, (uint64_t)&v247);
    sub_5DC98(&v247, (uint64_t)&v244);
    v169 = v251;
    if ((swift_isUniquelyReferenced_nonNull_native(v251) & 1) == 0)
    {
      v169 = sub_57634(0, *((_QWORD *)v169 + 2) + 1, 1, v169);
      v251 = v169;
    }
    v171 = *((_QWORD *)v169 + 2);
    v170 = *((_QWORD *)v169 + 3);
    if (v171 >= v170 >> 1)
      v251 = sub_57634((char *)(v170 > 1), v171 + 1, 1, v169);
    v172 = v245;
    v173 = v246;
    v174 = sub_7EEDC((uint64_t)&v244, v245);
    v175 = __chkstk_darwin(v174);
    v177 = (char *)&v187 - ((v176 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v178 + 16))(v177, v175);
    sub_10F098(v171, (uint64_t)v177, (uint64_t *)&v251, v172, v173);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v244);
  }
  else
  {
    sub_5E09C((uint64_t)&v244, (uint64_t *)&unk_326210);
  }
  v179 = v252;
  v180 = sub_5C154((uint64_t *)&unk_326210);
  swift_arrayDestroy(v253, v179, v180);
  v181 = v251;
  v182 = type metadata accessor for CompoundAction(0);
  v183 = v222;
  v222[3] = v182;
  v183[4] = &protocol witness table for CompoundAction;
  sub_668BC(v183);
  CompoundAction.init(actionMetrics:subactions:)(v152, v181);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v232, v153);
  v184 = *(void (**)(char *, uint64_t))(v230 + 8);
  v185 = v231;
  v184(v236, v231);
  v184(v235, v185);
  (*(void (**)(char *, uint64_t))(v216 + 8))(v215, v217);
  return sub_6685C((uint64_t)v218, type metadata accessor for SeriesRoomListHeaderComponentModel);
}

uint64_t SeriesRoomListHeaderSegmentedItem.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t (*v39)(char *, uint64_t);
  int v40;
  int v41;
  __n128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v47;
  uint64_t v48;
  unint64_t v49;
  __n128 v50;
  __n128 v51;
  char *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, __n128);
  __n128 v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  _BYTE v88[48];

  v2 = v1;
  v85 = a1;
  v3 = type metadata accessor for ContentKind(0);
  v4 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  v84 = v4;
  __chkstk_darwin(v3);
  v76 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v68 - v7;
  v10 = __chkstk_darwin(v9);
  v81 = (char *)&v68 - v11;
  v12 = type metadata accessor for Metrics.ImpressionType(0, v10);
  v79 = *(_QWORD *)(v12 - 8);
  v80 = v12;
  __chkstk_darwin(v12);
  v86 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Metrics.IdType(0);
  v77 = *(_QWORD *)(v14 - 8);
  v78 = v14;
  v15 = __chkstk_darwin(v14);
  v87 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Metrics.Impression(0, v15);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_3239C8);
  __chkstk_darwin(v21);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SeriesRoomPageIntent(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  v29 = *(int *)(v28 + 32);
  v82 = v2;
  sub_5E0D8(v2 + v29, (uint64_t)v88);
  v30 = sub_5C154(&qword_323050);
  v31 = swift_dynamicCast(v23, v88, v30, v24, 6);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  if (!v31)
  {
    v32(v23, 1, 1, v24);
    sub_5E09C((uint64_t)v23, &qword_3239C8);
    v45 = type metadata accessor for ImpressionMetrics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v85, 1, 1, v45);
  }
  v75 = v8;
  v69 = v20;
  v70 = v18;
  v71 = v17;
  v32(v23, 0, 1, v24);
  sub_5E160((uint64_t)v23, (uint64_t)v27, type metadata accessor for SeriesRoomPageIntent);
  v72 = *v27;
  v73 = v27;
  v33 = v27[1];
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v87, enum case for Metrics.IdType.itsId(_:), v78);
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v86, enum case for Metrics.ImpressionType.filter(_:), v80);
  v34 = v81;
  v35 = v82 + *(int *)(v28 + 28);
  v36 = v83;
  v37 = v84;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
  v38(v81, v35, v83);
  v39 = *(uint64_t (**)(char *, uint64_t))(v37 + 88);
  v40 = v39(v34, v36);
  v41 = enum case for ContentKind.pdf(_:);
  v74 = v33;
  if (v40 == enum case for ContentKind.pdf(_:))
  {
    v42 = swift_bridgeObjectRetain(v33);
    v43 = 0xE300000000000000;
    v44 = 6710384;
    goto LABEL_12;
  }
  if (v40 == enum case for ContentKind.audiobook(_:))
  {
    v47 = swift_bridgeObjectRetain(v33);
    v48 = static Metrics.Values.audiobooksKind.getter(v47);
LABEL_11:
    v44 = v48;
    v43 = v49;
    goto LABEL_12;
  }
  if (v40 == enum case for ContentKind.regularBook(_:))
  {
    v50 = swift_bridgeObjectRetain(v33);
    v48 = static Metrics.Values.booksKind.getter(v50);
    goto LABEL_11;
  }
  if (v40 == enum case for ContentKind.manga(_:))
  {
    v51 = swift_bridgeObjectRetain(v33);
    v48 = static Metrics.Values.mangaKind.getter(v51);
    goto LABEL_11;
  }
  v62 = v37;
  v43 = 0xEC0000006B6F6F62;
  v44 = 0x206E776F6E6B6E55;
  if (v40 == enum case for ContentKind.unknownBook(_:))
  {
    v42 = swift_bridgeObjectRetain(v33);
  }
  else
  {
    v63 = *(void (**)(char *, uint64_t, __n128))(v62 + 8);
    v64 = swift_bridgeObjectRetain(v33);
    v63(v34, v36, v64);
  }
LABEL_12:
  v52 = v75;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v38)(v75, v35, v36, v42);
  v53 = v39(v52, v36);
  if (v53 == v41)
  {
    v54 = 0xE300000000000000;
    v55 = 4605008;
  }
  else if (v53 == enum case for ContentKind.audiobook(_:))
  {
    v54 = 0xEA0000000000736BLL;
    v55 = 0x6F6F626F69647541;
  }
  else if (v53 == enum case for ContentKind.regularBook(_:))
  {
    v54 = 0xE500000000000000;
    v55 = 0x736B6F6F42;
  }
  else
  {
    if (v53 != enum case for ContentKind.manga(_:))
    {
      v56 = v85;
      v57 = v71;
      v58 = v70;
      v59 = v69;
      if (v53 == enum case for ContentKind.unknownBook(_:))
      {
        v54 = 0xEC0000006B6F6F62;
        v55 = 0x206E776F6E6B6E55;
      }
      else
      {
        v65 = v76;
        v38(v76, v35, v36);
        v55 = String.init<A>(reflecting:)(v65, v36);
        v66 = v36;
        v54 = v67;
        (*(void (**)(char *, uint64_t))(v84 + 8))(v75, v66);
      }
      goto LABEL_21;
    }
    v54 = 0xE500000000000000;
    v55 = 0x61676E614DLL;
  }
  v56 = v85;
  v57 = v71;
  v58 = v70;
  v59 = v69;
LABEL_21:
  v60 = (uint64_t)v73;
  Metrics.Impression.init(artistName:id:idType:impressionIndex:impressionType:isSG:kind:name:narratorName:parentId:)(0, 0, v72, v74, v87, 0, v86, 0, v44, v43, v55, v54, 0, 0, 0, 0);
  static Metrics.createImpressionMetrics(impression:)(v59);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v57);
  sub_6685C(v60, type metadata accessor for SeriesRoomPageIntent);
  v61 = type metadata accessor for ImpressionMetrics(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v56, 0, 1, v61);
}

uint64_t SeriesRoomListHeaderSegmentedItem.kindForAnalytics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v11;

  v1 = type metadata accessor for ContentKind(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + *(int *)(v5 + 28), v1);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v6 == enum case for ContentKind.pdf(_:))
    return 6710384;
  if (v6 == enum case for ContentKind.audiobook(_:))
    return static Metrics.Values.audiobooksKind.getter(v7);
  if (v6 == enum case for ContentKind.regularBook(_:))
    return static Metrics.Values.booksKind.getter(v7);
  if (v6 == enum case for ContentKind.manga(_:))
    return static Metrics.Values.mangaKind.getter(v7);
  v8 = 0x206E776F6E6B6E55;
  if (v6 != enum case for ContentKind.unknownBook(_:))
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t SeriesRoomListHeaderSegmentedItem.titleForAnalytics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  int v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for ContentKind(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - v6;
  v8 = v0 + *(int *)(type metadata accessor for SeriesRoomListHeaderSegmentedItem(0) + 28);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v9(v7, v8, v1);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v7, v1);
  if (v10 == enum case for ContentKind.pdf(_:))
    return 4605008;
  if (v10 == enum case for ContentKind.audiobook(_:))
    return 0x6F6F626F69647541;
  if (v10 == enum case for ContentKind.regularBook(_:))
    return 0x736B6F6F42;
  if (v10 == enum case for ContentKind.manga(_:))
    return 0x61676E614DLL;
  if (v10 == enum case for ContentKind.unknownBook(_:))
    return 0x206E776F6E6B6E55;
  v9(v4, v8, v1);
  v11 = String.init<A>(reflecting:)(v4, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  return v11;
}

unint64_t SeriesRoomListHeaderSegmentedItem.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  int v11;
  uint64_t v13;

  v1 = 0xD000000000000010;
  v2 = type metadata accessor for ContentKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - v7;
  v9 = v0 + *(int *)(type metadata accessor for SeriesRoomListHeaderSegmentedItem(0) + 28);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, v9, v2);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
  if (v11 != enum case for ContentKind.pdf(_:))
  {
    if (v11 == enum case for ContentKind.audiobook(_:))
    {
      return 0xD000000000000016;
    }
    else if (v11 == enum case for ContentKind.regularBook(_:))
    {
      return 0xD000000000000011;
    }
    else if (v11 == enum case for ContentKind.manga(_:))
    {
      return 0xD000000000000012;
    }
    else if (v11 == enum case for ContentKind.unknownBook(_:))
    {
      return 0xD000000000000018;
    }
    else
    {
      v10(v5, v9, v2);
      v1 = String.init<A>(reflecting:)(v5, v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }
  return v1;
}

uint64_t ContentKind.segmentedItemKindForAnalytics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for ContentKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, v1, v2, v4);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == enum case for ContentKind.pdf(_:))
    return 6710384;
  if (v7 == enum case for ContentKind.audiobook(_:))
    return static Metrics.Values.audiobooksKind.getter();
  if (v7 == enum case for ContentKind.regularBook(_:))
    return static Metrics.Values.booksKind.getter();
  if (v7 == enum case for ContentKind.manga(_:))
    return static Metrics.Values.mangaKind.getter();
  v8 = 0x206E776F6E6B6E55;
  if (v7 != enum case for ContentKind.unknownBook(_:))
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8;
}

uint64_t SeriesRoomListHeaderSegmentedItem.localizableTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  __n128 v15;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for LocalizerLookupStrategy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizerDefaultValue(0, v3);
  v6 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContentKind(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v0 + *(int *)(v13 + 28), v9);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
  if (v14 == enum case for ContentKind.pdf(_:))
    return static LocalizerRequest.verbatim(_:)(0);
  if (v14 != enum case for ContentKind.audiobook(_:))
  {
    if (v14 != enum case for ContentKind.regularBook(_:))
    {
      if (v14 == enum case for ContentKind.manga(_:))
      {
        LocalizerDefaultValue.init(stringLiteral:)("Manga", 5, 2, v15);
        (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for LocalizerLookupStrategy.default(_:), v1);
        v19 = "Books.SeriesRoom.ListHeader.SegmentedItem.Manga";
LABEL_10:
        v18 = (unint64_t)(v19 - 32) | 0x8000000000000000;
        v17 = 0xD00000000000002FLL;
        goto LABEL_11;
      }
      if (v14 != enum case for ContentKind.unknownBook(_:))
      {
        static LocalizerRequest.verbatim(_:)(0);
        return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      }
    }
    LocalizerDefaultValue.init(stringLiteral:)("Books", 5, 2, v15);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for LocalizerLookupStrategy.default(_:), v1);
    v19 = "Books.SeriesRoom.ListHeader.SegmentedItem.Books";
    goto LABEL_10;
  }
  LocalizerDefaultValue.init(stringLiteral:)("Audiobooks", 10, 2, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for LocalizerLookupStrategy.default(_:), v1);
  v17 = 0xD000000000000034;
  v18 = 0x8000000000270EB0;
LABEL_11:
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(v17, v18, 0, v8, v5);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v21);
}

uint64_t sub_10CF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_5E1A4(v2 + *(int *)(a1 + 20), a2, &qword_3217B8);
}

uint64_t sub_10CF88(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 24));
}

unint64_t sub_10CF98@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = SeriesRoomListHeaderSegmentedItem.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_10CFBC(unint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for SeriesRoomListHeaderSegmentedItem(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_13D700(v3);
  v4 = *(_QWORD *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10D040(v5);
  *a1 = v3;
}

void sub_10D040(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  Swift::Int v38;
  char *v39;
  unint64_t v40;
  Swift::Int v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t (*v50)(char *, uint64_t);
  int v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  Swift::Int v74;
  Swift::Int v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  Swift::Int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  Swift::Int v86;
  uint64_t v87;
  Swift::Int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  char *v97;
  uint64_t (*v98)(char *, uint64_t);
  int v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  Swift::Int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  void *v168;
  _QWORD *v169;
  Swift::Int v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  Swift::Int v177;
  uint64_t v178;
  char *v179;
  char *v180;
  Swift::Int v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  unint64_t v189;
  char *v190;
  char *v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  Swift::Int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;

  v2 = v1;
  v201 = type metadata accessor for ContentKind(0);
  v194 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v191 = (char *)&v169 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v190 = (char *)&v169 - v6;
  __chkstk_darwin(v7);
  v180 = (char *)&v169 - v8;
  __chkstk_darwin(v9);
  v179 = (char *)&v169 - v10;
  __chkstk_darwin(v11);
  v173 = (char *)&v169 - v12;
  __chkstk_darwin(v13);
  v172 = (char *)&v169 - v14;
  v202 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  v15 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v178 = (uint64_t)&v169 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v196 = (uint64_t)&v169 - v18;
  __chkstk_darwin(v19);
  v203 = (uint64_t)&v169 - v20;
  __chkstk_darwin(v21);
  v198 = (uint64_t)&v169 - v22;
  __chkstk_darwin(v23);
  v185 = (uint64_t)&v169 - v24;
  __chkstk_darwin(v25);
  v182 = (uint64_t)&v169 - v26;
  __chkstk_darwin(v27);
  v175 = (uint64_t)&v169 - v28;
  __chkstk_darwin(v29);
  v174 = (uint64_t)&v169 - v30;
  v199 = a1;
  v31 = a1[1];
  v32 = _minimumMergeRunLength(_:)(v31);
  if (v32 >= v31)
  {
    if (v31 < 0)
      goto LABEL_206;
    if (v31)
      sub_10E094(0, v31, 1, v199);
    return;
  }
  if (v31 >= 0)
    v33 = v31;
  else
    v33 = v31 + 1;
  if (v31 < -1)
  {
LABEL_214:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v170 = v32;
  if (v31 < 2)
  {
    v37 = _swiftEmptyArrayStorage;
    v183 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    if (v31 != 1)
    {
      v40 = _swiftEmptyArrayStorage[2];
      v39 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_168;
    }
    v169 = _swiftEmptyArrayStorage;
  }
  else
  {
    v34 = v33 >> 1;
    v35 = static Array._allocateBufferUninitialized(minimumCapacity:)(v33 >> 1, v202);
    *(_QWORD *)(v35 + 16) = v34;
    v36 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v169 = (_QWORD *)v35;
    v183 = v35 + v36;
  }
  v38 = 0;
  v200 = enum case for ContentKind.pdf(_:);
  v193 = enum case for ContentKind.audiobook(_:);
  v188 = enum case for ContentKind.regularBook(_:);
  v187 = enum case for ContentKind.manga(_:);
  v184 = enum case for ContentKind.unknownBook(_:);
  v39 = (char *)_swiftEmptyArrayStorage;
  v186 = v15;
  while (2)
  {
    v41 = v38;
    v42 = v38 + 1;
    v181 = v38;
    if (v38 + 1 >= v31)
    {
      v52 = v38 + 1;
      goto LABEL_74;
    }
    v195 = v31;
    v43 = *v199;
    v44 = *(_QWORD *)(v15 + 72);
    v45 = v174;
    sub_5E11C(*v199 + v44 * v42, v174, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
    v176 = v43;
    v197 = v44;
    sub_5E11C(v43 + v44 * v41, v175, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
    v46 = v201;
    v47 = v194;
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
    v49 = v172;
    v48(v172, v45 + *(int *)(v202 + 28), v201);
    v50 = *(uint64_t (**)(char *, uint64_t))(v47 + 88);
    v51 = v50(v49, v46);
    if (v51 == v200)
    {
      v192 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_25;
    }
    if (v51 == v193)
    {
      v53 = 1;
LABEL_22:
      v192 = v53;
      goto LABEL_25;
    }
    if (v51 != v188)
    {
      if (v51 == v187)
      {
        v53 = 2;
        goto LABEL_22;
      }
      if (v51 != v184)
      {
        (*(void (**)(char *, uint64_t))(v194 + 8))(v172, v201);
        v53 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_22;
      }
    }
    v192 = 0;
LABEL_25:
    v54 = v201;
    v55 = v173;
    v48(v173, v175 + *(int *)(v202 + 28), v201);
    v56 = v50(v55, v54);
    if (v56 != v200)
    {
      v15 = v186;
      v41 = v181;
      if (v56 == v193)
      {
        v57 = 1;
LABEL_29:
        v189 = v57;
        goto LABEL_32;
      }
      if (v56 != v188)
      {
        if (v56 == v187)
        {
          v57 = 2;
          goto LABEL_29;
        }
        if (v56 != v184)
        {
          (*(void (**)(char *, uint64_t))(v194 + 8))(v173, v201);
          v57 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_29;
        }
      }
      v189 = 0;
      goto LABEL_32;
    }
    v189 = 0x7FFFFFFFFFFFFFFFLL;
    v15 = v186;
    v41 = v181;
LABEL_32:
    sub_6685C(v175, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
    sub_6685C(v174, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
    if (v41 + 2 < v195)
    {
      v171 = v39;
      v177 = v197 * v42;
      v58 = v176;
      v52 = v41 + 2;
      v59 = v197 * (v41 + 2);
      while (1)
      {
        v60 = v182;
        sub_5E11C(v58 + v59, v182, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        sub_5E11C(v58 + v177, v185, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        v61 = v201;
        v62 = v60 + *(int *)(v202 + 28);
        v63 = v179;
        v48(v179, v62, v201);
        v64 = v50(v63, v61);
        if (v64 == v200)
          goto LABEL_35;
        if (v64 == v193)
        {
          v65 = 1;
          goto LABEL_42;
        }
        if (v64 == v188)
          goto LABEL_39;
        if (v64 != v187)
          break;
        v65 = 2;
LABEL_42:
        v66 = v201;
        v67 = v180;
        v48(v180, v185 + *(int *)(v202 + 28), v201);
        v68 = v50(v67, v66);
        if (v68 == v200)
          goto LABEL_43;
        if (v68 == v193)
        {
          v69 = 1;
          goto LABEL_50;
        }
        if (v68 == v188)
          goto LABEL_47;
        if (v68 != v187)
        {
          if (v68 != v184)
          {
            (*(void (**)(char *, uint64_t))(v194 + 8))(v180, v201);
LABEL_43:
            v69 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_50;
          }
LABEL_47:
          v69 = 0;
          goto LABEL_50;
        }
        v69 = 2;
LABEL_50:
        v70 = v192 < v189;
        v71 = v65 >= v69;
        sub_6685C(v185, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        sub_6685C(v182, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        if (v70 == v71)
        {
          v15 = v186;
          v39 = v171;
          v41 = v181;
          goto LABEL_59;
        }
        v58 += v197;
        ++v52;
        v15 = v186;
        if (v195 == v52)
        {
          v31 = v195;
          v52 = v195;
          v39 = v171;
          v41 = v181;
          goto LABEL_60;
        }
      }
      if (v64 != v184)
      {
        (*(void (**)(char *, uint64_t))(v194 + 8))(v179, v201);
LABEL_35:
        v65 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_42;
      }
LABEL_39:
      v65 = 0;
      goto LABEL_42;
    }
    v52 = v41 + 2;
LABEL_59:
    v31 = v195;
LABEL_60:
    if (v192 < v189)
    {
      if (v52 < v41)
        goto LABEL_207;
      if (v41 < v52)
      {
        v171 = v39;
        v72 = 0;
        v73 = v197 * (v52 - 1);
        v74 = v41;
        v75 = v52 * v197;
        v76 = v74;
        v77 = v74 * v197;
        do
        {
          if (v76 != v52 + v72 - 1)
          {
            v80 = v176;
            if (!v176)
              goto LABEL_212;
            v81 = v176 + v77;
            v192 = v176 + v73;
            sub_5E160(v176 + v77, v178, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
            if (v77 < v73 || v81 >= v80 + v75)
            {
              v78 = v80 + v77;
              v79 = v192;
              swift_arrayInitWithTakeFrontToBack(v78, v192);
            }
            else
            {
              v79 = v192;
              if (v77 != v73)
                swift_arrayInitWithTakeBackToFront(v81, v192);
            }
            sub_5E160(v178, v79, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
          }
          ++v76;
          --v72;
          v73 -= v197;
          v75 -= v197;
          v77 += v197;
        }
        while (v76 < v52 + v72);
        v39 = v171;
        v15 = v186;
        v41 = v181;
        v31 = v195;
      }
    }
LABEL_74:
    if (v52 >= v31)
      goto LABEL_112;
    if (__OFSUB__(v52, v41))
      goto LABEL_205;
    if (v52 - v41 >= v170)
      goto LABEL_112;
    if (__OFADD__(v41, v170))
      goto LABEL_208;
    if (v41 + v170 >= v31)
      v82 = v31;
    else
      v82 = v41 + v170;
    if (v82 < v41)
    {
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
      goto LABEL_214;
    }
    if (v52 == v82)
      goto LABEL_112;
    v171 = v39;
    v176 = v2;
    v83 = *(_QWORD *)(v15 + 72);
    v84 = v83 * (v52 - 1);
    v189 = v83;
    v85 = v52 * v83;
    v177 = v82;
    while (2)
    {
      v87 = 0;
      v88 = v41;
      v195 = v52;
      v192 = v84;
      while (1)
      {
        v89 = *v199;
        v90 = v85;
        v197 = v85 + v87;
        v91 = v85 + v87 + v89;
        v92 = v198;
        sub_5E11C(v91, v198, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        sub_5E11C(v84 + v87 + v89, v203, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        v93 = v201;
        v94 = v92 + *(int *)(v202 + 28);
        v95 = v194;
        v96 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
        v97 = v190;
        v96(v190, v94, v201);
        v98 = *(uint64_t (**)(char *, uint64_t))(v95 + 88);
        v99 = v98(v97, v93);
        if (v99 == v200)
          goto LABEL_89;
        if (v99 == v193)
        {
          v100 = 1;
          goto LABEL_96;
        }
        if (v99 == v188)
          goto LABEL_93;
        if (v99 != v187)
        {
          if (v99 != v184)
          {
            (*(void (**)(char *, uint64_t))(v194 + 8))(v190, v201);
LABEL_89:
            v100 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_96;
          }
LABEL_93:
          v100 = 0;
          goto LABEL_96;
        }
        v100 = 2;
LABEL_96:
        v101 = v201;
        v102 = v191;
        v96(v191, v203 + *(int *)(v202 + 28), v201);
        v103 = v98(v102, v101);
        if (v103 == v200)
        {
          v104 = 0x7FFFFFFFFFFFFFFFLL;
          v85 = v90;
          goto LABEL_108;
        }
        v85 = v90;
        if (v103 == v193)
        {
          v104 = 1;
          goto LABEL_108;
        }
        if (v103 == v188)
        {
LABEL_101:
          v104 = 0;
          goto LABEL_108;
        }
        if (v103 == v187)
        {
          v104 = 2;
        }
        else
        {
          if (v103 == v184)
            goto LABEL_101;
          (*(void (**)(char *, uint64_t))(v194 + 8))(v191, v201);
          v104 = 0x7FFFFFFFFFFFFFFFLL;
        }
LABEL_108:
        sub_6685C(v203, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        sub_6685C(v198, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        if (v100 >= v104)
          break;
        v105 = *v199;
        v84 = v192;
        if (!*v199)
          goto LABEL_210;
        v106 = v105 + v85 + v87;
        v107 = v105 + v192 + v87;
        sub_5E160(v106, v196, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        swift_arrayInitWithTakeFrontToBack(v106, v107);
        sub_5E160(v196, v107, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
        v87 -= v189;
        ++v88;
        v86 = v195;
        if (v195 == v88)
          goto LABEL_85;
      }
      v86 = v195;
      v84 = v192;
LABEL_85:
      v52 = v86 + 1;
      v84 += v189;
      v85 += v189;
      v41 = v181;
      if (v52 != v177)
        continue;
      break;
    }
    v52 = v177;
    v2 = v176;
    v39 = v171;
LABEL_112:
    if (v52 < v41)
      goto LABEL_200;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    v195 = v52;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v39 = sub_10ED88(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
    v110 = *((_QWORD *)v39 + 2);
    v109 = *((_QWORD *)v39 + 3);
    v40 = v110 + 1;
    if (v110 >= v109 >> 1)
      v39 = sub_10ED88((char *)(v109 > 1), v110 + 1, 1, v39);
    *((_QWORD *)v39 + 2) = v40;
    v111 = v39 + 32;
    v112 = &v39[16 * v110 + 32];
    v113 = v195;
    *(_QWORD *)v112 = v41;
    *((_QWORD *)v112 + 1) = v113;
    if (v110)
    {
      while (2)
      {
        v114 = v40 - 1;
        if (v40 >= 4)
        {
          v119 = &v111[16 * v40];
          v120 = *((_QWORD *)v119 - 8);
          v121 = *((_QWORD *)v119 - 7);
          v125 = __OFSUB__(v121, v120);
          v122 = v121 - v120;
          if (v125)
            goto LABEL_189;
          v124 = *((_QWORD *)v119 - 6);
          v123 = *((_QWORD *)v119 - 5);
          v125 = __OFSUB__(v123, v124);
          v117 = v123 - v124;
          v118 = v125;
          if (v125)
            goto LABEL_190;
          v126 = v40 - 2;
          v127 = &v111[16 * v40 - 32];
          v129 = *(_QWORD *)v127;
          v128 = *((_QWORD *)v127 + 1);
          v125 = __OFSUB__(v128, v129);
          v130 = v128 - v129;
          if (v125)
            goto LABEL_192;
          v125 = __OFADD__(v117, v130);
          v131 = v117 + v130;
          if (v125)
            goto LABEL_195;
          if (v131 >= v122)
          {
            v149 = &v111[16 * v114];
            v151 = *(_QWORD *)v149;
            v150 = *((_QWORD *)v149 + 1);
            v125 = __OFSUB__(v150, v151);
            v152 = v150 - v151;
            if (v125)
              goto LABEL_199;
            v142 = v117 < v152;
          }
          else
          {
LABEL_131:
            if ((v118 & 1) != 0)
              goto LABEL_191;
            v126 = v40 - 2;
            v132 = &v111[16 * v40 - 32];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v135 = __OFSUB__(v133, v134);
            v136 = v133 - v134;
            v137 = v135;
            if (v135)
              goto LABEL_194;
            v138 = &v111[16 * v114];
            v140 = *(_QWORD *)v138;
            v139 = *((_QWORD *)v138 + 1);
            v125 = __OFSUB__(v139, v140);
            v141 = v139 - v140;
            if (v125)
              goto LABEL_197;
            if (__OFADD__(v136, v141))
              goto LABEL_198;
            if (v136 + v141 < v117)
              goto LABEL_143;
            v142 = v117 < v141;
          }
          if (v142)
            v114 = v126;
        }
        else
        {
          if (v40 == 3)
          {
            v116 = *((_QWORD *)v39 + 4);
            v115 = *((_QWORD *)v39 + 5);
            v125 = __OFSUB__(v115, v116);
            v117 = v115 - v116;
            v118 = v125;
            goto LABEL_131;
          }
          v143 = *((_QWORD *)v39 + 4);
          v144 = *((_QWORD *)v39 + 5);
          v125 = __OFSUB__(v144, v143);
          v136 = v144 - v143;
          v137 = v125;
LABEL_143:
          if ((v137 & 1) != 0)
            goto LABEL_193;
          v145 = &v111[16 * v114];
          v147 = *(_QWORD *)v145;
          v146 = *((_QWORD *)v145 + 1);
          v125 = __OFSUB__(v146, v147);
          v148 = v146 - v147;
          if (v125)
            goto LABEL_196;
          if (v148 < v136)
            goto LABEL_15;
        }
        v153 = v114 - 1;
        if (v114 - 1 >= v40)
        {
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
          goto LABEL_209;
        }
        if (!*v199)
          goto LABEL_211;
        v154 = v39;
        v155 = &v111[16 * v153];
        v156 = *(_QWORD *)v155;
        v157 = &v111[16 * v114];
        v158 = *((_QWORD *)v157 + 1);
        sub_10E4E0(*v199 + *(_QWORD *)(v186 + 72) * *(_QWORD *)v155, *v199 + *(_QWORD *)(v186 + 72) * *(_QWORD *)v157, (_BYTE *)(*v199 + *(_QWORD *)(v186 + 72) * v158), v183);
        if (v2)
        {
LABEL_180:
          v167 = v154;
          goto LABEL_182;
        }
        if (v158 < v156)
          goto LABEL_186;
        if (v114 > *((_QWORD *)v154 + 2))
          goto LABEL_187;
        *(_QWORD *)v155 = v156;
        *(_QWORD *)&v111[16 * v153 + 8] = v158;
        v159 = *((_QWORD *)v154 + 2);
        if (v114 >= v159)
          goto LABEL_188;
        v39 = v154;
        v40 = v159 - 1;
        memmove(&v111[16 * v114], v157 + 16, 16 * (v159 - 1 - v114));
        *((_QWORD *)v154 + 2) = v159 - 1;
        if (v159 <= 2)
          goto LABEL_15;
        continue;
      }
    }
    v40 = 1;
LABEL_15:
    v31 = v199[1];
    v38 = v195;
    v15 = v186;
    if (v195 < v31)
      continue;
    break;
  }
  v37 = v169;
LABEL_168:
  v169 = v37;
  if (v40 >= 2)
  {
    v160 = *v199;
    do
    {
      v161 = v40 - 2;
      if (v40 < 2)
        goto LABEL_201;
      if (!v160)
        goto LABEL_213;
      v154 = v39;
      v162 = v39 + 32;
      v163 = *(_QWORD *)&v39[16 * v161 + 32];
      v164 = *(_QWORD *)&v39[16 * v40 + 24];
      sub_10E4E0(v160 + *(_QWORD *)(v15 + 72) * v163, v160 + *(_QWORD *)(v15 + 72) * *(_QWORD *)&v162[16 * v40 - 16], (_BYTE *)(v160 + *(_QWORD *)(v15 + 72) * v164), v183);
      if (v2)
        goto LABEL_180;
      if (v164 < v163)
        goto LABEL_202;
      if ((swift_isUniquelyReferenced_nonNull_native(v154) & 1) == 0)
        v154 = sub_10F048((uint64_t)v154);
      if (v161 >= *((_QWORD *)v154 + 2))
        goto LABEL_203;
      v165 = &v154[16 * v161 + 32];
      *(_QWORD *)v165 = v163;
      *((_QWORD *)v165 + 1) = v164;
      v166 = *((_QWORD *)v154 + 2);
      if (v40 > v166)
        goto LABEL_204;
      v39 = v154;
      memmove(&v154[16 * v40 + 16], &v154[16 * v40 + 32], 16 * (v166 - v40));
      *((_QWORD *)v154 + 2) = v166 - 1;
      v40 = v166 - 1;
    }
    while (v166 > 2);
  }
  v167 = v39;
LABEL_182:
  swift_bridgeObjectRelease(v167);
  v168 = v169;
  v169[2] = 0;
  swift_bridgeObjectRelease(v168);
}

void sub_10E094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t (*v29)(char *, uint64_t);
  int v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v41 = a1;
  v57 = type metadata accessor for ContentKind(0);
  v50 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v48 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v47 = (char *)&v39 - v8;
  v58 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  __chkstk_darwin(v58);
  v52 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v59 = (uint64_t)&v39 - v11;
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - v14;
  v51 = a3;
  v40 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v56 = enum case for ContentKind.pdf(_:);
    v45 = enum case for ContentKind.audiobook(_:);
    v44 = enum case for ContentKind.regularBook(_:);
    v43 = enum case for ContentKind.manga(_:);
    v42 = enum case for ContentKind.unknownBook(_:);
    v17 = v16 * (v51 - 1);
    v46 = v16;
    v18 = v16 * v51;
LABEL_5:
    v19 = 0;
    v20 = v41;
    v49 = v18;
    while (1)
    {
      v21 = *v55;
      v54 = v18 + v19;
      sub_5E11C(v18 + v19 + v21, (uint64_t)v15, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      v22 = v17;
      v53 = v17 + v19;
      sub_5E11C(v17 + v19 + v21, v59, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      v23 = v57;
      v24 = v15;
      v25 = &v15[*(int *)(v58 + 28)];
      v26 = v50;
      v27 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
      v28 = v47;
      v27(v47, v25, v57);
      v29 = *(uint64_t (**)(char *, uint64_t))(v26 + 88);
      v30 = v29(v28, v23);
      if (v30 == v56)
        goto LABEL_8;
      if (v30 == v45)
      {
        v31 = 1;
        goto LABEL_16;
      }
      if (v30 != v44)
      {
        if (v30 == v43)
        {
          v31 = 2;
          goto LABEL_16;
        }
        if (v30 != v42)
        {
          (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v57);
LABEL_8:
          v31 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
      }
      v31 = 0;
LABEL_16:
      v32 = v57;
      v33 = v48;
      v27(v48, (char *)(v59 + *(int *)(v58 + 28)), v57);
      v34 = v29(v33, v32);
      if (v34 == v56)
      {
        v35 = 0x7FFFFFFFFFFFFFFFLL;
        v15 = v24;
        v17 = v22;
        v18 = v49;
      }
      else
      {
        v15 = v24;
        if (v34 == v45)
        {
          v35 = 1;
          v17 = v22;
          v18 = v49;
        }
        else
        {
          v17 = v22;
          if (v34 == v44)
          {
            v35 = 0;
            v18 = v49;
          }
          else
          {
            v18 = v49;
            if (v34 == v43)
            {
              v35 = 2;
            }
            else if (v34 == v42)
            {
              v35 = 0;
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v57);
              v35 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }
        }
      }
      sub_6685C(v59, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      sub_6685C((uint64_t)v15, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      if (v31 >= v35)
      {
LABEL_4:
        v17 += v46;
        v18 += v46;
        if (++v51 == v40)
          return;
        goto LABEL_5;
      }
      v36 = *v55;
      if (!*v55)
      {
        __break(1u);
        return;
      }
      v37 = v36 + v18 + v19;
      v38 = v36 + v17 + v19;
      sub_5E160(v37, v52, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      swift_arrayInitWithTakeFrontToBack(v37, v38);
      sub_5E160(v52, v38, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      v19 -= v46;
      if (v51 == ++v20)
        goto LABEL_4;
    }
  }
}

uint64_t sub_10E4E0(unint64_t a1, unint64_t a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t);
  _BYTE *v31;
  uint64_t (*v32)(uint64_t);
  _BYTE *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v36;
  uint64_t v37;
  uint64_t (*v38)(_BYTE *, uint64_t);
  int v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  void (*v57)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v58;
  uint64_t (*v59)(_BYTE *, uint64_t);
  int v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  unint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE v71[12];
  int v72;
  int v73;
  unint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _BYTE *v88;

  v84 = type metadata accessor for ContentKind(0);
  v81 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v78 = &v71[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v77 = &v71[-v10];
  __chkstk_darwin(v11);
  v76 = &v71[-v12];
  __chkstk_darwin(v13);
  v75 = &v71[-v14];
  v85 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  __chkstk_darwin(v85);
  v83 = &v71[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v80 = &v71[-v17];
  __chkstk_darwin(v18);
  v82 = &v71[-v19];
  __chkstk_darwin(v20);
  v79 = &v71[-v21];
  v23 = *(_QWORD *)(v22 + 72);
  if (!v23)
  {
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  if (a2 - a1 == 0x8000000000000000 && v23 == -1)
    goto LABEL_103;
  v24 = (uint64_t)&a3[-a2];
  if (&a3[-a2] == (_BYTE *)0x8000000000000000 && v23 == -1)
    goto LABEL_104;
  v25 = (uint64_t)(a2 - a1) / v23;
  v88 = (_BYTE *)a1;
  v87 = (_BYTE *)a4;
  v26 = v24 / v23;
  if (v25 >= v24 / v23)
  {
    if (v26 < 0)
      goto LABEL_105;
    v28 = v26 * v23;
    if (a4 < a2 || a2 + v28 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a2);
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront(a4, a2);
    }
    v48 = a4 + v28;
    v86 = a4 + v28;
    v88 = (_BYTE *)a2;
    if (v28 < 1 || a1 >= a2)
    {
LABEL_65:
      sub_10EE98((unint64_t *)&v88, (unint64_t *)&v87, (uint64_t *)&v86, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      return 1;
    }
    v51 = -v23;
    LODWORD(v79) = enum case for ContentKind.pdf(_:);
    LODWORD(v76) = enum case for ContentKind.audiobook(_:);
    LODWORD(v75) = enum case for ContentKind.regularBook(_:);
    v73 = enum case for ContentKind.manga(_:);
    v72 = enum case for ContentKind.unknownBook(_:);
    v74 = a1;
    while (1)
    {
      v82 = a3;
      v52 = v80;
      sub_5E11C(v48 + v51, (uint64_t)v80, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      v53 = a2 + v51;
      sub_5E11C(a2 + v51, (uint64_t)v83, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      v54 = v84;
      v55 = &v52[*(int *)(v85 + 28)];
      v56 = v81;
      v57 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v81 + 16);
      v58 = v77;
      v57(v77, v55, v84);
      v59 = *(uint64_t (**)(_BYTE *, uint64_t))(v56 + 88);
      v60 = v59(v58, v54);
      if (v60 == (_DWORD)v79)
        goto LABEL_67;
      if (v60 == (_DWORD)v76)
      {
        v61 = 1;
        goto LABEL_74;
      }
      if (v60 == (_DWORD)v75)
        goto LABEL_71;
      if (v60 != v73)
        break;
      v61 = 2;
LABEL_74:
      v62 = v84;
      v63 = v78;
      v57(v78, &v83[*(int *)(v85 + 28)], v84);
      v64 = v59(v63, v62);
      if (v64 != (_DWORD)v79)
      {
        if (v64 == (_DWORD)v76)
        {
          v65 = 1;
          goto LABEL_82;
        }
        if (v64 == (_DWORD)v75)
          goto LABEL_79;
        if (v64 == v73)
        {
          v65 = 2;
          goto LABEL_82;
        }
        if (v64 == v72)
        {
LABEL_79:
          v65 = 0;
          goto LABEL_82;
        }
        (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v78, v84);
      }
      v65 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_82:
      v66 = v82;
      v67 = &v82[v51];
      sub_6685C((uint64_t)v83, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      sub_6685C((uint64_t)v80, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
      if (v61 >= v65)
      {
        v69 = v86;
        v70 = v86 + v51;
        v86 += v51;
        v68 = v74;
        if ((unint64_t)v66 < v69 || (unint64_t)v67 >= v69)
        {
          swift_arrayInitWithTakeFrontToBack(&v66[v51], v70);
        }
        else if (v82 != (_BYTE *)v69)
        {
          swift_arrayInitWithTakeBackToFront(&v66[v51], v70);
        }
        v53 = a2;
      }
      else
      {
        v68 = v74;
        if ((unint64_t)v66 < a2 || (unint64_t)v67 >= a2)
        {
          swift_arrayInitWithTakeFrontToBack(&v66[v51], a2 + v51);
        }
        else if (v82 != (_BYTE *)a2)
        {
          swift_arrayInitWithTakeBackToFront(&v66[v51], a2 + v51);
        }
        v88 += v51;
      }
      v48 = v86;
      if (v86 > a4)
      {
        a2 = v53;
        a3 = &v66[v51];
        if (v53 > v68)
          continue;
      }
      goto LABEL_65;
    }
    if (v60 != v72)
    {
      (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v77, v84);
LABEL_67:
      v61 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_74;
    }
LABEL_71:
    v61 = 0;
    goto LABEL_74;
  }
  if ((v25 & 0x8000000000000000) == 0)
  {
    v27 = v25 * v23;
    if (a4 < a1 || a1 + v27 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v80 = (_BYTE *)(a4 + v27);
    v86 = a4 + v27;
    if (v27 >= 1 && a2 < (unint64_t)a3)
    {
      LODWORD(v83) = enum case for ContentKind.pdf(_:);
      LODWORD(v78) = enum case for ContentKind.audiobook(_:);
      LODWORD(v77) = enum case for ContentKind.regularBook(_:);
      LODWORD(v74) = enum case for ContentKind.manga(_:);
      v73 = enum case for ContentKind.unknownBook(_:);
      v30 = type metadata accessor for SeriesRoomListHeaderSegmentedItem;
      while (1)
      {
        v31 = v79;
        sub_5E11C(a2, (uint64_t)v79, v30);
        v32 = v30;
        sub_5E11C(a4, (uint64_t)v82, v30);
        v33 = &v31[*(int *)(v85 + 28)];
        v34 = v81;
        v35 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v81 + 16);
        v36 = v75;
        v37 = v84;
        v35(v75, v33, v84);
        v38 = *(uint64_t (**)(_BYTE *, uint64_t))(v34 + 88);
        v39 = v38(v36, v37);
        if (v39 == (_DWORD)v83)
          goto LABEL_24;
        if (v39 == (_DWORD)v78)
        {
          v40 = 1;
          goto LABEL_31;
        }
        if (v39 == (_DWORD)v77)
          goto LABEL_28;
        if (v39 != (_DWORD)v74)
          break;
        v40 = 2;
LABEL_31:
        v41 = v84;
        v42 = v76;
        v35(v76, &v82[*(int *)(v85 + 28)], v84);
        v43 = v38(v42, v41);
        if (v43 == (_DWORD)v83)
        {
          v44 = 0x7FFFFFFFFFFFFFFFLL;
          v30 = v32;
        }
        else
        {
          v30 = v32;
          if (v43 == (_DWORD)v78)
          {
            v44 = 1;
          }
          else
          {
            if (v43 != (_DWORD)v77)
            {
              if (v43 == (_DWORD)v74)
              {
                v44 = 2;
                goto LABEL_43;
              }
              if (v43 != v73)
              {
                (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v76, v84);
                v44 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_43;
              }
            }
            v44 = 0;
          }
        }
LABEL_43:
        sub_6685C((uint64_t)v82, v30);
        sub_6685C((uint64_t)v79, v30);
        v45 = (unint64_t)v88;
        if (v40 >= v44)
        {
          v47 = (unint64_t)&v87[v23];
          if (v88 < v87 || (unint64_t)v88 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack(v88, v87);
          }
          else if (v88 != v87)
          {
            swift_arrayInitWithTakeBackToFront(v88, v87);
          }
          v87 = (_BYTE *)v47;
          v46 = a2;
        }
        else
        {
          v46 = a2 + v23;
          if ((unint64_t)v88 < a2 || (unint64_t)v88 >= v46)
          {
            swift_arrayInitWithTakeFrontToBack(v88, a2);
          }
          else if (v88 == (_BYTE *)a2)
          {
            v45 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v88, a2);
          }
        }
        v88 = (_BYTE *)(v45 + v23);
        a4 = (unint64_t)v87;
        if (v87 < v80)
        {
          a2 = v46;
          if (v46 < (unint64_t)a3)
            continue;
        }
        goto LABEL_65;
      }
      if (v39 != v73)
      {
        (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v75, v84);
LABEL_24:
        v40 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_31;
      }
LABEL_28:
      v40 = 0;
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_105:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10ED88(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5C154(qword_324640);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10EE80(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10EE98(a1, a2, a3, type metadata accessor for GenreHighlight);
}

uint64_t sub_10EE8C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10EE98(a1, a2, a3, type metadata accessor for ReadingInsightsDataProvider.MonthEntry);
}

uint64_t sub_10EE98(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  return result;
}

char *sub_10EFA4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_10F048(uint64_t a1)
{
  return sub_10ED88(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10F05C(_QWORD *a1)
{
  return sub_20D018(0, a1[2], 0, a1);
}

uint64_t sub_10F070(_QWORD *a1)
{
  return sub_20D9A8(0, a1[2], 0, a1);
}

uint64_t sub_10F084(uint64_t a1)
{
  return sub_20DE48(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10F098(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_668BC(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_5DC98(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_10F110()
{
  return sub_648E0(&qword_324590, type metadata accessor for SeriesRoomListHeaderSegmentedItem, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderSegmentedItem);
}

void *sub_10F13C()
{
  return &protocol witness table for String;
}

_QWORD *initializeBufferWithCopyOfBuffer for SeriesRoomListHeaderSegmentedItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_5C154(&qword_3217B8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for ContentKind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[8];
    v22 = *(_OWORD *)((char *)a2 + v21 + 24);
    *(_OWORD *)((char *)v4 + v21 + 24) = v22;
    (**(void (***)(void))(v22 - 8))();
  }
  return v4;
}

uint64_t destroy for SeriesRoomListHeaderSegmentedItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for LocalizerRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for ContentKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + a2[8]));
}

_QWORD *initializeWithCopy for SeriesRoomListHeaderSegmentedItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_5C154(&qword_3217B8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for ContentKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = *(_OWORD *)((char *)a2 + v19 + 24);
  *(_OWORD *)((char *)a1 + v19 + 24) = v20;
  (**(void (***)(void))(v20 - 8))();
  return a1;
}

_QWORD *assignWithCopy for SeriesRoomListHeaderSegmentedItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_5C154(&qword_3217B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for ContentKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  sub_65938((_QWORD *)((char *)a1 + a3[8]), (_QWORD *)((char *)a2 + a3[8]));
  return a1;
}

_OWORD *initializeWithTake for SeriesRoomListHeaderSegmentedItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_5C154(&qword_3217B8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ContentKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  return a1;
}

_QWORD *assignWithTake for SeriesRoomListHeaderSegmentedItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_5C154(&qword_3217B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for ContentKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)((char *)a1 + v21));
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesRoomListHeaderSegmentedItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10F898);
}

uint64_t sub_10F898(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_5C154(&qword_3217B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for ContentKind(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8] + 24);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesRoomListHeaderSegmentedItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10F950);
}

uint64_t sub_10F950(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_5C154(&qword_3217B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for ContentKind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8] + 24) = (a2 - 1);
  return result;
}

void sub_10F9F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_25E788;
  sub_10FA98(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_25E7A0;
    v4 = type metadata accessor for ContentKind(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_25E7B8;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_10FA98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_324600)
  {
    v2 = type metadata accessor for LocalizerRequest(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_324600);
  }
}

uint64_t sub_10FAEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = v1 + *(int *)(a1 + 40);
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 16);
  sub_E33B0(*(_QWORD *)v2, v4, v5);
  v6 = sub_7843C(v3, v4, v5);
  sub_79534(v3, v4, v5);
  return v6;
}

uint64_t PerformActionView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];

  v23 = a2;
  v21 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v4 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - v12;
  v14 = *(void (**)(_BYTE *, char *, uint64_t, uint64_t))(v2 + *(int *)(a1 + 44));
  sub_76AD4((uint64_t)v24);
  sub_76B00((uint64_t)v6);
  v15 = sub_10FAEC(a1);
  v17 = v16;
  v14(v24, v6, v15, v16);
  v18 = swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v21, v18);
  sub_5E09C((uint64_t)v24, &qword_326190);
  sub_12D864((uint64_t)v10, v7, (uint64_t)v13);
  v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  v19(v10, v7);
  sub_12AA38((uint64_t)v13, v7, v23);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, v7);
}

uint64_t sub_10FCFC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of PerformActionView.body>>, 1);
}

uint64_t sub_10FD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_10FD3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = ")";
  sub_110638(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_25E860;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
  }
}

uint64_t sub_10FDC8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    if ((a2[5] & 1) != 0)
    {
      v7 = a2[3];
      if (v7)
      {
        v8 = a2[4];
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = v8;
        (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      }
      else
      {
        v11 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 32) = a2[4];
      }
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)v4 = *a2;
      *(_BYTE *)(v4 + 40) = 0;
      swift_retain(v10);
    }
    v12 = a3[9];
    v13 = (uint64_t *)(v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v21 = a3[10];
    v22 = v4 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_BYTE *)(v23 + 16);
    sub_E33B0(*(_QWORD *)v23, v25, v26);
    *(_QWORD *)v22 = v24;
    *(_QWORD *)(v22 + 8) = v25;
    *(_BYTE *)(v22 + 16) = v26;
    v27 = a3[11];
    v28 = (_QWORD *)(v4 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v9 = v29[1];
    *v28 = *v29;
    v28[1] = v9;
  }
  swift_retain(v9);
  return v4;
}

uint64_t sub_10FF4C(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if ((a1[5] & 1) != 0)
  {
    if (a1[3])
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  }
  else
  {
    swift_release(*a1);
  }
  v4 = (_QWORD *)((char *)a1 + a2[9]);
  v5 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  sub_79534(*(_QWORD *)((char *)a1 + a2[10]), *(_QWORD *)((char *)a1 + a2[10] + 8), *((_BYTE *)a1 + a2[10] + 16));
  return swift_release(*(_QWORD *)((char *)a1 + a2[11] + 8));
}

uint64_t sub_110008(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  if ((a2[5] & 1) != 0)
  {
    v6 = a2[3];
    if (v6)
    {
      v7 = a2[4];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    }
    else
    {
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain(v8);
  }
  v10 = a3[9];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = v11;
    v16 = v13;
    v17 = 1;
  }
  else
  {
    v18 = *v12;
    *v11 = *v12;
    swift_retain(v18);
    v15 = v11;
    v16 = v13;
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v16, v17);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_BYTE *)(v21 + 16);
  sub_E33B0(*(_QWORD *)v21, v23, v24);
  *(_QWORD *)v20 = v22;
  *(_QWORD *)(v20 + 8) = v23;
  *(_BYTE *)(v20 + 16) = v24;
  v25 = a3[11];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_retain(v28);
  return a1;
}

uint64_t sub_110164(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  if ((__int128 *)a1 != a2)
  {
    sub_5E09C(a1, &qword_31F488);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 3);
      if (v6)
      {
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      }
      else
      {
        v8 = *a2;
        v9 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v8;
        *(_OWORD *)(a1 + 16) = v9;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
    v10 = a3[9];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_5E09C(a1 + v10, &qword_326110);
    v13 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = v11;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v18 = *v12;
      *v11 = *v12;
      swift_retain(v18);
      v15 = v11;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_BYTE *)(v21 + 16);
  sub_E33B0(*(_QWORD *)v21, v23, v24);
  v25 = *(_QWORD *)v20;
  v26 = *(_QWORD *)(v20 + 8);
  v27 = *(_BYTE *)(v20 + 16);
  *(_QWORD *)v20 = v22;
  *(_QWORD *)(v20 + 8) = v23;
  *(_BYTE *)(v20 + 16) = v24;
  sub_79534(v25, v26, v27);
  v28 = a3[11];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = v30[1];
  v32 = v29[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_retain(v31);
  swift_release(v32);
  return a1;
}

_OWORD *sub_110304(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v7 = a3[9];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_5C154(&qword_326110);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[10];
  v13 = a3[11];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v14[16] = v15[16];
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_OWORD *sub_1103E8(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_5E09C((uint64_t)a1, &qword_31F488);
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    v7 = a3[9];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_5E09C((uint64_t)a1 + v7, &qword_326110);
    v10 = sub_5C154(&qword_326110);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[10];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v14[16];
  v16 = *(_QWORD *)v13;
  v17 = *((_QWORD *)v13 + 1);
  v18 = v13[16];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v15;
  sub_79534(v16, v17, v18);
  v19 = a3[11];
  v20 = *(_QWORD *)((char *)a1 + v19 + 8);
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)((char *)a2 + v19);
  swift_release(v20);
  return a1;
}

uint64_t sub_110510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11051C);
}

uint64_t sub_11051C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5C154(&qword_31F490);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1105A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1105AC);
}

uint64_t sub_1105AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5C154(&qword_31F490);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 36), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PerformActionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PerformActionView);
}

void sub_110638(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_31F508)
  {
    v2 = type metadata accessor for OpaqueMetricsFieldsContext(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_31F508);
  }
}

uint64_t sub_11068C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_110694()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_25E9A0);
  v4 = v0;
  v2 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_110700(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_110708()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_25EAB8);
  v4 = v0;
  v2 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_110774@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_25EAB8);
  v7 = v3;
  v5 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 17);
  return result;
}

uint64_t sub_1107E8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_25EAB8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_111260();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_111408, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_110878()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_25EA90);
  v4 = v0;
  v2 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t sub_1108E4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 18) = a2;
  return result;
}

uint64_t sub_1108EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_25E9C8);
  v4 = v0;
  v2 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_11095C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2;
  swift_retain(a2);
  return swift_release(v2);
}

uint64_t sub_110994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  _QWORD v12[3];

  v2 = v1;
  v4 = v1 + 32;
  swift_beginAccess(v4, v12, 33, 0);
  sub_111318(a1, v4);
  swift_endAccess(v12);
  KeyPath = swift_getKeyPath(&unk_25EA18);
  v12[0] = v2;
  v6 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_BYTE *)(v2 + 72);
  v8 = swift_getKeyPath(&unk_25E9A0);
  v10[2] = v2;
  v11 = v7;
  v12[0] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v12, v8, sub_111660, v10, (char *)&type metadata for () + 8, v6);
  swift_release(v8);
  return sub_111360(a1);
}

uint64_t sub_110A94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_25EA40);
  v6[0] = v1;
  v4 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 32, v6, 0, 0);
  return sub_1112D0(v1 + 32, a1);
}

uint64_t sub_110B24(uint64_t a1, uint64_t a2)
{
  _BYTE v3[40];

  sub_1112D0(a2, (uint64_t)v3);
  return sub_110994((uint64_t)v3);
}

uint64_t sub_110B68()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_25EA18);
  v4 = v0;
  v2 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t sub_110BD4(uint64_t a1, char a2)
{
  uint64_t KeyPath;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  *(_BYTE *)(a1 + 72) = a2;
  KeyPath = swift_getKeyPath(&unk_25EA18);
  v10 = a1;
  v4 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = swift_getKeyPath(&unk_25E9A0);
  v8[2] = a1;
  v9 = v5;
  v10 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, v6, sub_1112C0, v8, (char *)&type metadata for () + 8, v4);
  return swift_release(v6);
}

uint64_t sub_110CAC()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_25E9F0);
  v4 = v0;
  v2 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 80));
}

uint64_t sub_110D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2;
  swift_retain(a2);
  return swift_release(v2);
}

double sub_110D54()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_25EA68);
  v4 = v0;
  v2 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 88);
}

uint64_t sub_110DC0(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  return result;
}

uint64_t sub_110DC8(char a1, char a2, char a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v7;
  uint64_t v15;

  *(_QWORD *)(v7 + 80) = 0;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_QWORD *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  v15 = swift_unknownObjectWeakInit(v7 + 96);
  ObservationRegistrar.init()(v15);
  *(_BYTE *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 17) = a2;
  *(_BYTE *)(v7 + 18) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  sub_111360(v7 + 32);
  sub_1113C0(a5, v7 + 32);
  *(_BYTE *)(v7 + 72) = a6;
  *(double *)(v7 + 88) = a7;
  return v7;
}

uint64_t sub_110E80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t *v13;
  _BYTE v14[24];
  _QWORD v15[5];

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_25E9A0);
  v15[0] = v0;
  v3 = sub_111260();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, KeyPath, v3);
  swift_release(KeyPath);
  LOBYTE(KeyPath) = *((_BYTE *)v0 + 16);
  v4 = swift_getKeyPath(&unk_25EAB8);
  v15[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, v4, v3);
  swift_release(v4);
  LOBYTE(v4) = *((_BYTE *)v0 + 17);
  v5 = swift_getKeyPath(&unk_25EA90);
  v15[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, v5, v3);
  swift_release(v5);
  LOBYTE(v5) = *((_BYTE *)v0 + 18);
  v6 = swift_getKeyPath(&unk_25E9C8);
  v15[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, v6, v3);
  swift_release(v6);
  v7 = v0[3];
  v8 = swift_getKeyPath(&unk_25EA40);
  v15[0] = v0;
  swift_retain(v7);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v15, v8, v3);
  swift_release(v8);
  swift_beginAccess(v0 + 4, v14, 0, 0);
  sub_1112D0((uint64_t)(v0 + 4), (uint64_t)v15);
  v9 = swift_getKeyPath(&unk_25EA18);
  v13 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, v9, v3);
  swift_release(v9);
  LOBYTE(v9) = *((_BYTE *)v0 + 72);
  v10 = swift_getKeyPath(&unk_25EA68);
  v13 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, v10, v3);
  swift_release(v10);
  v11 = *((double *)v0 + 11);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_110DC8(KeyPath, v4, v5, v7, (uint64_t)v15, v9, v11);
}

uint64_t sub_111090()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[3]);
  sub_111360((uint64_t)(v0 + 4));
  swift_release(v0[10]);
  sub_6C0E4((uint64_t)(v0 + 12));
  v1 = (char *)v0 + OBJC_IVAR____TtC11BookStoreUI35CardAuxiliaryNavigationBarViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_111100()
{
  return type metadata accessor for CardAuxiliaryNavigationBarViewModel(0);
}

uint64_t type metadata accessor for CardAuxiliaryNavigationBarViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_3246F8;
  if (!qword_3246F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CardAuxiliaryNavigationBarViewModel);
  return result;
}

uint64_t sub_111144(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_25E918;
  v4[1] = &unk_25E918;
  v4[2] = &unk_25E918;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_25E930;
  v4[5] = &unk_25E918;
  v4[6] = &unk_25E948;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_25E960;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_111260()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3247C8;
  if (!qword_3247C8)
  {
    v1 = type metadata accessor for CardAuxiliaryNavigationBarViewModel(255);
    result = swift_getWitnessTable(&unk_25E980, v1);
    atomic_store(result, (unint64_t *)&qword_3247C8);
  }
  return result;
}

void sub_1112C0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1112D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_111318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_111360(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_320940);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1113C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_111408()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 17) = *(_BYTE *)(v0 + 24);
}

void sub_111418(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String v8;
  Swift::Int v9;
  uint64_t KeyPath;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  swift_bridgeObjectRetain(a2);
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  v9 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6E48, v8);
  swift_bridgeObjectRelease(a2);
  if (!v9)
  {
    KeyPath = swift_getKeyPath(&unk_25EAB8);
    __chkstk_darwin(KeyPath);
    v19 = v4;
    v20 = a3 == 3;
    v21 = v4;
    v11 = sub_111260();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, KeyPath, sub_111674, v18, (char *)&type metadata for () + 8, v11);
    swift_release(KeyPath);
    v12 = swift_getKeyPath(&unk_25EA18);
    v21 = v4;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v12, v11);
    swift_release(v12);
    v13 = *(_BYTE *)(v4 + 72);
    v14 = swift_getKeyPath(&unk_25E9A0);
    __chkstk_darwin(v14);
    v19 = v4;
    v20 = v13;
    v21 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, v14, sub_111660, v18, (char *)&type metadata for () + 8, v11);
    swift_release(v14);
    if (a3 == 3)
    {
      v15 = 0;
    }
    else
    {
      v16 = swift_getKeyPath(&unk_25E9A0);
      v21 = v4;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v16, v11);
      swift_release(v16);
      v15 = *(_BYTE *)(v4 + 16);
    }
    v17 = swift_getKeyPath(&unk_25E9A0);
    __chkstk_darwin(v17);
    v19 = v4;
    v20 = v15;
    v21 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, v17, sub_111660, v18, (char *)&type metadata for () + 8, v11);
    swift_release(v17);
  }
}

void sub_111660()
{
  sub_1112C0();
}

void sub_111674()
{
  sub_111408();
}

uint64_t sub_111688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v8 + 56) = a8;
  *(_QWORD *)(v8 + 64) = v15;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a7;
  *(_BYTE *)(v8 + 137) = a6;
  *(_BYTE *)(v8 + 136) = a5;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  v9 = sub_5C154(&qword_322410);
  *(_QWORD *)(v8 + 72) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeriesRoomPageIntent(0);
  *(_QWORD *)(v8 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 88) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 96) = v12;
  *(_QWORD *)(v8 + 104) = v13;
  return swift_task_switch(sub_111754, v12, v13);
}

uint64_t sub_111754()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_114358(v0[2], v0[10]);
  v1 = (uint64_t **)swift_task_alloc(dword_31FE04);
  v0[14] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1117AC;
  return BaseObjectGraph.withSyncDependenciesForSwiftUI.getter();
}

uint64_t sub_1117AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *v2;
  v5 = (*v2)[14];
  (*v2)[15] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_114220(v4[10]);
    v6 = v4[12];
    v7 = v4[13];
    v8 = sub_111918;
  }
  else
  {
    v4[16] = a1;
    v6 = v4[12];
    v7 = v4[13];
    v8 = sub_111828;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_111828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  char *v11;
  uint64_t v13;

  v13 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_BYTE *)(v0 + 137);
  v6 = *(_BYTE *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(void **)(v0 + 40);
  v9 = *(void **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 88));
  sub_5E1A4(v8, v2, &qword_322410);
  v10 = objc_allocWithZone((Class)type metadata accessor for PageHostingController(0));
  swift_bridgeObjectRetain(v3);
  v11 = sub_111960(v1, v13, v9, v2, v7, v6, v5, v4, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(char *))(v0 + 8))(v11);
}

uint64_t sub_111918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_111960(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  id v27;
  char *v28;
  id v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;

  v32 = a8;
  v30 = a5;
  v31 = a3;
  v14 = sub_5C154(&qword_322410);
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_31F010);
  v18 = type metadata accessor for Dependency(0);
  v19 = swift_allocObject(v17, ((*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) | 7);
  *(_OWORD *)(v19 + 16) = xmmword_258070;
  v20 = type metadata accessor for PaginationController();
  v21 = swift_allocObject(v20, 72, 7);
  *(_WORD *)(v21 + 16) = 0;
  *(_BYTE *)(v21 + 18) = 0;
  *(_OWORD *)(v21 + 24) = 0u;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  v35 = v21;
  Dependency.init<A>(satisfying:with:)(v20, &v35, v20);
  v35 = v19;
  v22 = sub_5C154((uint64_t *)&unk_31FEC0);
  v23 = sub_7D48C();
  v24 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(&v35, v22, v23);
  swift_bridgeObjectRelease(v19);
  sub_5E1A4(a4, (uint64_t)v16, &qword_322410);
  v34 = a1;
  if ((a7 & 1) != 0)
    v25 = 256;
  else
    v25 = 0;
  v26 = v25 & 0xFFFFFFFE | a6 & 1;
  v27 = v30;
  swift_bridgeObjectRetain(a9);
  v28 = sub_221038(v24, v31, (uint64_t)v16, v27, v26, v32, a9, (void (*)(uint64_t))sub_11439C, (uint64_t)v33, (uint64_t (*)(uint64_t, uint64_t))sub_A0338, 0);
  swift_bridgeObjectRelease(a9);
  swift_release(a2);

  sub_5E09C(a4, &qword_322410);
  sub_114220(a1);
  return v28;
}

uint64_t sub_111B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD v8[5];

  v8[3] = type metadata accessor for SeriesRoomPageIntent(0);
  v8[4] = sub_648E0(&qword_31FFA0, type metadata accessor for SeriesRoomPageIntent, (uint64_t)&protocol conformance descriptor for SeriesRoomPageIntent);
  v6 = sub_668BC(v8);
  sub_114358(a2, (uint64_t)v6);
  swift_retain(a1);
  return sub_C5C94(v8, a1, a3);
}

uint64_t static BSUIFeedViewController.createSeriesViewController(from:with:navigationTypeValue:navigationContext:shouldReportFigaro:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_3247D8
                                                                                     + dword_3247D8);
  v13 = (_QWORD *)swift_task_alloc(unk_3247DC);
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_973E4;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_111E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a6;
  *(_BYTE *)(v6 + 96) = a5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 56) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_111E84, v8, v9);
}

uint64_t sub_111E84()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = *(const void **)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 56));
  *(_QWORD *)(v0 + 64) = _Block_copy(v1);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  *(_QWORD *)(v0 + 72) = v4;
  if (v2)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 32));
    v2 = v6;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(v0 + 80) = v2;
  v7 = *(void **)(v0 + 40);
  v8 = unk_3247DC;
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_3247D8 + dword_3247D8);
  v9 = *(id *)(v0 + 24);
  v10 = v7;
  v11 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 88) = v11;
  *v11 = v0;
  v11[1] = sub_111F80;
  return v13(v4, *(_QWORD *)(v0 + 24), v5, v2, *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 96));
}

uint64_t sub_111F80(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 88);
  v6 = *(_QWORD *)(*v2 + 72);
  v7 = *(void **)(*v2 + 40);
  v8 = *(void **)(*v2 + 24);
  v9 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(v6);
  v10 = *(void (***)(_QWORD, _QWORD, _QWORD))(v9 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 80));
  if (v3)
  {
    v11 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v10)[2](v10, 0, v11);

    _Block_release(v10);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v10)[2](v10, a1, 0);
    _Block_release(v10);

  }
  return (*(uint64_t (**)(void))(v9 + 8))();
}

void sub_112060(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  char v30;
  __n128 v31;
  id v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  uint64_t v36;
  id v37;
  unint64_t v38;
  id v39;
  void *v40;
  Class isa;
  __int128 v42;
  _BYTE v43[48];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v10 = type metadata accessor for SeriesType(0);
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)&v12 = __chkstk_darwin(v10).n128_u64[0];
  v14 = &v43[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_31E570 != -1)
      swift_once(&qword_31E570, sub_126600);
    v15 = type metadata accessor for Logger(0);
    sub_5240C(v15, (uint64_t)qword_324FF8);
    swift_errorRetain(a3);
    v16 = swift_errorRetain(a3);
    *(_QWORD *)&v42 = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v42, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      swift_errorRetain(a3);
      v20 = _swift_stdlib_bridgeErrorToNSError(a3);
      v46 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v18 + 4, v18 + 12);
      *v19 = v20;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      v21 = sub_5C154(&qword_32A000);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(a3);
      return;
    }
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    goto LABEL_16;
  }
  if (!a1 || (objc_msgSend(a1, "BOOLValue", v12) & 1) == 0)
  {
    if (qword_31E570 != -1)
      swift_once(&qword_31E570, sub_126600);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_5240C(v26, (uint64_t)qword_324FF8);
    *(_QWORD *)&v42 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)v42, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_0, (os_log_t)v42, v28, "Skip live fetching series info, because server or fallback said so.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
LABEL_16:

    return;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for SeriesType.audiobook(_:), v10);
  v22 = sub_648E0((unint64_t *)&qword_323978, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesType, (uint64_t)&protocol conformance descriptor for SeriesType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v46, v10, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v44, v10, v22);
  v23 = v47;
  v24 = v45;
  if (v46 == v44 && v47 == v45)
  {
    swift_bridgeObjectRelease_n(v47, 2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v25 = (id *)&BKSeriesManagerSeriesTypeAudiobookSeries;
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v44, v45, 0);
    swift_bridgeObjectRelease(v23);
    v31 = swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v14, v10, v31);
    v25 = (id *)&BKSeriesManagerSeriesTypeBookSeries;
    if ((v30 & 1) != 0)
      v25 = (id *)&BKSeriesManagerSeriesTypeAudiobookSeries;
  }
  v32 = *v25;
  v33 = sub_5C154(&qword_324810);
  inited = swift_initStackObject(v33, v43);
  v42 = xmmword_258070;
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_QWORD *)(inited + 32) = v32;
  v35 = sub_5C154(&qword_31EF50);
  v36 = swift_allocObject(v35, 48, 7);
  *(_OWORD *)(v36 + 16) = v42;
  *(_QWORD *)(v36 + 32) = a5;
  *(_QWORD *)(v36 + 40) = a6;
  *(_QWORD *)(inited + 40) = v36;
  v37 = v32;
  swift_bridgeObjectRetain(a6);
  v38 = sub_53240(inited);
  v39 = objc_msgSend((id)objc_opt_self(BKSeriesManager), "sharedManager");
  if (v39)
  {
    v40 = v39;
    type metadata accessor for SeriesManagerSeriesType(0);
    sub_5C154(&qword_31F730);
    sub_648E0(&qword_31F158, (uint64_t (*)(uint64_t))type metadata accessor for SeriesManagerSeriesType, (uint64_t)&unk_257870);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v40, "updateSeriesForSeriesAdamIDsWithTypes:forceCheck:", isa, 1, swift_bridgeObjectRelease(v38).n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

void sub_112560(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, uint64_t, void *);
  id v9;
  id v10;

  v8 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v10 = a2;
  v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

void sub_1125DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v6 = type metadata accessor for SeriesType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(BUBag), "defaultBag");
  v11 = objc_msgSend(v10, "seriesInfoLiveFetchesEnabled");

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_2ECC00, v14 + 16, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  v16 = (_QWORD *)(v15 + v14);
  *v16 = a1;
  v16[1] = a2;
  aBlock[4] = sub_1142D4;
  v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_112560;
  aBlock[3] = &unk_2ECC18;
  v17 = _Block_copy(aBlock);
  v18 = v20;
  swift_bridgeObjectRetain(a2);
  swift_release(v18);
  objc_msgSend(v11, "valueWithCompletion:", v17);
  _Block_release(v17);

}

uint64_t sub_112778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_BYTE *)(v6 + 880) = a6;
  *(_QWORD *)(v6 + 568) = a5;
  *(_QWORD *)(v6 + 560) = a4;
  *(_QWORD *)(v6 + 552) = a3;
  *(_QWORD *)(v6 + 544) = a2;
  *(_QWORD *)(v6 + 536) = a1;
  v7 = sub_5C154(&qword_322410);
  *(_QWORD *)(v6 + 576) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MResource.Keys(0);
  *(_QWORD *)(v6 + 584) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 592) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 600) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 608) = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_321BA8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 616) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 624) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 632) = swift_task_alloc(v11);
  v12 = type metadata accessor for SeriesType(0);
  *(_QWORD *)(v6 + 640) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 648) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 656) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 664) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 672) = swift_task_alloc(v14);
  v15 = type metadata accessor for SeriesRoomPageIntent(0);
  *(_QWORD *)(v6 + 680) = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 688) = swift_task_alloc(v16);
  *(_QWORD *)(v6 + 696) = swift_task_alloc(v16);
  v17 = sub_5C154(&qword_3247F0);
  *(_QWORD *)(v6 + 704) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Metrics.NavigationType(0);
  *(_QWORD *)(v6 + 712) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v6 + 720) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 728) = swift_task_alloc(v20);
  *(_QWORD *)(v6 + 736) = swift_task_alloc(v20);
  v21 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 744) = static MainActor.shared.getter(v21);
  v22 = dispatch thunk of Actor.unownedExecutor.getter(v21, &protocol witness table for MainActor);
  *(_QWORD *)(v6 + 752) = v22;
  *(_QWORD *)(v6 + 760) = v23;
  return swift_task_switch(sub_11296C, v22, v23);
}

uint64_t sub_11296C()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v142)(__n128);
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t, uint64_t);
  void (*v157)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIViewController), "jsa_topMostViewControllerForWindow:", 0);
  v0[96] = v2;
  v3 = UIViewController.jetActionHandlerInContext.getter();
  v5 = v4;
  v6 = v0[92];
  v7 = v0[90];
  v8 = v1[89];
  v9 = v1[70];
  ObjectType = swift_getObjectType();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
  v1[97] = v11;
  v12 = swift_unknownObjectRelease(v3);
  static PageRenderEvent.willPerformAction()(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for Metrics.NavigationType.forward(_:), v8);
  if (v9)
  {
    v13 = v1[90];
    v14 = v1[89];
    v15 = v1[88];
    v16 = v1[70];
    v17 = v1[69];
    v18 = swift_bridgeObjectRetain(v16);
    Metrics.NavigationType.init(rawValue:)(v17, v16, v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v14) == 1)
    {
      sub_5E09C(v1[88], &qword_3247F0);
    }
    else
    {
      v19 = v1[92];
      v20 = v1[90];
      v21 = v1[89];
      v22 = v1[88];
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v22, v21);
    }
  }
  v23 = v1 + 67;
  v24 = v1[67];
  if (!*(_QWORD *)(v24 + 16))
    goto LABEL_34;
  v25 = sub_582B4(0x656372756F736572, 0xE800000000000000);
  if ((v26 & 1) == 0)
    goto LABEL_34;
  sub_5E1EC(*(_QWORD *)(*v23 + 56) + 32 * v25, (uint64_t)(v1 + 39));
  v27 = sub_5C154(&qword_31FC38);
  if ((swift_dynamicCast(v1 + 63, v1 + 39, (char *)&type metadata for Any + 8, v27, 6) & 1) == 0)
    goto LABEL_34;
  v28 = v1[63];
  v1[53] = 25705;
  v1[54] = 0xE200000000000000;
  AnyHashable.init<A>(_:)(v1 + 53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v28 + 16) && (v29 = sub_58318((uint64_t)(v1 + 12)), (v30 & 1) != 0))
  {
    sub_5E1EC(*(_QWORD *)(v28 + 56) + 32 * v29, (uint64_t)(v1 + 27));
  }
  else
  {
    *(_OWORD *)(v1 + 27) = 0u;
    *(_OWORD *)(v1 + 29) = 0u;
  }
  sub_5DCEC((uint64_t)(v1 + 12));
  if (!v1[30])
  {
    swift_bridgeObjectRelease(v28);
    v37 = &qword_31F8B0;
    v38 = (uint64_t)(v1 + 27);
LABEL_33:
    sub_5E09C(v38, v37);
    goto LABEL_34;
  }
  if ((swift_dynamicCast(v1 + 55, v1 + 27, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v28);
    goto LABEL_34;
  }
  v31 = v1;
  v32 = (uint64_t)(v1 + 7);
  v33 = v31 + 47;
  v34 = v31[56];
  v162 = v31[55];
  v31[61] = 1701869940;
  v31[62] = 0xE400000000000000;
  v164 = v31;
  AnyHashable.init<A>(_:)(v31 + 61, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v28 + 16) && (v35 = sub_58318(v32), (v36 & 1) != 0))
  {
    sub_5E1EC(*(_QWORD *)(v28 + 56) + 32 * v35, (uint64_t)v33);
  }
  else
  {
    *v33 = 0u;
    v33[1] = 0u;
  }
  sub_5DCEC(v32);
  v1 = v164;
  if (!v164[50])
  {
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v34);
    v37 = &qword_31F8B0;
    v38 = (uint64_t)v33;
    goto LABEL_33;
  }
  if ((swift_dynamicCast(v164 + 59, v33, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v39 = v164[60];
    v40 = static MResourceType.classType(for:)(v164[59], v39);
    v160 = v34;
    if (v40)
    {
      v41 = v40;
      v42 = type metadata accessor for MAudiobookSeries(0);
      if (swift_dynamicCastMetatype(v41, v42))
      {
        v43 = v164[81];
        v44 = v164[80];
        v45 = v164[79];
        v46 = (unsigned int *)&enum case for SeriesType.audiobook(_:);
LABEL_29:
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v45, *v46, v44);
        v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
        v49 = v45;
        v1 = v164;
        v50 = 0;
        v51 = v44;
LABEL_31:
        v157 = v48;
        v48(v49, v50, 1, v51);
        v52 = v1[81];
        v53 = v1[80];
        v54 = v1[79];
        v55 = swift_bridgeObjectRelease(v39);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v52 + 48))(v54, 1, v53, v55) != 1)
        {
          v88 = (uint64_t)(v1 + 2);
          v89 = v1 + 35;
          v90 = v1[83];
          v91 = v1[81];
          v92 = v1[80];
          v93 = v1[79];
          v94 = v1[76];
          v95 = v1[75];
          v96 = v1[74];
          v97 = v1[73];
          v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32);
          v98(v90, v93, v92);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v96 + 104))(v94, enum case for MResource.Keys.attributes(_:), v97);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v95, v94, v97);
          v99 = sub_648E0(&qword_324808, (uint64_t (*)(uint64_t))&type metadata accessor for MResource.Keys, (uint64_t)&protocol conformance descriptor for MResource.Keys);
          AnyHashable.init<A>(_:)(v95, v97, v99);
          (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v94, v97);
          if (*(_QWORD *)(v28 + 16) && (v100 = sub_58318(v88), (v101 & 1) != 0))
          {
            sub_5E1EC(*(_QWORD *)(v28 + 56) + 32 * v100, (uint64_t)v89);
          }
          else
          {
            *v89 = 0u;
            v89[1] = 0u;
          }
          v1 = v164;
          sub_5DCEC(v88);
          v122 = v164[38];
          sub_5E09C((uint64_t)v89, &qword_31F8B0);
          v156 = v98;
          if (v122)
          {
            type metadata accessor for MResource(0);
            v123 = type metadata accessor for MSeries(0);
            v124 = static MResource.from<A>(response:)(v28, v123);
            v125 = swift_bridgeObjectRelease(v28);
            v140 = v124;
          }
          else
          {
            v125 = swift_bridgeObjectRelease(v28);
            v140 = 0;
          }
          v126 = v164[92];
          v127 = v164[91];
          v128 = v164[90];
          v148 = v128;
          v129 = v164[89];
          v150 = v129;
          v151 = v127;
          v153 = v164[87];
          v130 = (char *)v164[86];
          v131 = (int *)v164[85];
          v167 = v164[84];
          v152 = v1[83];
          v144 = v1[82];
          v146 = v1[81];
          v132 = v1[80];
          v133 = v1[78];
          v142 = *(void (**)(__n128))(v146 + 16);
          v142(v125);
          v157(v133, 1, 1, v132);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16))(v127, v126, v129);
          v134 = v131[8];
          v135 = type metadata accessor for MSeries(0);
          swift_bridgeObjectRetain(v160);
          *(_QWORD *)&v130[v134] = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v135);
          *(_QWORD *)v130 = v162;
          *((_QWORD *)v130 + 1) = v160;
          ((void (*)(char *, uint64_t, uint64_t))v142)(&v130[v131[5]], v144, v132);
          v136 = &v130[v131[6]];
          *(_QWORD *)v136 = 0;
          *((_QWORD *)v136 + 1) = 0;
          sub_5E1A4(v133, (uint64_t)&v130[v131[7]], &qword_321BA8);
          v137 = _MResourceDecoder_OrNil.init(wrappedValue:)(v140, v135);
          sub_5E09C(v133, &qword_321BA8);
          v121 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
          v121(v144, v132);

          *(_QWORD *)&v130[v134] = v137;
          (*(void (**)(char *, uint64_t, uint64_t))(v148 + 32))(&v130[v131[9]], v151, v150);
          sub_A7D14((uint64_t)v130, v153);
          v156(v167, v152, v132);
          goto LABEL_61;
        }
        v56 = v1[79];
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v160);
        v37 = &qword_321BA8;
        v38 = v56;
        goto LABEL_33;
      }
      v47 = type metadata accessor for MBookSeries(0);
      if (swift_dynamicCastMetatype(v41, v47))
      {
        v43 = v164[81];
        v44 = v164[80];
        v45 = v164[79];
        v46 = (unsigned int *)&enum case for SeriesType.book(_:);
        goto LABEL_29;
      }
    }
    v51 = v164[80];
    v49 = v164[79];
    v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v164[81] + 56);
    v50 = 1;
    goto LABEL_31;
  }
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v34);
LABEL_34:
  if (!*(_QWORD *)(v24 + 16)
    || (v57 = sub_582B4(25705, 0xE200000000000000), (v58 & 1) == 0)
    || (v59 = *v23,
        sub_5E1EC(*(_QWORD *)(*v23 + 56) + 32 * v57, (uint64_t)(v1 + 43)),
        (swift_dynamicCast(v1 + 51, v1 + 43, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0))
  {
    swift_release(v1[93]);
LABEL_44:
    v72 = v1[92];
    v73 = v1[90];
    v74 = v1[89];
    v75 = sub_1141DC();
    v165 = swift_allocError(&_s23FeedViewControllerErrorON, v75, 0, 0);
    swift_willThrow(v165);
    swift_release(v11);

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
    v76 = v1[92];
    v77 = v1[91];
    v78 = v1[88];
    v79 = v1[87];
    v80 = v1[86];
    v81 = v1[84];
    v82 = v1[83];
    v83 = v1[82];
    v84 = v1;
    v85 = v1[79];
    v86 = v84[78];
    v154 = v84[77];
    v158 = v84[76];
    v161 = v84[75];
    v163 = v84[72];
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v154);
    swift_task_dealloc(v158);
    swift_task_dealloc(v161);
    swift_task_dealloc(v163);
    return ((uint64_t (*)(void))v84[1])();
  }
  v60 = v1[52];
  if (!*(_QWORD *)(v24 + 16)
    || (v61 = v1[51], v62 = sub_582B4(0x7954736569726573, 0xEA00000000006570), (v63 & 1) == 0)
    || (sub_5E1EC(*(_QWORD *)(v59 + 56) + 32 * v62, (uint64_t)(v1 + 31)),
        (swift_dynamicCast(v1 + 57, v1 + 31, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0))
  {
    swift_release(v1[93]);
    swift_bridgeObjectRelease(v60);
    goto LABEL_44;
  }
  v64 = v1[58];
  v65 = static MResourceType.classType(for:)(v1[57], v64);
  v160 = v60;
  if (!v65)
    goto LABEL_52;
  v66 = v65;
  v67 = type metadata accessor for MAudiobookSeries(0);
  if (!swift_dynamicCastMetatype(v66, v67))
  {
    v102 = type metadata accessor for MBookSeries(0);
    if (swift_dynamicCastMetatype(v66, v102))
    {
      v68 = v1[81];
      v69 = v1[80];
      v70 = v1[77];
      v71 = (unsigned int *)&enum case for SeriesType.book(_:);
      goto LABEL_51;
    }
LABEL_52:
    v103 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1[81] + 56);
    v103(v1[77], 1, 1, v1[80]);
    goto LABEL_53;
  }
  v68 = v1[81];
  v69 = v1[80];
  v70 = v1[77];
  v71 = (unsigned int *)&enum case for SeriesType.audiobook(_:);
LABEL_51:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 104))(v70, *v71, v69);
  v103 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56);
  v103(v70, 0, 1, v69);
LABEL_53:
  v104 = v1[81];
  v105 = v1[80];
  v106 = v1[77];
  v107 = swift_bridgeObjectRelease(v64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v104 + 48))(v106, 1, v105, v107) == 1)
  {
    v108 = v1[77];
    swift_release(v1[93]);
    swift_bridgeObjectRelease(v160);
    sub_5E09C(v108, &qword_321BA8);
    goto LABEL_44;
  }
  v145 = v1[92];
  v109 = v1[91];
  v110 = v1[90];
  v155 = v109;
  v166 = v1[89];
  v159 = v1[87];
  v111 = (char *)v1[86];
  v141 = v103;
  v143 = (int *)v1[85];
  v112 = v1[84];
  v113 = v1[82];
  v162 = v61;
  v114 = v1[80];
  v115 = v1[78];
  v149 = v113;
  v116 = v1[81];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v116 + 32))(v112, v1[77], v114);
  v147 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16);
  v147(v113, v112, v114);
  v141(v115, 1, 1, v114);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16))(v109, v145, v166);
  v117 = v143[8];
  v118 = type metadata accessor for MSeries(0);
  swift_bridgeObjectRetain(v160);
  *(_QWORD *)&v111[v117] = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v118);
  *(_QWORD *)v111 = v162;
  *((_QWORD *)v111 + 1) = v160;
  v147((uint64_t)&v111[v143[5]], v149, v114);
  v119 = &v111[v143[6]];
  *(_QWORD *)v119 = 0;
  *((_QWORD *)v119 + 1) = 0;
  sub_5E1A4(v115, (uint64_t)&v111[v143[7]], &qword_321BA8);
  v120 = _MResourceDecoder_OrNil.init(wrappedValue:)(0, v118);
  sub_5E09C(v115, &qword_321BA8);
  v121 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
  v121(v149, v114);

  *(_QWORD *)&v111[v117] = v120;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(&v111[v143[9]], v155, v166);
  sub_A7D14((uint64_t)v111, v159);
LABEL_61:
  v1[100] = v160;
  v1[99] = v162;
  v1[98] = v121;
  v138 = sub_5C154(&qword_320908);
  v139 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[101] = v139;
  *v139 = v1;
  v139[1] = sub_11376C;
  return BaseObjectGraph.inject<A>(_:)(v1 + 22, v138, v138);
}

uint64_t sub_11376C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 808);
  *(_QWORD *)(*(_QWORD *)v1 + 816) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[100]);
    v4 = v2[95];
    v5 = v2[94];
    v6 = sub_113C78;
  }
  else
  {
    v4 = v2[95];
    v5 = v2[94];
    v6 = sub_1137E0;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1137E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[25];
  v2 = v0[26];
  sub_66898(v0 + 22, v1);
  v0[65] = 0;
  v3 = *(int **)(v2 + 8);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[103] = v4;
  *v4 = v0;
  v4[1] = sub_113884;
  return ((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))v6)(v0 + 17, v0[99], v0[100], v0 + 65, v1, v2);
}

uint64_t sub_113884()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 824));
  return swift_task_switch(sub_1138D4, *(_QWORD *)(v1 + 752), *(_QWORD *)(v1 + 760));
}

uint64_t sub_1138D4()
{
  _QWORD *v0;
  _QWORD *v1;

  if (v0[20])
    sub_1125DC(v0[99], v0[100], v0[84]);
  swift_bridgeObjectRelease(v0[100]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[104] = v1;
  *v1 = v0;
  v1[1] = sub_113958;
  return BaseObjectGraph.inject<A>(_:)(v0 + 64, &type metadata for PageControllerFactory, &type metadata for PageControllerFactory);
}

uint64_t sub_113958()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 832);
  *(_QWORD *)(*v1 + 840) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_113DD4;
  else
    v4 = sub_1139BC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 752), *(_QWORD *)(v2 + 760));
}

void sub_1139BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;

  v1 = v0[72];
  v2 = v0[67];
  v0[106] = v0[64];
  swift_bridgeObjectRetain(v2);
  ActionOrigin.init(jsActionOptions:)(v3, v1);
  v5 = (char *)&dword_324800 + dword_324800;
  v4 = (_QWORD *)swift_task_alloc(unk_324804);
  v0[107] = v4;
  *v4 = v0;
  v4[1] = sub_113A5C;
  __asm { BR              X8 }
}

uint64_t sub_113A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 856);
  *(_QWORD *)(*(_QWORD *)v2 + 864) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[95];
    v7 = v4[94];
    v8 = sub_113F54;
  }
  else
  {
    v4[109] = a1;
    v6 = v4[95];
    v7 = v4[94];
    v8 = sub_113AD8;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_113AD8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 848);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  v3 = *(_QWORD *)(v0 + 776);
  v4 = *(void **)(v0 + 768);
  v5 = *(_QWORD *)(v0 + 736);
  v11 = *(_QWORD *)(v0 + 720);
  v12 = *(_QWORD *)(v0 + 712);
  v13 = *(_QWORD *)(v0 + 728);
  v14 = *(_QWORD *)(v0 + 704);
  v6 = *(_QWORD *)(v0 + 696);
  v7 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 688);
  v16 = *(_QWORD *)(v0 + 664);
  v8 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 656);
  v18 = *(_QWORD *)(v0 + 632);
  v19 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 616);
  v21 = *(_QWORD *)(v0 + 608);
  v22 = *(_QWORD *)(v0 + 600);
  v9 = *(_QWORD *)(v0 + 576);
  swift_release(*(_QWORD *)(v0 + 744));
  swift_release(v3);

  swift_release(v1);
  sub_5E09C(v9, &qword_322410);
  v2(v7, v8);
  sub_114220(v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v5, v12);
  sub_5E09C(v0 + 136, &qword_320910);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 176));
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v6);
  swift_task_dealloc(v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 872));
}

uint64_t sub_113C78()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(void **)(v0 + 768);
  v4 = *(_QWORD *)(v0 + 736);
  v5 = *(_QWORD *)(v0 + 720);
  v6 = *(_QWORD *)(v0 + 712);
  v7 = *(_QWORD *)(v0 + 696);
  v8 = *(_QWORD *)(v0 + 672);
  v9 = *(_QWORD *)(v0 + 640);
  swift_release(*(_QWORD *)(v0 + 744));
  swift_release(v2);

  v1(v8, v9);
  sub_114220(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v10 = *(_QWORD *)(v0 + 728);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 688);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 656);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 616);
  v21 = *(_QWORD *)(v0 + 608);
  v22 = *(_QWORD *)(v0 + 600);
  v23 = *(_QWORD *)(v0 + 576);
  swift_task_dealloc(*(_QWORD *)(v0 + 736));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_113DD4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(void **)(v0 + 768);
  v4 = *(_QWORD *)(v0 + 736);
  v5 = *(_QWORD *)(v0 + 720);
  v6 = *(_QWORD *)(v0 + 712);
  v7 = *(_QWORD *)(v0 + 696);
  v8 = *(_QWORD *)(v0 + 672);
  v9 = *(_QWORD *)(v0 + 640);
  swift_release(*(_QWORD *)(v0 + 744));
  swift_release(v2);

  v1(v8, v9);
  sub_114220(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_5E09C(v0 + 136, &qword_320910);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 176));
  v10 = *(_QWORD *)(v0 + 728);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 688);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 656);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 616);
  v21 = *(_QWORD *)(v0 + 608);
  v22 = *(_QWORD *)(v0 + 600);
  v23 = *(_QWORD *)(v0 + 576);
  swift_task_dealloc(*(_QWORD *)(v0 + 736));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_113F54()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = *(_QWORD *)(v0 + 848);
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(void **)(v0 + 768);
  v21 = *(_QWORD *)(v0 + 736);
  v4 = *(_QWORD *)(v0 + 720);
  v5 = *(_QWORD *)(v0 + 712);
  v6 = *(_QWORD *)(v0 + 696);
  v7 = *(_QWORD *)(v0 + 672);
  v8 = *(_QWORD *)(v0 + 640);
  v9 = *(_QWORD *)(v0 + 576);
  swift_release(*(_QWORD *)(v0 + 744));
  swift_release(v2);

  sub_5E09C(v9, &qword_322410);
  v1(v7, v8);
  sub_114220(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v21, v5);
  sub_5E09C(v0 + 136, &qword_320910);
  swift_release(v24);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 176));
  v10 = *(_QWORD *)(v0 + 728);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 688);
  v14 = *(_QWORD *)(v0 + 672);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 656);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 616);
  v22 = *(_QWORD *)(v0 + 608);
  v23 = *(_QWORD *)(v0 + 600);
  v25 = *(_QWORD *)(v0 + 576);
  swift_task_dealloc(*(_QWORD *)(v0 + 736));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1140FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 56));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_114140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = (_QWORD *)swift_task_alloc(dword_3247E4);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_7BFF8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t))((char *)&dword_3247E0
                                                                                    + dword_3247E0))(v2, v3, v4, v5, v6, v7);
}

unint64_t sub_1141DC()
{
  unint64_t result;

  result = qword_3247F8;
  if (!qword_3247F8)
  {
    result = swift_getWitnessTable(&unk_25EBB0, &_s23FeedViewControllerErrorON);
    atomic_store(result, (unint64_t *)&qword_3247F8);
  }
  return result;
}

uint64_t sub_114220(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeriesRoomPageIntent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_11425C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for SeriesType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1142D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  v7 = *(_QWORD *)(type metadata accessor for SeriesType(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (uint64_t *)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_112060(a1, a2, a3, v3 + v8, *v9, v9[1]);
}

uint64_t sub_114340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_114350(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_114358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesRoomPageIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_11439C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_111B84(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t _s23FeedViewControllerErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1143E4 + 4 * byte_25EAE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_114404 + 4 * byte_25EAE5[v4]))();
}

_BYTE *sub_1143E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_114404(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_11440C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_114414(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_11441C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_114424(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s23FeedViewControllerErrorOMa()
{
  return &_s23FeedViewControllerErrorON;
}

unint64_t sub_114444()
{
  unint64_t result;

  result = qword_324818;
  if (!qword_324818)
  {
    result = swift_getWitnessTable(&unk_25EB88, &_s23FeedViewControllerErrorON);
    atomic_store(result, (unint64_t *)&qword_324818);
  }
  return result;
}

uint64_t type metadata accessor for YearInReviewHostingController(uint64_t a1)
{
  uint64_t result;

  result = qword_324820;
  if (!qword_324820)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for YearInReviewHostingController);
  return result;
}

uint64_t sub_1144C4(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_345FB0);
}

id sub_114500(void *a1, uint64_t a2, uint64_t a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)swift_getObjectType(a1);
  return objc_msgSendSuper2(&v5, "initWithCoder:", a3);
}

uint64_t sub_114544()
{
  return type metadata accessor for YearInReviewHostingController(0);
}

char *sub_11454C(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  objc_class *v16;
  _BYTE *v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  char *v22;
  char *result;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  objc_super v28;

  v10 = sub_5C154(&qword_322410);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - v14;
  v16 = (objc_class *)type metadata accessor for NavigationContext();
  v17 = objc_allocWithZone(v16);
  v17[OBJC_IVAR___BSUINavigationContext_isInCard] = 0;
  v17[OBJC_IVAR___BSUINavigationContext_isInModal] = 1;
  v28.receiver = v17;
  v28.super_class = v16;
  v18 = objc_msgSendSuper2(&v28, "init");
  sub_6C1C4(a4, (uint64_t)v15);
  v19 = (char *)objc_allocWithZone((Class)type metadata accessor for YearInReviewHostingController(0));
  sub_6C1C4((uint64_t)v15, (uint64_t)v12);
  swift_retain(a1);
  v20 = a3;
  v21 = v18;
  v22 = sub_6749C(a1, v20, (uint64_t)v12, v21, a5 & 1, 0, 0, 0, 0, v19, a2);
  sub_B5AE4((uint64_t)v15);
  result = (char *)objc_msgSend(v22, "view");
  if (result)
  {
    v24 = result;
    v25 = Color.init(hexString:)(0x423243374246, 0xE600000000000000);
    if (!v25)
      v25 = static Color.orange.getter();
    v26 = v25;
    sub_114760();
    v27 = (void *)UIColor.init(_:)(v26);
    objc_msgSend(v24, "setBackgroundColor:", v27);
    swift_bridgeObjectRelease(0);

    swift_release(a1);
    sub_B5AE4(a4);
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_114760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324870;
  if (!qword_324870)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_324870);
  }
  return result;
}

uint64_t sub_11479C()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v39;
  UIColor_optional v40;

  v1 = type metadata accessor for Color.RGBColorSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = *((_QWORD *)v0 + 1);
  v7 = v0[2];
  v8 = *((_QWORD *)v0 + 4);
  if (v8
    && (v9 = *((_QWORD *)v0 + 3), v40 = ColorConstants.uiColor(_:)(*(Swift::String *)(&v8 - 1)), v40.value.super.isa))
  {
    isa = v40.value.super.isa;
    if ((ColorConstants.isLight.getter(v40.value.super.isa, *(_QWORD *)&v40.is_nil) & 1) != 0)
      v12 = 1;
    else
      v12 = 2;
    v13 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", v12);
    v14 = -[objc_class resolvedColorWithTraitCollection:](isa, "resolvedColorWithTraitCollection:", v13);

    v15 = v14;
    v16 = Color.init(_:)();
    swift_bridgeObjectRetain(v6);
    v17 = Color.init(hexString:)(*(_QWORD *)&v5, v6);
    if (!v17)
    {

      return v16;
    }
    v18 = v17;
    v19 = ((double (*)(void))Color.rgbaComponents.getter)();
    v21 = v20;
    v23 = v22;
    v24 = v7 * v19 + Color.rgbaComponents.getter(v16);
    v26 = v7 * v21 + v25;
    v28 = v7 * v23 + v27;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
    v29 = Color.init(_:red:green:blue:opacity:)(v4, v24, v26, v28, 1.0);

    swift_release(v16);
    v30 = v18;
  }
  else
  {
    swift_bridgeObjectRetain(v6);
    v31 = Color.init(hexString:)(*(_QWORD *)&v5, v6);
    if (!v31)
      return 0;
    v32 = v31;
    v33 = ((double (*)(void))Color.rgbaComponents.getter)();
    v35 = v34;
    v37 = v36;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
    v29 = Color.init(_:red:green:blue:opacity:)(v4, v33, v35, v37, v7);
    v30 = v32;
  }
  swift_release(v30);
  return v29;
}

uint64_t sub_1149D0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x63726550746E6974;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x726F6C6F43786568;
}

uint64_t sub_114A38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_115188(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_114A5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_114C2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_114A84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_114C2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TintColorInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  v3 = sub_5C154(&qword_324878);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v10 = v1[3];
  v19 = v1[4];
  v20 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_66898(a1, v11);
  v13 = sub_114C2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TintColorInfo.CodingKeys, &type metadata for TintColorInfo.CodingKeys, v13, v11, v12);
  v25 = 0;
  v14 = v21;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v25, v3);
  if (!v14)
  {
    v16 = v19;
    v15 = v20;
    v24 = v9;
    v23 = 1;
    v17 = sub_114C70();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v3, &type metadata for CGFloat, v17);
    v22 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v22, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_114C2C()
{
  unint64_t result;

  result = qword_324880;
  if (!qword_324880)
  {
    result = swift_getWitnessTable(&unk_25ED58, &type metadata for TintColorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324880);
  }
  return result;
}

unint64_t sub_114C70()
{
  unint64_t result;

  result = qword_324888;
  if (!qword_324888)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_324888);
  }
  return result;
}

void TintColorInfo.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;

  v5 = sub_5C154(&qword_324890);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v11 = sub_114C2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TintColorInfo.CodingKeys, &type metadata for TintColorInfo.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  }
  else
  {
    v26 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
    v14 = v13;
    v24 = 1;
    v15 = sub_9BB00();
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, &type metadata for CGFloat, &v24, v5, &type metadata for CGFloat, v15);
    v16 = v25;
    v23 = 2;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v23, v5);
    v19 = v18;
    v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21 = v17;
    v20(v8, v5);
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
    a2[3] = v21;
    a2[4] = v19;
    swift_bridgeObjectRetain(v19);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v14);
  }
}

void sub_114EA8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  TintColorInfo.init(from:)(a1, a2);
}

uint64_t sub_114EBC(_QWORD *a1)
{
  return TintColorInfo.encode(to:)(a1);
}

uint64_t initializeWithCopy for TintColorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for TintColorInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for TintColorInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[4];
  v7 = a1[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for TintColorInfo()
{
  return &type metadata for TintColorInfo;
}

uint64_t storeEnumTagSinglePayload for TintColorInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_115030 + 4 * byte_25EC2D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_115064 + 4 * byte_25EC28[v4]))();
}

uint64_t sub_115064(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11506C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x115074);
  return result;
}

uint64_t sub_115080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x115088);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_11508C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_115094(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TintColorInfo.CodingKeys()
{
  return &type metadata for TintColorInfo.CodingKeys;
}

unint64_t sub_1150B4()
{
  unint64_t result;

  result = qword_324898;
  if (!qword_324898)
  {
    result = swift_getWitnessTable(&unk_25ED30, &type metadata for TintColorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324898);
  }
  return result;
}

unint64_t sub_1150FC()
{
  unint64_t result;

  result = qword_3248A0;
  if (!qword_3248A0)
  {
    result = swift_getWitnessTable(&unk_25ECA0, &type metadata for TintColorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3248A0);
  }
  return result;
}

unint64_t sub_115144()
{
  unint64_t result;

  result = qword_3248A8;
  if (!qword_3248A8)
  {
    result = swift_getWitnessTable(&unk_25ECC8, &type metadata for TintColorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3248A8);
  }
  return result;
}

uint64_t sub_115188(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x726F6C6F43786568 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F43786568, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x63726550746E6974 && a2 == 0xEB00000000746E65)
  {
    v7 = 0xEB00000000746E65;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63726550746E6974, 0xEB00000000746E65, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000000002710F0)
  {
    swift_bridgeObjectRelease(0x80000000002710F0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002710F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1152F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1152FC);
}

uint64_t sub_1152FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_321EA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_11537C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_115388);
}

uint64_t sub_115388(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_321EA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SeeAllFooterComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_324908;
  if (!qword_324908)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeeAllFooterComponentModel);
  return result;
}

void sub_11543C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = &unk_25EDF8;
  sub_AE8F0(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1154B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_5C154(&qword_324960);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v11 = sub_115B08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SeeAllFooterComponentModel.CodingKeys, &type metadata for SeeAllFooterComponentModel.CodingKeys, v11, v9, v10);
  v23 = 0;
  v12 = sub_5C154(&qword_320B78);
  v13 = sub_67060(&qword_322050, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v23, v5, v12, v13);
  if (!v2)
  {
    v22 = 1;
    v14 = sub_5C154(&qword_320B70);
    v15 = sub_67060(&qword_322058, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3 + 40, &v22, v5, v14, v15);
    v16 = v3 + *(int *)(type metadata accessor for SeeAllFooterComponentModel(0) + 24);
    v21 = 2;
    v17 = sub_5C154(&qword_321EA8);
    v18 = sub_AF240();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v21, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_11568C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v31 = a2;
  v3 = sub_5C154(&qword_321EA8);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_5C154(&qword_324950);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SeeAllFooterComponentModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v11 + 40;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  sub_8B354((uint64_t)&v39, (uint64_t)&v36);
  v12 = v37;
  *(_OWORD *)(v11 + 40) = v36;
  *(_OWORD *)(v11 + 56) = v12;
  *((_QWORD *)v11 + 9) = v38;
  sub_5E09C((uint64_t)&v39, (uint64_t *)&unk_326210);
  v13 = (uint64_t)&v11[*(int *)(v9 + 24)];
  v14 = type metadata accessor for ImpressionMetrics(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v34 = v13;
  v15(v13, 1, 1, v14);
  v16 = a1[3];
  v17 = a1[4];
  v33 = a1;
  sub_66898(a1, v16);
  v18 = sub_115B08();
  v19 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeeAllFooterComponentModel.CodingKeys, &type metadata for SeeAllFooterComponentModel.CodingKeys, v18, v16, v17);
  if (v19)
  {
    v23 = v34;
    v24 = (uint64_t)v35;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v33);
    sub_5E09C(v24, &qword_320B70);
    return sub_5E09C(v23, &qword_321EA8);
  }
  else
  {
    v42 = v6;
    v20 = sub_5C154(&qword_320B78);
    LOBYTE(v36) = 0;
    v21 = sub_67060((unint64_t *)&qword_320B90, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    v22 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v20, &v36, v32, v20, v21);
    v25 = v40;
    *(_OWORD *)v11 = v39;
    *((_OWORD *)v11 + 1) = v25;
    *((_QWORD *)v11 + 4) = v41;
    v26 = sub_5C154(&qword_320B70);
    LOBYTE(v36) = 1;
    v27 = sub_67060(&qword_320B98, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v26, &v36, v22, v26, v27);
    sub_8B3E0((uint64_t)&v39, (uint64_t)v35, &qword_320B70);
    LOBYTE(v39) = 2;
    v28 = sub_AF0B8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v3, &v39, v22, v3, v28);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v22);
    sub_8B3E0((uint64_t)v5, v34, &qword_321EA8);
    sub_115B4C((uint64_t)v11, v31);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v33);
    return sub_115B90((uint64_t)v11);
  }
}

uint64_t sub_115A38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_115B08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_115A60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_115B08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_115A88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_11568C(a1, a2);
}

uint64_t sub_115A9C(_QWORD *a1)
{
  return sub_1154B8(a1);
}

uint64_t sub_115AB0()
{
  return sub_648E0(&qword_320080, type metadata accessor for SeeAllFooterComponentModel, (uint64_t)&unk_25EEC0);
}

uint64_t sub_115ADC()
{
  return sub_648E0(&qword_324948, type metadata accessor for SeeAllFooterComponentModel, (uint64_t)&unk_25EE10);
}

unint64_t sub_115B08()
{
  unint64_t result;

  result = qword_324958;
  if (!qword_324958)
  {
    result = swift_getWitnessTable(&unk_25EFC4, &type metadata for SeeAllFooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324958);
  }
  return result;
}

uint64_t sub_115B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeeAllFooterComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_115B90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeeAllFooterComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SeeAllFooterComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_115C18 + 4 * byte_25EDB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_115C4C + 4 * byte_25EDB0[v4]))();
}

uint64_t sub_115C4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_115C54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x115C5CLL);
  return result;
}

uint64_t sub_115C68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x115C70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_115C74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_115C7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeeAllFooterComponentModel.CodingKeys()
{
  return &type metadata for SeeAllFooterComponentModel.CodingKeys;
}

unint64_t sub_115C9C()
{
  unint64_t result;

  result = qword_324968;
  if (!qword_324968)
  {
    result = swift_getWitnessTable(&unk_25EF9C, &type metadata for SeeAllFooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324968);
  }
  return result;
}

unint64_t sub_115CE4()
{
  unint64_t result;

  result = qword_324970;
  if (!qword_324970)
  {
    result = swift_getWitnessTable(&unk_25EF0C, &type metadata for SeeAllFooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324970);
  }
  return result;
}

unint64_t sub_115D2C()
{
  unint64_t result;

  result = qword_324978;
  if (!qword_324978)
  {
    result = swift_getWitnessTable(&unk_25EF34, &type metadata for SeeAllFooterComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324978);
  }
  return result;
}

id SwiftUICoverAnimationProvider.__allocating_init(frame:image:imageViewIdentifier:referenceView:isInNonHorizontalLayout:isVisible:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12)
{
  objc_class *v12;
  _BYTE *v25;
  double *v26;
  _QWORD *v27;
  char *v28;
  objc_super v30;

  v25 = objc_allocWithZone(v12);
  *(_QWORD *)&v25[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset] = 0;
  v26 = (double *)&v25[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceFrame];
  *v26 = a9;
  v26[1] = a10;
  v26[2] = a11;
  v26[3] = a12;
  v27 = &v25[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_imageViewIdentifier];
  *v27 = a2;
  v27[1] = a3;
  *(_QWORD *)&v25[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceReferenceView] = a4;
  *(_QWORD *)&v25[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_coverSourceImage] = a1;
  v25[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_isInNonHorizontalLayout] = a5;
  v28 = &v25[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible];
  *(_QWORD *)v28 = a6;
  *((_QWORD *)v28 + 1) = a7;
  v28[16] = a8;
  v30.receiver = v25;
  v30.super_class = v12;
  return objc_msgSendSuper2(&v30, "init");
}

id SwiftUICoverAnimationProvider.init(frame:image:imageViewIdentifier:referenceView:isInNonHorizontalLayout:isVisible:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12)
{
  _BYTE *v12;
  double *v13;
  _QWORD *v14;
  char *v15;
  objc_super v17;

  *(_QWORD *)&v12[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset] = 0;
  v13 = (double *)&v12[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceFrame];
  *v13 = a9;
  v13[1] = a10;
  v13[2] = a11;
  v13[3] = a12;
  v14 = &v12[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_imageViewIdentifier];
  *v14 = a2;
  v14[1] = a3;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceReferenceView] = a4;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_coverSourceImage] = a1;
  v12[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_isInNonHorizontalLayout] = a5;
  v15 = &v12[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible];
  *(_QWORD *)v15 = a6;
  *((_QWORD *)v15 + 1) = a7;
  v15[16] = a8;
  v17.receiver = v12;
  v17.super_class = (Class)type metadata accessor for SwiftUICoverAnimationProvider();
  return objc_msgSendSuper2(&v17, "init");
}

uint64_t type metadata accessor for SwiftUICoverAnimationProvider()
{
  return objc_opt_self(_TtC11BookStoreUI29SwiftUICoverAnimationProvider);
}

uint64_t SwiftUICoverAnimationProvider.isInNonHorizontalLayout.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_isInNonHorizontalLayout);
}

double sub_115F90()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset, v3, 0, 0);
  return *(double *)v1;
}

uint64_t sub_116024(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (double *)(v1
                + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset);
  result = swift_beginAccess(v1+ OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_116074(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset, a1, 33, 0);
  return j__swift_endAccess;
}

void SwiftUICoverAnimationProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.SwiftUICoverAnimationProvider", 41, "init()", 6, 0);
  __break(1u);
}

id SwiftUICoverAnimationProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SwiftUICoverAnimationProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall SwiftUICoverAnimationProvider.cardStackTransitioningCoverSourceReplaceReferenceView(_:)(UIView a1)
{
  uint64_t v1;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  id v10;

  v3 = (double *)(v1 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceFrame);
  if (!CGRectIsEmpty(*(CGRect *)(v1 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceFrame)))
  {
    v4 = OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceReferenceView;
    -[objc_class convertRect:fromCoordinateSpace:](a1.super.super.isa, "convertRect:fromCoordinateSpace:", *(_QWORD *)(v1 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceReferenceView), *v3, v3[1], v3[2], v3[3]);
    *(_QWORD *)v3 = v5;
    *((_QWORD *)v3 + 1) = v6;
    *((_QWORD *)v3 + 2) = v7;
    *((_QWORD *)v3 + 3) = v8;
    v10 = *(id *)(v1 + v4);
    *(UIView *)(v1 + v4) = a1;
    v9 = a1.super.super.isa;

  }
}

uint64_t (*SwiftUICoverAnimationProvider.cardStackTransitioningCoverSourceHide()())()
{
  _BYTE *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _BYTE *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 8];
  v2 = v0[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 16];
  v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible];
  v8 = v1;
  v9 = v2;
  v6 = 0;
  v3 = sub_5C154(&qword_3249B8);
  Binding.wrappedValue.setter(&v6, v3);
  *(_QWORD *)(swift_allocObject(&unk_2ED0B8, 24, 7) + 16) = v0;
  v4 = v0;
  return sub_1163BC;
}

uint64_t sub_116338(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 8);
  v2 = *(_BYTE *)(a1 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 16);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible);
  v7 = v1;
  v8 = v2;
  v5 = 1;
  v3 = sub_5C154(&qword_3249B8);
  return Binding.wrappedValue.setter(&v5, v3);
}

uint64_t sub_116398()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1163BC()
{
  uint64_t v0;

  return sub_116338(*(_QWORD *)(v0 + 16));
}

double _s11BookStoreUI29SwiftUICoverAnimationProviderC38cardStackTransitioningCoverSourceFrameSo6CGRectVvg_0()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceFrame);
}

UIView __swiftcall SwiftUICoverAnimationProvider.coverAnimationSourceReferenceView()()
{
  uint64_t v0;

  return (UIView)objc_retain(*(id *)(v0
                                   + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceReferenceView));
}

UIImage_optional __swiftcall SwiftUICoverAnimationProvider.coverAnimationSourceImage()()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::Bool v3;
  objc_class *v4;
  UIImage_optional result;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_coverSourceImage);
  v2 = v1;
  v4 = (objc_class *)v1;
  result.value.super.isa = v4;
  result.is_nil = v3;
  return result;
}

UIView_optional __swiftcall SwiftUICoverAnimationProvider.coverAnimationSourceView()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  Swift::Bool v5;
  objc_class *v6;
  _QWORD v7[2];
  UIView_optional result;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_sourceReferenceView);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_imageViewIdentifier + 8);
  v7[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_imageViewIdentifier);
  v7[1] = v2;
  v3 = v1;
  swift_bridgeObjectRetain(v2);
  v4 = UIView.findPresentationSourceView<A>(id:)(v7, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v2);

  v6 = (objc_class *)v4;
  result.value.super.super.isa = v6;
  result.is_nil = v5;
  return result;
}

Swift::Void __swiftcall SwiftUICoverAnimationProvider.coverAnimationSourcePrepare()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 8);
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 16);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible);
  v6 = v1;
  v7 = v2;
  v4 = 0;
  v3 = sub_5C154(&qword_3249B8);
  Binding.wrappedValue.setter(&v4, v3);
}

Swift::Void __swiftcall SwiftUICoverAnimationProvider.coverAnimationSourceFinalize()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 8);
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible + 16);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider__isVisible);
  v6 = v1;
  v7 = v2;
  v4 = 1;
  v3 = sub_5C154(&qword_3249B8);
  Binding.wrappedValue.setter(&v4, v3);
}

double sub_1167B8@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double *v3;
  double result;
  _BYTE v5[24];

  v3 = (double *)(*a1
                + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset);
  swift_beginAccess(v3, v5, 0, 0);
  result = *v3;
  *a2 = *(_QWORD *)v3;
  return result;
}

uint64_t sub_116808(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2
                + OBJC_IVAR____TtC11BookStoreUI29SwiftUICoverAnimationProvider_cardStackTransitioningCoverSourceExtraXOffset);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t method lookup function for SwiftUICoverAnimationProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SwiftUICoverAnimationProvider);
}

uint64_t dispatch thunk of SwiftUICoverAnimationProvider.__allocating_init(frame:image:imageViewIdentifier:referenceView:isInNonHorizontalLayout:isVisible:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of SwiftUICoverAnimationProvider.cardStackTransitioningCoverSourceExtraXOffset.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of SwiftUICoverAnimationProvider.cardStackTransitioningCoverSourceExtraXOffset.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of SwiftUICoverAnimationProvider.cardStackTransitioningCoverSourceExtraXOffset.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.sectname[swift_isaMask & *v0])();
}

uint64_t sub_1168CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1168DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t JSABridge.perform<A, B>(_:asPartOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v7[48] = a6;
  v7[49] = v6;
  v7[46] = a4;
  v7[47] = a5;
  v7[44] = a2;
  v7[45] = a3;
  v7[43] = a1;
  v9 = type metadata accessor for JSRoute(0);
  v7[50] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[51] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[52] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[53] = swift_task_alloc(v12);
  v7[54] = swift_task_alloc(v12);
  v13 = type metadata accessor for MonotonicTime(0);
  v7[55] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[56] = v14;
  v7[57] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PageRenderEvent(0, v15);
  v7[58] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v7[59] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[60] = swift_task_alloc(v18);
  v7[61] = swift_task_alloc(v18);
  v7[62] = swift_task_alloc(v18);
  v7[63] = swift_task_alloc(v18);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3237E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[64] = swift_task_alloc(v19);
  v7[65] = swift_task_alloc(v19);
  v7[66] = swift_task_alloc(v19);
  v7[67] = swift_task_alloc(v19);
  v7[68] = swift_task_alloc(v19);
  v7[69] = swift_task_alloc(v19);
  v20 = sub_5C154(&qword_3237E8);
  v7[70] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PageIntentInstrumentation(0);
  v7[71] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v7[72] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[73] = swift_task_alloc(v23);
  v7[74] = swift_task_alloc(v23);
  v24 = *(_QWORD *)(a5 - 8);
  v7[75] = v24;
  v7[76] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_116AD4, 0, 0);
}

uint64_t sub_116AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  unsigned int (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unsigned int (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;

  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v0 + 376);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 600) + 16))(v1, *(_QWORD *)(v0 + 352), v2);
  v3 = sub_5C154(&qword_3249F0);
  if (!swift_dynamicCast(v0 + 136, v1, v2, v3, 6))
  {
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    sub_5E09C(v0 + 136, &qword_3249F8);
    v12 = type metadata accessor for IntentDispatcherError(0);
    v13 = sub_648E0(&qword_324A00, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDispatcherError, (uint64_t)&protocol conformance descriptor for IntentDispatcherError);
    swift_allocError(v12, v13, 0, 0);
    v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for IntentDispatcherError.unsupported(_:), v12);
    swift_willThrow(v15);
    v16 = *(_QWORD *)(v0 + 592);
    v17 = *(_QWORD *)(v0 + 584);
    v18 = *(_QWORD *)(v0 + 560);
    v19 = *(_QWORD *)(v0 + 552);
    v20 = *(_QWORD *)(v0 + 544);
    v21 = *(_QWORD *)(v0 + 536);
    v22 = *(_QWORD *)(v0 + 528);
    v23 = *(_QWORD *)(v0 + 520);
    v24 = *(_QWORD *)(v0 + 512);
    v146 = *(_QWORD *)(v0 + 504);
    v149 = *(_QWORD *)(v0 + 496);
    v152 = *(_QWORD *)(v0 + 488);
    v155 = *(_QWORD *)(v0 + 480);
    v157 = *(_QWORD *)(v0 + 456);
    v159 = *(_QWORD *)(v0 + 432);
    v160 = *(_QWORD *)(v0 + 424);
    swift_task_dealloc(*(_QWORD *)(v0 + 608));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v146);
    swift_task_dealloc(v149);
    swift_task_dealloc(v152);
    swift_task_dealloc(v155);
    swift_task_dealloc(v157);
    swift_task_dealloc(v159);
    swift_task_dealloc(v160);
    v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 560);
  sub_F1344((__int128 *)(v0 + 136), (_OWORD *)(v0 + 88));
  BaseObjectGraph.optional<A>(_:)(v5, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5);
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 576);
  v10 = *(_QWORD *)(v0 + 568);
  v11 = *(_QWORD *)(v0 + 560);
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v8, enum case for PageIntentInstrumentation.notInstrumented(_:), v10);
    sub_5E09C(v11, &qword_3237E8);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 32))(v8, *(_QWORD *)(v0 + 560), v10);
  }
  v27 = v0 + 16;
  v28 = (_QWORD *)(v0 + 184);
  v29 = *(_QWORD *)(v0 + 584);
  v30 = *(_QWORD *)(v0 + 576);
  v31 = *(_QWORD *)(v0 + 568);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 16))(v29, *(_QWORD *)(v0 + 592), v31);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 88))(v29, v31);
  v161 = (_QWORD *)(v0 + 232);
  if (v32 == enum case for PageIntentInstrumentation.primaryData(_:))
  {
    v33 = *(_QWORD *)(v0 + 584);
    v34 = *(_QWORD *)(v0 + 552);
    v36 = *(_QWORD *)(v0 + 464);
    v35 = *(_QWORD *)(v0 + 472);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 576) + 96))(v33, *(_QWORD *)(v0 + 568));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v34, v33, v36);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v34, 0, 1, v36);
  }
  else
  {
    v37 = v32;
    if (v32 == enum case for PageIntentInstrumentation.secondaryData(_:))
    {
      v38 = *(_QWORD *)(v0 + 584);
      v39 = *(_QWORD *)(v0 + 576);
      v40 = *(_QWORD *)(v0 + 568);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 472) + 56))(*(_QWORD *)(v0 + 552), 1, 1, *(_QWORD *)(v0 + 464));
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    }
    else
    {
      v41 = enum case for PageIntentInstrumentation.notInstrumented(_:);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 472) + 56))(*(_QWORD *)(v0 + 552), 1, 1, *(_QWORD *)(v0 + 464));
      if (v37 != v41)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 576) + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 568));
    }
  }
  v42 = *(_QWORD *)(v0 + 544);
  v43 = *(_QWORD *)(v0 + 464);
  v44 = *(_QWORD *)(v0 + 472);
  sub_117F30(*(_QWORD *)(v0 + 552), v42);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  *(_QWORD *)(v0 + 616) = v45;
  v46 = v45(v42, 1, v43);
  v47 = *(_QWORD *)(v0 + 544);
  if (v46 == 1)
  {
    sub_5E09C(v47, &qword_3237E0);
    v48 = v0 + 88;
    v49 = v0 + 272;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 472) + 32))(*(_QWORD *)(v0 + 504), v47, *(_QWORD *)(v0 + 464));
    if (qword_31E730 != -1)
      swift_once(&qword_31E730, sub_1F088C);
    v50 = *(_QWORD *)(v0 + 504);
    v51 = *(_QWORD *)(v0 + 464);
    v52 = *(_QWORD *)(v0 + 472);
    v53 = *(_QWORD *)(v0 + 448);
    v54 = *(_QWORD *)(v0 + 456);
    v55 = *(_QWORD *)(v0 + 440);
    v56 = sub_5C154(&qword_323800);
    v57 = sub_5240C(v56, (uint64_t)qword_346048);
    v58 = PageRenderEvent.id.getter(v57);
    v60 = v59;
    static MonotonicTime.now.getter(v58);
    PageRenderField<>.startTime(for:at:)(v58);
    v61 = swift_bridgeObjectRelease(v60);
    (*(void (**)(uint64_t, uint64_t, __n128))(v53 + 8))(v54, v55, v61);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
    v27 = v0 + 16;
    v48 = v0 + 88;
    v28 = (_QWORD *)(v0 + 184);
    v49 = v0 + 272;
  }
  v62 = *(_QWORD *)(v0 + 552);
  v63 = *(_QWORD *)(v0 + 536);
  v65 = *(_QWORD *)(v0 + 424);
  v64 = *(_QWORD *)(v0 + 432);
  v66 = *(_QWORD *)(v0 + 408);
  v147 = v65;
  v150 = *(_QWORD *)(v0 + 416);
  v67 = *(_QWORD *)(v0 + 400);
  sub_117F78(v48, (uint64_t)v28);
  sub_117F30(v62, v63);
  sub_117FBC(v28, v63, v27);
  v153 = v64;
  JSRoute.init(service:function:)(0x656D69746E757224, 0xE800000000000000, 0x6863746170736964, 0xE800000000000000);
  *(_QWORD *)(v0 + 256) = &_s15DecoratedIntentVN;
  *(_QWORD *)(v0 + 264) = sub_118160();
  v68 = swift_allocObject(&unk_2ED148, 88, 7);
  *(_QWORD *)(v0 + 232) = v68;
  sub_1181D8(v27, v68 + 16);
  v69 = swift_allocObject(&unk_2ED170, 24, 7);
  *(_QWORD *)(v69 + 16) = 0;
  v70 = v66;
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
  v72 = v67;
  v71(v65, v64, v67);
  v73 = (__int128 *)v49;
  sub_5E0D8((uint64_t)v161, v49);
  v74 = *(unsigned __int8 *)(v70 + 80);
  v75 = (v74 + 16) & ~v74;
  v76 = (v150 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  v77 = (v76 + 47) & 0xFFFFFFFFFFFFFFF8;
  v78 = swift_allocObject(&unk_2ED198, v77 + 8, v74 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v78 + v75, v147, v72);
  sub_5DC98(v73, v78 + v76);
  *(_QWORD *)(v78 + v77) = v69;
  swift_retain(v69);
  JSABridge.enqueueBlockPrefersSync(_:f:l:)(sub_11925C, v78, 0xD000000000000087, 0x8000000000271390, 56);
  swift_release(v78);
  swift_beginAccess(v69 + 16, v0 + 312, 0, 0);
  v79 = *(_QWORD *)(v69 + 16);
  *(_QWORD *)(v0 + 624) = v79;
  swift_retain(v79);
  swift_release(v69);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v161);
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v153, v72);
  if (!v79)
  {
    v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
    v84 = *(_QWORD *)(v0 + 528);
    v85 = *(_QWORD *)(v0 + 464);
    sub_117F30(*(_QWORD *)(v0 + 552), v84);
    if (v83(v84, 1, v85) == 1)
    {
      sub_5E09C(*(_QWORD *)(v0 + 528), &qword_3237E0);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 472) + 32))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 464));
      if (qword_31E730 != -1)
        swift_once(&qword_31E730, sub_1F088C);
      v86 = *(_QWORD *)(v0 + 496);
      v87 = *(_QWORD *)(v0 + 464);
      v88 = *(_QWORD *)(v0 + 472);
      v90 = *(_QWORD *)(v0 + 448);
      v89 = *(_QWORD *)(v0 + 456);
      v91 = *(_QWORD *)(v0 + 440);
      v92 = sub_5C154(&qword_323800);
      v93 = sub_5240C(v92, (uint64_t)qword_346048);
      v94 = PageRenderEvent.id.getter(v93);
      v96 = v95;
      static MonotonicTime.now.getter(v94);
      PageRenderField<>.endTime(for:at:)(v94);
      v97 = swift_bridgeObjectRelease(v96);
      (*(void (**)(uint64_t, uint64_t, __n128))(v90 + 8))(v89, v91, v97);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
    }
    v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
    v99 = *(_QWORD *)(v0 + 520);
    v100 = *(_QWORD *)(v0 + 464);
    sub_117F30(*(_QWORD *)(v0 + 552), v99);
    if (v98(v99, 1, v100) == 1)
    {
      sub_5E09C(*(_QWORD *)(v0 + 520), &qword_3237E0);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 472) + 32))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 464));
      if (qword_31E738 != -1)
        swift_once(&qword_31E738, sub_1F08A4);
      v101 = *(_QWORD *)(v0 + 488);
      v102 = *(_QWORD *)(v0 + 464);
      v103 = *(_QWORD *)(v0 + 472);
      v105 = *(_QWORD *)(v0 + 448);
      v104 = *(_QWORD *)(v0 + 456);
      v106 = *(_QWORD *)(v0 + 440);
      v107 = sub_5C154(&qword_323800);
      v108 = sub_5240C(v107, (uint64_t)qword_346060);
      v109 = PageRenderEvent.id.getter(v108);
      v111 = v110;
      static MonotonicTime.now.getter(v109);
      PageRenderField<>.startTime(for:at:)(v109);
      v112 = swift_bridgeObjectRelease(v111);
      (*(void (**)(uint64_t, uint64_t, __n128))(v105 + 8))(v104, v106, v112);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v101, v102);
    }
    v113 = *(_QWORD *)(v0 + 376);
    v115 = *(_QWORD *)(v0 + 360);
    v114 = *(_QWORD *)(v0 + 368);
    v116 = *(_QWORD *)(v0 + 344);
    swift_getDynamicType(*(_QWORD *)(v0 + 352), v113, 0);
    v117 = sub_118230(v116, 0, v115, v113, v114);
    v118 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
    v119 = *(_QWORD *)(v0 + 512);
    v120 = *(_QWORD *)(v0 + 464);
    sub_117F30(*(_QWORD *)(v0 + 552), v119);
    if (v118(v119, 1, v120) == 1)
    {
      sub_5E09C(*(_QWORD *)(v0 + 512), &qword_3237E0);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 472) + 32))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 464));
      if (qword_31E738 != -1)
        swift_once(&qword_31E738, sub_1F08A4);
      v122 = *(_QWORD *)(v0 + 472);
      v121 = *(_QWORD *)(v0 + 480);
      v123 = *(_QWORD *)(v0 + 456);
      v162 = *(_QWORD *)(v0 + 464);
      v125 = *(_QWORD *)(v0 + 440);
      v124 = *(_QWORD *)(v0 + 448);
      v126 = sub_5C154(&qword_323800);
      v127 = sub_5240C(v126, (uint64_t)qword_346060);
      v128 = PageRenderEvent.id.getter(v127);
      v130 = v129;
      static MonotonicTime.now.getter(v128);
      PageRenderField<>.endTime(for:at:)(v128);
      v131 = swift_bridgeObjectRelease(v130);
      (*(void (**)(uint64_t, uint64_t, __n128))(v124 + 8))(v123, v125, v131);
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v162);
    }
    v132 = *(_QWORD *)(v0 + 624);
    v133 = *(_QWORD *)(v0 + 608);
    v134 = *(_QWORD *)(v0 + 592);
    v135 = *(_QWORD *)(v0 + 584);
    v136 = *(_QWORD *)(v0 + 576);
    v137 = *(_QWORD *)(v0 + 568);
    v138 = *(_QWORD *)(v0 + 560);
    v139 = *(_QWORD *)(v0 + 552);
    v140 = *(_QWORD *)(v0 + 544);
    v141 = *(_QWORD *)(v0 + 536);
    v142 = *(_QWORD *)(v0 + 528);
    v143 = *(_QWORD *)(v0 + 520);
    v144 = *(_QWORD *)(v0 + 512);
    v145 = *(_QWORD *)(v0 + 504);
    v148 = *(_QWORD *)(v0 + 496);
    v151 = *(_QWORD *)(v0 + 488);
    v154 = *(_QWORD *)(v0 + 480);
    v156 = *(_QWORD *)(v0 + 456);
    v158 = *(_QWORD *)(v0 + 432);
    v163 = *(_QWORD *)(v0 + 424);
    PageIntentInstrumentation._forBooksOnly_process(contentsOf:)((Swift::OpaquePointer)v117);
    swift_bridgeObjectRelease(v117);
    swift_release(v132);
    sub_1192B8((_QWORD *)(v0 + 16));
    sub_5E09C(v139, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v134, v137);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 88));
    swift_task_dealloc(v133);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    swift_task_dealloc(v140);
    swift_task_dealloc(v141);
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v148);
    swift_task_dealloc(v151);
    swift_task_dealloc(v154);
    swift_task_dealloc(v156);
    swift_task_dealloc(v158);
    swift_task_dealloc(v163);
    v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  swift_retain(v79);
  v80 = sub_5C154(&qword_324A10);
  v81 = sub_119714();
  v82 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  *(_QWORD *)(v0 + 632) = v82;
  *v82 = v0;
  v82[1] = sub_117700;
  return dispatch thunk of Future.then()(v0 + 336, v80, v81);
}

uint64_t sub_117700()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[78]);
  if (v0)
  {
    v4 = sub_117DB8;
  }
  else
  {
    v2[81] = v2[42];
    v4 = sub_117774;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_117774()
{
  _QWORD *v0;
  void *v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  Swift::OpaquePointer v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;

  v1 = (void *)v0[81];
  v101 = v0[80];
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[77];
  v3 = v0[66];
  v4 = v0[58];
  sub_117F30(v0[69], v3);
  v5 = v2(v3, 1, v4);
  v6 = v0[66];
  v104 = v1;
  if (v5 == 1)
  {
    sub_5E09C(v6, &qword_3237E0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[59] + 32))(v0[62], v6, v0[58]);
    if (qword_31E730 != -1)
      swift_once(&qword_31E730, sub_1F088C);
    v7 = v0[62];
    v8 = v0[58];
    v9 = v0[59];
    v10 = v0[56];
    v11 = v0[57];
    v12 = v0[55];
    v13 = sub_5C154(&qword_323800);
    v14 = sub_5240C(v13, (uint64_t)qword_346048);
    v15 = PageRenderEvent.id.getter(v14);
    v17 = v16;
    static MonotonicTime.now.getter(v15);
    PageRenderField<>.endTime(for:at:)(v15);
    v18 = swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v11, v12, v18);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  v19 = v0 + 2;
  v20 = v0 + 11;
  v21 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[77];
  v22 = v0[65];
  v23 = v0[58];
  sub_117F30(v0[69], v22);
  if (v21(v22, 1, v23) == 1)
  {
    sub_5E09C(v0[65], &qword_3237E0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[59] + 32))(v0[61], v0[65], v0[58]);
    if (qword_31E738 != -1)
      swift_once(&qword_31E738, sub_1F08A4);
    v24 = v0[61];
    v26 = v0[58];
    v25 = v0[59];
    v28 = v0[56];
    v27 = v0[57];
    v29 = v0[55];
    v30 = sub_5C154(&qword_323800);
    v31 = sub_5240C(v30, (uint64_t)qword_346060);
    v32 = PageRenderEvent.id.getter(v31);
    v34 = v33;
    static MonotonicTime.now.getter(v32);
    PageRenderField<>.startTime(for:at:)(v32);
    v35 = swift_bridgeObjectRelease(v34);
    (*(void (**)(uint64_t, uint64_t, __n128))(v28 + 8))(v27, v29, v35);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    v19 = v0 + 2;
    v20 = v0 + 11;
  }
  v36 = v0[47];
  v38 = v0[45];
  v37 = v0[46];
  v39 = v0[43];
  swift_getDynamicType(v0[44], v36, 0);
  v40 = sub_118230(v39, (uint64_t)v1, v38, v36, v37);
  if (v101)
  {
    v41 = v0[78];
    v42 = v0[74];
    v43 = v0[72];
    v44 = v0[71];
    v45 = v0[69];

    swift_release(v41);
    sub_1192B8(v19);
    sub_5E09C(v45, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v20);
    v46 = v0[74];
    v47 = v0[73];
    v48 = v0[70];
    v49 = v0[69];
    v50 = v0[68];
    v51 = v0[67];
    v52 = v0[66];
    v53 = v0[65];
    v54 = v0[64];
    v89 = v0[63];
    v91 = v0[62];
    v93 = v0[61];
    v95 = v0[60];
    v97 = v0[57];
    v99 = v0[54];
    v105 = v0[53];
    swift_task_dealloc(v0[76]);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v105);
    v55 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v56._rawValue = v40;
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[77];
    v58 = v0[64];
    v59 = v0[58];
    sub_117F30(v0[69], v58);
    v60 = v57(v58, 1, v59);
    v61 = v0[64];
    v98 = v19;
    v100 = v20;
    if (v60 == 1)
    {
      sub_5E09C(v61, &qword_3237E0);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[59] + 32))(v0[60], v61, v0[58]);
      if (qword_31E738 != -1)
        swift_once(&qword_31E738, sub_1F08A4);
      v63 = v0[59];
      v62 = v0[60];
      v64 = v0[57];
      v102 = v0[58];
      v66 = v0[55];
      v65 = v0[56];
      v67 = sub_5C154(&qword_323800);
      v68 = sub_5240C(v67, (uint64_t)qword_346060);
      v69 = PageRenderEvent.id.getter(v68);
      v71 = v70;
      static MonotonicTime.now.getter(v69);
      PageRenderField<>.endTime(for:at:)(v69);
      v72 = swift_bridgeObjectRelease(v71);
      (*(void (**)(uint64_t, uint64_t, __n128))(v65 + 8))(v64, v66, v72);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v102);
    }
    v73 = v0[78];
    v74 = v0[76];
    v75 = v0[74];
    v76 = v0[73];
    v77 = v0[72];
    v78 = v0[71];
    v79 = v0[70];
    v80 = v0[69];
    v82 = v0[68];
    v83 = v0[67];
    v84 = v0[66];
    v85 = v0[65];
    v86 = v0[64];
    v87 = v0[63];
    v88 = v0[62];
    v90 = v0[61];
    v92 = v0[60];
    v94 = v0[57];
    v96 = v0[54];
    v103 = v0[53];
    PageIntentInstrumentation._forBooksOnly_process(contentsOf:)(v56);

    swift_bridgeObjectRelease(v56._rawValue);
    swift_release(v73);
    sub_1192B8(v98);
    sub_5E09C(v80, &qword_3237E0);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v78);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v100);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v103);
    v55 = (uint64_t (*)(void))v0[1];
  }
  return v55();
}

uint64_t sub_117DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 568);
  v4 = *(_QWORD *)(v0 + 552);
  swift_release(*(_QWORD *)(v0 + 624));
  sub_1192B8((_QWORD *)(v0 + 16));
  sub_5E09C(v4, &qword_3237E0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 88));
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 560);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 544);
  v10 = *(_QWORD *)(v0 + 536);
  v11 = *(_QWORD *)(v0 + 528);
  v12 = *(_QWORD *)(v0 + 520);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 504);
  v16 = *(_QWORD *)(v0 + 496);
  v17 = *(_QWORD *)(v0 + 488);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 456);
  v20 = *(_QWORD *)(v0 + 432);
  v21 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_117F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3237E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_117F78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_117FBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_5C154(&qword_3237E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = 0;
  v29 = 0;
  v23 = *(_OWORD *)(a1 + 3);
  v9 = v23;
  v10 = sub_66898(a1, v23);
  v25 = v23;
  v11 = sub_668BC(v24);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v11, v10, v9);
  v12 = a1[3];
  v13 = a1[5];
  sub_66898(a1, v12);
  v26 = dispatch thunk of IntentModel.kind.getter(v12, v13);
  v27 = v14;
  sub_117F30(a2, (uint64_t)v8);
  v16 = type metadata accessor for PageRenderEvent(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16);
  if ((_DWORD)v18 == 1)
  {
    sub_5E09C(a2, &qword_3237E0);
    sub_5E09C((uint64_t)v8, &qword_3237E0);
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v19 = PageRenderEvent.id.getter(v18);
    v20 = v21;
    sub_5E09C(a2, &qword_3237E0);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v16);
  }
  swift_bridgeObjectRelease(v29);
  v28 = v19;
  v29 = v20;
  sub_1181D8((uint64_t)v24, a3);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return sub_1192B8(v24);
}

unint64_t sub_118160()
{
  unint64_t result;

  result = qword_324A08;
  if (!qword_324A08)
  {
    result = swift_getWitnessTable(&unk_25F100, &_s15DecoratedIntentVN);
    atomic_store(result, (unint64_t *)&qword_324A08);
  }
  return result;
}

uint64_t sub_1181A4()
{
  _QWORD *v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v0 + 2);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1181D8(uint64_t a1, uint64_t a2)
{
  _s15DecoratedIntentVwcp(a2, a1);
  return a2;
}

uint64_t sub_11820C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

char *sub_118230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (**v17)(char *, uint64_t, __n128);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  void (**v33)(char *, uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (**v37)(char *, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, __n128);
  uint64_t v56;
  char *v57;
  char *v58;
  __n128 v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __n128 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  void (**v77)(char *, uint64_t);
  __n128 v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _BYTE v93[40];
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  char *v97;

  v91 = a3;
  v87 = a1;
  v8 = type metadata accessor for Optional(0, a5);
  v85 = *(_QWORD *)(v8 - 8);
  v86 = v8;
  __chkstk_darwin(v8);
  v84 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v88 = (char *)&v82 - v11;
  v12 = sub_5C154(&qword_324A40);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for JSONContext(0, v13);
  v17 = *(void (***)(char *, uint64_t, __n128))(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v92 = (char *)&v82 - v21;
  v22 = sub_5C154(&qword_324A48);
  __chkstk_darwin(v22);
  v24 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for JSONObject(0);
  __chkstk_darwin(v25);
  v27 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v28);
  v97 = (char *)&v82 - v32;
  if (a2)
  {
    v89 = v30;
    v90 = v29;
    JSValue.makeJSONObject()(v31);
    if (!v5)
    {
      v83 = 0;
      v33 = v17;
      v35 = v89;
      v34 = v90;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v24, 0, 1, v90);
      v36 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v37 = v33;
      v36(v97, v24, v34);
      v38 = v16;
      BaseObjectGraph.optional<A>(_:)(v16, v16);
      v39 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33[6])(v15, 1, v16);
      if ((_DWORD)v39 == 1)
      {
        JSONContext.init()(v39);
        sub_5E09C((uint64_t)v15, &qword_324A40);
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v33[4])(v92, v15, v16);
      }
      v44 = a5;
      v45 = v97;
      v91 = static JSNetworkPerformanceMetrics.metrics(fromJson:)(v97);
      v46 = swift_conformsToProtocol2(v44, &protocol descriptor for Decodable);
      if (v46)
        v47 = v46;
      else
        v47 = 0;
      if (v46)
        v48 = v44;
      else
        v48 = 0;
      v49 = v83;
      if (v48)
      {
        v95 = v48;
        v96 = v47;
        sub_668BC(v94);
        v50 = v92;
        JSONObject.decode<A>(_:using:)(v48, v92, v48, v47);
        if (v49)
        {
          v51 = swift_bridgeObjectRelease(v91);
          v37[1](v50, v38, v51);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v90);
LABEL_25:
          sub_119958(v94);
          return v27;
        }
        sub_5E0D8((uint64_t)v94, (uint64_t)v93);
        v60 = sub_5C154(&qword_324A68);
        v61 = v88;
        v62 = swift_dynamicCast(v88, v93, v60, v44, 6);
        v63 = *(_QWORD *)(v44 - 8);
        v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
        v27 = (char *)v91;
        if (v62)
        {
          v64(v61, 0, 1, v44);
          ((void (*)(char *, uint64_t))v37[1])(v50, v38);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v90);
          (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v87, v61, v44);
        }
        else
        {
          v64(v61, 1, 1, v44);
          v69 = swift_bridgeObjectRelease(v27);
          (*(void (**)(char *, uint64_t, __n128))(v85 + 8))(v61, v86, v69);
          v70 = sub_11998C();
          v71 = swift_allocError(&type metadata for IntentModelError, v70, 0, 0);
          swift_willThrow(v71);
          ((void (*)(char *, uint64_t))v37[1])(v50, v38);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v90);
        }
      }
      else
      {
        v52 = swift_conformsToProtocol2(v44, &protocol descriptor for ExpressibleByJSON);
        if (v52)
          v53 = v52;
        else
          v53 = 0;
        if (v52)
          v54 = v44;
        else
          v54 = 0;
        if (!v54)
        {
          swift_bridgeObjectRelease(v91);
          v65 = type metadata accessor for JSONError(0);
          v66 = sub_648E0(&qword_324A50, (uint64_t (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
          swift_allocError(v65, v66, 0, 0);
          *v67 = v44;
          v67[1] = _swiftEmptyArrayStorage;
          v68 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v67, enum case for JSONError.malformedDocument(_:), v65);
          swift_willThrow(v68);
          ((void (*)(char *, uint64_t))v37[1])(v92, v38);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v90);
          return v27;
        }
        (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v27, v45, v90);
        v88 = (char *)v37;
        v55 = v37[2];
        v56 = v38;
        v57 = v45;
        v58 = v92;
        ((void (*)(char *, char *, uint64_t))v55)(v19, v92, v56);
        v95 = v54;
        v96 = v53;
        sub_668BC(v94);
        dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v27, v19, v54, v53);
        if (v49)
        {
          v59 = swift_bridgeObjectRelease(v91);
          (*((void (**)(char *, uint64_t, __n128))v88 + 1))(v58, v56, v59);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v57, v90);
          goto LABEL_25;
        }
        sub_5E0D8((uint64_t)v94, (uint64_t)v93);
        v72 = sub_5C154(&qword_324A58);
        v73 = v84;
        v74 = swift_dynamicCast(v84, v93, v72, v44, 6);
        v75 = *(_QWORD *)(v44 - 8);
        v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
        v77 = (void (**)(char *, uint64_t))v88;
        v27 = (char *)v91;
        if (v74)
        {
          v76(v73, 0, 1, v44);
          v77[1](v58, v56);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v97, v90);
          (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v87, v73, v44);
        }
        else
        {
          v76(v73, 1, 1, v44);
          v78 = swift_bridgeObjectRelease(v27);
          (*(void (**)(char *, uint64_t, __n128))(v85 + 8))(v73, v86, v78);
          v79 = sub_11998C();
          v80 = swift_allocError(&type metadata for IntentModelError, v79, 0, 0);
          swift_willThrow(v80);
          v77[1](v58, v56);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v97, v90);
        }
      }
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v94);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 56))(v24, 1, 1, v31);
    sub_5E09C((uint64_t)v24, &qword_324A48);
    v40 = type metadata accessor for JSONError(0);
    v41 = sub_648E0(&qword_324A50, (uint64_t (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v40, v41, 0, 0);
    *v42 = a5;
    v42[1] = _swiftEmptyArrayStorage;
    v43 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, enum case for JSONError.malformedDocument(_:), v40);
    swift_willThrow(v43);
  }
  return v27;
}

void sub_118978(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  Class v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  Swift::OpaquePointer v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t (*v68)(char *, uint64_t, __n128);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  JSValue v81;
  JSValue v82;
  char *v83;
  Class isa;
  objc_class *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  objc_class *v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110[5];
  uint64_t v111;
  uint64_t v112;

  v101 = a4;
  v105 = a3;
  v106 = type metadata accessor for JSRoute(0);
  v108 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v109 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v107 = (char *)&v99 - v8;
  v9 = sub_5C154(&qword_324A70);
  v10 = __chkstk_darwin(v9);
  v102 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for JSPromise(0, v10);
  v103 = *(_QWORD *)(v12 - 8);
  v104 = v12;
  __chkstk_darwin(v12);
  v100 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_324A78);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for JSCallable(0, v15);
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)&v20 = __chkstk_darwin(v18).n128_u64[0];
  v22 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(a1, "globalObject", v20);
  if (!v23)
  {
    __break(1u);
    return;
  }
  v24 = v23;
  v25 = JSRoute.service.getter();
  v27 = v26;
  v28 = (void *)JSValue.subscript.getter(v25);
  swift_bridgeObjectRelease(v27);

  if (objc_msgSend(v28, "isObject"))
  {
    v30 = ((uint64_t (*)(void))JSRoute.function.getter)();
    v32 = v31;
    v33 = JSValue.subscript.getter(v30);
    v34 = swift_bridgeObjectRelease(v32);
    v110[3] = type metadata accessor for JSStrongReference(0, v34);
    v110[4] = (uint64_t)&protocol witness table for JSStrongReference;
    sub_668BC(v110);
    JSStrongReference.init(_:)(v33);
    JSCallable.init(_:)(v110);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      v35 = sub_5E09C((uint64_t)v17, &qword_324A78);
      v36 = JSRoute.function.getter(v35);
      v38 = v37;
      v39 = JSValue.subscript.getter(v36);
      v40 = swift_bridgeObjectRelease(v38);
      v41 = type metadata accessor for JSError(0, v40);
      v42 = sub_648E0(&qword_324A80, (uint64_t (*)(uint64_t))&type metadata accessor for JSError, (uint64_t)&protocol conformance descriptor for JSError);
      v43 = (Class)swift_allocError(v41, v42, 0, 0);
      v44 = JSError.init(badValue:expected:)(v39, 0x6E6F6974636E7546, 0xE800000000000000);
      swift_willThrow(v44);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
      v49 = sub_5C154(&qword_31EFF0);
      v50._rawValue = (void *)swift_allocObject(v49, 64, 7);
      *((_OWORD *)v50._rawValue + 1) = xmmword_258070;
      v51 = v105[3];
      v52 = v105[4];
      sub_66898(v105, v51);
      v80 = dispatch thunk of CustomJSValueConvertible._jsValue(in:)(a1, v51, v52);
      *((_QWORD *)v50._rawValue + 7) = sub_5C194(0, (unint64_t *)&qword_324A38, JSValue_ptr);
      *((_QWORD *)v50._rawValue + 4) = v80;
      v81.super.isa = JSCallable.call(against:withArguments:)((JSValue)v28, v50).super.isa;
      v83 = v22;
      if (!v82.super.isa)
      {
        isa = v81.super.isa;
        swift_bridgeObjectRelease(v50._rawValue);
        v85 = isa;
        v86 = (uint64_t)v102;
        JSPromise.init(_:)();
        v88 = v103;
        v87 = v104;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v86, 1, v104) != 1)
        {
          v94 = v100;
          v95 = (uint64_t *)(v101 + 16);
          v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 32))(v100, v86, v87);
          v97 = JSPromise.promise.getter(v96);

          (*(void (**)(char *, uint64_t))(v88 + 8))(v94, v87);
          (*(void (**)(char *, uint64_t))(v19 + 8))(v83, v18);
          swift_beginAccess(v95, v110, 1, 0);
          v98 = *v95;
          *v95 = v97;
          swift_release(v98);
          return;
        }
        sub_5E09C(v86, &qword_324A70);
        v90 = type metadata accessor for JSError(0, v89);
        v91 = sub_648E0(&qword_324A80, (uint64_t (*)(uint64_t))&type metadata accessor for JSError, (uint64_t)&protocol conformance descriptor for JSError);
        v43 = (Class)swift_allocError(v90, v91, 0, 0);
        v92 = v85;
        v93 = ((uint64_t (*)(void))JSError.init(badValue:expected:))();
        swift_willThrow(v93);

        (*(void (**)(char *, uint64_t))(v19 + 8))(v83, v18);
        goto LABEL_8;
      }
      v43 = v82.super.isa;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      swift_bridgeObjectRelease(v50._rawValue);
    }

  }
  else
  {
    v45 = type metadata accessor for JSError(0, v29);
    v46 = sub_648E0(&qword_324A80, (uint64_t (*)(uint64_t))&type metadata accessor for JSError, (uint64_t)&protocol conformance descriptor for JSError);
    v43 = (Class)swift_allocError(v45, v46, 0, 0);
    v47 = v28;
    v48 = ((uint64_t (*)(void))JSError.init(badValue:expected:))();
    swift_willThrow(v48);

  }
LABEL_8:
  v53 = v106;
  v54 = v107;
  v55 = v108;
  v56 = v109;
  if (qword_31E5C0 != -1)
    swift_once(&qword_31E5C0, sub_126880);
  v57 = type metadata accessor for Logger(0);
  sub_5240C(v57, (uint64_t)qword_3250E8);
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
  v58(v54, a2, v53);
  v58(v56, a2, v53);
  swift_errorRetain(v43);
  v59 = swift_errorRetain(v43);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = v55;
    v63 = swift_slowAlloc(32, -1);
    v105 = (uint64_t *)swift_slowAlloc(8, -1);
    v106 = swift_slowAlloc(64, -1);
    v110[0] = v106;
    *(_DWORD *)v63 = 136315650;
    v64 = JSRoute.service.getter();
    v66 = v65;
    v111 = sub_57CD8(v64, v65, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v63 + 4, v63 + 12);
    v67 = swift_bridgeObjectRelease(v66);
    v68 = *(uint64_t (**)(char *, uint64_t, __n128))(v62 + 8);
    v69 = v68(v54, v53, v67);
    *(_WORD *)(v63 + 12) = 2080;
    v70 = v109;
    v71 = JSRoute.function.getter(v69);
    v73 = v72;
    v111 = sub_57CD8(v71, v72, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v63 + 14, v63 + 22);
    v74 = swift_bridgeObjectRelease(v73);
    v68(v70, v53, v74);
    *(_WORD *)(v63 + 22) = 2112;
    swift_errorRetain(v43);
    v75 = _swift_stdlib_bridgeErrorToNSError(v43);
    v111 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v63 + 24, v63 + 32);
    v76 = v105;
    *v105 = v75;
    swift_errorRelease(v43);
    swift_errorRelease(v43);
    _os_log_impl(&dword_0, v60, v61, "performRawCall to %s.%s failed with error: %@", (uint8_t *)v63, 0x20u);
    v77 = sub_5C154(&qword_32A000);
    swift_arrayDestroy(v76, 1, v77);
    swift_slowDealloc(v76, -1, -1);
    v78 = v106;
    swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    swift_errorRelease(v43);
  }
  else
  {
    swift_errorRelease(v43);
    v79 = *(void (**)(char *, uint64_t))(v55 + 8);
    v79(v54, v53);
    v79(v56, v53);
    swift_errorRelease(v43);
    swift_errorRelease(v43);

  }
}

uint64_t sub_1191D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for JSRoute(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_11925C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for JSRoute(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_118978(a1, v1 + v4, (uint64_t *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFF8)));
}

_QWORD *sub_1192B8(_QWORD *a1)
{
  _s15DecoratedIntentVwxx(a1);
  return a1;
}

void sub_1192E4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v2;
  v7 = v2[3];
  v8 = v2[4];
  sub_66898(v2, v7);
  v9 = dispatch thunk of CustomJSValueConvertible._jsValue(in:)(a1, v7, v8);
  if (!v3)
  {
    v10 = v9;
    v11._countAndFlagsBits = 0x646E696B24;
    v11._object = (void *)0xE500000000000000;
    if (!JSValue.hasValue(forProperty:)(v11))
    {
      v12 = v4[6];
      v23 = v4[5];
      v24 = v12;
      swift_bridgeObjectRetain(v12);
      v13 = a1;
      v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v23, &type metadata for String);
      v15 = (void *)objc_opt_self(JSValue);
      v16 = objc_msgSend(v15, "valueWithObject:inContext:", v14, v13, v23, v24);
      swift_unknownObjectRelease(v14);

      if (!v16)
      {
        __break(1u);
        goto LABEL_13;
      }
      JSValue.subscript.setter(v16, 0x646E696B24, 0xE500000000000000);
    }
    v17 = v4[8];
    if (!v17)
    {
LABEL_10:
      a2[3] = sub_5C194(0, (unint64_t *)&qword_324A38, JSValue_ptr);
      a2[4] = (uint64_t)&protocol witness table for JSValue;
      *a2 = v10;
      return;
    }
    v18 = v4[7];
    swift_bridgeObjectRetain(v17);
    v19._countAndFlagsBits = 0x6E65526567617024;
    v19._object = (void *)0xED00004449726564;
    if (JSValue.hasValue(forProperty:)(v19))
    {
      swift_bridgeObjectRelease(v17);
      goto LABEL_10;
    }
    v23 = v18;
    v24 = v17;
    v20 = a1;
    v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v23, &type metadata for String);
    v22 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", v21, v20);
    swift_unknownObjectRelease(v21);

    if (v22)
    {
      JSValue.subscript.setter(v22, 0x6E65526567617024, 0xED00004449726564);
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
  }
}

void sub_1194F4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1192E4(a1, a2);
}

uint64_t sub_119508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc(dword_3249EC);
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_7BFF8;
  return JSABridge.perform<A, B>(_:asPartOf:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_11959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t WitnessTable;

  v15 = (_QWORD *)swift_task_alloc(async function pointer to CustomIntentDispatcher.dispatcher<A, B>(for:asPartOf:)[1]);
  *(_QWORD *)(v7 + 16) = v15;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for JSABridge, a7);
  *v15 = v7;
  v15[1] = sub_64780;
  return CustomIntentDispatcher.dispatcher<A, B>(for:asPartOf:)(a1, a2, a3, a7, a4, a5, WitnessTable, a6);
}

uint64_t sub_119654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t WitnessTable;

  v13 = (_QWORD *)swift_task_alloc(async function pointer to CustomIntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  *(_QWORD *)(v6 + 16) = v13;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for JSABridge, a6);
  *v13 = v6;
  v13[1] = sub_7BFF8;
  return CustomIntentDispatcher.dispatch<A>(_:objectGraph:)(a1, a2, a3, a6, a4, WitnessTable, a5);
}

uint64_t sub_1196FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return IntentDispatcher.dispatch<A>(intent:jsonContext:)(a1, a2, a5, a3, a6, a4);
}

unint64_t sub_119714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324A18[0];
  if (!qword_324A18[0])
  {
    v1 = sub_667D0(&qword_324A10);
    result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, qword_324A18);
  }
  return result;
}

double _s15DecoratedIntentVwxx(_QWORD *a1)
{
  double result;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  swift_bridgeObjectRelease(a1[6]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[8]).n128_u64[0];
  return result;
}

uint64_t _s15DecoratedIntentVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *_s15DecoratedIntentVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_65938(a1, a2);
  a1[5] = a2[5];
  v4 = a2[6];
  v5 = a1[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[7] = a2[7];
  v6 = a2[8];
  v7 = a1[8];
  a1[8] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s15DecoratedIntentVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s15DecoratedIntentVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s15DecoratedIntentVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s15DecoratedIntentVMa()
{
  return &_s15DecoratedIntentVN;
}

_QWORD *sub_119958(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

unint64_t sub_11998C()
{
  unint64_t result;

  result = qword_324A60;
  if (!qword_324A60)
  {
    result = swift_getWitnessTable(&unk_25F1BC, &type metadata for IntentModelError);
    atomic_store(result, (unint64_t *)&qword_324A60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IntentModelError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_119A10 + 4 * byte_25F060[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_119A30 + 4 * byte_25F065[v4]))();
}

_BYTE *sub_119A10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_119A30(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_119A38(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_119A40(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_119A48(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_119A50(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IntentModelError()
{
  return &type metadata for IntentModelError;
}

unint64_t sub_119A70()
{
  unint64_t result;

  result = qword_324A88;
  if (!qword_324A88)
  {
    result = swift_getWitnessTable(&unk_25F194, &type metadata for IntentModelError);
    atomic_store(result, (unint64_t *)&qword_324A88);
  }
  return result;
}

unint64_t static JSShelfPaginationIntent.kind.getter()
{
  return 0xD000000000000017;
}

uint64_t JSShelfPaginationIntent.offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t JSShelfPaginationIntent.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for JSShelfPaginationIntent(0) + 28);
  v4 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for JSShelfPaginationIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_324AF8;
  if (!qword_324AF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSShelfPaginationIntent);
  return result;
}

void JSShelfPaginationIntent.jsRepresentation(in:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _BYTE v21[232];
  unint64_t v22;

  v3 = v2;
  v6 = sub_5C154(&qword_324A90);
  __chkstk_darwin(v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for JSShelfPaginationIntent(0);
  JSONObject.dictionary.getter();
  v9 = type metadata accessor for JSONDictionary(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_119DD0((uint64_t)v8);
    v11 = 0;
  }
  else
  {
    v11 = JSONDictionary.bridgedPrimitiveValues<A, B>()(&type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  v12 = sub_5C154(&qword_323970);
  inited = swift_initStackObject(v12, v21);
  *(_OWORD *)(inited + 16) = xmmword_25D600;
  *(_QWORD *)(inited + 32) = 0x4449666C656873;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v14 = v3[1];
  *(_QWORD *)(inited + 48) = *v3;
  *(_QWORD *)(inited + 56) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x666572487478656ELL;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  v15 = v3[3];
  *(_QWORD *)(inited + 96) = v3[2];
  *(_QWORD *)(inited + 104) = v15;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x74657366666FLL;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  *(_QWORD *)(inited + 144) = v3[4];
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  *(_QWORD *)(inited + 176) = 0x747865746E6F63;
  *(_QWORD *)(inited + 184) = 0xE700000000000000;
  *(_QWORD *)(inited + 216) = sub_5C154(&qword_324A98);
  *(_QWORD *)(inited + 192) = v11;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  v22 = sub_52E00(inited);
  v16 = a1;
  v17 = sub_5C154(&qword_320660);
  v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v22, v17);
  v19 = objc_msgSend((id)objc_opt_self(JSValue), "valueWithObject:inContext:", v18, v16);
  swift_unknownObjectRelease(v18);

  if (v19)
  {
    a2[3] = sub_119E10();
    a2[4] = &protocol witness table for JSValue;
    *a2 = v19;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_119DD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_324A90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_119E10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324A38;
  if (!qword_324A38)
  {
    v1 = objc_opt_self(JSValue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_324A38);
  }
  return result;
}

void sub_119E4C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x800000000025F1E0;
}

void sub_119E6C(void *a1@<X0>, _QWORD *a2@<X8>)
{
  JSShelfPaginationIntent.jsRepresentation(in:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for JSShelfPaginationIntent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    a1[4] = a2[4];
    v10 = type metadata accessor for JSONObject(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for JSShelfPaginationIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for JSShelfPaginationIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for JSShelfPaginationIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for JSONObject(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for JSShelfPaginationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for JSShelfPaginationIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for JSONObject(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSShelfPaginationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11A1B4);
}

uint64_t sub_11A1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for JSONObject(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for JSShelfPaginationIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11A23C);
}

uint64_t sub_11A23C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for JSONObject(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_11A2B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_25F2C0;
  v4[1] = &unk_25F2C0;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for JSONObject(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for YearInReviewPageIntent()
{
  return &type metadata for YearInReviewPageIntent;
}

uint64_t sub_11A344()
{
  return 1918985593;
}

uint64_t sub_11A354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1918985593 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1918985593, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_11A3D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11A640();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11A400(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11A640();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_11A428(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000000025F2D0;
}

uint64_t sub_11A448@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_5C154(&qword_324B38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_66898(a1, v9);
  v11 = sub_11A640();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for YearInReviewPageIntent.CodingKeys, &type metadata for YearInReviewPageIntent.CodingKeys, v11, v9, v10);
  if (v2)
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_11A558(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v3 = sub_5C154(&qword_324B48);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_66898(a1, v8);
  v10 = sub_11A640();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for YearInReviewPageIntent.CodingKeys, &type metadata for YearInReviewPageIntent.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_11A640()
{
  unint64_t result;

  result = qword_324B40;
  if (!qword_324B40)
  {
    result = swift_getWitnessTable(&unk_25F46C, &type metadata for YearInReviewPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324B40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for YearInReviewPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_11A6C4 + 4 * byte_25F2E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_11A6E4 + 4 * byte_25F2E5[v4]))();
}

_BYTE *sub_11A6C4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_11A6E4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_11A6EC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_11A6F4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_11A6FC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_11A704(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for YearInReviewPageIntent.CodingKeys()
{
  return &type metadata for YearInReviewPageIntent.CodingKeys;
}

unint64_t sub_11A724()
{
  unint64_t result;

  result = qword_324B50;
  if (!qword_324B50)
  {
    result = swift_getWitnessTable(&unk_25F444, &type metadata for YearInReviewPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324B50);
  }
  return result;
}

unint64_t sub_11A76C()
{
  unint64_t result;

  result = qword_324B58;
  if (!qword_324B58)
  {
    result = swift_getWitnessTable(&unk_25F3B4, &type metadata for YearInReviewPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324B58);
  }
  return result;
}

unint64_t sub_11A7B4()
{
  unint64_t result;

  result = qword_324B60;
  if (!qword_324B60)
  {
    result = swift_getWitnessTable(&unk_25F3DC, &type metadata for YearInReviewPageIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_324B60);
  }
  return result;
}

ValueMetadata *type metadata accessor for JSActionImplementation()
{
  return &type metadata for JSActionImplementation;
}

uint64_t sub_11A808()
{
  return sub_11AF44(&qword_3200B0, (uint64_t)&protocol conformance descriptor for JSAction);
}

id sub_11A82C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  JSValue v12;
  JSValue v13;
  id result;
  Class isa;
  void *v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  Class v22;
  id v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v5 = type metadata accessor for ActionOutcome(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_324A70);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSAction(0);
  sub_11AF44(&qword_324B68, (uint64_t)&protocol conformance descriptor for JSAction);
  v12.super.isa = CustomJSValueConvertible._jsValue(in:)((JSContext)a1).super.isa;
  if (v13.super.isa)
  {
    Promise.reject(_:)(v13.super.isa);
    return (id)swift_errorRelease(v13.super.isa);
  }
  isa = v12.super.isa;
  v35 = a3;
  result = objc_msgSend(a1, "globalObject");
  if (result)
  {
    v16 = result;
    v17 = (void *)JSValue.subscript.getter(7368769);

    v18 = String._bridgeToObjectiveC()();
    v19 = sub_5C154(&qword_31EFF0);
    v20 = swift_allocObject(v19, 64, 7);
    *(_OWORD *)(v20 + 16) = xmmword_258070;
    *(_QWORD *)(v20 + 56) = sub_5C194(0, (unint64_t *)&qword_324A38, JSValue_ptr);
    *(_QWORD *)(v20 + 32) = isa;
    v21 = isa;
    v22 = Array._bridgeToObjectiveC()().super.isa;
    v23 = objc_msgSend(v17, "invokeMethod:withArguments:", v18, v22, swift_bridgeObjectRelease(v20).n128_f64[0]);

    if (!v23)
    {
LABEL_7:
      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ActionOutcome.unsupported(_:), v5);
      Promise.resolve(_:)(v8);

      return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    v24 = v23;
    v25.n128_f64[0] = JSPromise.init(_:)();
    v26 = type metadata accessor for JSPromise(0, v25);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v26);
    if ((_DWORD)v28 == 1)
    {

      sub_11AF84((uint64_t)v11);
      goto LABEL_7;
    }
    v29 = JSPromise.promise.getter(v28);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
    v30 = sub_5C194(0, (unint64_t *)&qword_31FCD8, OS_dispatch_queue_ptr);
    v31 = v35;
    v32 = swift_retain_n(v35, 2);
    v33 = static OS_dispatch_queue.main.getter(v32);
    v36[3] = v30;
    v36[4] = &protocol witness table for OS_dispatch_queue;
    v36[0] = v33;
    Promise.then(perform:orCatchError:on:)(sub_11AFC4, v31, j___s9JetEngine7PromiseC6rejectyys5Error_pF, v31, v36);

    swift_release(v29);
    swift_release_n(v31, 2);
    return (id)_s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v36);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_11AB8C()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  char v5;
  unsigned int *v6;
  uint64_t v8;

  v0 = type metadata accessor for ActionOutcome(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = JSValue.BOOL.getter(v2);
  v6 = (unsigned int *)&enum case for ActionOutcome.unsupported(_:);
  if ((v5 & 1) != 0)
    v6 = (unsigned int *)&enum case for ActionOutcome.performed(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *v6, v0);
  Promise.resolve(_:)(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_11AC48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for JSAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_3208F8);
  v7 = Promise.__allocating_init()(v6);
  v8 = objc_msgSend((id)objc_opt_self(JSABridge), "sharedInstance");
  sub_11AD78(a1, (uint64_t)v5);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_2ED5A8, v11 + 8, v9 | 7);
  sub_11AEB0((uint64_t)v5, v12 + v10);
  *(_QWORD *)(v12 + v11) = v7;
  swift_retain(v7);
  JSABridge.enqueueBlockPrefersSync(_:f:l:)(sub_11AEF4, v12, 0xD000000000000087, 0x8000000000271420, 17);
  swift_release(v12);

  return v7;
}

uint64_t sub_11AD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_11ADBC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for JSAction(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6]));
  v7 = v0 + v4 + v1[7];
  v8 = type metadata accessor for ClickData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  swift_release(*(_QWORD *)(v0 + v10));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_11AEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_11AEF4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for JSAction(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_11A82C(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_11AF44(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for JSAction(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_11AF84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_324A70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_11AFC4()
{
  return sub_11AB8C();
}

uint64_t View.pageNamespace()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 0;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for PageNamespaceViewModifier, a2);
}

uint64_t PageNamespace.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath(&unk_25F520);
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t PageNamespace.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  v4 = *(_QWORD *)(v0 + 16);
  sub_EBB1C(*(_QWORD *)v0, v2, *(_BYTE *)(v0 + 9));
  v5 = sub_78C48(v1, v2 | (v3 << 8));
  v7 = v6;
  sub_79528(v1, v2, v3);
  if ((v7 & 1) == 0)
    return v5;
  if (qword_31E5E8 != -1)
    swift_once(&qword_31E5E8, sub_1269C0);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_5240C(v9, (uint64_t)qword_325160);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.fault.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    swift_slowDealloc(v13, -1, -1);
  }

  return Namespace.wrappedValue.getter(v4);
}

void sub_11B17C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_11B18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_11B730();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_11B1DC()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_11B63C();
  EnvironmentValues.subscript.getter(&type metadata for PageNamespaceKey, &type metadata for PageNamespaceKey, v0);
  return v2;
}

uint64_t sub_11B218@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;

  v2 = sub_11B63C();
  result = EnvironmentValues.subscript.getter(&type metadata for PageNamespaceKey, &type metadata for PageNamespaceKey, v2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_11B26C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;

  v2 = sub_11B63C();
  result = EnvironmentValues.subscript.getter(&type metadata for PageNamespaceKey, &type metadata for PageNamespaceKey, v2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_11B2C0(uint64_t *a1)
{
  char v1;
  unint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *((_BYTE *)a1 + 8);
  v4 = *a1;
  v5 = v1;
  v2 = sub_11B63C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for PageNamespaceKey, &type metadata for PageNamespaceKey, v2);
}

uint64_t sub_11B310(uint64_t *a1)
{
  char v1;
  unint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *((_BYTE *)a1 + 8);
  v4 = *a1;
  v5 = v1;
  v2 = sub_11B63C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for PageNamespaceKey, &type metadata for PageNamespaceKey, v2);
}

uint64_t sub_11B360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = *v2;
  KeyPath = swift_getKeyPath(&unk_25F520);
  v7 = Namespace.wrappedValue.getter(v5);
  v8 = sub_5C154(&qword_324B70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  result = sub_5C154(&qword_324B78);
  v10 = a2 + *(int *)(result + 36);
  *(_QWORD *)v10 = KeyPath;
  *(_QWORD *)(v10 + 8) = v7;
  *(_BYTE *)(v10 + 16) = 0;
  return result;
}

uint64_t destroy for PageNamespace(uint64_t a1)
{
  return sub_79528(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
}

uint64_t _s11BookStoreUI13PageNamespaceVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 9);
  v6 = *(_BYTE *)(a2 + 8);
  sub_EBB1C(*(_QWORD *)a2, v6, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for PageNamespace(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 9);
  v6 = *(_BYTE *)(a2 + 8);
  sub_EBB1C(*(_QWORD *)a2, v6, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v4;
  v9 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v5;
  sub_79528(v7, v9, v8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PageNamespace(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 9);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = v5;
  sub_79528(v6, v8, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageNamespace(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PageNamespace(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PageNamespace()
{
  return &type metadata for PageNamespace;
}

uint64_t sub_11B5C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for PageNamespaceViewModifier);
  sub_C9444();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

ValueMetadata *type metadata accessor for PageNamespaceViewModifier()
{
  return &type metadata for PageNamespaceViewModifier;
}

uint64_t sub_11B62C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B7810, 1);
}

unint64_t sub_11B63C()
{
  unint64_t result;

  result = qword_324B80;
  if (!qword_324B80)
  {
    result = swift_getWitnessTable(&unk_25F624, &type metadata for PageNamespaceKey);
    atomic_store(result, (unint64_t *)&qword_324B80);
  }
  return result;
}

ValueMetadata *type metadata accessor for PageNamespaceKey()
{
  return &type metadata for PageNamespaceKey;
}

unint64_t sub_11B694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324B88;
  if (!qword_324B88)
  {
    v1 = sub_667D0(&qword_324B78);
    sub_67060(&qword_324B90, &qword_324B70, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_67060(&qword_324B98, &qword_324BA0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_324B88);
  }
  return result;
}

unint64_t sub_11B730()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324BA8;
  if (!qword_324BA8)
  {
    v1 = sub_667D0(&qword_324BB0);
    sub_11B794();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_324BA8);
  }
  return result;
}

unint64_t sub_11B794()
{
  unint64_t result;

  result = qword_324BB8;
  if (!qword_324BB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Namespace.ID, &type metadata for Namespace.ID);
    atomic_store(result, (unint64_t *)&qword_324BB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksFinishedFrameFactory()
{
  return &type metadata for BooksFinishedFrameFactory;
}

uint64_t sub_11B7E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;

  v1 = sub_5C154(&qword_320EE8);
  __chkstk_darwin(v1);
  v62 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5C154(&qword_320EF0);
  v4 = __chkstk_darwin(v3);
  v61 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for YIRSourceData(0, v4);
  __chkstk_darwin(v6);
  v60 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BooksFinishedFrameViewModel(0, v10);
  v14 = __chkstk_darwin(v13);
  v59 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)type metadata accessor for CoverViewModel.Style(0, v14);
  v65 = *(v16 - 1);
  v66 = v16;
  v17 = __chkstk_darwin(v16);
  v19 = (double *)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = type metadata accessor for CoverViewModel(0, v17);
  v20 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *v0;
  v24 = *(_OWORD *)(v0 + 1);
  v55 = v0[3];
  v56 = v23;
  v57 = v24;
  v25 = v24;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = _swiftEmptyArrayStorage;
  v58 = v26;
  if (v26)
  {
    v52 = v12;
    v53 = v9;
    v54 = v8;
    v71 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v24);
    sub_20C498(0, v26, 0);
    v51 = v25;
    v28 = v25 + 32;
    v63 = enum case for CoverViewModel.Style.image(_:);
    do
    {
      sub_5E0D8(v28, (uint64_t)&v67);
      sub_5E0D8((uint64_t)&v67, (uint64_t)v19);
      v29 = v69;
      v30 = v70;
      sub_66898(&v67, v69);
      v19[5] = AssetInfo.coverAspectRatio.getter(v29, v30) * 192.0;
      v19[6] = 192.0;
      (*(void (**)(double *, _QWORD, _QWORD *))(v65 + 104))(v19, v63, v66);
      CoverViewModel.init(style:)(v19);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v67);
      v27 = v71;
      if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) == 0)
      {
        sub_20C498(0, v27[2] + 1, 1);
        v27 = v71;
      }
      v32 = v27[2];
      v31 = v27[3];
      if (v32 >= v31 >> 1)
      {
        sub_20C498(v31 > 1, v32 + 1, 1);
        v27 = v71;
      }
      v27[2] = v32 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))((unint64_t)v27+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v32, v22, v64);
      v71 = v27;
      v28 += 40;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease(v51);
    v9 = v53;
    v8 = v54;
    v12 = v52;
  }
  v33 = sub_5C154(&qword_31F108);
  v34 = swift_allocObject(v33, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_258070;
  v66 = (_QWORD *)(v34 + 32);
  static Locale.autoupdatingCurrent.getter(v34);
  v35 = v56;
  v36 = sub_1861F0(v56, v12);
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v67 = v35;
  v68 = v57;
  v69 = v55;
  v39 = sub_11BD10();
  v41 = v40;
  v42 = enum case for FrameName.booksFinished(_:);
  v43 = type metadata accessor for FrameName(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 104))(v61, v42, v43);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
  v46 = type metadata accessor for ReaderType(0);
  v47 = v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v62, 1, 1, v46);
  v48 = v60;
  YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v45, v47, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, v58, 0, 0,
    1,
    0,
    1,
    0,
    1);
  v49 = v59;
  BooksFinishedFrameViewModel.init(coverViewModels:localizedYear:userName:exposureData:)(v27, v36, v38, v39, v41, v48);
  *(_QWORD *)(v34 + 56) = type metadata accessor for BooksFinishedFrame(0);
  *(_QWORD *)(v34 + 64) = sub_11C05C();
  sub_668BC(v66);
  BooksFinishedFrame.init(model:)(v49);
  return v34;
}

uint64_t sub_11BD10()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Class isa;
  id v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for PersonNameComponents(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[1];
  v7 = v1[2];
  v8 = v1[3];
  v9 = (void *)objc_opt_self(BUAccountsProvider);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v10 = objc_msgSend(v9, "sharedProvider");
  v11 = objc_msgSend(v10, "primaryAppleAccount");

  if (v11)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v12 = objc_msgSend(v9, "sharedProvider");
    v11 = objc_msgSend(v12, "activeStoreAccount");
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);

    if (!v11)
      return 0;
  }
  v30 = v3;
  v13 = objc_msgSend(v11, "ams_firstName");

  if (!v13)
    return 0;
  v14 = v2;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v17 = objc_msgSend(v9, "sharedProvider");
  v18 = objc_msgSend(v17, "primaryAppleAccount");

  if (v18)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v19 = objc_msgSend(v9, "sharedProvider");
    v18 = objc_msgSend(v19, "activeStoreAccount");
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);

    if (!v18)
    {
LABEL_10:
      swift_bridgeObjectRelease(v16);
      return 0;
    }
  }
  v20 = objc_msgSend(v18, "ams_lastName");

  if (!v20)
    goto LABEL_10;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), "init");
  PersonNameComponents.init()(objc_msgSend(v24, "setStyle:", 1));
  PersonNameComponents.givenName.setter(v29, v16);
  PersonNameComponents.familyName.setter(v21, v23);
  isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v24, "stringFromPersonNameComponents:", isa);

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v14);
  return v27;
}

unint64_t sub_11C05C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324BC0;
  if (!qword_324BC0)
  {
    v1 = type metadata accessor for BooksFinishedFrame(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksFinishedFrame, v1);
    atomic_store(result, (unint64_t *)&qword_324BC0);
  }
  return result;
}

uint64_t sub_11C0A4@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  uint64_t AssociatedTypeWitness;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  char *v115;
  char *v116;
  __n128 v117;
  _BOOL4 v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t, uint64_t);
  char *v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t, uint64_t);
  uint64_t (*v174)(char *, uint64_t);
  int v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  const char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  char *v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  int64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  int v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __n128 v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void (*v313)(uint64_t *, uint64_t, uint64_t, unint64_t);
  uint64_t (*v314)(char *, uint64_t);
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  void (*v328)(char *, char *, uint64_t);
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  void (*v340)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  char *v359;
  char *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  char *v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  _QWORD *v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  _QWORD v392[5];
  __int128 v393;
  uint64_t v394;
  uint64_t v395;
  char v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  __int128 v400;
  __int128 v401;
  uint64_t AssociatedConformanceWitness;
  __int128 v403;
  __int128 v404;
  _UNKNOWN **v405;
  _QWORD v406[5];
  _OWORD v407[2];
  uint64_t v408;

  v333 = a6;
  v332 = a5;
  v379 = a3;
  v388 = a1;
  v362 = a7;
  v10 = sub_5C154(&qword_323BF8);
  __chkstk_darwin(v10);
  v361 = (char *)&v313 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5C154(&qword_323C00);
  __chkstk_darwin(v12);
  v354 = (char *)&v313 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_323B40);
  __chkstk_darwin(v14);
  v360 = (char *)&v313 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SeriesType(0);
  v323 = *(_QWORD *)(v16 - 8);
  v324 = v16;
  __chkstk_darwin(v16);
  v322 = (char *)&v313 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5C154(&qword_324BC8);
  __chkstk_darwin(v18);
  v367 = (char *)&v313 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v20);
  v359 = (char *)&v313 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v321 = (char *)&v313 - v23;
  v338 = type metadata accessor for ShelfBackgroundViewModel.BackgroundKind(0);
  v336 = *(_QWORD *)(v338 - 8);
  v24 = __chkstk_darwin(v338);
  v337 = (char *)&v313 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v347 = type metadata accessor for SectionData.ComponentContained(0, v24);
  v345 = *(_QWORD *)(v347 - 8);
  v26 = __chkstk_darwin(v347);
  v348 = (char *)&v313 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SectionType(0, v26);
  v343 = *(_QWORD *)(v28 - 8);
  v344 = v28;
  __chkstk_darwin(v28);
  v346 = (char *)&v313 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v318 = type metadata accessor for SeriesRoomListHeaderSegmentedItem(0);
  __chkstk_darwin(v318);
  v335 = (uint64_t)&v313 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_5C154(&qword_3239D0);
  __chkstk_darwin(v31);
  v330 = (uint64_t)&v313 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v342 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
  v329 = *(_QWORD *)(v342 - 8);
  v33 = __chkstk_darwin(v342);
  v334 = (uint64_t)&v313 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Metrics.ImpressionType(0, v33);
  v368 = *(_QWORD *)(v35 - 8);
  v369 = v35;
  __chkstk_darwin(v35);
  v371 = (uint64_t)&v313 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Metrics.IdType(0);
  v373 = *(_QWORD *)(v37 - 8);
  v374 = v37;
  v38 = __chkstk_darwin(v37);
  v370 = (char *)&v313 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Metrics.LocationType(0, v38);
  v363 = *(_QWORD *)(v40 - 8);
  v364 = v40;
  __chkstk_darwin(v40);
  v366 = (char *)&v313 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_5C154(&qword_324BD0);
  __chkstk_darwin(v42);
  v365 = (char *)&v313 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v349 = type metadata accessor for ContentKind(0);
  v327 = *(_QWORD *)(v349 - 8);
  __chkstk_darwin(v349);
  v320 = (char *)&v313 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v316 = (char *)&v313 - v46;
  __chkstk_darwin(v47);
  v317 = (char *)&v313 - v48;
  __chkstk_darwin(v49);
  v325 = (char *)&v313 - v50;
  v52 = __chkstk_darwin(v51);
  v326 = (char *)&v313 - v53;
  v54 = type metadata accessor for Metrics.Impression(0, v52);
  v352 = *(_QWORD *)(v54 - 8);
  v353 = v54;
  __chkstk_darwin(v54);
  v383 = (char *)&v313 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v56);
  v358 = (uint64_t)&v313 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v60 = (char *)&v313 - v59;
  v386 = type metadata accessor for ShelfBackgroundViewModel(0);
  v385 = *(_QWORD *)(v386 - 8);
  __chkstk_darwin(v386);
  v357 = (char *)&v313 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  v331 = (char *)&v313 - v63;
  __chkstk_darwin(v64);
  v66 = (char *)&v313 - v65;
  v67 = sub_5C154((uint64_t *)&unk_326100);
  __chkstk_darwin(v67);
  v378 = (uint64_t)&v313 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  v328 = (void (*)(char *, char *, uint64_t))((char *)&v313 - v70);
  __chkstk_darwin(v71);
  v319 = (char *)&v313 - v72;
  v74 = __chkstk_darwin(v73);
  v76 = (char *)&v313 - v75;
  v77 = type metadata accessor for Metrics.Location(0, v74);
  v376 = *(_QWORD *)(v77 - 8);
  v377 = v77;
  __chkstk_darwin(v77);
  v382 = (char *)&v313 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  v356 = _s11descr2ED889O11ShelfGridIDVMa(0);
  __chkstk_darwin(v356);
  v355 = (uint64_t)&v313 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80);
  v380 = (uint64_t)&v313 - v81;
  v381 = *a2;
  LODWORD(v372) = *a4;
  v82 = type metadata accessor for SectionData(0);
  v83 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56);
  v387 = v76;
  v340 = v83;
  v341 = v82;
  v84 = ((uint64_t (*)(char *, uint64_t, uint64_t))v83)(v76, 1, 1);
  v384 = v66;
  static ShelfBackgroundViewModel.default.getter(v84);
  if (qword_31E700 != -1)
    swift_once(&qword_31E700, sub_197DFC);
  sub_11F098((uint64_t)&unk_327F28, (uint64_t)v407);
  v85 = type metadata accessor for PaginationInfo(0);
  v86 = *(_QWORD *)(v85 - 8);
  v87 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
  v87(v60, 1, 1, v85);
  v405 = 0;
  v403 = 0u;
  v404 = 0u;
  v88 = (uint64_t)v60;
  v89 = v388[3];
  v90 = v388[4];
  sub_66898(v388, v89);
  v91 = SeriesInfo.assets.getter(v89, v90);
  if (v7)
  {
    sub_5E09C((uint64_t)&v403, &qword_324BD8);
    sub_5E09C(v88, &qword_323C08);
    sub_11F0D4(v407);
    (*(void (**)(char *, uint64_t))(v385 + 8))(v384, v386);
    return sub_5E09C((uint64_t)v387, (uint64_t *)&unk_326100);
  }
  v93 = v91;
  v339 = v86;
  v350 = v85;
  v351 = 0;
  v313 = (void (*)(uint64_t *, uint64_t, uint64_t, unint64_t))v87;
  v375 = (uint64_t *)v88;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v90);
  v95 = sub_5C154(&qword_31EF60);
  v315 = _arrayForceCast<A, B>(_:)(v93, AssociatedTypeWitness, v95);
  swift_bridgeObjectRelease(v93);
  v97 = v388[3];
  v96 = v388[4];
  sub_66898(v388, v97);
  v98 = *(_QWORD *)(v96 + 8);
  v99 = swift_getAssociatedTypeWitness(255, v98);
  v100 = type metadata accessor for Optional(0, v99);
  v314 = (uint64_t (*)(char *, uint64_t))&v313;
  v101 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v103 = (char *)&v313 - v102;
  ContentInfo.libraryData.getter(v97, v98);
  v104 = *(_QWORD *)(v99 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v103, 1, v99) == 1)
  {
    (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
    AssociatedConformanceWitness = 0;
    v400 = 0u;
    v401 = 0u;
    sub_5E09C((uint64_t)&v400, &qword_320910);
    v105 = v388;
    sub_5E0D8((uint64_t)v388, (uint64_t)&v400);
    v106 = *((_QWORD *)&v401 + 1);
    v107 = AssociatedConformanceWitness;
    sub_66898(&v400, *((uint64_t *)&v401 + 1));
    v108 = (void *)ContentInfo.storeData.getter(v106, *(_QWORD *)(v107 + 8));
    v109 = v374;
    v110 = (uint64_t)v367;
    if (v108)
    {

      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v400);
      v111 = v315;
      goto LABEL_10;
    }
  }
  else
  {
    *((_QWORD *)&v401 + 1) = v99;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v96, v97, v99, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
    v112 = sub_668BC(&v400);
    (*(void (**)(_QWORD *, char *, uint64_t))(v104 + 32))(v112, v103, v99);
    sub_5E09C((uint64_t)&v400, &qword_320910);
    v105 = v388;
    sub_5E0D8((uint64_t)v388, (uint64_t)&v400);
    v109 = v374;
    v110 = (uint64_t)v367;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v400);
  v113 = v315;
  v111 = SeriesListSortOrder.sortedAssets(for:)(v315);
  swift_bridgeObjectRelease(v113);
LABEL_10:
  v114 = v381;
  LOBYTE(v397) = v381;
  sub_195B20(v111);
  v116 = v115;
  v117 = swift_bridgeObjectRelease(v111);
  v118 = v114 == 2 && *((_QWORD *)v116 + 2) == 0;
  v367 = v116;
  LODWORD(v315) = v118;
  if ((v372 & 1) != 0)
  {
    v119 = v365;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v373 + 56))(v365, 1, 1, v109, v117);
    v120 = v366;
    (*(void (**)(char *, _QWORD, uint64_t))(v363 + 104))(v366, enum case for Metrics.LocationType.section(_:), v364);
    Metrics.Location.init(adamId:artistName:fcKind:id:idType:isSG:kind:locationPosition:locationType:name:narratorName:)(0, 0, 0, 0, 0, 0, 0, 0, v119, 0, 0, 0, 0, v120, 0, 0, 0, 0);
    v121 = v105[3];
    v122 = v105[4];
    sub_66898(v105, v121);
    v123.n128_f64[0] = SeriesInfo.authorInfo.getter(v121, v122);
    v124 = type metadata accessor for SeriesArtistInfo(0, v123);
    v125 = *(_QWORD *)(v124 - 8);
    v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v110, 1, v124);
    if ((_DWORD)v126 == 1)
    {
      sub_5E09C(v110, &qword_324BC8);
    }
    else
    {
      v141 = (_QWORD *)SeriesArtistInfo.names.getter(v126);
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v110, v124);
      if (v141)
      {
        if (v141[2])
        {
          v142 = v141[5];
          v366 = (char *)v141[4];
          swift_bridgeObjectRetain(v142);
          v127 = swift_bridgeObjectRelease(v141);
LABEL_37:
          v180 = v370;
          (*(void (**)(char *, _QWORD, uint64_t, __n128))(v373 + 104))(v370, enum case for Metrics.IdType.sequential(_:), v109, v127);
          v181 = v371;
          v182 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v368 + 104))(v371, enum case for Metrics.ImpressionType.section(_:), v369);
          v183 = static Metrics.Values.seriesKind.getter(v182);
          v185 = v184;
          v186 = v105[3];
          v187 = v105[4];
          sub_66898(v105, v186);
          v188 = ContentInfo.id.getter(v186, *(_QWORD *)(v187 + 8));
          v374 = (uint64_t)"series-see-all-list";
          Metrics.Impression.init(artistName:id:idType:impressionIndex:impressionType:isSG:kind:name:narratorName:parentId:)(v366, v142, 0xD000000000000015, 0x80000000002714D0, v180, 0, v181, 0, v183, v185, 0x6C6C61656573, 0xE600000000000000, 0, 0, v188, v189);
          v190 = v105[3];
          v191 = v105[4];
          sub_66898(v105, v190);
          v192 = ContentInfo.id.getter(v190, *(_QWORD *)(v191 + 8));
          v194 = v193;
          v195 = v346;
          (*(void (**)(char *, _QWORD, uint64_t))(v343 + 104))(v346, enum case for SectionType.swoosh(_:), v344);
          v196 = v348;
          (*(void (**)(char *, _QWORD, uint64_t))(v345 + 104))(v348, enum case for SectionData.ComponentContained.swoosh(_:), v347);
          v197 = (uint64_t)v328;
          SectionData.init(sectionID:name:sectionType:componentContained:exposureIndex:)(v192, v194, 0x6C6C61656573, 0xE600000000000000, v195, v196, 0);
          v198 = (uint64_t)v387;
          sub_5E09C((uint64_t)v387, (uint64_t *)&unk_326100);
          v340(v197, 0, 1, v341);
          sub_66F14(v197, v198, (uint64_t *)&unk_326100);
          sub_11F098((uint64_t)&unk_327F28, (uint64_t)&v397);
          sub_11F0D4(v407);
          v407[0] = v397;
          v407[1] = v398;
          v408 = v399;
          if (qword_31E710 != -1)
            goto LABEL_94;
          while (1)
          {
            sub_11F108((uint64_t)&unk_327F78, (uint64_t)v406);
            if ((v333 & 1) == 0)
            {
              sub_5E09C((uint64_t)&v403, &qword_324BD8);
              v219 = (uint64_t)v375;
              sub_5E09C((uint64_t)v375, &qword_323C08);
              v216 = (uint64_t *)v219;
              v217 = 1;
              v218 = v350;
              goto LABEL_58;
            }
            v199 = v105[3];
            v200 = v105[4];
            sub_66898(v105, v199);
            v201 = *(_QWORD *)(v200 + 8);
            v202 = swift_getAssociatedTypeWitness(255, v201);
            v203 = type metadata accessor for Optional(0, v202);
            v373 = (uint64_t)&v313;
            v204 = *(_QWORD *)(v203 - 8);
            __chkstk_darwin(v203);
            v206 = (char *)&v313 - v205;
            ContentInfo.libraryData.getter(v199, v201);
            v207 = *(_QWORD *)(v202 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v206, 1, v202) == 1)
              break;
            *((_QWORD *)&v398 + 1) = v202;
            v399 = swift_getAssociatedConformanceWitness(v200, v199, v202, &protocol requirements base descriptor for SeriesInfo, &associated conformance descriptor for SeriesInfo.ContentInfo.LibraryType: LibrarySeriesInfo);
            v220 = sub_668BC(&v397);
            (*(void (**)(_QWORD *, char *, uint64_t))(v207 + 32))(v220, v206, v202);
            sub_5E09C((uint64_t)&v397, &qword_320910);
            v221 = v367;
            v222 = *((_QWORD *)v367 + 2);
            if (v222 >= 0xA)
              v223 = 10;
            else
              v223 = *((_QWORD *)v367 + 2);
            v224 = _swiftEmptyArrayStorage;
            v105 = v388;
            v225 = v375;
            v226 = v350;
            v227 = v339;
            if (v222 < 0xB)
            {
LABEL_56:
              sub_5E09C((uint64_t)&v403, &qword_324BD8);
              sub_5E09C((uint64_t)v225, &qword_323C08);
              *v225 = (uint64_t)v224;
              (*(void (**)(uint64_t *, _QWORD, unint64_t))(v227 + 104))(v225, enum case for PaginationInfo.nextAssetIDs(_:), v226);
              v216 = v225;
              v217 = 0;
              v218 = v226;
              goto LABEL_58;
            }
            v228 = v222 - v223;
            *(_QWORD *)&v393 = _swiftEmptyArrayStorage;
            v229 = (v222 - v223) & ~((uint64_t)(v222 - v223) >> 63);
            swift_bridgeObjectRetain(v367);
            result = sub_20C95C(0, v229, 0);
            if ((v228 & 0x8000000000000000) != 0)
            {
              __break(1u);
              return result;
            }
            v230 = (uint64_t)&v221[40 * v223 + 32];
            while (v228)
            {
              sub_5E0D8(v230, (uint64_t)&v397);
              v231 = *((_QWORD *)&v398 + 1);
              v232 = v399;
              sub_66898(&v397, *((uint64_t *)&v398 + 1));
              v233 = ContentInfo.id.getter(v231, *(_QWORD *)(v232 + 8));
              v235 = v234;
              _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v397);
              v224 = (_QWORD *)v393;
              if ((swift_isUniquelyReferenced_nonNull_native(v393) & 1) == 0)
              {
                sub_20C95C(0, v224[2] + 1, 1);
                v224 = (_QWORD *)v393;
              }
              v237 = v224[2];
              v236 = v224[3];
              if (v237 >= v236 >> 1)
              {
                sub_20C95C(v236 > 1, v237 + 1, 1);
                v224 = (_QWORD *)v393;
              }
              v224[2] = v237 + 1;
              v238 = &v224[2 * v237];
              v238[4] = v233;
              v238[5] = v235;
              v230 += 40;
              --v228;
              v225 = v375;
              v226 = v350;
              v227 = v339;
              if (!v228)
              {
                swift_bridgeObjectRelease(v367);
                goto LABEL_56;
              }
            }
            __break(1u);
LABEL_94:
            swift_once(&qword_31E710, sub_197F5C);
          }
          (*(void (**)(char *, uint64_t))(v204 + 8))(v206, v203);
          v399 = 0;
          v397 = 0u;
          v398 = 0u;
          sub_5E09C((uint64_t)&v397, &qword_320910);
          v105 = v388;
          v208 = v388[3];
          v209 = v388[4];
          sub_66898(v388, v208);
          v210 = SeriesInfo.nextHref.getter(v208, v209);
          v212 = v211;
          sub_5E09C((uint64_t)&v403, &qword_324BD8);
          v213 = v375;
          sub_5E09C((uint64_t)v375, &qword_323C08);
          v214 = v339;
          if (v212)
          {
            *v213 = v210;
            v213[1] = v212;
            v215 = v350;
            (*(void (**)(uint64_t *, _QWORD, unint64_t))(v214 + 104))(v213, enum case for PaginationInfo.nextHref(_:), v350);
            v216 = v213;
            v217 = 0;
            v218 = v215;
          }
          else
          {
            v216 = v213;
            v217 = 1;
            v218 = v350;
          }
LABEL_58:
          v313(v216, v217, 1, v218);
          v239 = v380;
          v240 = v351;
          *((_QWORD *)&v404 + 1) = &_s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVN;
          v405 = &off_2ED870;
          v241 = swift_allocObject(&unk_2ED7D8, 57, 7);
          *(_QWORD *)&v403 = v241;
          sub_5E0D8((uint64_t)v105, v241 + 16);
          *(_BYTE *)(v241 + 56) = v381;
          v242 = v374 | 0x8000000000000000;
          v373 = 0xD000000000000013;
          v374 = 0x80000000002714B0;
          if ((_DWORD)v315)
            goto LABEL_88;
          goto LABEL_59;
        }
        v127 = swift_bridgeObjectRelease(v141);
      }
    }
    v366 = 0;
    v142 = 0;
    goto LABEL_37;
  }
  v128 = v105[3];
  v129 = v105[4];
  sub_66898(v105, v128);
  v339 = ContentInfo.id.getter(v128, *(_QWORD *)(v129 + 8));
  v131 = v130;
  v132 = v105[3];
  v133 = v105[4];
  sub_66898(v105, v132);
  v134 = v326;
  dispatch thunk of SeriesInfo.contentKind.getter(v132, v133);
  v135 = v327;
  v136 = v325;
  v137 = v349;
  v328 = *(void (**)(char *, char *, uint64_t))(v327 + 16);
  v328(v325, v134, v349);
  v314 = *(uint64_t (**)(char *, uint64_t))(v135 + 88);
  v138 = v314(v136, v137);
  v333 = enum case for ContentKind.pdf(_:);
  v350 = v131;
  if (v138 == enum case for ContentKind.pdf(_:))
    goto LABEL_17;
  if (v138 == enum case for ContentKind.audiobook(_:))
  {
    v140 = 0x6F6F626F69647541;
    v139 = 0xEA0000000000736BLL;
    goto LABEL_27;
  }
  if (v138 != enum case for ContentKind.regularBook(_:))
  {
    if (v138 != enum case for ContentKind.manga(_:))
    {
      if (v138 == enum case for ContentKind.unknownBook(_:))
        goto LABEL_26;
      (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v137);
    }
LABEL_17:
    v139 = 0xE700000000000000;
    v140 = 0x6E776F6E6B6E55;
    goto LABEL_27;
  }
LABEL_26:
  v139 = 0xE500000000000000;
  v140 = 0x736B6F6F42;
LABEL_27:
  v327 = *(_QWORD *)(v135 + 8);
  ((void (*)(char *, uint64_t))v327)(v134, v137);
  v143 = enum case for Metrics.IdType.itsId(_:);
  v145 = v373;
  v144 = v374;
  v146 = *(void (**)(char *, uint64_t, uint64_t))(v373 + 104);
  v147 = v365;
  v146(v365, enum case for Metrics.IdType.itsId(_:), v374);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v147, 0, 1, v144);
  v148 = v366;
  (*(void (**)(char *, _QWORD, uint64_t))(v363 + 104))(v366, enum case for Metrics.LocationType.filter(_:), v364);
  swift_bridgeObjectRetain(v139);
  Metrics.Location.init(adamId:artistName:fcKind:id:idType:isSG:kind:locationPosition:locationType:name:narratorName:)(0, 0, 0, 0, 0, 0, v140, v139, v147, 0, 0, 0, 0, v148, v140, v139, 0, 0);
  v149 = v388;
  v150 = v388[3];
  v151 = v388[4];
  sub_66898(v388, v150);
  v373 = ContentInfo.id.getter(v150, *(_QWORD *)(v151 + 8));
  v153 = v152;
  v154 = v370;
  v146(v370, v143, v144);
  v155 = v371;
  v156 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v368 + 104))(v371, enum case for Metrics.ImpressionType.section(_:), v369);
  v157 = static Metrics.Values.seriesKind.getter(v156);
  v159 = v158;
  v160 = v149[3];
  v161 = v149[4];
  sub_66898(v149, v160);
  v162 = ContentInfo.title.getter(v160, *(_QWORD *)(v161 + 8));
  Metrics.Impression.init(artistName:id:idType:impressionIndex:impressionType:isSG:kind:name:narratorName:parentId:)(0, 0, v373, v153, v154, 0, v155, 0, v157, v159, v162, v163, 0, 0, 0, 0);
  v164 = v330;
  sub_5E1A4(v332, v330, &qword_3239D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v329 + 48))(v164, 1, v342) == 1)
  {
    sub_5E09C(v164, &qword_3239D0);
    v105 = v388;
    v165 = v386;
    v166 = v385;
    v167 = v384;
    goto LABEL_79;
  }
  sub_11F4FC(v164, v334);
  v168 = sub_5C154(&qword_322820);
  v169 = v335;
  SegmentedControlViewModel.selection.getter(v168);
  v170 = v317;
  v171 = v169 + *(int *)(v318 + 28);
  v172 = v349;
  v173 = (void (*)(char *, uint64_t, uint64_t))v328;
  v328(v317, (char *)v171, v349);
  v174 = v314;
  v175 = v314(v170, v172);
  if (v175 == v333)
  {
    v176 = 0xD000000000000010;
    v177 = 0x800000000026FBE0;
    v178 = v320;
  }
  else
  {
    v178 = v320;
    if (v175 == enum case for ContentKind.audiobook(_:))
    {
      v176 = 0xD000000000000016;
      v179 = "audiobookSeriesSection";
    }
    else if (v175 == enum case for ContentKind.regularBook(_:))
    {
      v176 = 0xD000000000000011;
      v179 = "bookSeriesSection";
    }
    else if (v175 == enum case for ContentKind.manga(_:))
    {
      v176 = 0xD000000000000012;
      v179 = "mangaSeriesSection";
    }
    else
    {
      if (v175 != enum case for ContentKind.unknownBook(_:))
      {
        v252 = v316;
        v173(v316, v171, v172);
        v176 = String.init<A>(reflecting:)(v252, v172);
        v177 = v253;
        ((void (*)(char *, uint64_t))v327)(v170, v172);
        goto LABEL_66;
      }
      v176 = 0xD000000000000018;
      v179 = "unknownBookSeriesSection";
    }
    v177 = (unint64_t)(v179 - 32) | 0x8000000000000000;
  }
LABEL_66:
  v173(v178, v171, v172);
  v249 = v174(v178, v172);
  if (v249 == v333)
  {
    v250 = 0xE300000000000000;
    v251 = 4605008;
    v105 = v388;
  }
  else
  {
    v105 = v388;
    if (v249 == enum case for ContentKind.audiobook(_:))
    {
      v251 = 0x6F6F626F69647541;
      v250 = 0xEA0000000000736BLL;
    }
    else if (v249 == enum case for ContentKind.regularBook(_:))
    {
      v251 = 0x736B6F6F42;
      v250 = 0xE500000000000000;
    }
    else if (v249 == enum case for ContentKind.manga(_:))
    {
      v250 = 0xE500000000000000;
      v251 = 0x61676E614DLL;
    }
    else if (v249 == enum case for ContentKind.unknownBook(_:))
    {
      v250 = 0xEC0000006B6F6F62;
      v251 = 0x206E776F6E6B6E55;
    }
    else
    {
      v254 = v316;
      v255 = v349;
      v173(v316, v171, v349);
      v251 = String.init<A>(reflecting:)(v254, v255);
      v250 = v256;
      ((void (*)(char *, uint64_t))v327)(v178, v255);
    }
  }
  v257 = v346;
  (*(void (**)(char *, _QWORD, uint64_t))(v343 + 104))(v346, enum case for SectionType.swoosh(_:), v344);
  v258 = v348;
  (*(void (**)(char *, _QWORD, uint64_t))(v345 + 104))(v348, enum case for SectionData.ComponentContained.swoosh(_:), v347);
  v259 = (uint64_t)v319;
  SectionData.init(sectionID:name:sectionType:componentContained:exposureIndex:)(v176, v177, v251, v250, v257, v258, 0);
  v260 = (uint64_t)v387;
  sub_5E09C((uint64_t)v387, (uint64_t *)&unk_326100);
  v340(v259, 0, 1, v341);
  sub_66F14(v259, v260, (uint64_t *)&unk_326100);
  *((_QWORD *)&v398 + 1) = v342;
  v399 = sub_648E0(&qword_323AA8, type metadata accessor for SeriesRoomListHeaderComponentModel, (uint64_t)&protocol conformance descriptor for SeriesRoomListHeaderComponentModel);
  v261 = sub_668BC(&v397);
  sub_11F4FC(v334, (uint64_t)v261);
  sub_6685C(v335, type metadata accessor for SeriesRoomListHeaderSegmentedItem);
  sub_11F0D4(v407);
  sub_5DC98(&v397, (uint64_t)v407);
  v166 = v385;
  v167 = v384;
  v165 = v386;
LABEL_79:
  v240 = v351;
  v262 = v337;
  (*(void (**)(char *, _QWORD, uint64_t))(v336 + 104))(v337, enum case for ShelfBackgroundViewModel.BackgroundKind.none(_:), v338);
  v263 = v331;
  ShelfBackgroundViewModel.init(kind:)(v262);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v165);
  (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v167, v263, v165);
  v264 = v105[3];
  v265 = v105[4];
  sub_66898(v105, v264);
  SeriesInfo.nextHref.getter(v264, v265);
  v267 = v266;
  swift_bridgeObjectRelease(v266);
  sub_5E0D8((uint64_t)v105, (uint64_t)&v397);
  v239 = v380;
  v242 = v350;
  if (v267)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v397);
LABEL_86:
    v392[0] = 0xD000000000000015;
    v392[1] = 0x80000000002714F0;
    v276 = type metadata accessor for SeeAllFooterComponentModel(0);
    v394 = v276;
    v395 = sub_648E0(&qword_320080, type metadata accessor for SeeAllFooterComponentModel, (uint64_t)&unk_25EEC0);
    v277 = sub_668BC(&v393);
    AnyHashable.init<A>(_:)(v392, &type metadata for String, &protocol witness table for String);
    sub_11E1C0(v105, v381, v379, v392);
    v278 = type metadata accessor for ImpressionMetrics(0);
    v279 = (uint64_t)v321;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v278 - 8) + 56))(v321, 1, 1, v278);
    v391 = 0;
    v389 = 0u;
    v390 = 0u;
    sub_8B354((uint64_t)v392, (uint64_t)&v389);
    v280 = v390;
    *(_OWORD *)(v277 + 5) = v389;
    *(_OWORD *)(v277 + 7) = v280;
    v277[9] = v391;
    sub_5E09C((uint64_t)v392, (uint64_t *)&unk_326210);
    sub_66F14(v279, (uint64_t)v277 + *(int *)(v276 + 24), &qword_31F480);
    sub_5DC98(&v393, (uint64_t)v406);
    goto LABEL_87;
  }
  v268 = *((_QWORD *)&v398 + 1);
  v269 = v399;
  sub_66898(&v397, *((uint64_t *)&v398 + 1));
  v270 = SeriesInfo.assetCount.getter(v268, v269);
  LOBYTE(v269) = v271;
  sub_5E0D8((uint64_t)&v397, (uint64_t)&v393);
  if ((v269 & 1) != 0)
  {
    v272 = v394;
    v273 = v395;
    sub_66898(&v393, v394);
    v274 = SeriesInfo.assetMinimumCount.getter(v272, v273);
    if ((v275 & 1) != 0)
      v270 = 0;
    else
      v270 = v274;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v393);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v397);
  if (v270 >= 11)
    goto LABEL_86;
  if (qword_31E708 != -1)
    swift_once(&qword_31E708, sub_197EDC);
  sub_11F108((uint64_t)&unk_327F50, (uint64_t)v406);
LABEL_87:
  v374 = 0xEB00000000747369;
  v373 = 0x6C2D736569726573;
  if ((_DWORD)v315)
  {
LABEL_88:
    swift_bridgeObjectRelease(v367);
    swift_bridgeObjectRelease(v242);
    v281 = type metadata accessor for ContentUnavailableComponentModel(0);
    v371 = sub_648E0(&qword_320030, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
    v282 = sub_5C154(&qword_324BE8);
    v247 = swift_allocObject(v282, 72, 7);
    *(_OWORD *)(v247 + 16) = xmmword_258070;
    v248 = v105;
    v284 = v105[3];
    v283 = v105[4];
    sub_66898(v248, v248[3]);
    v285 = (uint64_t)v322;
    dispatch thunk of SeriesInfo.seriesType.getter(v284, v283, v286);
    LOBYTE(v397) = v372;
    v372 = v281;
    *(_QWORD *)(v247 + 56) = v281;
    v239 = v380;
    *(_QWORD *)(v247 + 64) = sub_648E0(&qword_324BF0, type metadata accessor for ContentUnavailableComponentModel, (uint64_t)&protocol conformance descriptor for ContentUnavailableComponentModel);
    v287 = sub_668BC((_QWORD *)(v247 + 32));
    sub_16AB7C(v285, (unsigned __int8 *)&v397, (uint64_t)v287);
    (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v285, v324);
    goto LABEL_89;
  }
LABEL_59:
  v372 = type metadata accessor for ListItemComponentModel(0);
  v371 = sub_648E0(&qword_320058, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
  v243 = (uint64_t)v367;
  __chkstk_darwin(v371);
  v244 = v240;
  v247 = sub_11F2B8(v243, v245, 0, v246, (void (*)(__int128 *__return_ptr, _QWORD, char *))sub_11F168);
  v351 = v244;
  swift_bridgeObjectRelease(v242);
  swift_bridgeObjectRelease(v243);
  v248 = v105;
LABEL_89:
  v288 = (uint64_t)v354;
  v289 = v248[3];
  v290 = v248[4];
  sub_66898(v248, v289);
  v291 = *(_QWORD *)(v290 + 8);
  v292 = v374;
  swift_bridgeObjectRetain(v374);
  v293 = ContentInfo.id.getter(v289, v291);
  v295 = v294;
  v296 = v356;
  v297 = v239 + *(int *)(v356 + 28);
  v298 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v298 - 8) + 16))(v297, v379, v298);
  *(_QWORD *)v239 = v373;
  *(_QWORD *)(v239 + 8) = v292;
  *(_QWORD *)(v239 + 16) = v293;
  *(_QWORD *)(v239 + 24) = v295;
  *(_BYTE *)(v239 + 32) = v381;
  v299 = v355;
  sub_11F484(v239, v355);
  v300 = sub_648E0(&qword_324BE0, _s11descr2ED889O11ShelfGridIDVMa, (uint64_t)&unk_25F720);
  AnyHashable.init<A>(_:)(v299, v296, v300);
  v396 = 1;
  v388 = sub_134058(v247);
  swift_bridgeObjectRelease(v247);
  v301 = (uint64_t)v359;
  static Metrics.createImpressionMetrics(impression:)(v383);
  v302 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v302 - 8) + 56))(v301, 0, 1, v302);
  v304 = v376;
  v303 = v377;
  v305 = (uint64_t)v360;
  (*(void (**)(char *, char *, uint64_t))(v376 + 16))(v360, v382, v377);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v304 + 56))(v305, 0, 1, v303);
  sub_5E1A4((uint64_t)v387, v378, (uint64_t *)&unk_326100);
  v306 = (uint64_t)v357;
  (*(void (**)(char *, char *, uint64_t))(v385 + 16))(v357, v384, v386);
  sub_11F098((uint64_t)v407, (uint64_t)&v393);
  sub_11F108((uint64_t)v406, (uint64_t)v392);
  v307 = type metadata accessor for ContentUnavailableComponentModel(0);
  v308 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v307 - 8) + 56))(v288, 1, 1, v307);
  v309 = (uint64_t)v361;
  ShelfGridSpacing.init(floatLiteral:)(v308, 0.0);
  v310 = type metadata accessor for ShelfGridSpacing(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v310 - 8) + 56))(v309, 0, 1, v310);
  v311 = (uint64_t)v375;
  v312 = v358;
  sub_5E1A4((uint64_t)v375, v358, &qword_323C08);
  sub_5E1A4((uint64_t)&v403, (uint64_t)&v389, &qword_324BD8);
  Shelf.init(id:shelfGridID:presentation:itemKind:items:impressionable:impressionMetrics:location:sectionData:backgroundViewModel:headerComponentModel:footerComponentModel:emptyComponentModel:spacing:paginationInfo:paginationIntentProvider:)(v373, v374, (uint64_t)&v397, &v396, v372, v371, (uint64_t)v388, 1, v362, v301, v305, v378, v306, (uint64_t)&v393, (uint64_t)v392, v288, v309, v312, (uint64_t)&v389);
  (*(void (**)(char *, uint64_t))(v352 + 8))(v383, v353);
  sub_5E09C((uint64_t)&v403, &qword_324BD8);
  sub_5E09C(v311, &qword_323C08);
  sub_11F4C8(v406);
  sub_11F0D4(v407);
  (*(void (**)(char *, uint64_t))(v385 + 8))(v384, v386);
  sub_5E09C((uint64_t)v387, (uint64_t *)&unk_326100);
  (*(void (**)(char *, uint64_t))(v376 + 8))(v382, v377);
  return sub_6685C(v380, _s11descr2ED889O11ShelfGridIDVMa);
}

uint64_t _s11descr2ED889O11ShelfGridIDVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_324C68;
  if (!qword_324C68)
    return swift_getSingletonMetadata(a1, &_s11descr2ED889O11ShelfGridIDVMn);
  return result;
}

uint64_t sub_11E1C0@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __n128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  int v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  _BYTE v114[40];
  _QWORD v115[5];
  _QWORD v116[5];

  v101 = a3;
  v102 = a2;
  v108 = a1;
  v107 = a4;
  v106 = type metadata accessor for ActionOrigin.Kind(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_322410);
  __chkstk_darwin(v5);
  v103 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_31F590);
  v8 = __chkstk_darwin(v7);
  v100 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for Metrics.Location(0, v8);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for URL(0);
  v94 = *(_QWORD *)(v96 - 8);
  v11 = __chkstk_darwin(v96);
  v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for Metrics.ClickActionType(0, v11);
  v14 = *(_QWORD *)(v92 - 8);
  v15 = __chkstk_darwin(v92);
  v91 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Metrics.TargetType(0, v15);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ActionMetrics(0);
  v113 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v112 = (char *)&v88 - v22;
  v23 = type metadata accessor for LinkActionType(0, v21);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ClickData.TargetType(0, v25);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ClickData(0);
  v33 = *(_QWORD *)(v32 - 8);
  v109 = v32;
  v110 = v33;
  v34 = __chkstk_darwin(v32);
  v111 = (char *)&v88 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v29 + 104))(v31, enum case for ClickData.TargetType.navigate(_:), v28, v34);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v27, enum case for LinkActionType.click(_:), v23);
  ClickData.init(with:linkActionType:index:url:)(v31, v27, 0, 0, 0);
  v36 = v89;
  v37 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v18, enum case for Metrics.TargetType.button(_:), v90);
  v38 = v14;
  v39 = *(void (**)(char *, _QWORD, uint64_t))(v14 + 104);
  v40 = v91;
  v41 = v92;
  v39(v91, enum case for Metrics.ClickActionType.navigate(_:), v92);
  v42 = v108[3];
  v43 = v108[4];
  sub_66898(v108, v42);
  v44 = SeriesInfo.url.getter(v42, v43);
  v45 = URL.absoluteString.getter(v44);
  v47 = v46;
  v48 = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v13, v96);
  v49 = v97;
  static Metrics.Location.genericButton.getter(v48);
  v50 = v112;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(0x63416C6C41656573, 0xEC0000006E6F6974, v18, v40, 0, v45, v47, v49);
  v51 = swift_bridgeObjectRelease(v47);
  (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v49, v99, v51);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v37);
  v52 = v93;
  v53 = v95;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v93, v50, v95);
  v54 = v110;
  v55 = v100;
  v56 = v109;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v100, v111, v109);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v56);
  v57 = type metadata accessor for SeriesSeeAllPageIntent(0);
  v115[3] = v57;
  v115[4] = sub_648E0((unint64_t *)&qword_31FFA8, type metadata accessor for SeriesSeeAllPageIntent, (uint64_t)&protocol conformance descriptor for SeriesSeeAllPageIntent);
  v58 = sub_668BC(v115);
  v59 = v108;
  sub_5E0D8((uint64_t)v108, (uint64_t)v58);
  v60 = (char *)v58 + *(int *)(v57 + 24);
  v61 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v60, v101, v61);
  v62 = (char *)v58 + *(int *)(v57 + 28);
  v63 = enum case for Metrics.NavigationType.forward(_:);
  v64 = type metadata accessor for Metrics.NavigationType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v62, v63, v64);
  *((_BYTE *)v58 + 40) = v102;
  v116[3] = sub_5C154(&qword_3200D0);
  v116[4] = sub_11F540();
  sub_668BC(v116);
  sub_5E0D8((uint64_t)v115, (uint64_t)v114);
  v65 = type metadata accessor for Page(0);
  v66 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  FlowAction.PageDestination.init(intent:hidesDefaultBackButton:navigationBarTitle:)(v114, 1, 0, 0, v65, v66);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v115);
  v67 = v59[3];
  v68 = v59[4];
  sub_66898(v59, v67);
  v69 = ContentInfo.title.getter(v67, *(_QWORD *)(v68 + 8));
  v71 = v70;
  v72 = v59[3];
  v73 = v59[4];
  sub_66898(v59, v72);
  v74 = ContentInfo.id.getter(v72, *(_QWORD *)(v73 + 8));
  v76 = v75;
  v77 = v104;
  (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v104, enum case for ActionOrigin.Kind.footer(_:), v106);
  v78 = v103;
  ActionOrigin.init(sectionID:sectionName:contentID:kind:seriesID:genreID:collectionID:authorID:flowcaseID:brickID:)(0x6C2D736569726573, 0xEB00000000747369, v69, v71, v74, v76, v77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  v79 = type metadata accessor for ActionOrigin(0);
  v80 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v78, 0, 1, v79);
  v81 = static FlowActionPresentation.stackPush.getter(v80);
  v83 = v82;
  v84 = type metadata accessor for FlowAction(0);
  v85 = v107;
  v107[3] = v84;
  v85[4] = sub_648E0((unint64_t *)&qword_324BF8, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  sub_668BC(v85);
  LOBYTE(v87) = 1;
  FlowAction.init(id:actionMetrics:clickData:destination:origin:sourceViewIdentifer:presentation:shouldInheritFigaroRestriction:)(0, 0, v52, v55, v116, v78, 0, 0, v81, v83, v87);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v112, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v111, v109);
}

uint64_t sub_11E9F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];

  v33 = a5;
  v34 = a1;
  v35 = a4;
  v9 = sub_5C154(&qword_324C00);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ListItemViewModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v33 - v17;
  v20 = a3[3];
  v19 = a3[4];
  sub_66898(a3, v20);
  v21 = ContentInfo.id.getter(v20, *(_QWORD *)(v19 + 8));
  v23 = v22;
  sub_5E0D8((uint64_t)a2, (uint64_t)v36);
  CardInfo.init(with:alwaysPresentNewCardSet:)(v36, 1);
  static ListItemViewModel.seriesPage(seriesID:assetInfo:cardInfo:)(v21, v23, a2, v11);
  swift_bridgeObjectRelease(v23);
  sub_5E09C((uint64_t)v11, &qword_324C00);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  sub_5E0D8((uint64_t)a2, (uint64_t)v36);
  v24 = a2[3];
  v25 = a2[4];
  sub_66898(a2, v24);
  v26 = dispatch thunk of AssetInfo.assetType.getter(v24, v25);
  v27 = static Metrics.contentKind(for:)(v26);
  v29 = v28;
  a6[3] = type metadata accessor for ListItemComponentModel(0);
  a6[4] = sub_648E0(&qword_324C08, type metadata accessor for ListItemComponentModel, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
  v30 = sub_668BC(a6);
  v31 = v33;
  swift_bridgeObjectRetain(v33);
  sub_203A28((uint64_t)v15, v36, v34, v27, v29, v35, v31, (uint64_t)v30);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t sub_11EC08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, __n128);
  __n128 v21;
  char v22;
  int *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26[2];

  v5 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PaginationInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - v13;
  v15 = type metadata accessor for Shelf(0);
  sub_5E1A4((uint64_t)a1 + *(int *)(v15 + 68), (uint64_t)v7, &qword_323C08);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    result = sub_5E09C((uint64_t)v7, &qword_323C08);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v14, v7, v8);
    v18 = a1[1];
    v25 = *a1;
    sub_5E0D8(v2, (uint64_t)v26);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    v19 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(int *)(v15 + 64)) + 16);
    v20 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
    v21 = swift_bridgeObjectRetain(v18);
    v20(v14, v8, v21);
    v22 = *(_BYTE *)(v2 + 40);
    v23 = (int *)type metadata accessor for SeriesSeeAllPaginationIntent(0);
    *(_QWORD *)(a2 + 24) = v23;
    *(_QWORD *)(a2 + 32) = sub_648E0(&qword_31FFB0, type metadata accessor for SeriesSeeAllPaginationIntent, (uint64_t)&protocol conformance descriptor for SeriesSeeAllPaginationIntent);
    v24 = sub_668BC((_QWORD *)a2);
    *v24 = v25;
    v24[1] = v18;
    sub_5DC98(v26, (uint64_t)(v24 + 2));
    result = ((uint64_t (*)(char *, char *, uint64_t))v17)((char *)v24 + v23[6], v11, v8);
    *(_QWORD *)((char *)v24 + v23[7]) = v19;
    *((_BYTE *)v24 + v23[8]) = v22;
  }
  return result;
}

Swift::Int sub_11EE18()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v1 = v0;
  Hasher.init(_seed:)(v9, 0);
  v2 = *v0;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3);
  v4 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + 32));
  v6 = type metadata accessor for SeriesListSortOrder(0);
  v7 = sub_648E0(&qword_324CB0, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesListSortOrder, (uint64_t)&protocol conformance descriptor for SeriesListSortOrder);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_11EEF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = v1[2];
  v6 = v1[3];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + 32));
  v7 = type metadata accessor for SeriesListSortOrder(0);
  v8 = sub_648E0(&qword_324CB0, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesListSortOrder, (uint64_t)&protocol conformance descriptor for SeriesListSortOrder);
  return dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
}

Swift::Int sub_11EFBC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v2 = v1;
  Hasher.init(_seed:)(v10, a1);
  v3 = *v1;
  v4 = v2[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v10, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = v2[2];
  v6 = v2[3];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v10, v5, v6);
  swift_bridgeObjectRelease(v6);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + 32));
  v7 = type metadata accessor for SeriesListSortOrder(0);
  v8 = sub_648E0(&qword_324CB0, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesListSortOrder, (uint64_t)&protocol conformance descriptor for SeriesListSortOrder);
  dispatch thunk of Hashable.hash(into:)(v10, v7, v8);
  return Hasher._finalize()();
}

uint64_t sub_11F098(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Shelf.HeaderComponentModel(a2, a1);
  return a2;
}

_QWORD *sub_11F0D4(_QWORD *a1)
{
  destroy for Shelf.HeaderComponentModel(a1);
  return a1;
}

uint64_t sub_11F108(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Shelf.FooterComponentModel(a2, a1);
  return a2;
}

uint64_t sub_11F144()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_11F168@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_11E9F4(a1, a2, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), a3);
}

uint64_t sub_11F174(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7 || (v8 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0) & 1) != 0))
  {
    v9 = a1[2];
    v10 = a1[3];
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = v9 == v11 && v10 == v12;
    if (v13 || (v8 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0) & 1) != 0))
    {
      if (*((unsigned __int8 *)a1 + 32) == *(unsigned __int8 *)(a2 + 32))
      {
        _s11descr2ED889O11ShelfGridIDVMa(0);
        v14 = type metadata accessor for SeriesListSortOrder(0);
        v15 = sub_648E0(&qword_324CB8, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesListSortOrder, (uint64_t)&protocol conformance descriptor for SeriesListSortOrder);
        dispatch thunk of RawRepresentable.rawValue.getter(&v21, v14, v15);
        dispatch thunk of RawRepresentable.rawValue.getter(&v19, v14, v15);
        v16 = v22;
        v17 = v20;
        if (v21 == v19 && v22 == v20)
        {
          v8 = 1;
          v17 = v22;
        }
        else
        {
          v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v19, v20, 0);
        }
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v17);
      }
      else
      {
        v8 = 0;
      }
    }
  }
  return v8 & 1;
}

uint64_t sub_11F2B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(__int128 *__return_ptr, _QWORD, char *))
{
  _QWORD *v9;
  int64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v19[2];
  __int128 v20[3];
  _OWORD v21[4];
  _QWORD *v22;

  v22 = _swiftEmptyArrayStorage;
  sub_20C930(0, 0, 0);
  v9 = _swiftEmptyArrayStorage;
  v10 = a4 >> 1;
  result = swift_unknownObjectRetain(a1);
  if (v10 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease(a1);
    return (uint64_t)v9;
  }
  else
  {
    v12 = 0;
    v13 = a2 + 40 * a3;
    v14 = a3;
    v17 = a3 - v10;
    while (v14 + v12 < v10)
    {
      result = sub_5E0D8(v13, (uint64_t)v19);
      if (__OFADD__(v12, 1))
        goto LABEL_13;
      *(_QWORD *)&v20[0] = v12;
      sub_5DC98(v19, (uint64_t)v20 + 8);
      v21[0] = v20[0];
      v21[1] = v20[1];
      v21[2] = v20[2];
      a5(v20, *(_QWORD *)&v20[0], (char *)v21 + 8);
      sub_5E09C((uint64_t)v21, &qword_31F008);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_20C930(0, v9[2] + 1, 1);
        v9 = v22;
      }
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_20C930(v15 > 1, v16 + 1, 1);
        v9 = v22;
      }
      v9[2] = v16 + 1;
      result = sub_5DC98(v20, (uint64_t)&v9[5 * v16 + 4]);
      ++v12;
      v13 += 40;
      if (!(v17 + v12))
        goto LABEL_2;
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t sub_11F484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s11descr2ED889O11ShelfGridIDVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_11F4C8(_QWORD *a1)
{
  destroy for Shelf.HeaderComponentModel(a1);
  return a1;
}

uint64_t sub_11F4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_11F540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3200D8;
  if (!qword_3200D8)
  {
    v1 = sub_667D0(&qword_3200D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.PageDestination<A>, v1);
    atomic_store(result, (unint64_t *)&qword_3200D8);
  }
  return result;
}

uint64_t _s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVwca(uint64_t a1, uint64_t a2)
{
  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVMa()
{
  return &_s11descr2ED889O36SeriesSeeAllPaginationIntentProviderVN;
}

_QWORD *sub_11F6E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(int *)(a3 + 28);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v10 = type metadata accessor for SeriesListSortOrder(0);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_11F7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for SeriesListSortOrder(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_11F7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for SeriesListSortOrder(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t sub_11F880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_11F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_11F988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for SeriesListSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_11FA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11FA18);
}

uint64_t sub_11FA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SeriesListSortOrder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_11FA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11FAA0);
}

uint64_t sub_11FAA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SeriesListSortOrder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_11FB14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_25F6C8;
  v4[1] = &unk_25F6C8;
  v4[2] = &unk_25F6E0;
  result = type metadata accessor for SeriesListSortOrder(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_11FB94()
{
  return sub_648E0(&qword_324CA8, _s11descr2ED889O11ShelfGridIDVMa, (uint64_t)&unk_25F6F8);
}

uint64_t UIBarButtonItem._anchoringToolbarView.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  swift_beginAccess(&unk_345FC0, v6, 32, 0);
  v1 = objc_getAssociatedObject(v0, &unk_345FC0);
  swift_endAccess(v6);
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v1);
    swift_unknownObjectRelease(v1);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_7C528((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    v2 = sub_11FC98();
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, v2, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_6EF98((uint64_t)v6);
    return 0;
  }
}

unint64_t sub_11FC98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3298B0;
  if (!qword_3298B0)
  {
    v1 = objc_opt_self(UIView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3298B0);
  }
  return result;
}

void sub_11FCD4(void **a1, void **a2)
{
  void *v2;
  void *v3;
  id v4;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(&unk_345FC0, v5, 32, 0);
  v4 = v2;
  objc_setAssociatedObject(v3, &unk_345FC0, v4, 0);
  swift_endAccess(v5);

}

void UIBarButtonItem._anchoringToolbarView.setter(void *a1)
{
  void *v1;
  _BYTE v3[24];

  swift_beginAccess(&unk_345FC0, v3, 32, 0);
  objc_setAssociatedObject(v1, &unk_345FC0, a1, 0);
  swift_endAccess(v3);

}

void (*UIBarButtonItem._anchoringToolbarView.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = UIBarButtonItem._anchoringToolbarView.getter();
  return sub_11FDFC;
}

void sub_11FDFC(_QWORD *a1, char a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = (_QWORD *)*a1;
  v4 = *(void **)(*a1 + 24);
  v5 = *(void **)(*a1 + 32);
  swift_beginAccess(&unk_345FC0, *a1, 32, 0);
  if ((a2 & 1) != 0)
  {
    v6 = v4;
    objc_setAssociatedObject(v5, &unk_345FC0, v6, 0);
    swift_endAccess(v3);

    v4 = (void *)v3[3];
  }
  else
  {
    objc_setAssociatedObject(v5, &unk_345FC0, v4, 0);
    swift_endAccess(v3);
  }

  free(v3);
}

uint64_t sub_11FEA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = UIBarButtonItem._anchoringToolbarView.getter();
  *a1 = result;
  return result;
}

id VCStackManager.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VCStackManager();
  return objc_msgSendSuper2(&v2, "init");
}

id VCStackManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VCStackManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s11BookStoreUI14VCStackManagerC7presentyySo16UIViewControllerC_SbSDys11AnyHashableVypGtFZ_0(void *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    sub_5C194(0, (unint64_t *)&qword_324D00, UIViewController_ptr);
    return static UIViewController.present(_:options:animated:completion:)(a1, a3, a2 & 1, 0, 0);
  }
  else
  {
    v16 = sub_5C194(0, (unint64_t *)&qword_31FCD8, OS_dispatch_queue_ptr);
    v27 = static OS_dispatch_queue.main.getter(v16);
    v17 = swift_allocObject(&unk_2ED8E8, 33, 7);
    *(_QWORD *)(v17 + 16) = a1;
    *(_QWORD *)(v17 + 24) = a3;
    *(_BYTE *)(v17 + 32) = a2 & 1;
    aBlock[4] = sub_120270;
    v29 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_69F04;
    aBlock[3] = &unk_2ED900;
    v18 = _Block_copy(aBlock);
    v19 = v29;
    v20 = a1;
    swift_bridgeObjectRetain(a3);
    v21 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v21);
    aBlock[0] = _swiftEmptyArrayStorage;
    v22 = sub_1202E8();
    v23 = sub_5C154(&qword_324CF0);
    v24 = sub_120330();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v6, v22);
    v25 = (void *)v27;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t type metadata accessor for VCStackManager()
{
  return objc_opt_self(BSUIVCStackManager);
}

uint64_t sub_120244()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_120270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 32);
  sub_5C194(0, (unint64_t *)&qword_324D00, UIViewController_ptr);
  return static UIViewController.present(_:options:animated:completion:)(v1, v2, v3, 0, 0);
}

uint64_t sub_1202D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1202E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1202E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324CE8;
  if (!qword_324CE8)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_324CE8);
  }
  return result;
}

unint64_t sub_120330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324CF8;
  if (!qword_324CF8)
  {
    v1 = sub_667D0(&qword_324CF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_324CF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppAnalyticsActionImplementation()
{
  return &type metadata for AppAnalyticsActionImplementation;
}

uint64_t sub_12038C()
{
  return sub_648E0(&qword_31F5A0, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
}

uint64_t sub_1203B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];

  v39 = a3;
  v40 = a4;
  v43 = a1;
  v5 = type metadata accessor for LocationType(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for LocationData(0, v7);
  v41 = *(_QWORD *)(v44 - 8);
  v10 = __chkstk_darwin(v44);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a2, v5, v10);
  v38 = v12;
  LocationData.init(locationType:)(v9);
  v13 = sub_5C154((uint64_t *)&unk_3224F0);
  v14 = type metadata accessor for DataEventTrait(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = v17 + *(_QWORD *)(v15 + 72);
  v36 = v13;
  v37 = v18;
  v19 = v16 | 7;
  v20 = swift_allocObject(v13, v18, v16 | 7);
  v42 = xmmword_258070;
  *(_OWORD *)(v20 + 16) = xmmword_258070;
  v21 = enum case for DataEventTrait.onlyOnce(_:);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104);
  v22(v20 + v17, enum case for DataEventTrait.onlyOnce(_:), v14);
  v23 = sub_648E0(&qword_324D30, (uint64_t (*)(uint64_t))&type metadata accessor for LocationData, (uint64_t)&protocol conformance descriptor for LocationData);
  AccessTracker.push<A>(data:traits:file:line:)(v12, v20, 0xD000000000000091, 0x80000000002715C0, 67, v44, v23);
  swift_bridgeObjectRelease(v20);
  v24 = v13;
  v25 = v37;
  v26 = swift_allocObject(v24, v37, v19);
  *(_OWORD *)(v26 + 16) = v42;
  v22(v26 + v17, v21, v14);
  v27 = type metadata accessor for ClickData(0);
  v28 = sub_648E0((unint64_t *)&unk_326240, (uint64_t (*)(uint64_t))&type metadata accessor for ClickData, (uint64_t)&protocol conformance descriptor for ClickData);
  AccessTracker.push<A>(data:traits:file:line:)(v39, v26, 0xD000000000000091, 0x80000000002715C0, 68, v27, v28);
  swift_bridgeObjectRelease(v26);
  v29 = swift_allocObject(v36, v25, v19);
  *(_OWORD *)(v29 + 16) = v42;
  v22(v29 + v17, v21, v14);
  v30 = type metadata accessor for SectionData(0);
  v31 = sub_648E0((unint64_t *)&unk_326220, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
  AccessTracker.push<A>(data:traits:file:line:)(v40, v29, 0xD000000000000091, 0x80000000002715C0, 69, v30, v31);
  v32 = swift_bridgeObjectRelease(v29);
  v33 = type metadata accessor for ClickEvent(0, v32);
  v34 = sub_648E0(&qword_326260, (uint64_t (*)(uint64_t))&type metadata accessor for ClickEvent, (uint64_t)&protocol conformance descriptor for ClickEvent);
  memset(v45, 0, sizeof(v45));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v33, 0, v45, 0, 0, v33, v34);
  sub_5E09C((uint64_t)v45, &qword_31F8B0);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v38, v44);
}

uint64_t sub_1206F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[2];

  v7 = type metadata accessor for SingleCollectionData(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SingleCollectionData.data(with:for:)(a2, a3, a4, v9);
  v12 = sub_5C154((uint64_t *)&unk_3224F0);
  v13 = type metadata accessor for DataEventTrait(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v12, v16 + *(_QWORD *)(v14 + 72), v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_258070;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v17 + v16, enum case for DataEventTrait.onlyOnce(_:), v13);
  v18 = sub_648E0(&qword_324D38, (uint64_t (*)(uint64_t))&type metadata accessor for SingleCollectionData, (uint64_t)&protocol conformance descriptor for SingleCollectionData);
  AccessTracker.push<A>(data:traits:file:line:)(v11, v17, 0xD000000000000091, 0x80000000002715C0, 78, v7, v18);
  v19 = swift_bridgeObjectRelease(v17);
  v20 = type metadata accessor for AllInSeriesViewEvent(0, v19);
  v21 = sub_648E0(&qword_324D40, (uint64_t (*)(uint64_t))&type metadata accessor for AllInSeriesViewEvent, (uint64_t)&protocol conformance descriptor for AllInSeriesViewEvent);
  memset(v23, 0, sizeof(v23));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v20, 0, v23, 0, 0, v20, v21);
  sub_5E09C((uint64_t)v23, &qword_31F8B0);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1208C0(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[2];

  v50 = a5;
  v45 = a1;
  v6 = type metadata accessor for LinkActionType(0, a3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LinkData(0);
  v11 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  v49 = v11;
  v12 = __chkstk_darwin(v10);
  v44 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ContextualActionSheetExposureEvent(0, v12);
  v15 = sub_648E0(&qword_324D48, (uint64_t (*)(uint64_t))&type metadata accessor for ContextualActionSheetExposureEvent, (uint64_t)&protocol conformance descriptor for ContextualActionSheetExposureEvent);
  v46 = v14;
  v47 = v15;
  v16 = AccessTracker.explicitTime<A>(_:startTime:)(v14, a2, v14, v15);
  v17 = SectionData.sectionID.getter(v16);
  v19 = v18;
  v20 = SectionData.name.getter();
  v22 = v21;
  v23 = ContentData.contentID.getter();
  v25 = v24;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for LinkActionType.click(_:), v6);
  LinkData.init(previousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:)(v17, v19, v20, v22, v23, v25, v9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  v26 = sub_5C154((uint64_t *)&unk_3224F0);
  v27 = type metadata accessor for DataEventTrait(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = v30 + *(_QWORD *)(v28 + 72);
  v32 = v29 | 7;
  v33 = swift_allocObject(v26, v31, v29 | 7);
  v43 = xmmword_258070;
  *(_OWORD *)(v33 + 16) = xmmword_258070;
  v34 = enum case for DataEventTrait.onlyOnce(_:);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 104);
  v35(v33 + v30, enum case for DataEventTrait.onlyOnce(_:), v27);
  v36 = type metadata accessor for ContentData(0);
  v37 = sub_648E0(&qword_326250, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  AccessTracker.push<A>(data:traits:file:line:)(v50, v33, 0xD000000000000091, 0x80000000002715C0, 105, v36, v37);
  swift_bridgeObjectRelease(v33);
  v38 = swift_allocObject(v26, v31, v32);
  *(_OWORD *)(v38 + 16) = v43;
  v35(v38 + v30, v34, v27);
  v39 = sub_648E0(&qword_3237A8, (uint64_t (*)(uint64_t))&type metadata accessor for LinkData, (uint64_t)&protocol conformance descriptor for LinkData);
  v40 = v44;
  v41 = v48;
  AccessTracker.push<A>(data:traits:file:line:)(v44, v38, 0xD000000000000091, 0x80000000002715C0, 106, v48, v39);
  swift_bridgeObjectRelease(v38);
  memset(v51, 0, sizeof(v51));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v46, 0, v51, 0, 0, v46, v47);
  sub_5E09C((uint64_t)v51, &qword_31F8B0);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v40, v41);
}

uint64_t sub_120C00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[2];

  v3 = sub_5C154((uint64_t *)&unk_3224F0);
  v4 = type metadata accessor for DataEventTrait(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v3, v7 + *(_QWORD *)(v5 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_258070;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8 + v7, enum case for DataEventTrait.onlyOnce(_:), v4);
  v9 = type metadata accessor for RatingData(0);
  v10 = sub_648E0(&qword_324D50, (uint64_t (*)(uint64_t))&type metadata accessor for RatingData, (uint64_t)&protocol conformance descriptor for RatingData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, v8, 0xD000000000000091, 0x80000000002715C0, 126, v9, v10);
  v11 = swift_bridgeObjectRelease(v8);
  v12 = type metadata accessor for RatingEvent(0, v11);
  v13 = sub_648E0(&qword_324D58, (uint64_t (*)(uint64_t))&type metadata accessor for RatingEvent, (uint64_t)&protocol conformance descriptor for RatingEvent);
  memset(v15, 0, sizeof(v15));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v12, 0, v15, 0, 0, v12, v13);
  return sub_5E09C((uint64_t)v15, &qword_31F8B0);
}

uint64_t sub_120D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _OWORD v24[2];

  v21 = sub_5C154((uint64_t *)&unk_3224F0);
  v3 = type metadata accessor for DataEventTrait(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 72);
  v8 = v5 | 7;
  v9 = swift_allocObject(v21, v7, v5 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_258070;
  v10 = enum case for DataEventTrait.onlyOnce(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  v11(v9 + v6, enum case for DataEventTrait.onlyOnce(_:), v3);
  v12 = type metadata accessor for DialogActionData(0);
  v13 = sub_648E0(&qword_324D60, (uint64_t (*)(uint64_t))&type metadata accessor for DialogActionData, (uint64_t)&protocol conformance descriptor for DialogActionData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, v9, 0xD000000000000091, 0x80000000002715C0, 148, v12, v13);
  swift_bridgeObjectRelease(v9);
  v14 = swift_allocObject(v21, v7, v8);
  *(_OWORD *)(v14 + 16) = xmmword_258070;
  v11(v14 + v6, v10, v3);
  v15 = type metadata accessor for DialogData(0);
  v16 = sub_648E0(&qword_324D68, (uint64_t (*)(uint64_t))&type metadata accessor for DialogData, (uint64_t)&protocol conformance descriptor for DialogData);
  AccessTracker.push<A>(data:traits:file:line:)(a3, v14, 0xD000000000000091, 0x80000000002715C0, 149, v15, v16);
  v17 = swift_bridgeObjectRelease(v14);
  v18 = type metadata accessor for DialogActionEvent(0, v17);
  v19 = sub_648E0(&qword_324D70, (uint64_t (*)(uint64_t))&type metadata accessor for DialogActionEvent, (uint64_t)&protocol conformance descriptor for DialogActionEvent);
  memset(v24, 0, sizeof(v24));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v18, 0, v24, 0, 0, v18, v19);
  return sub_5E09C((uint64_t)v24, &qword_31F8B0);
}

uint64_t sub_120F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD, uint64_t);
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[56];

  v38 = a4;
  v48 = a3;
  v8 = type metadata accessor for AltSeriesContentTypeExposureData(0);
  v47 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SeriesDetailsViewEvent(0, v9);
  v13 = sub_648E0(&qword_324D80, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesDetailsViewEvent, (uint64_t)&protocol conformance descriptor for SeriesDetailsViewEvent);
  AccessTracker.explicitTime<A>(_:startTime:)(v12, a2, v12, v13);
  v14 = sub_5C154((uint64_t *)&unk_3224F0);
  v15 = type metadata accessor for DataEventTrait(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = v18 + *(_QWORD *)(v16 + 72);
  v46 = v14;
  v42 = v17 | 7;
  v43 = v19;
  v20 = swift_allocObject(v14, v19, v17 | 7);
  v41 = xmmword_258070;
  *(_OWORD *)(v20 + 16) = xmmword_258070;
  v44 = v18;
  v21 = *(void (**)(_QWORD))(v16 + 104);
  v40 = enum case for DataEventTrait.onlyOnce(_:);
  v45 = v15;
  v39 = (void (*)(uint64_t, _QWORD, uint64_t))v21;
  v21(v20 + v18);
  v22 = type metadata accessor for SeriesData(0);
  v23 = sub_648E0(&qword_3239E8, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
  v24 = v48;
  v48 = a1;
  AccessTracker.push<A>(data:traits:file:line:)(v24, v20, 0xD000000000000091, 0x80000000002715C0, 165, v22, v23);
  v25 = swift_bridgeObjectRelease(v20);
  if (v38)
  {
    v37 = v13;
    v26 = dispatch thunk of ExposureCollector.storage.getter(v25);
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v35 = v26;
      v36 = v12;
      v38 = a5;
      v28 = (_QWORD *)(v26 + 32);
      do
      {
        sub_117F78((uint64_t)v28, (uint64_t)v49);
        v29 = sub_5C154(&qword_31EEB0);
        if (swift_dynamicCast(v11, v49, v29, v8, 6))
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v8);
          v30 = v28[3];
          v31 = v28[4];
          v32 = sub_66898(v28, v30);
          v33 = swift_allocObject(v46, v43, v42);
          *(_OWORD *)(v33 + 16) = v41;
          v39(v33 + v44, v40, v45);
          AccessTracker.push<A>(data:traits:file:line:)(v32, v33, 0xD000000000000091, 0x80000000002715C0, 168, v30, v31);
          swift_bridgeObjectRelease(v33);
        }
        v28 += 6;
        --v27;
      }
      while (v27);
      v25 = swift_bridgeObjectRelease(v35);
      a5 = v38;
      v12 = v36;
    }
    else
    {
      v25 = swift_bridgeObjectRelease(v26);
    }
    v13 = v37;
  }
  return AccessTracker.explicitSubmit<A>(_:submitTime:completion:)(v12, a5, 0, 0, v12, v13, v25);
}

uint64_t sub_121260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _OWORD v24[2];

  v21 = sub_5C154((uint64_t *)&unk_3224F0);
  v3 = type metadata accessor for DataEventTrait(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 72);
  v8 = v5 | 7;
  v9 = swift_allocObject(v21, v7, v5 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_258070;
  v10 = enum case for DataEventTrait.onlyOnce(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  v11(v9 + v6, enum case for DataEventTrait.onlyOnce(_:), v3);
  v12 = type metadata accessor for SeriesData(0);
  v13 = sub_648E0(&qword_3239E8, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, v9, 0xD000000000000091, 0x80000000002715C0, 181, v12, v13);
  swift_bridgeObjectRelease(v9);
  v14 = swift_allocObject(v21, v7, v8);
  *(_OWORD *)(v14 + 16) = xmmword_258070;
  v11(v14 + v6, v10, v3);
  v15 = type metadata accessor for FormatFilterData(0);
  v16 = sub_648E0(&qword_324D88, (uint64_t (*)(uint64_t))&type metadata accessor for FormatFilterData, (uint64_t)&protocol conformance descriptor for FormatFilterData);
  AccessTracker.push<A>(data:traits:file:line:)(a3, v14, 0xD000000000000091, 0x80000000002715C0, 182, v15, v16);
  v17 = swift_bridgeObjectRelease(v14);
  v18 = type metadata accessor for SeriesFilterEvent(0, v17);
  v19 = sub_648E0(&qword_324D90, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesFilterEvent, (uint64_t)&protocol conformance descriptor for SeriesFilterEvent);
  memset(v24, 0, sizeof(v24));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v18, 0, v24, 0, 0, v18, v19);
  return sub_5E09C((uint64_t)v24, &qword_31F8B0);
}

uint64_t sub_12146C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v7 = type metadata accessor for YearInReviewViewEvent(0);
  v8 = sub_648E0(&qword_324D98, (uint64_t (*)(uint64_t))&type metadata accessor for YearInReviewViewEvent, (uint64_t)&protocol conformance descriptor for YearInReviewViewEvent);
  AccessTracker.explicitTime<A>(_:startTime:)(v7, a2, v7, v8);
  v9 = type metadata accessor for YIRDetailedData(0);
  v10 = sub_648E0(&qword_324DA0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRDetailedData, (uint64_t)&protocol conformance descriptor for YIRDetailedData);
  AccessTracker.push<A>(data:traits:file:line:)(a3, _swiftEmptyArrayStorage, 0xD000000000000091, 0x80000000002715C0, 198, v9, v10);
  return AccessTracker.explicitSubmit<A>(_:submitTime:completion:)(v7, a4, 0, 0, v7, v8, v11);
}

uint64_t sub_121560(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a5 & 1) != 0)
  {
    static Logger.appAnalyticsActionImplementation.getter(v11);
    swift_bridgeObjectRetain_n(a3, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v25 = v21;
      *(_DWORD *)v20 = 136315138;
      v23 = v20 + 4;
      swift_bridgeObjectRetain(a3);
      v24 = sub_57CD8(a2, a3, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v23, v20 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl(&dword_0, v18, v19, "Failed to retrieve assetCount for series id:%s. This will result in failing to emit AllInSeriesViewEvent", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    v14 = (_QWORD *)swift_allocObject(&unk_2ED9A8, 40, 7);
    v14[2] = a4;
    v14[3] = a2;
    v14[4] = a3;
    v15 = swift_bridgeObjectRetain(a3);
    BATracker.transaction(_:)(sub_123E60, v14, v15);
    return swift_release(v14);
  }
}

uint64_t sub_121788(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, _QWORD, uint64_t, __n128);
  uint64_t v18;
  unsigned int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v26;
  char *v27;

  v2 = type metadata accessor for RatingData(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v27 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - v7;
  v9 = type metadata accessor for Rating(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v26 - v15;
  v17 = *(void (**)(char *, _QWORD, uint64_t, __n128))(v10 + 104);
  v17((char *)&v26 - v15, enum case for Rating.unknown(_:), v9, v14);
  v26 = v4;
  if (a1 == 0.2)
  {
    v18 = v2;
    v19 = (unsigned int *)&enum case for Rating.one(_:);
LABEL_11:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    ((void (*)(char *, _QWORD, uint64_t))v17)(v16, *v19, v9);
    v2 = v18;
    v4 = v26;
    goto LABEL_12;
  }
  if (a1 == 0.4)
  {
    v18 = v2;
    v19 = (unsigned int *)&enum case for Rating.two(_:);
    goto LABEL_11;
  }
  if (a1 == 0.6)
  {
    v18 = v2;
    v19 = (unsigned int *)&enum case for Rating.three(_:);
    goto LABEL_11;
  }
  if (a1 == 0.8)
  {
    v18 = v2;
    v19 = (unsigned int *)&enum case for Rating.four(_:);
    goto LABEL_11;
  }
  if (a1 == 1.0)
  {
    v18 = v2;
    v19 = (unsigned int *)&enum case for Rating.five(_:);
    goto LABEL_11;
  }
LABEL_12:
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v16, v9);
  RatingData.init(rating:)(v12);
  v20 = v27;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v27, v8, v2);
  v21 = *(unsigned __int8 *)(v3 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_2ED9D0, v22 + v4, v21 | 7);
  v24.n128_f64[0] = (*(double (**)(uint64_t, char *, uint64_t))(v3 + 32))(v23 + v22, v20, v2);
  BATracker.transaction(_:)(sub_123ECC, v23, v24);
  swift_release(v23);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
}

uint64_t sub_121A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(__n128);
  uint64_t (*v22)(char *, char *);
  char *v23;
  char *v24;
  unsigned int *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t (*v45)(char *, char *);
  char *v46;
  uint64_t (*v47)(char *, char *);
  char *v48;
  uint64_t (*v49)(char *, char *);
  char *v50;
  char v51;
  uint64_t (*v52)(char *, char *);
  char *v53;
  uint64_t v54;
  uint64_t (*v55)(char *, char *);
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;

  v66 = a1;
  v5 = type metadata accessor for DialogType(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = (char *)v5;
  __chkstk_darwin(v5);
  v59 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DialogData(0);
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  __chkstk_darwin(v7);
  v62 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v8;
  __chkstk_darwin(v9);
  v61 = (char *)&v54 - v10;
  v60 = type metadata accessor for DialogActionData(0);
  v11 = *(_QWORD *)(v60 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v60);
  v58 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - v14;
  v16 = type metadata accessor for DialogActionType(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = enum case for DialogActionType.unknown(_:);
  v21 = *(void (**)(__n128))(v17 + 104);
  v67 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21(v18);
  if (a2 == 0x6C7566706C6568 && a3 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C7566706C6568, 0xE700000000000000, a2, a3, 0) & 1) != 0)
  {
    v22 = *(uint64_t (**)(char *, char *))(v17 + 8);
    v23 = v67;
    v55 = v22;
    v22(v67, (char *)v16);
    v24 = v23;
    v25 = (unsigned int *)&enum case for DialogActionType.sortMostHelpful(_:);
  }
  else if (a2 == 0x6C6261726F766166 && a3 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6261726F766166, 0xE900000000000065, a2, a3, 0) & 1) != 0)
  {
    v45 = *(uint64_t (**)(char *, char *))(v17 + 8);
    v46 = v67;
    v55 = v45;
    v45(v67, (char *)v16);
    v24 = v46;
    v25 = (unsigned int *)&enum case for DialogActionType.sortMostFavorable(_:);
  }
  else
  {
    if ((a2 != 0x6C61636974697263 || a3 != 0xE800000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61636974697263, 0xE800000000000000, a2, a3, 0) & 1) == 0)
    {
      if (a2 == 0x746E65636572 && a3 == 0xE600000000000000)
      {
        v49 = *(uint64_t (**)(char *, char *))(v17 + 8);
        v50 = v67;
        v55 = v49;
        v49(v67, (char *)v16);
        v24 = v50;
        v27 = v56;
        v26 = v57;
      }
      else
      {
        v51 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E65636572, 0xE600000000000000, a2, a3, 0);
        v52 = *(uint64_t (**)(char *, char *))(v17 + 8);
        v53 = v67;
        v55 = v52;
        v52(v67, (char *)v16);
        v24 = v53;
        v27 = v56;
        v26 = v57;
        if ((v51 & 1) == 0)
          goto LABEL_6;
      }
      v20 = enum case for DialogActionType.sortMostRecent(_:);
      goto LABEL_6;
    }
    v47 = *(uint64_t (**)(char *, char *))(v17 + 8);
    v48 = v67;
    v55 = v47;
    v47(v67, (char *)v16);
    v24 = v48;
    v25 = (unsigned int *)&enum case for DialogActionType.sortMostCritical(_:);
  }
  v20 = *v25;
  v27 = v56;
  v26 = v57;
LABEL_6:
  v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v21)(v24, v20, v16);
  v29 = DialogActionType.rawValue.getter(v28);
  DialogActionData.init(dialogActionType:)(v29);
  v30 = v59;
  (*(void (**)(char *, _QWORD, char *))(v27 + 104))(v59, enum case for DialogType.sortReviews(_:), v26);
  v31 = v61;
  DialogData.init(dialogType:)(v30);
  v32 = v58;
  v33 = v60;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v58, v15, v60);
  v59 = (char *)v16;
  v57 = v15;
  v34 = v11;
  v35 = v64;
  v36 = v65;
  v37 = v62;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v62, v31, v65);
  v38 = *(unsigned __int8 *)(v34 + 80);
  v39 = (v38 + 16) & ~v38;
  v40 = *(unsigned __int8 *)(v35 + 80);
  v41 = (v12 + v40 + v39) & ~v40;
  v42 = swift_allocObject(&unk_2ED9F8, v41 + v63, v38 | v40 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v42 + v39, v32, v33);
  v43.n128_f64[0] = (*(double (**)(uint64_t, char *, uint64_t))(v35 + 32))(v42 + v41, v37, v36);
  BATracker.transaction(_:)(sub_123F1C, v42, v43);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v36);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v57, v33);
  return v55(v67, v59);
}

uint64_t sub_121F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char *v28;
  unsigned int (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  char v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  __n128 v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, unint64_t, uint64_t);
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v80[4];

  v67 = a2;
  v78 = type metadata accessor for ActionOutcome(0);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v77 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for SeriesData(0);
  v68 = *(_QWORD *)(v72 - 8);
  v3 = *(_QWORD *)(v68 + 64);
  __chkstk_darwin(v72);
  v71 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v70 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v69 = (char *)&v62 - v14;
  __chkstk_darwin(v15);
  v73 = (char *)&v62 - v16;
  __chkstk_darwin(v17);
  v74 = (char *)&v62 - v18;
  v19 = type metadata accessor for Page.LifecycleInfo();
  BaseObjectGraph.inject<A>(_:)(v80, v19, v19);
  v20 = v80[0];
  v21 = sub_5C154(&qword_324D78);
  BaseObjectGraph.inject<A>(_:)(v80, v21, v21);
  v75 = v80[0];
  v22 = (uint64_t *)(v20 + 16);
  swift_beginAccess(v20 + 16, v80, 0, 0);
  v23 = *(_QWORD *)(v20 + 16);
  if (!*(_QWORD *)(v23 + 16) || (v24 = sub_583A4(2u), (v25 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_10;
  }
  v26 = *(_QWORD *)(v23 + 56);
  v64 = *(_QWORD *)(v11 + 72);
  v27 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v27(v9, v26 + v64 * v24, v10);
  v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v66(v9, 0, 1, v10);
  v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v65(v9, 1, v10) == 1)
  {
LABEL_10:
    v55 = (uint64_t)v9;
LABEL_11:
    sub_5E09C(v55, &qword_31F128);
LABEL_12:
    v57 = v77;
    v56 = v78;
    v59 = v75;
    v58 = v76;
    sub_5C154(&qword_3208F8);
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v57, enum case for ActionOutcome.unsupported(_:), v56);
    v53 = Promise.__allocating_init(value:)(v57);
    swift_release(v20);
    swift_release(v59);
    return v53;
  }
  v63 = v27;
  v28 = v9;
  v29 = *(unsigned int (**)(char *, char *, uint64_t))(v11 + 32);
  v29(v74, v28, v10);
  v30 = *v22;
  if (!*(_QWORD *)(*v22 + 16) || (v31 = sub_583A4(3u), (v32 & 1) == 0))
  {
    v66(v6, 1, 1, v10);
    goto LABEL_15;
  }
  v63(v6, *(_QWORD *)(v30 + 56) + v31 * v64, v10);
  v66(v6, 0, 1, v10);
  if (v65(v6, 1, v10) == 1)
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v74, v10);
    v55 = (uint64_t)v6;
    goto LABEL_11;
  }
  v33 = v73;
  v29(v73, v6, v10);
  v34 = (unsigned int (*)(char *, uint64_t, uint64_t))v29;
  v35 = v74;
  if ((static Date.< infix(_:_:)(v74, v33) & 1) == 0)
  {
    v61 = *(void (**)(char *, uint64_t))(v11 + 8);
    v61(v33, v10);
    v61(v35, v10);
    goto LABEL_12;
  }
  v36 = type metadata accessor for BATracker(0);
  BaseObjectGraph.inject<A>(_:)(&v79, v36, v36);
  v65 = v34;
  v66 = v79;
  v37 = (void (*)(char *, char *, uint64_t))v63;
  v63(v69, (unint64_t)v35, v10);
  v38 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v71, v67, v72);
  v37(v70, v33, v10);
  v39 = *(unsigned __int8 *)(v11 + 80);
  v40 = (v39 + 16) & ~v39;
  v41 = *(unsigned __int8 *)(v38 + 80);
  v42 = v38;
  v43 = (v12 + v41 + v40) & ~v41;
  v44 = (v3 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v39 + v44 + 8) & ~v39;
  v46 = swift_allocObject(&unk_2EDA20, v45 + v12, v39 | v41 | 7);
  v47 = v46 + v40;
  v48 = (void (*)(uint64_t, char *, uint64_t))v65;
  v65((char *)v47, (uint64_t)v69, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v46 + v43, v71, v72);
  v49 = v75;
  *(_QWORD *)(v46 + v44) = v75;
  v48(v46 + v45, v70, v10);
  swift_retain(v49);
  v50 = v66;
  BATracker.transaction(_:)(sub_124024, v46, v51);
  swift_release(v46);
  sub_5C154(&qword_3208F8);
  v52 = v77;
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v77, enum case for ActionOutcome.performed(_:), v78);
  v53 = Promise.__allocating_init(value:)(v52);
  swift_release(v49);
  swift_release(v20);

  v54 = *(void (**)(char *, uint64_t))(v11 + 8);
  v54(v73, v10);
  v54(v74, v10);
  return v53;
}

uint64_t sub_1224A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  void *v51;
  char *v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;

  v60 = (void *)a4;
  v65 = (char *)a3;
  v56 = a2;
  v54 = a1;
  v70 = type metadata accessor for ActionOutcome(0);
  v68 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v69 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SeriesData(0);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  v6 = *(_QWORD *)(v57 + 64);
  __chkstk_darwin(v5);
  v55 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for FormatFilterData(0);
  v59 = *(_QWORD *)(v64 - 8);
  v7 = *(_QWORD *)(v59 + 64);
  __chkstk_darwin(v64);
  v61 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v63 = (char *)&v54 - v9;
  v10 = sub_5C154(&qword_324D08);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SortBy(0, v11);
  v66 = *(_QWORD *)(v14 - 8);
  v67 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v62 = (char *)&v54 - v18;
  v19 = sub_5C154(&qword_324D10);
  __chkstk_darwin(v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for FilterType(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v54 - v27;
  sub_5E1A4((uint64_t)v65, (uint64_t)v21, &qword_324D10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v29 = &qword_324D10;
    v30 = (uint64_t)v21;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v28, v21, v22);
    sub_5E1A4((uint64_t)v60, (uint64_t)v13, &qword_324D08);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v13, 1, v67) != 1)
    {
      v33 = v66;
      v34 = v62;
      v35 = v13;
      v36 = v67;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v62, v35, v67);
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v25, v28, v22);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v16, v34, v36);
      v37 = v63;
      FormatFilterData.init(filterType:sortBy:)(v25, v16);
      v38 = type metadata accessor for BATracker(0);
      BaseObjectGraph.inject<A>(_:)(&v71, v38, v38);
      v60 = (void *)v71;
      v39 = v57;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
      v65 = v28;
      v41 = v55;
      v42 = v58;
      v40(v55, v56, v58);
      v43 = v59;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v61, v37, v64);
      v44 = *(unsigned __int8 *)(v39 + 80);
      v45 = (v44 + 16) & ~v44;
      v46 = *(unsigned __int8 *)(v43 + 80);
      v47 = (v6 + v46 + v45) & ~v46;
      v48 = swift_allocObject(&unk_2EDA48, v47 + v7, v44 | v46 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v48 + v45, v41, v42);
      v49 = v64;
      v50.n128_f64[0] = (*(double (**)(uint64_t, char *, uint64_t))(v43 + 32))(v48 + v47, v61, v64);
      v51 = v60;
      BATracker.transaction(_:)(sub_124188, v48, v50);
      swift_release(v48);
      sub_5C154(&qword_3208F8);
      v52 = v69;
      (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v69, enum case for ActionOutcome.performed(_:), v70);
      v32 = Promise.__allocating_init(value:)(v52);

      (*(void (**)(char *, uint64_t))(v43 + 8))(v63, v49);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v67);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v65, v22);
      return v32;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    v29 = &qword_324D08;
    v30 = (uint64_t)v13;
  }
  sub_5E09C(v30, v29);
  sub_5C154(&qword_3208F8);
  v31 = v69;
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v69, enum case for ActionOutcome.unsupported(_:), v70);
  return Promise.__allocating_init(value:)(v31);
}

uint64_t sub_122980(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char *v30;
  double (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  double (*v49)(uint64_t, char *, uint64_t);
  __n128 v50;
  void *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v58)(char *, uint64_t);
  void (*v59)(char *, unint64_t, uint64_t);
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  double (*v62)(uint64_t, char *, uint64_t);
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  _QWORD v75[4];

  v64 = a2;
  v3 = type metadata accessor for ActionOutcome(0);
  v72 = *(_QWORD *)(v3 - 8);
  v73 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for YIRDetailedData(0);
  v65 = *(_QWORD *)(v69 - 8);
  v6 = *(_QWORD *)(v65 + 64);
  __chkstk_darwin(v69);
  v68 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v59 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v67 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v66 = (char *)&v59 - v17;
  __chkstk_darwin(v18);
  v70 = (char *)&v59 - v19;
  __chkstk_darwin(v20);
  v71 = (char *)&v59 - v21;
  v22 = type metadata accessor for Page.LifecycleInfo();
  v63 = a1;
  BaseObjectGraph.inject<A>(_:)(v75, v22, v22);
  v23 = v75[0];
  v24 = v75[0] + 16;
  swift_beginAccess(v75[0] + 16, v75, 0, 0);
  v25 = *(_QWORD *)(v23 + 16);
  if (!*(_QWORD *)(v25 + 16) || (v26 = sub_583A4(2u), (v27 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_10;
  }
  v28 = *(_QWORD *)(v25 + 56);
  v60 = *(_QWORD *)(v14 + 72);
  v29 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
  v29(v12, v28 + v60 * v26, v13);
  v62 = *(double (**)(uint64_t, char *, uint64_t))(v14 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v62)(v12, 0, 1, v13);
  v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v61(v12, 1, v13) == 1)
  {
LABEL_10:
    v54 = (uint64_t)v12;
LABEL_11:
    sub_5E09C(v54, &qword_31F128);
LABEL_12:
    v56 = v72;
    v55 = v73;
    sub_5C154(&qword_3208F8);
    (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v5, enum case for ActionOutcome.unsupported(_:), v55);
    v52 = Promise.__allocating_init(value:)(v5);
    swift_release(v23);
    return v52;
  }
  v59 = v29;
  v30 = v12;
  v31 = *(double (**)(char *, char *, uint64_t))(v14 + 32);
  v31(v71, v30, v13);
  v32 = *(_QWORD *)v24;
  if (!*(_QWORD *)(*(_QWORD *)v24 + 16) || (v33 = sub_583A4(3u), (v34 & 1) == 0))
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v62)(v9, 1, 1, v13);
    goto LABEL_15;
  }
  v59(v9, *(_QWORD *)(v32 + 56) + v33 * v60, v13);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v62)(v9, 0, 1, v13);
  if (v61(v9, 1, v13) == 1)
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v71, v13);
    v54 = (uint64_t)v9;
    goto LABEL_11;
  }
  v35 = v70;
  v31(v70, v9, v13);
  v36 = v71;
  if ((static Date.< infix(_:_:)(v71, v35) & 1) == 0)
  {
    v58 = *(void (**)(char *, uint64_t))(v14 + 8);
    v58(v35, v13);
    v58(v36, v13);
    goto LABEL_12;
  }
  v37 = type metadata accessor for BATracker(0);
  BaseObjectGraph.inject<A>(_:)(&v74, v37, v37);
  v63 = v74;
  v38 = (void (*)(char *, char *, uint64_t))v59;
  v59(v66, (unint64_t)v36, v13);
  v62 = (double (*)(uint64_t, char *, uint64_t))v31;
  v39 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v68, v64, v69);
  v38(v67, v35, v13);
  v40 = *(unsigned __int8 *)(v14 + 80);
  v41 = (v40 + 16) & ~v40;
  v42 = *(unsigned __int8 *)(v39 + 80);
  v43 = (v15 + v42 + v41) & ~v42;
  v44 = (v6 + v40 + v43) & ~v40;
  v45 = swift_allocObject(&unk_2EDA70, v44 + v15, v40 | v42 | 7);
  v46 = v36;
  v47 = v45;
  v48 = v45 + v41;
  v49 = v62;
  v62(v48, v66, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v47 + v43, v68, v69);
  v50.n128_f64[0] = v49(v47 + v44, v67, v13);
  v51 = v63;
  BATracker.transaction(_:)(sub_124300, v47, v50);
  swift_release(v47);
  sub_5C154(&qword_3208F8);
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v5, enum case for ActionOutcome.performed(_:), v73);
  v52 = Promise.__allocating_init(value:)(v5);
  swift_release(v23);

  v53 = *(void (**)(char *, uint64_t))(v14 + 8);
  v53(v70, v13);
  v53(v46, v13);
  return v52;
}

uint64_t sub_122EA0(double (*a1)(char *, char *, uint64_t), void (*a2)(char *, char *, _QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  __n128 v65;
  id v66;
  id v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(void);
  char v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t DynamicType;
  void (*v82)(char *, void (*)(void));
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t result;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  void (*v145)(void);
  void (*v146)(char *, char *, _QWORD *);
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  id v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  double (*v160)(char *, char *, uint64_t);
  uint64_t v161;
  char *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  v160 = a1;
  v150 = type metadata accessor for ActionOutcome(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for YIRDetailedData(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v127 = (char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_324D08);
  __chkstk_darwin(v5);
  v128 = (uint64_t)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_324D10);
  __chkstk_darwin(v7);
  v126 = (uint64_t)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for SeriesData(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for ContentData(0);
  v143 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v136 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = v10;
  __chkstk_darwin(v11);
  v141 = (char *)&v124 - v12;
  v140 = type metadata accessor for Date(0);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v137 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = v13;
  __chkstk_darwin(v14);
  v138 = (char *)&v124 - v15;
  v145 = (void (*)(void))type metadata accessor for ScenePhase(0);
  v16 = *((_QWORD *)v145 - 1);
  __chkstk_darwin(v145);
  v18 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v144 = (char *)&v124 - v20;
  v159 = type metadata accessor for SectionData(0);
  v161 = *(_QWORD *)(v159 - 8);
  v21 = *(char **)(v161 + 64);
  __chkstk_darwin(v159);
  v157 = (char *)&v124 - ((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v162 = (char *)&v124 - v23;
  v158 = (_QWORD *)type metadata accessor for ClickData(0);
  v155 = *(v158 - 1);
  v24 = *(_QWORD *)(v155 + 64);
  __chkstk_darwin(v158);
  v147 = (char *)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v154 = (char *)&v124 - v26;
  v27 = type metadata accessor for LocationType(0);
  v152 = *(_QWORD *)(v27 - 8);
  v153 = v27;
  v28 = *(_QWORD *)(v152 + 64);
  __chkstk_darwin(v27);
  v151 = (char *)&v124 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v124 - v31;
  v33 = type metadata accessor for AppAnalyticsAction.Type(0, v30);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v124 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for BATracker(0);
  v146 = a2;
  v38 = BaseObjectGraph.inject<A>(_:)(&v163, v37, v37);
  v156 = (id)v163;
  AppAnalyticsAction.type.getter(v38);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v36, v33);
  if (v39 == enum case for AppAnalyticsAction.Type.clickEvent(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v40 = &v36[*(int *)(sub_5C154(&qword_324D28) + 48)];
    v160 = *(double (**)(char *, char *, uint64_t))(v152 + 32);
    v41 = v152;
    v42 = v32;
    v43 = v32;
    v125 = v32;
    v44 = v153;
    v160(v43, v36, v153);
    v146 = *(void (**)(char *, char *, _QWORD *))(v155 + 32);
    v45 = v154;
    v46 = v40;
    v47 = v158;
    v146(v154, v46, v158);
    v145 = *(void (**)(void))(v161 + 32);
    v144 = v21;
    v48 = v162;
    v49 = v159;
    v145();
    v50 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v151, v42, v44);
    v51 = v155;
    v52 = v147;
    (*(void (**)(char *, char *, _QWORD *))(v155 + 16))(v147, v45, v47);
    v53 = v161;
    v54 = v157;
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v157, v48, v49);
    v55 = *(unsigned __int8 *)(v50 + 80);
    v56 = (v55 + 16) & ~v55;
    v57 = *(unsigned __int8 *)(v51 + 80);
    v58 = (v28 + v57 + v56) & ~v57;
    v59 = *(unsigned __int8 *)(v53 + 80);
    v60 = (v24 + v59 + v58) & ~v59;
    v61 = swift_allocObject(&unk_2ED980, &v144[v60], v55 | v57 | v59 | 7);
    v62 = v153;
    v160((char *)(v61 + v56), v151, v153);
    v63 = v52;
    v64 = v158;
    v146((char *)(v61 + v58), v63, v158);
    v65.n128_f64[0] = ((double (*)(uint64_t, char *, uint64_t))v145)(v61 + v60, v54, v49);
    v66 = v156;
    BATracker.transaction(_:)(sub_123D6C, v61, v65);
    swift_release(v61);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v162, v49);
    (*(void (**)(char *, _QWORD *))(v51 + 8))(v154, v64);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v125, v62);
    v67 = v66;
LABEL_10:
    sub_5C154(&qword_3208F8);
    v84 = v148;
    (*(void (**)(char *, _QWORD, uint64_t))(v149 + 104))(v148, enum case for ActionOutcome.performed(_:), v150);
    v85 = Promise.__allocating_init(value:)(v84);

    return v85;
  }
  v68 = v18;
  v69 = v16;
  v70 = v21;
  v71 = v157;
  v73 = v161;
  v72 = v162;
  v74 = v159;
  if (v39 == enum case for AppAnalyticsAction.Type.popData(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v75 = &v36[*(int *)(sub_5C154(&qword_3239E0) + 48)];
    sub_F1344((__int128 *)v36, &v163);
    v76 = v144;
    v77 = v145;
    (*(void (**)(char *, char *, void (*)(void)))(v69 + 32))(v144, v75, v145);
    BaseObjectGraph.inject<A>(_:)(v68, v77, v77);
    v78 = static ScenePhase.== infix(_:_:)(v68, v76);
    v67 = v156;
    if ((v78 & 1) != 0)
    {
      v79 = v164;
      v80 = sub_66898(&v163, v164);
      DynamicType = swift_getDynamicType(v80, v79, 1);
      BATracker.pop<A>(type:)(DynamicType, DynamicType, v165, v166);
    }
    v82 = *(void (**)(char *, void (*)(void)))(v69 + 8);
    v82(v68, v77);
    v82(v76, v77);
    goto LABEL_9;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.pushData(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    sub_F1344((__int128 *)v36, &v163);
    v83 = sub_66898(&v163, v164);
    v67 = v156;
    BATracker.push<A>(data:traits:file:line:)(v83, 0, 0xD000000000000091);
LABEL_9:
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v163);
    goto LABEL_10;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.reportAllInSeriesView(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v87 = *((_QWORD *)v36 + 1);
    v67 = v156;
    sub_121560((uint64_t)v156, *(_QWORD *)v36, v87, *((_QWORD *)v36 + 2), v36[24]);
LABEL_14:
    swift_bridgeObjectRelease(v87);
    goto LABEL_10;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.reportContextualActionSheetExposure(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v88 = sub_5C154(&qword_324D20);
    v89 = &v36[*(int *)(v88 + 48)];
    v154 = &v36[*(int *)(v88 + 64)];
    v158 = *(_QWORD **)(v139 + 32);
    v90 = v139;
    v91 = v138;
    v92 = v140;
    ((void (*)(char *, char *, uint64_t))v158)(v138, v36, v140);
    v160 = *(double (**)(char *, char *, uint64_t))(v143 + 32);
    v93 = v141;
    v160(v141, v89, v142);
    v155 = *(_QWORD *)(v73 + 32);
    v94 = v72;
    v95 = v72;
    v96 = v74;
    ((void (*)(char *, char *, uint64_t))v155)(v95, v154, v74);
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v137, v91, v92);
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v71, v94, v74);
    v97 = v143;
    v98 = v136;
    v99 = v142;
    (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v136, v93, v142);
    v100 = *(unsigned __int8 *)(v90 + 80);
    v101 = (v100 + 16) & ~v100;
    v102 = *(unsigned __int8 *)(v73 + 80);
    v103 = (v134 + v102 + v101) & ~v102;
    v104 = *(unsigned __int8 *)(v97 + 80);
    v105 = (unint64_t)&v70[v104 + v103] & ~v104;
    v106 = swift_allocObject(&unk_2ED958, v105 + v135, v100 | v102 | v104 | 7);
    v107 = v140;
    ((void (*)(uint64_t, char *, uint64_t))v158)(v106 + v101, v137, v140);
    ((void (*)(uint64_t, char *, uint64_t))v155)(v106 + v103, v71, v96);
    v108.n128_f64[0] = v160((char *)(v106 + v105), v98, v99);
    v67 = v156;
    BATracker.transaction(_:)(sub_123C28, v106, v108);
    swift_release(v106);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v162, v96);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v141, v99);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v138, v107);
    goto LABEL_10;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.reportRatingEvent(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v109 = *((double *)v36 + 2);
    swift_bridgeObjectRelease(*((_QWORD *)v36 + 1));
    v67 = v156;
    sub_121788(v109);
    goto LABEL_10;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.reportReviewsDialogEvent(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v87 = *((_QWORD *)v36 + 1);
    v67 = v156;
    sub_121A2C((uint64_t)v156, *(_QWORD *)v36, v87);
    goto LABEL_14;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.reportSeriesDetailsView(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v110 = v132;
    v111 = (uint64_t)v131;
    v112 = v133;
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v131, v36, v133);
    v113 = sub_121F18((uint64_t)v146, v111);
LABEL_27:
    v85 = v113;

    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v111, v112);
    return v85;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.reportSeriesFilter(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v114 = sub_5C154(&qword_324D18);
    v115 = (uint64_t)&v36[*(int *)(v114 + 48)];
    v116 = &v36[*(int *)(v114 + 64)];
    v117 = v132;
    v118 = (uint64_t)v131;
    v119 = v36;
    v120 = v133;
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v131, v119, v133);
    v121 = v126;
    sub_66F14(v115, v126, &qword_324D10);
    v122 = (uint64_t)v116;
    v123 = v128;
    sub_66F14(v122, v128, &qword_324D08);
    v85 = sub_1224A0((uint64_t)v146, v118, v121, v123);

    sub_5E09C(v123, &qword_324D08);
    sub_5E09C(v121, &qword_324D10);
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v118, v120);
    return v85;
  }
  if (v39 == enum case for AppAnalyticsAction.Type.reportYearInReviewViewEvent(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v36, v33);
    v110 = v129;
    v111 = (uint64_t)v127;
    v112 = v130;
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v127, v36, v130);
    v113 = sub_122980(v146, v111);
    goto LABEL_27;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v33, v33);
  __break(1u);
  return result;
}

uint64_t sub_123C0C()
{
  return sub_123C68((uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(_QWORD))&type metadata accessor for SectionData, (uint64_t (*)(_QWORD))&type metadata accessor for ContentData);
}

uint64_t sub_123C28(uint64_t a1)
{
  return sub_123D90(a1, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(_QWORD))&type metadata accessor for SectionData, (uint64_t (*)(_QWORD))&type metadata accessor for ContentData, (uint64_t (*)(uint64_t, unint64_t, unint64_t, unint64_t))sub_1208C0);
}

uint64_t sub_123C4C()
{
  return sub_123C68((uint64_t (*)(_QWORD))&type metadata accessor for LocationType, (uint64_t (*)(_QWORD))&type metadata accessor for ClickData, (uint64_t (*)(_QWORD))&type metadata accessor for SectionData);
}

uint64_t sub_123C68(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1(0);
  v6 = *(_QWORD *)(v22 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v21 = a2(0);
  v10 = *(_QWORD *)(v21 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v13 = *(_QWORD *)(v10 + 64);
  v14 = a3(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v12 + v13 + v16) & ~v16;
  v20 = v17 + *(_QWORD *)(v15 + 64);
  v18 = v7 | v11 | v16 | 7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3 + v8, v22);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3 + v12, v21);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v3 + v17, v14);
  return swift_deallocObject(v3, v20, v18);
}

uint64_t sub_123D6C(uint64_t a1)
{
  return sub_123D90(a1, (uint64_t (*)(_QWORD))&type metadata accessor for LocationType, (uint64_t (*)(_QWORD))&type metadata accessor for ClickData, (uint64_t (*)(_QWORD))&type metadata accessor for SectionData, (uint64_t (*)(uint64_t, unint64_t, unint64_t, unint64_t))sub_1203B8);
}

uint64_t sub_123D90(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t, unint64_t, unint64_t, unint64_t))
{
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(_QWORD *)(a2(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(a3(0) - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(a4(0) - 8) + 80);
  return a5(a1, v5 + v10, v5 + v13, v5 + ((v13 + v14 + v15) & ~v15));
}

uint64_t sub_123E3C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_123E60(uint64_t a1)
{
  uint64_t *v1;

  return sub_1206F0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_123E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for RatingData(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_123ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RatingData(0) - 8) + 80);
  return sub_120C00(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_123F08()
{
  return sub_1240CC((uint64_t (*)(_QWORD))&type metadata accessor for DialogActionData, (uint64_t (*)(_QWORD))&type metadata accessor for DialogData);
}

uint64_t sub_123F1C(uint64_t a1)
{
  return sub_1241A4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for DialogActionData, (uint64_t (*)(_QWORD))&type metadata accessor for DialogData, (uint64_t (*)(uint64_t, unint64_t, unint64_t))sub_120D64);
}

uint64_t sub_123F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for SeriesData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v14 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v3 + v10 + 8) & ~v3;
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v10));
  v12(v0 + v11, v1);
  return swift_deallocObject(v0, v11 + v5, v14);
}

uint64_t sub_124024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(type metadata accessor for SeriesData(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_120F70(a1, v1 + v5, v1 + v8, *(_QWORD *)(v1 + v9), v1 + ((v4 + v9 + 8) & ~v4));
}

uint64_t sub_1240B8()
{
  return sub_1240CC((uint64_t (*)(_QWORD))&type metadata accessor for SeriesData, (uint64_t (*)(_QWORD))&type metadata accessor for FormatFilterData);
}

uint64_t sub_1240CC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v13 = v12 + *(_QWORD *)(v10 + 64);
  v14 = v6 | v11 | 7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2 + v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2 + v12, v9);
  return swift_deallocObject(v2, v13, v14);
}

uint64_t sub_124188(uint64_t a1)
{
  return sub_1241A4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SeriesData, (uint64_t (*)(_QWORD))&type metadata accessor for FormatFilterData, (uint64_t (*)(uint64_t, unint64_t, unint64_t))sub_121260);
}

uint64_t sub_1241A4(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, unint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a2(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a3(0) - 8) + 80);
  return a4(a1, v4 + v8, v4 + ((v8 + v9 + v10) & ~v10));
}

uint64_t sub_124228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for YIRDetailedData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v13 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v3 + v9) & ~v3;
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  v11(v0 + v10, v1);
  return swift_deallocObject(v0, v10 + v5, v13);
}

uint64_t sub_124300(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(type metadata accessor for YIRDetailedData(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_12146C(a1, v1 + v5, v1 + v8, v1 + ((*(_QWORD *)(v7 + 64) + v4 + v8) & ~v4));
}

uint64_t sub_124384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  char *v10;
  uint64_t v11;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  v10 = (char *)a9 + *(int *)(type metadata accessor for MCatalogRequestIntent(0, a8, a3, a4) + 44);
  v11 = type metadata accessor for MRequestMetadata(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a7, v11);
}

uint64_t sub_1243E0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x656372756F736572 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease(0xE900000000000073);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F736572, 0xE900000000000073, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

_QWORD *sub_124470(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  _QWORD *v26;

  v6 = type metadata accessor for MCatalogRequestIntent.Result.CodingKeys(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_25FAA8, v6);
  v25[0] = type metadata accessor for KeyedDecodingContainer(0, v6, WitnessTable);
  v8 = *(_QWORD *)(v25[0] - 8);
  __chkstk_darwin(v25[0]);
  v10 = (char *)v25 - v9;
  v11 = a1[3];
  v12 = a1[4];
  v13 = sub_66898(a1, v11);
  v14 = v6;
  v15 = v6;
  v16 = v13;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v14, v15, WitnessTable, v11, v12);
  if (!v4)
  {
    v17 = v8;
    v18 = type metadata accessor for MResourceDecoder(255);
    v20 = type metadata accessor for Array(0, v18, v19);
    v25[1] = swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>, v18);
    v21 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v20);
    v22 = v25[0];
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v26, v20, v23, v25[0], v20, v21);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v22);
    v16 = v26;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  return v16;
}

uint64_t sub_124610()
{
  return 0x656372756F736572;
}

uint64_t sub_12462C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1243E0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_124658@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static Shelf.ValidationError.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_124684(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_25FAA8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1246B8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_25FAA8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

_QWORD *sub_1246EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;

  result = sub_124470(a1, *(_QWORD *)(a2 + 16), a3, a4);
  if (!v5)
    *a5 = result;
  return result;
}

void sub_124718()
{
  static IntentModel<>.kind.getter();
  __break(1u);
}

uint64_t sub_124728@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t result;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[320];
  _QWORD *v55;

  v6 = sub_5C154(&qword_324DB8);
  inited = swift_initStackObject(v6, v54);
  *(_OWORD *)(inited + 16) = xmmword_258BA0;
  *(_QWORD *)(inited + 32) = 0x656372756F736572;
  v8 = inited + 32;
  *(_QWORD *)(inited + 40) = 0xE900000000000073;
  v9 = sub_125ABC(v2[2]);
  *(_QWORD *)(inited + 72) = sub_5C154(&qword_3209D0);
  v10 = sub_125DC4();
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 80) = v10;
  strcpy((char *)(inited + 88), "relationships");
  *(_WORD *)(inited + 102) = -4864;
  v11 = sub_5C154(&qword_324E58);
  *(_QWORD *)(inited + 128) = v11;
  v12 = sub_125E48();
  *(_QWORD *)(inited + 136) = v12;
  v13 = v2[3];
  v53 = inited;
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 16);
    v15 = _swiftEmptyArrayStorage;
    if (v14)
    {
      v45 = v12;
      v46 = v11;
      v47 = a1;
      v49 = a2;
      v51 = v8;
      v55 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v13);
      sub_20C95C(0, v14, 0);
      v16 = 0;
      v15 = v55;
      do
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v13 + 8 * v16 + 32));
        v19 = v18;
        v55 = v15;
        v21 = v15[2];
        v20 = v15[3];
        if (v21 >= v20 >> 1)
        {
          sub_20C95C(v20 > 1, v21 + 1, 1);
          v15 = v55;
        }
        ++v16;
        v15[2] = v21 + 1;
        v22 = &v15[2 * v21];
        v22[4] = v17;
        v22[5] = v19;
      }
      while (v14 != v16);
      swift_bridgeObjectRelease(v13);
      a2 = v49;
      v8 = v51;
      a1 = v47;
      v12 = v45;
      v11 = v46;
    }
    inited = v53;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)(inited + 104) = v15;
  *(_QWORD *)(inited + 144) = 0x7377656976;
  *(_QWORD *)(inited + 152) = 0xE500000000000000;
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 192) = v12;
  v23 = v2[4];
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 16);
    v25 = _swiftEmptyArrayStorage;
    if (v24)
    {
      v48 = a1;
      v50 = a2;
      v52 = v8;
      v55 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v23);
      sub_20C95C(0, v24, 0);
      v26 = 0;
      v25 = v55;
      do
      {
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v23 + 8 * v26 + 32));
        v29 = v28;
        v55 = v25;
        v31 = v25[2];
        v30 = v25[3];
        if (v31 >= v30 >> 1)
        {
          sub_20C95C(v30 > 1, v31 + 1, 1);
          v25 = v55;
        }
        ++v26;
        v25[2] = v31 + 1;
        v32 = &v25[2 * v31];
        v32[4] = v27;
        v32[5] = v29;
      }
      while (v24 != v26);
      swift_bridgeObjectRelease(v23);
      a2 = v50;
      v8 = v52;
      a1 = v48;
    }
    inited = v53;
  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)(inited + 160) = v25;
  *(_QWORD *)(inited + 200) = 0xD000000000000014;
  *(_QWORD *)(inited + 208) = 0x8000000000271680;
  v33 = v2[5];
  *(_QWORD *)(inited + 240) = sub_5C154(&qword_324E70);
  v34 = sub_125ECC();
  *(_QWORD *)(inited + 216) = v33;
  *(_QWORD *)(inited + 248) = v34;
  *(_QWORD *)(inited + 256) = 0x617461646174656DLL;
  *(_QWORD *)(inited + 264) = 0xE800000000000000;
  v35 = (char *)v2 + *(int *)(a1 + 44);
  v36 = type metadata accessor for MRequestMetadata(0);
  *(_QWORD *)(inited + 296) = v36;
  *(_QWORD *)(inited + 304) = sub_125F50();
  v37 = sub_668BC((_QWORD *)(inited + 272));
  (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v37, v35, v36);
  a2[3] = &type metadata for AnyCustomJSValueConvertible;
  a2[4] = &protocol witness table for AnyCustomJSValueConvertible;
  v38 = (_QWORD *)swift_allocObject(&unk_2EDAC0, 56, 7);
  *a2 = v38;
  sub_5C154(&qword_31EEE8);
  v55 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(5);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(inited);
  sub_124E94(v39, 1, &v55);
  if (v3)
  {
    result = swift_unexpectedError(v3, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
  }
  else
  {
    swift_setDeallocating(inited);
    v40 = *(_QWORD *)(inited + 16);
    v41 = sub_5C154(qword_324DC0);
    swift_arrayDestroy(v8, v40, v41);
    v42 = v55;
    v43 = sub_12526C((uint64_t)v55);
    swift_release(v42);
    v38[5] = sub_5C154(&qword_324DA8);
    result = sub_AAB1C(&qword_324DB0, &qword_324DA8, (uint64_t)&protocol witness table for AnyCustomJSValueConvertible, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v38[6] = result;
    v38[2] = v43;
  }
  return result;
}

uint64_t AnyCustomJSValueConvertible.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_5C154(&qword_31EEE8);
    v5 = (void *)static _DictionaryStorage.allocate(capacity:)(v4);
  }
  else
  {
    v5 = &_swiftEmptyDictionarySingleton;
  }
  v10 = (uint64_t)v5;
  swift_bridgeObjectRetain(a1);
  sub_124E94(v6, 1, &v10);
  swift_bridgeObjectRelease(a1);
  v7 = v10;
  v8 = sub_12526C(v10);
  swift_release(v7);
  a2[3] = sub_5C154(&qword_324DA8);
  result = sub_AAB1C(&qword_324DB0, &qword_324DA8, (uint64_t)&protocol witness table for AnyCustomJSValueConvertible, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  a2[4] = result;
  *a2 = v8;
  return result;
}

uint64_t sub_124C94@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_124728(a1, a2);
}

uint64_t MRequestMetadata.jsRepresentation(in:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[144];

  v3 = sub_5C154(&qword_324DB8);
  inited = swift_initStackObject(v3, v17);
  *(_OWORD *)(inited + 16) = xmmword_255F00;
  *(_QWORD *)(inited + 32) = 0x4449656C6966;
  v5 = inited + 32;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v6 = MRequestMetadata.fileID.getter();
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = &protocol witness table for String;
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 56) = v7;
  *(_QWORD *)(inited + 88) = 1701734764;
  *(_QWORD *)(inited + 96) = 0xE400000000000000;
  v8 = MRequestMetadata.line.getter();
  *(_QWORD *)(inited + 128) = &type metadata for Int32;
  *(_QWORD *)(inited + 136) = &protocol witness table for Int32;
  *(_DWORD *)(inited + 104) = v8;
  a1[3] = &type metadata for AnyCustomJSValueConvertible;
  a1[4] = &protocol witness table for AnyCustomJSValueConvertible;
  v9 = (_QWORD *)swift_allocObject(&unk_2EDAC0, 56, 7);
  *a1 = v9;
  sub_5C154(&qword_31EEE8);
  v16 = static _DictionaryStorage.allocate(capacity:)(2);
  swift_bridgeObjectRetain(inited);
  sub_124E94(v10, 1, &v16);
  if (v1)
  {
    result = swift_unexpectedError(v1, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
  }
  else
  {
    swift_setDeallocating(inited);
    v11 = *(_QWORD *)(inited + 16);
    v12 = sub_5C154(qword_324DC0);
    swift_arrayDestroy(v5, v11, v12);
    v13 = v16;
    v14 = sub_12526C(v16);
    swift_release(v13);
    v9[5] = sub_5C154(&qword_324DA8);
    result = sub_AAB1C(&qword_324DB0, &qword_324DA8, (uint64_t)&protocol witness table for AnyCustomJSValueConvertible, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v9[6] = result;
    v9[2] = v14;
  }
  return result;
}

uint64_t sub_124E7C@<X0>(_QWORD *a1@<X8>)
{
  return MRequestMetadata.jsRepresentation(in:)(a1);
}

void sub_124E94(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51[3];
  uint64_t v52;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease(a1);
    return;
  }
  swift_bridgeObjectRetain(a1);
  sub_5E1A4(a1 + 32, (uint64_t)&v49, qword_324DC0);
  v7 = v49;
  v8 = v50;
  v47 = v49;
  v48 = v50;
  sub_5DC98(v51, (uint64_t)v46);
  v9 = (_QWORD *)*a3;
  v11 = sub_582B4(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_5B4BC();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v7;
    v22[1] = v8;
    sub_5DC98(v46, v21[7] + 40 * v11);
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (!v26)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v27 = a1 + 88;
    while (1)
    {
      sub_5E1A4(v27, (uint64_t)&v49, qword_324DC0);
      v28 = v49;
      v29 = v50;
      v47 = v49;
      v48 = v50;
      sub_5DC98(v51, (uint64_t)v46);
      v30 = (_QWORD *)*a3;
      v31 = sub_582B4(v28, v29);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v24 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v24)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_13C15C(v35, 1);
        v31 = sub_582B4(v28, v29);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v29;
      sub_5DC98(v46, v38[7] + 40 * v31);
      v40 = v38[2];
      v24 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v24)
        goto LABEL_24;
      v38[2] = v41;
      v27 += 56;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_13C15C(v14, a2 & 1);
  v16 = sub_582B4(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v18);
    v52 = v18;
    swift_errorRetain(v18);
    v19 = sub_5C154((uint64_t *)&unk_321CD0);
    if ((swift_dynamicCast(v19, &v52, v19, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(a1);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v46);
      v20 = v48;
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(v52);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x80000000002716C0;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)(&v47, &v44, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v44, v45, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

_QWORD *sub_12526C(uint64_t a1)
{
  _QWORD *result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_5C154(&qword_31ED80);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v3 = 0;
  v37 = result;
  v38 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v34 = v5;
  v35 = (unint64_t)(v7 + 63) >> 6;
  v36 = result + 8;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v39 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    v16 = *(_QWORD *)(v38 + 56);
    v17 = (uint64_t *)(*(_QWORD *)(v38 + 48) + 16 * i);
    v18 = v17[1];
    v45 = *v17;
    sub_5E0D8(v16 + 40 * i, (uint64_t)v42);
    v19 = v43;
    v20 = v44;
    v21 = sub_66898(v42, v43);
    v22 = __chkstk_darwin(v21);
    v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v25 + 16))(v24, v22);
    v26 = swift_bridgeObjectRetain(v18);
    AnyCustomJSValueConvertible.init<A>(_:)(v40, v24, v19, v20, v26);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v42);
    result = v37;
    *(_QWORD *)((char *)v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v27 = (_QWORD *)(result[6] + 16 * i);
    *v27 = v45;
    v27[1] = v18;
    v28 = result[7] + 40 * i;
    v29 = v40[1];
    *(_OWORD *)v28 = v40[0];
    *(_OWORD *)(v28 + 16) = v29;
    *(_QWORD *)(v28 + 32) = v41;
    v30 = result[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    result[2] = v32;
    v3 = v39;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v12 >= v35)
      return result;
    v13 = *(_QWORD *)(v34 + 8 * v12);
    v14 = v3 + 1;
    if (!v13)
    {
      v14 = v3 + 2;
      if (v3 + 2 >= v35)
        return result;
      v13 = *(_QWORD *)(v34 + 8 * v14);
      if (!v13)
      {
        v14 = v3 + 3;
        if (v3 + 3 >= v35)
          return result;
        v13 = *(_QWORD *)(v34 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v9 = (v13 - 1) & v13;
    v39 = v14;
  }
  v15 = v3 + 4;
  if (v3 + 4 >= v35)
    return result;
  v13 = *(_QWORD *)(v34 + 8 * v15);
  if (v13)
  {
    v14 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v35)
      return result;
    v13 = *(_QWORD *)(v34 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_125504()
{
  uint64_t v0;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_125528(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_25F8B8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_25F8D0;
  v4[3] = &unk_25F8D0;
  v4[4] = &unk_25F8D0;
  result = type metadata accessor for MRequestMetadata(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 6, v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_1255B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[2];
    v7 = a2[3];
    a1[2] = v6;
    a1[3] = v7;
    v8 = a2[4];
    v9 = a2[5];
    v10 = *(int *)(a3 + 44);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = v8;
    a1[5] = v9;
    v13 = type metadata accessor for MRequestMetadata(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
  }
  return v3;
}

uint64_t sub_125694(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for MRequestMetadata(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1256FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  v9 = *(int *)(a3 + 44);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = v7;
  a1[5] = v8;
  v12 = type metadata accessor for MRequestMetadata(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  return a1;
}

_QWORD *sub_1257AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  v14 = a1[5];
  v15 = a2[5];
  a1[5] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  v16 = *(int *)(a3 + 44);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for MRequestMetadata(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t sub_125888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 44);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for MRequestMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1258FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v10);
  v11 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 44);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for MRequestMetadata(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1259A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1259B4);
}

uint64_t sub_1259B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MRequestMetadata(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_125A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_125A3C);
}

uint64_t sub_125A3C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for MRequestMetadata(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MCatalogRequestIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MCatalogRequestIntent);
}

uint64_t sub_125ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = sub_5C154(qword_324E88);
  v47 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - v6;
  sub_5C154(&qword_31EE50);
  result = static _DictionaryStorage.copy(original:)(a1);
  v9 = (_QWORD *)result;
  v10 = 0;
  v48 = a1;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v42 = v12;
  v43 = (unint64_t)(v14 + 63) >> 6;
  v45 = (_QWORD *)result;
  v46 = result + 64;
  v44 = v4;
  if ((v15 & v11) == 0)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v17 | (v10 << 6); ; i = __clz(__rbit64(v20)) + (v10 << 6))
  {
    v22 = *(_QWORD *)(v48 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v48 + 48) + 16 * i);
    v24 = v23[1];
    v49 = *v23;
    sub_5E1A4(v22 + *(_QWORD *)(v47 + 72) * i, (uint64_t)v7, qword_324E88);
    v25 = v7;
    sub_5E1A4((uint64_t)v7, (uint64_t)v4, qword_324E88);
    v27 = type metadata accessor for MResourceType(0, v26);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v4, 1, v27);
    swift_bridgeObjectRetain(v24);
    if (v29 == 1)
    {
      sub_125F98((uint64_t)v4);
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v31 = MResourceType.name.getter(v30);
      v33 = v4;
      v32 = v34;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
    }
    v7 = v25;
    v9 = v45;
    v35 = v49;
    result = sub_125F98((uint64_t)v7);
    *(_QWORD *)(v46 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v36 = (_QWORD *)(v9[6] + 16 * i);
    *v36 = v35;
    v36[1] = v24;
    v37 = (uint64_t *)(v9[7] + 16 * i);
    *v37 = v31;
    v37[1] = v32;
    v38 = v9[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v9[2] = v40;
    v4 = v44;
    if (v16)
      goto LABEL_4;
LABEL_5:
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_27;
    if (v19 >= v43)
      return (uint64_t)v9;
    v20 = *(_QWORD *)(v42 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v43)
        return (uint64_t)v9;
      v20 = *(_QWORD *)(v42 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v43)
          return (uint64_t)v9;
        v20 = *(_QWORD *)(v42 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_18:
    v16 = (v20 - 1) & v20;
  }
  v21 = v19 + 3;
  if (v21 >= v43)
    return (uint64_t)v9;
  v20 = *(_QWORD *)(v42 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v43)
      return (uint64_t)v9;
    v20 = *(_QWORD *)(v42 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_125DC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324E48;
  if (!qword_324E48)
  {
    v1 = sub_667D0(&qword_3209D0);
    sub_AAB1C(&qword_324E50, &qword_320958, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_324E48);
  }
  return result;
}

unint64_t sub_125E48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324E60;
  if (!qword_324E60)
  {
    v1 = sub_667D0(&qword_324E58);
    sub_AAB1C(&qword_324E68, &qword_31F730, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_324E60);
  }
  return result;
}

unint64_t sub_125ECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324E78;
  if (!qword_324E78)
  {
    v1 = sub_667D0(&qword_324E70);
    sub_AAB1C((unint64_t *)&qword_3206D0, &qword_3206C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_324E78);
  }
  return result;
}

unint64_t sub_125F50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324E80;
  if (!qword_324E80)
  {
    v1 = type metadata accessor for MRequestMetadata(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for MRequestMetadata, v1);
    atomic_store(result, (unint64_t *)&qword_324E80);
  }
  return result;
}

uint64_t sub_125F98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(qword_324E88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MCatalogRequestIntent.Result(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MCatalogRequestIntent.Result);
}

uint64_t type metadata accessor for MCatalogRequestIntent.Result.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5DD60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MCatalogRequestIntent.Result.CodingKeys);
}

uint64_t sub_125FF0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_126030 + 4 * byte_25F810[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_126050 + 4 * byte_25F815[v4]))();
}

_BYTE *sub_126030(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_126050(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_126058(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_126060(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_126068(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_126070(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_12607C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_25FA80, a1);
}

uint64_t sub_12608C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_25F9F0, a1);
}

uint64_t sub_12609C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_25FA18, a1);
}

id NavigationContext.__allocating_init(isInCard:isInModal:)(char a1, char a2)
{
  objc_class *v2;
  _BYTE *v5;
  objc_super v7;

  v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR___BSUINavigationContext_isInCard] = a1;
  v5[OBJC_IVAR___BSUINavigationContext_isInModal] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

id NavigationContext.init(isInCard:isInModal:)(char a1, char a2)
{
  _BYTE *v2;
  objc_super v4;

  v2[OBJC_IVAR___BSUINavigationContext_isInCard] = a1;
  v2[OBJC_IVAR___BSUINavigationContext_isInModal] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for NavigationContext();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for NavigationContext()
{
  return objc_opt_self(BSUINavigationContext);
}

void NavigationContext.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookStoreUI.NavigationContext", 29, "init()", 6, 0);
  __break(1u);
}

id NavigationContext.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NavigationContext();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t method lookup function for NavigationContext(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for NavigationContext);
}

uint64_t dispatch thunk of ContextActionDataModel.Asset.__allocating_init(libraryAsset:productProfile:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t destroy for SeriesListShelfUpdateIntent(_QWORD *a1)
{
  uint64_t result;

  result = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1);
  if (a1[9])
    return _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(a1 + 6);
  return result;
}

uint64_t initializeWithCopy for SeriesListShelfUpdateIntent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    *v5 = *v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  return a1;
}

uint64_t assignWithCopy for SeriesListShelfUpdateIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 72) = v4;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 48);
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = v6;
    return a1;
  }
  if (!v4)
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  sub_65938((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
  return a1;
}

__n128 initializeWithTake for SeriesListShelfUpdateIntent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SeriesListShelfUpdateIntent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (*(_QWORD *)(a1 + 72))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 48));
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesListShelfUpdateIntent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesListShelfUpdateIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesListShelfUpdateIntent()
{
  return &type metadata for SeriesListShelfUpdateIntent;
}

void sub_1264F8(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x800000000025FB10;
}

uint64_t sub_126518(uint64_t a1)
{
  return sub_127048(a1, qword_324FC8, 0xD000000000000025, 0x8000000000271D90);
}

uint64_t static Logger.assetActionImplementation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E560, (uint64_t)qword_324FC8, (uint64_t)sub_126518, a1);
}

uint64_t sub_126558(uint64_t a1)
{
  return sub_127048(a1, qword_324FE0, 0xD00000000000002DLL, 0x8000000000271D60);
}

uint64_t static Logger.booksUIComponentHostingController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E568, (uint64_t)qword_324FE0, (uint64_t)sub_126558, a1);
}

uint64_t sub_126598@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_5240C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_126600(uint64_t a1)
{
  return sub_127048(a1, qword_324FF8, 0xD000000000000022, 0x8000000000271D30);
}

uint64_t static Logger.feedViewController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E570, (uint64_t)qword_324FF8, (uint64_t)sub_126600, a1);
}

uint64_t sub_126640(uint64_t a1)
{
  return sub_127048(a1, qword_325010, 0xD000000000000034, 0x8000000000271CF0);
}

uint64_t static Logger.cardAuxiliaryNavigationBarViewController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E578, (uint64_t)qword_325010, (uint64_t)sub_126640, a1);
}

uint64_t sub_126680(uint64_t a1)
{
  return sub_127048(a1, qword_325028, 0xD00000000000001DLL, 0x8000000000271CD0);
}

uint64_t static Logger.contextActionItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E580, (uint64_t)qword_325028, (uint64_t)sub_126680, a1);
}

uint64_t sub_1266C0(uint64_t a1)
{
  return sub_127048(a1, qword_325040, 0xD000000000000028, 0x8000000000271E00);
}

uint64_t static Logger.convertRectFromGlobalHandler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E588, (uint64_t)qword_325040, (uint64_t)sub_1266C0, a1);
}

uint64_t sub_126700(uint64_t a1)
{
  return sub_127048(a1, qword_325058, 0xD000000000000023, 0x8000000000271CA0);
}

uint64_t static Logger.dependencyInjectionView.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E590, (uint64_t)qword_325058, (uint64_t)sub_126700, a1);
}

uint64_t sub_126740(uint64_t a1)
{
  return sub_127048(a1, qword_325070, 0xD00000000000001ALL, 0x8000000000271C80);
}

uint64_t static Logger.figaroProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E598, (uint64_t)qword_325070, (uint64_t)sub_126740, a1);
}

uint64_t sub_126780(uint64_t a1)
{
  return sub_127048(a1, qword_325088, 0xD000000000000017, 0x8000000000271E30);
}

uint64_t static Logger.objectGraph.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5A0, (uint64_t)qword_325088, (uint64_t)sub_126780, a1);
}

uint64_t sub_1267C0(uint64_t a1)
{
  return sub_127048(a1, qword_3250A0, 0xD000000000000019, 0x8000000000271C60);
}

uint64_t static Logger.imageRenderer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5A8, (uint64_t)qword_3250A0, (uint64_t)sub_1267C0, a1);
}

uint64_t sub_126800(uint64_t a1)
{
  return sub_127048(a1, qword_3250B8, 0xD000000000000021, 0x8000000000271C30);
}

uint64_t static Logger.imageResourceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5B0, (uint64_t)qword_3250B8, (uint64_t)sub_126800, a1);
}

uint64_t sub_126840(uint64_t a1)
{
  return sub_127048(a1, qword_3250D0, 0xD00000000000001CLL, 0x800000000026F6F0);
}

uint64_t static Logger.jetActionHandler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5B8, (uint64_t)qword_3250D0, (uint64_t)sub_126840, a1);
}

uint64_t sub_126880(uint64_t a1)
{
  return sub_127048(a1, qword_3250E8, 0xD00000000000001ELL, 0x8000000000271C10);
}

uint64_t static Logger.jsIntentDispatcher.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5C0, (uint64_t)qword_3250E8, (uint64_t)sub_126880, a1);
}

uint64_t sub_1268C0(uint64_t a1)
{
  return sub_127048(a1, qword_325100, 0xD000000000000023, 0x8000000000271BE0);
}

uint64_t static Logger.jsonInitFailureObserver.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5C8, (uint64_t)qword_325100, (uint64_t)sub_1268C0, a1);
}

uint64_t sub_126900(uint64_t a1)
{
  return sub_127048(a1, qword_325118, 0xD00000000000001DLL, 0x8000000000271DC0);
}

uint64_t static Logger.libraryAssetState.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5D0, (uint64_t)qword_325118, (uint64_t)sub_126900, a1);
}

uint64_t sub_126940(uint64_t a1)
{
  return sub_127048(a1, qword_325130, 0xD00000000000001ALL, 0x8000000000271BC0);
}

uint64_t static Logger.likeActionItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5D8, (uint64_t)qword_325130, (uint64_t)sub_126940, a1);
}

uint64_t sub_126980(uint64_t a1)
{
  return sub_127048(a1, qword_325148, 0xD00000000000002BLL, 0x8000000000271B90);
}

uint64_t static Logger.markAsFinishedHostingController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5E0, (uint64_t)qword_325148, (uint64_t)sub_126980, a1);
}

uint64_t sub_1269C0(uint64_t a1)
{
  return sub_127048(a1, qword_325160, 0xD000000000000010, 0x8000000000271DE0);
}

uint64_t static Logger.page.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5E8, (uint64_t)qword_325160, (uint64_t)sub_1269C0, a1);
}

uint64_t sub_126A00(uint64_t a1)
{
  return sub_127048(a1, qword_325178, 0xD000000000000021, 0x8000000000271B60);
}

uint64_t static Logger.pageControllerFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5F0, (uint64_t)qword_325178, (uint64_t)sub_126A00, a1);
}

uint64_t sub_126A40(uint64_t a1)
{
  return sub_127048(a1, qword_325190, 0xD000000000000014, 0x8000000000271B40);
}

uint64_t static Logger.pageView.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E5F8, (uint64_t)qword_325190, (uint64_t)sub_126A40, a1);
}

uint64_t sub_126A80(uint64_t a1)
{
  return sub_127048(a1, qword_345FC8, 0xD000000000000019, 0x8000000000271740);
}

uint64_t sub_126AA4(uint64_t a1)
{
  return sub_127048(a1, qword_3251A8, 0xD000000000000022, 0x8000000000271B10);
}

uint64_t static Logger.ratingSummaryComponent.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E608, (uint64_t)qword_3251A8, (uint64_t)sub_126AA4, a1);
}

uint64_t sub_126AE4(uint64_t a1)
{
  return sub_127048(a1, qword_3251C0, 0xD000000000000023, 0x8000000000271AE0);
}

uint64_t static Logger.readerTypeFramesFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E610, (uint64_t)qword_3251C0, (uint64_t)sub_126AE4, a1);
}

uint64_t sub_126B24(uint64_t a1)
{
  return sub_127048(a1, qword_3251D8, 0xD000000000000037, 0x8000000000271AA0);
}

uint64_t static Logger.refreshSeriesUberHeaderActionImplementation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E618, (uint64_t)qword_3251D8, (uint64_t)sub_126B24, a1);
}

uint64_t sub_126B64(uint64_t a1)
{
  return sub_127048(a1, qword_3251F0, 0xD000000000000021, 0x800000000026E9D0);
}

uint64_t static Logger.rootHostingController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E620, (uint64_t)qword_3251F0, (uint64_t)sub_126B64, a1);
}

uint64_t sub_126BA4(uint64_t a1)
{
  return sub_127048(a1, qword_325208, 0xD000000000000014, 0x8000000000271A80);
}

uint64_t static Logger.rootView.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E628, (uint64_t)qword_325208, (uint64_t)sub_126BA4, a1);
}

uint64_t sub_126BE4(uint64_t a1)
{
  return sub_127048(a1, qword_325220, 0xD00000000000001BLL, 0x8000000000271A60);
}

uint64_t static Logger.readingInsights.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E630, (uint64_t)qword_325220, (uint64_t)sub_126BE4, a1);
}

uint64_t sub_126C24(uint64_t a1)
{
  return sub_127048(a1, qword_325238, 0xD00000000000002ALL, 0x8000000000271A30);
}

uint64_t static Logger.seriesEntityCardComponentModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E638, (uint64_t)qword_325238, (uint64_t)sub_126C24, a1);
}

uint64_t sub_126C64(uint64_t a1)
{
  return sub_127048(a1, qword_325250, 0xD000000000000035, 0x80000000002719F0);
}

uint64_t static Logger.seriesListShelfUpdateIntentImplementation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E640, (uint64_t)qword_325250, (uint64_t)sub_126C64, a1);
}

uint64_t sub_126CA4(uint64_t a1)
{
  return sub_127048(a1, qword_325268, 0xD00000000000002ALL, 0x80000000002719C0);
}

uint64_t static Logger.seriesRoomHeaderComponentModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E648, (uint64_t)qword_325268, (uint64_t)sub_126CA4, a1);
}

uint64_t sub_126CE4(uint64_t a1)
{
  return sub_127048(a1, qword_325280, 0xD00000000000002ELL, 0x8000000000271990);
}

uint64_t static Logger.seriesRoomPageIntentImplementation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E650, (uint64_t)qword_325280, (uint64_t)sub_126CE4, a1);
}

uint64_t sub_126D24(uint64_t a1)
{
  return sub_127048(a1, qword_325298, 0xD000000000000036, 0x8000000000271950);
}

uint64_t static Logger.seriesSeeAllPaginationIntentImplementation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E658, (uint64_t)qword_325298, (uint64_t)sub_126D24, a1);
}

uint64_t sub_126D64(uint64_t a1)
{
  return sub_127048(a1, qword_3252B0, 0xD00000000000001BLL, 0x8000000000271930);
}

uint64_t static Logger.shareActionItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E660, (uint64_t)qword_3252B0, (uint64_t)sub_126D64, a1);
}

uint64_t sub_126DA4(uint64_t a1)
{
  return sub_127048(a1, qword_3252C8, 0xD000000000000025, 0x8000000000271900);
}

uint64_t static Logger.sheetHeaderComponentModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E668, (uint64_t)qword_3252C8, (uint64_t)sub_126DA4, a1);
}

uint64_t sub_126DE4(uint64_t a1)
{
  return sub_127048(a1, qword_3252E0, 0xD000000000000011, 0x80000000002718E0);
}

uint64_t static Logger.shelf.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E670, (uint64_t)qword_3252E0, (uint64_t)sub_126DE4, a1);
}

uint64_t sub_126E24(uint64_t a1)
{
  return sub_127048(a1, qword_3252F8, 0xD00000000000001DLL, 0x80000000002718C0);
}

uint64_t static Logger.snapshotImageItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E678, (uint64_t)qword_3252F8, (uint64_t)sub_126E24, a1);
}

uint64_t sub_126E64(uint64_t a1)
{
  return sub_127048(a1, qword_325310, 0xD000000000000024, 0x8000000000271890);
}

uint64_t static Logger.swipeActionsViewModifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E680, (uint64_t)qword_325310, (uint64_t)sub_126E64, a1);
}

uint64_t sub_126EA4(uint64_t a1)
{
  return sub_127048(a1, qword_325328, 0xD00000000000001ELL, 0x8000000000271870);
}

uint64_t static Logger.textComponentModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E688, (uint64_t)qword_325328, (uint64_t)sub_126EA4, a1);
}

uint64_t sub_126EE4(uint64_t a1)
{
  return sub_127048(a1, qword_325340, 0xD000000000000018, 0x8000000000271850);
}

uint64_t static Logger.tvAppService.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E690, (uint64_t)qword_325340, (uint64_t)sub_126EE4, a1);
}

uint64_t sub_126F24(uint64_t a1)
{
  return sub_127048(a1, qword_325358, 0xD00000000000002CLL, 0x8000000000271820);
}

uint64_t static Logger.yearInReviewEligibleFrameFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E698, (uint64_t)qword_325358, (uint64_t)sub_126F24, a1);
}

uint64_t sub_126F64(uint64_t a1)
{
  return sub_127048(a1, qword_325370, 0xD000000000000024, 0x80000000002717F0);
}

uint64_t static Logger.yearInReviewFrameFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E6A0, (uint64_t)qword_325370, (uint64_t)sub_126F64, a1);
}

uint64_t sub_126FA4(uint64_t a1)
{
  return sub_127048(a1, qword_325388, 0xD00000000000002ELL, 0x80000000002717C0);
}

uint64_t static Logger.yearInReviewHighlightFramesFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E6A8, (uint64_t)qword_325388, (uint64_t)sub_126FA4, a1);
}

uint64_t sub_126FE4(uint64_t a1)
{
  return sub_127048(a1, qword_3253A0, 0xD000000000000029, 0x8000000000271790);
}

uint64_t static Logger.yearInReviewHostingController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E6B0, (uint64_t)qword_3253A0, (uint64_t)sub_126FE4, a1);
}

uint64_t sub_127024(uint64_t a1)
{
  return sub_127048(a1, qword_3253B8, 0xD000000000000020, 0x8000000000271760);
}

uint64_t sub_127048(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_5DD20(v7, a2);
  sub_5240C(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000000026DEA0, a3, a4);
}

uint64_t static Logger.yearInReviewPageView.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_126598(&qword_31E6B8, (uint64_t)qword_3253B8, (uint64_t)sub_127024, a1);
}

uint64_t sub_1270D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v3[22] = a1;
  v6 = sub_5C154(&qword_31F590);
  v3[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetrics(0);
  v3[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_3200B8);
  v3[25] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[26] = v9;
  v3[27] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_31EF08);
  v3[28] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[29] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v12);
  v3[31] = swift_task_alloc(v12);
  v3[32] = swift_task_alloc(v12);
  v13 = (_QWORD *)swift_task_alloc(dword_3253EC);
  v3[33] = v13;
  *v13 = v3;
  v13[1] = sub_1271F0;
  return sub_127980(a2, a3);
}

uint64_t sub_1271F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 264);
  *(_QWORD *)(v3 + 272) = a1;
  *(_QWORD *)(v3 + 280) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1273DC;
  else
    v5 = sub_12725C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_12725C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t *, _QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 272);
  v16 = *(void (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v0 + 232) + 104);
  v16(*(unint64_t **)(v0 + 256), enum case for PageUpdateInstruction.stopPendingData<A, B>(_:), *(_QWORD *)(v0 + 224));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD *)(v0 + 272);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_57648(0, *(_QWORD *)(v3 + 16) + 1, 1, *(_QWORD *)(v0 + 272));
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v5 >= v4 >> 1)
    v3 = sub_57648(v4 > 1, v5 + 1, 1, v3);
  v7 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 192);
  v11 = *(unint64_t **)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v3 + 16) = v5 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v5, v6, v10);
  *v11 = v3;
  v16(v11, enum case for PageUpdateInstruction.compound<A, B>(_:), v10);
  (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1273DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(_QWORD *, _QWORD, uint64_t);
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;

  v1 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v0 + 168) = v1;
  swift_errorRetain(v1);
  v2 = sub_5C154((uint64_t *)&unk_321CD0);
  if (swift_dynamicCast(v0 + 160, v0 + 168, v2, &type metadata for SeriesSortOrderError, 6))
    v3 = *(_QWORD **)(v0 + 160);
  else
    v3 = _swiftEmptyArrayStorage;
  v45 = (_QWORD *)(v0 + 56);
  v47 = (_QWORD *)(v0 + 16);
  v4 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 + 232) + 104);
  v4(*(_QWORD **)(v0 + 248), enum case for PageUpdateInstruction.stopPendingData<A, B>(_:), *(_QWORD *)(v0 + 224));
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = (_QWORD *)sub_57648(0, v3[2] + 1, 1, (unint64_t)v3);
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
    v3 = (_QWORD *)sub_57648(v5 > 1, v6 + 1, 1, (unint64_t)v3);
  v8 = *(_QWORD **)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v40 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v3[2] = v6 + 1;
  v14.n128_f64[0] = (*(double (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v6, v7, v10);
  static ActionMetrics.notInstrumented.getter(v14);
  *v8 = v3;
  v4(v8, enum case for PageUpdateInstruction.compound<A, B>(_:), v10);
  v15 = type metadata accessor for ClickData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  v16 = type metadata accessor for Page(0);
  v17 = type metadata accessor for Shelf(0);
  v18 = sub_648E0((unint64_t *)&qword_320120, type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
  v19 = sub_648E0(&qword_320128, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  PageUpdateAction.init(actionMetrics:instruction:animated:clickData:)(v13, v8, 1, v12, v16, v17, v18, v19);
  swift_getErrorValue(v41, v0 + 152, v0 + 96);
  v20 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 80) = v11;
  *(_QWORD *)(v0 + 88) = sub_B02A0();
  v22 = sub_668BC(v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v42 + 16))(v22, v40, v11);
  *(_QWORD *)(v0 + 136) = v20;
  *(_QWORD *)(v0 + 144) = v21;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, v0 + 136, &opaque type descriptor for <<opaque return type of Error.withSubsequentAction(_:)>>, 0);
  *(_QWORD *)(v0 + 40) = OpaqueTypeMetadata2;
  *(_QWORD *)(v0 + 120) = v20;
  *(_QWORD *)(v0 + 128) = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 120, &opaque type descriptor for <<opaque return type of Error.withSubsequentAction(_:)>>, 1);
  *(_QWORD *)(v0 + 48) = OpaqueTypeConformance2;
  v25 = sub_668BC(v47);
  Error.withSubsequentAction(_:)(v45, v20, v21);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v45);
  v26 = *(_QWORD *)(v0 + 40);
  v27 = *(_QWORD *)(v0 + 48);
  v28 = sub_66898(v47, v26);
  v29 = *(_QWORD *)(v26 - 8);
  v30 = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v29 + 16))(v30, v28, v26);
  if (_getErrorEmbeddedNSError<A>(_:)(v25, OpaqueTypeMetadata2, *(_QWORD *)(OpaqueTypeConformance2 + 8)))
  {
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v30, v26);
  }
  else
  {
    swift_allocError(v26, *(_QWORD *)(v27 + 8), 0, 0);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v32, v30, v26);
  }
  v33 = *(_QWORD *)(v0 + 280);
  v35 = *(_QWORD *)(v0 + 248);
  v34 = *(_QWORD *)(v0 + 256);
  v36 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 200);
  v43 = *(_QWORD *)(v0 + 240);
  v44 = *(_QWORD *)(v0 + 192);
  v46 = *(_QWORD *)(v0 + 184);
  swift_willThrow(v31);
  swift_errorRelease(v33);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
  swift_task_dealloc(v30);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v47);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v43);
  swift_task_dealloc(v37);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1277F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_3253E4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_64780;
  return sub_1270D8(a1, a2, a3);
}

unint64_t sub_12785C()
{
  unint64_t result;

  result = qword_3253D0;
  if (!qword_3253D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesRoomType, &type metadata for SeriesRoomType);
    atomic_store(result, (unint64_t *)&qword_3253D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeriesRoomType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1278EC + 4 * byte_25FBC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_127920 + 4 * asc_25FBC0[v4]))();
}

uint64_t sub_127920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_127928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x127930);
  return result;
}

uint64_t sub_12793C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x127944);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_127948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_127950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesRoomType()
{
  return &type metadata for SeriesRoomType;
}

ValueMetadata *type metadata accessor for SeriesListShelfUpdateIntentImplementation()
{
  return &type metadata for SeriesListShelfUpdateIntentImplementation;
}

uint64_t sub_127980(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2[99] = a2;
  v2[98] = a1;
  v3 = type metadata accessor for SeriesData(0);
  v2[100] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[101] = v4;
  v2[102] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5C154(&qword_3239C8);
  v2[103] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_3239D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[104] = swift_task_alloc(v6);
  v2[105] = swift_task_alloc(v6);
  v7 = *(_QWORD *)(type metadata accessor for Shelf(0) - 8);
  v2[106] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[107] = swift_task_alloc(v8);
  v2[108] = swift_task_alloc(v8);
  v9 = type metadata accessor for SeriesPageStoreResourceIntent(0);
  v2[109] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[110] = swift_task_alloc(v10);
  v2[111] = swift_task_alloc(v10);
  v2[112] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_5C154(&qword_320A40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[113] = swift_task_alloc(v11);
  v2[114] = swift_task_alloc(v11);
  v2[115] = swift_task_alloc(v11);
  v12 = type metadata accessor for SeriesListSortOrder(0);
  v2[116] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[117] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[118] = swift_task_alloc(v14);
  v2[119] = swift_task_alloc(v14);
  v2[120] = swift_task_alloc(v14);
  v15 = type metadata accessor for SeriesType(0);
  v2[121] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[122] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[123] = swift_task_alloc(v17);
  v2[124] = swift_task_alloc(v17);
  v18 = sub_5C154(&qword_320A48);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[125] = v19;
  *v19 = v2;
  v19[1] = sub_127BB0;
  return BaseObjectGraph.inject<A>(_:)(v2 + 28, v18, v18);
}

uint64_t sub_127BB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 1000);
  v3 = *v1;
  *(_QWORD *)(v3 + 1008) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_12A134, 0, 0);
  v5 = sub_5C154(&qword_31FE78);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 1016) = v6;
  *v6 = v3;
  v6[1] = sub_127C70;
  return BaseObjectGraph.inject<A>(_:)(v3 + 104, v5, v5);
}

uint64_t sub_127C70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 1016);
  v3 = *v1;
  *(_QWORD *)(v3 + 1024) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_12A260, 0, 0);
  v5 = sub_5C154(&qword_320908);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 1032) = v6;
  *v6 = v3;
  v6[1] = sub_127D30;
  return BaseObjectGraph.inject<A>(_:)(v3 + 144, v5, v5);
}

uint64_t sub_127D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1032);
  *(_QWORD *)(*(_QWORD *)v1 + 1040) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_12A394;
  else
    v3 = sub_127D94;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_127D94()
{
  char *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char **v13;
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)*((_QWORD *)v0 + 98);
  v2 = v1[3];
  v3 = v1[4];
  sub_66898(v1, v2);
  v4 = ContentInfo.id.getter(v2, *(_QWORD *)(v3 + 8));
  v6 = v5;
  *((_QWORD *)v0 + 131) = v4;
  *((_QWORD *)v0 + 132) = v5;
  v7 = v1[3];
  v8 = v1[4];
  sub_66898(v1, v7);
  dispatch thunk of SeriesInfo.seriesType.getter(v7, v8, v9);
  v10 = *((_QWORD *)v0 + 31);
  v11 = *((_QWORD *)v0 + 32);
  sub_66898((_QWORD *)v0 + 28, v10);
  v12 = *(int **)(v11 + 56);
  v15 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (char **)swift_task_alloc(v12[1]);
  *((_QWORD *)v0 + 133) = v13;
  *v13 = v0;
  v13[1] = (char *)sub_127E9C;
  return v15(v0 + 1162, v4, v6, v10, v11);
}

uint64_t sub_127E9C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1064));
  return swift_task_switch(sub_127EF0, 0, 0);
}

uint64_t sub_127EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  *(_BYTE *)(v0 + 1163) = *(_BYTE *)(v0 + 1162);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  sub_66898((_QWORD *)(v0 + 224), v1);
  v3 = *(int **)(v2 + 64);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  *(_QWORD *)(v0 + 1072) = v4;
  *v4 = v0;
  v4[1] = sub_127F80;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v6)(*(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1056), v1, v2);
}

uint64_t sub_127F80()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1072));
  return swift_task_switch(sub_127FD4, 0, 0);
}

uint64_t sub_127FD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  int *v13;

  v1 = v0[117];
  v2 = v0[116];
  v3 = v0[115];
  sub_E2A2C(v0[98], (uint64_t)(v0 + 2));
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  v0[135] = v4;
  if (v4(v3, 1, v2) == 1)
  {
    v5 = v0[115];
    v6 = v0[5];
    v7 = v0[6];
    sub_66898(v0 + 2, v6);
    SeriesInfo.currentSortOrder.getter(v6, v7);
    sub_5E09C(v5, &qword_320A40);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[117] + 32))(v0[120], v0[115], v0[116]);
  }
  sub_E2A68(v0 + 2);
  v8 = v0[21];
  v9 = v0[22];
  sub_66898(v0 + 18, v8);
  v0[97] = 4;
  v10 = *(int **)(v9 + 8);
  v13 = (int *)((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v0[136] = v11;
  *v11 = v0;
  v11[1] = sub_128124;
  return ((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))v13)(v0 + 38, v0[131], v0[132], v0 + 97, v8, v9);
}

uint64_t sub_128124()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1088));
  return swift_task_switch(sub_128178, 0, 0);
}

uint64_t sub_128178()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;

  sub_5E1A4(v0 + 304, v0 + 424, &qword_320910);
  v63 = (_QWORD *)(v0 + 104);
  if (!*(_QWORD *)(v0 + 448))
  {
    v23 = &qword_320910;
    v24 = v0 + 424;
LABEL_7:
    sub_5E09C(v24, v23);
    v25 = 0;
    goto LABEL_8;
  }
  v1 = (_QWORD *)(v0 + 384);
  sub_5DC98((__int128 *)(v0 + 424), v0 + 384);
  static ContentInfoUtilities.seriesInfo(librarySeries:)(v0 + 384);
  if (!*(_QWORD *)(v0 + 368))
  {
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 384));
    v23 = &qword_320918;
    v24 = v0 + 344;
    goto LABEL_7;
  }
  v2 = (_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 1040);
  sub_5DC98((__int128 *)(v0 + 344), v0 + 464);
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  sub_66898((_QWORD *)(v0 + 464), v4);
  v6 = SeriesInfo.assets.getter(v4, v5);
  if (v3)
  {
    v7 = *(_QWORD *)(v0 + 992);
    v8 = *(_QWORD *)(v0 + 976);
    v9 = *(_QWORD *)(v0 + 968);
    v10 = *(_QWORD *)(v0 + 960);
    v11 = *(_QWORD *)(v0 + 936);
    v12 = *(_QWORD *)(v0 + 928);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1056));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 384));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_5E09C(v0 + 304, &qword_320910);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 464));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 144));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v63);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
    v13 = *(_QWORD *)(v0 + 984);
    v14 = *(_QWORD *)(v0 + 960);
    v15 = *(_QWORD *)(v0 + 952);
    v16 = *(_QWORD *)(v0 + 944);
    v17 = *(_QWORD *)(v0 + 920);
    v18 = *(_QWORD *)(v0 + 912);
    v19 = *(_QWORD *)(v0 + 904);
    v20 = *(_QWORD *)(v0 + 896);
    v21 = *(_QWORD *)(v0 + 888);
    v57 = *(_QWORD *)(v0 + 880);
    v58 = *(_QWORD *)(v0 + 864);
    v59 = *(_QWORD *)(v0 + 856);
    v60 = *(_QWORD *)(v0 + 840);
    v61 = *(_QWORD *)(v0 + 832);
    v62 = *(_QWORD *)(v0 + 824);
    v64 = *(_QWORD *)(v0 + 816);
    swift_task_dealloc(*(_QWORD *)(v0 + 992));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v39 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5);
  v41 = sub_5C154(&qword_31EF60);
  v42 = _arrayForceCast<A, B>(_:)(v39, AssociatedTypeWitness, v41);
  swift_bridgeObjectRelease(v39);
  sub_195B20(v42);
  v44 = v43;
  swift_bridgeObjectRelease(v42);
  v45 = SeriesListSortOrder.sortedAssets(for:)(v44);
  swift_bridgeObjectRelease(v44);
  if (*(_QWORD *)(v45 + 16) >= 0xAuLL)
    v46 = 10;
  else
    v46 = *(_QWORD *)(v45 + 16);
  if (v46)
  {
    sub_20C95C(0, v46, 0);
    v47 = 0;
    v25 = _swiftEmptyArrayStorage;
    v65 = 40 * v46;
    v48 = v45;
    do
    {
      sub_5E0D8(v45 + v47 + 32, v0 + 184);
      v50 = *(_QWORD *)(v0 + 208);
      v49 = *(_QWORD *)(v0 + 216);
      sub_66898((_QWORD *)(v0 + 184), v50);
      v51 = ContentInfo.id.getter(v50, *(_QWORD *)(v49 + 8));
      v53 = v52;
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 184));
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      {
        sub_20C95C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v25 = _swiftEmptyArrayStorage;
      }
      v55 = _swiftEmptyArrayStorage[2];
      v54 = _swiftEmptyArrayStorage[3];
      if (v55 >= v54 >> 1)
      {
        sub_20C95C(v54 > 1, v55 + 1, 1);
        v25 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v55 + 1;
      v56 = &_swiftEmptyArrayStorage[2 * v55];
      v56[4] = v51;
      v56[5] = v53;
      v47 += 40;
      v45 = v48;
    }
    while (v65 != v47);
    swift_bridgeObjectRelease(v48);
    v1 = (_QWORD *)(v0 + 384);
    v2 = (_QWORD *)(v0 + 464);
  }
  else
  {
    swift_bridgeObjectRelease(v45);
    v25 = _swiftEmptyArrayStorage;
  }
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v1);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v2);
LABEL_8:
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 976) + 16))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 968));
  if (*(_QWORD *)(v0 + 328))
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 936) + 104))(*(_QWORD *)(v0 + 912), enum case for SeriesListSortOrder.releaseDate(_:), *(_QWORD *)(v0 + 928));
  else
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 936) + 16))(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 928));
  v26 = *(_QWORD *)(v0 + 1056);
  v27 = *(_QWORD *)(v0 + 1048);
  v28 = *(_QWORD *)(v0 + 984);
  v29 = *(_QWORD *)(v0 + 976);
  v30 = *(_QWORD *)(v0 + 968);
  v31 = *(_QWORD *)(v0 + 912);
  v32 = *(char **)(v0 + 896);
  v33 = *(int **)(v0 + 872);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 936) + 56))(v31, 0, 1, *(_QWORD *)(v0 + 928));
  *(_QWORD *)v32 = v27;
  *((_QWORD *)v32 + 1) = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(&v32[v33[5]], v28, v30);
  *(_QWORD *)&v32[v33[6]] = v25;
  sub_66F14(v31, (uint64_t)&v32[v33[7]], &qword_320A40);
  v34 = *(_QWORD *)(v0 + 128);
  v35 = *(_QWORD *)(v0 + 136);
  sub_66898(v63, v34);
  v36 = async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1];
  swift_bridgeObjectRetain(v26);
  v37 = (_QWORD *)swift_task_alloc(v36);
  *(_QWORD *)(v0 + 1096) = v37;
  v38 = sub_648E0(&qword_3253F0, type metadata accessor for SeriesPageStoreResourceIntent, (uint64_t)&unk_266228);
  *v37 = v0;
  v37[1] = sub_12873C;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 744, *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 792), *(_QWORD *)(v0 + 872), v38, v34, v35);
}

uint64_t sub_12873C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1096);
  *(_QWORD *)(*(_QWORD *)v1 + 1104) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = sub_1287A8;
  }
  else
  {
    v3 = sub_1292E8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1287A8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(void);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  char *v104;
  unsigned __int8 v105;
  uint64_t v106[3];

  v1 = v0 + 304;
  v2 = (__int128 *)(v0 + 544);
  if (qword_31E640 != -1)
    swift_once(&qword_31E640, sub_126C64);
  v102 = (_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = type metadata accessor for Logger(0);
  sub_5240C(v5, (uint64_t)qword_325250);
  v6 = sub_5E11C(v3, v4, type metadata accessor for SeriesPageStoreResourceIntent);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 888);
  if (v9)
  {
    v11 = *(_QWORD *)(v0 + 880);
    v12 = *(_QWORD *)(v0 + 872);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v106[0] = v14;
    *(_DWORD *)v13 = 136315138;
    sub_5E11C(v10, v11, type metadata accessor for SeriesPageStoreResourceIntent);
    v15 = v12;
    v1 = v0 + 304;
    v16 = String.init<A>(describing:)(v11, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 768) = sub_57CD8(v16, v17, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    sub_6685C(v10, type metadata accessor for SeriesPageStoreResourceIntent);
    _os_log_impl(&dword_0, v7, v8, "Received nil as return value for intent: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    v19 = v14;
    v2 = (__int128 *)(v0 + 544);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_6685C(v10, type metadata accessor for SeriesPageStoreResourceIntent);
  }

  *(_QWORD *)(v0 + 1128) = 0;
  *(_OWORD *)(v0 + 1112) = 0u;
  static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:additionalStoreAssetsForEnrichment:)(v1, 0, 0);
  swift_bridgeObjectRelease(0);
  if (*(_QWORD *)(v0 + 568))
  {
    v20 = *(_QWORD *)(v0 + 784);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1056));
    sub_5DC98(v2, v0 + 504);
    sub_5DC98((__int128 *)(v0 + 504), v0 + 264);
    v21 = *(unsigned __int8 *)(v20 + 40);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(v0 + 840);
      v23 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
    }
    else
    {
      v39 = *(_QWORD *)(v0 + 784);
      sub_5E0D8(v0 + 264, v0 + 664);
      sub_5E1A4(v39 + 48, v0 + 584, &qword_320A50);
      v40 = *(_QWORD *)(v0 + 824);
      if (*(_QWORD *)(v0 + 608))
      {
        v41 = sub_5C154(&qword_325400);
        v42 = type metadata accessor for SeriesRoomPageIntent(0);
        v43 = swift_dynamicCast(v40, v0 + 584, v41, v42, 6);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v40, v43 ^ 1u, 1, v42);
      }
      else
      {
        sub_5E09C(v0 + 584, &qword_320A50);
        v50 = type metadata accessor for SeriesRoomPageIntent(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v40, 1, 1, v50);
      }
      v51 = *(_QWORD *)(v0 + 840);
      v52 = *(_QWORD *)(v0 + 832);
      v53 = *(void (**)(char *, char *, uint64_t))(v0 + 824);
      sub_DAAD0((_QWORD *)(v0 + 664), v53, v52);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 664));
      sub_5E09C((uint64_t)v53, &qword_3239C8);
      v54 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v52, 0, 1, v54);
      sub_66F14(v52, v51, &qword_3239D0);
    }
    v55 = *(unsigned __int8 *)(v0 + 1163);
    v56 = *(_QWORD *)(v0 + 960);
    v57 = *(_QWORD *)(v0 + 856);
    v58 = *(_QWORD *)(v0 + 840);
    if (v55 == 3)
      LOBYTE(v55) = 0;
    v105 = v55;
    v59 = *(_BYTE *)(v20 + 40);
    LOBYTE(v106[0]) = v59;
    sub_11C0A4((_QWORD *)(v0 + 264), &v105, v56, (unsigned __int8 *)v106, v58, v21, v57);
    v60 = *(_QWORD *)(v0 + 960);
    v61 = *(_QWORD *)(v0 + 816);
    if (*(_BYTE *)(v0 + 1163) == 3)
      v62 = 0;
    else
      v62 = *(_BYTE *)(v0 + 1163);
    sub_12A55C(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
    v105 = v59;
    v63 = *(char **)(v0 + 288);
    v64 = *(_QWORD *)(v0 + 296);
    sub_66898((_QWORD *)(v0 + 264), (uint64_t)v63);
    sub_2344B0(v63, v64, v61);
    LOBYTE(v106[0]) = v62;
    v65 = sub_1A738C((_QWORD *)(v0 + 264), (void (*)(char *))&v105, v61, (unsigned __int8 *)v106, v60);
    v100 = *(_QWORD *)(v0 + 992);
    v66 = v65;
    v87 = *(_QWORD *)(v0 + 968);
    v88 = *(_QWORD *)(v0 + 984);
    v85 = *(_QWORD *)(v0 + 960);
    v86 = *(_QWORD *)(v0 + 976);
    v89 = *(_QWORD *)(v0 + 952);
    v83 = *(_QWORD *)(v0 + 936);
    v84 = *(_QWORD *)(v0 + 928);
    v91 = *(_QWORD *)(v0 + 944);
    v92 = *(_QWORD *)(v0 + 920);
    v93 = *(_QWORD *)(v0 + 912);
    v94 = *(_QWORD *)(v0 + 904);
    v95 = *(_QWORD *)(v0 + 888);
    v96 = *(_QWORD *)(v0 + 880);
    v67 = *(_QWORD *)(v0 + 864);
    v68 = *(_QWORD *)(v0 + 848);
    v81 = *(_QWORD *)(v0 + 840);
    v82 = *(_QWORD *)(v0 + 896);
    v97 = *(_QWORD *)(v0 + 856);
    v98 = *(_QWORD *)(v0 + 832);
    v101 = *(_QWORD *)(v0 + 824);
    v99 = *(_QWORD *)(v0 + 816);
    (*(void (**)(void))(*(_QWORD *)(v0 + 808) + 8))();
    v69 = sub_5C154(&qword_31EF00);
    v70 = sub_5C154(&qword_31EF08);
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(_QWORD *)(v71 + 72);
    v73 = *(unsigned __int8 *)(v71 + 80);
    v74 = (v73 + 32) & ~v73;
    v90 = swift_allocObject(v69, v74 + 2 * v72, v73 | 7);
    *(_OWORD *)(v90 + 16) = xmmword_255F00;
    v75 = (uint64_t *)(v90 + v74);
    v76 = sub_5C154(&qword_31EF40);
    v77 = *(unsigned __int8 *)(v68 + 80);
    v78 = (v77 + 32) & ~v77;
    v79 = swift_allocObject(v76, v78 + *(_QWORD *)(v68 + 72), v77 | 7);
    *(_OWORD *)(v79 + 16) = xmmword_258070;
    sub_5E11C(v67, v79 + v78, type metadata accessor for Shelf);
    *v75 = v79;
    v80 = *(void (**)(void))(v71 + 104);
    ((void (*)(uint64_t *, _QWORD, uint64_t))v80)(v75, enum case for PageUpdateInstruction.replaceShelves<A, B>(_:), v70);
    *(uint64_t *)((char *)v75 + v72) = v66;
    v80();
    sub_12A4D4(0, 0, 0);
    sub_5E09C(v81, &qword_3239D0);
    sub_6685C(v67, type metadata accessor for Shelf);
    sub_6685C(v82, type metadata accessor for SeriesPageStoreResourceIntent);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v85, v84);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v100, v87);
    sub_5E09C(v0 + 304, &qword_320910);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 264));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 144));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 104));
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v102);
    swift_task_dealloc(v100);
    swift_task_dealloc(v88);
    swift_task_dealloc(v85);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v82);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v67);
    swift_task_dealloc(v97);
    swift_task_dealloc(v81);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v99);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v90);
  }
  else
  {
    v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1080);
    v24 = *(_QWORD *)(v0 + 1056);
    v25 = *(_QWORD *)(v0 + 1048);
    v26 = *(_QWORD *)(v0 + 960);
    v27 = *(_QWORD *)(v0 + 944);
    v28 = *(_QWORD *)(v0 + 936);
    v29 = *(_QWORD *)(v0 + 928);
    v30 = *(_QWORD *)(v0 + 904);
    sub_5E09C((uint64_t)v2, &qword_320918);
    v31 = *(_QWORD *)(v0 + 248);
    v32 = *(_QWORD *)(v0 + 256);
    sub_66898(v102, v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 16))(v25, v24, v31, v32);
    v33 = swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v28 + 16))(v27, v26, v29, v33);
    v34 = v103(v30, 1, v29);
    v35 = *(_QWORD *)(v0 + 952);
    v36 = *(_QWORD *)(v0 + 936);
    v37 = *(_QWORD *)(v0 + 928);
    v38 = *(_QWORD *)(v0 + 904);
    if (v34 == 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v36 + 32))(*(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 928));
      sub_5E09C(v38, &qword_320A40);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v36 + 8))(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 928));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v35, v38, v37);
    }
    v44 = *(unsigned __int8 *)(v0 + 1163);
    v45 = *(_QWORD *)(v0 + 792);
    v46 = *(_QWORD *)(v0 + 784);
    if (v44 == 3)
      LOBYTE(v44) = 0;
    *(_BYTE *)(v0 + 1161) = v44;
    sub_5E0D8(v46, v0 + 624);
    *(_BYTE *)(v0 + 1160) = *(_BYTE *)(v46 + 40);
    sub_5E1A4(v46 + 48, v0 + 704, &qword_320A50);
    v47 = unk_320A3C;
    v104 = (char *)&dword_320A38 + dword_320A38;
    swift_retain(v45);
    v48 = (_QWORD *)swift_task_alloc(v47);
    *(_QWORD *)(v0 + 1136) = v48;
    *v48 = v0;
    v48[1] = sub_129CE0;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v104)(*(_QWORD *)(v0 + 952), v0 + 1161, v0 + 624, v0 + 1160, v0 + 704, *(_QWORD *)(v0 + 792));
  }
}

uint64_t sub_1292E8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130[17];

  v124 = (_QWORD *)(v0 + 224);
  v1 = *(void **)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 752);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 1104);
  *(_QWORD *)(v0 + 1128) = v3;
  *(_QWORD *)(v0 + 1120) = v1;
  *(_QWORD *)(v0 + 1112) = v2;
  v5 = v1;
  swift_bridgeObjectRetain(v2);
  static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:additionalStoreAssetsForEnrichment:)(v0 + 304, v1, v2);
  swift_bridgeObjectRelease(v2);
  if (*(_QWORD *)(v0 + 568))
  {
    v116 = (_QWORD *)(v0 + 104);
    v118 = (_QWORD *)(v0 + 144);
    v121 = v0 + 304;
    v6 = (_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 784);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1056));
    sub_5DC98((__int128 *)(v0 + 544), v0 + 504);
    sub_5DC98((__int128 *)(v0 + 504), v0 + 264);
    v8 = *(unsigned __int8 *)(v7 + 40);
    v112 = v5;
    v114 = v1;
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v0 + 840);
      v10 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    }
    else
    {
      v107 = v7;
      v25 = *(_QWORD *)(v0 + 784);
      sub_5E0D8(v0 + 264, v0 + 664);
      sub_5E1A4(v25 + 48, v0 + 584, &qword_320A50);
      v26 = *(_QWORD *)(v0 + 824);
      if (*(_QWORD *)(v0 + 608))
      {
        v27 = sub_5C154(&qword_325400);
        v28 = type metadata accessor for SeriesRoomPageIntent(0);
        v29 = v27;
        v6 = (_QWORD *)(v0 + 264);
        v30 = swift_dynamicCast(v26, v0 + 584, v29, v28, 6);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v26, v30 ^ 1u, 1, v28);
      }
      else
      {
        sub_5E09C(v0 + 584, &qword_320A50);
        v37 = type metadata accessor for SeriesRoomPageIntent(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v26, 1, 1, v37);
      }
      v38 = *(_QWORD *)(v0 + 840);
      v39 = *(_QWORD *)(v0 + 832);
      v40 = *(void (**)(char *, char *, uint64_t))(v0 + 824);
      sub_DAAD0((_QWORD *)(v0 + 664), v40, v39);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 664));
      sub_5E09C((uint64_t)v40, &qword_3239C8);
      v41 = type metadata accessor for SeriesRoomListHeaderComponentModel(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v39, 0, 1, v41);
      sub_66F14(v39, v38, &qword_3239D0);
      v7 = v107;
    }
    v42 = *(unsigned __int8 *)(v0 + 1163);
    v43 = *(_QWORD *)(v0 + 960);
    v44 = *(_QWORD *)(v0 + 856);
    v45 = *(_QWORD *)(v0 + 840);
    if (v42 == 3)
      LOBYTE(v42) = 0;
    v127 = v42;
    v46 = *(_BYTE *)(v7 + 40);
    v128 = v46;
    sub_11C0A4(v6, &v127, v43, &v128, v45, v8, v44);
    if (v4)
    {
      v109 = v6;
      v105 = *(_QWORD *)(v0 + 992);
      v47 = *(_QWORD *)(v0 + 976);
      v48 = *(_QWORD *)(v0 + 968);
      v49 = *(_QWORD *)(v0 + 960);
      v50 = v3;
      v51 = v2;
      v52 = *(_QWORD *)(v0 + 936);
      v53 = *(_QWORD *)(v0 + 928);
      v54 = *(_QWORD *)(v0 + 896);
      v55 = *(_QWORD *)(v0 + 840);

      sub_12A4D4(v114, v51, v50);
      sub_5E09C(v55, &qword_3239D0);
      sub_6685C(v54, type metadata accessor for SeriesPageStoreResourceIntent);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v49, v53);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v105, v48);
      sub_5E09C(v121, &qword_320910);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v109);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v118);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v116);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v124);
      v63 = *(_QWORD *)(v0 + 984);
      v64 = *(_QWORD *)(v0 + 960);
      v65 = *(_QWORD *)(v0 + 952);
      v66 = *(_QWORD *)(v0 + 944);
      v67 = *(_QWORD *)(v0 + 920);
      v68 = *(_QWORD *)(v0 + 912);
      v69 = *(_QWORD *)(v0 + 904);
      v70 = *(_QWORD *)(v0 + 896);
      v71 = *(_QWORD *)(v0 + 888);
      v110 = *(_QWORD *)(v0 + 880);
      v113 = *(_QWORD *)(v0 + 864);
      v115 = *(_QWORD *)(v0 + 856);
      v117 = *(_QWORD *)(v0 + 840);
      v120 = *(_QWORD *)(v0 + 832);
      v123 = *(_QWORD *)(v0 + 824);
      v126 = *(_QWORD *)(v0 + 816);
      swift_task_dealloc(*(_QWORD *)(v0 + 992));
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v110);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v120);
      swift_task_dealloc(v123);
      swift_task_dealloc(v126);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v56 = *(_QWORD *)(v0 + 960);
      v57 = *(_QWORD *)(v0 + 816);
      if (*(_BYTE *)(v0 + 1163) == 3)
        v58 = 0;
      else
        v58 = *(_BYTE *)(v0 + 1163);
      sub_12A55C(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
      v129 = v46;
      v59 = *(char **)(v0 + 288);
      v60 = *(_QWORD *)(v0 + 296);
      sub_66898(v6, (uint64_t)v59);
      sub_2344B0(v59, v60, v57);
      v130[0] = v58;
      v61 = sub_1A738C(v6, (void (*)(char *))&v129, v57, v130, v56);
      v106 = *(_QWORD *)(v0 + 992);
      v62 = v6;
      v93 = *(_QWORD *)(v0 + 968);
      v94 = *(_QWORD *)(v0 + 984);
      v91 = *(_QWORD *)(v0 + 960);
      v92 = *(_QWORD *)(v0 + 976);
      v95 = *(_QWORD *)(v0 + 952);
      v96 = *(_QWORD *)(v0 + 944);
      v89 = *(_QWORD *)(v0 + 936);
      v90 = *(_QWORD *)(v0 + 928);
      v98 = *(_QWORD *)(v0 + 920);
      v99 = *(_QWORD *)(v0 + 912);
      v100 = *(_QWORD *)(v0 + 904);
      v101 = *(_QWORD *)(v0 + 888);
      v85 = *(_QWORD *)(v0 + 864);
      v102 = *(_QWORD *)(v0 + 880);
      v103 = *(_QWORD *)(v0 + 856);
      v72 = *(_QWORD *)(v0 + 848);
      v87 = *(_QWORD *)(v0 + 840);
      v88 = *(_QWORD *)(v0 + 896);
      v104 = *(_QWORD *)(v0 + 832);
      v111 = *(_QWORD *)(v0 + 824);
      v86 = v61;
      v108 = *(_QWORD *)(v0 + 816);
      (*(void (**)(void))(*(_QWORD *)(v0 + 808) + 8))();
      v73 = sub_5C154(&qword_31EF00);
      v74 = sub_5C154(&qword_31EF08);
      v75 = *(_QWORD *)(v74 - 8);
      v76 = *(_QWORD *)(v75 + 72);
      v77 = *(unsigned __int8 *)(v75 + 80);
      v78 = (v77 + 32) & ~v77;
      v97 = swift_allocObject(v73, v78 + 2 * v76, v77 | 7);
      *(_OWORD *)(v97 + 16) = xmmword_255F00;
      v79 = (uint64_t *)(v97 + v78);
      v80 = sub_5C154(&qword_31EF40);
      v81 = *(unsigned __int8 *)(v72 + 80);
      v82 = (v81 + 32) & ~v81;
      v83 = swift_allocObject(v80, v82 + *(_QWORD *)(v72 + 72), v81 | 7);
      *(_OWORD *)(v83 + 16) = xmmword_258070;
      sub_5E11C(v85, v83 + v82, type metadata accessor for Shelf);
      *v79 = v83;
      v84 = *(void (**)(void))(v75 + 104);
      ((void (*)(uint64_t *, _QWORD, uint64_t))v84)(v79, enum case for PageUpdateInstruction.replaceShelves<A, B>(_:), v74);
      *(uint64_t *)((char *)v79 + v76) = v86;
      v84();

      sub_12A4D4(v114, v2, v3);
      sub_5E09C(v87, &qword_3239D0);
      sub_6685C(v85, type metadata accessor for Shelf);
      sub_6685C(v88, type metadata accessor for SeriesPageStoreResourceIntent);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v91, v90);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v106, v93);
      sub_5E09C(v121, &qword_320910);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v62);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v118);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v116);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v124);
      swift_task_dealloc(v106);
      swift_task_dealloc(v94);
      swift_task_dealloc(v91);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      swift_task_dealloc(v88);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v85);
      swift_task_dealloc(v103);
      swift_task_dealloc(v87);
      swift_task_dealloc(v104);
      swift_task_dealloc(v111);
      swift_task_dealloc(v108);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v97);
    }
  }
  else
  {
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1080);
    v12 = *(_QWORD *)(v0 + 1056);
    v13 = *(_QWORD *)(v0 + 1048);
    v119 = *(_QWORD *)(v0 + 944);
    v122 = *(_QWORD *)(v0 + 960);
    v14 = *(_QWORD *)(v0 + 936);
    v15 = *(_QWORD *)(v0 + 928);
    v16 = *(_QWORD *)(v0 + 904);
    sub_5E09C(v0 + 544, &qword_320918);
    v17 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 256);
    sub_66898(v124, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 16))(v13, v12, v17, v18);
    v19 = swift_bridgeObjectRelease(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v14 + 16))(v119, v122, v15, v19);
    v20 = v11(v16, 1, v15);
    v21 = *(_QWORD *)(v0 + 952);
    v22 = *(_QWORD *)(v0 + 936);
    v23 = *(_QWORD *)(v0 + 928);
    v24 = *(_QWORD *)(v0 + 904);
    if (v20 == 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v22 + 32))(*(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 928));
      sub_5E09C(v24, &qword_320A40);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 928));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v24, v23);
    }
    v31 = *(unsigned __int8 *)(v0 + 1163);
    v32 = *(_QWORD *)(v0 + 792);
    v33 = *(_QWORD *)(v0 + 784);
    if (v31 == 3)
      LOBYTE(v31) = 0;
    *(_BYTE *)(v0 + 1161) = v31;
    sub_5E0D8(v33, v0 + 624);
    *(_BYTE *)(v0 + 1160) = *(_BYTE *)(v33 + 40);
    sub_5E1A4(v33 + 48, v0 + 704, &qword_320A50);
    v34 = unk_320A3C;
    v125 = (char *)&dword_320A38 + dword_320A38;
    swift_retain(v32);
    v35 = (_QWORD *)swift_task_alloc(v34);
    *(_QWORD *)(v0 + 1136) = v35;
    *v35 = v0;
    v35[1] = sub_129CE0;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v125)(*(_QWORD *)(v0 + 952), v0 + 1161, v0 + 624, v0 + 1160, v0 + 704, *(_QWORD *)(v0 + 792));
  }
}

uint64_t sub_129CE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1136);
  *(_QWORD *)(*v2 + 1144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_129F58;
  }
  else
  {
    *(_QWORD *)(v4 + 1152) = a1;
    v6 = sub_129D54;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_129D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v0 + 1128);
  v3 = *(void **)(v0 + 1120);
  v4 = *(_QWORD *)(v0 + 1112);
  v25 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 976);
  v23 = *(_QWORD *)(v0 + 968);
  v6 = *(_QWORD *)(v0 + 960);
  v7 = *(_QWORD *)(v0 + 936);
  v8 = *(_QWORD *)(v0 + 928);
  v9 = *(_QWORD *)(v0 + 896);
  v10 = sub_12A518();
  v31 = swift_allocError(&type metadata for SeriesSortOrderError, v10, 0, 0);
  *v11 = v1;
  swift_willThrow(v31);

  sub_12A4D4(v3, v4, v2);
  sub_6685C(v9, type metadata accessor for SeriesPageStoreResourceIntent);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v25, v23);
  sub_5E09C(v0 + 304, &qword_320910);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 144));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 104));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
  v12 = *(_QWORD *)(v0 + 984);
  v13 = *(_QWORD *)(v0 + 960);
  v14 = *(_QWORD *)(v0 + 952);
  v15 = *(_QWORD *)(v0 + 944);
  v16 = *(_QWORD *)(v0 + 920);
  v17 = *(_QWORD *)(v0 + 912);
  v18 = *(_QWORD *)(v0 + 904);
  v19 = *(_QWORD *)(v0 + 896);
  v20 = *(_QWORD *)(v0 + 888);
  v22 = *(_QWORD *)(v0 + 880);
  v24 = *(_QWORD *)(v0 + 864);
  v26 = *(_QWORD *)(v0 + 856);
  v27 = *(_QWORD *)(v0 + 840);
  v28 = *(_QWORD *)(v0 + 832);
  v29 = *(_QWORD *)(v0 + 824);
  v30 = *(_QWORD *)(v0 + 816);
  swift_task_dealloc(*(_QWORD *)(v0 + 992));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_129F58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 1128);
  v2 = *(void **)(v0 + 1120);
  v3 = *(_QWORD *)(v0 + 1112);
  v23 = *(_QWORD *)(v0 + 992);
  v4 = *(_QWORD *)(v0 + 976);
  v5 = *(_QWORD *)(v0 + 968);
  v6 = *(_QWORD *)(v0 + 960);
  v7 = *(_QWORD *)(v0 + 936);
  v8 = *(_QWORD *)(v0 + 928);
  v9 = *(_QWORD *)(v0 + 896);

  sub_12A4D4(v2, v3, v1);
  sub_6685C(v9, type metadata accessor for SeriesPageStoreResourceIntent);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v23, v5);
  sub_5E09C(v0 + 304, &qword_320910);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 144));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 104));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
  v10 = *(_QWORD *)(v0 + 984);
  v11 = *(_QWORD *)(v0 + 960);
  v12 = *(_QWORD *)(v0 + 952);
  v13 = *(_QWORD *)(v0 + 944);
  v14 = *(_QWORD *)(v0 + 920);
  v15 = *(_QWORD *)(v0 + 912);
  v16 = *(_QWORD *)(v0 + 904);
  v17 = *(_QWORD *)(v0 + 896);
  v18 = *(_QWORD *)(v0 + 888);
  v20 = *(_QWORD *)(v0 + 880);
  v21 = *(_QWORD *)(v0 + 864);
  v22 = *(_QWORD *)(v0 + 856);
  v24 = *(_QWORD *)(v0 + 840);
  v25 = *(_QWORD *)(v0 + 832);
  v26 = *(_QWORD *)(v0 + 824);
  v27 = *(_QWORD *)(v0 + 816);
  swift_task_dealloc(*(_QWORD *)(v0 + 992));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_12A134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 984);
  v2 = *(_QWORD *)(v0 + 960);
  v3 = *(_QWORD *)(v0 + 952);
  v4 = *(_QWORD *)(v0 + 944);
  v5 = *(_QWORD *)(v0 + 920);
  v6 = *(_QWORD *)(v0 + 912);
  v7 = *(_QWORD *)(v0 + 904);
  v8 = *(_QWORD *)(v0 + 896);
  v9 = *(_QWORD *)(v0 + 888);
  v11 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 840);
  v15 = *(_QWORD *)(v0 + 832);
  v16 = *(_QWORD *)(v0 + 824);
  v17 = *(_QWORD *)(v0 + 816);
  swift_task_dealloc(*(_QWORD *)(v0 + 992));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_12A260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
  v1 = *(_QWORD *)(v0 + 984);
  v2 = *(_QWORD *)(v0 + 960);
  v3 = *(_QWORD *)(v0 + 952);
  v4 = *(_QWORD *)(v0 + 944);
  v5 = *(_QWORD *)(v0 + 920);
  v6 = *(_QWORD *)(v0 + 912);
  v7 = *(_QWORD *)(v0 + 904);
  v8 = *(_QWORD *)(v0 + 896);
  v9 = *(_QWORD *)(v0 + 888);
  v11 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 840);
  v15 = *(_QWORD *)(v0 + 832);
  v16 = *(_QWORD *)(v0 + 824);
  v17 = *(_QWORD *)(v0 + 816);
  swift_task_dealloc(*(_QWORD *)(v0 + 992));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_12A394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 104));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 224));
  v1 = *(_QWORD *)(v0 + 984);
  v2 = *(_QWORD *)(v0 + 960);
  v3 = *(_QWORD *)(v0 + 952);
  v4 = *(_QWORD *)(v0 + 944);
  v5 = *(_QWORD *)(v0 + 920);
  v6 = *(_QWORD *)(v0 + 912);
  v7 = *(_QWORD *)(v0 + 904);
  v8 = *(_QWORD *)(v0 + 896);
  v9 = *(_QWORD *)(v0 + 888);
  v11 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 840);
  v15 = *(_QWORD *)(v0 + 832);
  v16 = *(_QWORD *)(v0 + 824);
  v17 = *(_QWORD *)(v0 + 816);
  swift_task_dealloc(*(_QWORD *)(v0 + 992));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_12A4D4(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);

  }
}

unint64_t sub_12A518()
{
  unint64_t result;

  result = qword_3253F8;
  if (!qword_3253F8)
  {
    result = swift_getWitnessTable(&unk_258E78, &type metadata for SeriesSortOrderError);
    atomic_store(result, (unint64_t *)&qword_3253F8);
  }
  return result;
}

uint64_t sub_12A55C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Shelf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_12A5A0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  __n128 v15;
  char v16;
  unint64_t v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    sub_5E09C(a1, &qword_31F128);
    v14 = sub_583A4(a2);
    if ((v16 & 1) != 0)
    {
      v17 = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v19 = *v3;
      v25 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_5AB18();
        v19 = v25;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v19 + 56) + *(_QWORD *)(v10 + 72) * v17, v9);
      sub_1DCB50(v17, v19);
      v20 = *v3;
      *v3 = v19;
      v15 = swift_bridgeObjectRelease(v20);
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, v21, 1, v9, v15);
    sub_5E09C((uint64_t)v8, &qword_31F128);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    v22 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v25 = *v3;
    *v3 = 0x8000000000000000;
    sub_59C9C((uint64_t)v13, a2, v22);
    v23 = *v3;
    *v3 = v25;
    swift_bridgeObjectRelease(v23);
  }
}

void sub_12A778(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15[2];
  uint64_t v16;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_5DC98((__int128 *)a1, (uint64_t)v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_59EE0(v15, a2, isUniquelyReferenced_nonNull_native);
    v6 = *v2;
    *v2 = v13;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    sub_5E09C(a1, (uint64_t *)&unk_326210);
    v7 = sub_583A4(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native(*v2);
      v11 = *v2;
      v14 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_5B2FC();
        v11 = v14;
      }
      sub_5DC98((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v15);
      sub_1DCF20(v9, v11);
      v12 = *v3;
      *v3 = v11;
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v16 = 0;
      memset(v15, 0, sizeof(v15));
    }
    sub_5E09C((uint64_t)v15, (uint64_t *)&unk_326210);
  }
}

void sub_12A890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_5D000((_OWORD *)a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_59FFC(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_5E09C(a1, &qword_31F8B0);
    sub_1DC92C(a2, a3, v10);
    swift_bridgeObjectRelease(a3);
    sub_5E09C((uint64_t)v10, &qword_31F8B0);
  }
}

void sub_12A964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_5DC98((__int128 *)a1, (uint64_t)v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_5A144(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_5E09C(a1, &qword_320940);
    sub_1DC940(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3);
    sub_5E09C((uint64_t)v10, &qword_320940);
  }
}

uint64_t sub_12AA38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t View.actionDispatcherRespectingFigaroRestriction<A>(with:implementations:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v14;

  BaseObjectGraph.inject<A>(_:)(&v14, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if ((v14 & 1) != 0)
  {
    swift_retain(a1);
  }
  else
  {
    v12 = type metadata accessor for MetricsPipeline(0);
    a1 = dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(v12);
  }
  View.actionDispatcher<A>(with:implementations:)(a1, a2, a3, a4, a5, a6);
  return swift_release(a1);
}

uint64_t sub_12AB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 16))((char *)&v15 - v12, a1, a2, v11);
  swift_storeEnumTagMultiPayload(v13, v10, 0);
  return _ConditionalContent<>.init(storage:)(v13, a2, a3, a4, a5);
}

uint64_t sub_12ABE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(a3 - 8) + 16))((char *)&v15 - v12, a1, a3, v11);
  swift_storeEnumTagMultiPayload(v13, v10, 1);
  return _ConditionalContent<>.init(storage:)(v13, a2, a3, a4, a5);
}

uint64_t ModifiedContent<>.pageRenderMetricsRespectingFigaroRestriction<A>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t WitnessTable;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v67 = a6;
  v61 = *(char **)(a2 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - v13;
  v15 = type metadata accessor for MetricsPipeline(0);
  v60 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(_QWORD *)(a2 + 16);
  v68 = *(_QWORD *)(a2 + 24);
  v69 = v18;
  v80 = v18;
  v81 = v68;
  v66 = a3;
  v82 = a3;
  v83 = a4;
  v70 = a4;
  v71 = a5;
  v84 = a5;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v80, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 0);
  v20 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v58 - v24;
  v26 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, a2);
  v64 = *(_QWORD *)(v26 - 8);
  v65 = v26;
  __chkstk_darwin(v26);
  v63 = (char *)&v58 - v27;
  v28 = BaseObjectGraph.inject<A>(_:)(&v80, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if (v80 == 1)
  {
    v29 = static Metrics.defaultPerfTopic.getter(v28);
    v31 = v30;
    BaseObjectGraph.inject<A>(_:)(v17, v15, v15);
    v32 = v29;
    v33 = v66;
    v59 = v20;
    v34 = v70;
    v61 = v25;
    v35 = v71;
    ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)(v32, v31, v17, a2, v66, v70, v71);
    v36 = swift_bridgeObjectRelease(v31);
    v37 = v17;
    v38 = v33;
    (*(void (**)(_QWORD *, uint64_t, __n128))(v60 + 8))(v37, v15, v36);
    v80 = v69;
    v81 = v68;
    v82 = v33;
    v83 = v34;
    v84 = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
    v40 = v59;
    v41 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
    v42 = v61;
    v41(v61, v22, OpaqueTypeMetadata2);
    v43 = *(void (**)(char *, uint64_t))(v40 + 8);
    v43(v22, OpaqueTypeMetadata2);
    v41(v22, v42, OpaqueTypeMetadata2);
    v44 = *(_QWORD *)(v34 + 8);
    v72 = v38;
    v73 = v44;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, a2);
    v46 = v63;
    sub_12AB1C((uint64_t)v22, OpaqueTypeMetadata2, a2, OpaqueTypeConformance2, WitnessTable);
    v43(v22, OpaqueTypeMetadata2);
    v43(v42, OpaqueTypeMetadata2);
  }
  else
  {
    v47 = v70;
    v44 = *(_QWORD *)(v70 + 8);
    v38 = v66;
    v78 = v66;
    v79 = v44;
    v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, a2);
    v49 = v61;
    v50 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v61 + 2);
    v50(v14, v62, a2);
    v50(v11, (uint64_t)v14, a2);
    v80 = v69;
    v81 = v68;
    v82 = v38;
    v83 = v47;
    v84 = v71;
    v51 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
    v46 = v63;
    sub_12ABE0((uint64_t)v11, OpaqueTypeMetadata2, a2, v51, v48);
    v52 = (void (*)(char *, uint64_t))*((_QWORD *)v49 + 1);
    v52(v11, a2);
    v52(v14, a2);
  }
  v80 = v69;
  v81 = v68;
  v82 = v38;
  v83 = v70;
  v84 = v71;
  v53 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
  v76 = v38;
  v77 = v44;
  v54 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, a2);
  v74 = v53;
  v75 = v54;
  v55 = v65;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v65);
  v56 = v64;
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v67, v46, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v46, v55);
}

uint64_t View.actionDispatcherRespectingFigaroRestriction<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;

  BaseObjectGraph.inject<A>(_:)(&v10, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if ((v10 & 1) != 0)
  {
    swift_retain(a1);
  }
  else
  {
    v8 = type metadata accessor for MetricsPipeline(0);
    a1 = dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(v8);
  }
  View.actionDispatcher<A>(from:)(a1, a2, a3, a4);
  return swift_release(a1);
}

uint64_t View.pageViewEvent(_:pageData:additionalEventData:pageMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a6;
  v30 = a7;
  v31 = a5;
  v27 = a4;
  v28 = a1;
  v29 = a3;
  v8 = type metadata accessor for PageMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PageData(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for PageViewEventViewModifier(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v26 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a2, v12, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v27, v8);
  *(_QWORD *)v18 = swift_getKeyPath(&unk_25FCE0);
  v18[8] = 0;
  v23 = v28;
  *((_QWORD *)v18 + 2) = v28;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v18[v16[6]], v15, v12);
  v24 = v29;
  *(_QWORD *)&v18[v16[7]] = v29;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v16[8]], v11, v8);
  sub_12CAEC((uint64_t)v18, (uint64_t)v22);
  swift_retain(v23);
  swift_bridgeObjectRetain(v24);
  View.modifier<A>(_:)(v22, v31, v16, v32);
  return sub_12CB30((uint64_t)v22);
}

uint64_t type metadata accessor for PageViewEventViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_325528;
  if (!qword_325528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageViewEventViewModifier);
  return result;
}

uint64_t IntentView<>.pageRenderMetricsRespectingFigaroRestriction<A>(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t WitnessTable;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, _QWORD *);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD *);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v60 = a4;
  v6 = *(a2 - 1);
  __chkstk_darwin(a1);
  v54 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - v9;
  v11 = type metadata accessor for MetricsPipeline(0);
  v53 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a2[2];
  v15 = a2[4];
  v16 = a2[5];
  v17 = a2[6];
  v18 = a2[7];
  v19 = a2[8];
  v20 = a2[9];
  v67 = a2[3];
  v68 = v14;
  v71 = v14;
  v72 = v67;
  v65 = v16;
  v66 = v15;
  v73 = v15;
  v74 = v16;
  v63 = v18;
  v64 = v17;
  v75 = v17;
  v76 = v18;
  v61 = v20;
  v62 = v19;
  v77 = v19;
  v78 = v20;
  v59 = a3;
  v79 = a3;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v71, &opaque type descriptor for <<opaque return type of IntentView<>.pageRenderMetrics(onTopic:pipeline:)>>, 0);
  v22 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v53 - v26;
  v58 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, a2);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v56 = (char *)&v53 - v28;
  v29 = BaseObjectGraph.inject<A>(_:)(&v71, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  if (v71 == 1)
  {
    v30 = static Metrics.defaultPerfTopic.getter(v29);
    v32 = v31;
    BaseObjectGraph.inject<A>(_:)(v13, v11, v11);
    v33 = v30;
    v34 = v59;
    IntentView<>.pageRenderMetrics(onTopic:pipeline:)(v33, v32, v13, a2, v59);
    v35 = swift_bridgeObjectRelease(v32);
    v36 = v13;
    v37 = v34;
    (*(void (**)(_QWORD *, uint64_t, __n128))(v53 + 8))(v36, v11, v35);
    v71 = v68;
    v72 = v67;
    v73 = v66;
    v74 = v65;
    v75 = v64;
    v76 = v63;
    v77 = v62;
    v78 = v61;
    v79 = v34;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of IntentView<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
    v39 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v39(v27, v24, OpaqueTypeMetadata2);
    v40 = *(void (**)(char *, uint64_t))(v22 + 8);
    v40(v24, OpaqueTypeMetadata2);
    v39(v24, v27, OpaqueTypeMetadata2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for IntentView<A, B, C, D>, a2);
    v42 = v56;
    sub_12AB1C((uint64_t)v24, OpaqueTypeMetadata2, (uint64_t)a2, OpaqueTypeConformance2, WitnessTable);
    v40(v24, OpaqueTypeMetadata2);
    v40(v27, OpaqueTypeMetadata2);
  }
  else
  {
    v43 = swift_getWitnessTable(&protocol conformance descriptor for IntentView<A, B, C, D>, a2);
    v44 = *(void (**)(char *, uint64_t, _QWORD *))(v6 + 16);
    v44(v10, v55, a2);
    v45 = (uint64_t)v54;
    v44(v54, (uint64_t)v10, a2);
    v71 = v68;
    v72 = v67;
    v73 = v66;
    v74 = v65;
    v75 = v64;
    v76 = v63;
    v77 = v62;
    v78 = v61;
    v37 = v59;
    v79 = v59;
    v46 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of IntentView<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
    v42 = v56;
    sub_12ABE0(v45, OpaqueTypeMetadata2, (uint64_t)a2, v46, v43);
    v47 = *(void (**)(uint64_t, _QWORD *))(v6 + 8);
    v47(v45, a2);
    v47((uint64_t)v10, a2);
  }
  v71 = v68;
  v72 = v67;
  v73 = v66;
  v74 = v65;
  v75 = v64;
  v76 = v63;
  v77 = v62;
  v78 = v61;
  v79 = v37;
  v48 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of IntentView<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
  v49 = swift_getWitnessTable(&protocol conformance descriptor for IntentView<A, B, C, D>, a2);
  v69 = v48;
  v70 = v49;
  v50 = v58;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v58);
  v51 = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v60, v42, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v42, v50);
}

uint64_t sub_12B884@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(id *, _QWORD, __n128);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD v22[4];
  id v23[4];

  v2 = v1;
  v4 = type metadata accessor for PageMetrics(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_31FE20);
  BaseObjectGraph.inject<A>(_:)(v23, v8, v8);
  v9 = v23[0];
  v10 = objc_msgSend(v23[0], "figaroPageContext");
  swift_unknownObjectRelease(v9);
  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14 = type metadata accessor for PageViewEventViewModifier(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(v14 + 32), v4);
    v15 = (void (*)(id *, _QWORD, __n128))PageMetrics.pageFields.modify(v23);
    if (*v16)
    {
      v17 = static Metrics.Keys.pageContext.getter();
      v22[3] = &type metadata for String;
      v22[0] = v11;
      v22[1] = v13;
      sub_12A890((uint64_t)v22, v17, v18);
    }
    else
    {
      v19 = swift_bridgeObjectRelease(v13);
    }
    v15(v23, 0, v19);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
  }
  else
  {
    v20 = v2 + *(int *)(type metadata accessor for PageViewEventViewModifier(0) + 32);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v20, v4);
  }
}

uint64_t sub_12BA08@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t KeyPath;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t OpaqueTypeConformance2;
  char *v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, _QWORD, uint64_t, uint64_t);
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v99 = a1;
  v116 = a2;
  v121 = type metadata accessor for PageViewEventViewModifier(0);
  v113 = *(_QWORD *)(v121 - 8);
  v3 = __chkstk_darwin(v121);
  v114 = v4;
  v115 = (uint64_t)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for DataStackID(0, v3);
  v110 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v111 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v109 = (char *)&v85 - v7;
  v8 = sub_5C154(&qword_325570);
  __chkstk_darwin(v8);
  v100 = (uint64_t)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v85 - v11;
  v13 = sub_5C154(&qword_325578);
  __chkstk_darwin(v13);
  v93 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for MetricsPipeline(0);
  v92 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v16 = (uint64_t *)((char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_5C154(&qword_3202B0);
  __chkstk_darwin(v17);
  v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_5C154(&qword_325580);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v90 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_5C154(&qword_325588);
  __chkstk_darwin(v118);
  v117 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5C154(&qword_325590);
  v98 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v97 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5C154(&qword_325598);
  v106 = *(_QWORD *)(v23 - 8);
  v107 = v23;
  __chkstk_darwin(v23);
  v103 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_3255A0);
  v104 = *(_QWORD *)(v25 - 8);
  v105 = v25;
  __chkstk_darwin(v25);
  v101 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for PageMetrics(0);
  v119 = *(_QWORD *)(v27 - 8);
  v120 = v27;
  __chkstk_darwin(v27);
  v29 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = BaseObjectGraph.inject<A>(_:)(&v122, &type metadata for FigaroPageConfiguration, &type metadata for FigaroPageConfiguration);
  v108 = v12;
  v89 = v2;
  if (v122 == 1)
  {
    sub_12B884((uint64_t)v29);
    v31 = sub_5C154(&qword_31FA88);
    BaseObjectGraph.inject<A>(_:)(&v122, v31, v31);
    v33 = v122;
    v86 = v123;
  }
  else
  {
    static PageMetrics.notInstrumented.getter(v30);
    v32 = type metadata accessor for NoopImpressionTracker();
    v33 = swift_allocObject(v32, 16, 7);
    v86 = sub_648E0(&qword_3255A8, (uint64_t (*)(uint64_t))type metadata accessor for NoopImpressionTracker, (uint64_t)&unk_25FDB8);
  }
  v34 = v119;
  v88 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  v35 = v120;
  v88(v19, v29, v120);
  v87 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56);
  v87(v19, 0, 1, v35);
  v36 = v16;
  v37 = v91;
  BaseObjectGraph.inject<A>(_:)(v16, v91, v91);
  v38 = type metadata accessor for ClickLocationConfiguration(0);
  v39 = (uint64_t)v93;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v93, 1, 1, v38);
  v96 = v33;
  swift_unknownObjectRetain(v33);
  v40 = sub_5C154(&qword_3255B0);
  v41 = sub_67060(&qword_3255B8, &qword_3255B0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v42 = v90;
  View.pageMetrics(_:pipeline:tracker:clickLocationConfiguration:)(v19, v36, v33, v86, v39, v40, v41);
  swift_unknownObjectRelease(v33);
  sub_5E09C(v39, &qword_325578);
  (*(void (**)(_QWORD *, uint64_t))(v92 + 8))(v36, v37);
  sub_5E09C((uint64_t)v19, &qword_3202B0);
  KeyPath = swift_getKeyPath(&unk_25FE20);
  v99 = v29;
  v88(v19, v29, v35);
  v87(v19, 0, 1, v35);
  v44 = v117;
  v45 = (uint64_t *)&v117[*(int *)(v118 + 36)];
  v46 = sub_5C154(&qword_3255C0);
  sub_5E1A4((uint64_t)v19, (uint64_t)v45 + *(int *)(v46 + 28), &qword_3202B0);
  *v45 = KeyPath;
  v47 = v94;
  v48 = v95;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v44, v42, v95);
  sub_5E09C((uint64_t)v19, &qword_3202B0);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v48);
  v49 = v89;
  v50 = v89 + *(int *)(v121 + 24);
  v51 = type metadata accessor for PageData(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (uint64_t)v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v108, v50, v51);
  v54 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v51);
  v55 = PageData.pageType.getter(v54);
  v56 = v109;
  DataStackID.init(stringLiteral:)(v55, v57);
  v58 = sub_5C154(&qword_321F20);
  v59 = swift_allocObject(v58, 80, 7);
  *(_OWORD *)(v59 + 16) = xmmword_258070;
  v60 = (_QWORD *)(v59 + 32);
  v61 = v100;
  sub_5E1A4(v53, v100, &qword_325570);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v61, 1, v51) == 1)
  {
    sub_5E09C(v61, &qword_325570);
    *(_OWORD *)v60 = 0u;
    *(_OWORD *)(v59 + 48) = 0u;
    *(_OWORD *)(v59 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v59 + 56) = v51;
    *(_QWORD *)(v59 + 64) = sub_648E0((unint64_t *)&unk_326230, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
    *(_QWORD *)(v59 + 72) = sub_648E0((unint64_t *)&unk_322510, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
    v62 = sub_668BC(v60);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v52 + 32))(v62, v61, v51);
  }
  v63 = sub_12D564();
  v64 = v97;
  v65 = (uint64_t)v117;
  v66 = v118;
  View.appAnalyticsData(_:for:)(v59, v56, v118, v63);
  v67 = swift_bridgeObjectRelease(v59);
  v110 = *(_QWORD *)(v110 + 8);
  v68 = v56;
  v69 = v112;
  ((void (*)(char *, uint64_t, __n128))v110)(v68, v112, v67);
  sub_5E09C(v53, &qword_325570);
  sub_5E09C(v65, &qword_325588);
  v70 = v49;
  v71 = sub_1341F4(*(_QWORD *)(v49 + *(int *)(v121 + 28)));
  v72 = v111;
  static DataStackID.additionalEventData.getter();
  v122 = v66;
  v123 = v63;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v74 = v103;
  v75 = v102;
  View.appAnalyticsData(_:for:)(v71, v72, v102, OpaqueTypeConformance2);
  v76 = swift_bridgeObjectRelease(v71);
  ((void (*)(char *, uint64_t, __n128))v110)(v72, v69, v76);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v64, v75);
  v77 = v115;
  sub_12D630(v70, v115);
  v78 = *(unsigned __int8 *)(v113 + 80);
  v79 = (v78 + 16) & ~v78;
  v80 = swift_allocObject(&unk_2EDEA0, v79 + v114, v78 | 7);
  sub_12CAEC(v77, v80 + v79);
  v122 = v75;
  v123 = OpaqueTypeConformance2;
  v81 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v82 = v101;
  v83 = v107;
  View.onViewAppearanceChange(perform:)(sub_12D678, v80, v107, v81);
  swift_unknownObjectRelease(v96);
  swift_release(v80);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v74, v83);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v99, v120);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v104 + 32))(v116, v82, v105);
}

uint64_t sub_12C38C()
{
  return EnvironmentValues.pageMetrics.getter();
}

uint64_t sub_12C3AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_5C154(&qword_3202B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5E1A4(a1, (uint64_t)v4, &qword_3202B0);
  return EnvironmentValues.pageMetrics.setter(v4);
}

void sub_12C42C()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for PageViewEventViewModifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - v10;
  v12 = *v0;
  v13 = *(_BYTE *)(v1 + 8);
  sub_AAFF4(v12, v13);
  v34 = (id)sub_77EB0(v12, v13);
  sub_794D8(v12, v13);
  if (v34)
  {
    v14 = BATracker.copy()();
    if (v14)
    {
      v15 = (void *)v14;
      sub_12D630(v1, (uint64_t)v11);
      v16 = *(unsigned __int8 *)(v3 + 80);
      v17 = (v16 + 16) & ~v16;
      v18 = swift_allocObject(&unk_2EDEC8, v17 + v4, v16 | 7);
      sub_12CAEC((uint64_t)v11, v18 + v17);
      BATracker.transaction(_:)(sub_12D784, v18, v19);
      swift_release(v18);

    }
    else
    {

    }
  }
  else
  {
    if (qword_31E5F8 != -1)
      swift_once(&qword_31E5F8, sub_126A40);
    v20 = type metadata accessor for Logger(0);
    sub_5240C(v20, (uint64_t)qword_325190);
    sub_12D630(v1, (uint64_t)v8);
    v21 = sub_12D630(v1, (uint64_t)v5);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(64, -1);
      v36 = v25;
      *(_DWORD *)v24 = 136446466;
      v26 = PageData.pageType.getter(v25);
      v28 = v27;
      v35 = sub_57CD8(v26, v27, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v28);
      v29 = sub_12CB30((uint64_t)v8);
      *(_WORD *)(v24 + 12) = 2082;
      v30 = PageData.pageID.getter(v29);
      if (v31)
      {
        v32 = v31;
      }
      else
      {
        v30 = 0x6E776F6E6B6E753CLL;
        v32 = 0xE90000000000003ELL;
      }
      v35 = sub_57CD8(v30, v32, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease(v32);
      sub_12CB30((uint64_t)v5);
      _os_log_impl(&dword_0, v22, v23, "Unable to submit PageViewEvent for <%{public}s:%{public}s> due to missing tracker", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      sub_12CB30((uint64_t)v8);
      sub_12CB30((uint64_t)v5);
    }

  }
}

uint64_t sub_12C788(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _OWORD v35[2];

  v3 = type metadata accessor for PageViewEventViewModifier(0);
  v4 = *(_QWORD *)(a2 + *(int *)(v3 + 28));
  v5 = *(_QWORD *)(v4 + 16);
  v6 = &unk_258000;
  if (v5)
  {
    v32 = v3;
    v33 = a2;
    v7 = (_QWORD *)(v4 + 32);
    v31 = *(_QWORD *)(a2 + *(int *)(v3 + 28));
    swift_bridgeObjectRetain(v4);
    v34 = enum case for DataEventTrait.onlyOnce(_:);
    do
    {
      v8 = v7[3];
      v9 = v7[4];
      v10 = sub_66898(v7, v8);
      v11 = sub_5C154((uint64_t *)&unk_3224F0);
      v12 = type metadata accessor for DataEventTrait(0);
      v13 = *(_QWORD *)(v12 - 8);
      v14 = *(unsigned __int8 *)(v13 + 80);
      v15 = (v14 + 32) & ~v14;
      v16 = swift_allocObject(v11, v15 + *(_QWORD *)(v13 + 72), v14 | 7);
      *(_OWORD *)(v16 + 16) = xmmword_258070;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v16 + v15, v34, v12);
      AccessTracker.push<A>(data:traits:file:line:)(v10, v16, 0xD00000000000007CLL, 0x8000000000271EA0, 193, v8, v9);
      swift_bridgeObjectRelease(v16);
      v7 += 6;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v31);
    v6 = (_OWORD *)&unk_258000;
    v17 = v34;
    v3 = v32;
    a2 = v33;
  }
  else
  {
    v17 = enum case for DataEventTrait.onlyOnce(_:);
  }
  v18 = a2 + *(int *)(v3 + 24);
  v19 = sub_5C154((uint64_t *)&unk_3224F0);
  v20 = type metadata accessor for DataEventTrait(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v19, v23 + *(_QWORD *)(v21 + 72), v22 | 7);
  *(_OWORD *)(v24 + 16) = v6[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 104))(v24 + v23, v17, v20);
  v25 = type metadata accessor for PageData(0);
  v26 = sub_648E0((unint64_t *)&unk_326230, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
  AccessTracker.push<A>(data:traits:file:line:)(v18, v24, 0xD00000000000007CLL, 0x8000000000271EA0, 195, v25, v26);
  v27 = swift_bridgeObjectRelease(v24);
  v28 = type metadata accessor for PageViewEvent(0, v27);
  v29 = sub_648E0(&qword_3255D8, (uint64_t (*)(uint64_t))&type metadata accessor for PageViewEvent, (uint64_t)&protocol conformance descriptor for PageViewEvent);
  memset(v35, 0, sizeof(v35));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v28, 0, v35, 0, 0, v28, v29);
  return sub_5E09C((uint64_t)v35, &qword_31F8B0);
}

void *ContextActionItem.subContextActionItems.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_12CA44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tracker.getter();
  *a1 = result;
  return result;
}

uint64_t sub_12CA6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tracker.getter();
  *a1 = result;
  return result;
}

uint64_t sub_12CA94(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return EnvironmentValues.tracker.setter(v1);
}

uint64_t sub_12CAC0(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return EnvironmentValues.tracker.setter(v1);
}

uint64_t sub_12CAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageViewEventViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_12CB30(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PageViewEventViewModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for NoopImpressionTracker()
{
  return objc_opt_self(_TtC11BookStoreUIP33_84AF58798EF07444D1AE1B57BB76AADE21NoopImpressionTracker);
}

uint64_t sub_12CB8C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for PageViewEventViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_648E0(&qword_3254C8, type metadata accessor for PageViewEventViewModifier, (uint64_t)&unk_25FD68);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

uint64_t sub_12CC0C(__int128 *a1)
{
  return sub_12CC24(a1, (uint64_t)&opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(from:)>>);
}

uint64_t sub_12CC18(__int128 *a1)
{
  return sub_12CC24(a1, (uint64_t)&opaque type descriptor for <<opaque return type of View.actionDispatcher<A>(with:implementations:)>>);
}

uint64_t sub_12CC24(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *((_QWORD *)a1 + 2);
  v4 = *a1;
  v5 = v2;
  return swift_getOpaqueTypeConformance2(&v4, a2, 1);
}

uint64_t sub_12CC58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[5];
  v6 = a1[6];
  v8 = a1[7];
  v7 = a1[8];
  v13 = a1[9];
  v14 = *a1;
  v1 = v14;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v8;
  v21 = v7;
  v22 = v13;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v14, &opaque type descriptor for <<opaque return type of IntentView<>.pageRenderMetrics(onTopic:pipeline:)>>, 0);
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v8;
  v21 = v7;
  v10 = type metadata accessor for IntentView(255, &v14);
  v11 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v10);
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v8;
  v21 = v7;
  v22 = v13;
  swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of IntentView<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for IntentView<A, B, C, D>, v10);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11);
}

uint64_t sub_12CD6C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v10 = *a1;
  v1 = v10;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v10, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 0);
  v7 = type metadata accessor for ModifiedContent(255, v1, v2);
  v8 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v7);
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ModifiedContent<>.pageRenderMetrics(onTopic:pipeline:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
}

char *sub_12CE58(char *a1, char **a2, int *a3)
{
  int v5;
  char *v7;
  char v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  char *v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v23[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v23);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    sub_AAFF4(*a2, v8);
    *(_QWORD *)a1 = v7;
    a1[8] = v8;
    v9 = a2[2];
    *((_QWORD *)a1 + 2) = v9;
    v10 = a3[6];
    v11 = &a1[v10];
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for PageData(0);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_retain(v9);
    v14(v11, v12, v13);
    v15 = a3[7];
    v16 = a3[8];
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(_QWORD *)&a1[v15] = v17;
    v18 = &a1[v16];
    v19 = (uint64_t)a2 + v16;
    v20 = type metadata accessor for PageMetrics(0);
    v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
    v22 = swift_bridgeObjectRetain(v17);
    v21(v18, v19, v20, v22);
  }
  return a1;
}

uint64_t sub_12CF60(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_794D8(*(id *)a1, *(_BYTE *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  v6 = a1 + a2[8];
  v7 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_12CFEC(uint64_t a1, uint64_t a2, int *a3)
{
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v21;

  v6 = *(id *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_AAFF4(*(id *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = a3[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for PageData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_retain(v8);
  v13(v10, v11, v12);
  v14 = a3[7];
  v15 = a3[8];
  v16 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v16;
  v17 = a1 + v15;
  v18 = a2 + v15;
  v19 = type metadata accessor for PageMetrics(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
  v21 = swift_bridgeObjectRetain(v16);
  v20(v17, v18, v19, v21);
  return a1;
}

uint64_t sub_12D0C8(uint64_t a1, uint64_t a2, int *a3)
{
  id v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(id *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_AAFF4(*(id *)a2, v7);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_794D8(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[7];
  v17 = *(_QWORD *)(a2 + v16);
  v18 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_12D1B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t sub_12D264(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_794D8(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release(v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_12D334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12D340);
}

uint64_t sub_12D340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PageData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for PageMetrics(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_12D3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12D3EC);
}

uint64_t sub_12D3EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for PageData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for PageMetrics(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_12D488(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = "\t";
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for PageData(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for PageMetrics(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_12D530(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B7E3C, 1);
}

uint64_t sub_12D540()
{
  return EnvironmentValues.pageMetrics.getter();
}

unint64_t sub_12D564()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_3255C8;
  if (!qword_3255C8)
  {
    v1 = sub_667D0(&qword_325588);
    v2[0] = sub_667D0(&qword_3255B0);
    v2[1] = sub_67060(&qword_3255B8, &qword_3255B0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.pageMetrics(_:pipeline:tracker:clickLocationConfiguration:)>>, 1);
    sub_67060(&qword_3255D0, &qword_3255C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3255C8);
  }
  return result;
}

uint64_t sub_12D630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageViewEventViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_12D678(char a1)
{
  type metadata accessor for PageViewEventViewModifier(0);
  if ((a1 & 1) != 0)
    sub_12C42C();
}

uint64_t sub_12D6BC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for PageViewEventViewModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_794D8(*(id *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v7 + 16));
  v8 = v7 + v1[6];
  v9 = type metadata accessor for PageData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7]));
  v10 = v7 + v1[8];
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_12D784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageViewEventViewModifier(0) - 8) + 80);
  return sub_12C788(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_12D7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_667D0(&qword_325598);
  v1 = sub_667D0(&qword_325590);
  v5 = sub_667D0(&qword_325588);
  v6 = sub_12D564();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onViewAppearanceChange(perform:)>>, 1);
}

uint64_t *sub_12D868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for YearInReviewPage(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for PageData(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    v14 = swift_bridgeObjectRetain(v4);
    v13(v10, v11, v12, v14);
    *(uint64_t *)((char *)v7 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
    v15 = v8[7];
    v16 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v7 + v15) = v16;
    v17 = *(int *)(a3 + 20);
    v18 = *(int *)(a3 + 24);
    v19 = *(uint64_t *)((char *)a2 + v17);
    *(uint64_t *)((char *)v7 + v17) = v19;
    v20 = (uint64_t *)((char *)v7 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = *v21;
    v4 = v21[1];
    *v20 = *v21;
    v20[1] = v4;
    swift_bridgeObjectRetain(v16);
    swift_retain(v19);
    swift_retain(v22);
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_12D96C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;

  swift_bridgeObjectRelease(*a1);
  v4 = type metadata accessor for YearInReviewPage(0);
  v5 = (char *)a1 + *(int *)(v4 + 20);
  v6 = type metadata accessor for PageData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(v4 + 28)));
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  swift_release(*v7);
  return swift_release(v7[1]);
}

uint64_t *sub_12D9F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a2;
  *a1 = *a2;
  v7 = (int *)type metadata accessor for YearInReviewPage(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PageData(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  v13 = swift_bridgeObjectRetain(v6);
  v12(v9, v10, v11, v13);
  *(uint64_t *)((char *)a1 + v7[6]) = *(uint64_t *)((char *)a2 + v7[6]);
  v14 = v7[7];
  v15 = *(uint64_t *)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = v15;
  v16 = *(int *)(a3 + 20);
  v17 = *(int *)(a3 + 24);
  v18 = *(uint64_t *)((char *)a2 + v16);
  *(uint64_t *)((char *)a1 + v16) = v18;
  v19 = (uint64_t *)((char *)a1 + v17);
  v20 = (uint64_t *)((char *)a2 + v17);
  v21 = *v20;
  v22 = v20[1];
  *v19 = *v20;
  v19[1] = v22;
  swift_bridgeObjectRetain(v15);
  swift_retain(v18);
  swift_retain(v21);
  swift_retain(v22);
  return a1;
}

uint64_t *sub_12DADC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for YearInReviewPage(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(uint64_t *)((char *)a1 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
  v13 = v8[7];
  v14 = *(uint64_t *)((char *)a2 + v13);
  v15 = *(uint64_t *)((char *)a1 + v13);
  *(uint64_t *)((char *)a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(a3 + 20);
  v17 = *(uint64_t *)((char *)a2 + v16);
  v18 = *(uint64_t *)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = *(int *)(a3 + 24);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(uint64_t *)((char *)a2 + v19);
  v23 = *(uint64_t *)((char *)a1 + v19);
  *(uint64_t *)((char *)a1 + v19) = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = *((_QWORD *)v20 + 1);
  v25 = *((_QWORD *)v21 + 1);
  *((_QWORD *)v20 + 1) = v25;
  swift_retain(v25);
  swift_release(v24);
  return a1;
}

_QWORD *sub_12DBE4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for YearInReviewPage(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  v11 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

uint64_t *sub_12DC88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = (int *)type metadata accessor for YearInReviewPage(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PageData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(uint64_t *)((char *)a1 + v7[6]) = *(uint64_t *)((char *)a2 + v7[6]);
  v12 = v7[7];
  v13 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 20);
  v15 = *(uint64_t *)((char *)a1 + v14);
  *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  swift_release(v15);
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = *(uint64_t *)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = *v18;
  swift_release(v19);
  v20 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = v18[1];
  swift_release(v20);
  return a1;
}

uint64_t sub_12DD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12DD74);
}

uint64_t sub_12DD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for YearInReviewPage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_12DDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12DDFC);
}

uint64_t sub_12DDFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for YearInReviewPage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for YearInReviewPageView(uint64_t a1)
{
  uint64_t result;

  result = qword_325638;
  if (!qword_325638)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for YearInReviewPageView);
  return result;
}

uint64_t sub_12DEB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for YearInReviewPage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_25FE98;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_12DF30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2B7EB8, 1);
}

uint64_t sub_12DF40@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char v80[16];
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v78 = a1;
  v77 = type metadata accessor for PageViewEventViewModifier(0);
  __chkstk_darwin(v77);
  v68 = (uint64_t *)((char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for PageData(0);
  v75 = *(_QWORD *)(v3 - 8);
  v76 = v3;
  __chkstk_darwin(v3);
  v73 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for PageMetrics(0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v71 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v79 = (char *)&v62 - v8;
  v9 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PagedScrollView(0, v11);
  v63 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5C154(&qword_325678);
  v18 = *(_QWORD *)(v17 - 8);
  v66 = v17;
  v67 = v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5C154(&qword_325680);
  v69 = *(_QWORD *)(v21 - 8);
  v70 = v21;
  __chkstk_darwin(v21);
  v64 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_134330(*v1);
  v65 = type metadata accessor for YearInReviewPageView(0);
  v24 = (uint64_t *)((char *)v1 + *(int *)(v65 + 24));
  v26 = *v24;
  v25 = v24[1];
  v82 = v26;
  v83 = v25;
  v27 = sub_5C154(&qword_325688);
  State.wrappedValue.getter(&v84, v27);
  PagedScrollView.init(frames:viewModel:)(v23, v84);
  v28.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v9);
  v29 = static Color.clear.getter(v28);
  v30 = sub_648E0(&qword_325690, (uint64_t (*)(uint64_t))&type metadata accessor for PagedScrollView, (uint64_t)&protocol conformance descriptor for PagedScrollView);
  View.progressiveBlurToolbar(blurAdditionalHeight:blurFillColor:blurRadius:toolbarTitleDisplayMode:)(v29, v13, v14, v30, 0.0, 10.0);
  swift_release(v29);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v14);
  v31 = v1;
  v81 = v1;
  v32 = sub_5C154(&qword_325698);
  v82 = v14;
  v83 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.progressiveBlurToolbar(blurAdditionalHeight:blurFillColor:blurRadius:toolbarTitleDisplayMode:)>>, 1);
  v34 = type metadata accessor for YearInReviewToolbarContent(255);
  v35 = sub_648E0(&qword_3256A0, type metadata accessor for YearInReviewToolbarContent, (uint64_t)&unk_259F30);
  v82 = v34;
  v83 = v35;
  v36 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v37 = v64;
  v38 = v66;
  View.toolbar<A>(content:)(sub_12EDA4, v80, v66, v32, OpaqueTypeConformance2, v36);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v20, v38);
  v39 = *(uint64_t *)((char *)v31 + *(int *)(v65 + 20));
  v40 = type metadata accessor for YearInReviewPage(0);
  v41 = (char *)v31 + *(int *)(v40 + 20);
  v42 = v79;
  static PageMetrics.notInstrumented.getter(v40);
  v44 = v75;
  v43 = v76;
  v45 = v73;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v73, v41, v76);
  v47 = v71;
  v46 = v72;
  v48 = v74;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v42, v74);
  KeyPath = swift_getKeyPath(&unk_25FF00);
  v50 = (uint64_t)v68;
  *v68 = KeyPath;
  *(_BYTE *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = v39;
  v51 = v77;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v50 + *(int *)(v77 + 24), v45, v43);
  *(_QWORD *)(v50 + *(int *)(v51 + 28)) = _swiftEmptyArrayStorage;
  v52 = v50 + *(int *)(v51 + 32);
  v53 = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v52, v47, v48);
  v54 = sub_5C154(&qword_3256A8);
  v55 = v78;
  sub_5E160(v50, v78 + *(int *)(v54 + 36), type metadata accessor for PageViewEventViewModifier);
  v56 = v69;
  v57 = v37;
  v58 = v37;
  v59 = v70;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 16))(v55, v58, v70);
  v60 = *(void (**)(char *, uint64_t))(v46 + 8);
  swift_retain(v39);
  v60(v79, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v59);
}

uint64_t sub_12E43C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v53 = a2;
  v3 = type metadata accessor for ColorScheme(0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  v4 = __chkstk_darwin(v3);
  v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PageBackground(0, v4);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_320F08);
  __chkstk_darwin(v9);
  v54 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for YearInReviewToolbarContent(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - v15;
  v17 = sub_12E7C0();
  v46 = v18;
  v47 = v17;
  v19 = *a1;
  v20 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for YearInReviewPageView(0) + 24));
  v21 = v20[1];
  v57 = *v20;
  v58 = v21;
  v22 = sub_5C154(&qword_325688);
  v23 = State.wrappedValue.getter(v55, v22);
  v24 = v55[0];
  v25 = PagedScrollViewModel.currentPageIndex.getter(v23);
  result = swift_release(v24);
  if ((v25 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v25 >= *(_QWORD *)(v19 + 16))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_5E0D8(v19 + 40 * v25 + 32, (uint64_t)&v57);
  sub_12EB20(&v57, v54, v27);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v57);
  v28 = *a1;
  v29 = v20[1];
  v57 = *v20;
  v58 = v29;
  v30 = State.wrappedValue.getter(v55, v22);
  v31 = v55[0];
  v32 = PagedScrollViewModel.currentPageIndex.getter(v30);
  result = swift_release(v31);
  if ((v32 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v32 < *(_QWORD *)(v28 + 16))
  {
    sub_5E0D8(v28 + 40 * v32 + 32, (uint64_t)&v57);
    v34 = v59;
    v33 = v60;
    sub_66898(&v57, v59);
    v35 = dispatch thunk of PagedFrame.background.getter(v34, *(_QWORD *)(v33 + 8));
    v36 = v50;
    PageBackground.resolvedColorScheme.getter(v35);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v49);
    v37 = v20[1];
    v55[0] = *v20;
    v55[1] = v37;
    v38 = State.wrappedValue.getter(&v56, v22);
    v39 = v56;
    v40 = PagedScrollViewModel.currentPageIndex.getter(v38);
    swift_release(v39);
    *(_QWORD *)v13 = swift_getKeyPath(&unk_25FF30);
    v41 = sub_5C154((uint64_t *)&unk_32A010);
    swift_storeEnumTagMultiPayload(v13, v41, 0);
    v42 = (uint64_t *)&v13[v11[5]];
    v43 = v46;
    *v42 = v47;
    v42[1] = v43;
    sub_12EDB8(v54, (uint64_t)&v13[v11[6]]);
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v13[v11[7]], v36, v52);
    v13[v11[8]] = v40 != 0;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v57);
    sub_5E160((uint64_t)v13, (uint64_t)v16, type metadata accessor for YearInReviewToolbarContent);
    v44 = sub_648E0(&qword_3256A0, type metadata accessor for YearInReviewToolbarContent, (uint64_t)&unk_259F30);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v16, v11, v44);
    return sub_12EE00((uint64_t)v16);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_12E7C0()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = type metadata accessor for Date.FormatStyle.Symbol.Year(0);
  v35 = *(_QWORD *)(v1 - 8);
  v36 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Date.FormatStyle(0, v2);
  v34 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - v9;
  v11 = type metadata accessor for Calendar(0, v8);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_31F128);
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for YearInReviewPage(0);
  v22 = *(_QWORD *)(v0 + *(int *)(v21 + 24));
  static Calendar.gregorian.getter(v21);
  Date.init(year:month:day:hour:minute:calendar:)(v22, 12, 31, 0, 0, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_12EE3C((uint64_t)v16);
    if (qword_31E6B8 != -1)
      swift_once(&qword_31E6B8, sub_127024);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_5240C(v23, (uint64_t)qword_3253B8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v27 = 134217984;
      v38 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v27 + 4, v27 + 12);
      _os_log_impl(&dword_0, v25, v26, "Failed to create date for last day of '%ld'.", v27, 0xCu);
      swift_slowDealloc(v27, -1, -1);
    }

    return 0;
  }
  else
  {
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    v30 = static FormatStyle<>.dateTime.getter(v29);
    static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v30);
    Date.FormatStyle.year(_:)(v4);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
    v31 = *(void (**)(char *, uint64_t))(v34 + 8);
    v32 = v37;
    v31(v6, v37);
    v33 = sub_648E0(&qword_321168, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
    Date.formatted<A>(_:)(&v38, v10, v32, v33);
    v31(v10, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return v38;
  }
}

uint64_t sub_12EB20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  double *v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD v45[5];

  v6 = type metadata accessor for PageBackground(0, a3);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for YearInReviewSharableImage(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - v13;
  v15 = a1[3];
  v16 = a1[4];
  sub_66898(a1, v15);
  v17 = dispatch thunk of YearInReviewPagedFrame.sharableView.getter(v15, v16);
  if (v17)
  {
    v18 = v17;
    v45[3] = &type metadata for AnyView;
    v45[4] = &protocol witness table for AnyView;
    v45[0] = v17;
    v43 = v9;
    v20 = a1[3];
    v19 = a1[4];
    sub_66898(a1, v20);
    v21 = *(_QWORD *)(v19 + 8);
    swift_retain(v18);
    dispatch thunk of PagedFrame.background.getter(v20, v21);
    v22 = sub_12E7C0();
    YearInReviewSharableImage.init(content:background:localizedYear:)(v45, v8, v22, v23);
    v24 = v43;
    v25 = v44;
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v44, v14, v43);
    v27 = static YearInReviewSharableImage.size.getter(v26);
    v29 = v28;
    v31 = static YearInReviewSharableImage.timeout.getter(v30);
    v33 = v32;
    swift_release(v18);
    v34 = v14;
    v35 = v24;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v34, v24);
    v36 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for YearInReviewPageView(0) + 20));
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v25, v35);
    v37 = (int *)sub_5C154(&qword_320F00);
    v38 = (double *)(a2 + v37[9]);
    *v38 = v27;
    *((_QWORD *)v38 + 1) = v29;
    v39 = (uint64_t *)(a2 + v37[10]);
    *v39 = v31;
    v39[1] = v33;
    *(_QWORD *)(a2 + v37[11]) = v36;
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v37 - 1) + 56))(a2, 0, 1, v37);
    return swift_retain(v36);
  }
  else
  {
    v41 = sub_5C154(&qword_320F00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(a2, 1, 1, v41);
  }
}

uint64_t sub_12EDA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_12E43C(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_12EDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_320F08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_12EE00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for YearInReviewToolbarContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_12EE3C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5C154(&qword_31F128);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_12EE80()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = qword_3256B0;
  if (!qword_3256B0)
  {
    v1 = sub_667D0(&qword_3256A8);
    v2 = sub_667D0(&qword_325678);
    v3 = sub_667D0(&qword_325698);
    v9 = type metadata accessor for PagedScrollView(255, v4);
    v10 = sub_648E0(&qword_325690, (uint64_t (*)(uint64_t))&type metadata accessor for PagedScrollView, (uint64_t)&protocol conformance descriptor for PagedScrollView);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.progressiveBlurToolbar(blurAdditionalHeight:blurFillColor:blurRadius:toolbarTitleDisplayMode:)>>, 1);
    v6 = type metadata accessor for YearInReviewToolbarContent(255);
    v7 = sub_648E0(&qword_3256A0, type metadata accessor for YearInReviewToolbarContent, (uint64_t)&unk_259F30);
    v9 = v6;
    v10 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v9 = v2;
    v10 = v3;
    v11 = OpaqueTypeConformance2;
    v12 = v8;
    swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_648E0(&qword_3254C8, type metadata accessor for PageViewEventViewModifier, (uint64_t)&unk_25FD68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3256B0);
  }
  return result;
}

uint64_t sub_12EFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  char *v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;

  LODWORD(v59) = a5;
  v57 = a4;
  v60 = a2;
  v62 = a1;
  v10 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for LocalizerRequest(0);
  v13 = *(_QWORD *)(v63 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v63);
  v61 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v54 - v16;
  v18 = type metadata accessor for GenreInfo(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v18);
  v25 = __chkstk_darwin(v21);
  v26 = (char *)&v54 - v22;
  if (a6 && *(_QWORD *)(a6 + 16))
  {
    v55 = a7;
    v56 = v24;
    v27 = *(unsigned __int8 *)(v19 + 80);
    v28 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 16);
    v58 = v23;
    v54 = v28;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v28)((char *)&v54 - v22, a6 + ((v27 + 32) & ~v27), v23, v25);
    if ((a3 & 1) == 0)
    {
      swift_bridgeObjectRetain(a6);
      sub_12F718(v60, v62, (uint64_t)v12);
LABEL_12:
      v60 = a6;
      v62 = *(_QWORD *)(v13 + 56);
      v30 = v13;
      v31 = v63;
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v62)(v12, 0, 1, v63);
      v59 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v59(v17, v12, v31);
      v54(v56, v26, v58);
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v61, v17, v31);
      v32 = (v27 + 16) & ~v27;
      v33 = (v20 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
      v34 = *(unsigned __int8 *)(v30 + 80);
      v35 = (v33 + v34 + 8) & ~v34;
      v36 = swift_allocObject(&unk_2EE020, v35 + v14, v27 | v34 | 7);
      v37 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v36 + v32, v56, v58);
      v38 = v61;
      *(_QWORD *)(v36 + v33) = v60;
      v59((char *)(v36 + v35), v38, v31);
      v39 = v55;
      static LocalizerRequest.custom(_:)(sub_130CD4, v36, v40);
      swift_release(v36);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v37);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v62)(v39, 0, 1, v31);
    }
    if ((v59 & 1) == 0)
    {
      swift_bridgeObjectRetain(a6);
      sub_12FBA8(v57, v62, (uint64_t)v12);
      goto LABEL_12;
    }
    v62 = v13;
    v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v41 = v63;
    v53(v12, 1, 1, v63);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v58);
    sub_5E09C((uint64_t)v12, &qword_3217B8);
    a7 = v55;
    v24 = v56;
    if (!*(_QWORD *)(a6 + 16))
      goto LABEL_17;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0)
  {
    sub_12F718(v60, v62, a7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a7, 0, 1, v63);
  }
  if ((v59 & 1) == 0)
  {
    sub_12FBA8(v57, v62, a7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a7, 0, 1, v63);
  }
  v58 = v23;
  v62 = v13;
  v41 = v63;
  if (!a6 || !*(_QWORD *)(a6 + 16))
  {
LABEL_17:
    v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
    v51 = a7;
    v52 = 1;
    return v50(v51, v52, 1, v41);
  }
LABEL_15:
  v42 = *(unsigned __int8 *)(v19 + 80);
  v43 = v24;
  v44 = v58;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v19 + 16))(v24, a6 + ((v42 + 32) & ~v42), v58, v25);
  v45 = (v42 + 16) & ~v42;
  v46 = a7;
  v47 = (v20 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject(&unk_2EDFF8, v47 + 8, v42 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v48 + v45, v43, v44);
  *(_QWORD *)(v48 + v47) = a6;
  v49 = swift_bridgeObjectRetain(a6);
  static LocalizerRequest.custom(_:)(sub_130BBC, v48, v49);
  swift_release(v48);
  v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
  v51 = v46;
  v52 = 0;
  return v50(v51, v52, 1, v41);
}

uint64_t sub_12F448(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[96];

  v39 = a3;
  v40 = a4;
  v38[1] = a2;
  v5 = type metadata accessor for LocalizerLookupStrategy(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizerDefaultValue(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizerRequest(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v39 + 16) < 2uLL)
  {
    v19 = GenreInfo.name.getter(v16);
    v21 = v20;
    static LocalizerRequest.verbatim(_:)(v19);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    LocalizerDefaultValue.init(stringLiteral:)("Multiple Genres", 15, 2, v16);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for LocalizerLookupStrategy.default(_:), v5);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001BLL, 0x8000000000271F80, 0, v13, v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v22 = v10;
  v23 = LocalizerRequest.perform(using:)(a1);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v26 = LocalizerRequest.perform(using:)(a1);
  v28 = v27;
  v29 = a1[3];
  v30 = a1[4];
  sub_66898(a1, v29);
  v31 = sub_5C154(&qword_3206C0);
  inited = swift_initStackObject(v31, v41);
  *(_OWORD *)(inited + 16) = xmmword_255F00;
  strcpy((char *)(inited + 32), "localizedCount");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = v26;
  *(_QWORD *)(inited + 56) = v28;
  *(_QWORD *)(inited + 64) = 0x65726E6567;
  *(_QWORD *)(inited + 72) = 0xE500000000000000;
  *(_QWORD *)(inited + 80) = v23;
  *(_QWORD *)(inited + 88) = v25;
  v33 = sub_52A70(inited);
  LocalizerDefaultValue.init(stringLiteral:)("@@localizedCount@@ · @@genre@@", 31, 0, v34);
  v35 = Localizer.string(forKey:with:defaultValue:)(0xD00000000000001DLL, 0x8000000000272140, v33, v13, v29, v30);
  v36 = swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v22, v36);
  return v35;
}

uint64_t sub_12F718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  int v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a1;
  v5 = type metadata accessor for LocalizerLookupStrategy(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3256B8);
  __chkstk_darwin(v7);
  v50 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v52 = (char *)&v48 - v11;
  v12 = type metadata accessor for LocalizerDefaultValue(0, v10);
  v51 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - v16;
  v18 = type metadata accessor for ContentKind(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v48 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  v26((char *)&v48 - v24, a2, v18, v23);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v25, v18);
  if (v27 == enum case for ContentKind.pdf(_:))
    goto LABEL_2;
  v48 = a3;
  if (v27 == enum case for ContentKind.audiobook(_:))
  {
    v33 = v17;
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Audiobooks", 20, 2, v28);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Audiobook", 19, 2, v34);
    v36 = v51;
    v35 = (uint64_t)v52;
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    v37(v52, 1, 1, v12);
    v38 = (uint64_t)v50;
    v37(v50, 1, 1, v12);
    v40 = v53;
    v39 = v54;
    v41 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, enum case for LocalizerLookupStrategy.default(_:), v55);
    static LocalizerRequest.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v49, 0xD000000000000026, 0x8000000000272000, 0, v33, v14, v35, v38, 0, 0, v40);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    sub_5E09C(v38, &qword_3256B8);
    sub_5E09C(v35, &qword_3256B8);
    v44 = *(void (**)(char *, uint64_t))(v36 + 8);
    v44(v14, v12);
    return ((uint64_t (*)(char *, uint64_t))v44)(v33, v12);
  }
  if (v27 == enum case for ContentKind.regularBook(_:))
    goto LABEL_8;
  if (v27 == enum case for ContentKind.manga(_:))
  {
LABEL_2:
    ((void (*)(char *, uint64_t, uint64_t))v26)(v21, a2, v18);
    v29 = String.init<A>(reflecting:)(v21, v18);
    v31 = v30;
    static LocalizerRequest.verbatim(_:)(v29);
    return swift_bridgeObjectRelease(v31);
  }
  if (v27 == enum case for ContentKind.unknownBook(_:))
  {
LABEL_8:
    v33 = v17;
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Books", 15, 2, v28);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ Book", 14, 2, v42);
    v36 = v51;
    v35 = (uint64_t)v52;
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    v43(v52, 1, 1, v12);
    v38 = (uint64_t)v50;
    v43(v50, 1, 1, v12);
    v40 = v53;
    v39 = v54;
    v41 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, enum case for LocalizerLookupStrategy.default(_:), v55);
    static LocalizerRequest.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v49, 0xD000000000000021, 0x8000000000271FB0, 0, v33, v14, v35, v38, 0, 0, v40);
    goto LABEL_9;
  }
  ((void (*)(char *, uint64_t, uint64_t))v26)(v21, a2, v18);
  v45 = String.init<A>(reflecting:)(v21, v18);
  v47 = v46;
  static LocalizerRequest.verbatim(_:)(v45);
  swift_bridgeObjectRelease(v47);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v25, v18);
}

uint64_t sub_12FBA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  int v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a1;
  v5 = type metadata accessor for LocalizerLookupStrategy(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5C154(&qword_3256B8);
  __chkstk_darwin(v7);
  v50 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v52 = (char *)&v48 - v11;
  v12 = type metadata accessor for LocalizerDefaultValue(0, v10);
  v51 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - v16;
  v18 = type metadata accessor for ContentKind(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v48 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  v26((char *)&v48 - v24, a2, v18, v23);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v25, v18);
  if (v27 == enum case for ContentKind.pdf(_:))
    goto LABEL_2;
  v48 = a3;
  if (v27 == enum case for ContentKind.audiobook(_:))
  {
    v33 = v17;
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Audiobooks", 21, 2, v28);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Audiobook", 20, 2, v34);
    v36 = v51;
    v35 = (uint64_t)v52;
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    v37(v52, 1, 1, v12);
    v38 = (uint64_t)v50;
    v37(v50, 1, 1, v12);
    v40 = v53;
    v39 = v54;
    v41 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, enum case for LocalizerLookupStrategy.default(_:), v55);
    static LocalizerRequest.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v49, 0xD00000000000002DLL, 0x80000000002720D0, 0, v33, v14, v35, v38, 0, 0, v40);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    sub_5E09C(v38, &qword_3256B8);
    sub_5E09C(v35, &qword_3256B8);
    v44 = *(void (**)(char *, uint64_t))(v36 + 8);
    v44(v14, v12);
    return ((uint64_t (*)(char *, uint64_t))v44)(v33, v12);
  }
  if (v27 == enum case for ContentKind.regularBook(_:))
    goto LABEL_8;
  if (v27 == enum case for ContentKind.manga(_:))
  {
LABEL_2:
    ((void (*)(char *, uint64_t, uint64_t))v26)(v21, a2, v18);
    v29 = String.init<A>(reflecting:)(v21, v18);
    v31 = v30;
    static LocalizerRequest.verbatim(_:)(v29);
    return swift_bridgeObjectRelease(v31);
  }
  if (v27 == enum case for ContentKind.unknownBook(_:))
  {
LABEL_8:
    v33 = v17;
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Books", 16, 2, v28);
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@+ Book", 15, 2, v42);
    v36 = v51;
    v35 = (uint64_t)v52;
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    v43(v52, 1, 1, v12);
    v38 = (uint64_t)v50;
    v43(v50, 1, 1, v12);
    v40 = v53;
    v39 = v54;
    v41 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, enum case for LocalizerLookupStrategy.default(_:), v55);
    static LocalizerRequest.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(v49, 0xD000000000000028, 0x8000000000272070, 0, v33, v14, v35, v38, 0, 0, v40);
    goto LABEL_9;
  }
  ((void (*)(char *, uint64_t, uint64_t))v26)(v21, a2, v18);
  v45 = String.init<A>(reflecting:)(v21, v18);
  v47 = v46;
  static LocalizerRequest.verbatim(_:)(v45);
  swift_bridgeObjectRelease(v47);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v25, v18);
}

uint64_t sub_13003C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v24 = a1;
  v4 = type metadata accessor for LocalizerLookupStrategy(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizerDefaultValue(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizerRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + 16) < 2uLL)
  {
    v18 = GenreInfo.name.getter(v15);
    v20 = v19;
    static LocalizerRequest.verbatim(_:)(v18);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    LocalizerDefaultValue.init(stringLiteral:)("Multiple Genres", 15, 2, v15);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for LocalizerLookupStrategy.default(_:), v4);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001BLL, 0x8000000000271F80, 0, v12, v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v21 = LocalizerRequest.perform(using:)(v24);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return v21;
}

uint64_t sub_130204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t);
  void (*v44)(char *, uint64_t);
  double (*v45)(char *, uint64_t);
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  __n128 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  char *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, char *, uint64_t);
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  void (*v79)(uint64_t, char *, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  void (*v94)(char *, _QWORD, uint64_t, uint64_t);
  char *v95;
  char *v96;
  uint64_t v98;
  unsigned int v99;
  void (*v100)(char *, _QWORD, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  int v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;

  v122 = a6;
  v108 = a5;
  v98 = a4;
  v117 = a3;
  v103 = a2;
  v106 = a1;
  v115 = a7;
  v7 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v7);
  v116 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v114 = (char *)&v98 - v10;
  __chkstk_darwin(v11);
  v113 = (char *)&v98 - v12;
  v13 = type metadata accessor for GenreInfo(0);
  v119 = *(_QWORD *)(v13 - 8);
  v120 = v13;
  __chkstk_darwin(v13);
  v107 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v105 = (char *)&v98 - v16;
  v17 = type metadata accessor for LocalizerLookupStrategy(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LocalizerDefaultValue(0, v19);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for LocalizerRequest(0);
  v27 = *(_QWORD *)(v26 - 8);
  v109 = v26;
  v110 = v27;
  __chkstk_darwin(v26);
  v104 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v118 = (char *)&v98 - v30;
  __chkstk_darwin(v31);
  v111 = (uint64_t)&v98 - v32;
  __chkstk_darwin(v33);
  v102 = (char *)&v98 - v34;
  __chkstk_darwin(v35);
  v37 = (char *)&v98 - v36;
  v39 = __chkstk_darwin(v38);
  v41 = (char *)&v98 - v40;
  LocalizerDefaultValue.init(stringLiteral:)("Series", 6, 2, v39);
  v42 = enum case for LocalizerLookupStrategy.default(_:);
  v43 = *(void (**)(char *, _QWORD, uint64_t))(v18 + 104);
  v43(v21, enum case for LocalizerLookupStrategy.default(_:), v17);
  v121 = v41;
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001ELL, 0x8000000000271F20, 0, v25, v21);
  v44 = *(void (**)(char *, uint64_t))(v18 + 8);
  v44(v21, v17);
  v45 = *(double (**)(char *, uint64_t))(v23 + 8);
  v46.n128_f64[0] = v45(v25, v22);
  LocalizerDefaultValue.init(stringLiteral:)("·", 2, 0, v46);
  v99 = v42;
  v100 = v43;
  v43(v21, v42, v17);
  v112 = v37;
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000002ALL, 0x8000000000271F50, 0, v25, v21);
  v44(v21, v17);
  v101 = v22;
  v45(v25, v22);
  v47 = v122;
  if (v122)
  {
    v48 = *(_QWORD *)(v122 + 16);
    if (v48)
    {
      v49 = v105;
      (*(void (**)(char *, unint64_t, uint64_t))(v119 + 16))(v105, v122 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80)), v120);
      v51 = v117;
      if ((v117 & 1) != 0 && (v108 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v119 + 8))(v49, v120);
        v52 = v109;
        v53 = v110;
        goto LABEL_6;
      }
      if (v48 < 2)
      {
        v88 = GenreInfo.name.getter(v50);
        v90 = v89;
        v66 = v102;
        static LocalizerRequest.verbatim(_:)(v88);
        swift_bridgeObjectRelease(v90);
        v52 = v109;
        v53 = v110;
        if ((v51 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        LocalizerDefaultValue.init(stringLiteral:)("Multiple Genres", 15, 2, v50);
        v100(v21, v99, v17);
        v66 = v102;
        static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001BLL, 0x8000000000271F80, 0, v25, v21);
        v44(v21, v17);
        v45(v25, v101);
        v52 = v109;
        v53 = v110;
        if ((v51 & 1) != 0)
        {
LABEL_15:
          if ((v108 & 1) != 0)
          {
            (*(void (**)(char *, uint64_t))(v53 + 8))(v66, v52);
            (*(void (**)(char *, uint64_t))(v119 + 8))(v105, v120);
LABEL_6:
            v54 = v107;
            v47 = v122;
            v55 = *(_QWORD *)(v122 + 16);
            if (!v55)
            {
LABEL_21:
              v72 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 16);
              v73 = v111;
              v59 = v121;
              v72(v111, v121, v52);
              v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
              v75 = v113;
              v74(v113, 1, 1, v52);
              v76 = v114;
              v74(v114, 1, 1, v52);
              v77 = v116;
              v78 = v112;
              v72((uint64_t)v116, v112, v52);
              v74(v77, 0, 1, v52);
              TopLockupMetadataView.Footer.init(leadingText:centerText:trailingText:separator:)(v73, v75, v76, v77);
              v65 = *(void (**)(char *, uint64_t))(v53 + 8);
              v65(v78, v52);
              return ((uint64_t (*)(char *, uint64_t))v65)(v59, v52);
            }
            goto LABEL_19;
          }
          v67 = v111;
          sub_12FBA8(v98, v106, v111);
LABEL_26:
          v91 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
          v92 = v66;
          v59 = v121;
          v91(v118, v121, v52);
          v93 = v113;
          v91(v113, (char *)v67, v52);
          v94 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
          v94(v93, 0, 1, v52);
          v95 = v114;
          v91(v114, v92, v52);
          v94(v95, 0, 1, v52);
          v96 = v116;
          v86 = v112;
          v91(v116, v112, v52);
          v94(v96, 0, 1, v52);
          TopLockupMetadataView.Footer.init(leadingText:centerText:trailingText:separator:)(v118, v93, v95, v96);
          v65 = *(void (**)(char *, uint64_t))(v53 + 8);
          v65((char *)v67, v52);
          v65(v102, v52);
          (*(void (**)(char *, uint64_t))(v119 + 8))(v105, v120);
LABEL_27:
          v65(v86, v52);
          return ((uint64_t (*)(char *, uint64_t))v65)(v59, v52);
        }
      }
      v67 = v111;
      sub_12F718(v103, v106, v111);
      goto LABEL_26;
    }
  }
  if ((v117 & 1) != 0)
  {
    if ((v108 & 1) != 0)
    {
      v52 = v109;
      v53 = v110;
      v54 = v107;
      if (!v122)
        goto LABEL_21;
      v55 = *(_QWORD *)(v122 + 16);
      if (!v55)
        goto LABEL_21;
LABEL_19:
      (*(void (**)(char *, unint64_t, uint64_t))(v119 + 16))(v54, v47 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80)), v120);
      if (v55 == 1)
      {
        v69 = GenreInfo.name.getter(v68);
        v71 = v70;
        static LocalizerRequest.verbatim(_:)(v69);
        swift_bridgeObjectRelease(v71);
      }
      else
      {
        LocalizerDefaultValue.init(stringLiteral:)("Multiple Genres", 15, 2, v68);
        v100(v21, v99, v17);
        static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001BLL, 0x8000000000271F80, 0, v25, v21);
        v44(v21, v17);
        v45(v25, v101);
      }
      v79 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 16);
      v80 = v111;
      v79(v111, v121, v52);
      v81 = v113;
      v82 = v104;
      v79((uint64_t)v113, v104, v52);
      v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
      v83(v81, 0, 1, v52);
      v84 = v114;
      v83(v114, 1, 1, v52);
      v85 = v116;
      v86 = v112;
      v79((uint64_t)v116, v112, v52);
      v83(v85, 0, 1, v52);
      TopLockupMetadataView.Footer.init(leadingText:centerText:trailingText:separator:)(v80, v81, v84, v85);
      v65 = *(void (**)(char *, uint64_t))(v53 + 8);
      v87 = v82;
      v59 = v121;
      v65(v87, v52);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v107, v120);
      goto LABEL_27;
    }
    v56 = v111;
    sub_12FBA8(v98, v106, v111);
  }
  else
  {
    v56 = v111;
    sub_12F718(v103, v106, v111);
  }
  v52 = v109;
  v57 = v110;
  v58 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v59 = v121;
  v58(v118, v121, v109);
  v60 = v113;
  v58(v113, (char *)v56, v52);
  v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
  v61(v60, 0, 1, v52);
  v62 = v114;
  v61(v114, 1, 1, v52);
  v63 = v116;
  v64 = v112;
  v58(v116, v112, v52);
  v61(v63, 0, 1, v52);
  TopLockupMetadataView.Footer.init(leadingText:centerText:trailingText:separator:)(v118, v60, v62, v63);
  v65 = *(void (**)(char *, uint64_t))(v57 + 8);
  v65((char *)v56, v52);
  v65(v64, v52);
  return ((uint64_t (*)(_QWORD, _QWORD))v65)(v59, v52);
}

uint64_t sub_130B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for GenreInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_130BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for GenreInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_13003C(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_130C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for GenreInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_130CD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for GenreInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8) + 80);
  return sub_12F448(a1, v1 + v4, *(_QWORD *)(v1 + v5), v1 + ((v5 + v6 + 8) & ~v6));
}

uint64_t sub_130D4C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = (_OWORD *)(v4 + 40);
    v9 = a2 + 5;
    v10 = a2[8];
    if (v10)
    {
      v11 = a2[9];
      *(_QWORD *)(v4 + 64) = v10;
      *(_QWORD *)(v4 + 72) = v11;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *v8 = *v9;
      *(_OWORD *)(v4 + 56) = v13;
      *(_QWORD *)(v4 + 72) = a2[9];
    }
    v14 = a3[6];
    v15 = (void *)(v4 + v14);
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ImpressionMetrics(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_5C154(&qword_31F480);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = v4 + v20;
    v23 = (uint64_t)a2 + v20;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
    v24 = v4 + v21;
    v25 = (uint64_t)a2 + v21;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  }
  return v4;
}

uint64_t sub_130EC8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = a3[6];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_5C154(&qword_31F480);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  return a1;
}

uint64_t sub_131010(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  sub_65938((_QWORD *)a1, (_QWORD *)a2);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      sub_65938((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
      goto LABEL_8;
    }
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
    goto LABEL_8;
  }
  v7 = *(_OWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v8;
LABEL_8:
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for ImpressionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_13;
  }
  if (v16)
  {
LABEL_13:
    v17 = sub_5C154(&qword_31F480);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_14:
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 8) = *((_BYTE *)v20 + 8);
  *(_QWORD *)v19 = v21;
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  return a1;
}

uint64_t sub_1311C4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 56) = v7;
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  return a1;
}

uint64_t sub_1312E4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(a1 + 40));
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_8;
  }
  if (v15)
  {
LABEL_8:
    v16 = sub_5C154(&qword_31F480);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_9:
  v17 = a3[7];
  v18 = a3[8];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_131464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_131470);
}

uint64_t sub_131470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5C154(&qword_31F480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1314F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1314FC);
}

uint64_t sub_1314FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_5C154(&qword_31F480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DividerComponentModel(uint64_t a1)
{
  uint64_t result;

  result = qword_325718;
  if (!qword_325718)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DividerComponentModel);
  return result;
}

void sub_1315B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "(";
  v4[1] = &unk_25FFA0;
  sub_AE8F0(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_25FFB8;
    v4[4] = &unk_25FFB8;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_131638@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  char v30;
  char *v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v33 = a2;
  v3 = sub_5C154(&qword_31F480);
  __chkstk_darwin(v3);
  v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5C154(&qword_325768);
  v5 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v6 = (int *)type metadata accessor for DividerComponentModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v8 + 40;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  sub_8B354((uint64_t)&v42, (uint64_t)&v39);
  v9 = v40;
  *(_OWORD *)(v8 + 40) = v39;
  *(_OWORD *)(v8 + 56) = v9;
  *((_QWORD *)v8 + 9) = v41;
  sub_5E09C((uint64_t)&v42, (uint64_t *)&unk_326210);
  v10 = (uint64_t)&v8[v6[6]];
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v45 = v10;
  v12(v10, 1, 1, v11);
  v13 = a1[3];
  v14 = a1[4];
  v36 = a1;
  sub_66898(a1, v13);
  v15 = sub_131BFC();
  v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DividerComponentModel.CodingKeys, &type metadata for DividerComponentModel.CodingKeys, v15, v13, v14);
  if (v16)
  {
    v20 = (uint64_t)v37;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v36);
    sub_5E09C(v20, &qword_320B70);
    return sub_5E09C(v45, &qword_31F480);
  }
  else
  {
    v17 = v5;
    v18 = sub_5C154(&qword_320B78);
    LOBYTE(v39) = 0;
    v19 = sub_67060((unint64_t *)&qword_320B90, &qword_320B78, (uint64_t)&protocol conformance descriptor for CodeAnyHashable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v18, &v39, v35, v18, v19);
    v21 = v43;
    *(_OWORD *)v8 = v42;
    *((_OWORD *)v8 + 1) = v21;
    *((_QWORD *)v8 + 4) = v44;
    v22 = sub_5C154(&qword_320B70);
    LOBYTE(v39) = 1;
    v23 = sub_67060(&qword_320B98, &qword_320B70, (uint64_t)&protocol conformance descriptor for _CodeByKind_OrNil<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v22, &v39, v35, v22, v23);
    sub_8B3E0((uint64_t)&v42, (uint64_t)v37, &qword_320B70);
    LOBYTE(v42) = 2;
    v24 = sub_648E0(&qword_320BA0, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    v25 = (uint64_t)v34;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, &v42, v35, v11, v24);
    sub_8B3E0(v25, v45, &qword_31F480);
    LOBYTE(v39) = 3;
    v26 = sub_9BB00();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CGFloat, &v39, v35, &type metadata for CGFloat, v26);
    v27 = BYTE8(v42);
    v28 = &v8[v6[7]];
    *(_QWORD *)v28 = v42;
    v28[8] = v27;
    LOBYTE(v39) = 4;
    v29 = v35;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CGFloat, &v39, v35, &type metadata for CGFloat, v26);
    (*(void (**)(_QWORD, uint64_t))(v17 + 8))(0, v29);
    v30 = BYTE8(v42);
    v31 = &v8[v6[8]];
    *(_QWORD *)v31 = v42;
    v31[8] = v30;
    sub_131C40((uint64_t)v8, v33);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v36);
    return sub_131C84((uint64_t)v8);
  }
}

uint64_t sub_131AA8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_131ACC + 4 * byte_25FF60[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_131ACC()
{
  return 0x6575676573;
}

unint64_t sub_131AE0()
{
  return 0xD000000000000011;
}

uint64_t sub_131AFC()
{
  return 0x6964646150706F74;
}

uint64_t sub_131B18()
{
  return 0x61506D6F74746F62;
}

uint64_t sub_131B3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_131EF4(a1, a2);
  *a3 = result;
  return result;
}

void sub_131B60(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_131B6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_131BFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_131B94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_131BFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_131BBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_131638(a1, a2);
}

uint64_t sub_131BD0()
{
  return sub_648E0(&qword_325760, type metadata accessor for DividerComponentModel, (uint64_t)&unk_25FFD0);
}

unint64_t sub_131BFC()
{
  unint64_t result;

  result = qword_325770;
  if (!qword_325770)
  {
    result = swift_getWitnessTable(&unk_260124, &type metadata for DividerComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_325770);
  }
  return result;
}

uint64_t sub_131C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DividerComponentModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_131C84(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DividerComponentModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for DividerComponentModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DividerComponentModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_131D9C + 4 * byte_25FF6A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_131DD0 + 4 * byte_25FF65[v4]))();
}

uint64_t sub_131DD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_131DD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x131DE0);
  return result;
}

uint64_t sub_131DEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x131DF4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_131DF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_131E00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DividerComponentModel.CodingKeys()
{
  return &type metadata for DividerComponentModel.CodingKeys;
}

unint64_t sub_131E20()
{
  unint64_t result;

  result = qword_325778;
  if (!qword_325778)
  {
    result = swift_getWitnessTable(&unk_2600FC, &type metadata for DividerComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_325778);
  }
  return result;
}

unint64_t sub_131E68()
{
  unint64_t result;

  result = qword_325780;
  if (!qword_325780)
  {
    result = swift_getWitnessTable(&unk_26006C, &type metadata for DividerComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_325780);
  }
  return result;
}

unint64_t sub_131EB0()
{
  unint64_t result;

  result = qword_325788;
  if (!qword_325788)
  {
    result = swift_getWitnessTable(&unk_260094, &type metadata for DividerComponentModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_325788);
  }
  return result;
}

uint64_t sub_131EF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6575676573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x800000000026D790;
    if (a2 == 0x800000000026D790)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000026D790, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6964646150706F74 && a2 == 0xEA0000000000676ELL)
  {
    v9 = 0xEA0000000000676ELL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6964646150706F74, 0xEA0000000000676ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x61506D6F74746F62 && a2 == 0xED0000676E696464)
  {
    swift_bridgeObjectRelease(0xED0000676E696464);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61506D6F74746F62, 0xED0000676E696464, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

ValueMetadata *type metadata accessor for YearInReviewPageIntentImplementation()
{
  return &type metadata for YearInReviewPageIntentImplementation;
}

uint64_t sub_13212C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[30] = a2;
  v4[31] = a3;
  v4[29] = a1;
  v5 = type metadata accessor for AppAnalyticsAction.Type(0, a4);
  v4[32] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[33] = v6;
  v4[34] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PageData(0);
  v4[35] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[36] = v8;
  v4[37] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MCatalogService(0);
  v4[38] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[39] = v10;
  v4[40] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_3257A0);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v4[41] = v12;
  *v12 = v4;
  v12[1] = sub_132224;
  return BaseObjectGraph.inject<A>(_:)(v4 + 12, v11, v11);
}

uint64_t sub_132224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_13288C;
  else
    v3 = sub_132288;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_132288()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[15];
  v2 = v0[16];
  sub_66898(v0 + 12, v1);
  v3 = *(int **)(v2 + 8);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[43] = v4;
  *v4 = v0;
  v4[1] = sub_132318;
  return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v6)(v0 + 17, v0[30], v1, v2);
}

uint64_t sub_132318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  v3 = *(_QWORD **)v1;
  v3[44] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1328E0, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[45] = v5;
  *v5 = v3;
  v5[1] = sub_1323B8;
  return BaseObjectGraph.inject<A>(_:)(v3[40], v3[38], v3[38]);
}

uint64_t sub_1323B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  v3 = *(_QWORD **)v1;
  v3[46] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[19];
    v5 = v3[20];
    swift_bridgeObjectRelease(v3[18]);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    return swift_task_switch(sub_13293C, 0, 0);
  }
  else
  {
    v3[25] = v3[17];
    v7 = v3[18];
    v8 = v3[19];
    v3[47] = v7;
    v3[48] = v8;
    v9 = v3[20];
    v3[49] = v9;
    v3[26] = v7;
    v3[27] = v8;
    v3[28] = v9;
    v10 = (_QWORD *)swift_task_alloc(dword_3257AC);
    v3[50] = v10;
    *v10 = v3;
    v10[1] = sub_132490;
    return sub_132A08((uint64_t)(v3 + 21), v3 + 25, v3[40]);
  }
}

uint64_t sub_132490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  if (v0)
    v6 = sub_132998;
  else
    v6 = sub_132518;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_132518()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSString v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t inited;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = *(_QWORD *)(v0 + 312);
  v25 = *(_QWORD *)(v0 + 304);
  v26 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 288);
  v28 = *(_QWORD *)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 248);
  v30 = *(_QWORD *)(v0 + 296);
  v1 = *(uint64_t **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = v3;
  v5 = (void *)objc_opt_self(BUAppGroup);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  v6 = objc_msgSend(v5, "books", swift_bridgeObjectRetain(v3).n128_f64[0]);
  v7 = objc_msgSend(v6, "userDefaults");

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "BOOLForKey:", v8);

  swift_retain(v29);
  v9 = sub_15FB0C();
  PageData.init(pageID:pageType:)(0x65526E4972616559, 0xEC00000077656976, 0x65526E4972616559, 0xEC00000077656976, v10);
  v11 = sub_5C154(&qword_3257B0);
  inited = swift_initStackObject(v11, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_258070;
  *(_BYTE *)(inited + 32) = 3;
  YIRDetailedData.init(totalCardCount:cardViewedCount:)(*(_QWORD *)(v9 + 16), 0, 0, 1);
  v13.n128_f64[0] = (*(double (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v21, enum case for AppAnalyticsAction.Type.reportYearInReviewViewEvent(_:), v23);
  *(_QWORD *)(inited + 64) = type metadata accessor for AppAnalyticsAction(0, v13);
  *(_QWORD *)(inited + 72) = sub_648E0(&qword_31F5A0, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
  sub_668BC((_QWORD *)(inited + 40));
  AppAnalyticsAction.init(type:)(v21);
  v14 = sub_5BD18(inited);
  swift_setDeallocating(inited);
  v15 = sub_5C154(&qword_31EEE0);
  swift_arrayDestroy(inited + 32, 1, v15);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v29);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  *v1 = v9;
  v19 = (int *)type metadata accessor for YearInReviewPage(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))((char *)v1 + v19[5], v30, v28);
  *(uint64_t *)((char *)v1 + v19[6]) = v16;
  *(uint64_t *)((char *)v1 + v19[7]) = v14;
  (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v19 - 1) + 56))(v1, 0, 1, v19);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  swift_task_dealloc(v26);
  swift_task_dealloc(v30);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_13288C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1328E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_13293C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_132998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0((_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_132A08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 240) = a1;
  *(_QWORD *)(v3 + 248) = a3;
  v5 = type metadata accessor for MRequestMetadata(0);
  *(_QWORD *)(v3 + 256) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 264) = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a2;
  *(_QWORD *)(v3 + 272) = v7;
  *(_QWORD *)(v3 + 280) = v8;
  *(_OWORD *)(v3 + 288) = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(v3 + 304) = a2[3];
  return swift_task_switch(sub_132A80, 0, 0);
}

uint64_t sub_132A80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  unint64_t v29;
  _QWORD *v30;

  v1 = v0[37];
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyArrayStorage;
    v5 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v3 = (_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain(v1);
  v4 = _swiftEmptyArrayStorage;
  v5 = _swiftEmptyArrayStorage;
  do
  {
    v7 = v3[3];
    v8 = v3[4];
    sub_66898(v3, v7);
    v9 = dispatch thunk of AssetInfo.assetType.getter(v7, v8);
    if ((static AssetType.== infix(_:_:)(v9, 1) & 1) != 0)
    {
      v10 = v3[3];
      v11 = v3[4];
      sub_66898(v3, v10);
      v12 = ContentInfo.id.getter(v10, *(_QWORD *)(v11 + 8));
      v14 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_572E4(0, v5[2] + 1, 1, v5);
      v16 = v5[2];
      v15 = v5[3];
      if (v16 >= v15 >> 1)
        v5 = sub_572E4((_QWORD *)(v15 > 1), v16 + 1, 1, v5);
      v5[2] = v16 + 1;
      v6 = &v5[2 * v16];
LABEL_4:
      v6[4] = v12;
      v6[5] = v14;
      goto LABEL_5;
    }
    v17 = dispatch thunk of AssetInfo.assetType.getter(v7, v8);
    if ((static AssetType.== infix(_:_:)(v17, 0) & 1) != 0)
    {
      v18 = v3[3];
      v19 = v3[4];
      sub_66898(v3, v18);
      v12 = ContentInfo.id.getter(v18, *(_QWORD *)(v19 + 8));
      v14 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_572E4(0, v4[2] + 1, 1, v4);
      v22 = v4[2];
      v21 = v4[3];
      if (v22 >= v21 >> 1)
        v4 = sub_572E4((_QWORD *)(v21 > 1), v22 + 1, 1, v4);
      v4[2] = v22 + 1;
      v6 = &v4[2 * v22];
      goto LABEL_4;
    }
LABEL_5:
    v3 += 5;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v0[37]);
LABEL_19:
  v0[39] = v4;
  v0[40] = v5;
  v23 = sub_5C154(&qword_3257B8);
  v24 = swift_allocObject(v23, 48, 7);
  v0[41] = v24;
  *(_OWORD *)(v24 + 16) = xmmword_255F00;
  v25 = (void *)BFMCatalogRequestRelationshipAuthors;
  v26 = (void *)BFMCatalogRequestRelationshipGenres;
  *(_QWORD *)(v24 + 32) = BFMCatalogRequestRelationshipAuthors;
  *(_QWORD *)(v24 + 40) = v26;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  v27 = v25;
  v28 = v26;
  v29 = sub_52A70((uint64_t)&off_2E6EA8);
  v0[42] = v29;
  MRequestMetadata.init(_:_:)(0xD000000000000036, 0x80000000002721A0, 82);
  v30 = (_QWORD *)swift_task_alloc(async function pointer to MCatalogService.fetch(bookAssets:audiobookAssets:relationships:views:additionalParameters:batchSize:metadata:)[1]);
  v0[43] = v30;
  *v30 = v0;
  v30[1] = sub_132D54;
  return MCatalogService.fetch(bookAssets:audiobookAssets:relationships:views:additionalParameters:batchSize:metadata:)(v5, v4, v24, 0, v29, 150, v0[34]);
}

uint64_t sub_132D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v3 = *v2;
  v5 = *(_QWORD *)(*v2 + 336);
  v4 = *(_QWORD *)(*v2 + 344);
  v7 = *(_QWORD *)(*v2 + 320);
  v6 = *(_QWORD *)(*v2 + 328);
  v8 = *(_QWORD *)(*v2 + 312);
  v10 = *(_QWORD *)(*v2 + 264);
  v9 = *(_QWORD *)(*v2 + 272);
  v11 = *(_QWORD *)(*v2 + 256);
  *(_QWORD *)(v3 + 352) = a1;
  *(_QWORD *)(v3 + 360) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  if (v1)
    v12 = sub_133210;
  else
    v12 = sub_132E18;
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_132E18()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v44 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v1);
    sub_20C9EC(0, v2, 0);
    v3 = _swiftEmptyArrayStorage;
    v4 = v1 + 32;
    do
    {
      sub_5E0D8(v4, v0 + 72);
      v5 = *(_QWORD *)(v0 + 96);
      v6 = *(_QWORD *)(v0 + 104);
      sub_66898((_QWORD *)(v0 + 72), v5);
      *(_QWORD *)(v0 + 16) = ContentInfo.id.getter(v5, *(_QWORD *)(v6 + 8));
      *(_QWORD *)(v0 + 24) = v7;
      sub_5DC98((__int128 *)(v0 + 72), v0 + 32);
      v44 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_20C9EC(0, v3[2] + 1, 1);
        v3 = v44;
      }
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_20C9EC(v8 > 1, v9 + 1, 1);
        v3 = v44;
      }
      v3[2] = v9 + 1;
      v10 = &v3[7 * v9];
      v11 = *(_OWORD *)(v0 + 16);
      v12 = *(_OWORD *)(v0 + 32);
      v13 = *(_OWORD *)(v0 + 48);
      v10[10] = *(_QWORD *)(v0 + 64);
      *((_OWORD *)v10 + 3) = v12;
      *((_OWORD *)v10 + 4) = v13;
      *((_OWORD *)v10 + 2) = v11;
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
  }
  v14 = v3[2];
  if (v14)
  {
    sub_5C154(&qword_31F148);
    v15 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v14);
  }
  else
  {
    v15 = &_swiftEmptyDictionarySingleton;
  }
  v16 = *(_QWORD *)(v0 + 360);
  v44 = v15;
  swift_bridgeObjectRetain(v3);
  sub_133808(v17, 1, &v44);
  if (v16)
    return swift_unexpectedError(v16, "Swift/Dictionary.swift", 22, 1, 489);
  v19 = (uint64_t *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)(v0 + 232) = v44;
  v22 = swift_task_alloc(32);
  *(_QWORD *)(v22 + 16) = v0 + 232;
  sub_133BD4(v20, (void (*)(uint64_t, uint64_t, id))sub_133BCC);
  swift_bridgeObjectRelease(v20);
  swift_task_dealloc(v22);
  v23 = *(_QWORD *)(v21 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(v0 + 296);
    v25 = (_QWORD *)(v24 + 32);
    swift_bridgeObjectRetain_n(v24, 2);
    v26 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v27 = v25[3];
      v28 = v25[4];
      sub_66898(v25, v27);
      v29 = ContentInfo.id.getter(v27, *(_QWORD *)(v28 + 8));
      v31 = v30;
      v32 = *v19;
      if (*(_QWORD *)(*v19 + 16) && (v33 = sub_582B4(v29, v30), (v34 & 1) != 0))
      {
        sub_5E0D8(*(_QWORD *)(v32 + 56) + 40 * v33, v0 + 152);
      }
      else
      {
        *(_QWORD *)(v0 + 184) = 0;
        *(_OWORD *)(v0 + 152) = 0u;
        *(_OWORD *)(v0 + 168) = 0u;
      }
      swift_bridgeObjectRelease(v31);
      if (*(_QWORD *)(v0 + 176))
      {
        sub_5DC98((__int128 *)(v0 + 152), v0 + 112);
        sub_5DC98((__int128 *)(v0 + 112), v0 + 192);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
          v26 = sub_57168(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
        v36 = *((_QWORD *)v26 + 2);
        v35 = *((_QWORD *)v26 + 3);
        if (v36 >= v35 >> 1)
          v26 = sub_57168((char *)(v35 > 1), v36 + 1, 1, v26);
        *((_QWORD *)v26 + 2) = v36 + 1;
        sub_5DC98((__int128 *)(v0 + 192), (uint64_t)&v26[40 * v36 + 32]);
      }
      else
      {
        sub_5E09C(v0 + 152, &qword_320940);
      }
      v25 += 5;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 296), 2);
  }
  else
  {
    v26 = (char *)_swiftEmptyArrayStorage;
  }
  v38 = *(_QWORD *)(v0 + 312);
  v37 = *(_QWORD *)(v0 + 320);
  v39 = *(_QWORD *)(v0 + 304);
  v40 = *(_QWORD *)(v0 + 288);
  v41 = *(_QWORD *)(v0 + 272);
  v42 = *(_QWORD **)(v0 + 240);
  *v42 = *(_QWORD *)(v0 + 280);
  v42[1] = v40;
  v42[2] = v26;
  v42[3] = v39;
  v43 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v37);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_133210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 312));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_133258(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t result;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  id v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  __n128 v51;
  id v52;
  char *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v8 = sub_5C154(&qword_322970);
  v9 = __chkstk_darwin(v8);
  v57 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AudiobookInfo(0, v9);
  v58 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v56 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5C154(&qword_322950);
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BookInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for MBook(0, v18);
  v22 = swift_dynamicCastClass(a3, v21);
  if (v22)
  {
    v59 = a2;
    v23 = a4;
    v24 = *a4;
    if (*(_QWORD *)(v24 + 16))
    {
      v25 = v22;
      v53 = v20;
      v54 = a3;
      v55 = v11;
      v26 = a3;
      v27 = v59;
      swift_bridgeObjectRetain(v59);
      v28 = sub_582B4(a1, v27);
      if ((v29 & 1) != 0)
      {
        v52 = v26;
        sub_5E0D8(*(_QWORD *)(v24 + 56) + 40 * v28, (uint64_t)&v60);
        swift_bridgeObjectRelease(v27);
        a4 = v23;
        a3 = v54;
        v11 = v55;
        if (*((_QWORD *)&v61 + 1))
        {
          v30 = sub_5C154(&qword_31EF60);
          v31 = swift_dynamicCast(v15, &v60, v30, v16, 6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, v31 ^ 1u, 1, v16);
          v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
          a2 = v59;
          if (v32 != 1)
          {
            v33 = v53;
            (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v53, v15, v16);
            *((_QWORD *)&v61 + 1) = v16;
            v62 = sub_648E0(&qword_322958, (uint64_t (*)(uint64_t))&type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
            sub_668BC(&v60);
            v34 = sub_648E0(&qword_3257C8, (uint64_t (*)(uint64_t))&type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
            v35 = swift_bridgeObjectRetain(a2);
            ContentInfo.enrichingDataSource(with:)(v25, v16, v34, v35);
            sub_12A964((uint64_t)&v60, a1, a2);

            return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v33, v16);
          }
          goto LABEL_10;
        }
      }
      else
      {
        v62 = 0;
        v60 = 0u;
        v61 = 0u;
        swift_bridgeObjectRelease(v27);
        a4 = v23;
        a3 = v54;
        v11 = v55;
      }
    }
    else
    {
      v62 = 0;
      v60 = 0u;
      v61 = 0u;
      v37 = a3;
      a4 = v23;
    }
    sub_5E09C((uint64_t)&v60, &qword_320940);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    a2 = v59;
LABEL_10:

    sub_5E09C((uint64_t)v15, &qword_322950);
  }
  v38 = type metadata accessor for MAudiobook(0);
  result = swift_dynamicCastClass(a3, v38);
  if (!result)
    return result;
  v39 = result;
  v40 = *a4;
  if (!*(_QWORD *)(v40 + 16))
  {
    v62 = 0;
    v60 = 0u;
    v61 = 0u;
    v46 = a3;
    v43 = (uint64_t)v57;
    v44 = v58;
    if (*((_QWORD *)&v61 + 1))
      goto LABEL_19;
LABEL_16:
    sub_5E09C((uint64_t)&v60, &qword_320940);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v43, 1, 1, v11);
LABEL_20:

    return sub_5E09C(v43, &qword_322970);
  }
  v41 = a3;
  swift_bridgeObjectRetain(a2);
  v42 = sub_582B4(a1, a2);
  v43 = (uint64_t)v57;
  v44 = v58;
  if ((v45 & 1) != 0)
  {
    sub_5E0D8(*(_QWORD *)(v40 + 56) + 40 * v42, (uint64_t)&v60);
  }
  else
  {
    v62 = 0;
    v60 = 0u;
    v61 = 0u;
  }
  swift_bridgeObjectRelease(a2);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_16;
LABEL_19:
  v47 = sub_5C154(&qword_31EF60);
  v48 = swift_dynamicCast(v43, &v60, v47, v11, 6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v43, v48 ^ 1u, 1, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v11) == 1)
    goto LABEL_20;
  v49 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v56, v43, v11);
  *((_QWORD *)&v61 + 1) = v11;
  v62 = sub_648E0(&qword_322978, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
  sub_668BC(&v60);
  v50 = sub_648E0(&qword_3257C0, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
  v51 = swift_bridgeObjectRetain(a2);
  ContentInfo.enrichingDataSource(with:)(v39, v11, v50, v51);
  sub_12A964((uint64_t)&v60, a1, a2);

  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v49, v11);
}

uint64_t sub_1337A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;

  v6 = *a2;
  v7 = (_QWORD *)swift_task_alloc(dword_32579C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_64780;
  return sub_13212C(a1, v6, a3, v8);
}

void sub_133808(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51[3];
  uint64_t v52;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease(a1);
    return;
  }
  swift_bridgeObjectRetain(a1);
  sub_133D84(a1 + 32, (uint64_t)&v49);
  v7 = v49;
  v8 = v50;
  v47 = v49;
  v48 = v50;
  sub_5DC98(v51, (uint64_t)v46);
  v9 = (_QWORD *)*a3;
  v11 = sub_582B4(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_5B4EC();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v7;
    v22[1] = v8;
    sub_5DC98(v46, v21[7] + 40 * v11);
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (!v26)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v27 = a1 + 88;
    while (1)
    {
      sub_133D84(v27, (uint64_t)&v49);
      v28 = v49;
      v29 = v50;
      v47 = v49;
      v48 = v50;
      sub_5DC98(v51, (uint64_t)v46);
      v30 = (_QWORD *)*a3;
      v31 = sub_582B4(v28, v29);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v24 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v24)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_13C18C(v35, 1);
        v31 = sub_582B4(v28, v29);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v29;
      sub_5DC98(v46, v38[7] + 40 * v31);
      v40 = v38[2];
      v24 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v24)
        goto LABEL_24;
      v38[2] = v41;
      v27 += 56;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_13C18C(v14, a2 & 1);
  v16 = sub_582B4(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v18);
    v52 = v18;
    swift_errorRetain(v18);
    v19 = sub_5C154((uint64_t *)&unk_321CD0);
    if ((swift_dynamicCast(v19, &v52, v19, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(a1);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v46);
      v20 = v48;
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(v52);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x80000000002716C0;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)(&v47, &v44, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v44, v45, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_133BCC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_133258(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

uint64_t sub_133BD4(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v20 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7)
      return swift_release(a1);
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v7)
        return swift_release(a1);
      v18 = *(_QWORD *)(v20 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v7)
          return swift_release(a1);
        v18 = *(_QWORD *)(v20 + 8 * v9);
        if (!v18)
        {
          v9 = v17 + 3;
          if (v17 + 3 >= v7)
            return swift_release(a1);
          v18 = *(_QWORD *)(v20 + 8 * v9);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v14);
    v16 = v15;
    a2(v13, v14, v16);

    result = swift_bridgeObjectRelease(v14);
  }
  v19 = v17 + 4;
  if (v19 >= v7)
    return swift_release(a1);
  v18 = *(_QWORD *)(v20 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v7)
      return swift_release(a1);
    v18 = *(_QWORD *)(v20 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_133D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_3257D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t *sub_133DCC(uint64_t a1)
{
  return sub_1345C4(a1, type metadata accessor for SeriesRoomHeaderComponentModel, (unint64_t *)&qword_320090, (uint64_t)&protocol conformance descriptor for SeriesRoomHeaderComponentModel);
}

_QWORD *sub_133DE8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char v14[8];
  uint64_t v15;
  char v16[8];
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v18 = &_swiftEmptyArrayStorage;
    sub_20C810(0, v1, 0);
    v2 = &_swiftEmptyArrayStorage;
    v4 = (_QWORD *)(a1 + 40);
    do
    {
      v5 = *v4;
      v14[0] = *((_BYTE *)v4 - 8);
      v15 = v5;
      swift_bridgeObjectRetain(v5);
      v6 = sub_5C154(&qword_3259F8);
      v7 = sub_5C154(&qword_325A00);
      swift_dynamicCast(v16, v14, v6, v7, 7);
      v8 = v16[0];
      v9 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_20C810(0, v2[2] + 1, 1);
        v2 = v18;
      }
      v11 = v2[2];
      v10 = v2[3];
      if (v11 >= v10 >> 1)
      {
        sub_20C810(v10 > 1, v11 + 1, 1);
        v2 = v18;
      }
      v2[2] = v11 + 1;
      v12 = (char *)&v2[2 * v11];
      v12[32] = v8;
      *((_QWORD *)v12 + 5) = v9;
      v4 += 2;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_133F30(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[2];
  _OWORD v13[2];
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = &_swiftEmptyArrayStorage;
    sub_20C8F8(0, v1, 0);
    v2 = &_swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v12[0] = *(v4 - 1);
      v12[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v13, v12, &type metadata for String, &type metadata for AnyHashable, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_20C8F8(0, v2[2] + 1, 1);
        v2 = v15;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_20C8F8(v6 > 1, v7 + 1, 1);
        v2 = v15;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      v8 = (char *)&v2[5 * v7];
      v9 = v13[0];
      v10 = v13[1];
      *((_QWORD *)v8 + 8) = v14;
      *((_OWORD *)v8 + 2) = v9;
      *((_OWORD *)v8 + 3) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_134058(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v18[40];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_20C4C4(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_5E0D8(v4, (uint64_t)v18);
      v5 = sub_5C154(&qword_3259E0);
      v6 = sub_5C154(&qword_31EF38);
      swift_dynamicCast(v19, v18, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_20C4C4(0, v2[2] + 1, 1);
        v2 = v22;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
        sub_20C4C4(v7 > 1, v8 + 1, 1);
      v9 = v20;
      v10 = v21;
      v11 = sub_7EEDC((uint64_t)v19, v20);
      v12 = __chkstk_darwin(v11);
      v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      (*(void (**)(_BYTE *, __n128))(v15 + 16))(v14, v12);
      sub_13D728(v8, (uint64_t)v14, (uint64_t *)&v22, v9, v10);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v19);
      v2 = v22;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1341F4(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v10[48];
  _BYTE v11[48];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_20C9A4(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_117F78(v4, (uint64_t)v10);
      v5 = sub_5C154(&qword_31EEB0);
      v6 = sub_5C154(&qword_3259C8);
      swift_dynamicCast(v11, v10, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_20C9A4(0, v2[2] + 1, 1);
        v2 = v12;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_20C9A4(v7 > 1, v8 + 1, 1);
        v2 = v12;
      }
      v2[2] = v8 + 1;
      sub_66F14((uint64_t)v11, (uint64_t)&v2[6 * v8 + 4], &qword_3259C8);
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_134330(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v10[40];
  __int128 v11[2];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_20C9C0(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_5E0D8(v4, (uint64_t)v10);
      v5 = sub_5C154(&qword_31F110);
      v6 = sub_5C154(&qword_325A10);
      swift_dynamicCast(v11, v10, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_20C9C0(0, v2[2] + 1, 1);
        v2 = v12;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_20C9C0(v7 > 1, v8 + 1, 1);
        v2 = v12;
      }
      v2[2] = v8 + 1;
      sub_5DC98(v11, (uint64_t)&v2[5 * v8 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_134468(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v14 = _swiftEmptyArrayStorage;
    sub_20CA24(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *v4;
      v12 = v5;
      swift_bridgeObjectRetain_n(v5, 2);
      v6 = sub_5C154(&qword_3259E8);
      v7 = sub_5C154(&qword_31FC38);
      swift_dynamicCast(&v13, &v12, v6, v7, 7);
      v8 = v13;
      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_20CA24(0, v2[2] + 1, 1);
        v2 = v14;
      }
      v10 = v2[2];
      v9 = v2[3];
      if (v10 >= v9 >> 1)
      {
        sub_20CA24(v9 > 1, v10 + 1, 1);
        v2 = v14;
      }
      v2[2] = v10 + 1;
      v2[v10 + 4] = v8;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t *sub_1345A8(uint64_t a1)
{
  return sub_1345C4(a1, type metadata accessor for ListItemComponentModel, &qword_320058, (uint64_t)&protocol conformance descriptor for ListItemComponentModel);
}

unint64_t *sub_1345C4(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v20 = a4;
  v7 = a2(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v11)
  {
    v24 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_20C4C4(0, v11, 0);
    v12 = v24;
    v13 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v14 = *(_QWORD *)(v8 + 72);
    do
    {
      sub_5E11C(v13, (uint64_t)v10, a2);
      v24 = v12;
      v16 = v12[2];
      v15 = v12[3];
      if (v16 >= v15 >> 1)
      {
        sub_20C4C4(v15 > 1, v16 + 1, 1);
        v12 = v24;
      }
      v22 = v7;
      v23 = sub_648E0(a3, a2, v20);
      v17 = sub_668BC(&v21);
      sub_5E11C((uint64_t)v10, (uint64_t)v17, a2);
      v12[2] = v16 + 1;
      sub_5DC98(&v21, (uint64_t)&v12[5 * v16 + 4]);
      sub_6685C((uint64_t)v10, a2);
      v13 += v14;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t sub_134734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, unsigned __int8 *a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v68 = a8;
  v69 = a2;
  v58 = a6;
  v59 = a7;
  v56 = a3;
  v64 = a18;
  v62 = a15;
  v63 = a16;
  v65 = a17;
  v66 = a14;
  v61 = a13;
  v60 = a12;
  v67 = a10;
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v54) = *a4;
  v57 = *a11;
  v26 = (int *)type metadata accessor for Page(0);
  v27 = (uint64_t *)((char *)a9 + v26[22]);
  *v27 = 0;
  v27[1] = 0;
  v28 = (char *)a9 + v26[23];
  *((_QWORD *)v28 + 4) = 0;
  *(_OWORD *)v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  v70 = PageData.pageType.getter(v26);
  v71 = v29;
  v30._countAndFlagsBits = 45;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31 = PageData.pageID.getter();
  if (v32)
  {
    v33 = v31;
    v34 = v32;
  }
  else
  {
    v35 = UUID.init()(v31);
    v33 = UUID.uuidString.getter(v35);
    v34 = v36;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  }
  v37._countAndFlagsBits = v33;
  v37._object = v34;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v34);
  v38 = v71;
  *a9 = v70;
  a9[1] = v38;
  v39 = (char *)a9 + v26[15];
  v40 = type metadata accessor for PageData(0);
  v55 = *(_QWORD *)(v40 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v39, a1, v40);
  *(uint64_t *)((char *)a9 + v26[16]) = v56;
  *((_BYTE *)a9 + v26[12]) = v54;
  v41 = v26[13];
  *(uint64_t *)((char *)a9 + v41) = a5;
  v42 = (char *)a9 + v26[17];
  v43 = type metadata accessor for PageMetrics(0);
  v56 = a1;
  v54 = *(_QWORD *)(v43 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v42, v69, v43);
  v44 = (uint64_t *)((char *)a9 + v26[14]);
  v45 = v59;
  *v44 = v58;
  v44[1] = v45;
  v46 = v68;
  sub_5E1A4(v68, (uint64_t)a9 + v26[5], &qword_3217B8);
  v47 = v67;
  sub_5E1A4(v67, (uint64_t)a9 + v26[6], &qword_3217B8);
  *((_BYTE *)a9 + v26[7]) = v57;
  *((_BYTE *)a9 + v26[8]) = v60 & 1;
  *(uint64_t *)((char *)a9 + v26[19]) = v61;
  v48 = v66;
  sub_5E1A4(v66, (uint64_t)a9 + v26[9], &qword_322F98);
  *(uint64_t *)((char *)a9 + v26[10]) = v62;
  *(uint64_t *)((char *)a9 + v26[11]) = v63;
  v49 = v65;
  *(uint64_t *)((char *)a9 + v26[20]) = v65;
  *((_BYTE *)a9 + v26[21]) = 0;
  *((_BYTE *)a9 + v26[18]) = v64 & 1;
  swift_retain(v49);
  swift_bridgeObjectRetain(a5);
  v51 = sub_DFE1C(v50);
  swift_release(v49);
  swift_bridgeObjectRelease_n(a5, 2);
  *(uint64_t *)((char *)a9 + v41) = (uint64_t)v51;
  sub_5E09C(v48, &qword_322F98);
  sub_5E09C(v47, &qword_3217B8);
  sub_5E09C(v46, &qword_3217B8);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v69, v43);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v56, v40);
}

uint64_t Page.appendingShelves(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  result = sub_5E11C(v3, a2, type metadata accessor for Page);
  if (v6)
  {
    v8 = (_QWORD *)(a2 + *(int *)(type metadata accessor for Page(0) + 52));
    swift_bridgeObjectRetain(a1);
    sub_E00B4(v9);
    v10 = *v8;
    swift_bridgeObjectRetain(*v8);
    v12 = sub_DFE1C(v11);
    result = swift_bridgeObjectRelease_n(v10, 2);
    *v8 = v12;
  }
  return result;
}

uint64_t type metadata accessor for Page(uint64_t a1)
{
  uint64_t result;

  result = qword_325928;
  if (!qword_325928)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Page);
  return result;
}

uint64_t Page.updatingShelves(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v6 = type metadata accessor for Shelf(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = *(_QWORD *)(a1 + 16);
  if (!v40)
    return sub_5E11C(v2, a2, type metadata accessor for Page);
  v37 = a2;
  v35 = type metadata accessor for Page(0);
  v36 = v2;
  v10 = *(_QWORD *)(v2 + *(int *)(v35 + 52));
  swift_bridgeObjectRetain(v10);
  v12 = sub_138038(v11);
  swift_bridgeObjectRelease(v10);
  v13 = v12[2];
  if (v13)
  {
    sub_5C154(&qword_31EF28);
    v14 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v13);
  }
  else
  {
    v14 = &_swiftEmptyDictionarySingleton;
  }
  v41 = v14;
  sub_13E0E0(v12, 1, &v41);
  v34[1] = v3;
  isUniquelyReferenced_nonNull_native = (uint64_t)v12;
  if (!v3)
  {
    swift_bridgeObjectRelease(v12);
    v17 = v41;
    v39 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v18 = a1 + v39;
    v19 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(v10);
    v38 = a1;
    swift_bridgeObjectRetain(a1);
    for (i = 0; ; ++i)
    {
      v21 = i + 1;
      if (__OFADD__(i, 1))
        break;
      sub_5E11C(v18, (uint64_t)v9, type metadata accessor for Shelf);
      if (!v17[2])
        goto LABEL_18;
      v23 = *v9;
      v22 = v9[1];
      swift_bridgeObjectRetain(v22);
      v24 = sub_582B4(v23, v22);
      if ((v25 & 1) == 0)
      {
        swift_bridgeObjectRelease(v38);
        swift_release(v17);
        swift_bridgeObjectRelease(v22);
        goto LABEL_20;
      }
      v26 = *(_QWORD *)(v17[7] + 8 * v24);
      swift_bridgeObjectRelease(v22);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_17;
      }
      else
      {
        isUniquelyReferenced_nonNull_native = sub_13D6D8(v10);
        v10 = isUniquelyReferenced_nonNull_native;
        if ((v26 & 0x8000000000000000) != 0)
        {
LABEL_17:
          __break(1u);
LABEL_18:
          swift_bridgeObjectRelease(v38);
          swift_release(v17);
LABEL_20:
          swift_bridgeObjectRelease(v10);
          v27 = sub_13D7E8();
          v28 = swift_allocError(&type metadata for Page.UpdateError, v27, 0, 0);
          *v29 = 0;
          swift_willThrow(v28);
          return sub_6685C((uint64_t)v9, type metadata accessor for Shelf);
        }
      }
      if (v26 >= *(_QWORD *)(v10 + 16))
        goto LABEL_22;
      isUniquelyReferenced_nonNull_native = sub_13D82C((uint64_t)v9, v10 + v39 + v26 * v19);
      v18 += v19;
      if (v21 == v40)
      {
        swift_release(v17);
        swift_bridgeObjectRelease(v38);
        v30 = v37;
        sub_5E11C(v36, v37, type metadata accessor for Page);
        v31 = *(int *)(v35 + 52);
        swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31));
        *(_QWORD *)(v30 + v31) = v10;
        swift_bridgeObjectRetain(v10);
        v33 = sub_DFE1C(v32);
        result = swift_bridgeObjectRelease_n(v10, 2);
        *(_QWORD *)(v30 + v31) = v33;
        return result;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  result = swift_release(v41);
  __break(1u);
  return result;
}

void Page.removingShelves(_:)(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  sub_5E11C(v3, a2, type metadata accessor for Page);
  if (v6)
  {
    v7 = (unint64_t *)(a2 + *(int *)(type metadata accessor for Page(0) + 52));
    swift_bridgeObjectRetain(a1);
    sub_13D870(v7, a1);
    v9 = v8;
    swift_bridgeObjectRelease(a1);
    v10 = *(_QWORD *)(*v7 + 16);
    if (v10 < v9)
      __break(1u);
    else
      sub_13DD30(v9, v10);
  }
}

unint64_t Page.removingShelves(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t result;

  v7 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for Page(0) + 52));
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return sub_5E11C(v3, a3, type metadata accessor for Page);
  v9 = 0;
  v10 = *(_QWORD *)(type metadata accessor for Shelf(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (uint64_t *)(((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                  + v7
                  + 8);
  while (1)
  {
    v13 = *(v12 - 1);
    v14 = *v12;
    v15 = v13 == a1 && v14 == a2;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a1, a2, 0) & 1) != 0)
      break;
    v12 = (uint64_t *)((char *)v12 + v11);
    if (v8 == ++v9)
      return sub_5E11C(v3, a3, type metadata accessor for Page);
  }
  v16 = v8 - v9;
  if (v8 <= v9)
    return sub_5E11C(v3, a3, type metadata accessor for Page);
  sub_5E11C(v3, a3, type metadata accessor for Page);
  result = v16 - 1;
  if (!__OFSUB__(v16, 1))
    return sub_13A7DC(result);
  __break(1u);
  return result;
}

uint64_t Page.appendingItems(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t updated;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  unsigned int v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  __n128 v103;
  unsigned int (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char v109;
  void (*v110)(char *, uint64_t);
  unint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  char *v115;
  __n128 v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unsigned int (*v147)(uint64_t, uint64_t, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t);
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;

  v6 = type metadata accessor for PaginationUpdate(0);
  v149 = *(_QWORD *)(v6 - 8);
  v150 = v6;
  __chkstk_darwin(v6);
  v123 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for PaginationInfo(0);
  v131 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v117 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_5C154(&qword_3257E0);
  __chkstk_darwin(v126);
  v10 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v11);
  v122 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v114 - v14;
  __chkstk_darwin(v16);
  v124 = (char *)&v114 - v17;
  v119 = sub_5C154(&qword_3257E8);
  __chkstk_darwin(v119);
  v118 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v130 = (char *)&v114 - v20;
  __chkstk_darwin(v21);
  v125 = (char *)&v114 - v22;
  __chkstk_darwin(v23);
  v141 = (char *)&v114 - v24;
  v25 = type metadata accessor for Shelf(0);
  v140 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_5C154(&qword_3257F0);
  v153 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v121 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v148 = (char *)&v114 - v30;
  __chkstk_darwin(v31);
  v154 = (char *)&v114 - v32;
  v33 = type metadata accessor for Page(0);
  __chkstk_darwin(v33);
  v133 = (uint64_t)&v114 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = *(_QWORD *)(a1 + 16);
  if (!v137)
    return sub_5E11C(v2, a2, type metadata accessor for Page);
  v143 = v25;
  v129 = v34;
  v36 = *(int *)(v34 + 52);
  v142 = v2;
  v136 = v36;
  v37 = *(_QWORD *)(v2 + v36);
  swift_bridgeObjectRetain(v37);
  v39 = sub_138038(v38);
  swift_bridgeObjectRelease(v37);
  v40 = v39[2];
  if (v40)
  {
    sub_5C154(&qword_31EF28);
    v41 = (void *)static _DictionaryStorage.allocate(capacity:)(v40);
  }
  else
  {
    v41 = &_swiftEmptyDictionarySingleton;
  }
  v156 = (uint64_t)v41;
  sub_13E0E0(v39, 1, &v156);
  v144 = v3;
  isUniquelyReferenced_nonNull_native = (uint64_t)v39;
  if (v3)
    goto LABEL_48;
  swift_bridgeObjectRelease(v39);
  v44 = v156;
  v45 = v142;
  sub_5E11C(v142, v133, type metadata accessor for Page);
  v139 = a1 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
  v114 = a1;
  v46 = swift_bridgeObjectRetain(a1);
  v47 = 0;
  v46.n128_u64[0] = 136315138;
  v116 = v46;
  v115 = (char *)&type metadata for Any + 8;
  v128 = v10;
  v120 = v15;
  v48 = v138;
  v49 = v154;
  v134 = a2;
  v155 = v27;
  v135 = v44;
  while (!__OFADD__(v47, 1))
  {
    v152 = v47 + 1;
    v55 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 16);
    v55(v49, v139 + *(_QWORD *)(v153 + 72) * v47, v48);
    updated = PageUpdateInstruction.ShelfItemUpdateDescriptor.shelfID.getter(v48);
    v58 = v57;
    if (!*(_QWORD *)(v44 + 16) || (v59 = sub_582B4(updated, v57), (v60 & 1) == 0))
    {
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v58);
      swift_release(v44);
      v111 = sub_13D7E8();
      v112 = swift_allocError(&type metadata for Page.UpdateError, v111, 0, 0);
      *v113 = 0;
      swift_willThrow(v112);
      (*(void (**)(char *, uint64_t))(v153 + 8))(v154, v48);
      return sub_6685C(v133, type metadata accessor for Page);
    }
    v61 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v59);
    swift_bridgeObjectRelease(v58);
    if ((v61 & 0x8000000000000000) != 0)
      goto LABEL_45;
    v62 = *(_QWORD *)(v45 + v136);
    if (v61 >= *(_QWORD *)(v62 + 16))
      goto LABEL_46;
    v146 = (*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
    v145 = *(_QWORD *)(v140 + 72) * v61;
    sub_5E11C(v62 + v146 + v145, (uint64_t)v155, type metadata accessor for Shelf);
    v63 = (uint64_t)v141;
    v49 = v154;
    PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v48);
    v64 = v150;
    v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
    v66 = v65(v63, 1, v150);
    sub_5E09C(v63, &qword_3257E8);
    v67 = v148;
    v55(v148, (uint64_t)v49, v48);
    v147 = v65;
    if (v66 == 1)
    {
      v151 = *(void (**)(char *, uint64_t))(v153 + 8);
      v151(v67, v48);
      v68 = (uint64_t)v130;
    }
    else
    {
      v74 = (uint64_t)v125;
      PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v48);
      v75 = v65(v74, 1, v64);
      v76 = (uint64_t)v124;
      v132 = v47;
      if (v75 == 1)
      {
        sub_5E09C(v74, &qword_3257E8);
        v77 = 1;
      }
      else
      {
        PaginationUpdate.source.getter();
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v74, v64);
        v77 = 0;
      }
      v86 = v131;
      v87 = v127;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v76, v77, 1, v127);
      v88 = (uint64_t)&v155[*(int *)(v143 + 68)];
      v89 = (uint64_t)v128;
      v90 = (uint64_t)&v128[*(int *)(v126 + 48)];
      sub_5E1A4(v76, (uint64_t)v128, &qword_323C08);
      sub_5E1A4(v88, v90, &qword_323C08);
      v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
      if (v91(v89, 1, v87) == 1)
      {
        sub_5E09C(v76, &qword_323C08);
        v151 = *(void (**)(char *, uint64_t))(v153 + 8);
        v151(v148, v138);
        if (v91(v90, 1, v87) != 1)
          goto LABEL_34;
        sub_5E09C(v89, &qword_323C08);
        v48 = v138;
        v68 = (uint64_t)v130;
        v49 = v154;
        v47 = v132;
      }
      else
      {
        v92 = (uint64_t)v120;
        sub_5E1A4(v89, (uint64_t)v120, &qword_323C08);
        if (v91(v90, 1, v87) == 1)
        {
          sub_5E09C(v76, &qword_323C08);
          v151 = *(void (**)(char *, uint64_t))(v153 + 8);
          v151(v148, v138);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v92, v87);
LABEL_34:
          v49 = v154;
          sub_5E09C(v89, &qword_3257E0);
          v48 = v138;
          v47 = v132;
LABEL_35:
          if (qword_31E5E8 != -1)
            swift_once(&qword_31E5E8, sub_1269C0);
          v93 = type metadata accessor for Logger(0);
          sub_5240C(v93, (uint64_t)qword_325160);
          v94 = v121;
          v95 = ((uint64_t (*)(char *, char *, uint64_t))v55)(v121, v49, v48);
          v96 = Logger.logObject.getter(v95);
          v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            v98 = swift_slowAlloc(12, -1);
            v147 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc(32, -1);
            v156 = (uint64_t)v147;
            *(_DWORD *)v98 = v116.n128_u32[0];
            v99 = (uint64_t)v118;
            PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v48);
            v100 = Optional.debugDescription.getter(v119);
            v102 = v101;
            sub_5E09C(v99, &qword_3257E8);
            *(_QWORD *)(v98 + 4) = sub_57CD8(v100, v102, &v156);
            v103 = swift_bridgeObjectRelease(v102);
            v50 = v151;
            ((void (*)(char *, uint64_t, __n128))v151)(v94, v48, v103);
            _os_log_impl(&dword_0, v96, v97, "Skipping this pagination update because it has already been handled: %s", (uint8_t *)v98, 0xCu);
            v104 = v147;
            swift_arrayDestroy(v147, 1, v115);
            swift_slowDealloc(v104, -1, -1);
            v105 = v98;
            v49 = v154;
            swift_slowDealloc(v105, -1, -1);

          }
          else
          {

            v50 = v151;
            v151(v94, v48);
          }
          v50(v49, v48);
          v51 = v134;
          v52 = (uint64_t)v155;
          goto LABEL_10;
        }
        v106 = v131;
        v107 = v117;
        (*(void (**)(char *, uint64_t, uint64_t))(v131 + 32))(v117, v90, v87);
        v108 = sub_648E0(&qword_3257F8, (uint64_t (*)(uint64_t))&type metadata accessor for PaginationInfo, (uint64_t)&protocol conformance descriptor for PaginationInfo);
        v109 = dispatch thunk of static Equatable.== infix(_:_:)(v92, v107, v87, v108);
        v110 = *(void (**)(char *, uint64_t))(v106 + 8);
        v110(v107, v87);
        sub_5E09C(v76, &qword_323C08);
        v48 = v138;
        v151 = *(void (**)(char *, uint64_t))(v153 + 8);
        v151(v148, v138);
        v110((char *)v92, v87);
        sub_5E09C((uint64_t)v128, &qword_323C08);
        v68 = (uint64_t)v130;
        v49 = v154;
        v47 = v132;
        if ((v109 & 1) == 0)
          goto LABEL_35;
      }
    }
    v69 = v49;
    v70 = PageUpdateInstruction.ShelfItemUpdateDescriptor.items.getter(v48);
    v52 = (uint64_t)v155;
    v71 = v144;
    sub_197CFC(v70, *((_QWORD *)v155 + 3));
    v144 = v71;
    if (v71)
    {
      swift_bridgeObjectRelease(v70);
      swift_release(v135);
      v151(v69, v48);
      swift_bridgeObjectRelease(v114);
      sub_6685C(v133, type metadata accessor for Page);
      return sub_6685C(v52, type metadata accessor for Shelf);
    }
    v72 = v143;
    sub_E0244(v70);
    PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v48);
    v73 = v150;
    if (v147(v68, 1, v150) == 1)
    {
      sub_5E09C(v68, &qword_3257E8);
    }
    else
    {
      v78 = v149;
      v79 = v123;
      v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v149 + 32))(v123, v68, v73);
      v81 = (uint64_t)v122;
      PaginationUpdate.next.getter(v80);
      v82 = *(void (**)(char *, uint64_t))(v78 + 8);
      v52 = (uint64_t)v155;
      v82(v79, v73);
      sub_13DF1C(v81, v52 + *(int *)(v72 + 68));
    }
    v51 = v134;
    v83 = *(int *)(v129 + 52);
    v84 = v133;
    v85 = *(_QWORD *)(v133 + v83);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
    *(_QWORD *)(v84 + v83) = v85;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = sub_13D6D8(v85);
      v85 = isUniquelyReferenced_nonNull_native;
      *(_QWORD *)(v133 + v83) = isUniquelyReferenced_nonNull_native;
    }
    v49 = v154;
    if (v61 >= *(_QWORD *)(v85 + 16))
      goto LABEL_47;
    sub_13DED8(v52, v85 + v146 + v145);
    v151(v49, v48);
LABEL_10:
    v44 = v135;
    v53 = v152;
    isUniquelyReferenced_nonNull_native = sub_6685C(v52, type metadata accessor for Shelf);
    ++v47;
    v54 = v53 == v137;
    v45 = v142;
    if (v54)
    {
      swift_release(v44);
      swift_bridgeObjectRelease(v114);
      return sub_5E160(v133, v51, type metadata accessor for Page);
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  result = swift_release(v156);
  __break(1u);
  return result;
}

uint64_t Page.removingItems(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t updated;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t, __n128);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t *v99;
  _BYTE v100[40];
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;

  v4 = v2;
  v87 = type metadata accessor for Shelf(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v96 = (uint64_t)v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_325800);
  v89 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Page(0);
  __chkstk_darwin(v11);
  v90 = (uint64_t)v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = a1;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return sub_5E11C(v4, a2, type metadata accessor for Page);
  v76 = v8;
  v74 = a2;
  v82 = *(int *)(v11 + 52);
  v14 = *(_QWORD *)(v4 + v82);
  swift_bridgeObjectRetain(v14);
  v16 = sub_138038(v15);
  swift_bridgeObjectRelease(v14);
  v17 = v16[2];
  if (v17)
  {
    sub_5C154(&qword_31EF28);
    v18 = (void *)static _DictionaryStorage.allocate(capacity:)(v17);
  }
  else
  {
    v18 = &_swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v102 = v18;
  sub_13E0E0(v16, 1, &v102);
  v73[1] = v3;
  isUniquelyReferenced_nonNull_native = (uint64_t)v16;
  if (v3)
    goto LABEL_78;
  swift_bridgeObjectRelease(v16);
  v21 = v102;
  sub_5E11C(v4, v90, type metadata accessor for Page);
  v85 = v75 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
  v84 = *(_QWORD *)(v89 + 72);
  v83 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v89 + 16);
  v22 = swift_bridgeObjectRetain(v75);
  v23 = 0;
  v24 = v76;
  v81 = v10;
  v80 = v4;
  v79 = v11;
  v78 = v13;
  v77 = v21;
LABEL_8:
  if (v23 == v13)
    goto LABEL_72;
  v83(v10, v85 + v84 * v23, v24, v22);
  updated = PageUpdateInstruction.ShelfItemRemovalDescriptor.shelfID.getter(v24);
  v27 = v26;
  if (!*(_QWORD *)(v21 + 16) || (v28 = sub_582B4(updated, v26), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v27);
    swift_release(v21);
    v70 = sub_13D7E8();
    v71 = swift_allocError(&type metadata for Page.UpdateError, v70, 0, 0);
    *v72 = 0;
    swift_willThrow(v71);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v10, v24);
    return sub_6685C(v90, type metadata accessor for Page);
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v28);
  swift_bridgeObjectRelease(v27);
  if ((v30 & 0x8000000000000000) != 0)
    goto LABEL_73;
  v31 = *(_QWORD *)(v4 + v82);
  if (v30 < *(_QWORD *)(v31 + 16))
  {
    v95 = v23;
    v93 = (*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
    v32 = *(_QWORD *)(v86 + 72);
    v94 = v30;
    v92 = v32 * v30;
    v33 = v96;
    sub_5E11C(v31 + v93 + v32 * v30, v96, type metadata accessor for Shelf);
    v34 = PageUpdateInstruction.ShelfItemRemovalDescriptor.itemIDs.getter(v24);
    v35 = sub_133F30(v34);
    swift_bridgeObjectRelease(v34);
    v99 = (uint64_t *)(v33 + *(int *)(v87 + 64));
    v36 = *v99;
    v37 = *(_QWORD *)(*v99 + 16);
    if (!v37)
    {
      v49 = 0;
      goto LABEL_56;
    }
    v38 = v35[2];
    v39 = v36 + 32;
    v97 = v35 + 9;
    v98 = v35 + 4;
    v88 = v36;
    swift_bridgeObjectRetain(v36);
    v40 = 0;
    v91 = v35 + 14;
    while (1)
    {
      sub_5E0D8(v39 + 40 * v40, (uint64_t)&v102);
      v41 = v103;
      v42 = v104;
      sub_66898(&v102, v103);
      dispatch thunk of ComponentModel.id.getter(&v101, v41, v42);
      if (v38)
      {
        sub_5DCB0((uint64_t)v98, (uint64_t)v100);
        swift_bridgeObjectRetain(v35);
        v43 = static AnyHashable.== infix(_:_:)(v100, &v101);
        sub_5DCEC((uint64_t)v100);
        if ((v43 & 1) != 0)
          goto LABEL_27;
        if (v38 != 1)
        {
          sub_5DCB0((uint64_t)v97, (uint64_t)v100);
          v44 = static AnyHashable.== infix(_:_:)(v100, &v101);
          sub_5DCEC((uint64_t)v100);
          if ((v44 & 1) != 0)
          {
LABEL_27:
            swift_bridgeObjectRelease(v35);
            sub_5DCEC((uint64_t)&v101);
            _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v102);
            swift_bridgeObjectRelease(v88);
            v49 = v40 + 1;
            if (__OFADD__(v40, 1))
              goto LABEL_77;
            v50 = *v99;
            v51 = *(_QWORD *)(*v99 + 16);
            v37 = v40;
            if (v49 != v51)
            {
              while (2)
              {
                if (v49 >= v51)
                  goto LABEL_64;
                sub_5E0D8(v50 + 40 * v49 + 32, (uint64_t)&v102);
                v52 = v103;
                v53 = v104;
                sub_66898(&v102, v103);
                dispatch thunk of ComponentModel.id.getter(&v101, v52, v53);
                sub_5DCB0((uint64_t)v98, (uint64_t)v100);
                swift_bridgeObjectRetain(v35);
                v54 = static AnyHashable.== infix(_:_:)(v100, &v101);
                sub_5DCEC((uint64_t)v100);
                if ((v54 & 1) != 0)
                {
LABEL_31:
                  swift_bridgeObjectRelease(v35);
                  sub_5DCEC((uint64_t)&v101);
                  isUniquelyReferenced_nonNull_native = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v102);
                }
                else
                {
                  if (v38 != 1)
                  {
                    sub_5DCB0((uint64_t)v97, (uint64_t)v100);
                    v60 = static AnyHashable.== infix(_:_:)(v100, &v101);
                    sub_5DCEC((uint64_t)v100);
                    if ((v60 & 1) != 0)
                      goto LABEL_31;
                    if (v38 != 2)
                    {
                      v61 = (uint64_t)v91;
                      v62 = 2;
                      do
                      {
                        isUniquelyReferenced_nonNull_native = sub_5DCB0(v61, (uint64_t)v100);
                        v63 = v62 + 1;
                        if (__OFADD__(v62, 1))
                          goto LABEL_63;
                        v64 = static AnyHashable.== infix(_:_:)(v100, &v101);
                        sub_5DCEC((uint64_t)v100);
                        if ((v64 & 1) != 0)
                          goto LABEL_31;
                        ++v62;
                        v61 += 40;
                      }
                      while (v63 != v38);
                    }
                  }
                  swift_bridgeObjectRelease(v35);
                  sub_5DCEC((uint64_t)&v101);
                  isUniquelyReferenced_nonNull_native = _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v102);
                  if (v37 != v49)
                  {
                    if ((v37 & 0x8000000000000000) != 0)
                      goto LABEL_67;
                    v55 = *v99;
                    v56 = *(_QWORD *)(*v99 + 16);
                    if (v37 >= v56)
                      goto LABEL_68;
                    isUniquelyReferenced_nonNull_native = sub_5E0D8(v55 + 32 + 40 * v37, (uint64_t)&v102);
                    if (v49 >= v56)
                      goto LABEL_69;
                    sub_5E0D8(v55 + 32 + 40 * v49, (uint64_t)&v101);
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
                    *v99 = v55;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      isUniquelyReferenced_nonNull_native = (uint64_t)sub_13D6EC(v55);
                      v55 = isUniquelyReferenced_nonNull_native;
                      *v99 = isUniquelyReferenced_nonNull_native;
                    }
                    if (v37 >= *(_QWORD *)(v55 + 16))
                      goto LABEL_70;
                    v57 = (_QWORD *)(v55 + 40 * v37 + 32);
                    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v57);
                    isUniquelyReferenced_nonNull_native = sub_5DC98(&v101, (uint64_t)v57);
                    if (v49 >= *(_QWORD *)(*v99 + 16))
                      goto LABEL_71;
                    v58 = (_QWORD *)(*v99 + 40 * v49 + 32);
                    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v58);
                    isUniquelyReferenced_nonNull_native = sub_5DC98(&v102, (uint64_t)v58);
                  }
                  v59 = __OFADD__(v37++, 1);
                  if (v59)
                    goto LABEL_66;
                }
                v59 = __OFADD__(v49++, 1);
                if (v59)
                  goto LABEL_65;
                v50 = *v99;
                v51 = *(_QWORD *)(*v99 + 16);
                if (v49 == v51)
                  break;
                continue;
              }
            }
LABEL_55:
            v24 = v76;
            if ((uint64_t)v49 < (uint64_t)v37)
              goto LABEL_75;
LABEL_56:
            sub_13DF64(v37, v49);
            swift_bridgeObjectRelease(v35);
            v65 = *(int *)(v79 + 52);
            v66 = v90;
            v67 = *(_QWORD *)(v90 + v65);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
            *(_QWORD *)(v66 + v65) = v67;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              isUniquelyReferenced_nonNull_native = sub_13D6D8(v67);
              v67 = isUniquelyReferenced_nonNull_native;
              *(_QWORD *)(v90 + v65) = isUniquelyReferenced_nonNull_native;
            }
            v10 = v81;
            v4 = v80;
            v13 = v78;
            v21 = v77;
            if (v94 >= *(_QWORD *)(v67 + 16))
              goto LABEL_76;
            v23 = v95 + 1;
            v68 = v67 + v93 + v92;
            v69 = v96;
            sub_13DED8(v96, v68);
            sub_6685C(v69, type metadata accessor for Shelf);
            isUniquelyReferenced_nonNull_native = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v10, v24);
            if (v23 == v13)
            {
              swift_release(v21);
              swift_bridgeObjectRelease(v75);
              return sub_5E160(v90, v74, type metadata accessor for Page);
            }
            goto LABEL_8;
          }
          if (v38 != 2)
          {
            v45 = (uint64_t)v91;
            v46 = 2;
            while (1)
            {
              isUniquelyReferenced_nonNull_native = sub_5DCB0(v45, (uint64_t)v100);
              v47 = v46 + 1;
              if (__OFADD__(v46, 1))
                break;
              v48 = static AnyHashable.== infix(_:_:)(v100, &v101);
              sub_5DCEC((uint64_t)v100);
              if ((v48 & 1) != 0)
                goto LABEL_27;
              ++v46;
              v45 += 40;
              if (v47 == v38)
                goto LABEL_15;
            }
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
            break;
          }
        }
LABEL_15:
        swift_bridgeObjectRelease(v35);
      }
      sub_5DCEC((uint64_t)&v101);
      _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v102);
      if (++v40 == v37)
      {
        swift_bridgeObjectRelease(v88);
        v49 = *(_QWORD *)(*v99 + 16);
        goto LABEL_55;
      }
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  result = swift_release(v102);
  __break(1u);
  return result;
}

uint64_t Page.updatingItems(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t updated;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  int v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  _BOOL8 v80;
  BOOL v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  __n128 v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char v146;
  void (*v147)(char *, uint64_t);
  char *v148;
  unint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t (*v152)(uint64_t);
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t result;
  char *v158;
  char *v159;
  __n128 v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t (*v177)(uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(char *, uint64_t);
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t);
  uint64_t v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;

  v185 = a2;
  v194 = type metadata accessor for PaginationUpdate(0);
  v3 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v165 = (char *)&v158 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for PaginationInfo(0);
  v180 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v6 = (char *)&v158 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_5C154(&qword_3257E0);
  __chkstk_darwin(v171);
  v179 = (uint64_t)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5C154(&qword_323C08);
  __chkstk_darwin(v8);
  v10 = (char *)&v158 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v166 = (uint64_t)&v158 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v158 - v14;
  v164 = sub_5C154(&qword_3257E8);
  __chkstk_darwin(v164);
  v163 = (char *)&v158 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v167 = (char *)&v158 - v18;
  __chkstk_darwin(v19);
  v170 = (char *)&v158 - v20;
  __chkstk_darwin(v21);
  v189 = (char *)&v158 - v22;
  v193 = type metadata accessor for Shelf(0);
  v188 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v24 = (char *)&v158 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5C154(&qword_3257F0);
  v195 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v169 = (char *)&v158 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v192 = (char *)&v158 - v28;
  __chkstk_darwin(v29);
  v31 = (char *)&v158 - v30;
  v32 = type metadata accessor for Page(0);
  __chkstk_darwin(v32);
  v191 = (uint64_t)&v158 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = a1;
  if (!*(_QWORD *)(a1 + 16))
    return sub_5E11C(v198, v185, type metadata accessor for Page);
  v35 = *(_QWORD *)(a1 + 16);
  v161 = v10;
  v186 = v25;
  v158 = v6;
  v162 = v33;
  v181 = *(int *)(v33 + 52);
  v36 = *(_QWORD *)(v198 + v181);
  swift_bridgeObjectRetain(v36);
  v37 = v200;
  v39 = sub_138038(v38);
  swift_bridgeObjectRelease(v36);
  v40 = v39[2];
  v41 = &_swiftEmptyDictionarySingleton;
  if (v40)
  {
    sub_5C154(&qword_31EF28);
    v41 = (void *)static _DictionaryStorage.allocate(capacity:)(v40);
  }
  *(_QWORD *)&v205 = v41;
  sub_13E0E0(v39, 1, &v205);
  v200 = v37;
  v42 = (uint64_t)v39;
  if (v37)
    goto LABEL_81;
  swift_bridgeObjectRelease(v39);
  v196 = v205;
  sub_5E11C(v198, v191, type metadata accessor for Page);
  v184 = v182 + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80));
  v183 = *(_QWORD *)(v195 + 72);
  v199 = *(void (**)(char *, uint64_t, uint64_t))(v195 + 16);
  v43 = swift_bridgeObjectRetain(v182);
  v44 = 0;
  v43.n128_u64[0] = 136315138;
  v160 = v43;
  v159 = (char *)&type metadata for Any + 8;
  v201 = v24;
  v45 = v186;
  v197 = v31;
  v173 = v15;
  v168 = v35;
  v174 = v3;
  while (v44 != v35)
  {
    v190 = v44;
    v199(v31, v184 + v183 * v44, v45);
    updated = PageUpdateInstruction.ShelfItemUpdateDescriptor.shelfID.getter(v45);
    v48 = v47;
    v49 = v196;
    if (!*(_QWORD *)(v196 + 16) || (v50 = sub_582B4(updated, v47), (v51 & 1) == 0))
    {
      swift_bridgeObjectRelease(v182);
      swift_bridgeObjectRelease(v48);
      swift_release(v49);
      v154 = sub_13D7E8();
      v155 = swift_allocError(&type metadata for Page.UpdateError, v154, 0, 0);
      *v156 = 0;
      swift_willThrow(v155);
      (*(void (**)(char *, uint64_t))(v195 + 8))(v31, v45);
      v152 = type metadata accessor for Page;
      v153 = v191;
      return sub_6685C(v153, v152);
    }
    v52 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v50);
    swift_bridgeObjectRelease(v48);
    if ((v52 & 0x8000000000000000) != 0)
      goto LABEL_77;
    v53 = *(_QWORD *)(v198 + v181);
    if (v52 >= *(_QWORD *)(v53 + 16))
      goto LABEL_78;
    v176 = (*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80);
    v54 = *(_QWORD *)(v188 + 72);
    v178 = v52;
    v175 = v54 * v52;
    sub_5E11C(v53 + v176 + v54 * v52, (uint64_t)v24, type metadata accessor for Shelf);
    v55 = (uint64_t)v189;
    PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v45);
    v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    v57 = v194;
    v58 = v56(v55, 1, v194);
    sub_5E09C(v55, &qword_3257E8);
    v59 = v192;
    v199(v192, (uint64_t)v31, v45);
    v177 = v56;
    if (v58 == 1)
    {
      v60 = *(void (**)(char *, uint64_t))(v195 + 8);
      v60(v59, v45);
LABEL_13:
      v61 = v196;
      goto LABEL_14;
    }
    v90 = (uint64_t)v170;
    PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v45);
    if (v56(v90, 1, v57) == 1)
    {
      sub_5E09C(v90, &qword_3257E8);
      v91 = 1;
      v92 = (uint64_t)v173;
    }
    else
    {
      v92 = (uint64_t)v173;
      PaginationUpdate.source.getter();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v90, v57);
      v91 = 0;
    }
    v94 = v180;
    v95 = v172;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56))(v92, v91, 1, v172);
    v96 = (uint64_t)&v201[*(int *)(v193 + 68)];
    v97 = v179;
    v98 = v179 + *(int *)(v171 + 48);
    sub_5E1A4(v92, v179, &qword_323C08);
    sub_5E1A4(v96, v98, &qword_323C08);
    v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
    if (v99(v97, 1, v95) == 1)
    {
      sub_5E09C(v92, &qword_323C08);
      v60 = *(void (**)(char *, uint64_t))(v195 + 8);
      v60(v59, v45);
      if (v99(v98, 1, v95) != 1)
      {
        v97 = v179;
        goto LABEL_56;
      }
      sub_5E09C(v179, &qword_323C08);
      goto LABEL_13;
    }
    v100 = v166;
    sub_5E1A4(v97, v166, &qword_323C08);
    if (v99(v98, 1, v95) == 1)
    {
      sub_5E09C((uint64_t)v173, &qword_323C08);
      v60 = *(void (**)(char *, uint64_t))(v195 + 8);
      v60(v192, v45);
      (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v100, v95);
LABEL_56:
      v3 = v174;
      sub_5E09C(v97, &qword_3257E0);
LABEL_57:
      if (qword_31E5E8 != -1)
        swift_once(&qword_31E5E8, sub_1269C0);
      v124 = type metadata accessor for Logger(0);
      sub_5240C(v124, (uint64_t)qword_325160);
      v125 = v169;
      v126 = v197;
      v127 = ((uint64_t (*)(char *, char *, uint64_t))v199)(v169, v197, v45);
      v128 = Logger.logObject.getter(v127);
      v129 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v128, v129))
      {
        v130 = swift_slowAlloc(12, -1);
        v187 = v60;
        v131 = v130;
        v132 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v205 = v132;
        *(_DWORD *)v131 = v160.n128_u32[0];
        v133 = (uint64_t)v163;
        PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v45);
        v134 = Optional.debugDescription.getter(v164);
        v136 = v135;
        sub_5E09C(v133, &qword_3257E8);
        *(_QWORD *)(v131 + 4) = sub_57CD8(v134, v136, (uint64_t *)&v205);
        v31 = v197;
        v137 = v174;
        v138 = swift_bridgeObjectRelease(v136);
        v139 = v187;
        ((void (*)(char *, uint64_t, __n128))v187)(v169, v45, v138);
        _os_log_impl(&dword_0, v128, v129, "Skipping this pagination update because it has already been handled: %s", (uint8_t *)v131, 0xCu);
        swift_arrayDestroy(v132, 1, v159);
        swift_slowDealloc(v132, -1, -1);
        v140 = v131;
        v3 = v137;
        swift_slowDealloc(v140, -1, -1);

        v139(v31, v45);
        v24 = v201;
      }
      else
      {

        v60(v125, v45);
        v60(v126, v45);
        v24 = v201;
        v31 = v126;
      }
      v35 = v168;
      goto LABEL_63;
    }
    v142 = v97;
    v143 = v180;
    v144 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v180 + 32))(v158, v98, v95);
    v145 = sub_648E0(&qword_3257F8, (uint64_t (*)(uint64_t))&type metadata accessor for PaginationInfo, (uint64_t)&protocol conformance descriptor for PaginationInfo);
    v146 = dispatch thunk of static Equatable.== infix(_:_:)(v100, v144, v95, v145);
    v147 = *(void (**)(char *, uint64_t))(v143 + 8);
    v148 = v144;
    v45 = v186;
    v147(v148, v95);
    sub_5E09C((uint64_t)v173, &qword_323C08);
    v60 = *(void (**)(char *, uint64_t))(v195 + 8);
    v60(v192, v45);
    v147((char *)v100, v95);
    sub_5E09C(v142, &qword_323C08);
    v61 = v196;
    v3 = v174;
    if ((v146 & 1) == 0)
      goto LABEL_57;
LABEL_14:
    v62 = v197;
    v63 = PageUpdateInstruction.ShelfItemUpdateDescriptor.items.getter(v45);
    v64 = v200;
    v65 = (uint64_t)v201;
    sub_197CFC(v63, *((_QWORD *)v201 + 3));
    if (v64)
    {
      swift_bridgeObjectRelease(v63);
      swift_release(v61);
      v60(v62, v45);
      swift_bridgeObjectRelease(v182);
      sub_6685C(v191, type metadata accessor for Page);
      v152 = type metadata accessor for Shelf;
      v153 = v65;
      return sub_6685C(v153, v152);
    }
    v66 = *(int *)(v193 + 64);
    v67 = *(_QWORD *)(v65 + v66);
    swift_bridgeObjectRetain(v67);
    v69 = sub_138274(v68);
    swift_bridgeObjectRelease(v67);
    v70 = v69[2];
    v200 = 0;
    v187 = v60;
    if (!v70)
    {
      v71 = &_swiftEmptyDictionarySingleton;
      v209 = &_swiftEmptyDictionarySingleton;
LABEL_37:
      swift_bridgeObjectRelease(v69);
      v93 = *(_QWORD *)(v63 + 16);
      if (v93)
      {
LABEL_38:
        v101 = v63 + 32;
        while (1)
        {
          sub_5E0D8(v101, (uint64_t)&v205);
          v102 = *((_QWORD *)&v206 + 1);
          v103 = v207;
          sub_66898(&v205, *((uint64_t *)&v206 + 1));
          dispatch thunk of ComponentModel.id.getter(&v202, v102, v103);
          if (!v71[2])
            break;
          v104 = sub_58318((uint64_t)&v202);
          if ((v105 & 1) == 0)
            break;
          v106 = *(_QWORD *)(v71[7] + 8 * v104);
          sub_5DCEC((uint64_t)&v202);
          v107 = v201;
          v108 = *(char **)&v201[v66];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v108);
          *(_QWORD *)&v107[v66] = v108;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v106 & 0x8000000000000000) != 0)
              goto LABEL_73;
          }
          else
          {
            v108 = sub_13D6EC((uint64_t)v108);
            *(_QWORD *)&v107[v66] = v108;
            if ((v106 & 0x8000000000000000) != 0)
              goto LABEL_73;
          }
          if (v106 >= *((_QWORD *)v108 + 2))
            goto LABEL_74;
          sub_65938(&v108[40 * v106 + 32], &v205);
          _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v205);
          v101 += 40;
          if (!--v93)
            goto LABEL_48;
        }
        sub_5DCEC((uint64_t)&v202);
        swift_bridgeObjectRelease(v182);
        swift_bridgeObjectRelease(v63);
        swift_release(v71);
        swift_release(v196);
        v149 = sub_13D7E8();
        v150 = swift_allocError(&type metadata for Page.UpdateError, v149, 0, 0);
        *v151 = 1;
        swift_willThrow(v150);
        v187(v197, v186);
        sub_6685C(v191, type metadata accessor for Page);
        _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(&v205);
        v152 = type metadata accessor for Shelf;
        v153 = (uint64_t)v201;
        return sub_6685C(v153, v152);
      }
      goto LABEL_48;
    }
    sub_5C154(&qword_325808);
    v71 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v70);
    v72 = v69[2];
    v209 = v71;
    if (!v72)
      goto LABEL_37;
    v73 = (uint64_t)(v69 + 4);
    swift_bridgeObjectRetain(v69);
    do
    {
      sub_5E1A4(v73, (uint64_t)&v205, &qword_325810);
      v202 = v205;
      v203 = v206;
      v76 = v208;
      v204 = v207;
      v77 = sub_58318((uint64_t)&v202);
      v79 = v71[2];
      v80 = (v78 & 1) == 0;
      v81 = __OFADD__(v79, v80);
      v82 = v79 + v80;
      if (v81)
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      v83 = v78;
      if (v71[3] < v82)
      {
        sub_13B844(v82, 1);
        v77 = sub_58318((uint64_t)&v202);
        if ((v83 & 1) != (v84 & 1))
          goto LABEL_80;
      }
      v71 = v209;
      if ((v83 & 1) != 0)
      {
        v74 = 8 * v77;
        v75 = *(_QWORD *)(v209[7] + 8 * v77);
        sub_5DCEC((uint64_t)&v202);
        *(_QWORD *)(v71[7] + v74) = v75;
      }
      else
      {
        v209[(v77 >> 6) + 8] |= 1 << v77;
        v85 = v71[6] + 40 * v77;
        v86 = v202;
        v87 = v203;
        *(_QWORD *)(v85 + 32) = v204;
        *(_OWORD *)v85 = v86;
        *(_OWORD *)(v85 + 16) = v87;
        *(_QWORD *)(v71[7] + 8 * v77) = v76;
        v88 = v71[2];
        v81 = __OFADD__(v88, 1);
        v89 = v88 + 1;
        if (v81)
          goto LABEL_75;
        v71[2] = v89;
      }
      v73 += 48;
      --v72;
    }
    while (v72);
    swift_bridgeObjectRelease_n(v69, 2);
    v93 = *(_QWORD *)(v63 + 16);
    if (v93)
      goto LABEL_38;
LABEL_48:
    swift_release(v71);
    swift_bridgeObjectRelease(v63);
    v110 = (uint64_t)v167;
    v45 = v186;
    PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter(v186);
    v111 = v194;
    v112 = v177(v110, 1, v194);
    v113 = v174;
    v114 = (uint64_t)v201;
    if (v112 == 1)
    {
      v115 = v174;
      sub_5E09C(v110, &qword_3257E8);
    }
    else
    {
      v116 = v165;
      v117 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v174 + 32))(v165, v110, v111);
      v118 = (uint64_t)v161;
      PaginationUpdate.next.getter(v117);
      v115 = v113;
      (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v111);
      sub_13DF1C(v118, v114 + *(int *)(v193 + 68));
    }
    v24 = (char *)v114;
    v119 = *(int *)(v162 + 52);
    v120 = v191;
    v121 = *(_QWORD *)(v191 + v119);
    v122 = swift_isUniquelyReferenced_nonNull_native(v121);
    *(_QWORD *)(v120 + v119) = v121;
    v35 = v168;
    if ((v122 & 1) == 0)
    {
      v121 = sub_13D6D8(v121);
      *(_QWORD *)(v191 + v119) = v121;
    }
    v31 = v197;
    v123 = v187;
    if (v178 >= *(_QWORD *)(v121 + 16))
      goto LABEL_79;
    v3 = v115;
    sub_13DED8(v114, v121 + v176 + v175);
    v123(v31, v45);
LABEL_63:
    v44 = v190 + 1;
    sub_6685C((uint64_t)v24, type metadata accessor for Shelf);
    v141 = v185;
    if (v44 == v35)
    {
      swift_release(v196);
      swift_bridgeObjectRelease(v182);
      return sub_5E160(v191, v141, type metadata accessor for Page);
    }
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  v42 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
LABEL_81:
  swift_bridgeObjectRelease(v42);
  result = swift_release(v205);
  __break(1u);
  return result;
}

void Page.updatingTrailingToolbarItems(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  sub_5E11C(v2, a2, type metadata accessor for Page);
  v5 = *(int *)(type metadata accessor for Page(0) + 44);
  v6 = *(_QWORD *)(a2 + v5);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a2 + v5) = a1;
}

uint64_t Page.updatingShelfHeader(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t updated;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64[3];

  v4 = v2;
  v7 = type metadata accessor for Shelf(0);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  __chkstk_darwin(v7);
  v63 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_324588);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Page(0);
  __chkstk_darwin(v13);
  v61 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *(_QWORD *)(a1 + 16);
  if (!v56)
    return sub_5E11C(v4, a2, type metadata accessor for Page);
  v60 = v12;
  v49 = a2;
  v16 = *(int *)(v14 + 52);
  v53 = v14;
  v54 = v16;
  v17 = *(_QWORD *)(v4 + v16);
  swift_bridgeObjectRetain(v17);
  v19 = sub_138038(v18);
  swift_bridgeObjectRelease(v17);
  v20 = v19[2];
  if (v20)
  {
    sub_5C154(&qword_31EF28);
    v21 = (void *)static _DictionaryStorage.allocate(capacity:)(v20);
  }
  else
  {
    v21 = &_swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v64[0] = v21;
  sub_13E0E0(v19, 1, v64);
  v48 = v3;
  isUniquelyReferenced_nonNull_native = (uint64_t)v19;
  if (!v3)
  {
    swift_bridgeObjectRelease(v19);
    v24 = *(_QWORD *)&v64[0];
    v55 = v4;
    sub_5E11C(v4, v61, type metadata accessor for Page);
    v59 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v50 = a1;
    v25 = swift_bridgeObjectRetain(a1);
    v26 = 0;
    v27 = v60;
    v51 = v24;
    v52 = v10;
    while (!__OFADD__(v26, 1))
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v27, v59 + *(_QWORD *)(v10 + 72) * v26, v9, v25);
      updated = PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.shelfID.getter(v9);
      v30 = v29;
      if (!*(_QWORD *)(v24 + 16) || (v31 = sub_582B4(updated, v29), (v32 & 1) == 0))
      {
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v30);
        swift_release(v24);
        v45 = sub_13D7E8();
        v46 = swift_allocError(&type metadata for Page.UpdateError, v45, 0, 0);
        *v47 = 0;
        swift_willThrow(v46);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v9);
        return sub_6685C(v61, type metadata accessor for Page);
      }
      v33 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v31);
      swift_bridgeObjectRelease(v30);
      if ((v33 & 0x8000000000000000) != 0)
        goto LABEL_20;
      v34 = *(_QWORD *)(v55 + v54);
      if (v33 >= *(_QWORD *)(v34 + 16))
        goto LABEL_21;
      v62 = v26 + 1;
      v35 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      v36 = *(_QWORD *)(v57 + 72) * v33;
      v37 = v63;
      sub_5E11C(v34 + v35 + v36, v63, type metadata accessor for Shelf);
      v38 = v9;
      PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.model.getter(v64, v9);
      v39 = (_QWORD *)(v37 + *(int *)(v58 + 52));
      sub_11F0D4(v39);
      sub_5DC98(v64, (uint64_t)v39);
      v40 = *(int *)(v53 + 52);
      v41 = v61;
      v42 = *(_QWORD *)(v61 + v40);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
      *(_QWORD *)(v41 + v40) = v42;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = sub_13D6D8(v42);
        v42 = isUniquelyReferenced_nonNull_native;
        *(_QWORD *)(v61 + v40) = isUniquelyReferenced_nonNull_native;
      }
      v43 = v62;
      v27 = v60;
      if (v33 >= *(_QWORD *)(v42 + 16))
        goto LABEL_22;
      v9 = v38;
      v44 = v63;
      sub_13DED8(v63, v42 + v35 + v36);
      v10 = v52;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v9);
      isUniquelyReferenced_nonNull_native = sub_6685C(v44, type metadata accessor for Shelf);
      ++v26;
      v24 = v51;
      if (v43 == v56)
      {
        swift_release(v51);
        swift_bridgeObjectRelease(v50);
        return sub_5E160(v61, v49, type metadata accessor for Page);
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  result = swift_release(*(_QWORD *)&v64[0]);
  __break(1u);
  return result;
}

uint64_t Page.updatingShelfFooter(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t updated;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64[3];

  v4 = v2;
  v7 = type metadata accessor for Shelf(0);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  __chkstk_darwin(v7);
  v63 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5C154(&qword_324588);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Page(0);
  __chkstk_darwin(v13);
  v61 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *(_QWORD *)(a1 + 16);
  if (!v56)
    return sub_5E11C(v4, a2, type metadata accessor for Page);
  v60 = v12;
  v49 = a2;
  v16 = *(int *)(v14 + 52);
  v53 = v14;
  v54 = v16;
  v17 = *(_QWORD *)(v4 + v16);
  swift_bridgeObjectRetain(v17);
  v19 = sub_138038(v18);
  swift_bridgeObjectRelease(v17);
  v20 = v19[2];
  if (v20)
  {
    sub_5C154(&qword_31EF28);
    v21 = (void *)static _DictionaryStorage.allocate(capacity:)(v20);
  }
  else
  {
    v21 = &_swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v64[0] = v21;
  sub_13E0E0(v19, 1, v64);
  v48 = v3;
  isUniquelyReferenced_nonNull_native = (uint64_t)v19;
  if (!v3)
  {
    swift_bridgeObjectRelease(v19);
    v24 = *(_QWORD *)&v64[0];
    v55 = v4;
    sub_5E11C(v4, v61, type metadata accessor for Page);
    v59 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v50 = a1;
    v25 = swift_bridgeObjectRetain(a1);
    v26 = 0;
    v27 = v60;
    v51 = v24;
    v52 = v10;
    while (!__OFADD__(v26, 1))
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v27, v59 + *(_QWORD *)(v10 + 72) * v26, v9, v25);
      updated = PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.shelfID.getter(v9);
      v30 = v29;
      if (!*(_QWORD *)(v24 + 16) || (v31 = sub_582B4(updated, v29), (v32 & 1) == 0))
      {
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v30);
        swift_release(v24);
        v45 = sub_13D7E8();
        v46 = swift_allocError(&type metadata for Page.UpdateError, v45, 0, 0);
        *v47 = 0;
        swift_willThrow(v46);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v9);
        return sub_6685C(v61, type metadata accessor for Page);
      }
      v33 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v31);
      swift_bridgeObjectRelease(v30);
      if ((v33 & 0x8000000000000000) != 0)
        goto LABEL_20;
      v34 = *(_QWORD *)(v55 + v54);
      if (v33 >= *(_QWORD *)(v34 + 16))
        goto LABEL_21;
      v62 = v26 + 1;
      v35 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      v36 = *(_QWORD *)(v57 + 72) * v33;
      v37 = v63;
      sub_5E11C(v34 + v35 + v36, v63, type metadata accessor for Shelf);
      v38 = v9;
      PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.model.getter(v64, v9);
      v39 = (_QWORD *)(v37 + *(int *)(v58 + 56));
      sub_11F4C8(v39);
      sub_5DC98(v64, (uint64_t)v39);
      v40 = *(int *)(v53 + 52);
      v41 = v61;
      v42 = *(_QWORD *)(v61 + v40);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
      *(_QWORD *)(v41 + v40) = v42;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = sub_13D6D8(v42);
        v42 = isUniquelyReferenced_nonNull_native;
        *(_QWORD *)(v61 + v40) = isUniquelyReferenced_nonNull_native;
      }
      v43 = v62;
      v27 = v60;
      if (v33 >= *(_QWORD *)(v42 + 16))
        goto LABEL_22;
      v9 = v38;
      v44 = v63;
      sub_13DED8(v63, v42 + v35 + v36);
      v10 = v52;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v9);
      isUniquelyReferenced_nonNull_native = sub_6685C(v44, type metadata accessor for Shelf);
      ++v26;
      v24 = v51;
      if (v43 == v56)
      {
        swift_release(v51);
        swift_bridgeObjectRelease(v50);
        return sub_5E160(v61, v49, type metadata accessor for Page);
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  result = swift_release(*(_QWORD *)&v64[0]);
  __break(1u);
  return result;
}

_QWORD *sub_138038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;

  v31 = sub_5C154(&qword_3239A8);
  __chkstk_darwin(v31);
  v30 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v29 = (uint64_t *)((char *)&v25 - v4);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v25 - v6);
  v32 = &_swiftEmptyArrayStorage;
  sub_20C8DC(0, 0, 0);
  v8 = v32;
  v9 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v28 = v9;
  v26 = a1;
  if (v9)
  {
    v10 = 0;
    v11 = *(_QWORD *)(type metadata accessor for Shelf(0) - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v27 = *(_QWORD *)(v11 + 72);
    do
    {
      v13 = v31;
      v14 = (uint64_t)&v30[*(int *)(v31 + 48)];
      sub_5E11C(v12, v14, type metadata accessor for Shelf);
      v15 = (uint64_t)v29;
      v16 = (uint64_t)v29 + *(int *)(v13 + 48);
      *v29 = v10;
      sub_5E160(v14, v16, type metadata accessor for Shelf);
      sub_66F14(v15, (uint64_t)v7, &qword_3239A8);
      v17 = *v7;
      v18 = (uint64_t *)((char *)v7 + *(int *)(v13 + 48));
      v20 = *v18;
      v19 = v18[1];
      swift_bridgeObjectRetain(v19);
      sub_5E09C((uint64_t)v7, &qword_3239A8);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_20C8DC(0, v8[2] + 1, 1);
        v8 = v32;
      }
      v22 = v8[2];
      v21 = v8[3];
      if (v22 >= v21 >> 1)
      {
        sub_20C8DC(v21 > 1, v22 + 1, 1);
        v8 = v32;
      }
      ++v10;
      v8[2] = v22 + 1;
      v23 = &v8[3 * v22];
      v23[4] = v20;
      v23[5] = v19;
      v23[6] = v17;
      v12 += v27;
    }
    while (v28 != v10);
  }
  swift_bridgeObjectRelease(v26);
  return v8;
}

_QWORD *sub_138274(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];
  _QWORD *v19;

  v19 = &_swiftEmptyArrayStorage;
  sub_20C914(0, 0, 0);
  v2 = &_swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v3)
  {
    v4 = 0;
    v5 = a1 + 32;
    do
    {
      sub_5E0D8(v5, (uint64_t)v14);
      *(_QWORD *)&v15 = v4;
      sub_5DC98(v14, (uint64_t)&v15 + 8);
      v18[1] = v16;
      v18[2] = v17;
      v18[0] = v15;
      v6 = v15;
      v7 = v17;
      sub_66898((_QWORD *)v18 + 1, v17);
      dispatch thunk of ComponentModel.id.getter(&v15, v7, *((_QWORD *)&v7 + 1));
      *((_QWORD *)&v17 + 1) = v6;
      sub_5E09C((uint64_t)v18, &qword_3259F0);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_20C914(0, v2[2] + 1, 1);
        v2 = v19;
      }
      v9 = v2[2];
      v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_20C914(v8 > 1, v9 + 1, 1);
        v2 = v19;
      }
      ++v4;
      v2[2] = v9 + 1;
      v10 = &v2[6 * v9];
      v11 = v15;
      v12 = v17;
      v10[3] = v16;
      v10[4] = v12;
      v10[2] = v11;
      v5 += 40;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t Page.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Page(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 20), a1, &qword_3217B8);
}

uint64_t Page.subtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Page(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 24), a1, &qword_3217B8);
}

uint64_t Page.pageMarginConfiguration.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Page(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t Page.isUber.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Page(0) + 32));
}

uint64_t Page.toolbarPrincipal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Page(0);
  return sub_5E1A4(v1 + *(int *)(v3 + 36), a1, &qword_322F98);
}

double Page.leadingToolbarItems.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for Page(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 40))).n128_u64[0];
  return result;
}

double Page.trailingToolbarItems.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for Page(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 44))).n128_u64[0];
  return result;
}

BookStoreUI::Page::StackType_optional __swiftcall Page.StackType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BookStoreUI::Page::StackType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E6848, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t Page.StackType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1953720684;
  else
    return 0x676150666C656873;
}

uint64_t sub_1385FC(char *a1, char *a2)
{
  return sub_19672C(*a1, *a2);
}

Swift::Int sub_138608()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 1953720684;
  else
    v2 = 0x676150666C656873;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE900000000000065;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_138684(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 1953720684;
  else
    v2 = 0x676150666C656873;
  if (*v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE900000000000065;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1386DC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 1953720684;
  else
    v3 = 0x676150666C656873;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE900000000000065;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookStoreUI::Page::StackType_optional sub_138754(Swift::String *a1)
{
  return Page.StackType.init(rawValue:)(*a1);
}

void sub_138760(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1953720684;
  if (!*v1)
    v2 = 0x676150666C656873;
  v3 = 0xE900000000000065;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_13879C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1401D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1387F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1401D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t Page.stackType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Page(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 48));
  return result;
}

double Page.shelves.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for Page(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 52))).n128_u64[0];
  return result;
}

uint64_t Page.shelfIDToLoadMore.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Page(0) + 56));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t Page.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Page(0) + 60);
  v4 = type metadata accessor for PageData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double Page.additionalEventData.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for Page(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 64))).n128_u64[0];
  return result;
}

uint64_t Page.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Page(0) + 68);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Page.isValidFallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Page(0) + 72));
}

uint64_t Page.intentToLoadMore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v3 = sub_5C154(&qword_325818);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Shelf(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - v11;
  result = type metadata accessor for Page(0);
  v14 = (uint64_t *)(v1 + *(int *)(result + 56));
  v15 = v14[1];
  if (!v15)
    goto LABEL_16;
  v16 = *(int *)(result + 52);
  v17 = *(_QWORD *)(v1 + v16);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v28 = v6;
    v29 = v12;
    v30 = a1;
    v19 = *v14;
    v20 = v17 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v21 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(v17);
    while (1)
    {
      sub_5E11C(v20, (uint64_t)v9, type metadata accessor for Shelf);
      v22 = v9[1];
      v23 = *v9 == v19 && v15 == v22;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v9, v22, v19, v15, 0) & 1) != 0)
        break;
      sub_6685C((uint64_t)v9, type metadata accessor for Shelf);
      v20 += v21;
      if (!--v18)
      {
        v24 = 1;
        goto LABEL_12;
      }
    }
    sub_5E160((uint64_t)v9, (uint64_t)v5, type metadata accessor for Shelf);
    v24 = 0;
LABEL_12:
    v12 = v29;
    a1 = v30;
    v6 = v28;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + v16));
    v24 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v24, 1, v6);
  v25 = swift_bridgeObjectRelease(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v25) == 1)
  {
    result = sub_5E09C((uint64_t)v5, &qword_325818);
LABEL_16:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  sub_5E160((uint64_t)v5, (uint64_t)v12, type metadata accessor for Shelf);
  sub_5E1A4((uint64_t)&v12[*(int *)(v6 + 72)], (uint64_t)v31, &qword_324BD8);
  v26 = v32;
  if (v32)
  {
    v27 = v33;
    sub_66898(v31, v32);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 8))(v12, v26, v27);
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v31);
  }
  else
  {
    sub_5E09C((uint64_t)v31, &qword_324BD8);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return sub_6685C((uint64_t)v12, type metadata accessor for Shelf);
}

uint64_t Page.shelfGridIDToLoadMore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = sub_5C154(&qword_325818);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Shelf(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - v11;
  result = type metadata accessor for Page(0);
  v14 = (uint64_t *)(v1 + *(int *)(result + 56));
  v15 = v14[1];
  if (!v15)
    goto LABEL_16;
  v16 = *(int *)(result + 52);
  v17 = *(_QWORD *)(v1 + v16);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v27 = v12;
    v28 = v6;
    v29 = a1;
    v19 = *v14;
    v20 = v17 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v21 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(v17);
    while (1)
    {
      sub_5E11C(v20, (uint64_t)v9, type metadata accessor for Shelf);
      v22 = v9[1];
      v23 = *v9 == v19 && v15 == v22;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v9, v22, v19, v15, 0) & 1) != 0)
        break;
      sub_6685C((uint64_t)v9, type metadata accessor for Shelf);
      v20 += v21;
      if (!--v18)
      {
        v24 = 1;
        goto LABEL_12;
      }
    }
    sub_5E160((uint64_t)v9, (uint64_t)v5, type metadata accessor for Shelf);
    v24 = 0;
LABEL_12:
    v6 = v28;
    a1 = v29;
    v12 = v27;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + v16));
    v24 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v24, 1, v6);
  v25 = swift_bridgeObjectRelease(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v25) == 1)
  {
    result = sub_5E09C((uint64_t)v5, &qword_325818);
LABEL_16:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  sub_5E160((uint64_t)v5, (uint64_t)v12, type metadata accessor for Shelf);
  sub_5DCB0((uint64_t)&v12[*(int *)(v6 + 40)], a1);
  return sub_6685C((uint64_t)v12, type metadata accessor for Shelf);
}

double Page.lifecycleEventHandlers.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for Page(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 76))).n128_u64[0];
  return result;
}

uint64_t Page.pageUpdatePublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Page(0);
  return swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 80)));
}

uint64_t Page.isPendingData.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Page(0) + 84));
}

uint64_t Page.isPendingData.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Page(0);
  *(_BYTE *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

Swift::Void (__swiftcall *Page.isPendingData.modify())()
{
  type metadata accessor for Page(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t Page.backgroundColor.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Page(0) + 88));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void Page.backgroundColor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Page(0) + 88));
  swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
}

Swift::Void (__swiftcall *Page.backgroundColor.modify())()
{
  type metadata accessor for Page(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t Page.backgroundTintInfo.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Page(0) + 92));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  return sub_13E36C(v4, v5, v6, v7, v8);
}

__n128 Page.backgroundTintInfo.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Page(0) + 92));
  sub_13E39C(*v3, v3[1], v3[2], v3[3], v3[4]);
  result = v5;
  *(_OWORD *)v3 = v6;
  *((__n128 *)v3 + 1) = v5;
  v3[4] = v2;
  return result;
}

Swift::Void (__swiftcall *Page.backgroundTintInfo.modify())()
{
  type metadata accessor for Page(0);
  return SwiftUICoverAnimationProvider.coverAnimationSourceInvalidateFrame();
}

uint64_t sub_13909C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1390DC + 4 * byte_260208[a1]))(0x756F72676B636162, 0xEF726F6C6F43646ELL);
}

unint64_t sub_1390DC()
{
  return 0xD000000000000012;
}

uint64_t sub_13923C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_13927C + 4 * byte_260217[a1]))(0x756F72676B636162, 0xEF726F6C6F43646ELL);
}

unint64_t sub_13927C()
{
  return 0xD000000000000012;
}

uint64_t sub_1393DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 68);
  v5 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_13941C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_139428(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_13909C(*a1);
  v5 = v4;
  v6 = sub_13909C(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1394B0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_13909C(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_139510(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_13909C(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_139550(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_13909C(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1395AC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_13D7A0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1395D8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_13909C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_139600()
{
  unsigned __int8 *v0;

  return sub_13923C(*v0);
}

unint64_t sub_139608@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_13D7A0(a1);
  *a2 = result;
  return result;
}

void sub_13962C(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_139638(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13E3CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_139660(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13E3CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Page.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;
  __n128 v43;
  uint64_t *v44;
  char *v46;
  int *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  Swift::String v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  char *v94;
  void (*v95)(char *, uint64_t, _QWORD);
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  _QWORD *v115;
  int *v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  int *v132;
  char *v133;
  char v134;
  __n128 v135;
  int *v136;
  __n128 v137;
  uint64_t v138;
  uint64_t *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t *v164;
  void (*v165)(char *, uint64_t);
  __int128 v166;
  uint64_t v167;
  int *v168;
  char *v169;
  _OWORD v170[2];
  uint64_t v171;
  char v172[8];
  char v173;

  v148 = a2;
  v149 = sub_5C154(&qword_324330);
  v151 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v150 = (char *)&v145 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5C154(&qword_325820);
  __chkstk_darwin(v4);
  v157 = (char *)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5C154(&qword_3202B0);
  __chkstk_darwin(v6);
  v152 = (uint64_t)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v161 = type metadata accessor for PageMetrics(0);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v153 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for UUID(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_325570);
  __chkstk_darwin(v10);
  v158 = (uint64_t)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for PageData(0);
  v167 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v13 = (char *)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5C154(&qword_3217B8);
  __chkstk_darwin(v14);
  v16 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v159 = (char *)&v145 - v18;
  v19 = sub_5C154(&qword_325828);
  v20 = *(_QWORD **)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v145 - v24;
  v26 = type metadata accessor for Page(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = &v28[v29[22]];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  *(_QWORD *)&v166 = v30;
  v168 = v29;
  v169 = v28;
  v31 = &v28[v29[23]];
  *((_QWORD *)v31 + 4) = 0;
  *(_OWORD *)v31 = 0u;
  *((_OWORD *)v31 + 1) = 0u;
  v163 = a1;
  v164 = (uint64_t *)v31;
  v32 = a1[3];
  v33 = a1[4];
  sub_66898(a1, v32);
  v34 = sub_13E3CC();
  v35 = v165;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Page.CodingKeys, &type metadata for Page.CodingKeys, v34, v32, v33);
  if (v35)
  {
    v40 = 0;
    v54 = v168;
    v41 = v169;
    v42 = v167;
    goto LABEL_4;
  }
  v147 = v22;
  v165 = (void (*)(char *, uint64_t))v20;
  v146 = v13;
  v36 = type metadata accessor for LocalizerRequest(0);
  LOBYTE(v170[0]) = 12;
  v37 = sub_648E0(&qword_325838, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
  v38 = (uint64_t)v159;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, v170, v19, v36, v37);
  v39 = v25;
  v46 = v169;
  v47 = v168;
  v48 = v19;
  v49 = v39;
  sub_66F14(v38, (uint64_t)&v169[v168[5]], &qword_3217B8);
  LOBYTE(v170[0]) = 11;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, v170, v48, v36, v37);
  v50 = v165;
  sub_66F14((uint64_t)v16, (uint64_t)&v46[v47[6]], &qword_3217B8);
  swift_beginAccess(&byte_3207D8, v172, 0, 0);
  v46[v47[7]] = byte_3207D8;
  LOBYTE(v170[0]) = 4;
  v51 = sub_648E0(&qword_325840, (uint64_t (*)(uint64_t))&type metadata accessor for PageData, (uint64_t)&protocol conformance descriptor for PageData);
  v52 = v158;
  v53 = v162;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v162, v170, v48, v162, v51);
  v54 = v47;
  v55 = (void (*)(char *, char *, uint64_t))v50[2];
  v56 = v147;
  v159 = v49;
  v57 = v49;
  v58 = v48;
  v55(v147, v57, v48);
  v42 = v167;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v52, 1, v53) == 1)
  {
    LOBYTE(v170[0]) = 5;
    v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v170, v58);
    v60 = v146;
    v81 = v59;
    v83 = v82;
    LOBYTE(v170[0]) = 7;
    v84 = KeyedDecodingContainer.decode(_:forKey:)(v170, v58);
    v145 = 0;
    PageData.init(pageID:pageType:)(v81, v83, v84, v90, v91);
    v92 = (void (*)(char *, uint64_t))*((_QWORD *)v165 + 1);
    v92(v56, v58);
    sub_5E09C(v158, &qword_325570);
    v53 = v162;
  }
  else
  {
    v145 = 0;
    v92 = (void (*)(char *, uint64_t))v50[1];
    v92(v56, v58);
    v60 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v146, v52, v53);
  }
  v61 = (*(uint64_t (**)(char *, char *, uint64_t))(v42 + 16))(&v169[v54[15]], v60, v53);
  *(_QWORD *)&v170[0] = PageData.pageType.getter(v61);
  *((_QWORD *)&v170[0] + 1) = v62;
  v63._countAndFlagsBits = 45;
  v63._object = (void *)0xE100000000000000;
  String.append(_:)(v63);
  v65 = PageData.pageID.getter(v64);
  v165 = v92;
  if (v66)
  {
    v67 = v65;
    v68 = v66;
  }
  else
  {
    v69 = v154;
    v70 = UUID.init()(v65);
    v67 = UUID.uuidString.getter(v70);
    v68 = v71;
    (*(void (**)(char *, uint64_t))(v155 + 8))(v69, v156);
  }
  v72._countAndFlagsBits = v67;
  v72._object = v68;
  String.append(_:)(v72);
  swift_bridgeObjectRelease(v68);
  v73 = *((_QWORD *)&v170[0] + 1);
  v74 = v169;
  *(_QWORD *)v169 = *(_QWORD *)&v170[0];
  *((_QWORD *)v74 + 1) = v73;
  LOBYTE(v170[0]) = 2;
  v75 = v159;
  v76 = v145;
  v77 = KeyedDecodingContainer.decode(_:forKey:)(v170, v58);
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v60, v162);
    v165(v75, v58);
    v40 = 2055;
    v41 = v74;
LABEL_4:
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v163);
    if ((v40 & 1) != 0)
      v43 = swift_bridgeObjectRelease(*((_QWORD *)v41 + 1));
    if ((v40 & 2) != 0)
    {
      sub_5E09C((uint64_t)&v41[v54[5]], &qword_3217B8);
      if ((v40 & 4) != 0)
      {
        sub_5E09C((uint64_t)&v41[v54[6]], &qword_3217B8);
        if ((v40 & 0x800) == 0)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    else if ((v40 & 4) != 0)
    {
      sub_5E09C((uint64_t)&v41[v54[6]], &qword_3217B8);
    }
    if ((v40 & 0x800) == 0)
    {
LABEL_12:
      v44 = v164;
      swift_bridgeObjectRelease(*(_QWORD *)(v166 + 8));
      return sub_13E39C(*v44, v44[1], v44[2], v44[3], v44[4]);
    }
LABEL_11:
    (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(&v41[v54[15]], v162, v43);
    goto LABEL_12;
  }
  v74[v54[8]] = v77 & 1;
  *(_QWORD *)&v74[v54[16]] = _swiftEmptyArrayStorage;
  v78 = sub_5C154(&qword_325848);
  LOBYTE(v170[0]) = 6;
  v79 = sub_13E54C(&qword_325850, &qword_325848, (void (*)(void))sub_13E410);
  v80 = (uint64_t)v157;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v78, v170, v58, v78, v79);
  v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v80, 1, v78);
  v86 = v80;
  if (v85 == 1)
  {
    sub_5E09C(v80, &qword_325820);
    v87 = v160;
    v88 = v152;
    v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v160 + 56))(v152, 1, 1, v161);
LABEL_26:
    v94 = v153;
    static PageMetrics.notInstrumented.getter(v89);
    sub_5E09C(v88, &qword_3202B0);
    v95 = *(void (**)(char *, uint64_t, _QWORD))(v87 + 32);
    goto LABEL_28;
  }
  v93 = v80;
  v88 = v152;
  sub_5E1A4(v93, v152, &qword_3202B0);
  sub_5E09C(v86, &qword_325848);
  v87 = v160;
  v89 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v160 + 48))(v88, 1, v161);
  if ((_DWORD)v89 == 1)
    goto LABEL_26;
  v95 = *(void (**)(char *, uint64_t, _QWORD))(v87 + 32);
  v94 = v153;
  v95(v153, v88, v161);
LABEL_28:
  v96 = v169;
  v95(&v169[v54[17]], (uint64_t)v94, v161);
  v173 = 10;
  v97 = sub_13E48C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Page.StackType, &v173, v58, &type metadata for Page.StackType, v97);
  v96[v54[12]] = v170[0] & 1;
  v98 = sub_5C154(&qword_325870);
  v173 = 9;
  v99 = sub_13E54C(&qword_325878, &qword_325870, (void (*)(void))sub_13E4D0);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v170, v98, &v173, v58, v98, v99);
  v100 = v54[13];
  *(_QWORD *)&v169[v100] = *(_QWORD *)&v170[0];
  LOBYTE(v170[0]) = 8;
  v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v170, v58);
  v102 = v169;
  v103 = (uint64_t *)&v169[v54[14]];
  *v103 = v101;
  v103[1] = v104;
  *(_QWORD *)((char *)v102 + v54[19]) = sub_5BD18((uint64_t)_swiftEmptyArrayStorage);
  v105 = (char *)v102 + v54[9];
  v106 = type metadata accessor for ToolbarPrincipalType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v105, 1, 1, v106);
  v107 = sub_5C154(&qword_325898);
  v173 = 13;
  v108 = sub_13E54C(&qword_3258A0, &qword_325898, (void (*)(void))sub_13E5B0);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v107, &v173, v58, v107, v108);
  v145 = 0;
  v158 = 0;
  v109 = *(_QWORD **)&v170[0];
  if (!*(_QWORD *)&v170[0])
    v109 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v169[v168[10]] = v109;
  v173 = 14;
  v110 = v58;
  v111 = v145;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v107, &v173, v58, v107, v108);
  v145 = v111;
  if (v111)
  {
    v112 = v167;
    (*(void (**)(char *, uint64_t))(v167 + 8))(v146, v162);
    v165(v159, v58);
    v113 = 0;
LABEL_37:
    v130 = v158;
    _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v163);
    v131 = v169;
    swift_bridgeObjectRelease(*((_QWORD *)v169 + 1));
    v132 = v168;
    sub_5E09C((uint64_t)&v131[v168[5]], &qword_3217B8);
    sub_5E09C((uint64_t)&v131[v132[6]], &qword_3217B8);
    sub_5E09C((uint64_t)&v131[v132[9]], &qword_322F98);
    v136 = v168;
    swift_bridgeObjectRelease(*(_QWORD *)&v169[v168[10]]);
    if ((v113 & 1) != 0)
    {
      v133 = v169;
      swift_bridgeObjectRelease(*(_QWORD *)&v169[v136[11]]);
      v134 = 1;
      if (!v130)
LABEL_42:
        swift_bridgeObjectRelease(*(_QWORD *)&v133[v136[13]]);
    }
    else
    {
      v134 = 0;
      v133 = v169;
      if (!v130)
        goto LABEL_42;
    }
    v135 = swift_bridgeObjectRelease(*(_QWORD *)&v133[v136[14] + 8]);
    (*(void (**)(char *, uint64_t, __n128))(v112 + 8))(&v133[v136[15]], v162, v135);
    v137 = swift_bridgeObjectRelease(*(_QWORD *)&v133[v136[16]]);
    (*(void (**)(char *, _QWORD, __n128))(v160 + 8))(&v133[v136[17]], v161, v137);
    swift_bridgeObjectRelease(*(_QWORD *)&v133[v136[19]]);
    if ((v134 & 1) != 0)
      swift_release(*(_QWORD *)&v133[v136[20]]);
    goto LABEL_12;
  }
  v114 = *(_QWORD **)&v170[0];
  if (!*(_QWORD *)&v170[0])
    v114 = _swiftEmptyArrayStorage;
  v116 = v168;
  v115 = v169;
  *(_QWORD *)&v169[v168[11]] = v114;
  v117 = sub_5C154(&qword_3200B8);
  v118 = v150;
  Empty.init(completeImmediately:)(1, v117, &type metadata for Never, &protocol witness table for Never);
  v119 = sub_13E62C();
  v120 = v149;
  v121 = Publisher.eraseToAnyPublisher()(v149, v119);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v118, v120);
  *(_QWORD *)((char *)v115 + v116[20]) = v121;
  *((_BYTE *)v115 + v116[21]) = 0;
  LOBYTE(v170[0]) = 0;
  v122 = v145;
  v123 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v170, v110);
  v145 = v122;
  if (v122)
    goto LABEL_36;
  v125 = v123;
  v126 = v124;
  v127 = (uint64_t *)v166;
  swift_bridgeObjectRelease(*(_QWORD *)(v166 + 8));
  *v127 = v125;
  v127[1] = v126;
  v173 = 1;
  v128 = sub_9BBC0();
  v129 = v145;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for TintColorInfo, &v173, v110, &type metadata for TintColorInfo, v128);
  v145 = v129;
  if (v129)
  {
LABEL_36:
    v112 = v167;
    (*(void (**)(char *, uint64_t))(v167 + 8))(v146, v162);
    v165(v159, v110);
    v113 = 1;
    goto LABEL_37;
  }
  v166 = v170[0];
  v161 = v170[1];
  v138 = v171;
  v139 = v164;
  sub_13E39C(*v164, v164[1], v164[2], v164[3], v164[4]);
  v140 = v161;
  *(_OWORD *)v139 = v166;
  *((_OWORD *)v139 + 1) = v140;
  v139[4] = v138;
  v141 = (uint64_t)v169;
  v169[v168[18]] = 0;
  v142 = *(_QWORD *)(v141 + v100);
  swift_bridgeObjectRetain(v142);
  v144 = sub_DFE1C(v143);
  swift_bridgeObjectRelease_n(v142, 2);
  *(_QWORD *)(v141 + v100) = v144;
  (*(void (**)(char *, uint64_t))(v167 + 8))(v146, v162);
  v165(v159, v110);
  sub_5E11C(v141, v148, type metadata accessor for Page);
  _s11BookStoreUI5ShelfV20HeaderComponentModelVwxx_0(v163);
  return sub_6685C(v141, type metadata accessor for Page);
}

uint64_t sub_13A7C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Page.init(from:)(a1, a2);
}

unint64_t sub_13A7DC(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return sub_13DD30(result, v2);
    }
    __break(1u);
  }
  return result;
}

Swift::Int sub_13A804(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_31F020);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_13AB10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  uint64_t v44;
  char v45;
  _QWORD v46[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_31EE58);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v14];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v5);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v40)
              goto LABEL_36;
            v25 = v41[v14];
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v5 + 56) + 40 * v22;
    v35 = *(_QWORD *)v34;
    v36 = *(_QWORD *)(v34 + 8);
    v45 = *(_BYTE *)(v34 + 16);
    v37 = *(_QWORD *)(v34 + 32);
    v44 = *(_QWORD *)(v34 + 24);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
    }
    Hasher.init(_seed:)(v46, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v46, v33, v32);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 40 * v18;
    *(_QWORD *)v20 = v35;
    *(_QWORD *)(v20 + 8) = v36;
    *(_BYTE *)(v20 + 16) = v45;
    *(_QWORD *)(v20 + 24) = v44;
    *(_QWORD *)(v20 + 32) = v37;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_13AE64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  Swift::Int result;
  Swift::Int v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  Swift::UInt v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[9];

  v3 = v2;
  v41 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_5C154(&qword_31EE48);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = (Swift::Int)v39;
        if (v22 >= v38)
          goto LABEL_35;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_35;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_35:
              if ((v37 & 1) == 0)
              {
                result = swift_release(v9);
                v3 = v36;
                goto LABEL_42;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v12 >= v38)
                  goto LABEL_35;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_25;
              }
            }
            v12 = v24;
          }
        }
LABEL_25:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v41);
      Hasher.init(_seed:)(v42, *(_QWORD *)(v11 + 40));
      Hasher._combine(_:)(v25);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_BYTE *)(*(_QWORD *)(v11 + 48) + v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v41);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release(v9);
LABEL_42:
  *v3 = v11;
  return result;
}

Swift::Int sub_13B1A0(uint64_t a1, uint64_t a2)
{
  return sub_13B1C8(a1, a2, type metadata accessor for GenreHighlight, &qword_31F1B0);
}

Swift::Int sub_13B1B4(uint64_t a1, uint64_t a2)
{
  return sub_13B1C8(a1, a2, type metadata accessor for TopAuthorHighlightData, &qword_31F1A0);
}

Swift::Int sub_13B1C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::Int result;
  int64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t (*v49)(_QWORD);
  _QWORD v50[9];

  v6 = v4;
  v49 = a3;
  v9 = a3(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_5C154(a4);
  v48 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v46 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v6;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v25 = v24 | (v21 << 6);
      goto LABEL_24;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v45)
      break;
    v27 = v46;
    v28 = v46[v26];
    ++v21;
    if (!v28)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v45)
        goto LABEL_36;
      v28 = v46[v21];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_36:
          swift_release(v12);
          v6 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            v21 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v21 >= v45)
              goto LABEL_36;
            v28 = v46[v21];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v21 = v29;
      }
    }
LABEL_23:
    v18 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_24:
    v30 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v25);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v47 + 72);
    v34 = *(_QWORD *)(v12 + 56) + v33 * v25;
    if ((v48 & 1) != 0)
    {
      sub_5E160(v34, (uint64_t)v11, v49);
    }
    else
    {
      sub_5E11C(v34, (uint64_t)v11, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50, *(_QWORD *)(v14 + 40));
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v22);
    *v23 = v32;
    v23[1] = v31;
    result = sub_5E160((uint64_t)v11, *(_QWORD *)(v14 + 56) + v33 * v22, v49);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v6 = v44;
  v27 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 >= 64)
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v6 = v14;
  return result;
}

Swift::Int sub_13B53C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_31EF28);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_13B844(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_325808);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v38 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((v39 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v38 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((v39 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v42 = *(_QWORD *)(v26 + 32);
      v40 = v27;
      v41 = v28;
    }
    else
    {
      sub_5DCB0(v26, (uint64_t)&v40);
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v13 + 8 * v32);
      }
      while (v36 == -1);
      v16 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v40;
    v19 = v41;
    *(_QWORD *)(v17 + 32) = v42;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16) = v29;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_13BB48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];
  _OWORD v41[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_31EF88);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_25;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v17 >= v37)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v38 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v37)
        goto LABEL_37;
      v19 = *(_QWORD *)(v38 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v37)
        {
LABEL_37:
          swift_release(v5);
          if ((v39 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v19 = *(_QWORD *)(v38 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_46;
            if (v13 >= v37)
              goto LABEL_37;
            v19 = *(_QWORD *)(v38 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_24;
          }
        }
        v13 = v20;
      }
    }
LABEL_24:
    v11 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_25:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v39 & 1) != 0)
    {
      sub_5D000(v22, v41);
    }
    else
    {
      sub_5DC5C((uint64_t)v22, (uint64_t)v41);
      v23 = v21;
    }
    v24 = *(_QWORD *)(v8 + 40);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v27 = v26;
    Hasher.init(_seed:)(v40, v24);
    String.hash(into:)(v40, v25, v27);
    v28 = Hasher._finalize()();
    swift_bridgeObjectRelease(v27);
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v14 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v21;
    sub_5D000(v41, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v18 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v18, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

Swift::Int sub_13BE80(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33[9];
  __int128 v34[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_31EEC8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v30 = v3;
    v31 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v31)
          goto LABEL_37;
        v18 = v32[v17];
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v31)
            goto LABEL_37;
          v18 = v32[v9];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v31)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v30;
                goto LABEL_44;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                v9 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_46;
                if (v9 >= v31)
                  goto LABEL_37;
                v18 = v32[v9];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v9 = v19;
          }
        }
LABEL_24:
        v12 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0)
        sub_5DC98(v21, (uint64_t)v34);
      else
        sub_5E0D8((uint64_t)v21, (uint64_t)v34);
      Hasher.init(_seed:)(v33, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v8 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v14) = v20;
      result = sub_5DC98(v34, *(_QWORD *)(v8 + 56) + 40 * v14);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

Swift::Int sub_13C15C(uint64_t a1, uint64_t a2)
{
  return sub_13C1A0(a1, a2, &qword_31EEE8, (void (*)(uint64_t, _BYTE *))sub_5DC98);
}

Swift::Int sub_13C170(uint64_t a1, uint64_t a2)
{
  return sub_13C730(a1, a2, &qword_31ED78, (void (*)(uint64_t, _BYTE *))sub_5D000, (void (*)(uint64_t, _BYTE *))sub_5E1EC);
}

Swift::Int sub_13C18C(uint64_t a1, uint64_t a2)
{
  return sub_13C1A0(a1, a2, &qword_31F148, (void (*)(uint64_t, _BYTE *))sub_5DC98);
}

Swift::Int sub_13C1A0(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  char v40;
  _QWORD v41[9];
  _BYTE v42[40];

  v6 = v4;
  v8 = *v4;
  if (*(_QWORD *)(*v4 + 24) <= a1)
    v9 = a1;
  else
    v9 = *(_QWORD *)(*v4 + 24);
  sub_5C154(a3);
  v40 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v8, v9, a2);
  v11 = v10;
  if (*(_QWORD *)(v8 + 16))
  {
    v37 = v6;
    v12 = 1 << *(_BYTE *)(v8 + 32);
    v39 = (_QWORD *)(v8 + 64);
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v8 + 64);
    v38 = (unint64_t)(v12 + 63) >> 6;
    v15 = v10 + 64;
    result = swift_retain(v8);
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v17 << 6);
      }
      else
      {
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v22 >= v38)
          goto LABEL_37;
        v23 = v39[v22];
        ++v17;
        if (!v23)
        {
          v17 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_37;
          v23 = v39[v17];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_37:
              swift_release(v8);
              v6 = v37;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v8 + 32);
                if (v36 >= 64)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v17 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v17 >= v38)
                  goto LABEL_37;
                v23 = v39[v17];
                ++v24;
                if (v23)
                  goto LABEL_24;
              }
            }
            v17 = v24;
          }
        }
LABEL_24:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v27 = *v25;
      v26 = v25[1];
      v28 = *(_QWORD *)(v8 + 56) + 40 * v21;
      if ((v40 & 1) != 0)
      {
        a4(v28, v42);
      }
      else
      {
        sub_5E0D8(v28, (uint64_t)v42);
        swift_bridgeObjectRetain(v26);
      }
      Hasher.init(_seed:)(v41, *(_QWORD *)(v11 + 40));
      String.hash(into:)(v41, v27, v26);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v11 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
      *v19 = v27;
      v19[1] = v26;
      result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v42, *(_QWORD *)(v11 + 56) + 40 * v18);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release(v8);
  *v6 = v11;
  return result;
}

uint64_t sub_13C4B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = v2;
  v6 = sub_5C154(&qword_31F128);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_5C154(&qword_325A08);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  if (*(_QWORD *)(v10 + 16))
  {
    v28 = v3;
    v12 = 1 << *(_BYTE *)(v10 + 32);
    v13 = (_QWORD *)(v10 + 64);
    v14 = -1;
    if (v12 < 64)
      v14 = ~(-1 << v12);
    v15 = v14 & *(_QWORD *)(v10 + 64);
    v16 = (unint64_t)(v12 + 63) >> 6;
    result = swift_retain(v10);
    v18 = 0;
    while (1)
    {
      if (v15)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v18 << 6);
      }
      else
      {
        v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
        if (v22 >= v16)
          goto LABEL_25;
        v23 = v13[v22];
        ++v18;
        if (!v23)
        {
          v18 = v22 + 1;
          if (v22 + 1 >= v16)
            goto LABEL_25;
          v23 = v13[v18];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v16)
            {
LABEL_25:
              swift_release(v10);
              if ((a2 & 1) == 0)
              {
                result = swift_release(v10);
                v3 = v28;
                goto LABEL_32;
              }
              v26 = 1 << *(_BYTE *)(v10 + 32);
              if (v26 >= 64)
                bzero((void *)(v10 + 64), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v13 = -1 << v26;
              v3 = v28;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v23 = v13[v24];
            if (!v23)
            {
              while (1)
              {
                v18 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_34;
                if (v18 >= v16)
                  goto LABEL_25;
                v23 = v13[v18];
                ++v24;
                if (v23)
                  goto LABEL_22;
              }
            }
            v18 = v24;
          }
        }
LABEL_22:
        v15 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      v25 = *(_QWORD *)(v10 + 48) + *(_QWORD *)(v7 + 72) * v21;
      if ((a2 & 1) != 0)
      {
        sub_66F14(v25, (uint64_t)v9, &qword_31F128);
        v19 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v21);
      }
      else
      {
        sub_5E1A4(v25, (uint64_t)v9, &qword_31F128);
        v19 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v21);
        swift_bridgeObjectRetain(v19);
      }
      result = sub_13D338((uint64_t)v9, v19, v11);
    }
  }
  result = swift_release(v10);
LABEL_32:
  *v3 = v11;
  return result;
}

Swift::Int sub_13C714(uint64_t a1, uint64_t a2)
{
  return sub_13C730(a1, a2, &qword_31EEB8, (void (*)(uint64_t, _BYTE *))sub_5D000, (void (*)(uint64_t, _BYTE *))sub_5DC5C);
}

Swift::Int sub_13C730(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(uint64_t, _BYTE *))
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v43;
  _QWORD v44[9];
  _BYTE v45[32];

  v7 = v5;
  v9 = *v5;
  if (*(_QWORD *)(*v5 + 24) <= a1)
    v10 = a1;
  else
    v10 = *(_QWORD *)(*v5 + 24);
  sub_5C154(a3);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v9, v10, a2);
  v12 = v11;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_44;
  v13 = 1 << *(_BYTE *)(v9 + 32);
  v41 = v9 + 64;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v9 + 64);
  v39 = v7;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v16 = v11 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_25;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v9 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_37;
      v25 = *(_QWORD *)(v41 + 8 * v18);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_37:
          swift_release(v9);
          v7 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_46;
            if (v18 >= v40)
              goto LABEL_37;
            v25 = *(_QWORD *)(v41 + 8 * v18);
            ++v26;
            if (v25)
              goto LABEL_24;
          }
        }
        v18 = v26;
      }
    }
LABEL_24:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_25:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v9 + 56) + 32 * v22;
    if ((v43 & 1) != 0)
    {
      a4(v30, v45);
    }
    else
    {
      a5(v30, v45);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v12 + 40));
    String.hash(into:)(v44, v29, v28);
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v45, *(_QWORD *)(v12 + 56) + 32 * v19);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v9);
  v7 = v39;
  v24 = (_QWORD *)(v9 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v38 = 1 << *(_BYTE *)(v9 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_44:
  result = swift_release(v9);
  *v7 = v12;
  return result;
}

Swift::Int sub_13CA58(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_31ED70);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_13CD7C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::Int v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::UInt v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int *v35;
  char v36;
  uint64_t v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_31ED68);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v34;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v24 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v26 = *v24;
      v25 = v24[1];
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v15 + 8 * v29);
        }
        while (v33 == -1);
        v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v23;
      v17 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v16);
      *v17 = v26;
      v17[1] = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_13D04C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5C154(&qword_3259D8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v32)
          goto LABEL_39;
        v18 = v33[v17];
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v32)
            goto LABEL_39;
          v18 = v33[v9];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v32)
            {
LABEL_39:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_46;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v33[v19];
            if (!v18)
            {
              while (1)
              {
                v9 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_48;
                if (v9 >= v32)
                  goto LABEL_39;
                v18 = v33[v9];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v9 = v19;
          }
        }
LABEL_24:
        v12 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56);
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v22 = *(_QWORD *)(v20 + 8 * v16);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v20 + 8 * v16));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      if ((_DWORD)v21 == 9)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v21);
      }
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v14) = v21;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_46:
  *v3 = v8;
  return result;
}

uint64_t sub_13D338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t result;
  _QWORD v19[9];

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5C154(&qword_31F128);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v19, *(_QWORD *)(a3 + 40));
  sub_5E1A4(a1, (uint64_t)v13, &qword_31F128);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1u);
    v14 = sub_648E0(&qword_31F130, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v15 = Hasher._finalize()();
  v16 = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
  result = sub_66F14(a1, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v11 + 72) * v16, &qword_31F128);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16) = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

uint64_t sub_13D518(uint64_t a1, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_5700C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = (uint64_t)&v5[40 * a1 + 32];
  v15 = sub_5C154(&qword_31F110);
  swift_arrayDestroy(v14, v8, v15);
  if (!v9)
    goto LABEL_20;
  v16 = *((_QWORD *)v5 + 2);
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (char *)(v14 + 40);
    v20 = &v5[40 * a2 + 32];
    if ((char *)(v14 + 40) != v20 || v19 >= &v20[40 * v18])
      memmove(v19, v20, 40 * v18);
    v21 = *((_QWORD *)v5 + 2);
    v17 = __OFADD__(v21, v9);
    v22 = v21 + v9;
    if (!v17)
    {
      *((_QWORD *)v5 + 2) = v22;
LABEL_20:
      sub_5E0D8(a3, v14);
      return sub_5E09C(a3, &qword_325A18);
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

char *sub_13D6C4(uint64_t a1)
{
  return sub_56CB4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_13D6D8(unint64_t a1)
{
  return sub_572A8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

char *sub_13D6EC(uint64_t a1)
{
  return sub_572BC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_13D700(unint64_t a1)
{
  return sub_572D0(0, *(_QWORD *)(a1 + 16), 0, a1);
}

char *sub_13D714(uint64_t a1)
{
  return sub_57168(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_13D728(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_668BC(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_5DC98(&v12, v10 + 40 * a1 + 32);
}

unint64_t sub_13D7A0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2E66C0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xF)
    return 15;
  else
    return v3;
}

unint64_t sub_13D7E8()
{
  unint64_t result;

  result = qword_3257D8;
  if (!qword_3257D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page.UpdateError, &type metadata for Page.UpdateError);
    atomic_store(result, (unint64_t *)&qword_3257D8);
  }
  return result;
}

uint64_t sub_13D82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Shelf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_13D870(unint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD v66[9];
  unint64_t v67;

  v4 = type metadata accessor for Shelf(0);
  __chkstk_darwin(v4);
  v61 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v60 = (uint64_t)&v57 - v7;
  __chkstk_darwin(v8);
  v63 = (uint64_t *)((char *)&v57 - v10);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 16);
  if (!v12)
    return;
  v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v65 = v11 + v13;
  v64 = *(_QWORD *)(v9 + 72);
  v67 = a2 + 56;
  swift_bridgeObjectRetain(v11);
  v14 = 0;
  v58 = v12;
  v59 = a1;
  v62 = v13;
  while (1)
  {
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_4;
    v15 = (uint64_t *)(v65 + v64 * v14);
    v16 = *v15;
    v17 = v15[1];
    Hasher.init(_seed:)(v66, *(_QWORD *)(a2 + 40));
    swift_bridgeObjectRetain(v17);
    String.hash(into:)(v66, v16, v17);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v67 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
      break;
LABEL_3:
    swift_bridgeObjectRelease(v17);
    v12 = v58;
LABEL_4:
    if (++v14 == v12)
    {
      swift_bridgeObjectRelease(v11);
      return;
    }
  }
  v21 = *(_QWORD *)(a2 + 48);
  v22 = (_QWORD *)(v21 + 16 * v20);
  v23 = v22[1];
  v24 = *v22 == v16 && v23 == v17;
  if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v16, v17, 0) & 1) == 0)
  {
    v25 = ~v19;
    for (i = v20 + 1; ; i = v27 + 1)
    {
      v27 = i & v25;
      if (((*(_QWORD *)(v67 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
        break;
      v28 = (_QWORD *)(v21 + 16 * v27);
      v29 = v28[1];
      v30 = *v28 == v16 && v29 == v17;
      if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v16, v17, 0) & 1) != 0)
        goto LABEL_20;
    }
    goto LABEL_3;
  }
LABEL_20:
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v17);
  v31 = v14 + 1;
  v32 = v59;
  v34 = v62;
  v33 = v63;
  if (__OFADD__(v14, 1))
    goto LABEL_64;
  v35 = *(_QWORD *)(v11 + 16);
  if (v31 != v35)
  {
    v65 = a2;
    do
    {
      if (v31 >= v35)
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        return;
      }
      v36 = v31 * v64;
      sub_5E11C(v11 + v34 + v31 * v64, (uint64_t)v33, type metadata accessor for Shelf);
      if (*(_QWORD *)(v65 + 16))
      {
        v38 = *v33;
        v37 = v33[1];
        v39 = v65;
        Hasher.init(_seed:)(v66, *(_QWORD *)(v65 + 40));
        swift_bridgeObjectRetain(v37);
        String.hash(into:)(v66, v38, v37);
        v40 = Hasher._finalize()();
        v41 = -1 << *(_BYTE *)(v39 + 32);
        v42 = v40 & ~v41;
        if (((*(_QWORD *)(v67 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
        {
          v43 = *(_QWORD *)(v39 + 48);
          v44 = (_QWORD *)(v43 + 16 * v42);
          v45 = v44[1];
          v46 = *v44 == v38 && v45 == v37;
          if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v44, v45, v38, v37, 0) & 1) != 0)
          {
LABEL_31:
            swift_bridgeObjectRelease(v37);
            v33 = v63;
            sub_6685C((uint64_t)v63, type metadata accessor for Shelf);
            v32 = v59;
            v34 = v62;
            goto LABEL_51;
          }
          v47 = ~v41;
          while (1)
          {
            v42 = (v42 + 1) & v47;
            if (((*(_QWORD *)(v67 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
              break;
            v48 = (_QWORD *)(v43 + 16 * v42);
            v49 = v48[1];
            v50 = *v48 == v38 && v49 == v37;
            if (v50 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v48, v49, v38, v37, 0) & 1) != 0)
              goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease(v37);
        v32 = v59;
        v34 = v62;
        v33 = v63;
      }
      sub_6685C((uint64_t)v33, type metadata accessor for Shelf);
      if (v14 != v31)
      {
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_59;
        v51 = *v32;
        v52 = *(_QWORD *)(*v32 + 16);
        if (v14 >= v52)
          goto LABEL_60;
        v53 = v51 + v34;
        v54 = v14 * v64;
        sub_5E11C(v53 + v14 * v64, v60, type metadata accessor for Shelf);
        if (v31 >= v52)
          goto LABEL_61;
        sub_5E11C(v53 + v36, v61, type metadata accessor for Shelf);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
        *v32 = v51;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v51 = sub_13D6D8(v51);
          *v32 = v51;
        }
        v34 = v62;
        if (v14 >= *(_QWORD *)(v51 + 16))
          goto LABEL_62;
        sub_13D82C(v61, v51 + v62 + v54);
        if (v31 >= *(_QWORD *)(*v32 + 16))
          goto LABEL_63;
        sub_13D82C(v60, *v32 + v34 + v36);
        v33 = v63;
      }
      v56 = __OFADD__(v14++, 1);
      if (v56)
        goto LABEL_58;
LABEL_51:
      v56 = __OFADD__(v31++, 1);
      if (v56)
        goto LABEL_57;
      v11 = *v32;
      v35 = *(_QWORD *)(*v32 + 16);
    }
    while (v31 != v35);
  }
}

uint64_t sub_13DD30(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_572A8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for Shelf(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17, v21);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_13DED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Shelf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_13DF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5C154(&qword_323C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *sub_13DF64(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_572BC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_5C154(&qword_31EF38);
  result = (void *)swift_arrayDestroy(&v4[40 * a1 + 32], v7, v12);
  if (!v7)
    goto LABEL_20;
  v14 = *((_QWORD *)v4 + 2);
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_26;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = &v4[40 * a2 + 32];
    if (a1 != a2 || &v4[40 * a1 + 32] >= &v17[40 * v16])
      result = memmove(&v4[40 * a1 + 32], v17, 40 * v16);
    v18 = *((_QWORD *)v4 + 2);
    v15 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v15)
    {
      *((_QWORD *)v4 + 2) = v19;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

void sub_13E0E0(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = a1[2];
  if (v3)
  {
    v8 = a1[4];
    v7 = a1[5];
    v44 = a1[6];
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(a1);
    v11 = sub_582B4(v8, v7);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v15 = v10;
    if (v9[3] < v14)
    {
      sub_13B53C(v14, a2 & 1);
      v16 = sub_582B4(v8, v7);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_27:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return;
      }
      v11 = v16;
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v19 = 8 * v11;
      v20 = *(_QWORD *)(v18[7] + 8 * v11);
      swift_bridgeObjectRelease(v7);
      *(_QWORD *)(v18[7] + v19) = v20;
      v21 = v3 - 1;
      if (v3 == 1)
      {
LABEL_14:
        swift_bridgeObjectRelease(a1);
        return;
      }
LABEL_16:
      v26 = a1 + 9;
      while (1)
      {
        v30 = *(v26 - 2);
        v29 = *(v26 - 1);
        v31 = *v26;
        v32 = (_QWORD *)*a3;
        swift_bridgeObjectRetain(v29);
        v33 = sub_582B4(v30, v29);
        v35 = v32[2];
        v36 = (v34 & 1) == 0;
        v24 = __OFADD__(v35, v36);
        v37 = v35 + v36;
        if (v24)
          goto LABEL_25;
        v38 = v34;
        if (v32[3] < v37)
        {
          sub_13B53C(v37, 1);
          v33 = sub_582B4(v30, v29);
          if ((v38 & 1) != (v39 & 1))
            goto LABEL_27;
        }
        v40 = (_QWORD *)*a3;
        if ((v38 & 1) != 0)
        {
          v27 = 8 * v33;
          v28 = *(_QWORD *)(v40[7] + 8 * v33);
          swift_bridgeObjectRelease(v29);
          *(_QWORD *)(v40[7] + v27) = v28;
        }
        else
        {
          v40[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v40[6] + 16 * v33);
          *v41 = v30;
          v41[1] = v29;
          *(_QWORD *)(v40[7] + 8 * v33) = v31;
          v42 = v40[2];
          v24 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v24)
            goto LABEL_26;
          v40[2] = v43;
        }
        v26 += 3;
        if (!--v21)
          goto LABEL_14;
      }
    }
    if ((a2 & 1) != 0)
    {
      v18 = (_QWORD *)*a3;
      if ((v10 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_5AF8C();
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v18[(v11 >> 6) + 8] |= 1 << v11;
    v22 = (uint64_t *)(v18[6] + 16 * v11);
    *v22 = v8;
    v22[1] = v7;
    *(_QWORD *)(v18[7] + 8 * v11) = v44;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v18[2] = v25;
    v21 = v3 - 1;
    if (v3 == 1)
      goto LABEL_14;
    goto LABEL_16;
  }
}

uint64_t sub_13E36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_13E39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

unint64_t sub_13E3CC()
{
  unint64_t result;

  result = qword_325830;
  if (!qword_325830)
  {
    result = swift_getWitnessTable(&unk_26068C, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_325830);
  }
  return result;
}

unint64_t sub_13E410()
{
  unint64_t result;
  uint64_t v1;

  result = qword_325858;
  if (!qword_325858)
  {
    v1 = sub_667D0(&qword_3202B0);
    sub_648E0(&qword_325860, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t)&protocol conformance descriptor for PageMetrics);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_325858);
  }
  return result;
}

unint64_t sub_13E48C()
{
  unint64_t result;

  result = qword_325868;
  if (!qword_325868)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page.StackType, &type metadata for Page.StackType);
    atomic_store(result, (unint64_t *)&qword_325868);
  }
  return result;
}

unint64_t sub_13E4D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_325880;
  if (!qword_325880)
  {
    v1 = sub_667D0(&qword_325888);
    sub_648E0(&qword_325890, type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_325880);
  }
  return result;
}

uint64_t sub_13E54C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_667D0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> DiscardOnError<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_13E5B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3258A8;
  if (!qword_3258A8)
  {
    v1 = sub_667D0(&qword_3258B0);
    sub_648E0(&qword_3258B8, (uint64_t (*)(uint64_t))&type metadata accessor for ToolbarItemType, (uint64_t)&protocol conformance descriptor for ToolbarItemType);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_3258A8);
  }
  return result;
}

unint64_t sub_13E62C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_324338;
  if (!qword_324338)
  {
    v1 = sub_667D0(&qword_324330);
    result = swift_getWitnessTable(&protocol conformance descriptor for Empty<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_324338);
  }
  return result;
}

unint64_t sub_13E67C()
{
  unint64_t result;

  result = qword_3258C0;
  if (!qword_3258C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page.StackType, &type metadata for Page.StackType);
    atomic_store(result, (unint64_t *)&qword_3258C0);
  }
  return result;
}

unint64_t sub_13E6C4()
{
  unint64_t result;

  result = qword_3258C8;
  if (!qword_3258C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page.UpdateError, &type metadata for Page.UpdateError);
    atomic_store(result, (unint64_t *)&qword_3258C8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Page(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  char *v67;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_5C154(&qword_3217B8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[6];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)((char *)a2 + v17, 1, v11))
    {
      v20 = sub_5C154(&qword_3217B8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
    }
    v21 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v21) = *((_BYTE *)a2 + v21);
    v22 = a3[9];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for ToolbarPrincipalType(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_5C154(&qword_322F98);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = a3[10];
    v29 = a3[11];
    v30 = *(_QWORD *)((char *)a2 + v28);
    *(_QWORD *)((char *)v4 + v28) = v30;
    v31 = *(_QWORD *)((char *)a2 + v29);
    *(_QWORD *)((char *)v4 + v29) = v31;
    v32 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    v33 = *(_QWORD *)((char *)a2 + v32);
    *(_QWORD *)((char *)v4 + v32) = v33;
    v34 = a3[14];
    v35 = a3[15];
    v36 = (_QWORD *)((char *)v4 + v34);
    v37 = (_QWORD *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (char *)v4 + v35;
    v67 = (char *)a2 + v35;
    v40 = type metadata accessor for PageData(0);
    v41 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v40 - 8) + 16);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    v42 = swift_bridgeObjectRetain(v38);
    v41(v39, v67, v40, v42);
    v43 = a3[16];
    v44 = a3[17];
    v45 = *(_QWORD *)((char *)a2 + v43);
    *(_QWORD *)((char *)v4 + v43) = v45;
    v46 = (char *)v4 + v44;
    v47 = (char *)a2 + v44;
    v48 = type metadata accessor for PageMetrics(0);
    v49 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v48 - 8) + 16);
    v50 = swift_bridgeObjectRetain(v45);
    v49(v46, v47, v48, v50);
    v51 = a3[19];
    *((_BYTE *)v4 + a3[18]) = *((_BYTE *)a2 + a3[18]);
    v52 = *(_QWORD *)((char *)a2 + v51);
    *(_QWORD *)((char *)v4 + v51) = v52;
    v53 = a3[20];
    v54 = a3[21];
    v55 = *(_QWORD *)((char *)a2 + v53);
    *(_QWORD *)((char *)v4 + v53) = v55;
    *((_BYTE *)v4 + v54) = *((_BYTE *)a2 + v54);
    v56 = a3[22];
    v57 = a3[23];
    v58 = (_QWORD *)((char *)v4 + v56);
    v59 = (_QWORD *)((char *)a2 + v56);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = (char *)v4 + v57;
    v62 = (char *)a2 + v57;
    v63 = *(_QWORD *)((char *)a2 + v57 + 8);
    swift_bridgeObjectRetain(v52);
    swift_retain(v55);
    swift_bridgeObjectRetain(v60);
    if (v63)
    {
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *((_QWORD *)v61 + 1) = v63;
      *((_OWORD *)v61 + 1) = *((_OWORD *)v62 + 1);
      v64 = *((_QWORD *)v62 + 4);
      *((_QWORD *)v61 + 4) = v64;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v64);
    }
    else
    {
      v65 = *((_OWORD *)v62 + 1);
      *(_OWORD *)v61 = *(_OWORD *)v62;
      *((_OWORD *)v61 + 1) = v65;
      *((_QWORD *)v61 + 4) = *((_QWORD *)v62 + 4);
    }
  }
  return v4;
}

